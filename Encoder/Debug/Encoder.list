
Encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae88  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800af94  0800af94  0001af94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b004  0800b004  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  0800b004  0800b004  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b004  0800b004  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b004  0800b004  0001b004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b008  0800b008  0001b008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800b00c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000143c  20000180  0800b18c  00020180  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200015bc  0800b18c  000215bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015dbb  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a7e  00000000  00000000  00035f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001468  00000000  00000000  000399e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e0  00000000  00000000  0003ae50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b36a  00000000  00000000  0003c130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000183b5  00000000  00000000  0005749a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ffc5  00000000  00000000  0006f84f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ff814  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000546c  00000000  00000000  000ff864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000180 	.word	0x20000180
 8000128:	00000000 	.word	0x00000000
 800012c:	0800af7c 	.word	0x0800af7c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000184 	.word	0x20000184
 8000148:	0800af7c 	.word	0x0800af7c

0800014c <FLASH_apaga>:
  * @param  Endereço:	  Endereço inicial da página que deseja ser apagada
  * @param  Paginas:      Quantidade de páginas que deseja apagar a partir do endereço inicial.
  *
  * @retval Void
  */
void FLASH_apaga(uint32_t endereco, uint8_t paginas){
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	70fb      	strb	r3, [r7, #3]
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8000158:	f002 f91c 	bl	8002394 <HAL_FLASH_Unlock>

	/* Allow Access to option bytes sector */
	HAL_FLASH_OB_Unlock();
 800015c:	f002 f950 	bl	8002400 <HAL_FLASH_OB_Unlock>

	/* Fill EraseInit structure*/
	FLASH_EraseInitTypeDef EraseInitStruct;			    // cria estrutura de dados para armazenar informações de apagamento
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;  // definição padrão da biblioteca HAL
 8000160:	2300      	movs	r3, #0
 8000162:	613b      	str	r3, [r7, #16]
	EraseInitStruct.PageAddress = endereco;				// definição do usuário do endereço da página que deseja apagar
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.NbPages = paginas;					// número de páginas que serão apagadas
 8000168:	78fb      	ldrb	r3, [r7, #3]
 800016a:	61fb      	str	r3, [r7, #28]

	uint32_t PageError;									// Valor do endereço caso ocorra erro no apagamento da função HAL_FLASHEx_Erase
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK){
 800016c:	f107 020c 	add.w	r2, r7, #12
 8000170:	f107 0310 	add.w	r3, r7, #16
 8000174:	4611      	mov	r1, r2
 8000176:	4618      	mov	r0, r3
 8000178:	f002 fa20 	bl	80025bc <HAL_FLASHEx_Erase>
		// rotina caso ocorra erro no processo de apagar
	}

	HAL_FLASH_OB_Lock();
 800017c:	f002 f95c 	bl	8002438 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 8000180:	f002 f92e 	bl	80023e0 <HAL_FLASH_Lock>
}
 8000184:	bf00      	nop
 8000186:	3720      	adds	r7, #32
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}

0800018c <FLASH_escreve_16bits>:
  * @param  Endereço:	  Endereço da memória em que o dado de 16 bits deverá ser armazenado. Endereço deve ser múltiplo de 2)
  * @param  *dado:        Ponteiro para o valor a ser inserido no endereço de memória especificado
  *
  * @retval Void
  */
void FLASH_escreve_16bits(uint32_t endereco, uint16_t *dado){
 800018c:	b5b0      	push	{r4, r5, r7, lr}
 800018e:	b082      	sub	sp, #8
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
 8000194:	6039      	str	r1, [r7, #0]

	HAL_FLASH_Unlock();
 8000196:	f002 f8fd 	bl	8002394 <HAL_FLASH_Unlock>
	HAL_FLASH_OB_Unlock();
 800019a:	f002 f931 	bl	8002400 <HAL_FLASH_OB_Unlock>

	if( HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,(uint64_t)endereco, *dado) != HAL_OK){
 800019e:	683b      	ldr	r3, [r7, #0]
 80001a0:	881b      	ldrh	r3, [r3, #0]
 80001a2:	b29b      	uxth	r3, r3
 80001a4:	2200      	movs	r2, #0
 80001a6:	461c      	mov	r4, r3
 80001a8:	4615      	mov	r5, r2
 80001aa:	4622      	mov	r2, r4
 80001ac:	462b      	mov	r3, r5
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	2001      	movs	r0, #1
 80001b2:	f002 f87f 	bl	80022b4 <HAL_FLASH_Program>
		// rotina caso ocorra erro no processo de apagar
	}

	HAL_FLASH_OB_Lock();
 80001b6:	f002 f93f 	bl	8002438 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 80001ba:	f002 f911 	bl	80023e0 <HAL_FLASH_Lock>
}
 80001be:	bf00      	nop
 80001c0:	3708      	adds	r7, #8
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bdb0      	pop	{r4, r5, r7, pc}

080001c6 <FLASH_le_16bits>:
  * @param  Endereço:	  Endereço da memória em que o dado de 16 bits deverá ser lido. Endereço deve ser múltiplo de 2
  * @param  *dado:        Ponteiro para armazenar o valor a ser lido no endereço de memória especificado
  *
  * @retval Void
  */
void FLASH_le_16bits(uint32_t endereco, uint16_t *dado){
 80001c6:	b480      	push	{r7}
 80001c8:	b083      	sub	sp, #12
 80001ca:	af00      	add	r7, sp, #0
 80001cc:	6078      	str	r0, [r7, #4]
 80001ce:	6039      	str	r1, [r7, #0]

	*dado = *(uint32_t*)(endereco);
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	b29a      	uxth	r2, r3
 80001d6:	683b      	ldr	r3, [r7, #0]
 80001d8:	801a      	strh	r2, [r3, #0]

}
 80001da:	bf00      	nop
 80001dc:	370c      	adds	r7, #12
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr

080001e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e4:	b590      	push	{r4, r7, lr}
 80001e6:	b089      	sub	sp, #36	; 0x24
 80001e8:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ea:	f001 fe1f 	bl	8001e2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ee:	f000 fadb 	bl	80007a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f2:	f000 fbff 	bl	80009f4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001f6:	f000 fb31 	bl	800085c <MX_TIM2_Init>
  MX_TIM3_Init();
 80001fa:	f000 fb83 	bl	8000904 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80001fe:	f000 fbcf 	bl	80009a0 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000202:	f00a f9c5 	bl	800a590 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 8000206:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800020a:	f001 fe71 	bl	8001ef0 <HAL_Delay>
  //HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
  HAL_UART_Receive_IT(&huart2, (uint8_t *)RXBuffer, 1);
 800020e:	2201      	movs	r2, #1
 8000210:	49b8      	ldr	r1, [pc, #736]	; (80004f4 <main+0x310>)
 8000212:	48b9      	ldr	r0, [pc, #740]	; (80004f8 <main+0x314>)
 8000214:	f005 fc71 	bl	8005afa <HAL_UART_Receive_IT>
   StateMachine = iddle;
 8000218:	4bb8      	ldr	r3, [pc, #736]	; (80004fc <main+0x318>)
 800021a:	2249      	movs	r2, #73	; 0x49
 800021c:	701a      	strb	r2, [r3, #0]
   char reset_status;
   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,GPIO_PIN_SET);
 800021e:	2201      	movs	r2, #1
 8000220:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000224:	48b6      	ldr	r0, [pc, #728]	; (8000500 <main+0x31c>)
 8000226:	f002 fbf5 	bl	8002a14 <HAL_GPIO_WritePin>
//   reset_status = deviceReset();
	HAL_GPIO_WritePin(GPIOB,STATUS_Pin, GPIO_PIN_SET);
 800022a:	2201      	movs	r2, #1
 800022c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000230:	48b4      	ldr	r0, [pc, #720]	; (8000504 <main+0x320>)
 8000232:	f002 fbef 	bl	8002a14 <HAL_GPIO_WritePin>
  char startFlag = 0;
 8000236:	2300      	movs	r3, #0
 8000238:	717b      	strb	r3, [r7, #5]
  char stopFlag = 1;
 800023a:	2301      	movs	r3, #1
 800023c:	713b      	strb	r3, [r7, #4]
  char deviceFlag = 0;
 800023e:	2300      	movs	r3, #0
 8000240:	71fb      	strb	r3, [r7, #7]
  char i=0;
 8000242:	2300      	movs	r3, #0
 8000244:	71bb      	strb	r3, [r7, #6]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  switch(StateMachine)
 8000246:	4bad      	ldr	r3, [pc, #692]	; (80004fc <main+0x318>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	3b30      	subs	r3, #48	; 0x30
 800024c:	2b19      	cmp	r3, #25
 800024e:	d8fa      	bhi.n	8000246 <main+0x62>
 8000250:	a201      	add	r2, pc, #4	; (adr r2, 8000258 <main+0x74>)
 8000252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000256:	bf00      	nop
 8000258:	08000393 	.word	0x08000393
 800025c:	080003b1 	.word	0x080003b1
 8000260:	080003e9 	.word	0x080003e9
 8000264:	08000439 	.word	0x08000439
 8000268:	0800049f 	.word	0x0800049f
 800026c:	08000659 	.word	0x08000659
 8000270:	080006a1 	.word	0x080006a1
 8000274:	08000247 	.word	0x08000247
 8000278:	08000247 	.word	0x08000247
 800027c:	08000247 	.word	0x08000247
 8000280:	08000247 	.word	0x08000247
 8000284:	08000247 	.word	0x08000247
 8000288:	08000247 	.word	0x08000247
 800028c:	08000247 	.word	0x08000247
 8000290:	08000247 	.word	0x08000247
 8000294:	08000247 	.word	0x08000247
 8000298:	08000247 	.word	0x08000247
 800029c:	08000247 	.word	0x08000247
 80002a0:	08000247 	.word	0x08000247
 80002a4:	08000247 	.word	0x08000247
 80002a8:	08000247 	.word	0x08000247
 80002ac:	0800071f 	.word	0x0800071f
 80002b0:	08000247 	.word	0x08000247
 80002b4:	08000247 	.word	0x08000247
 80002b8:	08000247 	.word	0x08000247
 80002bc:	080002c1 	.word	0x080002c1
	  {
	  	  case iddle:
//	  		while(EndReception!=Fim);
	  		if(USB_FLAG == 1)
 80002c0:	4b91      	ldr	r3, [pc, #580]	; (8000508 <main+0x324>)
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d10a      	bne.n	80002de <main+0xfa>
	  		{
	  			while(EndReception!=Fim) command(buffer);
 80002c8:	e002      	b.n	80002d0 <main+0xec>
 80002ca:	4890      	ldr	r0, [pc, #576]	; (800050c <main+0x328>)
 80002cc:	f000 fcfc 	bl	8000cc8 <command>
 80002d0:	4b8f      	ldr	r3, [pc, #572]	; (8000510 <main+0x32c>)
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	2b44      	cmp	r3, #68	; 0x44
 80002d6:	d1f8      	bne.n	80002ca <main+0xe6>
	  			USB_FLAG = 0;
 80002d8:	4b8b      	ldr	r3, [pc, #556]	; (8000508 <main+0x324>)
 80002da:	2200      	movs	r2, #0
 80002dc:	701a      	strb	r2, [r3, #0]
	  		}
	  		if(EndReception == Fim)
 80002de:	4b8c      	ldr	r3, [pc, #560]	; (8000510 <main+0x32c>)
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	2b44      	cmp	r3, #68	; 0x44
 80002e4:	d113      	bne.n	800030e <main+0x12a>
	  		{
	  			structDados();
 80002e6:	f000 fc57 	bl	8000b98 <structDados>
				errorFlag = VerificaErro();
 80002ea:	f000 fca1 	bl	8000c30 <VerificaErro>
 80002ee:	4603      	mov	r3, r0
 80002f0:	b2da      	uxtb	r2, r3
 80002f2:	4b88      	ldr	r3, [pc, #544]	; (8000514 <main+0x330>)
 80002f4:	701a      	strb	r2, [r3, #0]
				if(errorFlag != OK)
 80002f6:	4b87      	ldr	r3, [pc, #540]	; (8000514 <main+0x330>)
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	2b41      	cmp	r3, #65	; 0x41
 80002fc:	d003      	beq.n	8000306 <main+0x122>
				 {
					StateMachine = error;
 80002fe:	4b7f      	ldr	r3, [pc, #508]	; (80004fc <main+0x318>)
 8000300:	2245      	movs	r2, #69	; 0x45
 8000302:	701a      	strb	r2, [r3, #0]
	  				EndReception = Reset;
	  			}

	  		}
	  		else if(USB_FLAG == 0 && EndReception == '\0') StateMachine = iddle;
	  	  break;
 8000304:	e235      	b.n	8000772 <main+0x58e>
					StateMachine = Inicio;
 8000306:	4b7d      	ldr	r3, [pc, #500]	; (80004fc <main+0x318>)
 8000308:	2230      	movs	r2, #48	; 0x30
 800030a:	701a      	strb	r2, [r3, #0]
	  	  break;
 800030c:	e231      	b.n	8000772 <main+0x58e>
	  		else if(EndReception == Reset)
 800030e:	4b80      	ldr	r3, [pc, #512]	; (8000510 <main+0x32c>)
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	2b52      	cmp	r3, #82	; 0x52
 8000314:	d12f      	bne.n	8000376 <main+0x192>
	  			reset_status = deviceReset();
 8000316:	f000 fc09 	bl	8000b2c <deviceReset>
 800031a:	4603      	mov	r3, r0
 800031c:	70fb      	strb	r3, [r7, #3]
	  			if(reset_status == HAL_OK)
 800031e:	78fb      	ldrb	r3, [r7, #3]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d121      	bne.n	8000368 <main+0x184>
	  				StateMachine = iddle;
 8000324:	4b75      	ldr	r3, [pc, #468]	; (80004fc <main+0x318>)
 8000326:	2249      	movs	r2, #73	; 0x49
 8000328:	701a      	strb	r2, [r3, #0]
	  				HAL_GPIO_WritePin(GPIOB,ERRO_Pin, GPIO_PIN_RESET);
 800032a:	2200      	movs	r2, #0
 800032c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000330:	4874      	ldr	r0, [pc, #464]	; (8000504 <main+0x320>)
 8000332:	f002 fb6f 	bl	8002a14 <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(GPIOB,STOP_Pin, GPIO_PIN_RESET);
 8000336:	2200      	movs	r2, #0
 8000338:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800033c:	4871      	ldr	r0, [pc, #452]	; (8000504 <main+0x320>)
 800033e:	f002 fb69 	bl	8002a14 <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(GPIOB,CONFIG_Pin, GPIO_PIN_RESET);
 8000342:	2200      	movs	r2, #0
 8000344:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000348:	486e      	ldr	r0, [pc, #440]	; (8000504 <main+0x320>)
 800034a:	f002 fb63 	bl	8002a14 <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(GPIOB,ACQUISITION_Pin, GPIO_PIN_RESET);
 800034e:	2200      	movs	r2, #0
 8000350:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000354:	486b      	ldr	r0, [pc, #428]	; (8000504 <main+0x320>)
 8000356:	f002 fb5d 	bl	8002a14 <HAL_GPIO_WritePin>
	  				EndReception = '\0';
 800035a:	4b6d      	ldr	r3, [pc, #436]	; (8000510 <main+0x32c>)
 800035c:	2200      	movs	r2, #0
 800035e:	701a      	strb	r2, [r3, #0]
	  				USB_FLAG = 0;
 8000360:	4b69      	ldr	r3, [pc, #420]	; (8000508 <main+0x324>)
 8000362:	2200      	movs	r2, #0
 8000364:	701a      	strb	r2, [r3, #0]
	  	  break;
 8000366:	e204      	b.n	8000772 <main+0x58e>
	  				StateMachine = iddle;
 8000368:	4b64      	ldr	r3, [pc, #400]	; (80004fc <main+0x318>)
 800036a:	2249      	movs	r2, #73	; 0x49
 800036c:	701a      	strb	r2, [r3, #0]
	  				EndReception = Reset;
 800036e:	4b68      	ldr	r3, [pc, #416]	; (8000510 <main+0x32c>)
 8000370:	2252      	movs	r2, #82	; 0x52
 8000372:	701a      	strb	r2, [r3, #0]
	  	  break;
 8000374:	e1fd      	b.n	8000772 <main+0x58e>
	  		else if(USB_FLAG == 0 && EndReception == '\0') StateMachine = iddle;
 8000376:	4b64      	ldr	r3, [pc, #400]	; (8000508 <main+0x324>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2b00      	cmp	r3, #0
 800037c:	f040 81f9 	bne.w	8000772 <main+0x58e>
 8000380:	4b63      	ldr	r3, [pc, #396]	; (8000510 <main+0x32c>)
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 81f4 	bne.w	8000772 <main+0x58e>
 800038a:	4b5c      	ldr	r3, [pc, #368]	; (80004fc <main+0x318>)
 800038c:	2249      	movs	r2, #73	; 0x49
 800038e:	701a      	strb	r2, [r3, #0]
	  	  break;
 8000390:	e1ef      	b.n	8000772 <main+0x58e>

	  	  case Inicio:
	  		  		StateMachine = selectCommand(receive_message);
 8000392:	4b61      	ldr	r3, [pc, #388]	; (8000518 <main+0x334>)
 8000394:	466c      	mov	r4, sp
 8000396:	f103 0210 	add.w	r2, r3, #16
 800039a:	ca07      	ldmia	r2, {r0, r1, r2}
 800039c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80003a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003a2:	f000 fd69 	bl	8000e78 <selectCommand>
 80003a6:	4603      	mov	r3, r0
 80003a8:	b2da      	uxtb	r2, r3
 80003aa:	4b54      	ldr	r3, [pc, #336]	; (80004fc <main+0x318>)
 80003ac:	701a      	strb	r2, [r3, #0]
	  	  break;
 80003ae:	e1e3      	b.n	8000778 <main+0x594>

	  	  case Identification:
				getID();
 80003b0:	f000 fd9c 	bl	8000eec <getID>
				TransmitData(receive_message,infoDevice.Id,8);
 80003b4:	4b59      	ldr	r3, [pc, #356]	; (800051c <main+0x338>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4619      	mov	r1, r3
 80003ba:	4b57      	ldr	r3, [pc, #348]	; (8000518 <main+0x334>)
 80003bc:	2208      	movs	r2, #8
 80003be:	9204      	str	r2, [sp, #16]
 80003c0:	9103      	str	r1, [sp, #12]
 80003c2:	466c      	mov	r4, sp
 80003c4:	f103 0210 	add.w	r2, r3, #16
 80003c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80003ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80003ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003d0:	f000 fe08 	bl	8000fe4 <TransmitData>
				StateMachine = iddle;
 80003d4:	4b49      	ldr	r3, [pc, #292]	; (80004fc <main+0x318>)
 80003d6:	2249      	movs	r2, #73	; 0x49
 80003d8:	701a      	strb	r2, [r3, #0]
				EndReception = '\0';
 80003da:	4b4d      	ldr	r3, [pc, #308]	; (8000510 <main+0x32c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	701a      	strb	r2, [r3, #0]
				USB_FLAG = 0;
 80003e0:	4b49      	ldr	r3, [pc, #292]	; (8000508 <main+0x324>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	701a      	strb	r2, [r3, #0]
	  	  break;
 80003e6:	e1c7      	b.n	8000778 <main+0x594>

	  	  case Config:
	  		DeviceParamenter(receive_message);
 80003e8:	4b4b      	ldr	r3, [pc, #300]	; (8000518 <main+0x334>)
 80003ea:	466c      	mov	r4, sp
 80003ec:	f103 0210 	add.w	r2, r3, #16
 80003f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80003f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80003f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003f8:	f000 fdb0 	bl	8000f5c <DeviceParamenter>
	  		HAL_GPIO_WritePin(GPIOB,CONFIG_Pin, GPIO_PIN_SET);
 80003fc:	2201      	movs	r2, #1
 80003fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000402:	4840      	ldr	r0, [pc, #256]	; (8000504 <main+0x320>)
 8000404:	f002 fb06 	bl	8002a14 <HAL_GPIO_WritePin>
	  		TransmitData(receive_message,2,7);
 8000408:	4b43      	ldr	r3, [pc, #268]	; (8000518 <main+0x334>)
 800040a:	2207      	movs	r2, #7
 800040c:	9204      	str	r2, [sp, #16]
 800040e:	2202      	movs	r2, #2
 8000410:	9203      	str	r2, [sp, #12]
 8000412:	466c      	mov	r4, sp
 8000414:	f103 0210 	add.w	r2, r3, #16
 8000418:	ca07      	ldmia	r2, {r0, r1, r2}
 800041a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800041e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000420:	f000 fde0 	bl	8000fe4 <TransmitData>
	  		StateMachine = iddle;
 8000424:	4b35      	ldr	r3, [pc, #212]	; (80004fc <main+0x318>)
 8000426:	2249      	movs	r2, #73	; 0x49
 8000428:	701a      	strb	r2, [r3, #0]
			EndReception = '\0';
 800042a:	4b39      	ldr	r3, [pc, #228]	; (8000510 <main+0x32c>)
 800042c:	2200      	movs	r2, #0
 800042e:	701a      	strb	r2, [r3, #0]
	  		USB_FLAG = 0;
 8000430:	4b35      	ldr	r3, [pc, #212]	; (8000508 <main+0x324>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
		   break;
 8000436:	e19f      	b.n	8000778 <main+0x594>

	  	  case Start:
	  		startFlag = StartDevice(deviceFlag);
 8000438:	79fb      	ldrb	r3, [r7, #7]
 800043a:	4618      	mov	r0, r3
 800043c:	f000 fdb4 	bl	8000fa8 <StartDevice>
 8000440:	4603      	mov	r3, r0
 8000442:	717b      	strb	r3, [r7, #5]
	  		deviceFlag = startFlag;
 8000444:	797b      	ldrb	r3, [r7, #5]
 8000446:	71fb      	strb	r3, [r7, #7]
	  		if(deviceFlag == 1)
 8000448:	79fb      	ldrb	r3, [r7, #7]
 800044a:	2b01      	cmp	r3, #1
 800044c:	d11d      	bne.n	800048a <main+0x2a6>
	  		{
	  			HAL_GPIO_WritePin(GPIOB,STOP_Pin, GPIO_PIN_RESET);
 800044e:	2200      	movs	r2, #0
 8000450:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000454:	482b      	ldr	r0, [pc, #172]	; (8000504 <main+0x320>)
 8000456:	f002 fadd 	bl	8002a14 <HAL_GPIO_WritePin>
	  			TransmitData(receive_message,0,7);
 800045a:	4b2f      	ldr	r3, [pc, #188]	; (8000518 <main+0x334>)
 800045c:	2207      	movs	r2, #7
 800045e:	9204      	str	r2, [sp, #16]
 8000460:	2200      	movs	r2, #0
 8000462:	9203      	str	r2, [sp, #12]
 8000464:	466c      	mov	r4, sp
 8000466:	f103 0210 	add.w	r2, r3, #16
 800046a:	ca07      	ldmia	r2, {r0, r1, r2}
 800046c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000470:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000472:	f000 fdb7 	bl	8000fe4 <TransmitData>
				StateMachine = iddle;
 8000476:	4b21      	ldr	r3, [pc, #132]	; (80004fc <main+0x318>)
 8000478:	2249      	movs	r2, #73	; 0x49
 800047a:	701a      	strb	r2, [r3, #0]
				EndReception = '\0';
 800047c:	4b24      	ldr	r3, [pc, #144]	; (8000510 <main+0x32c>)
 800047e:	2200      	movs	r2, #0
 8000480:	701a      	strb	r2, [r3, #0]
				USB_FLAG = 0;
 8000482:	4b21      	ldr	r3, [pc, #132]	; (8000508 <main+0x324>)
 8000484:	2200      	movs	r2, #0
 8000486:	701a      	strb	r2, [r3, #0]
	  			StateMachine = iddle;
	  			EndReception = '\0';
	  			USB_FLAG = 0;
	  		}

		  break;
 8000488:	e176      	b.n	8000778 <main+0x594>
	  			StateMachine = iddle;
 800048a:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <main+0x318>)
 800048c:	2249      	movs	r2, #73	; 0x49
 800048e:	701a      	strb	r2, [r3, #0]
	  			EndReception = '\0';
 8000490:	4b1f      	ldr	r3, [pc, #124]	; (8000510 <main+0x32c>)
 8000492:	2200      	movs	r2, #0
 8000494:	701a      	strb	r2, [r3, #0]
	  			USB_FLAG = 0;
 8000496:	4b1c      	ldr	r3, [pc, #112]	; (8000508 <main+0x324>)
 8000498:	2200      	movs	r2, #0
 800049a:	701a      	strb	r2, [r3, #0]
		  break;
 800049c:	e16c      	b.n	8000778 <main+0x594>
	  	  case Read:
			if(timerEnable == HAL_OK)
 800049e:	4b20      	ldr	r3, [pc, #128]	; (8000520 <main+0x33c>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d117      	bne.n	80004d6 <main+0x2f2>
			{
					pulseCounter = 0;
 80004a6:	4b1f      	ldr	r3, [pc, #124]	; (8000524 <main+0x340>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
					timerEnable = 1;
 80004ac:	4b1c      	ldr	r3, [pc, #112]	; (8000520 <main+0x33c>)
 80004ae:	2201      	movs	r2, #1
 80004b0:	601a      	str	r2, [r3, #0]
					acquiredTime = 0;
 80004b2:	4b1d      	ldr	r3, [pc, #116]	; (8000528 <main+0x344>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
					newTime = 0;
 80004b8:	4b1c      	ldr	r3, [pc, #112]	; (800052c <main+0x348>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
					HAL_TIM_Base_Start_IT(&htim3);
 80004be:	481c      	ldr	r0, [pc, #112]	; (8000530 <main+0x34c>)
 80004c0:	f004 fcd6 	bl	8004e70 <HAL_TIM_Base_Start_IT>
					readFlag = 1;
 80004c4:	4b1b      	ldr	r3, [pc, #108]	; (8000534 <main+0x350>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	701a      	strb	r2, [r3, #0]
					EndReception = '\0';
 80004ca:	4b11      	ldr	r3, [pc, #68]	; (8000510 <main+0x32c>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	701a      	strb	r2, [r3, #0]
					USB_FLAG = 0;
 80004d0:	4b0d      	ldr	r3, [pc, #52]	; (8000508 <main+0x324>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	701a      	strb	r2, [r3, #0]

			}
	  		if(readStatus == AUTO)
 80004d6:	4b18      	ldr	r3, [pc, #96]	; (8000538 <main+0x354>)
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	2b46      	cmp	r3, #70	; 0x46
 80004dc:	d173      	bne.n	80005c6 <main+0x3e2>
	  		{
//				if(transmitFlag == 1 && EndReception!=Fim)
	  			if(transmitFlag == 1 && USB_FLAG == 0)
 80004de:	4b17      	ldr	r3, [pc, #92]	; (800053c <main+0x358>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d157      	bne.n	8000596 <main+0x3b2>
 80004e6:	4b08      	ldr	r3, [pc, #32]	; (8000508 <main+0x324>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d153      	bne.n	8000596 <main+0x3b2>
				{
				    for(i=0;i<10;i++) counterPulso[i] = fimPulso[i];
 80004ee:	2300      	movs	r3, #0
 80004f0:	71bb      	strb	r3, [r7, #6]
 80004f2:	e030      	b.n	8000556 <main+0x372>
 80004f4:	200002b8 	.word	0x200002b8
 80004f8:	2000022c 	.word	0x2000022c
 80004fc:	2000036e 	.word	0x2000036e
 8000500:	40011000 	.word	0x40011000
 8000504:	40010c00 	.word	0x40010c00
 8000508:	200002b6 	.word	0x200002b6
 800050c:	20000270 	.word	0x20000270
 8000510:	200002b7 	.word	0x200002b7
 8000514:	20000000 	.word	0x20000000
 8000518:	20000340 	.word	0x20000340
 800051c:	2000035c 	.word	0x2000035c
 8000520:	20000370 	.word	0x20000370
 8000524:	2000033c 	.word	0x2000033c
 8000528:	200002d4 	.word	0x200002d4
 800052c:	200002d0 	.word	0x200002d0
 8000530:	200001e4 	.word	0x200001e4
 8000534:	20000338 	.word	0x20000338
 8000538:	200002c6 	.word	0x200002c6
 800053c:	200002cc 	.word	0x200002cc
 8000540:	79ba      	ldrb	r2, [r7, #6]
 8000542:	79bb      	ldrb	r3, [r7, #6]
 8000544:	498d      	ldr	r1, [pc, #564]	; (800077c <main+0x598>)
 8000546:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800054a:	498d      	ldr	r1, [pc, #564]	; (8000780 <main+0x59c>)
 800054c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000550:	79bb      	ldrb	r3, [r7, #6]
 8000552:	3301      	adds	r3, #1
 8000554:	71bb      	strb	r3, [r7, #6]
 8000556:	79bb      	ldrb	r3, [r7, #6]
 8000558:	2b09      	cmp	r3, #9
 800055a:	d9f1      	bls.n	8000540 <main+0x35c>
					TransmitData(receive_message,counterPulso,67);
 800055c:	4b89      	ldr	r3, [pc, #548]	; (8000784 <main+0x5a0>)
 800055e:	2243      	movs	r2, #67	; 0x43
 8000560:	9204      	str	r2, [sp, #16]
 8000562:	4a87      	ldr	r2, [pc, #540]	; (8000780 <main+0x59c>)
 8000564:	9203      	str	r2, [sp, #12]
 8000566:	466c      	mov	r4, sp
 8000568:	f103 0210 	add.w	r2, r3, #16
 800056c:	ca07      	ldmia	r2, {r0, r1, r2}
 800056e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000572:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000574:	f000 fd36 	bl	8000fe4 <TransmitData>
					transmitFlag = 0;
 8000578:	4b83      	ldr	r3, [pc, #524]	; (8000788 <main+0x5a4>)
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
					HAL_GPIO_TogglePin(GPIOA, ACQUISITION_Pin);
 800057e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000582:	4882      	ldr	r0, [pc, #520]	; (800078c <main+0x5a8>)
 8000584:	f002 fa5e 	bl	8002a44 <HAL_GPIO_TogglePin>
					StateMachine = iddle;
 8000588:	4b81      	ldr	r3, [pc, #516]	; (8000790 <main+0x5ac>)
 800058a:	2249      	movs	r2, #73	; 0x49
 800058c:	701a      	strb	r2, [r3, #0]
					EndReception = '\0';
 800058e:	4b81      	ldr	r3, [pc, #516]	; (8000794 <main+0x5b0>)
 8000590:	2200      	movs	r2, #0
 8000592:	701a      	strb	r2, [r3, #0]
	  				for(i=0;i<10;i++) counterPulso[i] = 0;
					StateMachine = iddle;
					EndReception = '\0';
					USB_FLAG = 0;
	  		}
	  	  break;
 8000594:	e0ef      	b.n	8000776 <main+0x592>
	  			else if(USB_FLAG == 1)
 8000596:	4b80      	ldr	r3, [pc, #512]	; (8000798 <main+0x5b4>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d10f      	bne.n	80005be <main+0x3da>
					HAL_GPIO_WritePin(GPIOB,CONFIG_Pin, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005a4:	487d      	ldr	r0, [pc, #500]	; (800079c <main+0x5b8>)
 80005a6:	f002 fa35 	bl	8002a14 <HAL_GPIO_WritePin>
					HAL_TIM_Base_Stop_IT(&htim3);
 80005aa:	487d      	ldr	r0, [pc, #500]	; (80007a0 <main+0x5bc>)
 80005ac:	f004 fcb2 	bl	8004f14 <HAL_TIM_Base_Stop_IT>
					HAL_Delay(1);
 80005b0:	2001      	movs	r0, #1
 80005b2:	f001 fc9d 	bl	8001ef0 <HAL_Delay>
					StateMachine = iddle;
 80005b6:	4b76      	ldr	r3, [pc, #472]	; (8000790 <main+0x5ac>)
 80005b8:	2249      	movs	r2, #73	; 0x49
 80005ba:	701a      	strb	r2, [r3, #0]
	  	  break;
 80005bc:	e0db      	b.n	8000776 <main+0x592>
					StateMachine = Inicio;
 80005be:	4b74      	ldr	r3, [pc, #464]	; (8000790 <main+0x5ac>)
 80005c0:	2230      	movs	r2, #48	; 0x30
 80005c2:	701a      	strb	r2, [r3, #0]
	  	  break;
 80005c4:	e0d7      	b.n	8000776 <main+0x592>
	  		else if (readStatus == MAN)
 80005c6:	4b77      	ldr	r3, [pc, #476]	; (80007a4 <main+0x5c0>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b4d      	cmp	r3, #77	; 0x4d
 80005cc:	f040 80d3 	bne.w	8000776 <main+0x592>
	  				while(transmitFlag==0);
 80005d0:	bf00      	nop
 80005d2:	4b6d      	ldr	r3, [pc, #436]	; (8000788 <main+0x5a4>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d0fb      	beq.n	80005d2 <main+0x3ee>
	  				HAL_GPIO_TogglePin(GPIOA, ACQUISITION_Pin);
 80005da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005de:	486b      	ldr	r0, [pc, #428]	; (800078c <main+0x5a8>)
 80005e0:	f002 fa30 	bl	8002a44 <HAL_GPIO_TogglePin>
	  				transmitFlag = 0;
 80005e4:	4b68      	ldr	r3, [pc, #416]	; (8000788 <main+0x5a4>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
	  				for(i=0;i<10;i++) counterPulso[i] = fimPulso[i];
 80005ea:	2300      	movs	r3, #0
 80005ec:	71bb      	strb	r3, [r7, #6]
 80005ee:	e00a      	b.n	8000606 <main+0x422>
 80005f0:	79ba      	ldrb	r2, [r7, #6]
 80005f2:	79bb      	ldrb	r3, [r7, #6]
 80005f4:	4961      	ldr	r1, [pc, #388]	; (800077c <main+0x598>)
 80005f6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80005fa:	4961      	ldr	r1, [pc, #388]	; (8000780 <main+0x59c>)
 80005fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000600:	79bb      	ldrb	r3, [r7, #6]
 8000602:	3301      	adds	r3, #1
 8000604:	71bb      	strb	r3, [r7, #6]
 8000606:	79bb      	ldrb	r3, [r7, #6]
 8000608:	2b09      	cmp	r3, #9
 800060a:	d9f1      	bls.n	80005f0 <main+0x40c>
	  				TransmitData(receive_message,counterPulso,67);
 800060c:	4b5d      	ldr	r3, [pc, #372]	; (8000784 <main+0x5a0>)
 800060e:	2243      	movs	r2, #67	; 0x43
 8000610:	9204      	str	r2, [sp, #16]
 8000612:	4a5b      	ldr	r2, [pc, #364]	; (8000780 <main+0x59c>)
 8000614:	9203      	str	r2, [sp, #12]
 8000616:	466c      	mov	r4, sp
 8000618:	f103 0210 	add.w	r2, r3, #16
 800061c:	ca07      	ldmia	r2, {r0, r1, r2}
 800061e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000622:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000624:	f000 fcde 	bl	8000fe4 <TransmitData>
	  				for(i=0;i<10;i++) counterPulso[i] = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	71bb      	strb	r3, [r7, #6]
 800062c:	e007      	b.n	800063e <main+0x45a>
 800062e:	79bb      	ldrb	r3, [r7, #6]
 8000630:	4a53      	ldr	r2, [pc, #332]	; (8000780 <main+0x59c>)
 8000632:	2100      	movs	r1, #0
 8000634:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000638:	79bb      	ldrb	r3, [r7, #6]
 800063a:	3301      	adds	r3, #1
 800063c:	71bb      	strb	r3, [r7, #6]
 800063e:	79bb      	ldrb	r3, [r7, #6]
 8000640:	2b09      	cmp	r3, #9
 8000642:	d9f4      	bls.n	800062e <main+0x44a>
					StateMachine = iddle;
 8000644:	4b52      	ldr	r3, [pc, #328]	; (8000790 <main+0x5ac>)
 8000646:	2249      	movs	r2, #73	; 0x49
 8000648:	701a      	strb	r2, [r3, #0]
					EndReception = '\0';
 800064a:	4b52      	ldr	r3, [pc, #328]	; (8000794 <main+0x5b0>)
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]
					USB_FLAG = 0;
 8000650:	4b51      	ldr	r3, [pc, #324]	; (8000798 <main+0x5b4>)
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
	  	  break;
 8000656:	e08e      	b.n	8000776 <main+0x592>

	  	  case ReadError:
	  		HAL_GPIO_WritePin(GPIOA,ACQUISITION_Pin, GPIO_PIN_SET);
 8000658:	2201      	movs	r2, #1
 800065a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800065e:	484b      	ldr	r0, [pc, #300]	; (800078c <main+0x5a8>)
 8000660:	f002 f9d8 	bl	8002a14 <HAL_GPIO_WritePin>
			TransmitData(receive_message,counterPulso,67);
 8000664:	4b47      	ldr	r3, [pc, #284]	; (8000784 <main+0x5a0>)
 8000666:	2243      	movs	r2, #67	; 0x43
 8000668:	9204      	str	r2, [sp, #16]
 800066a:	4a45      	ldr	r2, [pc, #276]	; (8000780 <main+0x59c>)
 800066c:	9203      	str	r2, [sp, #12]
 800066e:	466c      	mov	r4, sp
 8000670:	f103 0210 	add.w	r2, r3, #16
 8000674:	ca07      	ldmia	r2, {r0, r1, r2}
 8000676:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800067a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800067c:	f000 fcb2 	bl	8000fe4 <TransmitData>
	  		HAL_GPIO_WritePin(GPIOA,ACQUISITION_Pin, GPIO_PIN_RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000686:	4841      	ldr	r0, [pc, #260]	; (800078c <main+0x5a8>)
 8000688:	f002 f9c4 	bl	8002a14 <HAL_GPIO_WritePin>
	  		StateMachine = iddle;
 800068c:	4b40      	ldr	r3, [pc, #256]	; (8000790 <main+0x5ac>)
 800068e:	2249      	movs	r2, #73	; 0x49
 8000690:	701a      	strb	r2, [r3, #0]
	  		EndReception = '\0';
 8000692:	4b40      	ldr	r3, [pc, #256]	; (8000794 <main+0x5b0>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	  		USB_FLAG = 0;
 8000698:	4b3f      	ldr	r3, [pc, #252]	; (8000798 <main+0x5b4>)
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
		  break;
 800069e:	e06b      	b.n	8000778 <main+0x594>

	  	  case Stop:
	  		stopFlag = StopDevice(deviceFlag);
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 f86e 	bl	8001784 <StopDevice>
 80006a8:	4603      	mov	r3, r0
 80006aa:	713b      	strb	r3, [r7, #4]
	  		deviceFlag = stopFlag;
 80006ac:	793b      	ldrb	r3, [r7, #4]
 80006ae:	71fb      	strb	r3, [r7, #7]
	  		if(stopFlag == 0)
 80006b0:	793b      	ldrb	r3, [r7, #4]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d123      	bne.n	80006fe <main+0x51a>
	  		{
	  			HAL_GPIO_WritePin(GPIOB,STOP_Pin, GPIO_PIN_SET);
 80006b6:	2201      	movs	r2, #1
 80006b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006bc:	4837      	ldr	r0, [pc, #220]	; (800079c <main+0x5b8>)
 80006be:	f002 f9a9 	bl	8002a14 <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOA,ACQUISITION_Pin, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006c8:	4830      	ldr	r0, [pc, #192]	; (800078c <main+0x5a8>)
 80006ca:	f002 f9a3 	bl	8002a14 <HAL_GPIO_WritePin>
	  			TransmitData(receive_message,0,7);
 80006ce:	4b2d      	ldr	r3, [pc, #180]	; (8000784 <main+0x5a0>)
 80006d0:	2207      	movs	r2, #7
 80006d2:	9204      	str	r2, [sp, #16]
 80006d4:	2200      	movs	r2, #0
 80006d6:	9203      	str	r2, [sp, #12]
 80006d8:	466c      	mov	r4, sp
 80006da:	f103 0210 	add.w	r2, r3, #16
 80006de:	ca07      	ldmia	r2, {r0, r1, r2}
 80006e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80006e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006e6:	f000 fc7d 	bl	8000fe4 <TransmitData>
				StateMachine = iddle;
 80006ea:	4b29      	ldr	r3, [pc, #164]	; (8000790 <main+0x5ac>)
 80006ec:	2249      	movs	r2, #73	; 0x49
 80006ee:	701a      	strb	r2, [r3, #0]
				EndReception = '\0';
 80006f0:	4b28      	ldr	r3, [pc, #160]	; (8000794 <main+0x5b0>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]
				USB_FLAG = 0;
 80006f6:	4b28      	ldr	r3, [pc, #160]	; (8000798 <main+0x5b4>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
	  			HAL_GPIO_WritePin(GPIOB,STOP_Pin, GPIO_PIN_RESET);
				StateMachine = iddle;
				EndReception = '\0';
				USB_FLAG = 0;
	  		}
	  	   break;
 80006fc:	e03c      	b.n	8000778 <main+0x594>
	  			HAL_GPIO_WritePin(GPIOB,STOP_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000704:	4825      	ldr	r0, [pc, #148]	; (800079c <main+0x5b8>)
 8000706:	f002 f985 	bl	8002a14 <HAL_GPIO_WritePin>
				StateMachine = iddle;
 800070a:	4b21      	ldr	r3, [pc, #132]	; (8000790 <main+0x5ac>)
 800070c:	2249      	movs	r2, #73	; 0x49
 800070e:	701a      	strb	r2, [r3, #0]
				EndReception = '\0';
 8000710:	4b20      	ldr	r3, [pc, #128]	; (8000794 <main+0x5b0>)
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
				USB_FLAG = 0;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <main+0x5b4>)
 8000718:	2200      	movs	r2, #0
 800071a:	701a      	strb	r2, [r3, #0]
	  	   break;
 800071c:	e02c      	b.n	8000778 <main+0x594>

	  	  case error:
	  		HAL_GPIO_WritePin(GPIOB,ERRO_Pin, GPIO_PIN_SET);
 800071e:	2201      	movs	r2, #1
 8000720:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000724:	481d      	ldr	r0, [pc, #116]	; (800079c <main+0x5b8>)
 8000726:	f002 f975 	bl	8002a14 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOB,CONFIG_Pin, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000730:	481a      	ldr	r0, [pc, #104]	; (800079c <main+0x5b8>)
 8000732:	f002 f96f 	bl	8002a14 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOB,STOP_Pin, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800073c:	4817      	ldr	r0, [pc, #92]	; (800079c <main+0x5b8>)
 800073e:	f002 f969 	bl	8002a14 <HAL_GPIO_WritePin>
	  		TransmitData(receive_message,0,8);
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <main+0x5a0>)
 8000744:	2208      	movs	r2, #8
 8000746:	9204      	str	r2, [sp, #16]
 8000748:	2200      	movs	r2, #0
 800074a:	9203      	str	r2, [sp, #12]
 800074c:	466c      	mov	r4, sp
 800074e:	f103 0210 	add.w	r2, r3, #16
 8000752:	ca07      	ldmia	r2, {r0, r1, r2}
 8000754:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000758:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800075a:	f000 fc43 	bl	8000fe4 <TransmitData>
			StateMachine = iddle;
 800075e:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <main+0x5ac>)
 8000760:	2249      	movs	r2, #73	; 0x49
 8000762:	701a      	strb	r2, [r3, #0]
			EndReception = '\0';
 8000764:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <main+0x5b0>)
 8000766:	2200      	movs	r2, #0
 8000768:	701a      	strb	r2, [r3, #0]
			USB_FLAG = 0;
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <main+0x5b4>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
			break;
 8000770:	e002      	b.n	8000778 <main+0x594>
	  	  break;
 8000772:	bf00      	nop
 8000774:	e567      	b.n	8000246 <main+0x62>
	  	  break;
 8000776:	bf00      	nop
	  switch(StateMachine)
 8000778:	e565      	b.n	8000246 <main+0x62>
 800077a:	bf00      	nop
 800077c:	20000310 	.word	0x20000310
 8000780:	200002e8 	.word	0x200002e8
 8000784:	20000340 	.word	0x20000340
 8000788:	200002cc 	.word	0x200002cc
 800078c:	40010800 	.word	0x40010800
 8000790:	2000036e 	.word	0x2000036e
 8000794:	200002b7 	.word	0x200002b7
 8000798:	200002b6 	.word	0x200002b6
 800079c:	40010c00 	.word	0x40010c00
 80007a0:	200001e4 	.word	0x200001e4
 80007a4:	200002c6 	.word	0x200002c6

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b094      	sub	sp, #80	; 0x50
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007b2:	2228      	movs	r2, #40	; 0x28
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f00a fbd8 	bl	800af6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d8:	2301      	movs	r3, #1
 80007da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e6:	2301      	movs	r3, #1
 80007e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ea:	2302      	movs	r3, #2
 80007ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007f4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007fe:	4618      	mov	r0, r3
 8000800:	f003 fe16 	bl	8004430 <HAL_RCC_OscConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800080a:	f001 f997 	bl	8001b3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080e:	230f      	movs	r3, #15
 8000810:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000812:	2302      	movs	r3, #2
 8000814:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800081a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800081e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	2102      	movs	r1, #2
 800082a:	4618      	mov	r0, r3
 800082c:	f004 f882 	bl	8004934 <HAL_RCC_ClockConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000836:	f001 f981 	bl	8001b3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800083a:	2310      	movs	r3, #16
 800083c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	4618      	mov	r0, r3
 8000846:	f004 fa0d 	bl	8004c64 <HAL_RCCEx_PeriphCLKConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000850:	f001 f974 	bl	8001b3c <Error_Handler>
  }
}
 8000854:	bf00      	nop
 8000856:	3750      	adds	r7, #80	; 0x50
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08c      	sub	sp, #48	; 0x30
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	2224      	movs	r2, #36	; 0x24
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f00a fb7e 	bl	800af6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000878:	4b21      	ldr	r3, [pc, #132]	; (8000900 <MX_TIM2_Init+0xa4>)
 800087a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800087e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000880:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <MX_TIM2_Init+0xa4>)
 8000882:	2200      	movs	r2, #0
 8000884:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000886:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <MX_TIM2_Init+0xa4>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800088c:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <MX_TIM2_Init+0xa4>)
 800088e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000892:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000894:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <MX_TIM2_Init+0xa4>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800089a:	4b19      	ldr	r3, [pc, #100]	; (8000900 <MX_TIM2_Init+0xa4>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008a0:	2303      	movs	r3, #3
 80008a2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008a4:	2300      	movs	r3, #0
 80008a6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008a8:	2301      	movs	r3, #1
 80008aa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80008b0:	230f      	movs	r3, #15
 80008b2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008b4:	2300      	movs	r3, #0
 80008b6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008b8:	2301      	movs	r3, #1
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80008c0:	230f      	movs	r3, #15
 80008c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	4619      	mov	r1, r3
 80008ca:	480d      	ldr	r0, [pc, #52]	; (8000900 <MX_TIM2_Init+0xa4>)
 80008cc:	f004 fb50 	bl	8004f70 <HAL_TIM_Encoder_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80008d6:	f001 f931 	bl	8001b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008de:	2300      	movs	r3, #0
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4806      	ldr	r0, [pc, #24]	; (8000900 <MX_TIM2_Init+0xa4>)
 80008e8:	f005 f84a 	bl	8005980 <HAL_TIMEx_MasterConfigSynchronization>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80008f2:	f001 f923 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	3730      	adds	r7, #48	; 0x30
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	2000019c 	.word	0x2000019c

08000904 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800090a:	f107 0308 	add.w	r3, r7, #8
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000918:	463b      	mov	r3, r7
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000920:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <MX_TIM3_Init+0x94>)
 8000922:	4a1e      	ldr	r2, [pc, #120]	; (800099c <MX_TIM3_Init+0x98>)
 8000924:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000926:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <MX_TIM3_Init+0x94>)
 8000928:	2247      	movs	r2, #71	; 0x47
 800092a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092c:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_TIM3_Init+0x94>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000932:	4b19      	ldr	r3, [pc, #100]	; (8000998 <MX_TIM3_Init+0x94>)
 8000934:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000938:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <MX_TIM3_Init+0x94>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_TIM3_Init+0x94>)
 8000942:	2200      	movs	r2, #0
 8000944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000946:	4814      	ldr	r0, [pc, #80]	; (8000998 <MX_TIM3_Init+0x94>)
 8000948:	f004 fa42 	bl	8004dd0 <HAL_TIM_Base_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000952:	f001 f8f3 	bl	8001b3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000956:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800095c:	f107 0308 	add.w	r3, r7, #8
 8000960:	4619      	mov	r1, r3
 8000962:	480d      	ldr	r0, [pc, #52]	; (8000998 <MX_TIM3_Init+0x94>)
 8000964:	f004 fe11 	bl	800558a <HAL_TIM_ConfigClockSource>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800096e:	f001 f8e5 	bl	8001b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000972:	2300      	movs	r3, #0
 8000974:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800097a:	463b      	mov	r3, r7
 800097c:	4619      	mov	r1, r3
 800097e:	4806      	ldr	r0, [pc, #24]	; (8000998 <MX_TIM3_Init+0x94>)
 8000980:	f004 fffe 	bl	8005980 <HAL_TIMEx_MasterConfigSynchronization>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800098a:	f001 f8d7 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200001e4 	.word	0x200001e4
 800099c:	40000400 	.word	0x40000400

080009a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009a6:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <MX_USART2_UART_Init+0x50>)
 80009a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_USART2_UART_Init+0x4c>)
 80009d8:	f005 f842 	bl	8005a60 <HAL_UART_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009e2:	f001 f8ab 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	2000022c 	.word	0x2000022c
 80009f0:	40004400 	.word	0x40004400

080009f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	f107 0310 	add.w	r3, r7, #16
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a08:	4b43      	ldr	r3, [pc, #268]	; (8000b18 <MX_GPIO_Init+0x124>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	4a42      	ldr	r2, [pc, #264]	; (8000b18 <MX_GPIO_Init+0x124>)
 8000a0e:	f043 0310 	orr.w	r3, r3, #16
 8000a12:	6193      	str	r3, [r2, #24]
 8000a14:	4b40      	ldr	r3, [pc, #256]	; (8000b18 <MX_GPIO_Init+0x124>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	f003 0310 	and.w	r3, r3, #16
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a20:	4b3d      	ldr	r3, [pc, #244]	; (8000b18 <MX_GPIO_Init+0x124>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	4a3c      	ldr	r2, [pc, #240]	; (8000b18 <MX_GPIO_Init+0x124>)
 8000a26:	f043 0320 	orr.w	r3, r3, #32
 8000a2a:	6193      	str	r3, [r2, #24]
 8000a2c:	4b3a      	ldr	r3, [pc, #232]	; (8000b18 <MX_GPIO_Init+0x124>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	f003 0320 	and.w	r3, r3, #32
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a38:	4b37      	ldr	r3, [pc, #220]	; (8000b18 <MX_GPIO_Init+0x124>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	4a36      	ldr	r2, [pc, #216]	; (8000b18 <MX_GPIO_Init+0x124>)
 8000a3e:	f043 0304 	orr.w	r3, r3, #4
 8000a42:	6193      	str	r3, [r2, #24]
 8000a44:	4b34      	ldr	r3, [pc, #208]	; (8000b18 <MX_GPIO_Init+0x124>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	f003 0304 	and.w	r3, r3, #4
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a50:	4b31      	ldr	r3, [pc, #196]	; (8000b18 <MX_GPIO_Init+0x124>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	4a30      	ldr	r2, [pc, #192]	; (8000b18 <MX_GPIO_Init+0x124>)
 8000a56:	f043 0308 	orr.w	r3, r3, #8
 8000a5a:	6193      	str	r3, [r2, #24]
 8000a5c:	4b2e      	ldr	r3, [pc, #184]	; (8000b18 <MX_GPIO_Init+0x124>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	f003 0308 	and.w	r3, r3, #8
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a6e:	482b      	ldr	r0, [pc, #172]	; (8000b1c <MX_GPIO_Init+0x128>)
 8000a70:	f001 ffd0 	bl	8002a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STOP_Pin|ERRO_Pin|STATUS_Pin|CONFIG_Pin, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000a7a:	4829      	ldr	r0, [pc, #164]	; (8000b20 <MX_GPIO_Init+0x12c>)
 8000a7c:	f001 ffca 	bl	8002a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACQUISITION_GPIO_Port, ACQUISITION_Pin, GPIO_PIN_RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a86:	4827      	ldr	r0, [pc, #156]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000a88:	f001 ffc4 	bl	8002a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a9e:	f107 0310 	add.w	r3, r7, #16
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	481d      	ldr	r0, [pc, #116]	; (8000b1c <MX_GPIO_Init+0x128>)
 8000aa6:	f001 fe31 	bl	800270c <HAL_GPIO_Init>

  /*Configure GPIO pins : STOP_Pin ERRO_Pin STATUS_Pin CONFIG_Pin */
  GPIO_InitStruct.Pin = STOP_Pin|ERRO_Pin|STATUS_Pin|CONFIG_Pin;
 8000aaa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000aae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000abc:	f107 0310 	add.w	r3, r7, #16
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4817      	ldr	r0, [pc, #92]	; (8000b20 <MX_GPIO_Init+0x12c>)
 8000ac4:	f001 fe22 	bl	800270c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACQUISITION_Pin */
  GPIO_InitStruct.Pin = ACQUISITION_Pin;
 8000ac8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000acc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACQUISITION_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 0310 	add.w	r3, r7, #16
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4810      	ldr	r0, [pc, #64]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000ae2:	f001 fe13 	bl	800270c <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8000ae6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <MX_GPIO_Init+0x134>)
 8000aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8000af4:	f107 0310 	add.w	r3, r7, #16
 8000af8:	4619      	mov	r1, r3
 8000afa:	480a      	ldr	r0, [pc, #40]	; (8000b24 <MX_GPIO_Init+0x130>)
 8000afc:	f001 fe06 	bl	800270c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2100      	movs	r1, #0
 8000b04:	2017      	movs	r0, #23
 8000b06:	f001 faee 	bl	80020e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b0a:	2017      	movs	r0, #23
 8000b0c:	f001 fb07 	bl	800211e <HAL_NVIC_EnableIRQ>

}
 8000b10:	bf00      	nop
 8000b12:	3720      	adds	r7, #32
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40011000 	.word	0x40011000
 8000b20:	40010c00 	.word	0x40010c00
 8000b24:	40010800 	.word	0x40010800
 8000b28:	10210000 	.word	0x10210000

08000b2c <deviceReset>:

/* USER CODE BEGIN 4 */
char deviceReset()
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
	char i=0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	71fb      	strb	r3, [r7, #7]
	char reset;
	infoDevice.Id =0;
 8000b36:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <deviceReset+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
	for(i=0;i<10;i++)
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	71fb      	strb	r3, [r7, #7]
 8000b40:	e012      	b.n	8000b68 <deviceReset+0x3c>
	{
	  counterPulso[i] = 0;
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	4a10      	ldr	r2, [pc, #64]	; (8000b88 <deviceReset+0x5c>)
 8000b46:	2100      	movs	r1, #0
 8000b48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  currentTime[i] = 0;
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	4a0f      	ldr	r2, [pc, #60]	; (8000b8c <deviceReset+0x60>)
 8000b50:	2100      	movs	r1, #0
 8000b52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  fimPulso[contador] = 0;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <deviceReset+0x64>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <deviceReset+0x68>)
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(i=0;i<10;i++)
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	3301      	adds	r3, #1
 8000b66:	71fb      	strb	r3, [r7, #7]
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	2b09      	cmp	r3, #9
 8000b6c:	d9e9      	bls.n	8000b42 <deviceReset+0x16>
	}
	reset = StopDevice(HAL_OK);
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f000 fe08 	bl	8001784 <StopDevice>
 8000b74:	4603      	mov	r3, r0
 8000b76:	71bb      	strb	r3, [r7, #6]

	return reset;
 8000b78:	79bb      	ldrb	r3, [r7, #6]
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	2000035c 	.word	0x2000035c
 8000b88:	200002e8 	.word	0x200002e8
 8000b8c:	20000374 	.word	0x20000374
 8000b90:	200003a0 	.word	0x200003a0
 8000b94:	20000310 	.word	0x20000310

08000b98 <structDados>:
void structDados()
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
	uint8_t counter=0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	71fb      	strb	r3, [r7, #7]
	receive_message.inicio = RXBufferArray[0];
 8000ba2:	4b20      	ldr	r3, [pc, #128]	; (8000c24 <structDados+0x8c>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	; (8000c28 <structDados+0x90>)
 8000baa:	601a      	str	r2, [r3, #0]
	receive_message.endOrigem = RXBufferArray[1];
 8000bac:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <structDados+0x8c>)
 8000bae:	785b      	ldrb	r3, [r3, #1]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <structDados+0x90>)
 8000bb4:	605a      	str	r2, [r3, #4]
	receive_message.endDestino = RXBufferArray[2];
 8000bb6:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <structDados+0x8c>)
 8000bb8:	789b      	ldrb	r3, [r3, #2]
 8000bba:	461a      	mov	r2, r3
 8000bbc:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <structDados+0x90>)
 8000bbe:	609a      	str	r2, [r3, #8]
	receive_message.funcao = RXBufferArray[3];
 8000bc0:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <structDados+0x8c>)
 8000bc2:	78db      	ldrb	r3, [r3, #3]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <structDados+0x90>)
 8000bc8:	60da      	str	r2, [r3, #12]
	receive_message.dadosCount = RXBufferArray[4];
 8000bca:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <structDados+0x8c>)
 8000bcc:	791b      	ldrb	r3, [r3, #4]
 8000bce:	461a      	mov	r2, r3
 8000bd0:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <structDados+0x90>)
 8000bd2:	611a      	str	r2, [r3, #16]
	while(counter<receive_message.dadosCount)
 8000bd4:	e00b      	b.n	8000bee <structDados+0x56>
	{
		dados[counter] = RXBufferArray[5+counter];
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	3305      	adds	r3, #5
 8000bda:	4a12      	ldr	r2, [pc, #72]	; (8000c24 <structDados+0x8c>)
 8000bdc:	5cd2      	ldrb	r2, [r2, r3]
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	4611      	mov	r1, r2
 8000be2:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <structDados+0x94>)
 8000be4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		counter++;
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	3301      	adds	r3, #1
 8000bec:	71fb      	strb	r3, [r7, #7]
	while(counter<receive_message.dadosCount)
 8000bee:	79fa      	ldrb	r2, [r7, #7]
 8000bf0:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <structDados+0x90>)
 8000bf2:	691b      	ldr	r3, [r3, #16]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	dbee      	blt.n	8000bd6 <structDados+0x3e>
	}
	receive_message.checksum = RXBufferArray[5+counter];
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	3305      	adds	r3, #5
 8000bfc:	4a09      	ldr	r2, [pc, #36]	; (8000c24 <structDados+0x8c>)
 8000bfe:	5cd3      	ldrb	r3, [r2, r3]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <structDados+0x90>)
 8000c04:	615a      	str	r2, [r3, #20]
	receive_message.fim=RXBufferArray[6+counter];
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	3306      	adds	r3, #6
 8000c0a:	4a06      	ldr	r2, [pc, #24]	; (8000c24 <structDados+0x8c>)
 8000c0c:	5cd3      	ldrb	r3, [r2, r3]
 8000c0e:	461a      	mov	r2, r3
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <structDados+0x90>)
 8000c12:	619a      	str	r2, [r3, #24]
	counter=0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	71fb      	strb	r3, [r7, #7]
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	200002bc 	.word	0x200002bc
 8000c28:	20000340 	.word	0x20000340
 8000c2c:	200002d8 	.word	0x200002d8

08000c30 <VerificaErro>:
int VerificaErro()
{
 8000c30:	b598      	push	{r3, r4, r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	if(receive_message.checksum != Checksum(RXBufferArray))
 8000c34:	4b20      	ldr	r3, [pc, #128]	; (8000cb8 <VerificaErro+0x88>)
 8000c36:	695c      	ldr	r4, [r3, #20]
 8000c38:	4820      	ldr	r0, [pc, #128]	; (8000cbc <VerificaErro+0x8c>)
 8000c3a:	f000 fe05 	bl	8001848 <Checksum>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	429c      	cmp	r4, r3
 8000c42:	d001      	beq.n	8000c48 <VerificaErro+0x18>
	{
		return errorChecksum;
 8000c44:	2330      	movs	r3, #48	; 0x30
 8000c46:	e035      	b.n	8000cb4 <VerificaErro+0x84>
	}
	if(receive_message.endDestino>255 || receive_message.endDestino<0)
 8000c48:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <VerificaErro+0x88>)
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	2bff      	cmp	r3, #255	; 0xff
 8000c4e:	dc03      	bgt.n	8000c58 <VerificaErro+0x28>
 8000c50:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <VerificaErro+0x88>)
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	da06      	bge.n	8000c66 <VerificaErro+0x36>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000c58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c5c:	4818      	ldr	r0, [pc, #96]	; (8000cc0 <VerificaErro+0x90>)
 8000c5e:	f001 fef1 	bl	8002a44 <HAL_GPIO_TogglePin>
		return errorAddress;
 8000c62:	2333      	movs	r3, #51	; 0x33
 8000c64:	e026      	b.n	8000cb4 <VerificaErro+0x84>
	}
/*	if(infoDevice.Id != 0x00 && infoDevice.Id != receive_message.endDestino)
	{
		return errorAddress;
	}*/
	if(receive_message.funcao == 2 && receive_message.dadosCount < 0)
 8000c66:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <VerificaErro+0x88>)
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	d105      	bne.n	8000c7a <VerificaErro+0x4a>
 8000c6e:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <VerificaErro+0x88>)
 8000c70:	691b      	ldr	r3, [r3, #16]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	da01      	bge.n	8000c7a <VerificaErro+0x4a>
	{
		return errorConfig;
 8000c76:	2335      	movs	r3, #53	; 0x35
 8000c78:	e01c      	b.n	8000cb4 <VerificaErro+0x84>
	}
	if(receive_message.funcao > 0x06)
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <VerificaErro+0x88>)
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	2b06      	cmp	r3, #6
 8000c80:	dd01      	ble.n	8000c86 <VerificaErro+0x56>
	{
		return errorFunction;
 8000c82:	2336      	movs	r3, #54	; 0x36
 8000c84:	e016      	b.n	8000cb4 <VerificaErro+0x84>
	}
	if(receive_message.funcao == 2 && dados[1]<1)
 8000c86:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <VerificaErro+0x88>)
 8000c88:	68db      	ldr	r3, [r3, #12]
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d105      	bne.n	8000c9a <VerificaErro+0x6a>
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <VerificaErro+0x94>)
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	dc01      	bgt.n	8000c9a <VerificaErro+0x6a>
	{
		return errorData;
 8000c96:	2337      	movs	r3, #55	; 0x37
 8000c98:	e00c      	b.n	8000cb4 <VerificaErro+0x84>
	}
	if(receive_message.inicio != 0x0A)
 8000c9a:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <VerificaErro+0x88>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2b0a      	cmp	r3, #10
 8000ca0:	d001      	beq.n	8000ca6 <VerificaErro+0x76>
	{
		return errorStartHeader;
 8000ca2:	2338      	movs	r3, #56	; 0x38
 8000ca4:	e006      	b.n	8000cb4 <VerificaErro+0x84>
	}
	if(receive_message.fim != 0x0f)
 8000ca6:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <VerificaErro+0x88>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	2b0f      	cmp	r3, #15
 8000cac:	d001      	beq.n	8000cb2 <VerificaErro+0x82>
	{
		return errorEndHeader;
 8000cae:	2339      	movs	r3, #57	; 0x39
 8000cb0:	e000      	b.n	8000cb4 <VerificaErro+0x84>
	}
	return OK;
 8000cb2:	2341      	movs	r3, #65	; 0x41

}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	bd98      	pop	{r3, r4, r7, pc}
 8000cb8:	20000340 	.word	0x20000340
 8000cbc:	200002bc 	.word	0x200002bc
 8000cc0:	40011000 	.word	0x40011000
 8000cc4:	200002d8 	.word	0x200002d8

08000cc8 <command>:
void command(char *ReceivedChar)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]

	static int FirstData = 0;
/*	int ReceivedInt = *ReceivedChar - '\0';*/
  if (FirstData == 0)
 8000cd0:	4b63      	ldr	r3, [pc, #396]	; (8000e60 <command+0x198>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d10a      	bne.n	8000cee <command+0x26>
  {
	RXBufferArray[0] = ReceivedChar[0];
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	781a      	ldrb	r2, [r3, #0]
 8000cdc:	4b61      	ldr	r3, [pc, #388]	; (8000e64 <command+0x19c>)
 8000cde:	701a      	strb	r2, [r3, #0]
	FirstData = 1;
 8000ce0:	4b5f      	ldr	r3, [pc, #380]	; (8000e60 <command+0x198>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	601a      	str	r2, [r3, #0]
    uart_state = Origem;
 8000ce6:	4b60      	ldr	r3, [pc, #384]	; (8000e68 <command+0x1a0>)
 8000ce8:	2237      	movs	r2, #55	; 0x37
 8000cea:	701a      	strb	r2, [r3, #0]
      default:
        uart_state = iddle;
      }
    }
  }
}
 8000cec:	e0b3      	b.n	8000e56 <command+0x18e>
    if (uart_state != iddle)
 8000cee:	4b5e      	ldr	r3, [pc, #376]	; (8000e68 <command+0x1a0>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b49      	cmp	r3, #73	; 0x49
 8000cf4:	f000 80ac 	beq.w	8000e50 <command+0x188>
	  switch (uart_state) {
 8000cf8:	4b5b      	ldr	r3, [pc, #364]	; (8000e68 <command+0x1a0>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	3b37      	subs	r3, #55	; 0x37
 8000cfe:	2b0d      	cmp	r3, #13
 8000d00:	f200 80a2 	bhi.w	8000e48 <command+0x180>
 8000d04:	a201      	add	r2, pc, #4	; (adr r2, 8000d0c <command+0x44>)
 8000d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d0a:	bf00      	nop
 8000d0c:	08000d45 	.word	0x08000d45
 8000d10:	08000d55 	.word	0x08000d55
 8000d14:	08000d65 	.word	0x08000d65
 8000d18:	08000e49 	.word	0x08000e49
 8000d1c:	08000e49 	.word	0x08000e49
 8000d20:	08000e49 	.word	0x08000e49
 8000d24:	08000e49 	.word	0x08000e49
 8000d28:	08000e49 	.word	0x08000e49
 8000d2c:	08000e49 	.word	0x08000e49
 8000d30:	08000e49 	.word	0x08000e49
 8000d34:	08000d75 	.word	0x08000d75
 8000d38:	08000da9 	.word	0x08000da9
 8000d3c:	08000de9 	.word	0x08000de9
 8000d40:	08000e17 	.word	0x08000e17
        	RXBufferArray[1] = ReceivedChar[1];
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	785a      	ldrb	r2, [r3, #1]
 8000d48:	4b46      	ldr	r3, [pc, #280]	; (8000e64 <command+0x19c>)
 8000d4a:	705a      	strb	r2, [r3, #1]
        	uart_state = Destino;
 8000d4c:	4b46      	ldr	r3, [pc, #280]	; (8000e68 <command+0x1a0>)
 8000d4e:	2238      	movs	r2, #56	; 0x38
 8000d50:	701a      	strb	r2, [r3, #0]
        break;
 8000d52:	e080      	b.n	8000e56 <command+0x18e>
        	RXBufferArray[2] = ReceivedChar[2];
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	789a      	ldrb	r2, [r3, #2]
 8000d58:	4b42      	ldr	r3, [pc, #264]	; (8000e64 <command+0x19c>)
 8000d5a:	709a      	strb	r2, [r3, #2]
        	uart_state = Funcao;
 8000d5c:	4b42      	ldr	r3, [pc, #264]	; (8000e68 <command+0x1a0>)
 8000d5e:	2239      	movs	r2, #57	; 0x39
 8000d60:	701a      	strb	r2, [r3, #0]
        break;
 8000d62:	e078      	b.n	8000e56 <command+0x18e>
        	RXBufferArray[3] = ReceivedChar[3];
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	78da      	ldrb	r2, [r3, #3]
 8000d68:	4b3e      	ldr	r3, [pc, #248]	; (8000e64 <command+0x19c>)
 8000d6a:	70da      	strb	r2, [r3, #3]
        	uart_state = DadosCount;
 8000d6c:	4b3e      	ldr	r3, [pc, #248]	; (8000e68 <command+0x1a0>)
 8000d6e:	2241      	movs	r2, #65	; 0x41
 8000d70:	701a      	strb	r2, [r3, #0]
        break;
 8000d72:	e070      	b.n	8000e56 <command+0x18e>
        if(ReceivedChar[4]>0)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3304      	adds	r3, #4
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d007      	beq.n	8000d8e <command+0xc6>
        	RXBufferArray[4] = ReceivedChar[4];
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	791a      	ldrb	r2, [r3, #4]
 8000d82:	4b38      	ldr	r3, [pc, #224]	; (8000e64 <command+0x19c>)
 8000d84:	711a      	strb	r2, [r3, #4]
        	uart_state = Dados;
 8000d86:	4b38      	ldr	r3, [pc, #224]	; (8000e68 <command+0x1a0>)
 8000d88:	2242      	movs	r2, #66	; 0x42
 8000d8a:	701a      	strb	r2, [r3, #0]
        break;
 8000d8c:	e062      	b.n	8000e54 <command+0x18c>
        else if (ReceivedChar[4]==0)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3304      	adds	r3, #4
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d15d      	bne.n	8000e54 <command+0x18c>
        	RXBufferArray[4] = ReceivedChar[4];
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	791a      	ldrb	r2, [r3, #4]
 8000d9c:	4b31      	ldr	r3, [pc, #196]	; (8000e64 <command+0x19c>)
 8000d9e:	711a      	strb	r2, [r3, #4]
        	uart_state = CheckSum;
 8000da0:	4b31      	ldr	r3, [pc, #196]	; (8000e68 <command+0x1a0>)
 8000da2:	2243      	movs	r2, #67	; 0x43
 8000da4:	701a      	strb	r2, [r3, #0]
        break;
 8000da6:	e055      	b.n	8000e54 <command+0x18c>
		  RXBufferArray[5+i] = ReceivedChar[5+i];
 8000da8:	4b30      	ldr	r3, [pc, #192]	; (8000e6c <command+0x1a4>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	3305      	adds	r3, #5
 8000dae:	461a      	mov	r2, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	441a      	add	r2, r3
 8000db4:	4b2d      	ldr	r3, [pc, #180]	; (8000e6c <command+0x1a4>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	3305      	adds	r3, #5
 8000dba:	7811      	ldrb	r1, [r2, #0]
 8000dbc:	4a29      	ldr	r2, [pc, #164]	; (8000e64 <command+0x19c>)
 8000dbe:	54d1      	strb	r1, [r2, r3]
		  i++;
 8000dc0:	4b2a      	ldr	r3, [pc, #168]	; (8000e6c <command+0x1a4>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	4a29      	ldr	r2, [pc, #164]	; (8000e6c <command+0x1a4>)
 8000dc8:	6013      	str	r3, [r2, #0]
    	  if(i<RXBufferArray[4])
 8000dca:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <command+0x19c>)
 8000dcc:	791b      	ldrb	r3, [r3, #4]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	4b26      	ldr	r3, [pc, #152]	; (8000e6c <command+0x1a4>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	dd03      	ble.n	8000de0 <command+0x118>
    		  uart_state = Dados;
 8000dd8:	4b23      	ldr	r3, [pc, #140]	; (8000e68 <command+0x1a0>)
 8000dda:	2242      	movs	r2, #66	; 0x42
 8000ddc:	701a      	strb	r2, [r3, #0]
    	  break;
 8000dde:	e03a      	b.n	8000e56 <command+0x18e>
    		  uart_state = CheckSum;
 8000de0:	4b21      	ldr	r3, [pc, #132]	; (8000e68 <command+0x1a0>)
 8000de2:	2243      	movs	r2, #67	; 0x43
 8000de4:	701a      	strb	r2, [r3, #0]
    	  break;
 8000de6:	e036      	b.n	8000e56 <command+0x18e>
    	  RXBufferArray[5+i] = ReceivedChar[5+i];
 8000de8:	4b20      	ldr	r3, [pc, #128]	; (8000e6c <command+0x1a4>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	3305      	adds	r3, #5
 8000dee:	461a      	mov	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	441a      	add	r2, r3
 8000df4:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <command+0x1a4>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	3305      	adds	r3, #5
 8000dfa:	7811      	ldrb	r1, [r2, #0]
 8000dfc:	4a19      	ldr	r2, [pc, #100]	; (8000e64 <command+0x19c>)
 8000dfe:	54d1      	strb	r1, [r2, r3]
    	  checksum = Checksum(RXBufferArray);
 8000e00:	4818      	ldr	r0, [pc, #96]	; (8000e64 <command+0x19c>)
 8000e02:	f000 fd21 	bl	8001848 <Checksum>
 8000e06:	4603      	mov	r3, r0
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <command+0x1a8>)
 8000e0c:	701a      	strb	r2, [r3, #0]
		  uart_state = Fim;
 8000e0e:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <command+0x1a0>)
 8000e10:	2244      	movs	r2, #68	; 0x44
 8000e12:	701a      	strb	r2, [r3, #0]
	  break;
 8000e14:	e01f      	b.n	8000e56 <command+0x18e>
		  RXBufferArray[6+i] = ReceivedChar[6+i];
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <command+0x1a4>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	3306      	adds	r3, #6
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	441a      	add	r2, r3
 8000e22:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <command+0x1a4>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	3306      	adds	r3, #6
 8000e28:	7811      	ldrb	r1, [r2, #0]
 8000e2a:	4a0e      	ldr	r2, [pc, #56]	; (8000e64 <command+0x19c>)
 8000e2c:	54d1      	strb	r1, [r2, r3]
    	  EndReception = Fim;
 8000e2e:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <command+0x1ac>)
 8000e30:	2244      	movs	r2, #68	; 0x44
 8000e32:	701a      	strb	r2, [r3, #0]
    	  i=0;
 8000e34:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <command+0x1a4>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
    	  FirstData = 0;
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <command+0x198>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
    	  uart_state = iddle;
 8000e40:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <command+0x1a0>)
 8000e42:	2249      	movs	r2, #73	; 0x49
 8000e44:	701a      	strb	r2, [r3, #0]
    	break;
 8000e46:	e006      	b.n	8000e56 <command+0x18e>
        uart_state = iddle;
 8000e48:	4b07      	ldr	r3, [pc, #28]	; (8000e68 <command+0x1a0>)
 8000e4a:	2249      	movs	r2, #73	; 0x49
 8000e4c:	701a      	strb	r2, [r3, #0]
}
 8000e4e:	e002      	b.n	8000e56 <command+0x18e>
    }
 8000e50:	bf00      	nop
 8000e52:	e000      	b.n	8000e56 <command+0x18e>
        break;
 8000e54:	bf00      	nop
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	200003a8 	.word	0x200003a8
 8000e64:	200002bc 	.word	0x200002bc
 8000e68:	2000036f 	.word	0x2000036f
 8000e6c:	200002c8 	.word	0x200002c8
 8000e70:	2000036c 	.word	0x2000036c
 8000e74:	200002b7 	.word	0x200002b7

08000e78 <selectCommand>:

int selectCommand(struct Recepcao receive_message)

{
 8000e78:	b084      	sub	sp, #16
 8000e7a:	b490      	push	{r4, r7}
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	f107 0408 	add.w	r4, r7, #8
 8000e82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (receive_message.funcao == 1)
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d103      	bne.n	8000e94 <selectCommand+0x1c>
	 {
		  StateMachine = Identification;
 8000e8c:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <selectCommand+0x70>)
 8000e8e:	2231      	movs	r2, #49	; 0x31
 8000e90:	701a      	strb	r2, [r3, #0]
 8000e92:	e021      	b.n	8000ed8 <selectCommand+0x60>
	 }
	  else if (receive_message.funcao == 2)
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d103      	bne.n	8000ea2 <selectCommand+0x2a>
	  {
		  StateMachine = Config;
 8000e9a:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <selectCommand+0x70>)
 8000e9c:	2232      	movs	r2, #50	; 0x32
 8000e9e:	701a      	strb	r2, [r3, #0]
 8000ea0:	e01a      	b.n	8000ed8 <selectCommand+0x60>
	  }
	  else if (receive_message.funcao == 3)
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	2b03      	cmp	r3, #3
 8000ea6:	d103      	bne.n	8000eb0 <selectCommand+0x38>
	  {
		  StateMachine = Start;
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <selectCommand+0x70>)
 8000eaa:	2233      	movs	r2, #51	; 0x33
 8000eac:	701a      	strb	r2, [r3, #0]
 8000eae:	e013      	b.n	8000ed8 <selectCommand+0x60>
	  }
	else if (receive_message.funcao == 4)
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	d103      	bne.n	8000ebe <selectCommand+0x46>
	{
		  StateMachine = Read;
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <selectCommand+0x70>)
 8000eb8:	2234      	movs	r2, #52	; 0x34
 8000eba:	701a      	strb	r2, [r3, #0]
 8000ebc:	e00c      	b.n	8000ed8 <selectCommand+0x60>
	}
	else if (receive_message.funcao == 5)
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	2b05      	cmp	r3, #5
 8000ec2:	d103      	bne.n	8000ecc <selectCommand+0x54>
	{
		  StateMachine = ReadError;
 8000ec4:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <selectCommand+0x70>)
 8000ec6:	2235      	movs	r2, #53	; 0x35
 8000ec8:	701a      	strb	r2, [r3, #0]
 8000eca:	e005      	b.n	8000ed8 <selectCommand+0x60>
	}
	else if (receive_message.funcao == 6)
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	2b06      	cmp	r3, #6
 8000ed0:	d102      	bne.n	8000ed8 <selectCommand+0x60>
	{
		  StateMachine = Stop;
 8000ed2:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <selectCommand+0x70>)
 8000ed4:	2236      	movs	r2, #54	; 0x36
 8000ed6:	701a      	strb	r2, [r3, #0]
	}
	return StateMachine;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <selectCommand+0x70>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc90      	pop	{r4, r7}
 8000ee2:	b004      	add	sp, #16
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	2000036e 	.word	0x2000036e

08000eec <getID>:

void getID()
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
		uint16_t codCefise=0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	80fb      	strh	r3, [r7, #6]
		if(receive_message.dadosCount == 1) // Codificação
 8000ef6:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <getID+0x60>)
 8000ef8:	691b      	ldr	r3, [r3, #16]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d111      	bne.n	8000f22 <getID+0x36>
		{
			FLASH_apaga(END_INICIAL, 1);
 8000efe:	2101      	movs	r1, #1
 8000f00:	4813      	ldr	r0, [pc, #76]	; (8000f50 <getID+0x64>)
 8000f02:	f7ff f923 	bl	800014c <FLASH_apaga>
			codCefise = dados[0];
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <getID+0x68>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	80fb      	strh	r3, [r7, #6]
			infoDevice.Id = codCefise;
 8000f0e:	88fb      	ldrh	r3, [r7, #6]
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <getID+0x6c>)
 8000f14:	601a      	str	r2, [r3, #0]
			FLASH_escreve_16bits(END_INICIAL, &codCefise);
 8000f16:	1dbb      	adds	r3, r7, #6
 8000f18:	4619      	mov	r1, r3
 8000f1a:	480d      	ldr	r0, [pc, #52]	; (8000f50 <getID+0x64>)
 8000f1c:	f7ff f936 	bl	800018c <FLASH_escreve_16bits>
			if(codCefise != 0xFFFF)
			{
				infoDevice.Id = codCefise;
			}
		}
}
 8000f20:	e010      	b.n	8000f44 <getID+0x58>
			receive_message.dadosCount = 1;
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <getID+0x60>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	611a      	str	r2, [r3, #16]
			FLASH_le_16bits(END_INICIAL, &codCefise);
 8000f28:	1dbb      	adds	r3, r7, #6
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4808      	ldr	r0, [pc, #32]	; (8000f50 <getID+0x64>)
 8000f2e:	f7ff f94a 	bl	80001c6 <FLASH_le_16bits>
			if(codCefise != 0xFFFF)
 8000f32:	88fb      	ldrh	r3, [r7, #6]
 8000f34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d003      	beq.n	8000f44 <getID+0x58>
				infoDevice.Id = codCefise;
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <getID+0x6c>)
 8000f42:	601a      	str	r2, [r3, #0]
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000340 	.word	0x20000340
 8000f50:	0800f000 	.word	0x0800f000
 8000f54:	200002d8 	.word	0x200002d8
 8000f58:	2000035c 	.word	0x2000035c

08000f5c <DeviceParamenter>:

void DeviceParamenter(struct Recepcao message)
{
 8000f5c:	b084      	sub	sp, #16
 8000f5e:	b490      	push	{r4, r7}
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	f107 0408 	add.w	r4, r7, #8
 8000f66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	timeTotal = dados[1];
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <DeviceParamenter+0x40>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <DeviceParamenter+0x44>)
 8000f72:	701a      	strb	r2, [r3, #0]
	switch(dados[0])
 8000f74:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <DeviceParamenter+0x40>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d002      	beq.n	8000f82 <DeviceParamenter+0x26>
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d004      	beq.n	8000f8a <DeviceParamenter+0x2e>
		case 0x02:
			readStatus = MAN;
		break;

	}
}
 8000f80:	e007      	b.n	8000f92 <DeviceParamenter+0x36>
			readStatus = AUTO;
 8000f82:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <DeviceParamenter+0x48>)
 8000f84:	2246      	movs	r2, #70	; 0x46
 8000f86:	701a      	strb	r2, [r3, #0]
		break;
 8000f88:	e003      	b.n	8000f92 <DeviceParamenter+0x36>
			readStatus = MAN;
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <DeviceParamenter+0x48>)
 8000f8c:	224d      	movs	r2, #77	; 0x4d
 8000f8e:	701a      	strb	r2, [r3, #0]
		break;
 8000f90:	bf00      	nop
}
 8000f92:	bf00      	nop
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc90      	pop	{r4, r7}
 8000f98:	b004      	add	sp, #16
 8000f9a:	4770      	bx	lr
 8000f9c:	200002d8 	.word	0x200002d8
 8000fa0:	20000339 	.word	0x20000339
 8000fa4:	200002c6 	.word	0x200002c6

08000fa8 <StartDevice>:

char StartDevice(char deviceFlag)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
	char startEncoder;
	if(deviceFlag == 0)
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d108      	bne.n	8000fca <StartDevice+0x22>
	{
		startEncoder = HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000fb8:	213c      	movs	r1, #60	; 0x3c
 8000fba:	4809      	ldr	r0, [pc, #36]	; (8000fe0 <StartDevice+0x38>)
 8000fbc:	f004 f87a 	bl	80050b4 <HAL_TIM_Encoder_Start_IT>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	73fb      	strb	r3, [r7, #15]
		HAL_Delay(10);
 8000fc4:	200a      	movs	r0, #10
 8000fc6:	f000 ff93 	bl	8001ef0 <HAL_Delay>
		/*startEncoder = HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_1);*/
	}
	if(startEncoder == HAL_OK)
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d101      	bne.n	8000fd4 <StartDevice+0x2c>
		return 1;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e000      	b.n	8000fd6 <StartDevice+0x2e>
	else return 0;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	2000019c 	.word	0x2000019c

08000fe4 <TransmitData>:

void TransmitData(struct Recepcao Send_message,int32_t *dataToSend, uint8_t dataLenght)
{
 8000fe4:	b084      	sub	sp, #16
 8000fe6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fea:	b08b      	sub	sp, #44	; 0x2c
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	f107 0650 	add.w	r6, r7, #80	; 0x50
 8000ff2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000ff6:	466b      	mov	r3, sp
 8000ff8:	607b      	str	r3, [r7, #4]
	uint8_t txBuffer[dataLenght];
 8000ffa:	f897 6070 	ldrb.w	r6, [r7, #112]	; 0x70
 8000ffe:	4633      	mov	r3, r6
 8001000:	3b01      	subs	r3, #1
 8001002:	623b      	str	r3, [r7, #32]
 8001004:	b2f3      	uxtb	r3, r6
 8001006:	2200      	movs	r2, #0
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	60fa      	str	r2, [r7, #12]
 800100c:	f04f 0200 	mov.w	r2, #0
 8001010:	f04f 0300 	mov.w	r3, #0
 8001014:	68f9      	ldr	r1, [r7, #12]
 8001016:	00cb      	lsls	r3, r1, #3
 8001018:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800101c:	4684      	mov	ip, r0
 800101e:	ea43 735c 	orr.w	r3, r3, ip, lsr #29
 8001022:	4601      	mov	r1, r0
 8001024:	00ca      	lsls	r2, r1, #3
 8001026:	b2f3      	uxtb	r3, r6
 8001028:	2200      	movs	r2, #0
 800102a:	469a      	mov	sl, r3
 800102c:	4693      	mov	fp, r2
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	f04f 0300 	mov.w	r3, #0
 8001036:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800103a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800103e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001042:	4633      	mov	r3, r6
 8001044:	3307      	adds	r3, #7
 8001046:	08db      	lsrs	r3, r3, #3
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	ebad 0d03 	sub.w	sp, sp, r3
 800104e:	466b      	mov	r3, sp
 8001050:	3300      	adds	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
	static uint8_t txBufferRead[67];
	uint8_t errorBuffer[dataLenght];
 8001054:	f897 1070 	ldrb.w	r1, [r7, #112]	; 0x70
 8001058:	460b      	mov	r3, r1
 800105a:	3b01      	subs	r3, #1
 800105c:	61bb      	str	r3, [r7, #24]
 800105e:	b2cb      	uxtb	r3, r1
 8001060:	2200      	movs	r2, #0
 8001062:	4698      	mov	r8, r3
 8001064:	4691      	mov	r9, r2
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	f04f 0300 	mov.w	r3, #0
 800106e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001072:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001076:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800107a:	b2cb      	uxtb	r3, r1
 800107c:	2200      	movs	r2, #0
 800107e:	461c      	mov	r4, r3
 8001080:	4615      	mov	r5, r2
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	f04f 0300 	mov.w	r3, #0
 800108a:	00eb      	lsls	r3, r5, #3
 800108c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001090:	00e2      	lsls	r2, r4, #3
 8001092:	460b      	mov	r3, r1
 8001094:	3307      	adds	r3, #7
 8001096:	08db      	lsrs	r3, r3, #3
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	ebad 0d03 	sub.w	sp, sp, r3
 800109e:	466b      	mov	r3, sp
 80010a0:	3300      	adds	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
	uint8_t counter = 2;
 80010a4:	2302      	movs	r3, #2
 80010a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t countArray = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t counterAux = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	switch(StateMachine)
 80010b6:	4baa      	ldr	r3, [pc, #680]	; (8001360 <TransmitData+0x37c>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	3b31      	subs	r3, #49	; 0x31
 80010bc:	2b14      	cmp	r3, #20
 80010be:	f200 8354 	bhi.w	800176a <TransmitData+0x786>
 80010c2:	a201      	add	r2, pc, #4	; (adr r2, 80010c8 <TransmitData+0xe4>)
 80010c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c8:	0800111d 	.word	0x0800111d
 80010cc:	08001179 	.word	0x08001179
 80010d0:	080011c3 	.word	0x080011c3
 80010d4:	0800120f 	.word	0x0800120f
 80010d8:	08001331 	.word	0x08001331
 80010dc:	08001379 	.word	0x08001379
 80010e0:	0800176b 	.word	0x0800176b
 80010e4:	0800176b 	.word	0x0800176b
 80010e8:	0800176b 	.word	0x0800176b
 80010ec:	0800176b 	.word	0x0800176b
 80010f0:	0800176b 	.word	0x0800176b
 80010f4:	0800176b 	.word	0x0800176b
 80010f8:	0800176b 	.word	0x0800176b
 80010fc:	0800176b 	.word	0x0800176b
 8001100:	0800176b 	.word	0x0800176b
 8001104:	0800176b 	.word	0x0800176b
 8001108:	0800176b 	.word	0x0800176b
 800110c:	0800176b 	.word	0x0800176b
 8001110:	0800176b 	.word	0x0800176b
 8001114:	0800176b 	.word	0x0800176b
 8001118:	080013c5 	.word	0x080013c5
	{
		case Identification:
			txBuffer[0] = Send_message.inicio;
 800111c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800111e:	b2da      	uxtb	r2, r3
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 8001124:	4b8f      	ldr	r3, [pc, #572]	; (8001364 <TransmitData+0x380>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	b2da      	uxtb	r2, r3
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 800112e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001130:	b2da      	uxtb	r2, r3
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = Send_message.funcao;
 8001136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001138:	b2da      	uxtb	r2, r3
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = Send_message.dadosCount;
 800113e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001140:	b2da      	uxtb	r2, r3
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	711a      	strb	r2, [r3, #4]
			if(Send_message.dadosCount>0)
 8001146:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001148:	2b00      	cmp	r3, #0
 800114a:	dd04      	ble.n	8001156 <TransmitData+0x172>
			{
				txBuffer[5] = infoDevice.Id;
 800114c:	4b85      	ldr	r3, [pc, #532]	; (8001364 <TransmitData+0x380>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	b2da      	uxtb	r2, r3
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	715a      	strb	r2, [r3, #5]
			}
			txBuffer[6] = Checksum(txBuffer);
 8001156:	69f8      	ldr	r0, [r7, #28]
 8001158:	f000 fb76 	bl	8001848 <Checksum>
 800115c:	4603      	mov	r3, r0
 800115e:	b2da      	uxtb	r2, r3
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 8001164:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001166:	b2da      	uxtb	r2, r3
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 800116c:	b2b3      	uxth	r3, r6
 800116e:	4619      	mov	r1, r3
 8001170:	69f8      	ldr	r0, [r7, #28]
 8001172:	f009 faeb 	bl	800a74c <CDC_Transmit_FS>

		break;
 8001176:	e2f8      	b.n	800176a <TransmitData+0x786>
		case Config:
			txBuffer[0] = Send_message.inicio;
 8001178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800117a:	b2da      	uxtb	r2, r3
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 8001180:	4b78      	ldr	r3, [pc, #480]	; (8001364 <TransmitData+0x380>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	b2da      	uxtb	r2, r3
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 800118a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800118c:	b2da      	uxtb	r2, r3
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = Send_message.funcao;
 8001192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001194:	b2da      	uxtb	r2, r3
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x00;
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	2200      	movs	r2, #0
 800119e:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = Checksum(txBuffer);
 80011a0:	69f8      	ldr	r0, [r7, #28]
 80011a2:	f000 fb51 	bl	8001848 <Checksum>
 80011a6:	4603      	mov	r3, r0
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Send_message.fim;
 80011ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	719a      	strb	r2, [r3, #6]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 80011b6:	b2b3      	uxth	r3, r6
 80011b8:	4619      	mov	r1, r3
 80011ba:	69f8      	ldr	r0, [r7, #28]
 80011bc:	f009 fac6 	bl	800a74c <CDC_Transmit_FS>

		break;
 80011c0:	e2d3      	b.n	800176a <TransmitData+0x786>
		case Start:
			txBuffer[0] = Send_message.inicio;
 80011c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 80011ca:	4b66      	ldr	r3, [pc, #408]	; (8001364 <TransmitData+0x380>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 80011d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = Send_message.funcao;
 80011dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = Send_message.dadosCount;
 80011e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = Checksum(txBuffer);
 80011ec:	69f8      	ldr	r0, [r7, #28]
 80011ee:	f000 fb2b 	bl	8001848 <Checksum>
 80011f2:	4603      	mov	r3, r0
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Send_message.fim;
 80011fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	719a      	strb	r2, [r3, #6]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 8001202:	b2b3      	uxth	r3, r6
 8001204:	4619      	mov	r1, r3
 8001206:	69f8      	ldr	r0, [r7, #28]
 8001208:	f009 faa0 	bl	800a74c <CDC_Transmit_FS>
		break;
 800120c:	e2ad      	b.n	800176a <TransmitData+0x786>

		case Read:
			txBufferRead[0] = Send_message.inicio;
 800120e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4b55      	ldr	r3, [pc, #340]	; (8001368 <TransmitData+0x384>)
 8001214:	701a      	strb	r2, [r3, #0]
			txBufferRead[1] = infoDevice.Id;
 8001216:	4b53      	ldr	r3, [pc, #332]	; (8001364 <TransmitData+0x380>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	b2da      	uxtb	r2, r3
 800121c:	4b52      	ldr	r3, [pc, #328]	; (8001368 <TransmitData+0x384>)
 800121e:	705a      	strb	r2, [r3, #1]
			txBufferRead[2] = Send_message.endOrigem;
 8001220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001222:	b2da      	uxtb	r2, r3
 8001224:	4b50      	ldr	r3, [pc, #320]	; (8001368 <TransmitData+0x384>)
 8001226:	709a      	strb	r2, [r3, #2]
			txBufferRead[3] = Send_message.funcao;
 8001228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800122a:	b2da      	uxtb	r2, r3
 800122c:	4b4e      	ldr	r3, [pc, #312]	; (8001368 <TransmitData+0x384>)
 800122e:	70da      	strb	r2, [r3, #3]
			txBufferRead[4] = 0x3C;
 8001230:	4b4d      	ldr	r3, [pc, #308]	; (8001368 <TransmitData+0x384>)
 8001232:	223c      	movs	r2, #60	; 0x3c
 8001234:	711a      	strb	r2, [r3, #4]
			for(countArray = 0; countArray<10; countArray++)
 8001236:	2300      	movs	r3, #0
 8001238:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800123c:	e028      	b.n	8001290 <TransmitData+0x2ac>
			{
				timeEncoder.all = currentTime[countArray];
 800123e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001242:	4a4a      	ldr	r2, [pc, #296]	; (800136c <TransmitData+0x388>)
 8001244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001248:	b29a      	uxth	r2, r3
 800124a:	4b49      	ldr	r3, [pc, #292]	; (8001370 <TransmitData+0x38c>)
 800124c:	801a      	strh	r2, [r3, #0]
				for(counter = 2; counter>0; counter--)
 800124e:	2302      	movs	r3, #2
 8001250:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001254:	e013      	b.n	800127e <TransmitData+0x29a>
				{
					txBufferRead[5+counterAux] = timeEncoder.pt[counter-1];
 8001256:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800125a:	1e5a      	subs	r2, r3, #1
 800125c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001260:	3305      	adds	r3, #5
 8001262:	4943      	ldr	r1, [pc, #268]	; (8001370 <TransmitData+0x38c>)
 8001264:	5c89      	ldrb	r1, [r1, r2]
 8001266:	4a40      	ldr	r2, [pc, #256]	; (8001368 <TransmitData+0x384>)
 8001268:	54d1      	strb	r1, [r2, r3]
					counterAux++;
 800126a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800126e:	3301      	adds	r3, #1
 8001270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				for(counter = 2; counter>0; counter--)
 8001274:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001278:	3b01      	subs	r3, #1
 800127a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800127e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001282:	2b00      	cmp	r3, #0
 8001284:	d1e7      	bne.n	8001256 <TransmitData+0x272>
			for(countArray = 0; countArray<10; countArray++)
 8001286:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800128a:	3301      	adds	r3, #1
 800128c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001290:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001294:	2b09      	cmp	r3, #9
 8001296:	d9d2      	bls.n	800123e <TransmitData+0x25a>
				}
			}
			counter = 4;
 8001298:	2304      	movs	r3, #4
 800129a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			counterAux = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			countArray = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			for(countArray = 0; countArray<10; countArray++)
 80012aa:	2300      	movs	r3, #0
 80012ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80012b0:	e028      	b.n	8001304 <TransmitData+0x320>
			{
				encoderPulso.all = dataToSend[countArray];
 80012b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80012ba:	4413      	add	r3, r2
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a2d      	ldr	r2, [pc, #180]	; (8001374 <TransmitData+0x390>)
 80012c0:	6013      	str	r3, [r2, #0]
				for(counter = 4; counter>0; counter--)
 80012c2:	2304      	movs	r3, #4
 80012c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80012c8:	e013      	b.n	80012f2 <TransmitData+0x30e>
				{
					txBufferRead[25+counterAux] = encoderPulso.pt[counter-1];
 80012ca:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012ce:	1e5a      	subs	r2, r3, #1
 80012d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012d4:	3319      	adds	r3, #25
 80012d6:	4927      	ldr	r1, [pc, #156]	; (8001374 <TransmitData+0x390>)
 80012d8:	5c89      	ldrb	r1, [r1, r2]
 80012da:	4a23      	ldr	r2, [pc, #140]	; (8001368 <TransmitData+0x384>)
 80012dc:	54d1      	strb	r1, [r2, r3]
					counterAux++;
 80012de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012e2:	3301      	adds	r3, #1
 80012e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				for(counter = 4; counter>0; counter--)
 80012e8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012ec:	3b01      	subs	r3, #1
 80012ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80012f2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1e7      	bne.n	80012ca <TransmitData+0x2e6>
			for(countArray = 0; countArray<10; countArray++)
 80012fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012fe:	3301      	adds	r3, #1
 8001300:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001304:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001308:	2b09      	cmp	r3, #9
 800130a:	d9d2      	bls.n	80012b2 <TransmitData+0x2ce>
				}
			}
			txBufferRead[65] = Checksum(txBufferRead);
 800130c:	4816      	ldr	r0, [pc, #88]	; (8001368 <TransmitData+0x384>)
 800130e:	f000 fa9b 	bl	8001848 <Checksum>
 8001312:	4603      	mov	r3, r0
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4b14      	ldr	r3, [pc, #80]	; (8001368 <TransmitData+0x384>)
 8001318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			txBuffer[66] = Send_message.fim;
 800131c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800131e:	b2da      	uxtb	r2, r3
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			CDC_Transmit_FS((uint8_t*)txBufferRead, sizeof(txBufferRead));
 8001326:	2143      	movs	r1, #67	; 0x43
 8001328:	480f      	ldr	r0, [pc, #60]	; (8001368 <TransmitData+0x384>)
 800132a:	f009 fa0f 	bl	800a74c <CDC_Transmit_FS>

		break;
 800132e:	e21c      	b.n	800176a <TransmitData+0x786>

		case ReadError:
			txBufferRead[0] = 0x0A;
 8001330:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <TransmitData+0x384>)
 8001332:	220a      	movs	r2, #10
 8001334:	701a      	strb	r2, [r3, #0]
			txBufferRead[3] = 0x05;
 8001336:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <TransmitData+0x384>)
 8001338:	2205      	movs	r2, #5
 800133a:	70da      	strb	r2, [r3, #3]
			txBufferRead[65] = Checksum(txBufferRead);
 800133c:	480a      	ldr	r0, [pc, #40]	; (8001368 <TransmitData+0x384>)
 800133e:	f000 fa83 	bl	8001848 <Checksum>
 8001342:	4603      	mov	r3, r0
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <TransmitData+0x384>)
 8001348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			txBufferRead[66] = 0x0F;
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <TransmitData+0x384>)
 800134e:	220f      	movs	r2, #15
 8001350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			CDC_Transmit_FS((uint8_t*)txBufferRead, sizeof(txBufferRead));
 8001354:	2143      	movs	r1, #67	; 0x43
 8001356:	4804      	ldr	r0, [pc, #16]	; (8001368 <TransmitData+0x384>)
 8001358:	f009 f9f8 	bl	800a74c <CDC_Transmit_FS>
		break;
 800135c:	e205      	b.n	800176a <TransmitData+0x786>
 800135e:	bf00      	nop
 8001360:	2000036e 	.word	0x2000036e
 8001364:	2000035c 	.word	0x2000035c
 8001368:	200003ac 	.word	0x200003ac
 800136c:	20000374 	.word	0x20000374
 8001370:	20000368 	.word	0x20000368
 8001374:	20000364 	.word	0x20000364

		case Stop:
		txBuffer[0] = Send_message.inicio;
 8001378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800137a:	b2da      	uxtb	r2, r3
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	701a      	strb	r2, [r3, #0]
		txBuffer[1] = infoDevice.Id;
 8001380:	4b98      	ldr	r3, [pc, #608]	; (80015e4 <TransmitData+0x600>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	b2da      	uxtb	r2, r3
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	705a      	strb	r2, [r3, #1]
		txBuffer[2] = Send_message.endOrigem;
 800138a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800138c:	b2da      	uxtb	r2, r3
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	709a      	strb	r2, [r3, #2]
		txBuffer[3] = Send_message.funcao;
 8001392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001394:	b2da      	uxtb	r2, r3
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	70da      	strb	r2, [r3, #3]
		txBuffer[4] = Send_message.dadosCount;
 800139a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800139c:	b2da      	uxtb	r2, r3
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	711a      	strb	r2, [r3, #4]
		txBuffer[5] = Checksum(txBuffer);
 80013a2:	69f8      	ldr	r0, [r7, #28]
 80013a4:	f000 fa50 	bl	8001848 <Checksum>
 80013a8:	4603      	mov	r3, r0
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	715a      	strb	r2, [r3, #5]
		txBuffer[6] = Send_message.fim;
 80013b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	719a      	strb	r2, [r3, #6]
		CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 80013b8:	b2b3      	uxth	r3, r6
 80013ba:	4619      	mov	r1, r3
 80013bc:	69f8      	ldr	r0, [r7, #28]
 80013be:	f009 f9c5 	bl	800a74c <CDC_Transmit_FS>
		break;
 80013c2:	e1d2      	b.n	800176a <TransmitData+0x786>

		case error:
			if(errorFlag == errorChecksum)
 80013c4:	4b88      	ldr	r3, [pc, #544]	; (80015e8 <TransmitData+0x604>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b30      	cmp	r3, #48	; 0x30
 80013ca:	d12b      	bne.n	8001424 <TransmitData+0x440>
			{
				txBuffer[0] = Send_message.inicio;
 80013cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	701a      	strb	r2, [r3, #0]
				txBuffer[1] = infoDevice.Id;
 80013d4:	4b83      	ldr	r3, [pc, #524]	; (80015e4 <TransmitData+0x600>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	705a      	strb	r2, [r3, #1]
				txBuffer[2] = Send_message.endOrigem;
 80013de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	709a      	strb	r2, [r3, #2]
				txBuffer[3] = (Send_message.funcao | 0xF0);
 80013e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	f063 030f 	orn	r3, r3, #15
 80013ee:	b25b      	sxtb	r3, r3
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	70da      	strb	r2, [r3, #3]
				txBuffer[4] = 0x01;
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	2201      	movs	r2, #1
 80013fa:	711a      	strb	r2, [r3, #4]
				txBuffer[5] = 0x00; //codigo de erro
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	2200      	movs	r2, #0
 8001400:	715a      	strb	r2, [r3, #5]
				txBuffer[6] = Checksum(txBuffer);
 8001402:	69f8      	ldr	r0, [r7, #28]
 8001404:	f000 fa20 	bl	8001848 <Checksum>
 8001408:	4603      	mov	r3, r0
 800140a:	b2da      	uxtb	r2, r3
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	719a      	strb	r2, [r3, #6]
				txBuffer[7] = Send_message.fim;
 8001410:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001412:	b2da      	uxtb	r2, r3
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	71da      	strb	r2, [r3, #7]
				CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 8001418:	b2b3      	uxth	r3, r6
 800141a:	4619      	mov	r1, r3
 800141c:	69f8      	ldr	r0, [r7, #28]
 800141e:	f009 f995 	bl	800a74c <CDC_Transmit_FS>
				txBuffer[5] = 0x09;
				txBuffer[6] = Checksum(txBuffer);
				txBuffer[7] = Send_message.fim;
				CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
			}
			break;
 8001422:	e1a1      	b.n	8001768 <TransmitData+0x784>
			else if (errorFlag == timeOut)
 8001424:	4b70      	ldr	r3, [pc, #448]	; (80015e8 <TransmitData+0x604>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b31      	cmp	r3, #49	; 0x31
 800142a:	d12b      	bne.n	8001484 <TransmitData+0x4a0>
				txBuffer[0] = Send_message.inicio;
 800142c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800142e:	b2da      	uxtb	r2, r3
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	701a      	strb	r2, [r3, #0]
				txBuffer[1] = infoDevice.Id;
 8001434:	4b6b      	ldr	r3, [pc, #428]	; (80015e4 <TransmitData+0x600>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	705a      	strb	r2, [r3, #1]
				txBuffer[2] = Send_message.endOrigem;
 800143e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001440:	b2da      	uxtb	r2, r3
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	709a      	strb	r2, [r3, #2]
				txBuffer[3] = (Send_message.funcao | 0xF0);
 8001446:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001448:	b25b      	sxtb	r3, r3
 800144a:	f063 030f 	orn	r3, r3, #15
 800144e:	b25b      	sxtb	r3, r3
 8001450:	b2da      	uxtb	r2, r3
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	70da      	strb	r2, [r3, #3]
				txBuffer[4] = 0x01;
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	2201      	movs	r2, #1
 800145a:	711a      	strb	r2, [r3, #4]
				txBuffer[5] = 0x01;
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	2201      	movs	r2, #1
 8001460:	715a      	strb	r2, [r3, #5]
				txBuffer[6] = Checksum(txBuffer);
 8001462:	69f8      	ldr	r0, [r7, #28]
 8001464:	f000 f9f0 	bl	8001848 <Checksum>
 8001468:	4603      	mov	r3, r0
 800146a:	b2da      	uxtb	r2, r3
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	719a      	strb	r2, [r3, #6]
				txBuffer[7] = Send_message.fim;
 8001470:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001472:	b2da      	uxtb	r2, r3
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	71da      	strb	r2, [r3, #7]
				CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 8001478:	b2b3      	uxth	r3, r6
 800147a:	4619      	mov	r1, r3
 800147c:	69f8      	ldr	r0, [r7, #28]
 800147e:	f009 f965 	bl	800a74c <CDC_Transmit_FS>
			break;
 8001482:	e171      	b.n	8001768 <TransmitData+0x784>
			else if (errorFlag == noAddress)
 8001484:	4b58      	ldr	r3, [pc, #352]	; (80015e8 <TransmitData+0x604>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b32      	cmp	r3, #50	; 0x32
 800148a:	d126      	bne.n	80014da <TransmitData+0x4f6>
				txBuffer[0] = Send_message.inicio;
 800148c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800148e:	b2da      	uxtb	r2, r3
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	701a      	strb	r2, [r3, #0]
				txBuffer[1] = infoDevice.Id;
 8001494:	4b53      	ldr	r3, [pc, #332]	; (80015e4 <TransmitData+0x600>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	705a      	strb	r2, [r3, #1]
				txBuffer[2] = Send_message.endOrigem;
 800149e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	709a      	strb	r2, [r3, #2]
				txBuffer[3] = (0x01 | 0xF0);
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	22f1      	movs	r2, #241	; 0xf1
 80014aa:	70da      	strb	r2, [r3, #3]
				txBuffer[4] = 0x01;
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	2201      	movs	r2, #1
 80014b0:	711a      	strb	r2, [r3, #4]
				txBuffer[5] = 0x02;
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	2202      	movs	r2, #2
 80014b6:	715a      	strb	r2, [r3, #5]
				txBuffer[6] = Checksum(txBuffer);
 80014b8:	69f8      	ldr	r0, [r7, #28]
 80014ba:	f000 f9c5 	bl	8001848 <Checksum>
 80014be:	4603      	mov	r3, r0
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	719a      	strb	r2, [r3, #6]
				txBuffer[7] = Send_message.fim;
 80014c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	71da      	strb	r2, [r3, #7]
				CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 80014ce:	b2b3      	uxth	r3, r6
 80014d0:	4619      	mov	r1, r3
 80014d2:	69f8      	ldr	r0, [r7, #28]
 80014d4:	f009 f93a 	bl	800a74c <CDC_Transmit_FS>
			break;
 80014d8:	e146      	b.n	8001768 <TransmitData+0x784>
			else if (errorFlag == errorAddress)
 80014da:	4b43      	ldr	r3, [pc, #268]	; (80015e8 <TransmitData+0x604>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b33      	cmp	r3, #51	; 0x33
 80014e0:	d125      	bne.n	800152e <TransmitData+0x54a>
				txBuffer[0] = Send_message.inicio;
 80014e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	701a      	strb	r2, [r3, #0]
				txBuffer[1] = infoDevice.Id;
 80014ea:	4b3e      	ldr	r3, [pc, #248]	; (80015e4 <TransmitData+0x600>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	705a      	strb	r2, [r3, #1]
				txBuffer[2] = Send_message.endOrigem;
 80014f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	709a      	strb	r2, [r3, #2]
				txBuffer[3] = (0x01 | 0xF0);
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	22f1      	movs	r2, #241	; 0xf1
 8001500:	70da      	strb	r2, [r3, #3]
				txBuffer[4] = 0x01;
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	2201      	movs	r2, #1
 8001506:	711a      	strb	r2, [r3, #4]
				txBuffer[5] = 0x03;
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	2203      	movs	r2, #3
 800150c:	715a      	strb	r2, [r3, #5]
				txBuffer[6] = Checksum(txBuffer);
 800150e:	69f8      	ldr	r0, [r7, #28]
 8001510:	f000 f99a 	bl	8001848 <Checksum>
 8001514:	4603      	mov	r3, r0
 8001516:	b2da      	uxtb	r2, r3
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	719a      	strb	r2, [r3, #6]
				txBuffer[7] = 0x0F;
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	220f      	movs	r2, #15
 8001520:	71da      	strb	r2, [r3, #7]
				CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 8001522:	b2b3      	uxth	r3, r6
 8001524:	4619      	mov	r1, r3
 8001526:	69f8      	ldr	r0, [r7, #28]
 8001528:	f009 f910 	bl	800a74c <CDC_Transmit_FS>
			break;
 800152c:	e11c      	b.n	8001768 <TransmitData+0x784>
			else if (errorFlag == errorDevice)
 800152e:	4b2e      	ldr	r3, [pc, #184]	; (80015e8 <TransmitData+0x604>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b34      	cmp	r3, #52	; 0x34
 8001534:	d12b      	bne.n	800158e <TransmitData+0x5aa>
				txBuffer[0] = Send_message.inicio;
 8001536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001538:	b2da      	uxtb	r2, r3
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	701a      	strb	r2, [r3, #0]
				txBuffer[1] = infoDevice.Id;
 800153e:	4b29      	ldr	r3, [pc, #164]	; (80015e4 <TransmitData+0x600>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	b2da      	uxtb	r2, r3
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	705a      	strb	r2, [r3, #1]
				txBuffer[2] = Send_message.endOrigem;
 8001548:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800154a:	b2da      	uxtb	r2, r3
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	709a      	strb	r2, [r3, #2]
				txBuffer[3] = (Send_message.funcao | 0xF0);
 8001550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001552:	b25b      	sxtb	r3, r3
 8001554:	f063 030f 	orn	r3, r3, #15
 8001558:	b25b      	sxtb	r3, r3
 800155a:	b2da      	uxtb	r2, r3
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	70da      	strb	r2, [r3, #3]
				txBuffer[4] = 0x01;
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	2201      	movs	r2, #1
 8001564:	711a      	strb	r2, [r3, #4]
				txBuffer[5] = 0x04;
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	2204      	movs	r2, #4
 800156a:	715a      	strb	r2, [r3, #5]
				txBuffer[6] = Checksum(txBuffer);
 800156c:	69f8      	ldr	r0, [r7, #28]
 800156e:	f000 f96b 	bl	8001848 <Checksum>
 8001572:	4603      	mov	r3, r0
 8001574:	b2da      	uxtb	r2, r3
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	719a      	strb	r2, [r3, #6]
				txBuffer[7] = Send_message.fim;
 800157a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800157c:	b2da      	uxtb	r2, r3
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	71da      	strb	r2, [r3, #7]
				CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 8001582:	b2b3      	uxth	r3, r6
 8001584:	4619      	mov	r1, r3
 8001586:	69f8      	ldr	r0, [r7, #28]
 8001588:	f009 f8e0 	bl	800a74c <CDC_Transmit_FS>
			break;
 800158c:	e0ec      	b.n	8001768 <TransmitData+0x784>
			else if (errorFlag == errorConfig)
 800158e:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <TransmitData+0x604>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b35      	cmp	r3, #53	; 0x35
 8001594:	d12a      	bne.n	80015ec <TransmitData+0x608>
				txBuffer[0] = Send_message.inicio;
 8001596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001598:	b2da      	uxtb	r2, r3
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	701a      	strb	r2, [r3, #0]
				txBuffer[1] = infoDevice.Id;
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <TransmitData+0x600>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	705a      	strb	r2, [r3, #1]
				txBuffer[2] = Send_message.endOrigem;
 80015a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	709a      	strb	r2, [r3, #2]
				txBuffer[3] = (0x02 | 0xF0);
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	22f2      	movs	r2, #242	; 0xf2
 80015b4:	70da      	strb	r2, [r3, #3]
				txBuffer[4] = 0x01;
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	2201      	movs	r2, #1
 80015ba:	711a      	strb	r2, [r3, #4]
				txBuffer[5] = 0x05;
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	2205      	movs	r2, #5
 80015c0:	715a      	strb	r2, [r3, #5]
				txBuffer[6] = Checksum(txBuffer);
 80015c2:	69f8      	ldr	r0, [r7, #28]
 80015c4:	f000 f940 	bl	8001848 <Checksum>
 80015c8:	4603      	mov	r3, r0
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	719a      	strb	r2, [r3, #6]
				txBuffer[7] = Send_message.fim;
 80015d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	71da      	strb	r2, [r3, #7]
				CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 80015d8:	b2b3      	uxth	r3, r6
 80015da:	4619      	mov	r1, r3
 80015dc:	69f8      	ldr	r0, [r7, #28]
 80015de:	f009 f8b5 	bl	800a74c <CDC_Transmit_FS>
			break;
 80015e2:	e0c1      	b.n	8001768 <TransmitData+0x784>
 80015e4:	2000035c 	.word	0x2000035c
 80015e8:	20000000 	.word	0x20000000
			else if (errorFlag == errorFunction)
 80015ec:	4b63      	ldr	r3, [pc, #396]	; (800177c <TransmitData+0x798>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b36      	cmp	r3, #54	; 0x36
 80015f2:	d12b      	bne.n	800164c <TransmitData+0x668>
				txBuffer[0] = Send_message.inicio;
 80015f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	701a      	strb	r2, [r3, #0]
				txBuffer[1] = infoDevice.Id;
 80015fc:	4b60      	ldr	r3, [pc, #384]	; (8001780 <TransmitData+0x79c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	b2da      	uxtb	r2, r3
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	705a      	strb	r2, [r3, #1]
				txBuffer[2] = Send_message.endOrigem;
 8001606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001608:	b2da      	uxtb	r2, r3
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	709a      	strb	r2, [r3, #2]
				txBuffer[3] = (Send_message.funcao | 0xF0);
 800160e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001610:	b25b      	sxtb	r3, r3
 8001612:	f063 030f 	orn	r3, r3, #15
 8001616:	b25b      	sxtb	r3, r3
 8001618:	b2da      	uxtb	r2, r3
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	70da      	strb	r2, [r3, #3]
				txBuffer[4] = 0x01;
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	2201      	movs	r2, #1
 8001622:	711a      	strb	r2, [r3, #4]
				txBuffer[5] = 0x06;
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	2206      	movs	r2, #6
 8001628:	715a      	strb	r2, [r3, #5]
				txBuffer[6] = Checksum(txBuffer);
 800162a:	69f8      	ldr	r0, [r7, #28]
 800162c:	f000 f90c 	bl	8001848 <Checksum>
 8001630:	4603      	mov	r3, r0
 8001632:	b2da      	uxtb	r2, r3
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	719a      	strb	r2, [r3, #6]
				txBuffer[7] = Send_message.fim;
 8001638:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800163a:	b2da      	uxtb	r2, r3
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	71da      	strb	r2, [r3, #7]
				CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 8001640:	b2b3      	uxth	r3, r6
 8001642:	4619      	mov	r1, r3
 8001644:	69f8      	ldr	r0, [r7, #28]
 8001646:	f009 f881 	bl	800a74c <CDC_Transmit_FS>
			break;
 800164a:	e08d      	b.n	8001768 <TransmitData+0x784>
			else if (errorFlag == errorData)
 800164c:	4b4b      	ldr	r3, [pc, #300]	; (800177c <TransmitData+0x798>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b37      	cmp	r3, #55	; 0x37
 8001652:	d12b      	bne.n	80016ac <TransmitData+0x6c8>
				txBuffer[0] = Send_message.inicio;
 8001654:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001656:	b2da      	uxtb	r2, r3
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	701a      	strb	r2, [r3, #0]
				txBuffer[1] = infoDevice.Id;
 800165c:	4b48      	ldr	r3, [pc, #288]	; (8001780 <TransmitData+0x79c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	b2da      	uxtb	r2, r3
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	705a      	strb	r2, [r3, #1]
				txBuffer[2] = Send_message.endOrigem;
 8001666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001668:	b2da      	uxtb	r2, r3
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	709a      	strb	r2, [r3, #2]
				txBuffer[3] = (Send_message.funcao | 0xF0);
 800166e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001670:	b25b      	sxtb	r3, r3
 8001672:	f063 030f 	orn	r3, r3, #15
 8001676:	b25b      	sxtb	r3, r3
 8001678:	b2da      	uxtb	r2, r3
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	70da      	strb	r2, [r3, #3]
				txBuffer[4] = 0x01;
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	2201      	movs	r2, #1
 8001682:	711a      	strb	r2, [r3, #4]
				txBuffer[5] = 0x07;
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	2207      	movs	r2, #7
 8001688:	715a      	strb	r2, [r3, #5]
				txBuffer[6] = Checksum(txBuffer);
 800168a:	69f8      	ldr	r0, [r7, #28]
 800168c:	f000 f8dc 	bl	8001848 <Checksum>
 8001690:	4603      	mov	r3, r0
 8001692:	b2da      	uxtb	r2, r3
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	719a      	strb	r2, [r3, #6]
				txBuffer[7] = Send_message.fim;
 8001698:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800169a:	b2da      	uxtb	r2, r3
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	71da      	strb	r2, [r3, #7]
				CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 80016a0:	b2b3      	uxth	r3, r6
 80016a2:	4619      	mov	r1, r3
 80016a4:	69f8      	ldr	r0, [r7, #28]
 80016a6:	f009 f851 	bl	800a74c <CDC_Transmit_FS>
			break;
 80016aa:	e05d      	b.n	8001768 <TransmitData+0x784>
			else if (errorFlag == errorStartHeader)
 80016ac:	4b33      	ldr	r3, [pc, #204]	; (800177c <TransmitData+0x798>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b38      	cmp	r3, #56	; 0x38
 80016b2:	d12a      	bne.n	800170a <TransmitData+0x726>
				txBuffer[0] = 0x0A;
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	220a      	movs	r2, #10
 80016b8:	701a      	strb	r2, [r3, #0]
				txBuffer[1] = infoDevice.Id;
 80016ba:	4b31      	ldr	r3, [pc, #196]	; (8001780 <TransmitData+0x79c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	705a      	strb	r2, [r3, #1]
				txBuffer[2] = Send_message.endOrigem;
 80016c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	709a      	strb	r2, [r3, #2]
				txBuffer[3] = (Send_message.funcao | 0xF0);
 80016cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016ce:	b25b      	sxtb	r3, r3
 80016d0:	f063 030f 	orn	r3, r3, #15
 80016d4:	b25b      	sxtb	r3, r3
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	70da      	strb	r2, [r3, #3]
				txBuffer[4] = 0x01;
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	2201      	movs	r2, #1
 80016e0:	711a      	strb	r2, [r3, #4]
				txBuffer[5] = 0x08;
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	2208      	movs	r2, #8
 80016e6:	715a      	strb	r2, [r3, #5]
				txBuffer[6] = Checksum(txBuffer);
 80016e8:	69f8      	ldr	r0, [r7, #28]
 80016ea:	f000 f8ad 	bl	8001848 <Checksum>
 80016ee:	4603      	mov	r3, r0
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	719a      	strb	r2, [r3, #6]
				txBuffer[7] = Send_message.fim;
 80016f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	71da      	strb	r2, [r3, #7]
				CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 80016fe:	b2b3      	uxth	r3, r6
 8001700:	4619      	mov	r1, r3
 8001702:	69f8      	ldr	r0, [r7, #28]
 8001704:	f009 f822 	bl	800a74c <CDC_Transmit_FS>
			break;
 8001708:	e02e      	b.n	8001768 <TransmitData+0x784>
			else if (errorFlag == errorEndHeader)
 800170a:	4b1c      	ldr	r3, [pc, #112]	; (800177c <TransmitData+0x798>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b39      	cmp	r3, #57	; 0x39
 8001710:	d12a      	bne.n	8001768 <TransmitData+0x784>
				txBuffer[0] = Send_message.inicio;
 8001712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001714:	b2da      	uxtb	r2, r3
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	701a      	strb	r2, [r3, #0]
				txBuffer[1] = infoDevice.Id;
 800171a:	4b19      	ldr	r3, [pc, #100]	; (8001780 <TransmitData+0x79c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	b2da      	uxtb	r2, r3
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	705a      	strb	r2, [r3, #1]
				txBuffer[2] = Send_message.endOrigem;
 8001724:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001726:	b2da      	uxtb	r2, r3
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	709a      	strb	r2, [r3, #2]
				txBuffer[3] = (Send_message.funcao | 0xF0);
 800172c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800172e:	b25b      	sxtb	r3, r3
 8001730:	f063 030f 	orn	r3, r3, #15
 8001734:	b25b      	sxtb	r3, r3
 8001736:	b2da      	uxtb	r2, r3
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	70da      	strb	r2, [r3, #3]
				txBuffer[4] = 0x01;
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	2201      	movs	r2, #1
 8001740:	711a      	strb	r2, [r3, #4]
				txBuffer[5] = 0x09;
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	2209      	movs	r2, #9
 8001746:	715a      	strb	r2, [r3, #5]
				txBuffer[6] = Checksum(txBuffer);
 8001748:	69f8      	ldr	r0, [r7, #28]
 800174a:	f000 f87d 	bl	8001848 <Checksum>
 800174e:	4603      	mov	r3, r0
 8001750:	b2da      	uxtb	r2, r3
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	719a      	strb	r2, [r3, #6]
				txBuffer[7] = Send_message.fim;
 8001756:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001758:	b2da      	uxtb	r2, r3
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	71da      	strb	r2, [r3, #7]
				CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 800175e:	b2b3      	uxth	r3, r6
 8001760:	4619      	mov	r1, r3
 8001762:	69f8      	ldr	r0, [r7, #28]
 8001764:	f008 fff2 	bl	800a74c <CDC_Transmit_FS>
			break;
 8001768:	bf00      	nop
 800176a:	f8d7 d004 	ldr.w	sp, [r7, #4]
	}
}
 800176e:	bf00      	nop
 8001770:	372c      	adds	r7, #44	; 0x2c
 8001772:	46bd      	mov	sp, r7
 8001774:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001778:	b004      	add	sp, #16
 800177a:	4770      	bx	lr
 800177c:	20000000 	.word	0x20000000
 8001780:	2000035c 	.word	0x2000035c

08001784 <StopDevice>:

char StopDevice(char deviceFlag)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
	static char stopEncoder;
	char contador = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	73fb      	strb	r3, [r7, #15]
	if(deviceFlag == 1)
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d110      	bne.n	80017ba <StopDevice+0x36>
	{
		stopEncoder = HAL_TIM_Encoder_Stop_IT(&htim2, TIM_CHANNEL_ALL);
 8001798:	213c      	movs	r1, #60	; 0x3c
 800179a:	4821      	ldr	r0, [pc, #132]	; (8001820 <StopDevice+0x9c>)
 800179c:	f003 fd38 	bl	8005210 <HAL_TIM_Encoder_Stop_IT>
 80017a0:	4603      	mov	r3, r0
 80017a2:	461a      	mov	r2, r3
 80017a4:	4b1f      	ldr	r3, [pc, #124]	; (8001824 <StopDevice+0xa0>)
 80017a6:	701a      	strb	r2, [r3, #0]
		timerEnable = HAL_TIM_Base_Stop_IT(&htim3);
 80017a8:	481f      	ldr	r0, [pc, #124]	; (8001828 <StopDevice+0xa4>)
 80017aa:	f003 fbb3 	bl	8004f14 <HAL_TIM_Base_Stop_IT>
 80017ae:	4603      	mov	r3, r0
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b1e      	ldr	r3, [pc, #120]	; (800182c <StopDevice+0xa8>)
 80017b4:	601a      	str	r2, [r3, #0]
		deviceFlag = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	71fb      	strb	r3, [r7, #7]
	}

	/*stopEncoder = HAL_TIM_Encoder_Stop_IT(&htim2, TIM_CHANNEL_1);*/
	HAL_Delay(10);
 80017ba:	200a      	movs	r0, #10
 80017bc:	f000 fb98 	bl	8001ef0 <HAL_Delay>
	if(stopEncoder == HAL_OK && timerEnable == HAL_OK)
 80017c0:	4b18      	ldr	r3, [pc, #96]	; (8001824 <StopDevice+0xa0>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d126      	bne.n	8001816 <StopDevice+0x92>
 80017c8:	4b18      	ldr	r3, [pc, #96]	; (800182c <StopDevice+0xa8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d122      	bne.n	8001816 <StopDevice+0x92>
	{
		for(contador=0;contador<10;contador++)
 80017d0:	2300      	movs	r3, #0
 80017d2:	73fb      	strb	r3, [r7, #15]
 80017d4:	e017      	b.n	8001806 <StopDevice+0x82>
		{
			counterPulso[contador] = 0;
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
 80017d8:	4a15      	ldr	r2, [pc, #84]	; (8001830 <StopDevice+0xac>)
 80017da:	2100      	movs	r1, #0
 80017dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			fimPulso[contador] = 0;
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
 80017e2:	4a14      	ldr	r2, [pc, #80]	; (8001834 <StopDevice+0xb0>)
 80017e4:	2100      	movs	r1, #0
 80017e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			currentTime[contador] = 0;
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
 80017ec:	4a12      	ldr	r2, [pc, #72]	; (8001838 <StopDevice+0xb4>)
 80017ee:	2100      	movs	r1, #0
 80017f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			transmitFlag = 0;
 80017f4:	4b11      	ldr	r3, [pc, #68]	; (800183c <StopDevice+0xb8>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
			USB_FLAG = 0;
 80017fa:	4b11      	ldr	r3, [pc, #68]	; (8001840 <StopDevice+0xbc>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]
		for(contador=0;contador<10;contador++)
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	3301      	adds	r3, #1
 8001804:	73fb      	strb	r3, [r7, #15]
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	2b09      	cmp	r3, #9
 800180a:	d9e4      	bls.n	80017d6 <StopDevice+0x52>
		}
		samples = 0;
 800180c:	4b0d      	ldr	r3, [pc, #52]	; (8001844 <StopDevice+0xc0>)
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
		return 0;
 8001812:	2300      	movs	r3, #0
 8001814:	e000      	b.n	8001818 <StopDevice+0x94>
	}
	else return 1;
 8001816:	2301      	movs	r3, #1
}
 8001818:	4618      	mov	r0, r3
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	2000019c 	.word	0x2000019c
 8001824:	200003ef 	.word	0x200003ef
 8001828:	200001e4 	.word	0x200001e4
 800182c:	20000370 	.word	0x20000370
 8001830:	200002e8 	.word	0x200002e8
 8001834:	20000310 	.word	0x20000310
 8001838:	20000374 	.word	0x20000374
 800183c:	200002cc 	.word	0x200002cc
 8001840:	200002b6 	.word	0x200002b6
 8001844:	2000039c 	.word	0x2000039c

08001848 <Checksum>:


int Checksum(char *c)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
	//if(c[0] == 0x0A)//Verifica Byte Inicio
	//{
		if(c[4] == 0)Total=7;//Define tamanho do pacote
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3304      	adds	r3, #4
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d102      	bne.n	8001860 <Checksum+0x18>
 800185a:	4b54      	ldr	r3, [pc, #336]	; (80019ac <Checksum+0x164>)
 800185c:	2207      	movs	r2, #7
 800185e:	701a      	strb	r2, [r3, #0]
		if(c[4] == 1)Total=8;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3304      	adds	r3, #4
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d102      	bne.n	8001870 <Checksum+0x28>
 800186a:	4b50      	ldr	r3, [pc, #320]	; (80019ac <Checksum+0x164>)
 800186c:	2208      	movs	r2, #8
 800186e:	701a      	strb	r2, [r3, #0]
		if(c[4] == 2)Total=9;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3304      	adds	r3, #4
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b02      	cmp	r3, #2
 8001878:	d102      	bne.n	8001880 <Checksum+0x38>
 800187a:	4b4c      	ldr	r3, [pc, #304]	; (80019ac <Checksum+0x164>)
 800187c:	2209      	movs	r2, #9
 800187e:	701a      	strb	r2, [r3, #0]
		if(c[4] == 4)Total=11;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3304      	adds	r3, #4
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b04      	cmp	r3, #4
 8001888:	d102      	bne.n	8001890 <Checksum+0x48>
 800188a:	4b48      	ldr	r3, [pc, #288]	; (80019ac <Checksum+0x164>)
 800188c:	220b      	movs	r2, #11
 800188e:	701a      	strb	r2, [r3, #0]
		if(c[4] == 5) Total = 12;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3304      	adds	r3, #4
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b05      	cmp	r3, #5
 8001898:	d102      	bne.n	80018a0 <Checksum+0x58>
 800189a:	4b44      	ldr	r3, [pc, #272]	; (80019ac <Checksum+0x164>)
 800189c:	220c      	movs	r2, #12
 800189e:	701a      	strb	r2, [r3, #0]
		if(c[4] == 6) Total = 13;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3304      	adds	r3, #4
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b06      	cmp	r3, #6
 80018a8:	d102      	bne.n	80018b0 <Checksum+0x68>
 80018aa:	4b40      	ldr	r3, [pc, #256]	; (80019ac <Checksum+0x164>)
 80018ac:	220d      	movs	r2, #13
 80018ae:	701a      	strb	r2, [r3, #0]
		if(c[4] == 7) Total = 14;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3304      	adds	r3, #4
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b07      	cmp	r3, #7
 80018b8:	d102      	bne.n	80018c0 <Checksum+0x78>
 80018ba:	4b3c      	ldr	r3, [pc, #240]	; (80019ac <Checksum+0x164>)
 80018bc:	220e      	movs	r2, #14
 80018be:	701a      	strb	r2, [r3, #0]
		if(c[4] == 8) Total = 15;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3304      	adds	r3, #4
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b08      	cmp	r3, #8
 80018c8:	d102      	bne.n	80018d0 <Checksum+0x88>
 80018ca:	4b38      	ldr	r3, [pc, #224]	; (80019ac <Checksum+0x164>)
 80018cc:	220f      	movs	r2, #15
 80018ce:	701a      	strb	r2, [r3, #0]
		if(c[4] == 9) Total = 16;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3304      	adds	r3, #4
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b09      	cmp	r3, #9
 80018d8:	d102      	bne.n	80018e0 <Checksum+0x98>
 80018da:	4b34      	ldr	r3, [pc, #208]	; (80019ac <Checksum+0x164>)
 80018dc:	2210      	movs	r2, #16
 80018de:	701a      	strb	r2, [r3, #0]
		if(c[4] == 10) Total = 17;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3304      	adds	r3, #4
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b0a      	cmp	r3, #10
 80018e8:	d102      	bne.n	80018f0 <Checksum+0xa8>
 80018ea:	4b30      	ldr	r3, [pc, #192]	; (80019ac <Checksum+0x164>)
 80018ec:	2211      	movs	r2, #17
 80018ee:	701a      	strb	r2, [r3, #0]
		if(c[4] == 12) Total = 19;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3304      	adds	r3, #4
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b0c      	cmp	r3, #12
 80018f8:	d102      	bne.n	8001900 <Checksum+0xb8>
 80018fa:	4b2c      	ldr	r3, [pc, #176]	; (80019ac <Checksum+0x164>)
 80018fc:	2213      	movs	r2, #19
 80018fe:	701a      	strb	r2, [r3, #0]
		if(c[4] == 14) Total = 21;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3304      	adds	r3, #4
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b0e      	cmp	r3, #14
 8001908:	d102      	bne.n	8001910 <Checksum+0xc8>
 800190a:	4b28      	ldr	r3, [pc, #160]	; (80019ac <Checksum+0x164>)
 800190c:	2215      	movs	r2, #21
 800190e:	701a      	strb	r2, [r3, #0]
		if(c[4] == 23 ) Total = 29;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3304      	adds	r3, #4
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b17      	cmp	r3, #23
 8001918:	d102      	bne.n	8001920 <Checksum+0xd8>
 800191a:	4b24      	ldr	r3, [pc, #144]	; (80019ac <Checksum+0x164>)
 800191c:	221d      	movs	r2, #29
 800191e:	701a      	strb	r2, [r3, #0]
		if(c[4] == 32 ) Total = 38;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3304      	adds	r3, #4
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b20      	cmp	r3, #32
 8001928:	d102      	bne.n	8001930 <Checksum+0xe8>
 800192a:	4b20      	ldr	r3, [pc, #128]	; (80019ac <Checksum+0x164>)
 800192c:	2226      	movs	r2, #38	; 0x26
 800192e:	701a      	strb	r2, [r3, #0]
		if(c[4] == 40 ) Total = 47;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3304      	adds	r3, #4
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b28      	cmp	r3, #40	; 0x28
 8001938:	d102      	bne.n	8001940 <Checksum+0xf8>
 800193a:	4b1c      	ldr	r3, [pc, #112]	; (80019ac <Checksum+0x164>)
 800193c:	222f      	movs	r2, #47	; 0x2f
 800193e:	701a      	strb	r2, [r3, #0]
		if(c[4] == 60 ) Total = 67;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3304      	adds	r3, #4
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b3c      	cmp	r3, #60	; 0x3c
 8001948:	d102      	bne.n	8001950 <Checksum+0x108>
 800194a:	4b18      	ldr	r3, [pc, #96]	; (80019ac <Checksum+0x164>)
 800194c:	2243      	movs	r2, #67	; 0x43
 800194e:	701a      	strb	r2, [r3, #0]

		c_sum=0;
 8001950:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <Checksum+0x168>)
 8001952:	2200      	movs	r2, #0
 8001954:	801a      	strh	r2, [r3, #0]
		for(int i=1; i<(Total-2);i++)//Soma os bytes
 8001956:	2301      	movs	r3, #1
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	e00d      	b.n	8001978 <Checksum+0x130>
		{
			c_sum += c[i];
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	4413      	add	r3, r2
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	b29a      	uxth	r2, r3
 8001966:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <Checksum+0x168>)
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	4413      	add	r3, r2
 800196c:	b29a      	uxth	r2, r3
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <Checksum+0x168>)
 8001970:	801a      	strh	r2, [r3, #0]
		for(int i=1; i<(Total-2);i++)//Soma os bytes
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	3301      	adds	r3, #1
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <Checksum+0x164>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	3b02      	subs	r3, #2
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	429a      	cmp	r2, r3
 8001982:	dbeb      	blt.n	800195c <Checksum+0x114>
		}

		checksum = 0xFF-c_sum;//Faz os calculos seguintes
 8001984:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <Checksum+0x168>)
 8001986:	881b      	ldrh	r3, [r3, #0]
 8001988:	b2db      	uxtb	r3, r3
 800198a:	43db      	mvns	r3, r3
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <Checksum+0x16c>)
 8001990:	701a      	strb	r2, [r3, #0]
		checksum += 0x01;
 8001992:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <Checksum+0x16c>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	3301      	adds	r3, #1
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <Checksum+0x16c>)
 800199c:	701a      	strb	r2, [r3, #0]
	//}
	return checksum;
 800199e:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <Checksum+0x16c>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr
 80019ac:	2000036d 	.word	0x2000036d
 80019b0:	2000036a 	.word	0x2000036a
 80019b4:	2000036c 	.word	0x2000036c

080019b8 <HAL_TIM_IC_CaptureCallback>:



//Interrupções
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
	if(readFlag == 1)
 80019c0:	4b14      	ldr	r3, [pc, #80]	; (8001a14 <HAL_TIM_IC_CaptureCallback+0x5c>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d11f      	bne.n	8001a08 <HAL_TIM_IC_CaptureCallback+0x50>
	{
		/*pulseCounter++;*/
		direction = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 80019c8:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <HAL_TIM_IC_CaptureCallback+0x60>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0310 	and.w	r3, r3, #16
 80019d2:	2b10      	cmp	r3, #16
 80019d4:	bf0c      	ite	eq
 80019d6:	2301      	moveq	r3, #1
 80019d8:	2300      	movne	r3, #0
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	461a      	mov	r2, r3
 80019de:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x64>)
 80019e0:	701a      	strb	r2, [r3, #0]
		if(direction == 0)
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x64>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d105      	bne.n	80019f6 <HAL_TIM_IC_CaptureCallback+0x3e>
		{
			pulseCounter++;
 80019ea:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <HAL_TIM_IC_CaptureCallback+0x68>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	3301      	adds	r3, #1
 80019f0:	4a0b      	ldr	r2, [pc, #44]	; (8001a20 <HAL_TIM_IC_CaptureCallback+0x68>)
 80019f2:	6013      	str	r3, [r2, #0]
			pulseCounter--;
//			if(pulseCounter<0) pulseCounter = 0;
			/*posAtual = pulseCounter;*/
		}
	}
}
 80019f4:	e008      	b.n	8001a08 <HAL_TIM_IC_CaptureCallback+0x50>
		else if (direction == 1)
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <HAL_TIM_IC_CaptureCallback+0x64>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d104      	bne.n	8001a08 <HAL_TIM_IC_CaptureCallback+0x50>
			pulseCounter--;
 80019fe:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <HAL_TIM_IC_CaptureCallback+0x68>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	4a06      	ldr	r2, [pc, #24]	; (8001a20 <HAL_TIM_IC_CaptureCallback+0x68>)
 8001a06:	6013      	str	r3, [r2, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20000338 	.word	0x20000338
 8001a18:	2000019c 	.word	0x2000019c
 8001a1c:	200003a4 	.word	0x200003a4
 8001a20:	2000033c 	.word	0x2000033c

08001a24 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
	if(EndReception == '\0')
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <HAL_UART_RxCpltCallback+0x2c>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d109      	bne.n	8001a48 <HAL_UART_RxCpltCallback+0x24>
	{
		command(RXBuffer[0]);
 8001a34:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <HAL_UART_RxCpltCallback+0x30>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff f945 	bl	8000cc8 <command>
		HAL_UART_Receive_IT(&huart2, (uint8_t *)RXBuffer, 1);
 8001a3e:	2201      	movs	r2, #1
 8001a40:	4904      	ldr	r1, [pc, #16]	; (8001a54 <HAL_UART_RxCpltCallback+0x30>)
 8001a42:	4805      	ldr	r0, [pc, #20]	; (8001a58 <HAL_UART_RxCpltCallback+0x34>)
 8001a44:	f004 f859 	bl	8005afa <HAL_UART_Receive_IT>
	}

}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	200002b7 	.word	0x200002b7
 8001a54:	200002b8 	.word	0x200002b8
 8001a58:	2000022c 	.word	0x2000022c

08001a5c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	100 hz -> 10
	200 hz ->5
	500 Hz -> 2
	1k -> 1*/
/*	buffer32bit = __HAL_TIM_GET_COUNTER(&htim3);*/
		newTime+=1; //1ms
 8001a64:	4b20      	ldr	r3, [pc, #128]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	4a1f      	ldr	r2, [pc, #124]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001a6c:	6013      	str	r3, [r2, #0]
		if(newTime == timeTotal)
 8001a6e:	4b1f      	ldr	r3, [pc, #124]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	461a      	mov	r2, r3
 8001a74:	4b1c      	ldr	r3, [pc, #112]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d125      	bne.n	8001ac8 <HAL_TIM_PeriodElapsedCallback+0x6c>
/*		if(newTime == 2 && samples <10)*/
		{
			readFlag = 0;
 8001a7c:	4b1c      	ldr	r3, [pc, #112]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
			fimPulso[samples] = pulseCounter;
 8001a82:	4b1c      	ldr	r3, [pc, #112]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	4619      	mov	r1, r3
 8001a88:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a1b      	ldr	r2, [pc, #108]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001a8e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			acquiredTime += newTime;
 8001a92:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	4b14      	ldr	r3, [pc, #80]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	4a18      	ldr	r2, [pc, #96]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001a9e:	6013      	str	r3, [r2, #0]
			currentTime[samples] = acquiredTime;
 8001aa0:	4b14      	ldr	r3, [pc, #80]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4b16      	ldr	r3, [pc, #88]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a16      	ldr	r2, [pc, #88]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001aac:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			samples++;
 8001ab0:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001aba:	701a      	strb	r2, [r3, #0]
			newTime = 0;
 8001abc:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
			readFlag = 1;
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	701a      	strb	r2, [r3, #0]
		}
		if(samples == 10)
 8001ac8:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b0a      	cmp	r3, #10
 8001ace:	d105      	bne.n	8001adc <HAL_TIM_PeriodElapsedCallback+0x80>
		{
			transmitFlag = 1;
 8001ad0:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]
			samples=0;
 8001ad6:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
		}
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	200002d0 	.word	0x200002d0
 8001aec:	20000339 	.word	0x20000339
 8001af0:	20000338 	.word	0x20000338
 8001af4:	2000039c 	.word	0x2000039c
 8001af8:	2000033c 	.word	0x2000033c
 8001afc:	20000310 	.word	0x20000310
 8001b00:	200002d4 	.word	0x200002d4
 8001b04:	20000374 	.word	0x20000374
 8001b08:	200002cc 	.word	0x200002cc

08001b0c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == RESET_Pin)
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b1c:	d105      	bne.n	8001b2a <HAL_GPIO_EXTI_Callback+0x1e>
	{
		StateMachine = iddle;
 8001b1e:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <HAL_GPIO_EXTI_Callback+0x28>)
 8001b20:	2249      	movs	r2, #73	; 0x49
 8001b22:	701a      	strb	r2, [r3, #0]
		EndReception = Reset;
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001b26:	2252      	movs	r2, #82	; 0x52
 8001b28:	701a      	strb	r2, [r3, #0]
	}
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr
 8001b34:	2000036e 	.word	0x2000036e
 8001b38:	200002b7 	.word	0x200002b7

08001b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b40:	b672      	cpsid	i
}
 8001b42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <Error_Handler+0x8>
	...

08001b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b4e:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <HAL_MspInit+0x5c>)
 8001b50:	699b      	ldr	r3, [r3, #24]
 8001b52:	4a14      	ldr	r2, [pc, #80]	; (8001ba4 <HAL_MspInit+0x5c>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	6193      	str	r3, [r2, #24]
 8001b5a:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_MspInit+0x5c>)
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	60bb      	str	r3, [r7, #8]
 8001b64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b66:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <HAL_MspInit+0x5c>)
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	4a0e      	ldr	r2, [pc, #56]	; (8001ba4 <HAL_MspInit+0x5c>)
 8001b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b70:	61d3      	str	r3, [r2, #28]
 8001b72:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <HAL_MspInit+0x5c>)
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7a:	607b      	str	r3, [r7, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <HAL_MspInit+0x60>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <HAL_MspInit+0x60>)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40010000 	.word	0x40010000

08001bac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 0310 	add.w	r3, r7, #16
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bca:	d12b      	bne.n	8001c24 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bcc:	4b17      	ldr	r3, [pc, #92]	; (8001c2c <HAL_TIM_Encoder_MspInit+0x80>)
 8001bce:	69db      	ldr	r3, [r3, #28]
 8001bd0:	4a16      	ldr	r2, [pc, #88]	; (8001c2c <HAL_TIM_Encoder_MspInit+0x80>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	61d3      	str	r3, [r2, #28]
 8001bd8:	4b14      	ldr	r3, [pc, #80]	; (8001c2c <HAL_TIM_Encoder_MspInit+0x80>)
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <HAL_TIM_Encoder_MspInit+0x80>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	4a10      	ldr	r2, [pc, #64]	; (8001c2c <HAL_TIM_Encoder_MspInit+0x80>)
 8001bea:	f043 0304 	orr.w	r3, r3, #4
 8001bee:	6193      	str	r3, [r2, #24]
 8001bf0:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <HAL_TIM_Encoder_MspInit+0x80>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c08:	f107 0310 	add.w	r3, r7, #16
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4808      	ldr	r0, [pc, #32]	; (8001c30 <HAL_TIM_Encoder_MspInit+0x84>)
 8001c10:	f000 fd7c 	bl	800270c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c14:	2200      	movs	r2, #0
 8001c16:	2100      	movs	r1, #0
 8001c18:	201c      	movs	r0, #28
 8001c1a:	f000 fa64 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c1e:	201c      	movs	r0, #28
 8001c20:	f000 fa7d 	bl	800211e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c24:	bf00      	nop
 8001c26:	3720      	adds	r7, #32
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40010800 	.word	0x40010800

08001c34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a0d      	ldr	r2, [pc, #52]	; (8001c78 <HAL_TIM_Base_MspInit+0x44>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d113      	bne.n	8001c6e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c46:	4b0d      	ldr	r3, [pc, #52]	; (8001c7c <HAL_TIM_Base_MspInit+0x48>)
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	4a0c      	ldr	r2, [pc, #48]	; (8001c7c <HAL_TIM_Base_MspInit+0x48>)
 8001c4c:	f043 0302 	orr.w	r3, r3, #2
 8001c50:	61d3      	str	r3, [r2, #28]
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <HAL_TIM_Base_MspInit+0x48>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2100      	movs	r1, #0
 8001c62:	201d      	movs	r0, #29
 8001c64:	f000 fa3f 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c68:	201d      	movs	r0, #29
 8001c6a:	f000 fa58 	bl	800211e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c6e:	bf00      	nop
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40000400 	.word	0x40000400
 8001c7c:	40021000 	.word	0x40021000

08001c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 0310 	add.w	r3, r7, #16
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a1f      	ldr	r2, [pc, #124]	; (8001d18 <HAL_UART_MspInit+0x98>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d137      	bne.n	8001d10 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ca0:	4b1e      	ldr	r3, [pc, #120]	; (8001d1c <HAL_UART_MspInit+0x9c>)
 8001ca2:	69db      	ldr	r3, [r3, #28]
 8001ca4:	4a1d      	ldr	r2, [pc, #116]	; (8001d1c <HAL_UART_MspInit+0x9c>)
 8001ca6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001caa:	61d3      	str	r3, [r2, #28]
 8001cac:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <HAL_UART_MspInit+0x9c>)
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb8:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <HAL_UART_MspInit+0x9c>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	4a17      	ldr	r2, [pc, #92]	; (8001d1c <HAL_UART_MspInit+0x9c>)
 8001cbe:	f043 0304 	orr.w	r3, r3, #4
 8001cc2:	6193      	str	r3, [r2, #24]
 8001cc4:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <HAL_UART_MspInit+0x9c>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cd0:	2304      	movs	r3, #4
 8001cd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cdc:	f107 0310 	add.w	r3, r7, #16
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	480f      	ldr	r0, [pc, #60]	; (8001d20 <HAL_UART_MspInit+0xa0>)
 8001ce4:	f000 fd12 	bl	800270c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ce8:	2308      	movs	r3, #8
 8001cea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf4:	f107 0310 	add.w	r3, r7, #16
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4809      	ldr	r0, [pc, #36]	; (8001d20 <HAL_UART_MspInit+0xa0>)
 8001cfc:	f000 fd06 	bl	800270c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d00:	2200      	movs	r2, #0
 8001d02:	2100      	movs	r1, #0
 8001d04:	2026      	movs	r0, #38	; 0x26
 8001d06:	f000 f9ee 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d0a:	2026      	movs	r0, #38	; 0x26
 8001d0c:	f000 fa07 	bl	800211e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d10:	bf00      	nop
 8001d12:	3720      	adds	r7, #32
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40004400 	.word	0x40004400
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40010800 	.word	0x40010800

08001d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d28:	e7fe      	b.n	8001d28 <NMI_Handler+0x4>

08001d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d2e:	e7fe      	b.n	8001d2e <HardFault_Handler+0x4>

08001d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d34:	e7fe      	b.n	8001d34 <MemManage_Handler+0x4>

08001d36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d3a:	e7fe      	b.n	8001d3a <BusFault_Handler+0x4>

08001d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d40:	e7fe      	b.n	8001d40 <UsageFault_Handler+0x4>

08001d42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr

08001d4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr

08001d5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr

08001d66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d6a:	f000 f8a5 	bl	8001eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001d78:	4802      	ldr	r0, [pc, #8]	; (8001d84 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001d7a:	f000 ffc6 	bl	8002d0a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	200010b0 	.word	0x200010b0

08001d88 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RESET_Pin);
 8001d8c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d90:	f000 fe72 	bl	8002a78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d94:	bf00      	nop
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d9c:	4802      	ldr	r0, [pc, #8]	; (8001da8 <TIM2_IRQHandler+0x10>)
 8001d9e:	f003 faec 	bl	800537a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	2000019c 	.word	0x2000019c

08001dac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001db0:	4802      	ldr	r0, [pc, #8]	; (8001dbc <TIM3_IRQHandler+0x10>)
 8001db2:	f003 fae2 	bl	800537a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	200001e4 	.word	0x200001e4

08001dc0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001dc4:	4802      	ldr	r0, [pc, #8]	; (8001dd0 <USART2_IRQHandler+0x10>)
 8001dc6:	f003 fec9 	bl	8005b5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	2000022c 	.word	0x2000022c

08001dd4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr

08001de0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001de0:	480c      	ldr	r0, [pc, #48]	; (8001e14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001de2:	490d      	ldr	r1, [pc, #52]	; (8001e18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001de4:	4a0d      	ldr	r2, [pc, #52]	; (8001e1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001de8:	e002      	b.n	8001df0 <LoopCopyDataInit>

08001dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dee:	3304      	adds	r3, #4

08001df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df4:	d3f9      	bcc.n	8001dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001df6:	4a0a      	ldr	r2, [pc, #40]	; (8001e20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001df8:	4c0a      	ldr	r4, [pc, #40]	; (8001e24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dfc:	e001      	b.n	8001e02 <LoopFillZerobss>

08001dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e00:	3204      	adds	r2, #4

08001e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e04:	d3fb      	bcc.n	8001dfe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e06:	f7ff ffe5 	bl	8001dd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e0a:	f009 f87d 	bl	800af08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e0e:	f7fe f9e9 	bl	80001e4 <main>
  bx lr
 8001e12:	4770      	bx	lr
  ldr r0, =_sdata
 8001e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e18:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8001e1c:	0800b00c 	.word	0x0800b00c
  ldr r2, =_sbss
 8001e20:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8001e24:	200015bc 	.word	0x200015bc

08001e28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e28:	e7fe      	b.n	8001e28 <ADC1_2_IRQHandler>
	...

08001e2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e30:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <HAL_Init+0x28>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a07      	ldr	r2, [pc, #28]	; (8001e54 <HAL_Init+0x28>)
 8001e36:	f043 0310 	orr.w	r3, r3, #16
 8001e3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e3c:	2003      	movs	r0, #3
 8001e3e:	f000 f947 	bl	80020d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e42:	200f      	movs	r0, #15
 8001e44:	f000 f808 	bl	8001e58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e48:	f7ff fe7e 	bl	8001b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40022000 	.word	0x40022000

08001e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e60:	4b12      	ldr	r3, [pc, #72]	; (8001eac <HAL_InitTick+0x54>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <HAL_InitTick+0x58>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 f95f 	bl	800213a <HAL_SYSTICK_Config>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e00e      	b.n	8001ea4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b0f      	cmp	r3, #15
 8001e8a:	d80a      	bhi.n	8001ea2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	6879      	ldr	r1, [r7, #4]
 8001e90:	f04f 30ff 	mov.w	r0, #4294967295
 8001e94:	f000 f927 	bl	80020e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e98:	4a06      	ldr	r2, [pc, #24]	; (8001eb4 <HAL_InitTick+0x5c>)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	e000      	b.n	8001ea4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000004 	.word	0x20000004
 8001eb0:	2000000c 	.word	0x2000000c
 8001eb4:	20000008 	.word	0x20000008

08001eb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ebc:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <HAL_IncTick+0x1c>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <HAL_IncTick+0x20>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	4a03      	ldr	r2, [pc, #12]	; (8001ed8 <HAL_IncTick+0x20>)
 8001eca:	6013      	str	r3, [r2, #0]
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr
 8001ed4:	2000000c 	.word	0x2000000c
 8001ed8:	200003f0 	.word	0x200003f0

08001edc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return uwTick;
 8001ee0:	4b02      	ldr	r3, [pc, #8]	; (8001eec <HAL_GetTick+0x10>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr
 8001eec:	200003f0 	.word	0x200003f0

08001ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ef8:	f7ff fff0 	bl	8001edc <HAL_GetTick>
 8001efc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f08:	d005      	beq.n	8001f16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <HAL_Delay+0x44>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4413      	add	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f16:	bf00      	nop
 8001f18:	f7ff ffe0 	bl	8001edc <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d8f7      	bhi.n	8001f18 <HAL_Delay+0x28>
  {
  }
}
 8001f28:	bf00      	nop
 8001f2a:	bf00      	nop
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	2000000c 	.word	0x2000000c

08001f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f48:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <__NVIC_SetPriorityGrouping+0x44>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f54:	4013      	ands	r3, r2
 8001f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f6a:	4a04      	ldr	r2, [pc, #16]	; (8001f7c <__NVIC_SetPriorityGrouping+0x44>)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	60d3      	str	r3, [r2, #12]
}
 8001f70:	bf00      	nop
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f84:	4b04      	ldr	r3, [pc, #16]	; (8001f98 <__NVIC_GetPriorityGrouping+0x18>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	0a1b      	lsrs	r3, r3, #8
 8001f8a:	f003 0307 	and.w	r3, r3, #7
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	db0b      	blt.n	8001fc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	f003 021f 	and.w	r2, r3, #31
 8001fb4:	4906      	ldr	r1, [pc, #24]	; (8001fd0 <__NVIC_EnableIRQ+0x34>)
 8001fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fba:	095b      	lsrs	r3, r3, #5
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr
 8001fd0:	e000e100 	.word	0xe000e100

08001fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	6039      	str	r1, [r7, #0]
 8001fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	db0a      	blt.n	8001ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	490c      	ldr	r1, [pc, #48]	; (8002020 <__NVIC_SetPriority+0x4c>)
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	0112      	lsls	r2, r2, #4
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ffc:	e00a      	b.n	8002014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	b2da      	uxtb	r2, r3
 8002002:	4908      	ldr	r1, [pc, #32]	; (8002024 <__NVIC_SetPriority+0x50>)
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	3b04      	subs	r3, #4
 800200c:	0112      	lsls	r2, r2, #4
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	440b      	add	r3, r1
 8002012:	761a      	strb	r2, [r3, #24]
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	e000e100 	.word	0xe000e100
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002028:	b480      	push	{r7}
 800202a:	b089      	sub	sp, #36	; 0x24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f1c3 0307 	rsb	r3, r3, #7
 8002042:	2b04      	cmp	r3, #4
 8002044:	bf28      	it	cs
 8002046:	2304      	movcs	r3, #4
 8002048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3304      	adds	r3, #4
 800204e:	2b06      	cmp	r3, #6
 8002050:	d902      	bls.n	8002058 <NVIC_EncodePriority+0x30>
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3b03      	subs	r3, #3
 8002056:	e000      	b.n	800205a <NVIC_EncodePriority+0x32>
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800205c:	f04f 32ff 	mov.w	r2, #4294967295
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43da      	mvns	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	401a      	ands	r2, r3
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002070:	f04f 31ff 	mov.w	r1, #4294967295
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	fa01 f303 	lsl.w	r3, r1, r3
 800207a:	43d9      	mvns	r1, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002080:	4313      	orrs	r3, r2
         );
}
 8002082:	4618      	mov	r0, r3
 8002084:	3724      	adds	r7, #36	; 0x24
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr

0800208c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3b01      	subs	r3, #1
 8002098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800209c:	d301      	bcc.n	80020a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800209e:	2301      	movs	r3, #1
 80020a0:	e00f      	b.n	80020c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020a2:	4a0a      	ldr	r2, [pc, #40]	; (80020cc <SysTick_Config+0x40>)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3b01      	subs	r3, #1
 80020a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020aa:	210f      	movs	r1, #15
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295
 80020b0:	f7ff ff90 	bl	8001fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b4:	4b05      	ldr	r3, [pc, #20]	; (80020cc <SysTick_Config+0x40>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ba:	4b04      	ldr	r3, [pc, #16]	; (80020cc <SysTick_Config+0x40>)
 80020bc:	2207      	movs	r2, #7
 80020be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	e000e010 	.word	0xe000e010

080020d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff ff2d 	bl	8001f38 <__NVIC_SetPriorityGrouping>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b086      	sub	sp, #24
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	4603      	mov	r3, r0
 80020ee:	60b9      	str	r1, [r7, #8]
 80020f0:	607a      	str	r2, [r7, #4]
 80020f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020f8:	f7ff ff42 	bl	8001f80 <__NVIC_GetPriorityGrouping>
 80020fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	68b9      	ldr	r1, [r7, #8]
 8002102:	6978      	ldr	r0, [r7, #20]
 8002104:	f7ff ff90 	bl	8002028 <NVIC_EncodePriority>
 8002108:	4602      	mov	r2, r0
 800210a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210e:	4611      	mov	r1, r2
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff5f 	bl	8001fd4 <__NVIC_SetPriority>
}
 8002116:	bf00      	nop
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	4603      	mov	r3, r0
 8002126:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff ff35 	bl	8001f9c <__NVIC_EnableIRQ>
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff ffa2 	bl	800208c <SysTick_Config>
 8002148:	4603      	mov	r3, r0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002152:	b480      	push	{r7}
 8002154:	b085      	sub	sp, #20
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800215a:	2300      	movs	r3, #0
 800215c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002164:	2b02      	cmp	r3, #2
 8002166:	d008      	beq.n	800217a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2204      	movs	r2, #4
 800216c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e020      	b.n	80021bc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 020e 	bic.w	r2, r2, #14
 8002188:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0201 	bic.w	r2, r2, #1
 8002198:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a2:	2101      	movs	r1, #1
 80021a4:	fa01 f202 	lsl.w	r2, r1, r2
 80021a8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr
	...

080021c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d005      	beq.n	80021ea <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2204      	movs	r2, #4
 80021e2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	73fb      	strb	r3, [r7, #15]
 80021e8:	e051      	b.n	800228e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 020e 	bic.w	r2, r2, #14
 80021f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0201 	bic.w	r2, r2, #1
 8002208:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a22      	ldr	r2, [pc, #136]	; (8002298 <HAL_DMA_Abort_IT+0xd0>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d029      	beq.n	8002268 <HAL_DMA_Abort_IT+0xa0>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a20      	ldr	r2, [pc, #128]	; (800229c <HAL_DMA_Abort_IT+0xd4>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d022      	beq.n	8002264 <HAL_DMA_Abort_IT+0x9c>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a1f      	ldr	r2, [pc, #124]	; (80022a0 <HAL_DMA_Abort_IT+0xd8>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d01a      	beq.n	800225e <HAL_DMA_Abort_IT+0x96>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a1d      	ldr	r2, [pc, #116]	; (80022a4 <HAL_DMA_Abort_IT+0xdc>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d012      	beq.n	8002258 <HAL_DMA_Abort_IT+0x90>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a1c      	ldr	r2, [pc, #112]	; (80022a8 <HAL_DMA_Abort_IT+0xe0>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d00a      	beq.n	8002252 <HAL_DMA_Abort_IT+0x8a>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a1a      	ldr	r2, [pc, #104]	; (80022ac <HAL_DMA_Abort_IT+0xe4>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d102      	bne.n	800224c <HAL_DMA_Abort_IT+0x84>
 8002246:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800224a:	e00e      	b.n	800226a <HAL_DMA_Abort_IT+0xa2>
 800224c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002250:	e00b      	b.n	800226a <HAL_DMA_Abort_IT+0xa2>
 8002252:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002256:	e008      	b.n	800226a <HAL_DMA_Abort_IT+0xa2>
 8002258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800225c:	e005      	b.n	800226a <HAL_DMA_Abort_IT+0xa2>
 800225e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002262:	e002      	b.n	800226a <HAL_DMA_Abort_IT+0xa2>
 8002264:	2310      	movs	r3, #16
 8002266:	e000      	b.n	800226a <HAL_DMA_Abort_IT+0xa2>
 8002268:	2301      	movs	r3, #1
 800226a:	4a11      	ldr	r2, [pc, #68]	; (80022b0 <HAL_DMA_Abort_IT+0xe8>)
 800226c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	4798      	blx	r3
    } 
  }
  return status;
 800228e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40020008 	.word	0x40020008
 800229c:	4002001c 	.word	0x4002001c
 80022a0:	40020030 	.word	0x40020030
 80022a4:	40020044 	.word	0x40020044
 80022a8:	40020058 	.word	0x40020058
 80022ac:	4002006c 	.word	0x4002006c
 80022b0:	40020000 	.word	0x40020000

080022b4 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80022b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022b6:	b087      	sub	sp, #28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80022ce:	4b2f      	ldr	r3, [pc, #188]	; (800238c <HAL_FLASH_Program+0xd8>)
 80022d0:	7e1b      	ldrb	r3, [r3, #24]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d101      	bne.n	80022da <HAL_FLASH_Program+0x26>
 80022d6:	2302      	movs	r3, #2
 80022d8:	e054      	b.n	8002384 <HAL_FLASH_Program+0xd0>
 80022da:	4b2c      	ldr	r3, [pc, #176]	; (800238c <HAL_FLASH_Program+0xd8>)
 80022dc:	2201      	movs	r2, #1
 80022de:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80022e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022e4:	f000 f8d4 	bl	8002490 <FLASH_WaitForLastOperation>
 80022e8:	4603      	mov	r3, r0
 80022ea:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80022ec:	7dfb      	ldrb	r3, [r7, #23]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d144      	bne.n	800237c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d102      	bne.n	80022fe <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80022f8:	2301      	movs	r3, #1
 80022fa:	757b      	strb	r3, [r7, #21]
 80022fc:	e007      	b.n	800230e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2b02      	cmp	r3, #2
 8002302:	d102      	bne.n	800230a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002304:	2302      	movs	r3, #2
 8002306:	757b      	strb	r3, [r7, #21]
 8002308:	e001      	b.n	800230e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800230a:	2304      	movs	r3, #4
 800230c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800230e:	2300      	movs	r3, #0
 8002310:	75bb      	strb	r3, [r7, #22]
 8002312:	e02d      	b.n	8002370 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002314:	7dbb      	ldrb	r3, [r7, #22]
 8002316:	005a      	lsls	r2, r3, #1
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	eb02 0c03 	add.w	ip, r2, r3
 800231e:	7dbb      	ldrb	r3, [r7, #22]
 8002320:	0119      	lsls	r1, r3, #4
 8002322:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002326:	f1c1 0620 	rsb	r6, r1, #32
 800232a:	f1a1 0020 	sub.w	r0, r1, #32
 800232e:	fa22 f401 	lsr.w	r4, r2, r1
 8002332:	fa03 f606 	lsl.w	r6, r3, r6
 8002336:	4334      	orrs	r4, r6
 8002338:	fa23 f000 	lsr.w	r0, r3, r0
 800233c:	4304      	orrs	r4, r0
 800233e:	fa23 f501 	lsr.w	r5, r3, r1
 8002342:	b2a3      	uxth	r3, r4
 8002344:	4619      	mov	r1, r3
 8002346:	4660      	mov	r0, ip
 8002348:	f000 f886 	bl	8002458 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800234c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002350:	f000 f89e 	bl	8002490 <FLASH_WaitForLastOperation>
 8002354:	4603      	mov	r3, r0
 8002356:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002358:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <HAL_FLASH_Program+0xdc>)
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	4a0c      	ldr	r2, [pc, #48]	; (8002390 <HAL_FLASH_Program+0xdc>)
 800235e:	f023 0301 	bic.w	r3, r3, #1
 8002362:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002364:	7dfb      	ldrb	r3, [r7, #23]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d107      	bne.n	800237a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800236a:	7dbb      	ldrb	r3, [r7, #22]
 800236c:	3301      	adds	r3, #1
 800236e:	75bb      	strb	r3, [r7, #22]
 8002370:	7dba      	ldrb	r2, [r7, #22]
 8002372:	7d7b      	ldrb	r3, [r7, #21]
 8002374:	429a      	cmp	r2, r3
 8002376:	d3cd      	bcc.n	8002314 <HAL_FLASH_Program+0x60>
 8002378:	e000      	b.n	800237c <HAL_FLASH_Program+0xc8>
      {
        break;
 800237a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800237c:	4b03      	ldr	r3, [pc, #12]	; (800238c <HAL_FLASH_Program+0xd8>)
 800237e:	2200      	movs	r2, #0
 8002380:	761a      	strb	r2, [r3, #24]

  return status;
 8002382:	7dfb      	ldrb	r3, [r7, #23]
}
 8002384:	4618      	mov	r0, r3
 8002386:	371c      	adds	r7, #28
 8002388:	46bd      	mov	sp, r7
 800238a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800238c:	200003f8 	.word	0x200003f8
 8002390:	40022000 	.word	0x40022000

08002394 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800239a:	2300      	movs	r3, #0
 800239c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800239e:	4b0d      	ldr	r3, [pc, #52]	; (80023d4 <HAL_FLASH_Unlock+0x40>)
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00d      	beq.n	80023c6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80023aa:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <HAL_FLASH_Unlock+0x40>)
 80023ac:	4a0a      	ldr	r2, [pc, #40]	; (80023d8 <HAL_FLASH_Unlock+0x44>)
 80023ae:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80023b0:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <HAL_FLASH_Unlock+0x40>)
 80023b2:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <HAL_FLASH_Unlock+0x48>)
 80023b4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80023b6:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <HAL_FLASH_Unlock+0x40>)
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80023c6:	79fb      	ldrb	r3, [r7, #7]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40022000 	.word	0x40022000
 80023d8:	45670123 	.word	0x45670123
 80023dc:	cdef89ab 	.word	0xcdef89ab

080023e0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <HAL_FLASH_Lock+0x1c>)
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	4a04      	ldr	r2, [pc, #16]	; (80023fc <HAL_FLASH_Lock+0x1c>)
 80023ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023ee:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	40022000 	.word	0x40022000

08002400 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 8002404:	4b09      	ldr	r3, [pc, #36]	; (800242c <HAL_FLASH_OB_Unlock+0x2c>)
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800240c:	2b00      	cmp	r3, #0
 800240e:	d107      	bne.n	8002420 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <HAL_FLASH_OB_Unlock+0x2c>)
 8002412:	4a07      	ldr	r2, [pc, #28]	; (8002430 <HAL_FLASH_OB_Unlock+0x30>)
 8002414:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8002416:	4b05      	ldr	r3, [pc, #20]	; (800242c <HAL_FLASH_OB_Unlock+0x2c>)
 8002418:	4a06      	ldr	r2, [pc, #24]	; (8002434 <HAL_FLASH_OB_Unlock+0x34>)
 800241a:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 800241c:	2300      	movs	r3, #0
 800241e:	e000      	b.n	8002422 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
}
 8002422:	4618      	mov	r0, r3
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40022000 	.word	0x40022000
 8002430:	45670123 	.word	0x45670123
 8002434:	cdef89ab 	.word	0xcdef89ab

08002438 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 800243c:	4b05      	ldr	r3, [pc, #20]	; (8002454 <HAL_FLASH_OB_Lock+0x1c>)
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	4a04      	ldr	r2, [pc, #16]	; (8002454 <HAL_FLASH_OB_Lock+0x1c>)
 8002442:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002446:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40022000 	.word	0x40022000

08002458 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	460b      	mov	r3, r1
 8002462:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002464:	4b08      	ldr	r3, [pc, #32]	; (8002488 <FLASH_Program_HalfWord+0x30>)
 8002466:	2200      	movs	r2, #0
 8002468:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800246a:	4b08      	ldr	r3, [pc, #32]	; (800248c <FLASH_Program_HalfWord+0x34>)
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	4a07      	ldr	r2, [pc, #28]	; (800248c <FLASH_Program_HalfWord+0x34>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	887a      	ldrh	r2, [r7, #2]
 800247a:	801a      	strh	r2, [r3, #0]
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	200003f8 	.word	0x200003f8
 800248c:	40022000 	.word	0x40022000

08002490 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002498:	f7ff fd20 	bl	8001edc <HAL_GetTick>
 800249c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800249e:	e010      	b.n	80024c2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a6:	d00c      	beq.n	80024c2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d007      	beq.n	80024be <FLASH_WaitForLastOperation+0x2e>
 80024ae:	f7ff fd15 	bl	8001edc <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d201      	bcs.n	80024c2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e025      	b.n	800250e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80024c2:	4b15      	ldr	r3, [pc, #84]	; (8002518 <FLASH_WaitForLastOperation+0x88>)
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1e8      	bne.n	80024a0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80024ce:	4b12      	ldr	r3, [pc, #72]	; (8002518 <FLASH_WaitForLastOperation+0x88>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	f003 0320 	and.w	r3, r3, #32
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d002      	beq.n	80024e0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80024da:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <FLASH_WaitForLastOperation+0x88>)
 80024dc:	2220      	movs	r2, #32
 80024de:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80024e0:	4b0d      	ldr	r3, [pc, #52]	; (8002518 <FLASH_WaitForLastOperation+0x88>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f003 0310 	and.w	r3, r3, #16
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10b      	bne.n	8002504 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80024ec:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <FLASH_WaitForLastOperation+0x88>)
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d105      	bne.n	8002504 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80024f8:	4b07      	ldr	r3, [pc, #28]	; (8002518 <FLASH_WaitForLastOperation+0x88>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002504:	f000 f80a 	bl	800251c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e000      	b.n	800250e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40022000 	.word	0x40022000

0800251c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002522:	2300      	movs	r3, #0
 8002524:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002526:	4b23      	ldr	r3, [pc, #140]	; (80025b4 <FLASH_SetErrorCode+0x98>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	f003 0310 	and.w	r3, r3, #16
 800252e:	2b00      	cmp	r3, #0
 8002530:	d009      	beq.n	8002546 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002532:	4b21      	ldr	r3, [pc, #132]	; (80025b8 <FLASH_SetErrorCode+0x9c>)
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	f043 0302 	orr.w	r3, r3, #2
 800253a:	4a1f      	ldr	r2, [pc, #124]	; (80025b8 <FLASH_SetErrorCode+0x9c>)
 800253c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f043 0310 	orr.w	r3, r3, #16
 8002544:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002546:	4b1b      	ldr	r3, [pc, #108]	; (80025b4 <FLASH_SetErrorCode+0x98>)
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d009      	beq.n	8002566 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002552:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <FLASH_SetErrorCode+0x9c>)
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	4a17      	ldr	r2, [pc, #92]	; (80025b8 <FLASH_SetErrorCode+0x9c>)
 800255c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f043 0304 	orr.w	r3, r3, #4
 8002564:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002566:	4b13      	ldr	r3, [pc, #76]	; (80025b4 <FLASH_SetErrorCode+0x98>)
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00b      	beq.n	800258a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002572:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <FLASH_SetErrorCode+0x9c>)
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	f043 0304 	orr.w	r3, r3, #4
 800257a:	4a0f      	ldr	r2, [pc, #60]	; (80025b8 <FLASH_SetErrorCode+0x9c>)
 800257c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800257e:	4b0d      	ldr	r3, [pc, #52]	; (80025b4 <FLASH_SetErrorCode+0x98>)
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	4a0c      	ldr	r2, [pc, #48]	; (80025b4 <FLASH_SetErrorCode+0x98>)
 8002584:	f023 0301 	bic.w	r3, r3, #1
 8002588:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f240 1201 	movw	r2, #257	; 0x101
 8002590:	4293      	cmp	r3, r2
 8002592:	d106      	bne.n	80025a2 <FLASH_SetErrorCode+0x86>
 8002594:	4b07      	ldr	r3, [pc, #28]	; (80025b4 <FLASH_SetErrorCode+0x98>)
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	4a06      	ldr	r2, [pc, #24]	; (80025b4 <FLASH_SetErrorCode+0x98>)
 800259a:	f023 0301 	bic.w	r3, r3, #1
 800259e:	61d3      	str	r3, [r2, #28]
}  
 80025a0:	e002      	b.n	80025a8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80025a2:	4a04      	ldr	r2, [pc, #16]	; (80025b4 <FLASH_SetErrorCode+0x98>)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	60d3      	str	r3, [r2, #12]
}  
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	40022000 	.word	0x40022000
 80025b8:	200003f8 	.word	0x200003f8

080025bc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80025ce:	4b2f      	ldr	r3, [pc, #188]	; (800268c <HAL_FLASHEx_Erase+0xd0>)
 80025d0:	7e1b      	ldrb	r3, [r3, #24]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_FLASHEx_Erase+0x1e>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e053      	b.n	8002682 <HAL_FLASHEx_Erase+0xc6>
 80025da:	4b2c      	ldr	r3, [pc, #176]	; (800268c <HAL_FLASHEx_Erase+0xd0>)
 80025dc:	2201      	movs	r2, #1
 80025de:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d116      	bne.n	8002616 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80025e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025ec:	f7ff ff50 	bl	8002490 <FLASH_WaitForLastOperation>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d141      	bne.n	800267a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80025f6:	2001      	movs	r0, #1
 80025f8:	f000 f84c 	bl	8002694 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80025fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002600:	f7ff ff46 	bl	8002490 <FLASH_WaitForLastOperation>
 8002604:	4603      	mov	r3, r0
 8002606:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002608:	4b21      	ldr	r3, [pc, #132]	; (8002690 <HAL_FLASHEx_Erase+0xd4>)
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	4a20      	ldr	r2, [pc, #128]	; (8002690 <HAL_FLASHEx_Erase+0xd4>)
 800260e:	f023 0304 	bic.w	r3, r3, #4
 8002612:	6113      	str	r3, [r2, #16]
 8002614:	e031      	b.n	800267a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002616:	f24c 3050 	movw	r0, #50000	; 0xc350
 800261a:	f7ff ff39 	bl	8002490 <FLASH_WaitForLastOperation>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d12a      	bne.n	800267a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	f04f 32ff 	mov.w	r2, #4294967295
 800262a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	e019      	b.n	8002668 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002634:	68b8      	ldr	r0, [r7, #8]
 8002636:	f000 f849 	bl	80026cc <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800263a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800263e:	f7ff ff27 	bl	8002490 <FLASH_WaitForLastOperation>
 8002642:	4603      	mov	r3, r0
 8002644:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002646:	4b12      	ldr	r3, [pc, #72]	; (8002690 <HAL_FLASHEx_Erase+0xd4>)
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	4a11      	ldr	r2, [pc, #68]	; (8002690 <HAL_FLASHEx_Erase+0xd4>)
 800264c:	f023 0302 	bic.w	r3, r3, #2
 8002650:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	601a      	str	r2, [r3, #0]
            break;
 800265e:	e00c      	b.n	800267a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002666:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	029a      	lsls	r2, r3, #10
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	429a      	cmp	r2, r3
 8002678:	d3dc      	bcc.n	8002634 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800267a:	4b04      	ldr	r3, [pc, #16]	; (800268c <HAL_FLASHEx_Erase+0xd0>)
 800267c:	2200      	movs	r2, #0
 800267e:	761a      	strb	r2, [r3, #24]

  return status;
 8002680:	7bfb      	ldrb	r3, [r7, #15]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	200003f8 	.word	0x200003f8
 8002690:	40022000 	.word	0x40022000

08002694 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800269c:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <FLASH_MassErase+0x30>)
 800269e:	2200      	movs	r2, #0
 80026a0:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80026a2:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <FLASH_MassErase+0x34>)
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	4a08      	ldr	r2, [pc, #32]	; (80026c8 <FLASH_MassErase+0x34>)
 80026a8:	f043 0304 	orr.w	r3, r3, #4
 80026ac:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <FLASH_MassErase+0x34>)
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	4a05      	ldr	r2, [pc, #20]	; (80026c8 <FLASH_MassErase+0x34>)
 80026b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026b8:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr
 80026c4:	200003f8 	.word	0x200003f8
 80026c8:	40022000 	.word	0x40022000

080026cc <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <FLASH_PageErase+0x38>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80026da:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <FLASH_PageErase+0x3c>)
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <FLASH_PageErase+0x3c>)
 80026e0:	f043 0302 	orr.w	r3, r3, #2
 80026e4:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80026e6:	4a08      	ldr	r2, [pc, #32]	; (8002708 <FLASH_PageErase+0x3c>)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80026ec:	4b06      	ldr	r3, [pc, #24]	; (8002708 <FLASH_PageErase+0x3c>)
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	4a05      	ldr	r2, [pc, #20]	; (8002708 <FLASH_PageErase+0x3c>)
 80026f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026f6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	200003f8 	.word	0x200003f8
 8002708:	40022000 	.word	0x40022000

0800270c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800270c:	b480      	push	{r7}
 800270e:	b08b      	sub	sp, #44	; 0x2c
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002716:	2300      	movs	r3, #0
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800271a:	2300      	movs	r3, #0
 800271c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800271e:	e169      	b.n	80029f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002720:	2201      	movs	r2, #1
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	69fa      	ldr	r2, [r7, #28]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	429a      	cmp	r2, r3
 800273a:	f040 8158 	bne.w	80029ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	4a9a      	ldr	r2, [pc, #616]	; (80029ac <HAL_GPIO_Init+0x2a0>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d05e      	beq.n	8002806 <HAL_GPIO_Init+0xfa>
 8002748:	4a98      	ldr	r2, [pc, #608]	; (80029ac <HAL_GPIO_Init+0x2a0>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d875      	bhi.n	800283a <HAL_GPIO_Init+0x12e>
 800274e:	4a98      	ldr	r2, [pc, #608]	; (80029b0 <HAL_GPIO_Init+0x2a4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d058      	beq.n	8002806 <HAL_GPIO_Init+0xfa>
 8002754:	4a96      	ldr	r2, [pc, #600]	; (80029b0 <HAL_GPIO_Init+0x2a4>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d86f      	bhi.n	800283a <HAL_GPIO_Init+0x12e>
 800275a:	4a96      	ldr	r2, [pc, #600]	; (80029b4 <HAL_GPIO_Init+0x2a8>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d052      	beq.n	8002806 <HAL_GPIO_Init+0xfa>
 8002760:	4a94      	ldr	r2, [pc, #592]	; (80029b4 <HAL_GPIO_Init+0x2a8>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d869      	bhi.n	800283a <HAL_GPIO_Init+0x12e>
 8002766:	4a94      	ldr	r2, [pc, #592]	; (80029b8 <HAL_GPIO_Init+0x2ac>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d04c      	beq.n	8002806 <HAL_GPIO_Init+0xfa>
 800276c:	4a92      	ldr	r2, [pc, #584]	; (80029b8 <HAL_GPIO_Init+0x2ac>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d863      	bhi.n	800283a <HAL_GPIO_Init+0x12e>
 8002772:	4a92      	ldr	r2, [pc, #584]	; (80029bc <HAL_GPIO_Init+0x2b0>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d046      	beq.n	8002806 <HAL_GPIO_Init+0xfa>
 8002778:	4a90      	ldr	r2, [pc, #576]	; (80029bc <HAL_GPIO_Init+0x2b0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d85d      	bhi.n	800283a <HAL_GPIO_Init+0x12e>
 800277e:	2b12      	cmp	r3, #18
 8002780:	d82a      	bhi.n	80027d8 <HAL_GPIO_Init+0xcc>
 8002782:	2b12      	cmp	r3, #18
 8002784:	d859      	bhi.n	800283a <HAL_GPIO_Init+0x12e>
 8002786:	a201      	add	r2, pc, #4	; (adr r2, 800278c <HAL_GPIO_Init+0x80>)
 8002788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800278c:	08002807 	.word	0x08002807
 8002790:	080027e1 	.word	0x080027e1
 8002794:	080027f3 	.word	0x080027f3
 8002798:	08002835 	.word	0x08002835
 800279c:	0800283b 	.word	0x0800283b
 80027a0:	0800283b 	.word	0x0800283b
 80027a4:	0800283b 	.word	0x0800283b
 80027a8:	0800283b 	.word	0x0800283b
 80027ac:	0800283b 	.word	0x0800283b
 80027b0:	0800283b 	.word	0x0800283b
 80027b4:	0800283b 	.word	0x0800283b
 80027b8:	0800283b 	.word	0x0800283b
 80027bc:	0800283b 	.word	0x0800283b
 80027c0:	0800283b 	.word	0x0800283b
 80027c4:	0800283b 	.word	0x0800283b
 80027c8:	0800283b 	.word	0x0800283b
 80027cc:	0800283b 	.word	0x0800283b
 80027d0:	080027e9 	.word	0x080027e9
 80027d4:	080027fd 	.word	0x080027fd
 80027d8:	4a79      	ldr	r2, [pc, #484]	; (80029c0 <HAL_GPIO_Init+0x2b4>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d013      	beq.n	8002806 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027de:	e02c      	b.n	800283a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	623b      	str	r3, [r7, #32]
          break;
 80027e6:	e029      	b.n	800283c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	3304      	adds	r3, #4
 80027ee:	623b      	str	r3, [r7, #32]
          break;
 80027f0:	e024      	b.n	800283c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	3308      	adds	r3, #8
 80027f8:	623b      	str	r3, [r7, #32]
          break;
 80027fa:	e01f      	b.n	800283c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	330c      	adds	r3, #12
 8002802:	623b      	str	r3, [r7, #32]
          break;
 8002804:	e01a      	b.n	800283c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d102      	bne.n	8002814 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800280e:	2304      	movs	r3, #4
 8002810:	623b      	str	r3, [r7, #32]
          break;
 8002812:	e013      	b.n	800283c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d105      	bne.n	8002828 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800281c:	2308      	movs	r3, #8
 800281e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69fa      	ldr	r2, [r7, #28]
 8002824:	611a      	str	r2, [r3, #16]
          break;
 8002826:	e009      	b.n	800283c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002828:	2308      	movs	r3, #8
 800282a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	69fa      	ldr	r2, [r7, #28]
 8002830:	615a      	str	r2, [r3, #20]
          break;
 8002832:	e003      	b.n	800283c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002834:	2300      	movs	r3, #0
 8002836:	623b      	str	r3, [r7, #32]
          break;
 8002838:	e000      	b.n	800283c <HAL_GPIO_Init+0x130>
          break;
 800283a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	2bff      	cmp	r3, #255	; 0xff
 8002840:	d801      	bhi.n	8002846 <HAL_GPIO_Init+0x13a>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	e001      	b.n	800284a <HAL_GPIO_Init+0x13e>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3304      	adds	r3, #4
 800284a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	2bff      	cmp	r3, #255	; 0xff
 8002850:	d802      	bhi.n	8002858 <HAL_GPIO_Init+0x14c>
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	e002      	b.n	800285e <HAL_GPIO_Init+0x152>
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	3b08      	subs	r3, #8
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	210f      	movs	r1, #15
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	fa01 f303 	lsl.w	r3, r1, r3
 800286c:	43db      	mvns	r3, r3
 800286e:	401a      	ands	r2, r3
 8002870:	6a39      	ldr	r1, [r7, #32]
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	fa01 f303 	lsl.w	r3, r1, r3
 8002878:	431a      	orrs	r2, r3
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 80b1 	beq.w	80029ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800288c:	4b4d      	ldr	r3, [pc, #308]	; (80029c4 <HAL_GPIO_Init+0x2b8>)
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	4a4c      	ldr	r2, [pc, #304]	; (80029c4 <HAL_GPIO_Init+0x2b8>)
 8002892:	f043 0301 	orr.w	r3, r3, #1
 8002896:	6193      	str	r3, [r2, #24]
 8002898:	4b4a      	ldr	r3, [pc, #296]	; (80029c4 <HAL_GPIO_Init+0x2b8>)
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028a4:	4a48      	ldr	r2, [pc, #288]	; (80029c8 <HAL_GPIO_Init+0x2bc>)
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	089b      	lsrs	r3, r3, #2
 80028aa:	3302      	adds	r3, #2
 80028ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	220f      	movs	r2, #15
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4013      	ands	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a40      	ldr	r2, [pc, #256]	; (80029cc <HAL_GPIO_Init+0x2c0>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d013      	beq.n	80028f8 <HAL_GPIO_Init+0x1ec>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a3f      	ldr	r2, [pc, #252]	; (80029d0 <HAL_GPIO_Init+0x2c4>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d00d      	beq.n	80028f4 <HAL_GPIO_Init+0x1e8>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a3e      	ldr	r2, [pc, #248]	; (80029d4 <HAL_GPIO_Init+0x2c8>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d007      	beq.n	80028f0 <HAL_GPIO_Init+0x1e4>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a3d      	ldr	r2, [pc, #244]	; (80029d8 <HAL_GPIO_Init+0x2cc>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d101      	bne.n	80028ec <HAL_GPIO_Init+0x1e0>
 80028e8:	2303      	movs	r3, #3
 80028ea:	e006      	b.n	80028fa <HAL_GPIO_Init+0x1ee>
 80028ec:	2304      	movs	r3, #4
 80028ee:	e004      	b.n	80028fa <HAL_GPIO_Init+0x1ee>
 80028f0:	2302      	movs	r3, #2
 80028f2:	e002      	b.n	80028fa <HAL_GPIO_Init+0x1ee>
 80028f4:	2301      	movs	r3, #1
 80028f6:	e000      	b.n	80028fa <HAL_GPIO_Init+0x1ee>
 80028f8:	2300      	movs	r3, #0
 80028fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028fc:	f002 0203 	and.w	r2, r2, #3
 8002900:	0092      	lsls	r2, r2, #2
 8002902:	4093      	lsls	r3, r2
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	4313      	orrs	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800290a:	492f      	ldr	r1, [pc, #188]	; (80029c8 <HAL_GPIO_Init+0x2bc>)
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	089b      	lsrs	r3, r3, #2
 8002910:	3302      	adds	r3, #2
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d006      	beq.n	8002932 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002924:	4b2d      	ldr	r3, [pc, #180]	; (80029dc <HAL_GPIO_Init+0x2d0>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	492c      	ldr	r1, [pc, #176]	; (80029dc <HAL_GPIO_Init+0x2d0>)
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	4313      	orrs	r3, r2
 800292e:	600b      	str	r3, [r1, #0]
 8002930:	e006      	b.n	8002940 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002932:	4b2a      	ldr	r3, [pc, #168]	; (80029dc <HAL_GPIO_Init+0x2d0>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	43db      	mvns	r3, r3
 800293a:	4928      	ldr	r1, [pc, #160]	; (80029dc <HAL_GPIO_Init+0x2d0>)
 800293c:	4013      	ands	r3, r2
 800293e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d006      	beq.n	800295a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800294c:	4b23      	ldr	r3, [pc, #140]	; (80029dc <HAL_GPIO_Init+0x2d0>)
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	4922      	ldr	r1, [pc, #136]	; (80029dc <HAL_GPIO_Init+0x2d0>)
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	4313      	orrs	r3, r2
 8002956:	604b      	str	r3, [r1, #4]
 8002958:	e006      	b.n	8002968 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800295a:	4b20      	ldr	r3, [pc, #128]	; (80029dc <HAL_GPIO_Init+0x2d0>)
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	43db      	mvns	r3, r3
 8002962:	491e      	ldr	r1, [pc, #120]	; (80029dc <HAL_GPIO_Init+0x2d0>)
 8002964:	4013      	ands	r3, r2
 8002966:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d006      	beq.n	8002982 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002974:	4b19      	ldr	r3, [pc, #100]	; (80029dc <HAL_GPIO_Init+0x2d0>)
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	4918      	ldr	r1, [pc, #96]	; (80029dc <HAL_GPIO_Init+0x2d0>)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	4313      	orrs	r3, r2
 800297e:	608b      	str	r3, [r1, #8]
 8002980:	e006      	b.n	8002990 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002982:	4b16      	ldr	r3, [pc, #88]	; (80029dc <HAL_GPIO_Init+0x2d0>)
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	43db      	mvns	r3, r3
 800298a:	4914      	ldr	r1, [pc, #80]	; (80029dc <HAL_GPIO_Init+0x2d0>)
 800298c:	4013      	ands	r3, r2
 800298e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d021      	beq.n	80029e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800299c:	4b0f      	ldr	r3, [pc, #60]	; (80029dc <HAL_GPIO_Init+0x2d0>)
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	490e      	ldr	r1, [pc, #56]	; (80029dc <HAL_GPIO_Init+0x2d0>)
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	60cb      	str	r3, [r1, #12]
 80029a8:	e021      	b.n	80029ee <HAL_GPIO_Init+0x2e2>
 80029aa:	bf00      	nop
 80029ac:	10320000 	.word	0x10320000
 80029b0:	10310000 	.word	0x10310000
 80029b4:	10220000 	.word	0x10220000
 80029b8:	10210000 	.word	0x10210000
 80029bc:	10120000 	.word	0x10120000
 80029c0:	10110000 	.word	0x10110000
 80029c4:	40021000 	.word	0x40021000
 80029c8:	40010000 	.word	0x40010000
 80029cc:	40010800 	.word	0x40010800
 80029d0:	40010c00 	.word	0x40010c00
 80029d4:	40011000 	.word	0x40011000
 80029d8:	40011400 	.word	0x40011400
 80029dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <HAL_GPIO_Init+0x304>)
 80029e2:	68da      	ldr	r2, [r3, #12]
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	43db      	mvns	r3, r3
 80029e8:	4909      	ldr	r1, [pc, #36]	; (8002a10 <HAL_GPIO_Init+0x304>)
 80029ea:	4013      	ands	r3, r2
 80029ec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	3301      	adds	r3, #1
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	fa22 f303 	lsr.w	r3, r2, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f47f ae8e 	bne.w	8002720 <HAL_GPIO_Init+0x14>
  }
}
 8002a04:	bf00      	nop
 8002a06:	bf00      	nop
 8002a08:	372c      	adds	r7, #44	; 0x2c
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr
 8002a10:	40010400 	.word	0x40010400

08002a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	807b      	strh	r3, [r7, #2]
 8002a20:	4613      	mov	r3, r2
 8002a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a24:	787b      	ldrb	r3, [r7, #1]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a2a:	887a      	ldrh	r2, [r7, #2]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a30:	e003      	b.n	8002a3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a32:	887b      	ldrh	r3, [r7, #2]
 8002a34:	041a      	lsls	r2, r3, #16
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	611a      	str	r2, [r3, #16]
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr

08002a44 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a56:	887a      	ldrh	r2, [r7, #2]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	041a      	lsls	r2, r3, #16
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	43d9      	mvns	r1, r3
 8002a62:	887b      	ldrh	r3, [r7, #2]
 8002a64:	400b      	ands	r3, r1
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	611a      	str	r2, [r3, #16]
}
 8002a6c:	bf00      	nop
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr
	...

08002a78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a82:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a84:	695a      	ldr	r2, [r3, #20]
 8002a86:	88fb      	ldrh	r3, [r7, #6]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d006      	beq.n	8002a9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a8e:	4a05      	ldr	r2, [pc, #20]	; (8002aa4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a90:	88fb      	ldrh	r3, [r7, #6]
 8002a92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a94:	88fb      	ldrh	r3, [r7, #6]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff f838 	bl	8001b0c <HAL_GPIO_EXTI_Callback>
  }
}
 8002a9c:	bf00      	nop
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40010400 	.word	0x40010400

08002aa8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aaa:	b08b      	sub	sp, #44	; 0x2c
 8002aac:	af06      	add	r7, sp, #24
 8002aae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e0fd      	b.n	8002cb6 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d106      	bne.n	8002ad4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f007 ff70 	bl	800a9b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2203      	movs	r2, #3
 8002ad8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f003 fc3f 	bl	8006364 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	603b      	str	r3, [r7, #0]
 8002aec:	687e      	ldr	r6, [r7, #4]
 8002aee:	466d      	mov	r5, sp
 8002af0:	f106 0410 	add.w	r4, r6, #16
 8002af4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002af6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002af8:	6823      	ldr	r3, [r4, #0]
 8002afa:	602b      	str	r3, [r5, #0]
 8002afc:	1d33      	adds	r3, r6, #4
 8002afe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b00:	6838      	ldr	r0, [r7, #0]
 8002b02:	f003 fc09 	bl	8006318 <USB_CoreInit>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d005      	beq.n	8002b18 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e0ce      	b.n	8002cb6 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f003 fc3a 	bl	8006398 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b24:	2300      	movs	r3, #0
 8002b26:	73fb      	strb	r3, [r7, #15]
 8002b28:	e04c      	b.n	8002bc4 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	1c5a      	adds	r2, r3, #1
 8002b30:	4613      	mov	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	440b      	add	r3, r1
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	440b      	add	r3, r1
 8002b50:	7bfa      	ldrb	r2, [r7, #15]
 8002b52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b54:	7bfa      	ldrb	r2, [r7, #15]
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
 8002b58:	b298      	uxth	r0, r3
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	440b      	add	r3, r1
 8002b66:	3336      	adds	r3, #54	; 0x36
 8002b68:	4602      	mov	r2, r0
 8002b6a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	1c5a      	adds	r2, r3, #1
 8002b72:	4613      	mov	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	440b      	add	r3, r1
 8002b7c:	3303      	adds	r3, #3
 8002b7e:	2200      	movs	r2, #0
 8002b80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b82:	7bfa      	ldrb	r2, [r7, #15]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	440b      	add	r3, r1
 8002b90:	3338      	adds	r3, #56	; 0x38
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b96:	7bfa      	ldrb	r2, [r7, #15]
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	440b      	add	r3, r1
 8002ba4:	333c      	adds	r3, #60	; 0x3c
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002baa:	7bfa      	ldrb	r2, [r7, #15]
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	440b      	add	r3, r1
 8002bb8:	3340      	adds	r3, #64	; 0x40
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	73fb      	strb	r3, [r7, #15]
 8002bc4:	7bfa      	ldrb	r2, [r7, #15]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d3ad      	bcc.n	8002b2a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bce:	2300      	movs	r3, #0
 8002bd0:	73fb      	strb	r3, [r7, #15]
 8002bd2:	e044      	b.n	8002c5e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bd4:	7bfa      	ldrb	r2, [r7, #15]
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	440b      	add	r3, r1
 8002be2:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002be6:	2200      	movs	r2, #0
 8002be8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bea:	7bfa      	ldrb	r2, [r7, #15]
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	440b      	add	r3, r1
 8002bf8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bfc:	7bfa      	ldrb	r2, [r7, #15]
 8002bfe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c00:	7bfa      	ldrb	r2, [r7, #15]
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	440b      	add	r3, r1
 8002c0e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002c12:	2200      	movs	r2, #0
 8002c14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c16:	7bfa      	ldrb	r2, [r7, #15]
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	440b      	add	r3, r1
 8002c24:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c2c:	7bfa      	ldrb	r2, [r7, #15]
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	440b      	add	r3, r1
 8002c3a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002c3e:	2200      	movs	r2, #0
 8002c40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c42:	7bfa      	ldrb	r2, [r7, #15]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	440b      	add	r3, r1
 8002c50:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c58:	7bfb      	ldrb	r3, [r7, #15]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	73fb      	strb	r3, [r7, #15]
 8002c5e:	7bfa      	ldrb	r2, [r7, #15]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d3b5      	bcc.n	8002bd4 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	603b      	str	r3, [r7, #0]
 8002c6e:	687e      	ldr	r6, [r7, #4]
 8002c70:	466d      	mov	r5, sp
 8002c72:	f106 0410 	add.w	r4, r6, #16
 8002c76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c7a:	6823      	ldr	r3, [r4, #0]
 8002c7c:	602b      	str	r3, [r5, #0]
 8002c7e:	1d33      	adds	r3, r6, #4
 8002c80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c82:	6838      	ldr	r0, [r7, #0]
 8002c84:	f003 fb94 	bl	80063b0 <USB_DevInit>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d005      	beq.n	8002c9a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2202      	movs	r2, #2
 8002c92:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e00d      	b.n	8002cb6 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f006 f846 	bl	8008d40 <USB_DevDisconnect>

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cbe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b082      	sub	sp, #8
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <HAL_PCD_Start+0x16>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e016      	b.n	8002d02 <HAL_PCD_Start+0x44>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f003 fb29 	bl	8006338 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f008 f8d6 	bl	800ae9a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f006 f81a 	bl	8008d2c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b088      	sub	sp, #32
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f006 f81c 	bl	8008d54 <USB_ReadInterrupts>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d26:	d102      	bne.n	8002d2e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 fb5f 	bl	80033ec <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f006 f80e 	bl	8008d54 <USB_ReadInterrupts>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d42:	d112      	bne.n	8002d6a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d56:	b292      	uxth	r2, r2
 8002d58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f007 fea4 	bl	800aaaa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002d62:	2100      	movs	r1, #0
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f923 	bl	8002fb0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f005 fff0 	bl	8008d54 <USB_ReadInterrupts>
 8002d74:	4603      	mov	r3, r0
 8002d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d7e:	d10b      	bne.n	8002d98 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d92:	b292      	uxth	r2, r2
 8002d94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f005 ffd9 	bl	8008d54 <USB_ReadInterrupts>
 8002da2:	4603      	mov	r3, r0
 8002da4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002da8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dac:	d10b      	bne.n	8002dc6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dc0:	b292      	uxth	r2, r2
 8002dc2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f005 ffc2 	bl	8008d54 <USB_ReadInterrupts>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dda:	d126      	bne.n	8002e2a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0204 	bic.w	r2, r2, #4
 8002dee:	b292      	uxth	r2, r2
 8002df0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0208 	bic.w	r2, r2, #8
 8002e06:	b292      	uxth	r2, r2
 8002e08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f007 fe85 	bl	800ab1c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e24:	b292      	uxth	r2, r2
 8002e26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f005 ff90 	bl	8008d54 <USB_ReadInterrupts>
 8002e34:	4603      	mov	r3, r0
 8002e36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e3e:	f040 8082 	bne.w	8002f46 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002e42:	2300      	movs	r3, #0
 8002e44:	77fb      	strb	r3, [r7, #31]
 8002e46:	e010      	b.n	8002e6a <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	7ffb      	ldrb	r3, [r7, #31]
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	441a      	add	r2, r3
 8002e54:	7ffb      	ldrb	r3, [r7, #31]
 8002e56:	8812      	ldrh	r2, [r2, #0]
 8002e58:	b292      	uxth	r2, r2
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	3320      	adds	r3, #32
 8002e5e:	443b      	add	r3, r7
 8002e60:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002e64:	7ffb      	ldrb	r3, [r7, #31]
 8002e66:	3301      	adds	r3, #1
 8002e68:	77fb      	strb	r3, [r7, #31]
 8002e6a:	7ffb      	ldrb	r3, [r7, #31]
 8002e6c:	2b07      	cmp	r3, #7
 8002e6e:	d9eb      	bls.n	8002e48 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0201 	orr.w	r2, r2, #1
 8002e82:	b292      	uxth	r2, r2
 8002e84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0201 	bic.w	r2, r2, #1
 8002e9a:	b292      	uxth	r2, r2
 8002e9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002ea0:	bf00      	nop
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0f6      	beq.n	8002ea2 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ec6:	b292      	uxth	r2, r2
 8002ec8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002ecc:	2300      	movs	r3, #0
 8002ece:	77fb      	strb	r3, [r7, #31]
 8002ed0:	e00f      	b.n	8002ef2 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002ed2:	7ffb      	ldrb	r3, [r7, #31]
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6812      	ldr	r2, [r2, #0]
 8002ed8:	4611      	mov	r1, r2
 8002eda:	7ffa      	ldrb	r2, [r7, #31]
 8002edc:	0092      	lsls	r2, r2, #2
 8002ede:	440a      	add	r2, r1
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	3320      	adds	r3, #32
 8002ee4:	443b      	add	r3, r7
 8002ee6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002eea:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002eec:	7ffb      	ldrb	r3, [r7, #31]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	77fb      	strb	r3, [r7, #31]
 8002ef2:	7ffb      	ldrb	r3, [r7, #31]
 8002ef4:	2b07      	cmp	r3, #7
 8002ef6:	d9ec      	bls.n	8002ed2 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0208 	orr.w	r2, r2, #8
 8002f0a:	b292      	uxth	r2, r2
 8002f0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f22:	b292      	uxth	r2, r2
 8002f24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0204 	orr.w	r2, r2, #4
 8002f3a:	b292      	uxth	r2, r2
 8002f3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f007 fdd1 	bl	800aae8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f005 ff02 	bl	8008d54 <USB_ReadInterrupts>
 8002f50:	4603      	mov	r3, r0
 8002f52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f5a:	d10e      	bne.n	8002f7a <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f6e:	b292      	uxth	r2, r2
 8002f70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f007 fd8a 	bl	800aa8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f005 fee8 	bl	8008d54 <USB_ReadInterrupts>
 8002f84:	4603      	mov	r3, r0
 8002f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f8e:	d10b      	bne.n	8002fa8 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fa2:	b292      	uxth	r2, r2
 8002fa4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002fa8:	bf00      	nop
 8002faa:	3720      	adds	r7, #32
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d101      	bne.n	8002fca <HAL_PCD_SetAddress+0x1a>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	e013      	b.n	8002ff2 <HAL_PCD_SetAddress+0x42>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	78fa      	ldrb	r2, [r7, #3]
 8002fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	78fa      	ldrb	r2, [r7, #3]
 8002fe0:	4611      	mov	r1, r2
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f005 fe8f 	bl	8008d06 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b084      	sub	sp, #16
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
 8003002:	4608      	mov	r0, r1
 8003004:	4611      	mov	r1, r2
 8003006:	461a      	mov	r2, r3
 8003008:	4603      	mov	r3, r0
 800300a:	70fb      	strb	r3, [r7, #3]
 800300c:	460b      	mov	r3, r1
 800300e:	803b      	strh	r3, [r7, #0]
 8003010:	4613      	mov	r3, r2
 8003012:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003014:	2300      	movs	r3, #0
 8003016:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003018:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800301c:	2b00      	cmp	r3, #0
 800301e:	da0e      	bge.n	800303e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003020:	78fb      	ldrb	r3, [r7, #3]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	1c5a      	adds	r2, r3, #1
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	4413      	add	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2201      	movs	r2, #1
 800303a:	705a      	strb	r2, [r3, #1]
 800303c:	e00e      	b.n	800305c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800303e:	78fb      	ldrb	r3, [r7, #3]
 8003040:	f003 0207 	and.w	r2, r3, #7
 8003044:	4613      	mov	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	4413      	add	r3, r2
 8003054:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800305c:	78fb      	ldrb	r3, [r7, #3]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	b2da      	uxtb	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003068:	883a      	ldrh	r2, [r7, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	78ba      	ldrb	r2, [r7, #2]
 8003072:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	785b      	ldrb	r3, [r3, #1]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d004      	beq.n	8003086 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	b29a      	uxth	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003086:	78bb      	ldrb	r3, [r7, #2]
 8003088:	2b02      	cmp	r3, #2
 800308a:	d102      	bne.n	8003092 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <HAL_PCD_EP_Open+0xa6>
 800309c:	2302      	movs	r3, #2
 800309e:	e00e      	b.n	80030be <HAL_PCD_EP_Open+0xc4>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68f9      	ldr	r1, [r7, #12]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f003 f99e 	bl	80063f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80030bc:	7afb      	ldrb	r3, [r7, #11]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b084      	sub	sp, #16
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
 80030ce:	460b      	mov	r3, r1
 80030d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	da0e      	bge.n	80030f8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030da:	78fb      	ldrb	r3, [r7, #3]
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	4413      	add	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2201      	movs	r2, #1
 80030f4:	705a      	strb	r2, [r3, #1]
 80030f6:	e00e      	b.n	8003116 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030f8:	78fb      	ldrb	r3, [r7, #3]
 80030fa:	f003 0207 	and.w	r2, r3, #7
 80030fe:	4613      	mov	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	4413      	add	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003116:	78fb      	ldrb	r3, [r7, #3]
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	b2da      	uxtb	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003128:	2b01      	cmp	r3, #1
 800312a:	d101      	bne.n	8003130 <HAL_PCD_EP_Close+0x6a>
 800312c:	2302      	movs	r3, #2
 800312e:	e00e      	b.n	800314e <HAL_PCD_EP_Close+0x88>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68f9      	ldr	r1, [r7, #12]
 800313e:	4618      	mov	r0, r3
 8003140:	f003 fcc0 	bl	8006ac4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b086      	sub	sp, #24
 800315a:	af00      	add	r7, sp, #0
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	607a      	str	r2, [r7, #4]
 8003160:	603b      	str	r3, [r7, #0]
 8003162:	460b      	mov	r3, r1
 8003164:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003166:	7afb      	ldrb	r3, [r7, #11]
 8003168:	f003 0207 	and.w	r2, r3, #7
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	4413      	add	r3, r2
 800317c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2200      	movs	r2, #0
 800318e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	2200      	movs	r2, #0
 8003194:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003196:	7afb      	ldrb	r3, [r7, #11]
 8003198:	f003 0307 	and.w	r3, r3, #7
 800319c:	b2da      	uxtb	r2, r3
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031a2:	7afb      	ldrb	r3, [r7, #11]
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d106      	bne.n	80031ba <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6979      	ldr	r1, [r7, #20]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f003 fe72 	bl	8006e9c <USB_EPStartXfer>
 80031b8:	e005      	b.n	80031c6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6979      	ldr	r1, [r7, #20]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f003 fe6b 	bl	8006e9c <USB_EPStartXfer>
  }

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80031dc:	78fb      	ldrb	r3, [r7, #3]
 80031de:	f003 0207 	and.w	r2, r3, #7
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	440b      	add	r3, r1
 80031ee:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80031f2:	681b      	ldr	r3, [r3, #0]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr

080031fe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b086      	sub	sp, #24
 8003202:	af00      	add	r7, sp, #0
 8003204:	60f8      	str	r0, [r7, #12]
 8003206:	607a      	str	r2, [r7, #4]
 8003208:	603b      	str	r3, [r7, #0]
 800320a:	460b      	mov	r3, r1
 800320c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800320e:	7afb      	ldrb	r3, [r7, #11]
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	4613      	mov	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4413      	add	r3, r2
 8003222:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	2200      	movs	r2, #0
 8003242:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	2201      	movs	r2, #1
 8003248:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800324a:	7afb      	ldrb	r3, [r7, #11]
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	b2da      	uxtb	r2, r3
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003256:	7afb      	ldrb	r3, [r7, #11]
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	2b00      	cmp	r3, #0
 800325e:	d106      	bne.n	800326e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6979      	ldr	r1, [r7, #20]
 8003266:	4618      	mov	r0, r3
 8003268:	f003 fe18 	bl	8006e9c <USB_EPStartXfer>
 800326c:	e005      	b.n	800327a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6979      	ldr	r1, [r7, #20]
 8003274:	4618      	mov	r0, r3
 8003276:	f003 fe11 	bl	8006e9c <USB_EPStartXfer>
  }

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3718      	adds	r7, #24
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003290:	78fb      	ldrb	r3, [r7, #3]
 8003292:	f003 0207 	and.w	r2, r3, #7
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	429a      	cmp	r2, r3
 800329c:	d901      	bls.n	80032a2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e04c      	b.n	800333c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	da0e      	bge.n	80032c8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032aa:	78fb      	ldrb	r3, [r7, #3]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	4613      	mov	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	4413      	add	r3, r2
 80032be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2201      	movs	r2, #1
 80032c4:	705a      	strb	r2, [r3, #1]
 80032c6:	e00c      	b.n	80032e2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032c8:	78fa      	ldrb	r2, [r7, #3]
 80032ca:	4613      	mov	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	4413      	add	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2201      	movs	r2, #1
 80032e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032e8:	78fb      	ldrb	r3, [r7, #3]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d101      	bne.n	8003302 <HAL_PCD_EP_SetStall+0x7e>
 80032fe:	2302      	movs	r3, #2
 8003300:	e01c      	b.n	800333c <HAL_PCD_EP_SetStall+0xb8>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68f9      	ldr	r1, [r7, #12]
 8003310:	4618      	mov	r0, r3
 8003312:	f005 fbfb 	bl	8008b0c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003316:	78fb      	ldrb	r3, [r7, #3]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	2b00      	cmp	r3, #0
 800331e:	d108      	bne.n	8003332 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800332a:	4619      	mov	r1, r3
 800332c:	4610      	mov	r0, r2
 800332e:	f005 fd20 	bl	8008d72 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	460b      	mov	r3, r1
 800334e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	f003 020f 	and.w	r2, r3, #15
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	429a      	cmp	r2, r3
 800335c:	d901      	bls.n	8003362 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e040      	b.n	80033e4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003362:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003366:	2b00      	cmp	r3, #0
 8003368:	da0e      	bge.n	8003388 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800336a:	78fb      	ldrb	r3, [r7, #3]
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	1c5a      	adds	r2, r3, #1
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	4413      	add	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2201      	movs	r2, #1
 8003384:	705a      	strb	r2, [r3, #1]
 8003386:	e00e      	b.n	80033a6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003388:	78fb      	ldrb	r3, [r7, #3]
 800338a:	f003 0207 	and.w	r2, r3, #7
 800338e:	4613      	mov	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	4413      	add	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033ac:	78fb      	ldrb	r3, [r7, #3]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d101      	bne.n	80033c6 <HAL_PCD_EP_ClrStall+0x82>
 80033c2:	2302      	movs	r3, #2
 80033c4:	e00e      	b.n	80033e4 <HAL_PCD_EP_ClrStall+0xa0>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68f9      	ldr	r1, [r7, #12]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f005 fbe9 	bl	8008bac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08e      	sub	sp, #56	; 0x38
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80033f4:	e2ec      	b.n	80039d0 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033fe:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003400:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003402:	b2db      	uxtb	r3, r3
 8003404:	f003 030f 	and.w	r3, r3, #15
 8003408:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800340c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003410:	2b00      	cmp	r3, #0
 8003412:	f040 8161 	bne.w	80036d8 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003416:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003418:	f003 0310 	and.w	r3, r3, #16
 800341c:	2b00      	cmp	r3, #0
 800341e:	d152      	bne.n	80034c6 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	881b      	ldrh	r3, [r3, #0]
 8003426:	b29b      	uxth	r3, r3
 8003428:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800342c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003430:	81fb      	strh	r3, [r7, #14]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	89fb      	ldrh	r3, [r7, #14]
 8003438:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800343c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003440:	b29b      	uxth	r3, r3
 8003442:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3328      	adds	r3, #40	; 0x28
 8003448:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003452:	b29b      	uxth	r3, r3
 8003454:	461a      	mov	r2, r3
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	4413      	add	r3, r2
 800345e:	3302      	adds	r3, #2
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6812      	ldr	r2, [r2, #0]
 8003466:	4413      	add	r3, r2
 8003468:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	695a      	ldr	r2, [r3, #20]
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	441a      	add	r2, r3
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003484:	2100      	movs	r1, #0
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f007 fae7 	bl	800aa5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 829b 	beq.w	80039d0 <PCD_EP_ISR_Handler+0x5e4>
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f040 8296 	bne.w	80039d0 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	b292      	uxth	r2, r2
 80034b8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80034c4:	e284      	b.n	80039d0 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034cc:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	881b      	ldrh	r3, [r3, #0]
 80034d4:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80034d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80034d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d034      	beq.n	800354a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	461a      	mov	r2, r3
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	4413      	add	r3, r2
 80034f4:	3306      	adds	r3, #6
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6812      	ldr	r2, [r2, #0]
 80034fc:	4413      	add	r3, r2
 80034fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003502:	881b      	ldrh	r3, [r3, #0]
 8003504:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6818      	ldr	r0, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003518:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800351a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800351e:	b29b      	uxth	r3, r3
 8003520:	f005 fc77 	bl	8008e12 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	b29a      	uxth	r2, r3
 800352c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003530:	4013      	ands	r3, r2
 8003532:	823b      	strh	r3, [r7, #16]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	8a3a      	ldrh	r2, [r7, #16]
 800353a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800353e:	b292      	uxth	r2, r2
 8003540:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f007 fa5c 	bl	800aa00 <HAL_PCD_SetupStageCallback>
 8003548:	e242      	b.n	80039d0 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800354a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800354e:	2b00      	cmp	r3, #0
 8003550:	f280 823e 	bge.w	80039d0 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	b29a      	uxth	r2, r3
 800355c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003560:	4013      	ands	r3, r2
 8003562:	83bb      	strh	r3, [r7, #28]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	8bba      	ldrh	r2, [r7, #28]
 800356a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800356e:	b292      	uxth	r2, r2
 8003570:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800357a:	b29b      	uxth	r3, r3
 800357c:	461a      	mov	r2, r3
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	4413      	add	r3, r2
 8003586:	3306      	adds	r3, #6
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6812      	ldr	r2, [r2, #0]
 800358e:	4413      	add	r3, r2
 8003590:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003594:	881b      	ldrh	r3, [r3, #0]
 8003596:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d019      	beq.n	80035da <PCD_EP_ISR_Handler+0x1ee>
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d015      	beq.n	80035da <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6818      	ldr	r0, [r3, #0]
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	6959      	ldr	r1, [r3, #20]
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80035be:	b29b      	uxth	r3, r3
 80035c0:	f005 fc27 	bl	8008e12 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	695a      	ldr	r2, [r3, #20]
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	441a      	add	r2, r3
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80035d2:	2100      	movs	r1, #0
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f007 fa25 	bl	800aa24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	881b      	ldrh	r3, [r3, #0]
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f040 81f2 	bne.w	80039d0 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	61bb      	str	r3, [r7, #24]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	461a      	mov	r2, r3
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	4413      	add	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d112      	bne.n	800363a <PCD_EP_ISR_Handler+0x24e>
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	881b      	ldrh	r3, [r3, #0]
 8003618:	b29b      	uxth	r3, r3
 800361a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800361e:	b29a      	uxth	r2, r3
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	801a      	strh	r2, [r3, #0]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	b29b      	uxth	r3, r3
 800362a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800362e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003632:	b29a      	uxth	r2, r3
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	801a      	strh	r2, [r3, #0]
 8003638:	e02f      	b.n	800369a <PCD_EP_ISR_Handler+0x2ae>
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	2b3e      	cmp	r3, #62	; 0x3e
 8003640:	d813      	bhi.n	800366a <PCD_EP_ISR_Handler+0x27e>
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	085b      	lsrs	r3, r3, #1
 8003648:	633b      	str	r3, [r7, #48]	; 0x30
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <PCD_EP_ISR_Handler+0x270>
 8003656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003658:	3301      	adds	r3, #1
 800365a:	633b      	str	r3, [r7, #48]	; 0x30
 800365c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365e:	b29b      	uxth	r3, r3
 8003660:	029b      	lsls	r3, r3, #10
 8003662:	b29a      	uxth	r2, r3
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	801a      	strh	r2, [r3, #0]
 8003668:	e017      	b.n	800369a <PCD_EP_ISR_Handler+0x2ae>
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	095b      	lsrs	r3, r3, #5
 8003670:	633b      	str	r3, [r7, #48]	; 0x30
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	f003 031f 	and.w	r3, r3, #31
 800367a:	2b00      	cmp	r3, #0
 800367c:	d102      	bne.n	8003684 <PCD_EP_ISR_Handler+0x298>
 800367e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003680:	3b01      	subs	r3, #1
 8003682:	633b      	str	r3, [r7, #48]	; 0x30
 8003684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003686:	b29b      	uxth	r3, r3
 8003688:	029b      	lsls	r3, r3, #10
 800368a:	b29b      	uxth	r3, r3
 800368c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003690:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003694:	b29a      	uxth	r2, r3
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	881b      	ldrh	r3, [r3, #0]
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036aa:	827b      	strh	r3, [r7, #18]
 80036ac:	8a7b      	ldrh	r3, [r7, #18]
 80036ae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80036b2:	827b      	strh	r3, [r7, #18]
 80036b4:	8a7b      	ldrh	r3, [r7, #18]
 80036b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80036ba:	827b      	strh	r3, [r7, #18]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	8a7b      	ldrh	r3, [r7, #18]
 80036c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	8013      	strh	r3, [r2, #0]
 80036d6:	e17b      	b.n	80039d0 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	461a      	mov	r2, r3
 80036de:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80036ea:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f280 80ea 	bge.w	80038c8 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	461a      	mov	r2, r3
 80036fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	b29a      	uxth	r2, r3
 8003706:	f640 738f 	movw	r3, #3983	; 0xf8f
 800370a:	4013      	ands	r3, r2
 800370c:	853b      	strh	r3, [r7, #40]	; 0x28
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800371e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003722:	b292      	uxth	r2, r2
 8003724:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003726:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800372a:	4613      	mov	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4413      	add	r3, r2
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	4413      	add	r3, r2
 800373a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	7b1b      	ldrb	r3, [r3, #12]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d122      	bne.n	800378a <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800374c:	b29b      	uxth	r3, r3
 800374e:	461a      	mov	r2, r3
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	4413      	add	r3, r2
 8003758:	3306      	adds	r3, #6
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6812      	ldr	r2, [r2, #0]
 8003760:	4413      	add	r3, r2
 8003762:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003766:	881b      	ldrh	r3, [r3, #0]
 8003768:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800376c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800376e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 8087 	beq.w	8003884 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6818      	ldr	r0, [r3, #0]
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	6959      	ldr	r1, [r3, #20]
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	88da      	ldrh	r2, [r3, #6]
 8003782:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003784:	f005 fb45 	bl	8008e12 <USB_ReadPMA>
 8003788:	e07c      	b.n	8003884 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	78db      	ldrb	r3, [r3, #3]
 800378e:	2b02      	cmp	r3, #2
 8003790:	d108      	bne.n	80037a4 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003792:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003794:	461a      	mov	r2, r3
 8003796:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f927 	bl	80039ec <HAL_PCD_EP_DB_Receive>
 800379e:	4603      	mov	r3, r0
 80037a0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80037a2:	e06f      	b.n	8003884 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	461a      	mov	r2, r3
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	881b      	ldrh	r3, [r3, #0]
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037be:	847b      	strh	r3, [r7, #34]	; 0x22
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	461a      	mov	r2, r3
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	441a      	add	r2, r3
 80037ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80037d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	461a      	mov	r2, r3
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	881b      	ldrh	r3, [r3, #0]
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d021      	beq.n	8003842 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003806:	b29b      	uxth	r3, r3
 8003808:	461a      	mov	r2, r3
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	4413      	add	r3, r2
 8003812:	3302      	adds	r3, #2
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6812      	ldr	r2, [r2, #0]
 800381a:	4413      	add	r3, r2
 800381c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003826:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003828:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800382a:	2b00      	cmp	r3, #0
 800382c:	d02a      	beq.n	8003884 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6818      	ldr	r0, [r3, #0]
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	6959      	ldr	r1, [r3, #20]
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	891a      	ldrh	r2, [r3, #8]
 800383a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800383c:	f005 fae9 	bl	8008e12 <USB_ReadPMA>
 8003840:	e020      	b.n	8003884 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800384a:	b29b      	uxth	r3, r3
 800384c:	461a      	mov	r2, r3
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	4413      	add	r3, r2
 8003856:	3306      	adds	r3, #6
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6812      	ldr	r2, [r2, #0]
 800385e:	4413      	add	r3, r2
 8003860:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800386a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800386c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800386e:	2b00      	cmp	r3, #0
 8003870:	d008      	beq.n	8003884 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	6959      	ldr	r1, [r3, #20]
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	895a      	ldrh	r2, [r3, #10]
 800387e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003880:	f005 fac7 	bl	8008e12 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003886:	69da      	ldr	r2, [r3, #28]
 8003888:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800388a:	441a      	add	r2, r3
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	695a      	ldr	r2, [r3, #20]
 8003894:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003896:	441a      	add	r2, r3
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800389c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d004      	beq.n	80038ae <PCD_EP_ISR_Handler+0x4c2>
 80038a4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d206      	bcs.n	80038bc <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	4619      	mov	r1, r3
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f007 f8b5 	bl	800aa24 <HAL_PCD_DataOutStageCallback>
 80038ba:	e005      	b.n	80038c8 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038c2:	4618      	mov	r0, r3
 80038c4:	f003 faea 	bl	8006e9c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80038c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80038ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d07e      	beq.n	80039d0 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80038d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	4613      	mov	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	4413      	add	r3, r2
 80038e4:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	461a      	mov	r2, r3
 80038ec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	4413      	add	r3, r2
 80038f4:	881b      	ldrh	r3, [r3, #0]
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80038fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003900:	843b      	strh	r3, [r7, #32]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	461a      	mov	r2, r3
 8003908:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	441a      	add	r2, r3
 8003910:	8c3b      	ldrh	r3, [r7, #32]
 8003912:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003916:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800391a:	b29b      	uxth	r3, r3
 800391c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	78db      	ldrb	r3, [r3, #3]
 8003922:	2b03      	cmp	r3, #3
 8003924:	d00c      	beq.n	8003940 <PCD_EP_ISR_Handler+0x554>
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003928:	78db      	ldrb	r3, [r3, #3]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d008      	beq.n	8003940 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003932:	2b02      	cmp	r3, #2
 8003934:	d146      	bne.n	80039c4 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003936:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393c:	2b00      	cmp	r3, #0
 800393e:	d141      	bne.n	80039c4 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003948:	b29b      	uxth	r3, r3
 800394a:	461a      	mov	r2, r3
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	4413      	add	r3, r2
 8003954:	3302      	adds	r3, #2
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6812      	ldr	r2, [r2, #0]
 800395c:	4413      	add	r3, r2
 800395e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003962:	881b      	ldrh	r3, [r3, #0]
 8003964:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003968:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	699a      	ldr	r2, [r3, #24]
 800396e:	8bfb      	ldrh	r3, [r7, #30]
 8003970:	429a      	cmp	r2, r3
 8003972:	d906      	bls.n	8003982 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	699a      	ldr	r2, [r3, #24]
 8003978:	8bfb      	ldrh	r3, [r7, #30]
 800397a:	1ad2      	subs	r2, r2, r3
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	619a      	str	r2, [r3, #24]
 8003980:	e002      	b.n	8003988 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	2200      	movs	r2, #0
 8003986:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d106      	bne.n	800399e <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	4619      	mov	r1, r3
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f007 f85f 	bl	800aa5a <HAL_PCD_DataInStageCallback>
 800399c:	e018      	b.n	80039d0 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	695a      	ldr	r2, [r3, #20]
 80039a2:	8bfb      	ldrh	r3, [r7, #30]
 80039a4:	441a      	add	r2, r3
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	69da      	ldr	r2, [r3, #28]
 80039ae:	8bfb      	ldrh	r3, [r7, #30]
 80039b0:	441a      	add	r2, r3
 80039b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b4:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039bc:	4618      	mov	r0, r3
 80039be:	f003 fa6d 	bl	8006e9c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80039c2:	e005      	b.n	80039d0 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80039c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80039c6:	461a      	mov	r2, r3
 80039c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f91b 	bl	8003c06 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039d8:	b29b      	uxth	r3, r3
 80039da:	b21b      	sxth	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f6ff ad0a 	blt.w	80033f6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3738      	adds	r7, #56	; 0x38
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	4613      	mov	r3, r2
 80039f8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80039fa:	88fb      	ldrh	r3, [r7, #6]
 80039fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d07e      	beq.n	8003b02 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	461a      	mov	r2, r3
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	00db      	lsls	r3, r3, #3
 8003a16:	4413      	add	r3, r2
 8003a18:	3302      	adds	r3, #2
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	6812      	ldr	r2, [r2, #0]
 8003a20:	4413      	add	r3, r2
 8003a22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a26:	881b      	ldrh	r3, [r3, #0]
 8003a28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a2c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	699a      	ldr	r2, [r3, #24]
 8003a32:	8b7b      	ldrh	r3, [r7, #26]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d306      	bcc.n	8003a46 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	699a      	ldr	r2, [r3, #24]
 8003a3c:	8b7b      	ldrh	r3, [r7, #26]
 8003a3e:	1ad2      	subs	r2, r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	619a      	str	r2, [r3, #24]
 8003a44:	e002      	b.n	8003a4c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d123      	bne.n	8003a9c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a6e:	833b      	strh	r3, [r7, #24]
 8003a70:	8b3b      	ldrh	r3, [r7, #24]
 8003a72:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003a76:	833b      	strh	r3, [r7, #24]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	441a      	add	r2, r3
 8003a86:	8b3b      	ldrh	r3, [r7, #24]
 8003a88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a9c:	88fb      	ldrh	r3, [r7, #6]
 8003a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d01f      	beq.n	8003ae6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	881b      	ldrh	r3, [r3, #0]
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac0:	82fb      	strh	r3, [r7, #22]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	441a      	add	r2, r3
 8003ad0:	8afb      	ldrh	r3, [r7, #22]
 8003ad2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ad6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ade:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003ae6:	8b7b      	ldrh	r3, [r7, #26]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 8087 	beq.w	8003bfc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6818      	ldr	r0, [r3, #0]
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	6959      	ldr	r1, [r3, #20]
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	891a      	ldrh	r2, [r3, #8]
 8003afa:	8b7b      	ldrh	r3, [r7, #26]
 8003afc:	f005 f989 	bl	8008e12 <USB_ReadPMA>
 8003b00:	e07c      	b.n	8003bfc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	4413      	add	r3, r2
 8003b16:	3306      	adds	r3, #6
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	6812      	ldr	r2, [r2, #0]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b2a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	699a      	ldr	r2, [r3, #24]
 8003b30:	8b7b      	ldrh	r3, [r7, #26]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d306      	bcc.n	8003b44 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	699a      	ldr	r2, [r3, #24]
 8003b3a:	8b7b      	ldrh	r3, [r7, #26]
 8003b3c:	1ad2      	subs	r2, r2, r3
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	619a      	str	r2, [r3, #24]
 8003b42:	e002      	b.n	8003b4a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2200      	movs	r2, #0
 8003b48:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d123      	bne.n	8003b9a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	461a      	mov	r2, r3
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4413      	add	r3, r2
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b6c:	83fb      	strh	r3, [r7, #30]
 8003b6e:	8bfb      	ldrh	r3, [r7, #30]
 8003b70:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003b74:	83fb      	strh	r3, [r7, #30]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	441a      	add	r2, r3
 8003b84:	8bfb      	ldrh	r3, [r7, #30]
 8003b86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003b9a:	88fb      	ldrh	r3, [r7, #6]
 8003b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d11f      	bne.n	8003be4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	881b      	ldrh	r3, [r3, #0]
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bbe:	83bb      	strh	r3, [r7, #28]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	441a      	add	r2, r3
 8003bce:	8bbb      	ldrh	r3, [r7, #28]
 8003bd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bdc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003be4:	8b7b      	ldrh	r3, [r7, #26]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d008      	beq.n	8003bfc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6818      	ldr	r0, [r3, #0]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	6959      	ldr	r1, [r3, #20]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	895a      	ldrh	r2, [r3, #10]
 8003bf6:	8b7b      	ldrh	r3, [r7, #26]
 8003bf8:	f005 f90b 	bl	8008e12 <USB_ReadPMA>
    }
  }

  return count;
 8003bfc:	8b7b      	ldrh	r3, [r7, #26]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3720      	adds	r7, #32
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b0a2      	sub	sp, #136	; 0x88
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	60f8      	str	r0, [r7, #12]
 8003c0e:	60b9      	str	r1, [r7, #8]
 8003c10:	4613      	mov	r3, r2
 8003c12:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c14:	88fb      	ldrh	r3, [r7, #6]
 8003c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 81c7 	beq.w	8003fae <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	4413      	add	r3, r2
 8003c34:	3302      	adds	r3, #2
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	6812      	ldr	r2, [r2, #0]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c48:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	699a      	ldr	r2, [r3, #24]
 8003c50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d907      	bls.n	8003c68 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	699a      	ldr	r2, [r3, #24]
 8003c5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c60:	1ad2      	subs	r2, r2, r3
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	619a      	str	r2, [r3, #24]
 8003c66:	e002      	b.n	8003c6e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f040 80b9 	bne.w	8003dea <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	785b      	ldrb	r3, [r3, #1]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d126      	bne.n	8003cce <HAL_PCD_EP_DB_Transmit+0xc8>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	461a      	mov	r2, r3
 8003c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c94:	4413      	add	r3, r2
 8003c96:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	011a      	lsls	r2, r3, #4
 8003c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	801a      	strh	r2, [r3, #0]
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	801a      	strh	r2, [r3, #0]
 8003ccc:	e01a      	b.n	8003d04 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	785b      	ldrb	r3, [r3, #1]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d116      	bne.n	8003d04 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	633b      	str	r3, [r7, #48]	; 0x30
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cea:	4413      	add	r3, r2
 8003cec:	633b      	str	r3, [r7, #48]	; 0x30
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	011a      	lsls	r2, r3, #4
 8003cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d00:	2200      	movs	r2, #0
 8003d02:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	623b      	str	r3, [r7, #32]
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	785b      	ldrb	r3, [r3, #1]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d126      	bne.n	8003d60 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	61bb      	str	r3, [r7, #24]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	461a      	mov	r2, r3
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	4413      	add	r3, r2
 8003d28:	61bb      	str	r3, [r7, #24]
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	011a      	lsls	r2, r3, #4
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	4413      	add	r3, r2
 8003d34:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d38:	617b      	str	r3, [r7, #20]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	801a      	strh	r2, [r3, #0]
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	801a      	strh	r2, [r3, #0]
 8003d5e:	e017      	b.n	8003d90 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	785b      	ldrb	r3, [r3, #1]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d113      	bne.n	8003d90 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	461a      	mov	r2, r3
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	4413      	add	r3, r2
 8003d78:	623b      	str	r3, [r7, #32]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	011a      	lsls	r2, r3, #4
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	4413      	add	r3, r2
 8003d84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d88:	61fb      	str	r3, [r7, #28]
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	4619      	mov	r1, r3
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f006 fe5f 	bl	800aa5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d9c:	88fb      	ldrh	r3, [r7, #6]
 8003d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 82d4 	beq.w	8004350 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	461a      	mov	r2, r3
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4413      	add	r3, r2
 8003db6:	881b      	ldrh	r3, [r3, #0]
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc2:	827b      	strh	r3, [r7, #18]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	461a      	mov	r2, r3
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	441a      	add	r2, r3
 8003dd2:	8a7b      	ldrh	r3, [r7, #18]
 8003dd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ddc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	8013      	strh	r3, [r2, #0]
 8003de8:	e2b2      	b.n	8004350 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003dea:	88fb      	ldrh	r3, [r7, #6]
 8003dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d021      	beq.n	8003e38 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	461a      	mov	r2, r3
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e0e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	461a      	mov	r2, r3
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	441a      	add	r2, r3
 8003e20:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003e24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	f040 8286 	bne.w	8004350 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	695a      	ldr	r2, [r3, #20]
 8003e48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e4c:	441a      	add	r2, r3
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	69da      	ldr	r2, [r3, #28]
 8003e56:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e5a:	441a      	add	r2, r3
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	6a1a      	ldr	r2, [r3, #32]
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d309      	bcc.n	8003e80 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	6a1a      	ldr	r2, [r3, #32]
 8003e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e78:	1ad2      	subs	r2, r2, r3
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	621a      	str	r2, [r3, #32]
 8003e7e:	e015      	b.n	8003eac <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d107      	bne.n	8003e98 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003e88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e8c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003e96:	e009      	b.n	8003eac <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	785b      	ldrb	r3, [r3, #1]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d155      	bne.n	8003f60 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec8:	4413      	add	r3, r2
 8003eca:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	011a      	lsls	r2, r3, #4
 8003ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003eda:	637b      	str	r3, [r7, #52]	; 0x34
 8003edc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d112      	bne.n	8003f08 <HAL_PCD_EP_DB_Transmit+0x302>
 8003ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ee4:	881b      	ldrh	r3, [r3, #0]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef0:	801a      	strh	r2, [r3, #0]
 8003ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003efc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f04:	801a      	strh	r2, [r3, #0]
 8003f06:	e047      	b.n	8003f98 <HAL_PCD_EP_DB_Transmit+0x392>
 8003f08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f0a:	2b3e      	cmp	r3, #62	; 0x3e
 8003f0c:	d811      	bhi.n	8003f32 <HAL_PCD_EP_DB_Transmit+0x32c>
 8003f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f10:	085b      	lsrs	r3, r3, #1
 8003f12:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d002      	beq.n	8003f24 <HAL_PCD_EP_DB_Transmit+0x31e>
 8003f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f20:	3301      	adds	r3, #1
 8003f22:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	029b      	lsls	r3, r3, #10
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f2e:	801a      	strh	r2, [r3, #0]
 8003f30:	e032      	b.n	8003f98 <HAL_PCD_EP_DB_Transmit+0x392>
 8003f32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f34:	095b      	lsrs	r3, r3, #5
 8003f36:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f3a:	f003 031f 	and.w	r3, r3, #31
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d102      	bne.n	8003f48 <HAL_PCD_EP_DB_Transmit+0x342>
 8003f42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f44:	3b01      	subs	r3, #1
 8003f46:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	029b      	lsls	r3, r3, #10
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f5c:	801a      	strh	r2, [r3, #0]
 8003f5e:	e01b      	b.n	8003f98 <HAL_PCD_EP_DB_Transmit+0x392>
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	785b      	ldrb	r3, [r3, #1]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d117      	bne.n	8003f98 <HAL_PCD_EP_DB_Transmit+0x392>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	643b      	str	r3, [r7, #64]	; 0x40
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	461a      	mov	r2, r3
 8003f7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f7c:	4413      	add	r3, r2
 8003f7e:	643b      	str	r3, [r7, #64]	; 0x40
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	011a      	lsls	r2, r3, #4
 8003f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f88:	4413      	add	r3, r2
 8003f8a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f96:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6818      	ldr	r0, [r3, #0]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	6959      	ldr	r1, [r3, #20]
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	891a      	ldrh	r2, [r3, #8]
 8003fa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	f004 feee 	bl	8008d88 <USB_WritePMA>
 8003fac:	e1d0      	b.n	8004350 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	461a      	mov	r2, r3
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	4413      	add	r3, r2
 8003fc2:	3306      	adds	r3, #6
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	6812      	ldr	r2, [r2, #0]
 8003fca:	4413      	add	r3, r2
 8003fcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fd6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	699a      	ldr	r2, [r3, #24]
 8003fde:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d307      	bcc.n	8003ff6 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	699a      	ldr	r2, [r3, #24]
 8003fea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003fee:	1ad2      	subs	r2, r2, r3
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	619a      	str	r2, [r3, #24]
 8003ff4:	e002      	b.n	8003ffc <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	2b00      	cmp	r3, #0
 8004002:	f040 80c4 	bne.w	800418e <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	785b      	ldrb	r3, [r3, #1]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d126      	bne.n	800405c <HAL_PCD_EP_DB_Transmit+0x456>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800401c:	b29b      	uxth	r3, r3
 800401e:	461a      	mov	r2, r3
 8004020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004022:	4413      	add	r3, r2
 8004024:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	011a      	lsls	r2, r3, #4
 800402c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800402e:	4413      	add	r3, r2
 8004030:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004034:	66bb      	str	r3, [r7, #104]	; 0x68
 8004036:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004038:	881b      	ldrh	r3, [r3, #0]
 800403a:	b29b      	uxth	r3, r3
 800403c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004040:	b29a      	uxth	r2, r3
 8004042:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004044:	801a      	strh	r2, [r3, #0]
 8004046:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	b29b      	uxth	r3, r3
 800404c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004050:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004054:	b29a      	uxth	r2, r3
 8004056:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004058:	801a      	strh	r2, [r3, #0]
 800405a:	e01a      	b.n	8004092 <HAL_PCD_EP_DB_Transmit+0x48c>
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	785b      	ldrb	r3, [r3, #1]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d116      	bne.n	8004092 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	677b      	str	r3, [r7, #116]	; 0x74
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004072:	b29b      	uxth	r3, r3
 8004074:	461a      	mov	r2, r3
 8004076:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004078:	4413      	add	r3, r2
 800407a:	677b      	str	r3, [r7, #116]	; 0x74
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	011a      	lsls	r2, r3, #4
 8004082:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004084:	4413      	add	r3, r2
 8004086:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800408a:	673b      	str	r3, [r7, #112]	; 0x70
 800408c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800408e:	2200      	movs	r2, #0
 8004090:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	67bb      	str	r3, [r7, #120]	; 0x78
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	785b      	ldrb	r3, [r3, #1]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d12f      	bne.n	8004100 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	461a      	mov	r2, r3
 80040b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040b8:	4413      	add	r3, r2
 80040ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	011a      	lsls	r2, r3, #4
 80040c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040c8:	4413      	add	r3, r2
 80040ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80040ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040d6:	881b      	ldrh	r3, [r3, #0]
 80040d8:	b29b      	uxth	r3, r3
 80040da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040de:	b29a      	uxth	r2, r3
 80040e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040e4:	801a      	strh	r2, [r3, #0]
 80040e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040ea:	881b      	ldrh	r3, [r3, #0]
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040fc:	801a      	strh	r2, [r3, #0]
 80040fe:	e017      	b.n	8004130 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	785b      	ldrb	r3, [r3, #1]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d113      	bne.n	8004130 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004110:	b29b      	uxth	r3, r3
 8004112:	461a      	mov	r2, r3
 8004114:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004116:	4413      	add	r3, r2
 8004118:	67bb      	str	r3, [r7, #120]	; 0x78
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	011a      	lsls	r2, r3, #4
 8004120:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004122:	4413      	add	r3, r2
 8004124:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004128:	67fb      	str	r3, [r7, #124]	; 0x7c
 800412a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800412c:	2200      	movs	r2, #0
 800412e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	4619      	mov	r1, r3
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f006 fc8f 	bl	800aa5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800413c:	88fb      	ldrh	r3, [r7, #6]
 800413e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004142:	2b00      	cmp	r3, #0
 8004144:	f040 8104 	bne.w	8004350 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	461a      	mov	r2, r3
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4413      	add	r3, r2
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	b29b      	uxth	r3, r3
 800415a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800415e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004162:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	461a      	mov	r2, r3
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	441a      	add	r2, r3
 8004174:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004178:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800417c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004180:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004188:	b29b      	uxth	r3, r3
 800418a:	8013      	strh	r3, [r2, #0]
 800418c:	e0e0      	b.n	8004350 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800418e:	88fb      	ldrh	r3, [r7, #6]
 8004190:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d121      	bne.n	80041dc <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	461a      	mov	r2, r3
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	881b      	ldrh	r3, [r3, #0]
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	461a      	mov	r2, r3
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	441a      	add	r2, r3
 80041c4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80041c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041d8:	b29b      	uxth	r3, r3
 80041da:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	f040 80b4 	bne.w	8004350 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	695a      	ldr	r2, [r3, #20]
 80041ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80041f0:	441a      	add	r2, r3
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	69da      	ldr	r2, [r3, #28]
 80041fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80041fe:	441a      	add	r2, r3
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	6a1a      	ldr	r2, [r3, #32]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	429a      	cmp	r2, r3
 800420e:	d309      	bcc.n	8004224 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	6a1a      	ldr	r2, [r3, #32]
 800421a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800421c:	1ad2      	subs	r2, r2, r3
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	621a      	str	r2, [r3, #32]
 8004222:	e015      	b.n	8004250 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d107      	bne.n	800423c <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800422c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004230:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800423a:	e009      	b.n	8004250 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	2200      	movs	r2, #0
 8004246:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	667b      	str	r3, [r7, #100]	; 0x64
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	785b      	ldrb	r3, [r3, #1]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d155      	bne.n	800430a <HAL_PCD_EP_DB_Transmit+0x704>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800426c:	b29b      	uxth	r3, r3
 800426e:	461a      	mov	r2, r3
 8004270:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004272:	4413      	add	r3, r2
 8004274:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	011a      	lsls	r2, r3, #4
 800427c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800427e:	4413      	add	r3, r2
 8004280:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004284:	65bb      	str	r3, [r7, #88]	; 0x58
 8004286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004288:	2b00      	cmp	r3, #0
 800428a:	d112      	bne.n	80042b2 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800428c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800428e:	881b      	ldrh	r3, [r3, #0]
 8004290:	b29b      	uxth	r3, r3
 8004292:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004296:	b29a      	uxth	r2, r3
 8004298:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800429a:	801a      	strh	r2, [r3, #0]
 800429c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800429e:	881b      	ldrh	r3, [r3, #0]
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042ae:	801a      	strh	r2, [r3, #0]
 80042b0:	e044      	b.n	800433c <HAL_PCD_EP_DB_Transmit+0x736>
 80042b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042b4:	2b3e      	cmp	r3, #62	; 0x3e
 80042b6:	d811      	bhi.n	80042dc <HAL_PCD_EP_DB_Transmit+0x6d6>
 80042b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042ba:	085b      	lsrs	r3, r3, #1
 80042bc:	657b      	str	r3, [r7, #84]	; 0x54
 80042be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <HAL_PCD_EP_DB_Transmit+0x6c8>
 80042c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ca:	3301      	adds	r3, #1
 80042cc:	657b      	str	r3, [r7, #84]	; 0x54
 80042ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	029b      	lsls	r3, r3, #10
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042d8:	801a      	strh	r2, [r3, #0]
 80042da:	e02f      	b.n	800433c <HAL_PCD_EP_DB_Transmit+0x736>
 80042dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042de:	095b      	lsrs	r3, r3, #5
 80042e0:	657b      	str	r3, [r7, #84]	; 0x54
 80042e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042e4:	f003 031f 	and.w	r3, r3, #31
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d102      	bne.n	80042f2 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80042ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ee:	3b01      	subs	r3, #1
 80042f0:	657b      	str	r3, [r7, #84]	; 0x54
 80042f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	029b      	lsls	r3, r3, #10
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004302:	b29a      	uxth	r2, r3
 8004304:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004306:	801a      	strh	r2, [r3, #0]
 8004308:	e018      	b.n	800433c <HAL_PCD_EP_DB_Transmit+0x736>
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	785b      	ldrb	r3, [r3, #1]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d114      	bne.n	800433c <HAL_PCD_EP_DB_Transmit+0x736>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800431a:	b29b      	uxth	r3, r3
 800431c:	461a      	mov	r2, r3
 800431e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004320:	4413      	add	r3, r2
 8004322:	667b      	str	r3, [r7, #100]	; 0x64
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	011a      	lsls	r2, r3, #4
 800432a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800432c:	4413      	add	r3, r2
 800432e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004332:	663b      	str	r3, [r7, #96]	; 0x60
 8004334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004336:	b29a      	uxth	r2, r3
 8004338:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800433a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6818      	ldr	r0, [r3, #0]
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	6959      	ldr	r1, [r3, #20]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	895a      	ldrh	r2, [r3, #10]
 8004348:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800434a:	b29b      	uxth	r3, r3
 800434c:	f004 fd1c 	bl	8008d88 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	461a      	mov	r2, r3
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	881b      	ldrh	r3, [r3, #0]
 8004360:	b29b      	uxth	r3, r3
 8004362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004366:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800436a:	823b      	strh	r3, [r7, #16]
 800436c:	8a3b      	ldrh	r3, [r7, #16]
 800436e:	f083 0310 	eor.w	r3, r3, #16
 8004372:	823b      	strh	r3, [r7, #16]
 8004374:	8a3b      	ldrh	r3, [r7, #16]
 8004376:	f083 0320 	eor.w	r3, r3, #32
 800437a:	823b      	strh	r3, [r7, #16]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	461a      	mov	r2, r3
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	441a      	add	r2, r3
 800438a:	8a3b      	ldrh	r3, [r7, #16]
 800438c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004394:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800439c:	b29b      	uxth	r3, r3
 800439e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3788      	adds	r7, #136	; 0x88
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b087      	sub	sp, #28
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	60f8      	str	r0, [r7, #12]
 80043b2:	607b      	str	r3, [r7, #4]
 80043b4:	460b      	mov	r3, r1
 80043b6:	817b      	strh	r3, [r7, #10]
 80043b8:	4613      	mov	r3, r2
 80043ba:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80043bc:	897b      	ldrh	r3, [r7, #10]
 80043be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00b      	beq.n	80043e0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043c8:	897b      	ldrh	r3, [r7, #10]
 80043ca:	f003 0307 	and.w	r3, r3, #7
 80043ce:	1c5a      	adds	r2, r3, #1
 80043d0:	4613      	mov	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	00db      	lsls	r3, r3, #3
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	4413      	add	r3, r2
 80043dc:	617b      	str	r3, [r7, #20]
 80043de:	e009      	b.n	80043f4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043e0:	897a      	ldrh	r2, [r7, #10]
 80043e2:	4613      	mov	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	4413      	add	r3, r2
 80043f2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80043f4:	893b      	ldrh	r3, [r7, #8]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d107      	bne.n	800440a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	2200      	movs	r2, #0
 80043fe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	b29a      	uxth	r2, r3
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	80da      	strh	r2, [r3, #6]
 8004408:	e00b      	b.n	8004422 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2201      	movs	r2, #1
 800440e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	b29a      	uxth	r2, r3
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	0c1b      	lsrs	r3, r3, #16
 800441c:	b29a      	uxth	r2, r3
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	371c      	adds	r7, #28
 8004428:	46bd      	mov	sp, r7
 800442a:	bc80      	pop	{r7}
 800442c:	4770      	bx	lr
	...

08004430 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e272      	b.n	8004928 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 8087 	beq.w	800455e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004450:	4b92      	ldr	r3, [pc, #584]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f003 030c 	and.w	r3, r3, #12
 8004458:	2b04      	cmp	r3, #4
 800445a:	d00c      	beq.n	8004476 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800445c:	4b8f      	ldr	r3, [pc, #572]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f003 030c 	and.w	r3, r3, #12
 8004464:	2b08      	cmp	r3, #8
 8004466:	d112      	bne.n	800448e <HAL_RCC_OscConfig+0x5e>
 8004468:	4b8c      	ldr	r3, [pc, #560]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004474:	d10b      	bne.n	800448e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004476:	4b89      	ldr	r3, [pc, #548]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d06c      	beq.n	800455c <HAL_RCC_OscConfig+0x12c>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d168      	bne.n	800455c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e24c      	b.n	8004928 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004496:	d106      	bne.n	80044a6 <HAL_RCC_OscConfig+0x76>
 8004498:	4b80      	ldr	r3, [pc, #512]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a7f      	ldr	r2, [pc, #508]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 800449e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a2:	6013      	str	r3, [r2, #0]
 80044a4:	e02e      	b.n	8004504 <HAL_RCC_OscConfig+0xd4>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10c      	bne.n	80044c8 <HAL_RCC_OscConfig+0x98>
 80044ae:	4b7b      	ldr	r3, [pc, #492]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a7a      	ldr	r2, [pc, #488]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 80044b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044b8:	6013      	str	r3, [r2, #0]
 80044ba:	4b78      	ldr	r3, [pc, #480]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a77      	ldr	r2, [pc, #476]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 80044c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044c4:	6013      	str	r3, [r2, #0]
 80044c6:	e01d      	b.n	8004504 <HAL_RCC_OscConfig+0xd4>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044d0:	d10c      	bne.n	80044ec <HAL_RCC_OscConfig+0xbc>
 80044d2:	4b72      	ldr	r3, [pc, #456]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a71      	ldr	r2, [pc, #452]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 80044d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044dc:	6013      	str	r3, [r2, #0]
 80044de:	4b6f      	ldr	r3, [pc, #444]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a6e      	ldr	r2, [pc, #440]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 80044e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044e8:	6013      	str	r3, [r2, #0]
 80044ea:	e00b      	b.n	8004504 <HAL_RCC_OscConfig+0xd4>
 80044ec:	4b6b      	ldr	r3, [pc, #428]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a6a      	ldr	r2, [pc, #424]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 80044f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044f6:	6013      	str	r3, [r2, #0]
 80044f8:	4b68      	ldr	r3, [pc, #416]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a67      	ldr	r2, [pc, #412]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 80044fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004502:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d013      	beq.n	8004534 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450c:	f7fd fce6 	bl	8001edc <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004514:	f7fd fce2 	bl	8001edc <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b64      	cmp	r3, #100	; 0x64
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e200      	b.n	8004928 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004526:	4b5d      	ldr	r3, [pc, #372]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d0f0      	beq.n	8004514 <HAL_RCC_OscConfig+0xe4>
 8004532:	e014      	b.n	800455e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004534:	f7fd fcd2 	bl	8001edc <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800453c:	f7fd fcce 	bl	8001edc <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b64      	cmp	r3, #100	; 0x64
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e1ec      	b.n	8004928 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800454e:	4b53      	ldr	r3, [pc, #332]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1f0      	bne.n	800453c <HAL_RCC_OscConfig+0x10c>
 800455a:	e000      	b.n	800455e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800455c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d063      	beq.n	8004632 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800456a:	4b4c      	ldr	r3, [pc, #304]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f003 030c 	and.w	r3, r3, #12
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00b      	beq.n	800458e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004576:	4b49      	ldr	r3, [pc, #292]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f003 030c 	and.w	r3, r3, #12
 800457e:	2b08      	cmp	r3, #8
 8004580:	d11c      	bne.n	80045bc <HAL_RCC_OscConfig+0x18c>
 8004582:	4b46      	ldr	r3, [pc, #280]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d116      	bne.n	80045bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800458e:	4b43      	ldr	r3, [pc, #268]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d005      	beq.n	80045a6 <HAL_RCC_OscConfig+0x176>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d001      	beq.n	80045a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e1c0      	b.n	8004928 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a6:	4b3d      	ldr	r3, [pc, #244]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	4939      	ldr	r1, [pc, #228]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ba:	e03a      	b.n	8004632 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d020      	beq.n	8004606 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045c4:	4b36      	ldr	r3, [pc, #216]	; (80046a0 <HAL_RCC_OscConfig+0x270>)
 80045c6:	2201      	movs	r2, #1
 80045c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ca:	f7fd fc87 	bl	8001edc <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045d0:	e008      	b.n	80045e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045d2:	f7fd fc83 	bl	8001edc <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d901      	bls.n	80045e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e1a1      	b.n	8004928 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045e4:	4b2d      	ldr	r3, [pc, #180]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d0f0      	beq.n	80045d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f0:	4b2a      	ldr	r3, [pc, #168]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	4927      	ldr	r1, [pc, #156]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 8004600:	4313      	orrs	r3, r2
 8004602:	600b      	str	r3, [r1, #0]
 8004604:	e015      	b.n	8004632 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004606:	4b26      	ldr	r3, [pc, #152]	; (80046a0 <HAL_RCC_OscConfig+0x270>)
 8004608:	2200      	movs	r2, #0
 800460a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460c:	f7fd fc66 	bl	8001edc <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004614:	f7fd fc62 	bl	8001edc <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e180      	b.n	8004928 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004626:	4b1d      	ldr	r3, [pc, #116]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1f0      	bne.n	8004614 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0308 	and.w	r3, r3, #8
 800463a:	2b00      	cmp	r3, #0
 800463c:	d03a      	beq.n	80046b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d019      	beq.n	800467a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004646:	4b17      	ldr	r3, [pc, #92]	; (80046a4 <HAL_RCC_OscConfig+0x274>)
 8004648:	2201      	movs	r2, #1
 800464a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800464c:	f7fd fc46 	bl	8001edc <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004654:	f7fd fc42 	bl	8001edc <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e160      	b.n	8004928 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004666:	4b0d      	ldr	r3, [pc, #52]	; (800469c <HAL_RCC_OscConfig+0x26c>)
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d0f0      	beq.n	8004654 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004672:	2001      	movs	r0, #1
 8004674:	f000 fad8 	bl	8004c28 <RCC_Delay>
 8004678:	e01c      	b.n	80046b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800467a:	4b0a      	ldr	r3, [pc, #40]	; (80046a4 <HAL_RCC_OscConfig+0x274>)
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004680:	f7fd fc2c 	bl	8001edc <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004686:	e00f      	b.n	80046a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004688:	f7fd fc28 	bl	8001edc <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d908      	bls.n	80046a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e146      	b.n	8004928 <HAL_RCC_OscConfig+0x4f8>
 800469a:	bf00      	nop
 800469c:	40021000 	.word	0x40021000
 80046a0:	42420000 	.word	0x42420000
 80046a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046a8:	4b92      	ldr	r3, [pc, #584]	; (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1e9      	bne.n	8004688 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 80a6 	beq.w	800480e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046c2:	2300      	movs	r3, #0
 80046c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046c6:	4b8b      	ldr	r3, [pc, #556]	; (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10d      	bne.n	80046ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046d2:	4b88      	ldr	r3, [pc, #544]	; (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	4a87      	ldr	r2, [pc, #540]	; (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 80046d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046dc:	61d3      	str	r3, [r2, #28]
 80046de:	4b85      	ldr	r3, [pc, #532]	; (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e6:	60bb      	str	r3, [r7, #8]
 80046e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ea:	2301      	movs	r3, #1
 80046ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ee:	4b82      	ldr	r3, [pc, #520]	; (80048f8 <HAL_RCC_OscConfig+0x4c8>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d118      	bne.n	800472c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046fa:	4b7f      	ldr	r3, [pc, #508]	; (80048f8 <HAL_RCC_OscConfig+0x4c8>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a7e      	ldr	r2, [pc, #504]	; (80048f8 <HAL_RCC_OscConfig+0x4c8>)
 8004700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004704:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004706:	f7fd fbe9 	bl	8001edc <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800470c:	e008      	b.n	8004720 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800470e:	f7fd fbe5 	bl	8001edc <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b64      	cmp	r3, #100	; 0x64
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e103      	b.n	8004928 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004720:	4b75      	ldr	r3, [pc, #468]	; (80048f8 <HAL_RCC_OscConfig+0x4c8>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0f0      	beq.n	800470e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d106      	bne.n	8004742 <HAL_RCC_OscConfig+0x312>
 8004734:	4b6f      	ldr	r3, [pc, #444]	; (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	4a6e      	ldr	r2, [pc, #440]	; (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 800473a:	f043 0301 	orr.w	r3, r3, #1
 800473e:	6213      	str	r3, [r2, #32]
 8004740:	e02d      	b.n	800479e <HAL_RCC_OscConfig+0x36e>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10c      	bne.n	8004764 <HAL_RCC_OscConfig+0x334>
 800474a:	4b6a      	ldr	r3, [pc, #424]	; (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	4a69      	ldr	r2, [pc, #420]	; (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 8004750:	f023 0301 	bic.w	r3, r3, #1
 8004754:	6213      	str	r3, [r2, #32]
 8004756:	4b67      	ldr	r3, [pc, #412]	; (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	4a66      	ldr	r2, [pc, #408]	; (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 800475c:	f023 0304 	bic.w	r3, r3, #4
 8004760:	6213      	str	r3, [r2, #32]
 8004762:	e01c      	b.n	800479e <HAL_RCC_OscConfig+0x36e>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	2b05      	cmp	r3, #5
 800476a:	d10c      	bne.n	8004786 <HAL_RCC_OscConfig+0x356>
 800476c:	4b61      	ldr	r3, [pc, #388]	; (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	4a60      	ldr	r2, [pc, #384]	; (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 8004772:	f043 0304 	orr.w	r3, r3, #4
 8004776:	6213      	str	r3, [r2, #32]
 8004778:	4b5e      	ldr	r3, [pc, #376]	; (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	4a5d      	ldr	r2, [pc, #372]	; (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 800477e:	f043 0301 	orr.w	r3, r3, #1
 8004782:	6213      	str	r3, [r2, #32]
 8004784:	e00b      	b.n	800479e <HAL_RCC_OscConfig+0x36e>
 8004786:	4b5b      	ldr	r3, [pc, #364]	; (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	4a5a      	ldr	r2, [pc, #360]	; (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 800478c:	f023 0301 	bic.w	r3, r3, #1
 8004790:	6213      	str	r3, [r2, #32]
 8004792:	4b58      	ldr	r3, [pc, #352]	; (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	4a57      	ldr	r2, [pc, #348]	; (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 8004798:	f023 0304 	bic.w	r3, r3, #4
 800479c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d015      	beq.n	80047d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047a6:	f7fd fb99 	bl	8001edc <HAL_GetTick>
 80047aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ac:	e00a      	b.n	80047c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ae:	f7fd fb95 	bl	8001edc <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047bc:	4293      	cmp	r3, r2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e0b1      	b.n	8004928 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c4:	4b4b      	ldr	r3, [pc, #300]	; (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0ee      	beq.n	80047ae <HAL_RCC_OscConfig+0x37e>
 80047d0:	e014      	b.n	80047fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047d2:	f7fd fb83 	bl	8001edc <HAL_GetTick>
 80047d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047d8:	e00a      	b.n	80047f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047da:	f7fd fb7f 	bl	8001edc <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e09b      	b.n	8004928 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047f0:	4b40      	ldr	r3, [pc, #256]	; (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1ee      	bne.n	80047da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047fc:	7dfb      	ldrb	r3, [r7, #23]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d105      	bne.n	800480e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004802:	4b3c      	ldr	r3, [pc, #240]	; (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	4a3b      	ldr	r2, [pc, #236]	; (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 8004808:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800480c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	2b00      	cmp	r3, #0
 8004814:	f000 8087 	beq.w	8004926 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004818:	4b36      	ldr	r3, [pc, #216]	; (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f003 030c 	and.w	r3, r3, #12
 8004820:	2b08      	cmp	r3, #8
 8004822:	d061      	beq.n	80048e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	69db      	ldr	r3, [r3, #28]
 8004828:	2b02      	cmp	r3, #2
 800482a:	d146      	bne.n	80048ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800482c:	4b33      	ldr	r3, [pc, #204]	; (80048fc <HAL_RCC_OscConfig+0x4cc>)
 800482e:	2200      	movs	r2, #0
 8004830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004832:	f7fd fb53 	bl	8001edc <HAL_GetTick>
 8004836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004838:	e008      	b.n	800484c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800483a:	f7fd fb4f 	bl	8001edc <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d901      	bls.n	800484c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e06d      	b.n	8004928 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800484c:	4b29      	ldr	r3, [pc, #164]	; (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1f0      	bne.n	800483a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a1b      	ldr	r3, [r3, #32]
 800485c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004860:	d108      	bne.n	8004874 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004862:	4b24      	ldr	r3, [pc, #144]	; (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	4921      	ldr	r1, [pc, #132]	; (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 8004870:	4313      	orrs	r3, r2
 8004872:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004874:	4b1f      	ldr	r3, [pc, #124]	; (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a19      	ldr	r1, [r3, #32]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	430b      	orrs	r3, r1
 8004886:	491b      	ldr	r1, [pc, #108]	; (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 8004888:	4313      	orrs	r3, r2
 800488a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800488c:	4b1b      	ldr	r3, [pc, #108]	; (80048fc <HAL_RCC_OscConfig+0x4cc>)
 800488e:	2201      	movs	r2, #1
 8004890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004892:	f7fd fb23 	bl	8001edc <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004898:	e008      	b.n	80048ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800489a:	f7fd fb1f 	bl	8001edc <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e03d      	b.n	8004928 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048ac:	4b11      	ldr	r3, [pc, #68]	; (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0f0      	beq.n	800489a <HAL_RCC_OscConfig+0x46a>
 80048b8:	e035      	b.n	8004926 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ba:	4b10      	ldr	r3, [pc, #64]	; (80048fc <HAL_RCC_OscConfig+0x4cc>)
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c0:	f7fd fb0c 	bl	8001edc <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048c8:	f7fd fb08 	bl	8001edc <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e026      	b.n	8004928 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048da:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <HAL_RCC_OscConfig+0x4c4>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1f0      	bne.n	80048c8 <HAL_RCC_OscConfig+0x498>
 80048e6:	e01e      	b.n	8004926 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	69db      	ldr	r3, [r3, #28]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d107      	bne.n	8004900 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e019      	b.n	8004928 <HAL_RCC_OscConfig+0x4f8>
 80048f4:	40021000 	.word	0x40021000
 80048f8:	40007000 	.word	0x40007000
 80048fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004900:	4b0b      	ldr	r3, [pc, #44]	; (8004930 <HAL_RCC_OscConfig+0x500>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	429a      	cmp	r2, r3
 8004912:	d106      	bne.n	8004922 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800491e:	429a      	cmp	r2, r3
 8004920:	d001      	beq.n	8004926 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40021000 	.word	0x40021000

08004934 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e0d0      	b.n	8004aea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004948:	4b6a      	ldr	r3, [pc, #424]	; (8004af4 <HAL_RCC_ClockConfig+0x1c0>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d910      	bls.n	8004978 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004956:	4b67      	ldr	r3, [pc, #412]	; (8004af4 <HAL_RCC_ClockConfig+0x1c0>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f023 0207 	bic.w	r2, r3, #7
 800495e:	4965      	ldr	r1, [pc, #404]	; (8004af4 <HAL_RCC_ClockConfig+0x1c0>)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	4313      	orrs	r3, r2
 8004964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004966:	4b63      	ldr	r3, [pc, #396]	; (8004af4 <HAL_RCC_ClockConfig+0x1c0>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0307 	and.w	r3, r3, #7
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	429a      	cmp	r2, r3
 8004972:	d001      	beq.n	8004978 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e0b8      	b.n	8004aea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d020      	beq.n	80049c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b00      	cmp	r3, #0
 800498e:	d005      	beq.n	800499c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004990:	4b59      	ldr	r3, [pc, #356]	; (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	4a58      	ldr	r2, [pc, #352]	; (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 8004996:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800499a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0308 	and.w	r3, r3, #8
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d005      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049a8:	4b53      	ldr	r3, [pc, #332]	; (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	4a52      	ldr	r2, [pc, #328]	; (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 80049ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80049b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049b4:	4b50      	ldr	r3, [pc, #320]	; (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	494d      	ldr	r1, [pc, #308]	; (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d040      	beq.n	8004a54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d107      	bne.n	80049ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049da:	4b47      	ldr	r3, [pc, #284]	; (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d115      	bne.n	8004a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e07f      	b.n	8004aea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d107      	bne.n	8004a02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049f2:	4b41      	ldr	r3, [pc, #260]	; (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d109      	bne.n	8004a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e073      	b.n	8004aea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a02:	4b3d      	ldr	r3, [pc, #244]	; (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e06b      	b.n	8004aea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a12:	4b39      	ldr	r3, [pc, #228]	; (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f023 0203 	bic.w	r2, r3, #3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	4936      	ldr	r1, [pc, #216]	; (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a24:	f7fd fa5a 	bl	8001edc <HAL_GetTick>
 8004a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a2a:	e00a      	b.n	8004a42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a2c:	f7fd fa56 	bl	8001edc <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e053      	b.n	8004aea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a42:	4b2d      	ldr	r3, [pc, #180]	; (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f003 020c 	and.w	r2, r3, #12
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d1eb      	bne.n	8004a2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a54:	4b27      	ldr	r3, [pc, #156]	; (8004af4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0307 	and.w	r3, r3, #7
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d210      	bcs.n	8004a84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a62:	4b24      	ldr	r3, [pc, #144]	; (8004af4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f023 0207 	bic.w	r2, r3, #7
 8004a6a:	4922      	ldr	r1, [pc, #136]	; (8004af4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a72:	4b20      	ldr	r3, [pc, #128]	; (8004af4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0307 	and.w	r3, r3, #7
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d001      	beq.n	8004a84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e032      	b.n	8004aea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d008      	beq.n	8004aa2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a90:	4b19      	ldr	r3, [pc, #100]	; (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	4916      	ldr	r1, [pc, #88]	; (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0308 	and.w	r3, r3, #8
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d009      	beq.n	8004ac2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004aae:	4b12      	ldr	r3, [pc, #72]	; (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	490e      	ldr	r1, [pc, #56]	; (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ac2:	f000 f821 	bl	8004b08 <HAL_RCC_GetSysClockFreq>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	4b0b      	ldr	r3, [pc, #44]	; (8004af8 <HAL_RCC_ClockConfig+0x1c4>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	091b      	lsrs	r3, r3, #4
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	490a      	ldr	r1, [pc, #40]	; (8004afc <HAL_RCC_ClockConfig+0x1c8>)
 8004ad4:	5ccb      	ldrb	r3, [r1, r3]
 8004ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8004ada:	4a09      	ldr	r2, [pc, #36]	; (8004b00 <HAL_RCC_ClockConfig+0x1cc>)
 8004adc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004ade:	4b09      	ldr	r3, [pc, #36]	; (8004b04 <HAL_RCC_ClockConfig+0x1d0>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fd f9b8 	bl	8001e58 <HAL_InitTick>

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	40022000 	.word	0x40022000
 8004af8:	40021000 	.word	0x40021000
 8004afc:	0800afec 	.word	0x0800afec
 8004b00:	20000004 	.word	0x20000004
 8004b04:	20000008 	.word	0x20000008

08004b08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b08:	b490      	push	{r4, r7}
 8004b0a:	b08a      	sub	sp, #40	; 0x28
 8004b0c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004b0e:	4b29      	ldr	r3, [pc, #164]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0xac>)
 8004b10:	1d3c      	adds	r4, r7, #4
 8004b12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004b18:	f240 2301 	movw	r3, #513	; 0x201
 8004b1c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61fb      	str	r3, [r7, #28]
 8004b22:	2300      	movs	r3, #0
 8004b24:	61bb      	str	r3, [r7, #24]
 8004b26:	2300      	movs	r3, #0
 8004b28:	627b      	str	r3, [r7, #36]	; 0x24
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b32:	4b21      	ldr	r3, [pc, #132]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	f003 030c 	and.w	r3, r3, #12
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d002      	beq.n	8004b48 <HAL_RCC_GetSysClockFreq+0x40>
 8004b42:	2b08      	cmp	r3, #8
 8004b44:	d003      	beq.n	8004b4e <HAL_RCC_GetSysClockFreq+0x46>
 8004b46:	e02b      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b48:	4b1c      	ldr	r3, [pc, #112]	; (8004bbc <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b4a:	623b      	str	r3, [r7, #32]
      break;
 8004b4c:	e02b      	b.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	0c9b      	lsrs	r3, r3, #18
 8004b52:	f003 030f 	and.w	r3, r3, #15
 8004b56:	3328      	adds	r3, #40	; 0x28
 8004b58:	443b      	add	r3, r7
 8004b5a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004b5e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d012      	beq.n	8004b90 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b6a:	4b13      	ldr	r3, [pc, #76]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	0c5b      	lsrs	r3, r3, #17
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	3328      	adds	r3, #40	; 0x28
 8004b76:	443b      	add	r3, r7
 8004b78:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004b7c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	4a0e      	ldr	r2, [pc, #56]	; (8004bbc <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b82:	fb03 f202 	mul.w	r2, r3, r2
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b8e:	e004      	b.n	8004b9a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	4a0b      	ldr	r2, [pc, #44]	; (8004bc0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b94:	fb02 f303 	mul.w	r3, r2, r3
 8004b98:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	623b      	str	r3, [r7, #32]
      break;
 8004b9e:	e002      	b.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ba0:	4b06      	ldr	r3, [pc, #24]	; (8004bbc <HAL_RCC_GetSysClockFreq+0xb4>)
 8004ba2:	623b      	str	r3, [r7, #32]
      break;
 8004ba4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3728      	adds	r7, #40	; 0x28
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bc90      	pop	{r4, r7}
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	0800af94 	.word	0x0800af94
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	007a1200 	.word	0x007a1200
 8004bc0:	003d0900 	.word	0x003d0900

08004bc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bc8:	4b02      	ldr	r3, [pc, #8]	; (8004bd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004bca:	681b      	ldr	r3, [r3, #0]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bc80      	pop	{r7}
 8004bd2:	4770      	bx	lr
 8004bd4:	20000004 	.word	0x20000004

08004bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bdc:	f7ff fff2 	bl	8004bc4 <HAL_RCC_GetHCLKFreq>
 8004be0:	4602      	mov	r2, r0
 8004be2:	4b05      	ldr	r3, [pc, #20]	; (8004bf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	0a1b      	lsrs	r3, r3, #8
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	4903      	ldr	r1, [pc, #12]	; (8004bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bee:	5ccb      	ldrb	r3, [r1, r3]
 8004bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	0800affc 	.word	0x0800affc

08004c00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c04:	f7ff ffde 	bl	8004bc4 <HAL_RCC_GetHCLKFreq>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	4b05      	ldr	r3, [pc, #20]	; (8004c20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	0adb      	lsrs	r3, r3, #11
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	4903      	ldr	r1, [pc, #12]	; (8004c24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c16:	5ccb      	ldrb	r3, [r1, r3]
 8004c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	40021000 	.word	0x40021000
 8004c24:	0800affc 	.word	0x0800affc

08004c28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c30:	4b0a      	ldr	r3, [pc, #40]	; (8004c5c <RCC_Delay+0x34>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a0a      	ldr	r2, [pc, #40]	; (8004c60 <RCC_Delay+0x38>)
 8004c36:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3a:	0a5b      	lsrs	r3, r3, #9
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	fb02 f303 	mul.w	r3, r2, r3
 8004c42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c44:	bf00      	nop
  }
  while (Delay --);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	1e5a      	subs	r2, r3, #1
 8004c4a:	60fa      	str	r2, [r7, #12]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1f9      	bne.n	8004c44 <RCC_Delay+0x1c>
}
 8004c50:	bf00      	nop
 8004c52:	bf00      	nop
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bc80      	pop	{r7}
 8004c5a:	4770      	bx	lr
 8004c5c:	20000004 	.word	0x20000004
 8004c60:	10624dd3 	.word	0x10624dd3

08004c64 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	613b      	str	r3, [r7, #16]
 8004c70:	2300      	movs	r3, #0
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d07d      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004c80:	2300      	movs	r3, #0
 8004c82:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c84:	4b4f      	ldr	r3, [pc, #316]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c86:	69db      	ldr	r3, [r3, #28]
 8004c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10d      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c90:	4b4c      	ldr	r3, [pc, #304]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c92:	69db      	ldr	r3, [r3, #28]
 8004c94:	4a4b      	ldr	r2, [pc, #300]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c9a:	61d3      	str	r3, [r2, #28]
 8004c9c:	4b49      	ldr	r3, [pc, #292]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c9e:	69db      	ldr	r3, [r3, #28]
 8004ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca4:	60bb      	str	r3, [r7, #8]
 8004ca6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cac:	4b46      	ldr	r3, [pc, #280]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d118      	bne.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cb8:	4b43      	ldr	r3, [pc, #268]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a42      	ldr	r2, [pc, #264]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cc4:	f7fd f90a 	bl	8001edc <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cca:	e008      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ccc:	f7fd f906 	bl	8001edc <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b64      	cmp	r3, #100	; 0x64
 8004cd8:	d901      	bls.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e06d      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cde:	4b3a      	ldr	r3, [pc, #232]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0f0      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cea:	4b36      	ldr	r3, [pc, #216]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cf2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d02e      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d027      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d08:	4b2e      	ldr	r3, [pc, #184]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d10:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d12:	4b2e      	ldr	r3, [pc, #184]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d14:	2201      	movs	r2, #1
 8004d16:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d18:	4b2c      	ldr	r3, [pc, #176]	; (8004dcc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d1e:	4a29      	ldr	r2, [pc, #164]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d014      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d2e:	f7fd f8d5 	bl	8001edc <HAL_GetTick>
 8004d32:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d34:	e00a      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d36:	f7fd f8d1 	bl	8001edc <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d901      	bls.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e036      	b.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d4c:	4b1d      	ldr	r3, [pc, #116]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0ee      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d58:	4b1a      	ldr	r3, [pc, #104]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	4917      	ldr	r1, [pc, #92]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d6a:	7dfb      	ldrb	r3, [r7, #23]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d105      	bne.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d70:	4b14      	ldr	r3, [pc, #80]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d72:	69db      	ldr	r3, [r3, #28]
 8004d74:	4a13      	ldr	r2, [pc, #76]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d7a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d008      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d88:	4b0e      	ldr	r3, [pc, #56]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	490b      	ldr	r1, [pc, #44]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0310 	and.w	r3, r3, #16
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d008      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004da6:	4b07      	ldr	r3, [pc, #28]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	4904      	ldr	r1, [pc, #16]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	40007000 	.word	0x40007000
 8004dcc:	42420440 	.word	0x42420440

08004dd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e041      	b.n	8004e66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d106      	bne.n	8004dfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7fc ff1c 	bl	8001c34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4610      	mov	r0, r2
 8004e10:	f000 fc9a 	bl	8005748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
	...

08004e70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d001      	beq.n	8004e88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e03a      	b.n	8004efe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f042 0201 	orr.w	r2, r2, #1
 8004e9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a18      	ldr	r2, [pc, #96]	; (8004f08 <HAL_TIM_Base_Start_IT+0x98>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d00e      	beq.n	8004ec8 <HAL_TIM_Base_Start_IT+0x58>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb2:	d009      	beq.n	8004ec8 <HAL_TIM_Base_Start_IT+0x58>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a14      	ldr	r2, [pc, #80]	; (8004f0c <HAL_TIM_Base_Start_IT+0x9c>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d004      	beq.n	8004ec8 <HAL_TIM_Base_Start_IT+0x58>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a13      	ldr	r2, [pc, #76]	; (8004f10 <HAL_TIM_Base_Start_IT+0xa0>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d111      	bne.n	8004eec <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f003 0307 	and.w	r3, r3, #7
 8004ed2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2b06      	cmp	r3, #6
 8004ed8:	d010      	beq.n	8004efc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f042 0201 	orr.w	r2, r2, #1
 8004ee8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eea:	e007      	b.n	8004efc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f042 0201 	orr.w	r2, r2, #1
 8004efa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bc80      	pop	{r7}
 8004f06:	4770      	bx	lr
 8004f08:	40012c00 	.word	0x40012c00
 8004f0c:	40000400 	.word	0x40000400
 8004f10:	40000800 	.word	0x40000800

08004f14 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68da      	ldr	r2, [r3, #12]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0201 	bic.w	r2, r2, #1
 8004f2a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6a1a      	ldr	r2, [r3, #32]
 8004f32:	f241 1311 	movw	r3, #4369	; 0x1111
 8004f36:	4013      	ands	r3, r2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10f      	bne.n	8004f5c <HAL_TIM_Base_Stop_IT+0x48>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6a1a      	ldr	r2, [r3, #32]
 8004f42:	f240 4344 	movw	r3, #1092	; 0x444
 8004f46:	4013      	ands	r3, r2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d107      	bne.n	8004f5c <HAL_TIM_Base_Stop_IT+0x48>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0201 	bic.w	r2, r2, #1
 8004f5a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bc80      	pop	{r7}
 8004f6e:	4770      	bx	lr

08004f70 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d101      	bne.n	8004f84 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e093      	b.n	80050ac <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d106      	bne.n	8004f9e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f7fc fe07 	bl	8001bac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	6812      	ldr	r2, [r2, #0]
 8004fb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fb4:	f023 0307 	bic.w	r3, r3, #7
 8004fb8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	4610      	mov	r0, r2
 8004fc6:	f000 fbbf 	bl	8005748 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ff2:	f023 0303 	bic.w	r3, r3, #3
 8004ff6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	689a      	ldr	r2, [r3, #8]
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	021b      	lsls	r3, r3, #8
 8005002:	4313      	orrs	r3, r2
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	4313      	orrs	r3, r2
 8005008:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005010:	f023 030c 	bic.w	r3, r3, #12
 8005014:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800501c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005020:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	68da      	ldr	r2, [r3, #12]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	021b      	lsls	r3, r3, #8
 800502c:	4313      	orrs	r3, r2
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	4313      	orrs	r3, r2
 8005032:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	011a      	lsls	r2, r3, #4
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	031b      	lsls	r3, r3, #12
 8005040:	4313      	orrs	r3, r2
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	4313      	orrs	r3, r2
 8005046:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800504e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	011b      	lsls	r3, r3, #4
 800505a:	4313      	orrs	r3, r2
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	4313      	orrs	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3718      	adds	r7, #24
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050c4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050cc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050d4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80050dc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d110      	bne.n	8005106 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050e4:	7bfb      	ldrb	r3, [r7, #15]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d102      	bne.n	80050f0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80050ea:	7b7b      	ldrb	r3, [r7, #13]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d001      	beq.n	80050f4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e089      	b.n	8005208 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005104:	e031      	b.n	800516a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b04      	cmp	r3, #4
 800510a:	d110      	bne.n	800512e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800510c:	7bbb      	ldrb	r3, [r7, #14]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d102      	bne.n	8005118 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005112:	7b3b      	ldrb	r3, [r7, #12]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d001      	beq.n	800511c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e075      	b.n	8005208 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2202      	movs	r2, #2
 8005120:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800512c:	e01d      	b.n	800516a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800512e:	7bfb      	ldrb	r3, [r7, #15]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d108      	bne.n	8005146 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005134:	7bbb      	ldrb	r3, [r7, #14]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d105      	bne.n	8005146 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800513a:	7b7b      	ldrb	r3, [r7, #13]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d102      	bne.n	8005146 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005140:	7b3b      	ldrb	r3, [r7, #12]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d001      	beq.n	800514a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e05e      	b.n	8005208 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2202      	movs	r2, #2
 800514e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2202      	movs	r2, #2
 8005156:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2202      	movs	r2, #2
 800515e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2202      	movs	r2, #2
 8005166:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d003      	beq.n	8005178 <HAL_TIM_Encoder_Start_IT+0xc4>
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	2b04      	cmp	r3, #4
 8005174:	d010      	beq.n	8005198 <HAL_TIM_Encoder_Start_IT+0xe4>
 8005176:	e01f      	b.n	80051b8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2201      	movs	r2, #1
 800517e:	2100      	movs	r1, #0
 8005180:	4618      	mov	r0, r3
 8005182:	f000 fbd9 	bl	8005938 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68da      	ldr	r2, [r3, #12]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f042 0202 	orr.w	r2, r2, #2
 8005194:	60da      	str	r2, [r3, #12]
      break;
 8005196:	e02e      	b.n	80051f6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2201      	movs	r2, #1
 800519e:	2104      	movs	r1, #4
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 fbc9 	bl	8005938 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68da      	ldr	r2, [r3, #12]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f042 0204 	orr.w	r2, r2, #4
 80051b4:	60da      	str	r2, [r3, #12]
      break;
 80051b6:	e01e      	b.n	80051f6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2201      	movs	r2, #1
 80051be:	2100      	movs	r1, #0
 80051c0:	4618      	mov	r0, r3
 80051c2:	f000 fbb9 	bl	8005938 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2201      	movs	r2, #1
 80051cc:	2104      	movs	r1, #4
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 fbb2 	bl	8005938 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68da      	ldr	r2, [r3, #12]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f042 0202 	orr.w	r2, r2, #2
 80051e2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f042 0204 	orr.w	r2, r2, #4
 80051f2:	60da      	str	r2, [r3, #12]
      break;
 80051f4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f042 0201 	orr.w	r2, r2, #1
 8005204:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b082      	sub	sp, #8
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10f      	bne.n	8005240 <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2200      	movs	r2, #0
 8005226:	2100      	movs	r1, #0
 8005228:	4618      	mov	r0, r3
 800522a:	f000 fb85 	bl	8005938 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68da      	ldr	r2, [r3, #12]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 0202 	bic.w	r2, r2, #2
 800523c:	60da      	str	r2, [r3, #12]
 800523e:	e030      	b.n	80052a2 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	2b04      	cmp	r3, #4
 8005244:	d10f      	bne.n	8005266 <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2200      	movs	r2, #0
 800524c:	2104      	movs	r1, #4
 800524e:	4618      	mov	r0, r3
 8005250:	f000 fb72 	bl	8005938 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68da      	ldr	r2, [r3, #12]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 0204 	bic.w	r2, r2, #4
 8005262:	60da      	str	r2, [r3, #12]
 8005264:	e01d      	b.n	80052a2 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2200      	movs	r2, #0
 800526c:	2100      	movs	r1, #0
 800526e:	4618      	mov	r0, r3
 8005270:	f000 fb62 	bl	8005938 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2200      	movs	r2, #0
 800527a:	2104      	movs	r1, #4
 800527c:	4618      	mov	r0, r3
 800527e:	f000 fb5b 	bl	8005938 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68da      	ldr	r2, [r3, #12]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0202 	bic.w	r2, r2, #2
 8005290:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68da      	ldr	r2, [r3, #12]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 0204 	bic.w	r2, r2, #4
 80052a0:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	6a1a      	ldr	r2, [r3, #32]
 80052a8:	f241 1311 	movw	r3, #4369	; 0x1111
 80052ac:	4013      	ands	r3, r2
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10f      	bne.n	80052d2 <HAL_TIM_Encoder_Stop_IT+0xc2>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6a1a      	ldr	r2, [r3, #32]
 80052b8:	f240 4344 	movw	r3, #1092	; 0x444
 80052bc:	4013      	ands	r3, r2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d107      	bne.n	80052d2 <HAL_TIM_Encoder_Stop_IT+0xc2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 0201 	bic.w	r2, r2, #1
 80052d0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d002      	beq.n	80052de <HAL_TIM_Encoder_Stop_IT+0xce>
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	2b04      	cmp	r3, #4
 80052dc:	d138      	bne.n	8005350 <HAL_TIM_Encoder_Stop_IT+0x140>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d104      	bne.n	80052ee <HAL_TIM_Encoder_Stop_IT+0xde>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052ec:	e013      	b.n	8005316 <HAL_TIM_Encoder_Stop_IT+0x106>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b04      	cmp	r3, #4
 80052f2:	d104      	bne.n	80052fe <HAL_TIM_Encoder_Stop_IT+0xee>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052fc:	e00b      	b.n	8005316 <HAL_TIM_Encoder_Stop_IT+0x106>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b08      	cmp	r3, #8
 8005302:	d104      	bne.n	800530e <HAL_TIM_Encoder_Stop_IT+0xfe>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800530c:	e003      	b.n	8005316 <HAL_TIM_Encoder_Stop_IT+0x106>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d104      	bne.n	8005326 <HAL_TIM_Encoder_Stop_IT+0x116>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005324:	e024      	b.n	8005370 <HAL_TIM_Encoder_Stop_IT+0x160>
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2b04      	cmp	r3, #4
 800532a:	d104      	bne.n	8005336 <HAL_TIM_Encoder_Stop_IT+0x126>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005334:	e01c      	b.n	8005370 <HAL_TIM_Encoder_Stop_IT+0x160>
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b08      	cmp	r3, #8
 800533a:	d104      	bne.n	8005346 <HAL_TIM_Encoder_Stop_IT+0x136>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005344:	e014      	b.n	8005370 <HAL_TIM_Encoder_Stop_IT+0x160>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800534e:	e00f      	b.n	8005370 <HAL_TIM_Encoder_Stop_IT+0x160>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3708      	adds	r7, #8
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b082      	sub	sp, #8
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	f003 0302 	and.w	r3, r3, #2
 800538c:	2b02      	cmp	r3, #2
 800538e:	d122      	bne.n	80053d6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b02      	cmp	r3, #2
 800539c:	d11b      	bne.n	80053d6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f06f 0202 	mvn.w	r2, #2
 80053a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	f003 0303 	and.w	r3, r3, #3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f7fc fafb 	bl	80019b8 <HAL_TIM_IC_CaptureCallback>
 80053c2:	e005      	b.n	80053d0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 f9a4 	bl	8005712 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f9aa 	bl	8005724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	2b04      	cmp	r3, #4
 80053e2:	d122      	bne.n	800542a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f003 0304 	and.w	r3, r3, #4
 80053ee:	2b04      	cmp	r3, #4
 80053f0:	d11b      	bne.n	800542a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f06f 0204 	mvn.w	r2, #4
 80053fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800540c:	2b00      	cmp	r3, #0
 800540e:	d003      	beq.n	8005418 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f7fc fad1 	bl	80019b8 <HAL_TIM_IC_CaptureCallback>
 8005416:	e005      	b.n	8005424 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 f97a 	bl	8005712 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f980 	bl	8005724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	f003 0308 	and.w	r3, r3, #8
 8005434:	2b08      	cmp	r3, #8
 8005436:	d122      	bne.n	800547e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	f003 0308 	and.w	r3, r3, #8
 8005442:	2b08      	cmp	r3, #8
 8005444:	d11b      	bne.n	800547e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f06f 0208 	mvn.w	r2, #8
 800544e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2204      	movs	r2, #4
 8005454:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	69db      	ldr	r3, [r3, #28]
 800545c:	f003 0303 	and.w	r3, r3, #3
 8005460:	2b00      	cmp	r3, #0
 8005462:	d003      	beq.n	800546c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f7fc faa7 	bl	80019b8 <HAL_TIM_IC_CaptureCallback>
 800546a:	e005      	b.n	8005478 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 f950 	bl	8005712 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f956 	bl	8005724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	f003 0310 	and.w	r3, r3, #16
 8005488:	2b10      	cmp	r3, #16
 800548a:	d122      	bne.n	80054d2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	f003 0310 	and.w	r3, r3, #16
 8005496:	2b10      	cmp	r3, #16
 8005498:	d11b      	bne.n	80054d2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f06f 0210 	mvn.w	r2, #16
 80054a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2208      	movs	r2, #8
 80054a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d003      	beq.n	80054c0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f7fc fa7d 	bl	80019b8 <HAL_TIM_IC_CaptureCallback>
 80054be:	e005      	b.n	80054cc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f926 	bl	8005712 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f92c 	bl	8005724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d10e      	bne.n	80054fe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d107      	bne.n	80054fe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f06f 0201 	mvn.w	r2, #1
 80054f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f7fc faaf 	bl	8001a5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005508:	2b80      	cmp	r3, #128	; 0x80
 800550a:	d10e      	bne.n	800552a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005516:	2b80      	cmp	r3, #128	; 0x80
 8005518:	d107      	bne.n	800552a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 fa92 	bl	8005a4e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005534:	2b40      	cmp	r3, #64	; 0x40
 8005536:	d10e      	bne.n	8005556 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005542:	2b40      	cmp	r3, #64	; 0x40
 8005544:	d107      	bne.n	8005556 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800554e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 f8f0 	bl	8005736 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	f003 0320 	and.w	r3, r3, #32
 8005560:	2b20      	cmp	r3, #32
 8005562:	d10e      	bne.n	8005582 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	f003 0320 	and.w	r3, r3, #32
 800556e:	2b20      	cmp	r3, #32
 8005570:	d107      	bne.n	8005582 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f06f 0220 	mvn.w	r2, #32
 800557a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 fa5d 	bl	8005a3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005582:	bf00      	nop
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b084      	sub	sp, #16
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
 8005592:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800559a:	2b01      	cmp	r3, #1
 800559c:	d101      	bne.n	80055a2 <HAL_TIM_ConfigClockSource+0x18>
 800559e:	2302      	movs	r3, #2
 80055a0:	e0b3      	b.n	800570a <HAL_TIM_ConfigClockSource+0x180>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2202      	movs	r2, #2
 80055ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055c0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055c8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055da:	d03e      	beq.n	800565a <HAL_TIM_ConfigClockSource+0xd0>
 80055dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055e0:	f200 8087 	bhi.w	80056f2 <HAL_TIM_ConfigClockSource+0x168>
 80055e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055e8:	f000 8085 	beq.w	80056f6 <HAL_TIM_ConfigClockSource+0x16c>
 80055ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f0:	d87f      	bhi.n	80056f2 <HAL_TIM_ConfigClockSource+0x168>
 80055f2:	2b70      	cmp	r3, #112	; 0x70
 80055f4:	d01a      	beq.n	800562c <HAL_TIM_ConfigClockSource+0xa2>
 80055f6:	2b70      	cmp	r3, #112	; 0x70
 80055f8:	d87b      	bhi.n	80056f2 <HAL_TIM_ConfigClockSource+0x168>
 80055fa:	2b60      	cmp	r3, #96	; 0x60
 80055fc:	d050      	beq.n	80056a0 <HAL_TIM_ConfigClockSource+0x116>
 80055fe:	2b60      	cmp	r3, #96	; 0x60
 8005600:	d877      	bhi.n	80056f2 <HAL_TIM_ConfigClockSource+0x168>
 8005602:	2b50      	cmp	r3, #80	; 0x50
 8005604:	d03c      	beq.n	8005680 <HAL_TIM_ConfigClockSource+0xf6>
 8005606:	2b50      	cmp	r3, #80	; 0x50
 8005608:	d873      	bhi.n	80056f2 <HAL_TIM_ConfigClockSource+0x168>
 800560a:	2b40      	cmp	r3, #64	; 0x40
 800560c:	d058      	beq.n	80056c0 <HAL_TIM_ConfigClockSource+0x136>
 800560e:	2b40      	cmp	r3, #64	; 0x40
 8005610:	d86f      	bhi.n	80056f2 <HAL_TIM_ConfigClockSource+0x168>
 8005612:	2b30      	cmp	r3, #48	; 0x30
 8005614:	d064      	beq.n	80056e0 <HAL_TIM_ConfigClockSource+0x156>
 8005616:	2b30      	cmp	r3, #48	; 0x30
 8005618:	d86b      	bhi.n	80056f2 <HAL_TIM_ConfigClockSource+0x168>
 800561a:	2b20      	cmp	r3, #32
 800561c:	d060      	beq.n	80056e0 <HAL_TIM_ConfigClockSource+0x156>
 800561e:	2b20      	cmp	r3, #32
 8005620:	d867      	bhi.n	80056f2 <HAL_TIM_ConfigClockSource+0x168>
 8005622:	2b00      	cmp	r3, #0
 8005624:	d05c      	beq.n	80056e0 <HAL_TIM_ConfigClockSource+0x156>
 8005626:	2b10      	cmp	r3, #16
 8005628:	d05a      	beq.n	80056e0 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800562a:	e062      	b.n	80056f2 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6818      	ldr	r0, [r3, #0]
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	6899      	ldr	r1, [r3, #8]
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f000 f95d 	bl	80058fa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800564e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	609a      	str	r2, [r3, #8]
      break;
 8005658:	e04e      	b.n	80056f8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6818      	ldr	r0, [r3, #0]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	6899      	ldr	r1, [r3, #8]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	f000 f946 	bl	80058fa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800567c:	609a      	str	r2, [r3, #8]
      break;
 800567e:	e03b      	b.n	80056f8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6818      	ldr	r0, [r3, #0]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	6859      	ldr	r1, [r3, #4]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	461a      	mov	r2, r3
 800568e:	f000 f8bd 	bl	800580c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2150      	movs	r1, #80	; 0x50
 8005698:	4618      	mov	r0, r3
 800569a:	f000 f914 	bl	80058c6 <TIM_ITRx_SetConfig>
      break;
 800569e:	e02b      	b.n	80056f8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6818      	ldr	r0, [r3, #0]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	6859      	ldr	r1, [r3, #4]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	461a      	mov	r2, r3
 80056ae:	f000 f8db 	bl	8005868 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2160      	movs	r1, #96	; 0x60
 80056b8:	4618      	mov	r0, r3
 80056ba:	f000 f904 	bl	80058c6 <TIM_ITRx_SetConfig>
      break;
 80056be:	e01b      	b.n	80056f8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6818      	ldr	r0, [r3, #0]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	6859      	ldr	r1, [r3, #4]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	461a      	mov	r2, r3
 80056ce:	f000 f89d 	bl	800580c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2140      	movs	r1, #64	; 0x40
 80056d8:	4618      	mov	r0, r3
 80056da:	f000 f8f4 	bl	80058c6 <TIM_ITRx_SetConfig>
      break;
 80056de:	e00b      	b.n	80056f8 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4619      	mov	r1, r3
 80056ea:	4610      	mov	r0, r2
 80056ec:	f000 f8eb 	bl	80058c6 <TIM_ITRx_SetConfig>
        break;
 80056f0:	e002      	b.n	80056f8 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80056f2:	bf00      	nop
 80056f4:	e000      	b.n	80056f8 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80056f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005712:	b480      	push	{r7}
 8005714:	b083      	sub	sp, #12
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800571a:	bf00      	nop
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	bc80      	pop	{r7}
 8005722:	4770      	bx	lr

08005724 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	bc80      	pop	{r7}
 8005734:	4770      	bx	lr

08005736 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005736:	b480      	push	{r7}
 8005738:	b083      	sub	sp, #12
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800573e:	bf00      	nop
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	bc80      	pop	{r7}
 8005746:	4770      	bx	lr

08005748 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a29      	ldr	r2, [pc, #164]	; (8005800 <TIM_Base_SetConfig+0xb8>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d00b      	beq.n	8005778 <TIM_Base_SetConfig+0x30>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005766:	d007      	beq.n	8005778 <TIM_Base_SetConfig+0x30>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a26      	ldr	r2, [pc, #152]	; (8005804 <TIM_Base_SetConfig+0xbc>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d003      	beq.n	8005778 <TIM_Base_SetConfig+0x30>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a25      	ldr	r2, [pc, #148]	; (8005808 <TIM_Base_SetConfig+0xc0>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d108      	bne.n	800578a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800577e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	4313      	orrs	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a1c      	ldr	r2, [pc, #112]	; (8005800 <TIM_Base_SetConfig+0xb8>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d00b      	beq.n	80057aa <TIM_Base_SetConfig+0x62>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005798:	d007      	beq.n	80057aa <TIM_Base_SetConfig+0x62>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a19      	ldr	r2, [pc, #100]	; (8005804 <TIM_Base_SetConfig+0xbc>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d003      	beq.n	80057aa <TIM_Base_SetConfig+0x62>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a18      	ldr	r2, [pc, #96]	; (8005808 <TIM_Base_SetConfig+0xc0>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d108      	bne.n	80057bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	689a      	ldr	r2, [r3, #8]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a07      	ldr	r2, [pc, #28]	; (8005800 <TIM_Base_SetConfig+0xb8>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d103      	bne.n	80057f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	691a      	ldr	r2, [r3, #16]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	615a      	str	r2, [r3, #20]
}
 80057f6:	bf00      	nop
 80057f8:	3714      	adds	r7, #20
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bc80      	pop	{r7}
 80057fe:	4770      	bx	lr
 8005800:	40012c00 	.word	0x40012c00
 8005804:	40000400 	.word	0x40000400
 8005808:	40000800 	.word	0x40000800

0800580c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800580c:	b480      	push	{r7}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	f023 0201 	bic.w	r2, r3, #1
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005836:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	011b      	lsls	r3, r3, #4
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	4313      	orrs	r3, r2
 8005840:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f023 030a 	bic.w	r3, r3, #10
 8005848:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	4313      	orrs	r3, r2
 8005850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	621a      	str	r2, [r3, #32]
}
 800585e:	bf00      	nop
 8005860:	371c      	adds	r7, #28
 8005862:	46bd      	mov	sp, r7
 8005864:	bc80      	pop	{r7}
 8005866:	4770      	bx	lr

08005868 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	f023 0210 	bic.w	r2, r3, #16
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005892:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	031b      	lsls	r3, r3, #12
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	4313      	orrs	r3, r2
 800589c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	011b      	lsls	r3, r3, #4
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	621a      	str	r2, [r3, #32]
}
 80058bc:	bf00      	nop
 80058be:	371c      	adds	r7, #28
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bc80      	pop	{r7}
 80058c4:	4770      	bx	lr

080058c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b085      	sub	sp, #20
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
 80058ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	f043 0307 	orr.w	r3, r3, #7
 80058e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	609a      	str	r2, [r3, #8]
}
 80058f0:	bf00      	nop
 80058f2:	3714      	adds	r7, #20
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bc80      	pop	{r7}
 80058f8:	4770      	bx	lr

080058fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b087      	sub	sp, #28
 80058fe:	af00      	add	r7, sp, #0
 8005900:	60f8      	str	r0, [r7, #12]
 8005902:	60b9      	str	r1, [r7, #8]
 8005904:	607a      	str	r2, [r7, #4]
 8005906:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005914:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	021a      	lsls	r2, r3, #8
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	431a      	orrs	r2, r3
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	4313      	orrs	r3, r2
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	4313      	orrs	r3, r2
 8005926:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	609a      	str	r2, [r3, #8]
}
 800592e:	bf00      	nop
 8005930:	371c      	adds	r7, #28
 8005932:	46bd      	mov	sp, r7
 8005934:	bc80      	pop	{r7}
 8005936:	4770      	bx	lr

08005938 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005938:	b480      	push	{r7}
 800593a:	b087      	sub	sp, #28
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	f003 031f 	and.w	r3, r3, #31
 800594a:	2201      	movs	r2, #1
 800594c:	fa02 f303 	lsl.w	r3, r2, r3
 8005950:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6a1a      	ldr	r2, [r3, #32]
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	43db      	mvns	r3, r3
 800595a:	401a      	ands	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6a1a      	ldr	r2, [r3, #32]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	f003 031f 	and.w	r3, r3, #31
 800596a:	6879      	ldr	r1, [r7, #4]
 800596c:	fa01 f303 	lsl.w	r3, r1, r3
 8005970:	431a      	orrs	r2, r3
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	621a      	str	r2, [r3, #32]
}
 8005976:	bf00      	nop
 8005978:	371c      	adds	r7, #28
 800597a:	46bd      	mov	sp, r7
 800597c:	bc80      	pop	{r7}
 800597e:	4770      	bx	lr

08005980 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005980:	b480      	push	{r7}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005990:	2b01      	cmp	r3, #1
 8005992:	d101      	bne.n	8005998 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005994:	2302      	movs	r3, #2
 8005996:	e046      	b.n	8005a26 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2202      	movs	r2, #2
 80059a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a16      	ldr	r2, [pc, #88]	; (8005a30 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d00e      	beq.n	80059fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059e4:	d009      	beq.n	80059fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a12      	ldr	r2, [pc, #72]	; (8005a34 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d004      	beq.n	80059fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a10      	ldr	r2, [pc, #64]	; (8005a38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d10c      	bne.n	8005a14 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3714      	adds	r7, #20
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bc80      	pop	{r7}
 8005a2e:	4770      	bx	lr
 8005a30:	40012c00 	.word	0x40012c00
 8005a34:	40000400 	.word	0x40000400
 8005a38:	40000800 	.word	0x40000800

08005a3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bc80      	pop	{r7}
 8005a4c:	4770      	bx	lr

08005a4e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a4e:	b480      	push	{r7}
 8005a50:	b083      	sub	sp, #12
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a56:	bf00      	nop
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bc80      	pop	{r7}
 8005a5e:	4770      	bx	lr

08005a60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e03f      	b.n	8005af2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d106      	bne.n	8005a8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7fc f8fa 	bl	8001c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2224      	movs	r2, #36	; 0x24
 8005a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68da      	ldr	r2, [r3, #12]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005aa2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 fba9 	bl	80061fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	691a      	ldr	r2, [r3, #16]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ab8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	695a      	ldr	r2, [r3, #20]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ac8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68da      	ldr	r2, [r3, #12]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ad8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2220      	movs	r2, #32
 8005aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b084      	sub	sp, #16
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	60f8      	str	r0, [r7, #12]
 8005b02:	60b9      	str	r1, [r7, #8]
 8005b04:	4613      	mov	r3, r2
 8005b06:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b20      	cmp	r3, #32
 8005b12:	d11d      	bne.n	8005b50 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d002      	beq.n	8005b20 <HAL_UART_Receive_IT+0x26>
 8005b1a:	88fb      	ldrh	r3, [r7, #6]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d101      	bne.n	8005b24 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e016      	b.n	8005b52 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d101      	bne.n	8005b32 <HAL_UART_Receive_IT+0x38>
 8005b2e:	2302      	movs	r3, #2
 8005b30:	e00f      	b.n	8005b52 <HAL_UART_Receive_IT+0x58>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005b40:	88fb      	ldrh	r3, [r7, #6]
 8005b42:	461a      	mov	r2, r3
 8005b44:	68b9      	ldr	r1, [r7, #8]
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 f9cf 	bl	8005eea <UART_Start_Receive_IT>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	e000      	b.n	8005b52 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005b50:	2302      	movs	r3, #2
  }
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
	...

08005b5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b08a      	sub	sp, #40	; 0x28
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005b80:	2300      	movs	r3, #0
 8005b82:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	f003 030f 	and.w	r3, r3, #15
 8005b8a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10d      	bne.n	8005bae <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	f003 0320 	and.w	r3, r3, #32
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d008      	beq.n	8005bae <HAL_UART_IRQHandler+0x52>
 8005b9c:	6a3b      	ldr	r3, [r7, #32]
 8005b9e:	f003 0320 	and.w	r3, r3, #32
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d003      	beq.n	8005bae <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 fa7f 	bl	80060aa <UART_Receive_IT>
      return;
 8005bac:	e17b      	b.n	8005ea6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 80b1 	beq.w	8005d18 <HAL_UART_IRQHandler+0x1bc>
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d105      	bne.n	8005bcc <HAL_UART_IRQHandler+0x70>
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	f000 80a6 	beq.w	8005d18 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00a      	beq.n	8005bec <HAL_UART_IRQHandler+0x90>
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d005      	beq.n	8005bec <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be4:	f043 0201 	orr.w	r2, r3, #1
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bee:	f003 0304 	and.w	r3, r3, #4
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00a      	beq.n	8005c0c <HAL_UART_IRQHandler+0xb0>
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d005      	beq.n	8005c0c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c04:	f043 0202 	orr.w	r2, r3, #2
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00a      	beq.n	8005c2c <HAL_UART_IRQHandler+0xd0>
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	f003 0301 	and.w	r3, r3, #1
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d005      	beq.n	8005c2c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c24:	f043 0204 	orr.w	r2, r3, #4
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	f003 0308 	and.w	r3, r3, #8
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00f      	beq.n	8005c56 <HAL_UART_IRQHandler+0xfa>
 8005c36:	6a3b      	ldr	r3, [r7, #32]
 8005c38:	f003 0320 	and.w	r3, r3, #32
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d104      	bne.n	8005c4a <HAL_UART_IRQHandler+0xee>
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d005      	beq.n	8005c56 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4e:	f043 0208 	orr.w	r2, r3, #8
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f000 811e 	beq.w	8005e9c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	f003 0320 	and.w	r3, r3, #32
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d007      	beq.n	8005c7a <HAL_UART_IRQHandler+0x11e>
 8005c6a:	6a3b      	ldr	r3, [r7, #32]
 8005c6c:	f003 0320 	and.w	r3, r3, #32
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d002      	beq.n	8005c7a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 fa18 	bl	80060aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	bf14      	ite	ne
 8005c88:	2301      	movne	r3, #1
 8005c8a:	2300      	moveq	r3, #0
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c94:	f003 0308 	and.w	r3, r3, #8
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d102      	bne.n	8005ca2 <HAL_UART_IRQHandler+0x146>
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d031      	beq.n	8005d06 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f95a 	bl	8005f5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d023      	beq.n	8005cfe <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	695a      	ldr	r2, [r3, #20]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cc4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d013      	beq.n	8005cf6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd2:	4a76      	ldr	r2, [pc, #472]	; (8005eac <HAL_UART_IRQHandler+0x350>)
 8005cd4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7fc fa74 	bl	80021c8 <HAL_DMA_Abort_IT>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d016      	beq.n	8005d14 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf4:	e00e      	b.n	8005d14 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f8e3 	bl	8005ec2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cfc:	e00a      	b.n	8005d14 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f8df 	bl	8005ec2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d04:	e006      	b.n	8005d14 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f8db 	bl	8005ec2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005d12:	e0c3      	b.n	8005e9c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d14:	bf00      	nop
    return;
 8005d16:	e0c1      	b.n	8005e9c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	f040 80a1 	bne.w	8005e64 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	f003 0310 	and.w	r3, r3, #16
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f000 809b 	beq.w	8005e64 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005d2e:	6a3b      	ldr	r3, [r7, #32]
 8005d30:	f003 0310 	and.w	r3, r3, #16
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 8095 	beq.w	8005e64 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60fb      	str	r3, [r7, #12]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	60fb      	str	r3, [r7, #12]
 8005d4e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d04e      	beq.n	8005dfc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005d68:	8a3b      	ldrh	r3, [r7, #16]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 8098 	beq.w	8005ea0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d74:	8a3a      	ldrh	r2, [r7, #16]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	f080 8092 	bcs.w	8005ea0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	8a3a      	ldrh	r2, [r7, #16]
 8005d80:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	2b20      	cmp	r3, #32
 8005d8a:	d02b      	beq.n	8005de4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68da      	ldr	r2, [r3, #12]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d9a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	695a      	ldr	r2, [r3, #20]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f022 0201 	bic.w	r2, r2, #1
 8005daa:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	695a      	ldr	r2, [r3, #20]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dba:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68da      	ldr	r2, [r3, #12]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 0210 	bic.w	r2, r2, #16
 8005dd8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7fc f9b7 	bl	8002152 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	4619      	mov	r1, r3
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 f86d 	bl	8005ed4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005dfa:	e051      	b.n	8005ea0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d047      	beq.n	8005ea4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005e14:	8a7b      	ldrh	r3, [r7, #18]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d044      	beq.n	8005ea4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68da      	ldr	r2, [r3, #12]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005e28:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	695a      	ldr	r2, [r3, #20]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 0201 	bic.w	r2, r2, #1
 8005e38:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68da      	ldr	r2, [r3, #12]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f022 0210 	bic.w	r2, r2, #16
 8005e56:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e58:	8a7b      	ldrh	r3, [r7, #18]
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 f839 	bl	8005ed4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005e62:	e01f      	b.n	8005ea4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d008      	beq.n	8005e80 <HAL_UART_IRQHandler+0x324>
 8005e6e:	6a3b      	ldr	r3, [r7, #32]
 8005e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d003      	beq.n	8005e80 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f8af 	bl	8005fdc <UART_Transmit_IT>
    return;
 8005e7e:	e012      	b.n	8005ea6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00d      	beq.n	8005ea6 <HAL_UART_IRQHandler+0x34a>
 8005e8a:	6a3b      	ldr	r3, [r7, #32]
 8005e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d008      	beq.n	8005ea6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 f8f0 	bl	800607a <UART_EndTransmit_IT>
    return;
 8005e9a:	e004      	b.n	8005ea6 <HAL_UART_IRQHandler+0x34a>
    return;
 8005e9c:	bf00      	nop
 8005e9e:	e002      	b.n	8005ea6 <HAL_UART_IRQHandler+0x34a>
      return;
 8005ea0:	bf00      	nop
 8005ea2:	e000      	b.n	8005ea6 <HAL_UART_IRQHandler+0x34a>
      return;
 8005ea4:	bf00      	nop
  }
}
 8005ea6:	3728      	adds	r7, #40	; 0x28
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	08005fb5 	.word	0x08005fb5

08005eb0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bc80      	pop	{r7}
 8005ec0:	4770      	bx	lr

08005ec2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b083      	sub	sp, #12
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005eca:	bf00      	nop
 8005ecc:	370c      	adds	r7, #12
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bc80      	pop	{r7}
 8005ed2:	4770      	bx	lr

08005ed4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	460b      	mov	r3, r1
 8005ede:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bc80      	pop	{r7}
 8005ee8:	4770      	bx	lr

08005eea <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b085      	sub	sp, #20
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	60f8      	str	r0, [r7, #12]
 8005ef2:	60b9      	str	r1, [r7, #8]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	88fa      	ldrh	r2, [r7, #6]
 8005f02:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	88fa      	ldrh	r2, [r7, #6]
 8005f08:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2222      	movs	r2, #34	; 0x22
 8005f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f2e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	695a      	ldr	r2, [r3, #20]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f042 0201 	orr.w	r2, r2, #1
 8005f3e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68da      	ldr	r2, [r3, #12]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f042 0220 	orr.w	r2, r2, #32
 8005f4e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bc80      	pop	{r7}
 8005f5a:	4770      	bx	lr

08005f5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68da      	ldr	r2, [r3, #12]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005f72:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	695a      	ldr	r2, [r3, #20]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f022 0201 	bic.w	r2, r2, #1
 8005f82:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d107      	bne.n	8005f9c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68da      	ldr	r2, [r3, #12]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f022 0210 	bic.w	r2, r2, #16
 8005f9a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2220      	movs	r2, #32
 8005fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005faa:	bf00      	nop
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bc80      	pop	{r7}
 8005fb2:	4770      	bx	lr

08005fb4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f7ff ff77 	bl	8005ec2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fd4:	bf00      	nop
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b21      	cmp	r3, #33	; 0x21
 8005fee:	d13e      	bne.n	800606e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ff8:	d114      	bne.n	8006024 <UART_Transmit_IT+0x48>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d110      	bne.n	8006024 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	881b      	ldrh	r3, [r3, #0]
 800600c:	461a      	mov	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006016:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a1b      	ldr	r3, [r3, #32]
 800601c:	1c9a      	adds	r2, r3, #2
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	621a      	str	r2, [r3, #32]
 8006022:	e008      	b.n	8006036 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a1b      	ldr	r3, [r3, #32]
 8006028:	1c59      	adds	r1, r3, #1
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	6211      	str	r1, [r2, #32]
 800602e:	781a      	ldrb	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800603a:	b29b      	uxth	r3, r3
 800603c:	3b01      	subs	r3, #1
 800603e:	b29b      	uxth	r3, r3
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	4619      	mov	r1, r3
 8006044:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10f      	bne.n	800606a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006058:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68da      	ldr	r2, [r3, #12]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006068:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800606a:	2300      	movs	r3, #0
 800606c:	e000      	b.n	8006070 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800606e:	2302      	movs	r3, #2
  }
}
 8006070:	4618      	mov	r0, r3
 8006072:	3714      	adds	r7, #20
 8006074:	46bd      	mov	sp, r7
 8006076:	bc80      	pop	{r7}
 8006078:	4770      	bx	lr

0800607a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b082      	sub	sp, #8
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68da      	ldr	r2, [r3, #12]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006090:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2220      	movs	r2, #32
 8006096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f7ff ff08 	bl	8005eb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b086      	sub	sp, #24
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b22      	cmp	r3, #34	; 0x22
 80060bc:	f040 8099 	bne.w	80061f2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060c8:	d117      	bne.n	80060fa <UART_Receive_IT+0x50>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d113      	bne.n	80060fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80060d2:	2300      	movs	r3, #0
 80060d4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060da:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f2:	1c9a      	adds	r2, r3, #2
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	629a      	str	r2, [r3, #40]	; 0x28
 80060f8:	e026      	b.n	8006148 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fe:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006100:	2300      	movs	r3, #0
 8006102:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800610c:	d007      	beq.n	800611e <UART_Receive_IT+0x74>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10a      	bne.n	800612c <UART_Receive_IT+0x82>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d106      	bne.n	800612c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	b2da      	uxtb	r2, r3
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	701a      	strb	r2, [r3, #0]
 800612a:	e008      	b.n	800613e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	b2db      	uxtb	r3, r3
 8006134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006138:	b2da      	uxtb	r2, r3
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006142:	1c5a      	adds	r2, r3, #1
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800614c:	b29b      	uxth	r3, r3
 800614e:	3b01      	subs	r3, #1
 8006150:	b29b      	uxth	r3, r3
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	4619      	mov	r1, r3
 8006156:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006158:	2b00      	cmp	r3, #0
 800615a:	d148      	bne.n	80061ee <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68da      	ldr	r2, [r3, #12]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f022 0220 	bic.w	r2, r2, #32
 800616a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68da      	ldr	r2, [r3, #12]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800617a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	695a      	ldr	r2, [r3, #20]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f022 0201 	bic.w	r2, r2, #1
 800618a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2220      	movs	r2, #32
 8006190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006198:	2b01      	cmp	r3, #1
 800619a:	d123      	bne.n	80061e4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68da      	ldr	r2, [r3, #12]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f022 0210 	bic.w	r2, r2, #16
 80061b0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0310 	and.w	r3, r3, #16
 80061bc:	2b10      	cmp	r3, #16
 80061be:	d10a      	bne.n	80061d6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061c0:	2300      	movs	r3, #0
 80061c2:	60fb      	str	r3, [r7, #12]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	60fb      	str	r3, [r7, #12]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	60fb      	str	r3, [r7, #12]
 80061d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061da:	4619      	mov	r1, r3
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f7ff fe79 	bl	8005ed4 <HAL_UARTEx_RxEventCallback>
 80061e2:	e002      	b.n	80061ea <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7fb fc1d 	bl	8001a24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80061ea:	2300      	movs	r3, #0
 80061ec:	e002      	b.n	80061f4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80061ee:	2300      	movs	r3, #0
 80061f0:	e000      	b.n	80061f4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80061f2:	2302      	movs	r3, #2
  }
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3718      	adds	r7, #24
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68da      	ldr	r2, [r3, #12]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	430a      	orrs	r2, r1
 8006218:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	689a      	ldr	r2, [r3, #8]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	431a      	orrs	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	695b      	ldr	r3, [r3, #20]
 8006228:	4313      	orrs	r3, r2
 800622a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006236:	f023 030c 	bic.w	r3, r3, #12
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	6812      	ldr	r2, [r2, #0]
 800623e:	68b9      	ldr	r1, [r7, #8]
 8006240:	430b      	orrs	r3, r1
 8006242:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	699a      	ldr	r2, [r3, #24]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a2c      	ldr	r2, [pc, #176]	; (8006310 <UART_SetConfig+0x114>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d103      	bne.n	800626c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006264:	f7fe fccc 	bl	8004c00 <HAL_RCC_GetPCLK2Freq>
 8006268:	60f8      	str	r0, [r7, #12]
 800626a:	e002      	b.n	8006272 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800626c:	f7fe fcb4 	bl	8004bd8 <HAL_RCC_GetPCLK1Freq>
 8006270:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	4613      	mov	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	009a      	lsls	r2, r3, #2
 800627c:	441a      	add	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	fbb2 f3f3 	udiv	r3, r2, r3
 8006288:	4a22      	ldr	r2, [pc, #136]	; (8006314 <UART_SetConfig+0x118>)
 800628a:	fba2 2303 	umull	r2, r3, r2, r3
 800628e:	095b      	lsrs	r3, r3, #5
 8006290:	0119      	lsls	r1, r3, #4
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	4613      	mov	r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4413      	add	r3, r2
 800629a:	009a      	lsls	r2, r3, #2
 800629c:	441a      	add	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80062a8:	4b1a      	ldr	r3, [pc, #104]	; (8006314 <UART_SetConfig+0x118>)
 80062aa:	fba3 0302 	umull	r0, r3, r3, r2
 80062ae:	095b      	lsrs	r3, r3, #5
 80062b0:	2064      	movs	r0, #100	; 0x64
 80062b2:	fb00 f303 	mul.w	r3, r0, r3
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	011b      	lsls	r3, r3, #4
 80062ba:	3332      	adds	r3, #50	; 0x32
 80062bc:	4a15      	ldr	r2, [pc, #84]	; (8006314 <UART_SetConfig+0x118>)
 80062be:	fba2 2303 	umull	r2, r3, r2, r3
 80062c2:	095b      	lsrs	r3, r3, #5
 80062c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062c8:	4419      	add	r1, r3
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	4613      	mov	r3, r2
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	009a      	lsls	r2, r3, #2
 80062d4:	441a      	add	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80062e0:	4b0c      	ldr	r3, [pc, #48]	; (8006314 <UART_SetConfig+0x118>)
 80062e2:	fba3 0302 	umull	r0, r3, r3, r2
 80062e6:	095b      	lsrs	r3, r3, #5
 80062e8:	2064      	movs	r0, #100	; 0x64
 80062ea:	fb00 f303 	mul.w	r3, r0, r3
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	011b      	lsls	r3, r3, #4
 80062f2:	3332      	adds	r3, #50	; 0x32
 80062f4:	4a07      	ldr	r2, [pc, #28]	; (8006314 <UART_SetConfig+0x118>)
 80062f6:	fba2 2303 	umull	r2, r3, r2, r3
 80062fa:	095b      	lsrs	r3, r3, #5
 80062fc:	f003 020f 	and.w	r2, r3, #15
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	440a      	add	r2, r1
 8006306:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006308:	bf00      	nop
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	40013800 	.word	0x40013800
 8006314:	51eb851f 	.word	0x51eb851f

08006318 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006318:	b084      	sub	sp, #16
 800631a:	b480      	push	{r7}
 800631c:	b083      	sub	sp, #12
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
 8006322:	f107 0014 	add.w	r0, r7, #20
 8006326:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	bc80      	pop	{r7}
 8006334:	b004      	add	sp, #16
 8006336:	4770      	bx	lr

08006338 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006348:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800634c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	b29a      	uxth	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	bc80      	pop	{r7}
 8006362:	4770      	bx	lr

08006364 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800636c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006370:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006378:	b29a      	uxth	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	b29b      	uxth	r3, r3
 800637e:	43db      	mvns	r3, r3
 8006380:	b29b      	uxth	r3, r3
 8006382:	4013      	ands	r3, r2
 8006384:	b29a      	uxth	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3714      	adds	r7, #20
 8006392:	46bd      	mov	sp, r7
 8006394:	bc80      	pop	{r7}
 8006396:	4770      	bx	lr

08006398 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	460b      	mov	r3, r1
 80063a2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bc80      	pop	{r7}
 80063ae:	4770      	bx	lr

080063b0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80063b0:	b084      	sub	sp, #16
 80063b2:	b480      	push	{r7}
 80063b4:	b083      	sub	sp, #12
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
 80063ba:	f107 0014 	add.w	r0, r7, #20
 80063be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bc80      	pop	{r7}
 80063ec:	b004      	add	sp, #16
 80063ee:	4770      	bx	lr

080063f0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b09b      	sub	sp, #108	; 0x6c
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80063fa:	2300      	movs	r3, #0
 80063fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4413      	add	r3, r2
 800640a:	881b      	ldrh	r3, [r3, #0]
 800640c:	b29b      	uxth	r3, r3
 800640e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006416:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	78db      	ldrb	r3, [r3, #3]
 800641e:	2b03      	cmp	r3, #3
 8006420:	d81f      	bhi.n	8006462 <USB_ActivateEndpoint+0x72>
 8006422:	a201      	add	r2, pc, #4	; (adr r2, 8006428 <USB_ActivateEndpoint+0x38>)
 8006424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006428:	08006439 	.word	0x08006439
 800642c:	08006455 	.word	0x08006455
 8006430:	0800646b 	.word	0x0800646b
 8006434:	08006447 	.word	0x08006447
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006438:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800643c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006440:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006444:	e012      	b.n	800646c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006446:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800644a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800644e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006452:	e00b      	b.n	800646c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006454:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006458:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800645c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006460:	e004      	b.n	800646c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006468:	e000      	b.n	800646c <USB_ActivateEndpoint+0x7c>
      break;
 800646a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	441a      	add	r2, r3
 8006476:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800647a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800647e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800648a:	b29b      	uxth	r3, r3
 800648c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	881b      	ldrh	r3, [r3, #0]
 800649a:	b29b      	uxth	r3, r3
 800649c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	4313      	orrs	r3, r2
 80064ae:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	441a      	add	r2, r3
 80064bc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80064c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	7b1b      	ldrb	r3, [r3, #12]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f040 8149 	bne.w	8006770 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	785b      	ldrb	r3, [r3, #1]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f000 8084 	beq.w	80065f0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	617b      	str	r3, [r7, #20]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	461a      	mov	r2, r3
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	4413      	add	r3, r2
 80064fa:	617b      	str	r3, [r7, #20]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	011a      	lsls	r2, r3, #4
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	4413      	add	r3, r2
 8006506:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800650a:	613b      	str	r3, [r7, #16]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	88db      	ldrh	r3, [r3, #6]
 8006510:	085b      	lsrs	r3, r3, #1
 8006512:	b29b      	uxth	r3, r3
 8006514:	005b      	lsls	r3, r3, #1
 8006516:	b29a      	uxth	r2, r3
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4413      	add	r3, r2
 8006526:	881b      	ldrh	r3, [r3, #0]
 8006528:	81fb      	strh	r3, [r7, #14]
 800652a:	89fb      	ldrh	r3, [r7, #14]
 800652c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006530:	2b00      	cmp	r3, #0
 8006532:	d01b      	beq.n	800656c <USB_ActivateEndpoint+0x17c>
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	4413      	add	r3, r2
 800653e:	881b      	ldrh	r3, [r3, #0]
 8006540:	b29b      	uxth	r3, r3
 8006542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800654a:	81bb      	strh	r3, [r7, #12]
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	441a      	add	r2, r3
 8006556:	89bb      	ldrh	r3, [r7, #12]
 8006558:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800655c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006560:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006564:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006568:	b29b      	uxth	r3, r3
 800656a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	78db      	ldrb	r3, [r3, #3]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d020      	beq.n	80065b6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	881b      	ldrh	r3, [r3, #0]
 8006580:	b29b      	uxth	r3, r3
 8006582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006586:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800658a:	813b      	strh	r3, [r7, #8]
 800658c:	893b      	ldrh	r3, [r7, #8]
 800658e:	f083 0320 	eor.w	r3, r3, #32
 8006592:	813b      	strh	r3, [r7, #8]
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	441a      	add	r2, r3
 800659e:	893b      	ldrh	r3, [r7, #8]
 80065a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	8013      	strh	r3, [r2, #0]
 80065b4:	e27f      	b.n	8006ab6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	4413      	add	r3, r2
 80065c0:	881b      	ldrh	r3, [r3, #0]
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065cc:	817b      	strh	r3, [r7, #10]
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	441a      	add	r2, r3
 80065d8:	897b      	ldrh	r3, [r7, #10]
 80065da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	8013      	strh	r3, [r2, #0]
 80065ee:	e262      	b.n	8006ab6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	461a      	mov	r2, r3
 80065fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006600:	4413      	add	r3, r2
 8006602:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	011a      	lsls	r2, r3, #4
 800660a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660c:	4413      	add	r3, r2
 800660e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006612:	62bb      	str	r3, [r7, #40]	; 0x28
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	88db      	ldrh	r3, [r3, #6]
 8006618:	085b      	lsrs	r3, r3, #1
 800661a:	b29b      	uxth	r3, r3
 800661c:	005b      	lsls	r3, r3, #1
 800661e:	b29a      	uxth	r2, r3
 8006620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006622:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	627b      	str	r3, [r7, #36]	; 0x24
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800662e:	b29b      	uxth	r3, r3
 8006630:	461a      	mov	r2, r3
 8006632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006634:	4413      	add	r3, r2
 8006636:	627b      	str	r3, [r7, #36]	; 0x24
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	011a      	lsls	r2, r3, #4
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	4413      	add	r3, r2
 8006642:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006646:	623b      	str	r3, [r7, #32]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d112      	bne.n	8006676 <USB_ActivateEndpoint+0x286>
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	881b      	ldrh	r3, [r3, #0]
 8006654:	b29b      	uxth	r3, r3
 8006656:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800665a:	b29a      	uxth	r2, r3
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	801a      	strh	r2, [r3, #0]
 8006660:	6a3b      	ldr	r3, [r7, #32]
 8006662:	881b      	ldrh	r3, [r3, #0]
 8006664:	b29b      	uxth	r3, r3
 8006666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800666a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800666e:	b29a      	uxth	r2, r3
 8006670:	6a3b      	ldr	r3, [r7, #32]
 8006672:	801a      	strh	r2, [r3, #0]
 8006674:	e02f      	b.n	80066d6 <USB_ActivateEndpoint+0x2e6>
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	2b3e      	cmp	r3, #62	; 0x3e
 800667c:	d813      	bhi.n	80066a6 <USB_ActivateEndpoint+0x2b6>
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	085b      	lsrs	r3, r3, #1
 8006684:	663b      	str	r3, [r7, #96]	; 0x60
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	2b00      	cmp	r3, #0
 8006690:	d002      	beq.n	8006698 <USB_ActivateEndpoint+0x2a8>
 8006692:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006694:	3301      	adds	r3, #1
 8006696:	663b      	str	r3, [r7, #96]	; 0x60
 8006698:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800669a:	b29b      	uxth	r3, r3
 800669c:	029b      	lsls	r3, r3, #10
 800669e:	b29a      	uxth	r2, r3
 80066a0:	6a3b      	ldr	r3, [r7, #32]
 80066a2:	801a      	strh	r2, [r3, #0]
 80066a4:	e017      	b.n	80066d6 <USB_ActivateEndpoint+0x2e6>
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	095b      	lsrs	r3, r3, #5
 80066ac:	663b      	str	r3, [r7, #96]	; 0x60
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	f003 031f 	and.w	r3, r3, #31
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d102      	bne.n	80066c0 <USB_ActivateEndpoint+0x2d0>
 80066ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066bc:	3b01      	subs	r3, #1
 80066be:	663b      	str	r3, [r7, #96]	; 0x60
 80066c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	029b      	lsls	r3, r3, #10
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	881b      	ldrh	r3, [r3, #0]
 80066e2:	83fb      	strh	r3, [r7, #30]
 80066e4:	8bfb      	ldrh	r3, [r7, #30]
 80066e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d01b      	beq.n	8006726 <USB_ActivateEndpoint+0x336>
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	4413      	add	r3, r2
 80066f8:	881b      	ldrh	r3, [r3, #0]
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006704:	83bb      	strh	r3, [r7, #28]
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	441a      	add	r2, r3
 8006710:	8bbb      	ldrh	r3, [r7, #28]
 8006712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006716:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800671a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800671e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006722:	b29b      	uxth	r3, r3
 8006724:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4413      	add	r3, r2
 8006730:	881b      	ldrh	r3, [r3, #0]
 8006732:	b29b      	uxth	r3, r3
 8006734:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800673c:	837b      	strh	r3, [r7, #26]
 800673e:	8b7b      	ldrh	r3, [r7, #26]
 8006740:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006744:	837b      	strh	r3, [r7, #26]
 8006746:	8b7b      	ldrh	r3, [r7, #26]
 8006748:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800674c:	837b      	strh	r3, [r7, #26]
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	441a      	add	r2, r3
 8006758:	8b7b      	ldrh	r3, [r7, #26]
 800675a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800675e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800676a:	b29b      	uxth	r3, r3
 800676c:	8013      	strh	r3, [r2, #0]
 800676e:	e1a2      	b.n	8006ab6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4413      	add	r3, r2
 800677a:	881b      	ldrh	r3, [r3, #0]
 800677c:	b29b      	uxth	r3, r3
 800677e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006786:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	441a      	add	r2, r3
 8006794:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800679c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067a0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80067a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	461a      	mov	r2, r3
 80067ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067bc:	4413      	add	r3, r2
 80067be:	65bb      	str	r3, [r7, #88]	; 0x58
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	011a      	lsls	r2, r3, #4
 80067c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067ce:	657b      	str	r3, [r7, #84]	; 0x54
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	891b      	ldrh	r3, [r3, #8]
 80067d4:	085b      	lsrs	r3, r3, #1
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	005b      	lsls	r3, r3, #1
 80067da:	b29a      	uxth	r2, r3
 80067dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067de:	801a      	strh	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	653b      	str	r3, [r7, #80]	; 0x50
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	461a      	mov	r2, r3
 80067ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067f0:	4413      	add	r3, r2
 80067f2:	653b      	str	r3, [r7, #80]	; 0x50
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	011a      	lsls	r2, r3, #4
 80067fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006802:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	895b      	ldrh	r3, [r3, #10]
 8006808:	085b      	lsrs	r3, r3, #1
 800680a:	b29b      	uxth	r3, r3
 800680c:	005b      	lsls	r3, r3, #1
 800680e:	b29a      	uxth	r2, r3
 8006810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006812:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	785b      	ldrb	r3, [r3, #1]
 8006818:	2b00      	cmp	r3, #0
 800681a:	f040 8091 	bne.w	8006940 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	4413      	add	r3, r2
 8006828:	881b      	ldrh	r3, [r3, #0]
 800682a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800682c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800682e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d01b      	beq.n	800686e <USB_ActivateEndpoint+0x47e>
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	4413      	add	r3, r2
 8006840:	881b      	ldrh	r3, [r3, #0]
 8006842:	b29b      	uxth	r3, r3
 8006844:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800684c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	441a      	add	r2, r3
 8006858:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800685a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800685e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006862:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800686a:	b29b      	uxth	r3, r3
 800686c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	4413      	add	r3, r2
 8006878:	881b      	ldrh	r3, [r3, #0]
 800687a:	873b      	strh	r3, [r7, #56]	; 0x38
 800687c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800687e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006882:	2b00      	cmp	r3, #0
 8006884:	d01b      	beq.n	80068be <USB_ActivateEndpoint+0x4ce>
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	4413      	add	r3, r2
 8006890:	881b      	ldrh	r3, [r3, #0]
 8006892:	b29b      	uxth	r3, r3
 8006894:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800689c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	441a      	add	r2, r3
 80068a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80068aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	881b      	ldrh	r3, [r3, #0]
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80068d6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80068d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068dc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80068de:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80068e0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80068e4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	441a      	add	r2, r3
 80068f0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80068f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006902:	b29b      	uxth	r3, r3
 8006904:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	4413      	add	r3, r2
 8006910:	881b      	ldrh	r3, [r3, #0]
 8006912:	b29b      	uxth	r3, r3
 8006914:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800691c:	867b      	strh	r3, [r7, #50]	; 0x32
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	441a      	add	r2, r3
 8006928:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800692a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800692e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800693a:	b29b      	uxth	r3, r3
 800693c:	8013      	strh	r3, [r2, #0]
 800693e:	e0ba      	b.n	8006ab6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006950:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d01d      	beq.n	8006998 <USB_ActivateEndpoint+0x5a8>
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4413      	add	r3, r2
 8006966:	881b      	ldrh	r3, [r3, #0]
 8006968:	b29b      	uxth	r3, r3
 800696a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800696e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006972:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	441a      	add	r2, r3
 8006980:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006984:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006988:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800698c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006994:	b29b      	uxth	r3, r3
 8006996:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4413      	add	r3, r2
 80069a2:	881b      	ldrh	r3, [r3, #0]
 80069a4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80069a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80069ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d01d      	beq.n	80069f0 <USB_ActivateEndpoint+0x600>
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	4413      	add	r3, r2
 80069be:	881b      	ldrh	r3, [r3, #0]
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	441a      	add	r2, r3
 80069d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80069dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	78db      	ldrb	r3, [r3, #3]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d024      	beq.n	8006a42 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	4413      	add	r3, r2
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a0e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006a12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006a16:	f083 0320 	eor.w	r3, r3, #32
 8006a1a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	441a      	add	r2, r3
 8006a28:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006a2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	8013      	strh	r3, [r2, #0]
 8006a40:	e01d      	b.n	8006a7e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	4413      	add	r3, r2
 8006a4c:	881b      	ldrh	r3, [r3, #0]
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a58:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	441a      	add	r2, r3
 8006a66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006a6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4413      	add	r3, r2
 8006a88:	881b      	ldrh	r3, [r3, #0]
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a94:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	441a      	add	r2, r3
 8006aa0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006ab6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	376c      	adds	r7, #108	; 0x6c
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bc80      	pop	{r7}
 8006ac2:	4770      	bx	lr

08006ac4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b08d      	sub	sp, #52	; 0x34
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	7b1b      	ldrb	r3, [r3, #12]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f040 808e 	bne.w	8006bf4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	785b      	ldrb	r3, [r3, #1]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d044      	beq.n	8006b6a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	881b      	ldrh	r3, [r3, #0]
 8006aec:	81bb      	strh	r3, [r7, #12]
 8006aee:	89bb      	ldrh	r3, [r7, #12]
 8006af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d01b      	beq.n	8006b30 <USB_DeactivateEndpoint+0x6c>
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	881b      	ldrh	r3, [r3, #0]
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b0e:	817b      	strh	r3, [r7, #10]
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	441a      	add	r2, r3
 8006b1a:	897b      	ldrh	r3, [r7, #10]
 8006b1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b28:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4413      	add	r3, r2
 8006b3a:	881b      	ldrh	r3, [r3, #0]
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b46:	813b      	strh	r3, [r7, #8]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	441a      	add	r2, r3
 8006b52:	893b      	ldrh	r3, [r7, #8]
 8006b54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	8013      	strh	r3, [r2, #0]
 8006b68:	e192      	b.n	8006e90 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	4413      	add	r3, r2
 8006b74:	881b      	ldrh	r3, [r3, #0]
 8006b76:	827b      	strh	r3, [r7, #18]
 8006b78:	8a7b      	ldrh	r3, [r7, #18]
 8006b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d01b      	beq.n	8006bba <USB_DeactivateEndpoint+0xf6>
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	881b      	ldrh	r3, [r3, #0]
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b98:	823b      	strh	r3, [r7, #16]
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	441a      	add	r2, r3
 8006ba4:	8a3b      	ldrh	r3, [r7, #16]
 8006ba6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006baa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	4413      	add	r3, r2
 8006bc4:	881b      	ldrh	r3, [r3, #0]
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd0:	81fb      	strh	r3, [r7, #14]
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	441a      	add	r2, r3
 8006bdc:	89fb      	ldrh	r3, [r7, #14]
 8006bde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006be2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	8013      	strh	r3, [r2, #0]
 8006bf2:	e14d      	b.n	8006e90 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	785b      	ldrb	r3, [r3, #1]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f040 80a5 	bne.w	8006d48 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	4413      	add	r3, r2
 8006c08:	881b      	ldrh	r3, [r3, #0]
 8006c0a:	843b      	strh	r3, [r7, #32]
 8006c0c:	8c3b      	ldrh	r3, [r7, #32]
 8006c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d01b      	beq.n	8006c4e <USB_DeactivateEndpoint+0x18a>
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	881b      	ldrh	r3, [r3, #0]
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c2c:	83fb      	strh	r3, [r7, #30]
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	441a      	add	r2, r3
 8006c38:	8bfb      	ldrh	r3, [r7, #30]
 8006c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	4413      	add	r3, r2
 8006c58:	881b      	ldrh	r3, [r3, #0]
 8006c5a:	83bb      	strh	r3, [r7, #28]
 8006c5c:	8bbb      	ldrh	r3, [r7, #28]
 8006c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d01b      	beq.n	8006c9e <USB_DeactivateEndpoint+0x1da>
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4413      	add	r3, r2
 8006c70:	881b      	ldrh	r3, [r3, #0]
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c7c:	837b      	strh	r3, [r7, #26]
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	441a      	add	r2, r3
 8006c88:	8b7b      	ldrh	r3, [r7, #26]
 8006c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cb4:	833b      	strh	r3, [r7, #24]
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	441a      	add	r2, r3
 8006cc0:	8b3b      	ldrh	r3, [r7, #24]
 8006cc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	4413      	add	r3, r2
 8006ce0:	881b      	ldrh	r3, [r3, #0]
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cec:	82fb      	strh	r3, [r7, #22]
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	441a      	add	r2, r3
 8006cf8:	8afb      	ldrh	r3, [r7, #22]
 8006cfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d24:	82bb      	strh	r3, [r7, #20]
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	441a      	add	r2, r3
 8006d30:	8abb      	ldrh	r3, [r7, #20]
 8006d32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	8013      	strh	r3, [r2, #0]
 8006d46:	e0a3      	b.n	8006e90 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4413      	add	r3, r2
 8006d52:	881b      	ldrh	r3, [r3, #0]
 8006d54:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006d56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d01b      	beq.n	8006d98 <USB_DeactivateEndpoint+0x2d4>
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	4413      	add	r3, r2
 8006d6a:	881b      	ldrh	r3, [r3, #0]
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d76:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	441a      	add	r2, r3
 8006d82:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006d84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	881b      	ldrh	r3, [r3, #0]
 8006da4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006da6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d01b      	beq.n	8006de8 <USB_DeactivateEndpoint+0x324>
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	4413      	add	r3, r2
 8006dba:	881b      	ldrh	r3, [r3, #0]
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dc6:	853b      	strh	r3, [r7, #40]	; 0x28
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	441a      	add	r2, r3
 8006dd2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006dd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ddc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006de0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	881b      	ldrh	r3, [r3, #0]
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dfe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	441a      	add	r2, r3
 8006e0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	881b      	ldrh	r3, [r3, #0]
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e36:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	441a      	add	r2, r3
 8006e42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	4413      	add	r3, r2
 8006e62:	881b      	ldrh	r3, [r3, #0]
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e6e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	441a      	add	r2, r3
 8006e7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3734      	adds	r7, #52	; 0x34
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bc80      	pop	{r7}
 8006e9a:	4770      	bx	lr

08006e9c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b0cc      	sub	sp, #304	; 0x130
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ea6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006eaa:	6018      	str	r0, [r3, #0]
 8006eac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eb4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006eb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	785b      	ldrb	r3, [r3, #1]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	f041 817d 	bne.w	80081c2 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006ec8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ecc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	699a      	ldr	r2, [r3, #24]
 8006ed4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d908      	bls.n	8006ef6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006ee4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ee8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006ef4:	e007      	b.n	8006f06 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006ef6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006efa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006f06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	7b1b      	ldrb	r3, [r3, #12]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d152      	bne.n	8006fbc <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	6959      	ldr	r1, [r3, #20]
 8006f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	88da      	ldrh	r2, [r3, #6]
 8006f2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006f38:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006f3c:	6800      	ldr	r0, [r0, #0]
 8006f3e:	f001 ff23 	bl	8008d88 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006f42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f46:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006f4a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f4e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006f52:	6812      	ldr	r2, [r2, #0]
 8006f54:	601a      	str	r2, [r3, #0]
 8006f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	4619      	mov	r1, r3
 8006f68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f6c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006f70:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f74:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006f78:	6812      	ldr	r2, [r2, #0]
 8006f7a:	440a      	add	r2, r1
 8006f7c:	601a      	str	r2, [r3, #0]
 8006f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	011a      	lsls	r2, r3, #4
 8006f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f90:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4413      	add	r3, r2
 8006f98:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fa0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006fa4:	601a      	str	r2, [r3, #0]
 8006fa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	801a      	strh	r2, [r3, #0]
 8006fb8:	f001 b8b5 	b.w	8008126 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006fbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	78db      	ldrb	r3, [r3, #3]
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	f040 84c6 	bne.w	800795a <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	6a1a      	ldr	r2, [r3, #32]
 8006fda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	f240 8443 	bls.w	8007872 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006fec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ffa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4413      	add	r3, r2
 8007006:	881b      	ldrh	r3, [r3, #0]
 8007008:	b29b      	uxth	r3, r3
 800700a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800700e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007012:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800701a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007024:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	441a      	add	r2, r3
 8007030:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800703c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007044:	b29b      	uxth	r3, r3
 8007046:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800704c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	6a1a      	ldr	r2, [r3, #32]
 8007054:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007058:	1ad2      	subs	r2, r2, r3
 800705a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800705e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800706a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007074:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	881b      	ldrh	r3, [r3, #0]
 8007082:	b29b      	uxth	r3, r3
 8007084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007088:	2b00      	cmp	r3, #0
 800708a:	f000 823e 	beq.w	800750a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800708e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007092:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007096:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800709a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800709e:	6812      	ldr	r2, [r2, #0]
 80070a0:	601a      	str	r2, [r3, #0]
 80070a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	785b      	ldrb	r3, [r3, #1]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f040 809a 	bne.w	80071e8 <USB_EPStartXfer+0x34c>
 80070b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070bc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070c0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80070c4:	6812      	ldr	r2, [r2, #0]
 80070c6:	601a      	str	r2, [r3, #0]
 80070c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	4619      	mov	r1, r3
 80070da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070e6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80070ea:	6812      	ldr	r2, [r2, #0]
 80070ec:	440a      	add	r2, r1
 80070ee:	601a      	str	r2, [r3, #0]
 80070f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	011a      	lsls	r2, r3, #4
 80070fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4413      	add	r3, r2
 800710a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800710e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007112:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007116:	601a      	str	r2, [r3, #0]
 8007118:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800711c:	2b00      	cmp	r3, #0
 800711e:	d122      	bne.n	8007166 <USB_EPStartXfer+0x2ca>
 8007120:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007124:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	881b      	ldrh	r3, [r3, #0]
 800712c:	b29b      	uxth	r3, r3
 800712e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007132:	b29a      	uxth	r2, r3
 8007134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007138:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	801a      	strh	r2, [r3, #0]
 8007140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007144:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	881b      	ldrh	r3, [r3, #0]
 800714c:	b29b      	uxth	r3, r3
 800714e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007152:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007156:	b29a      	uxth	r2, r3
 8007158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800715c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	801a      	strh	r2, [r3, #0]
 8007164:	e079      	b.n	800725a <USB_EPStartXfer+0x3be>
 8007166:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800716a:	2b3e      	cmp	r3, #62	; 0x3e
 800716c:	d81b      	bhi.n	80071a6 <USB_EPStartXfer+0x30a>
 800716e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007172:	085b      	lsrs	r3, r3, #1
 8007174:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007178:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	2b00      	cmp	r3, #0
 8007182:	d004      	beq.n	800718e <USB_EPStartXfer+0x2f2>
 8007184:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007188:	3301      	adds	r3, #1
 800718a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800718e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007192:	b29b      	uxth	r3, r3
 8007194:	029b      	lsls	r3, r3, #10
 8007196:	b29a      	uxth	r2, r3
 8007198:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800719c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	801a      	strh	r2, [r3, #0]
 80071a4:	e059      	b.n	800725a <USB_EPStartXfer+0x3be>
 80071a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071aa:	095b      	lsrs	r3, r3, #5
 80071ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80071b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071b4:	f003 031f 	and.w	r3, r3, #31
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d104      	bne.n	80071c6 <USB_EPStartXfer+0x32a>
 80071bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071c0:	3b01      	subs	r3, #1
 80071c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80071c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	029b      	lsls	r3, r3, #10
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071d8:	b29a      	uxth	r2, r3
 80071da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	801a      	strh	r2, [r3, #0]
 80071e6:	e038      	b.n	800725a <USB_EPStartXfer+0x3be>
 80071e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	785b      	ldrb	r3, [r3, #1]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d130      	bne.n	800725a <USB_EPStartXfer+0x3be>
 80071f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007206:	b29b      	uxth	r3, r3
 8007208:	4619      	mov	r1, r3
 800720a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800720e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007212:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007216:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800721a:	6812      	ldr	r2, [r2, #0]
 800721c:	440a      	add	r2, r1
 800721e:	601a      	str	r2, [r3, #0]
 8007220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007224:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	011a      	lsls	r2, r3, #4
 800722e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007232:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4413      	add	r3, r2
 800723a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800723e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007242:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007246:	601a      	str	r2, [r3, #0]
 8007248:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800724c:	b29a      	uxth	r2, r3
 800724e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007252:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800725a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800725e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	895b      	ldrh	r3, [r3, #10]
 8007266:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800726a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800726e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	6959      	ldr	r1, [r3, #20]
 8007276:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800727a:	b29b      	uxth	r3, r3
 800727c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007280:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007284:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007288:	6800      	ldr	r0, [r0, #0]
 800728a:	f001 fd7d 	bl	8008d88 <USB_WritePMA>
            ep->xfer_buff += len;
 800728e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007292:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	695a      	ldr	r2, [r3, #20]
 800729a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800729e:	441a      	add	r2, r3
 80072a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80072ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	6a1a      	ldr	r2, [r3, #32]
 80072b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d90f      	bls.n	80072e8 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80072c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	6a1a      	ldr	r2, [r3, #32]
 80072d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072d8:	1ad2      	subs	r2, r2, r3
 80072da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	621a      	str	r2, [r3, #32]
 80072e6:	e00e      	b.n	8007306 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80072e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	6a1b      	ldr	r3, [r3, #32]
 80072f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80072f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2200      	movs	r2, #0
 8007304:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800730a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	785b      	ldrb	r3, [r3, #1]
 8007312:	2b00      	cmp	r3, #0
 8007314:	f040 809a 	bne.w	800744c <USB_EPStartXfer+0x5b0>
 8007318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800731c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007320:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007324:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007328:	6812      	ldr	r2, [r2, #0]
 800732a:	601a      	str	r2, [r3, #0]
 800732c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007330:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800733a:	b29b      	uxth	r3, r3
 800733c:	4619      	mov	r1, r3
 800733e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007342:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007346:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800734a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800734e:	6812      	ldr	r2, [r2, #0]
 8007350:	440a      	add	r2, r1
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007358:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	011a      	lsls	r2, r3, #4
 8007362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007366:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4413      	add	r3, r2
 800736e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007376:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800737a:	601a      	str	r2, [r3, #0]
 800737c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007380:	2b00      	cmp	r3, #0
 8007382:	d122      	bne.n	80073ca <USB_EPStartXfer+0x52e>
 8007384:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007388:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	881b      	ldrh	r3, [r3, #0]
 8007390:	b29b      	uxth	r3, r3
 8007392:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007396:	b29a      	uxth	r2, r3
 8007398:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800739c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	801a      	strh	r2, [r3, #0]
 80073a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	881b      	ldrh	r3, [r3, #0]
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073c0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	801a      	strh	r2, [r3, #0]
 80073c8:	e083      	b.n	80074d2 <USB_EPStartXfer+0x636>
 80073ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073ce:	2b3e      	cmp	r3, #62	; 0x3e
 80073d0:	d81b      	bhi.n	800740a <USB_EPStartXfer+0x56e>
 80073d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073d6:	085b      	lsrs	r3, r3, #1
 80073d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80073dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073e0:	f003 0301 	and.w	r3, r3, #1
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d004      	beq.n	80073f2 <USB_EPStartXfer+0x556>
 80073e8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80073ec:	3301      	adds	r3, #1
 80073ee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80073f2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	029b      	lsls	r3, r3, #10
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007400:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	801a      	strh	r2, [r3, #0]
 8007408:	e063      	b.n	80074d2 <USB_EPStartXfer+0x636>
 800740a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800740e:	095b      	lsrs	r3, r3, #5
 8007410:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007414:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007418:	f003 031f 	and.w	r3, r3, #31
 800741c:	2b00      	cmp	r3, #0
 800741e:	d104      	bne.n	800742a <USB_EPStartXfer+0x58e>
 8007420:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007424:	3b01      	subs	r3, #1
 8007426:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800742a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800742e:	b29b      	uxth	r3, r3
 8007430:	029b      	lsls	r3, r3, #10
 8007432:	b29b      	uxth	r3, r3
 8007434:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007438:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800743c:	b29a      	uxth	r2, r3
 800743e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007442:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	801a      	strh	r2, [r3, #0]
 800744a:	e042      	b.n	80074d2 <USB_EPStartXfer+0x636>
 800744c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007450:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	785b      	ldrb	r3, [r3, #1]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d13a      	bne.n	80074d2 <USB_EPStartXfer+0x636>
 800745c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007460:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007464:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007468:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800746c:	6812      	ldr	r2, [r2, #0]
 800746e:	601a      	str	r2, [r3, #0]
 8007470:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007474:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800747e:	b29b      	uxth	r3, r3
 8007480:	4619      	mov	r1, r3
 8007482:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007486:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800748a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800748e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8007492:	6812      	ldr	r2, [r2, #0]
 8007494:	440a      	add	r2, r1
 8007496:	601a      	str	r2, [r3, #0]
 8007498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800749c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	011a      	lsls	r2, r3, #4
 80074a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074aa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4413      	add	r3, r2
 80074b2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80074b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80074be:	601a      	str	r2, [r3, #0]
 80074c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80074d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	891b      	ldrh	r3, [r3, #8]
 80074de:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	6959      	ldr	r1, [r3, #20]
 80074ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80074f8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80074fc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007500:	6800      	ldr	r0, [r0, #0]
 8007502:	f001 fc41 	bl	8008d88 <USB_WritePMA>
 8007506:	f000 be0e 	b.w	8008126 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800750a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800750e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	785b      	ldrb	r3, [r3, #1]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d16d      	bne.n	80075f6 <USB_EPStartXfer+0x75a>
 800751a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800751e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	64bb      	str	r3, [r7, #72]	; 0x48
 8007526:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800752a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007534:	b29b      	uxth	r3, r3
 8007536:	461a      	mov	r2, r3
 8007538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800753a:	4413      	add	r3, r2
 800753c:	64bb      	str	r3, [r7, #72]	; 0x48
 800753e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007542:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	011a      	lsls	r2, r3, #4
 800754c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800754e:	4413      	add	r3, r2
 8007550:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007554:	647b      	str	r3, [r7, #68]	; 0x44
 8007556:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800755a:	2b00      	cmp	r3, #0
 800755c:	d112      	bne.n	8007584 <USB_EPStartXfer+0x6e8>
 800755e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007560:	881b      	ldrh	r3, [r3, #0]
 8007562:	b29b      	uxth	r3, r3
 8007564:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007568:	b29a      	uxth	r2, r3
 800756a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800756c:	801a      	strh	r2, [r3, #0]
 800756e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007570:	881b      	ldrh	r3, [r3, #0]
 8007572:	b29b      	uxth	r3, r3
 8007574:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007578:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800757c:	b29a      	uxth	r2, r3
 800757e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007580:	801a      	strh	r2, [r3, #0]
 8007582:	e063      	b.n	800764c <USB_EPStartXfer+0x7b0>
 8007584:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007588:	2b3e      	cmp	r3, #62	; 0x3e
 800758a:	d817      	bhi.n	80075bc <USB_EPStartXfer+0x720>
 800758c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007590:	085b      	lsrs	r3, r3, #1
 8007592:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007596:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800759a:	f003 0301 	and.w	r3, r3, #1
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d004      	beq.n	80075ac <USB_EPStartXfer+0x710>
 80075a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80075a6:	3301      	adds	r3, #1
 80075a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80075ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	029b      	lsls	r3, r3, #10
 80075b4:	b29a      	uxth	r2, r3
 80075b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075b8:	801a      	strh	r2, [r3, #0]
 80075ba:	e047      	b.n	800764c <USB_EPStartXfer+0x7b0>
 80075bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075c0:	095b      	lsrs	r3, r3, #5
 80075c2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80075c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ca:	f003 031f 	and.w	r3, r3, #31
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d104      	bne.n	80075dc <USB_EPStartXfer+0x740>
 80075d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80075d6:	3b01      	subs	r3, #1
 80075d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80075dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	029b      	lsls	r3, r3, #10
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075f2:	801a      	strh	r2, [r3, #0]
 80075f4:	e02a      	b.n	800764c <USB_EPStartXfer+0x7b0>
 80075f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	785b      	ldrb	r3, [r3, #1]
 8007602:	2b01      	cmp	r3, #1
 8007604:	d122      	bne.n	800764c <USB_EPStartXfer+0x7b0>
 8007606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800760a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	653b      	str	r3, [r7, #80]	; 0x50
 8007612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007616:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007620:	b29b      	uxth	r3, r3
 8007622:	461a      	mov	r2, r3
 8007624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007626:	4413      	add	r3, r2
 8007628:	653b      	str	r3, [r7, #80]	; 0x50
 800762a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800762e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	011a      	lsls	r2, r3, #4
 8007638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800763a:	4413      	add	r3, r2
 800763c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007640:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007642:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007646:	b29a      	uxth	r2, r3
 8007648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800764a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800764c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007650:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	891b      	ldrh	r3, [r3, #8]
 8007658:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800765c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007660:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	6959      	ldr	r1, [r3, #20]
 8007668:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800766c:	b29b      	uxth	r3, r3
 800766e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007672:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007676:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800767a:	6800      	ldr	r0, [r0, #0]
 800767c:	f001 fb84 	bl	8008d88 <USB_WritePMA>
            ep->xfer_buff += len;
 8007680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007684:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	695a      	ldr	r2, [r3, #20]
 800768c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007690:	441a      	add	r2, r3
 8007692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007696:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800769e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	6a1a      	ldr	r2, [r3, #32]
 80076aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d90f      	bls.n	80076da <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80076ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	6a1a      	ldr	r2, [r3, #32]
 80076c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076ca:	1ad2      	subs	r2, r2, r3
 80076cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	621a      	str	r2, [r3, #32]
 80076d8:	e00e      	b.n	80076f8 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80076da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6a1b      	ldr	r3, [r3, #32]
 80076e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80076ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2200      	movs	r2, #0
 80076f6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	643b      	str	r3, [r7, #64]	; 0x40
 8007704:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007708:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	785b      	ldrb	r3, [r3, #1]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d16d      	bne.n	80077f0 <USB_EPStartXfer+0x954>
 8007714:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007718:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007720:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007724:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800772e:	b29b      	uxth	r3, r3
 8007730:	461a      	mov	r2, r3
 8007732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007734:	4413      	add	r3, r2
 8007736:	63bb      	str	r3, [r7, #56]	; 0x38
 8007738:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800773c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	011a      	lsls	r2, r3, #4
 8007746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007748:	4413      	add	r3, r2
 800774a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800774e:	637b      	str	r3, [r7, #52]	; 0x34
 8007750:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007754:	2b00      	cmp	r3, #0
 8007756:	d112      	bne.n	800777e <USB_EPStartXfer+0x8e2>
 8007758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800775a:	881b      	ldrh	r3, [r3, #0]
 800775c:	b29b      	uxth	r3, r3
 800775e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007762:	b29a      	uxth	r2, r3
 8007764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007766:	801a      	strh	r2, [r3, #0]
 8007768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800776a:	881b      	ldrh	r3, [r3, #0]
 800776c:	b29b      	uxth	r3, r3
 800776e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007772:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007776:	b29a      	uxth	r2, r3
 8007778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800777a:	801a      	strh	r2, [r3, #0]
 800777c:	e05d      	b.n	800783a <USB_EPStartXfer+0x99e>
 800777e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007782:	2b3e      	cmp	r3, #62	; 0x3e
 8007784:	d817      	bhi.n	80077b6 <USB_EPStartXfer+0x91a>
 8007786:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800778a:	085b      	lsrs	r3, r3, #1
 800778c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007790:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007794:	f003 0301 	and.w	r3, r3, #1
 8007798:	2b00      	cmp	r3, #0
 800779a:	d004      	beq.n	80077a6 <USB_EPStartXfer+0x90a>
 800779c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80077a0:	3301      	adds	r3, #1
 80077a2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80077a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	029b      	lsls	r3, r3, #10
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077b2:	801a      	strh	r2, [r3, #0]
 80077b4:	e041      	b.n	800783a <USB_EPStartXfer+0x99e>
 80077b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077ba:	095b      	lsrs	r3, r3, #5
 80077bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80077c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077c4:	f003 031f 	and.w	r3, r3, #31
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d104      	bne.n	80077d6 <USB_EPStartXfer+0x93a>
 80077cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80077d0:	3b01      	subs	r3, #1
 80077d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80077d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80077da:	b29b      	uxth	r3, r3
 80077dc:	029b      	lsls	r3, r3, #10
 80077de:	b29b      	uxth	r3, r3
 80077e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ec:	801a      	strh	r2, [r3, #0]
 80077ee:	e024      	b.n	800783a <USB_EPStartXfer+0x99e>
 80077f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	785b      	ldrb	r3, [r3, #1]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d11c      	bne.n	800783a <USB_EPStartXfer+0x99e>
 8007800:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007804:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800780e:	b29b      	uxth	r3, r3
 8007810:	461a      	mov	r2, r3
 8007812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007814:	4413      	add	r3, r2
 8007816:	643b      	str	r3, [r7, #64]	; 0x40
 8007818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800781c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	011a      	lsls	r2, r3, #4
 8007826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007828:	4413      	add	r3, r2
 800782a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800782e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007830:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007834:	b29a      	uxth	r2, r3
 8007836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007838:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800783a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800783e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	895b      	ldrh	r3, [r3, #10]
 8007846:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800784a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800784e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	6959      	ldr	r1, [r3, #20]
 8007856:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800785a:	b29b      	uxth	r3, r3
 800785c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007860:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007864:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007868:	6800      	ldr	r0, [r0, #0]
 800786a:	f001 fa8d 	bl	8008d88 <USB_WritePMA>
 800786e:	f000 bc5a 	b.w	8008126 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007876:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	6a1b      	ldr	r3, [r3, #32]
 800787e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007886:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007890:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	4413      	add	r3, r2
 800789c:	881b      	ldrh	r3, [r3, #0]
 800789e:	b29b      	uxth	r3, r3
 80078a0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80078a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078a8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80078ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	441a      	add	r2, r3
 80078c6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80078ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078da:	b29b      	uxth	r3, r3
 80078dc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80078de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	461a      	mov	r2, r3
 80078fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078fe:	4413      	add	r3, r2
 8007900:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007906:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	011a      	lsls	r2, r3, #4
 8007910:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007912:	4413      	add	r3, r2
 8007914:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007918:	65bb      	str	r3, [r7, #88]	; 0x58
 800791a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800791e:	b29a      	uxth	r2, r3
 8007920:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007922:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007924:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007928:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	891b      	ldrh	r3, [r3, #8]
 8007930:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007934:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007938:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	6959      	ldr	r1, [r3, #20]
 8007940:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007944:	b29b      	uxth	r3, r3
 8007946:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800794a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800794e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007952:	6800      	ldr	r0, [r0, #0]
 8007954:	f001 fa18 	bl	8008d88 <USB_WritePMA>
 8007958:	e3e5      	b.n	8008126 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800795a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800795e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007968:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	4413      	add	r3, r2
 8007974:	881b      	ldrh	r3, [r3, #0]
 8007976:	b29b      	uxth	r3, r3
 8007978:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800797c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007980:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007988:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007992:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	441a      	add	r2, r3
 800799e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80079a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079aa:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80079ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80079b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	6a1a      	ldr	r2, [r3, #32]
 80079c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079c6:	1ad2      	subs	r2, r2, r3
 80079c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80079d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	4413      	add	r3, r2
 80079ee:	881b      	ldrh	r3, [r3, #0]
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	f000 81bc 	beq.w	8007d74 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80079fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	785b      	ldrb	r3, [r3, #1]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d16d      	bne.n	8007af6 <USB_EPStartXfer+0xc5a>
 8007a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	461a      	mov	r2, r3
 8007a38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a3a:	4413      	add	r3, r2
 8007a3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	011a      	lsls	r2, r3, #4
 8007a4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a4e:	4413      	add	r3, r2
 8007a50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a54:	677b      	str	r3, [r7, #116]	; 0x74
 8007a56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d112      	bne.n	8007a84 <USB_EPStartXfer+0xbe8>
 8007a5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a60:	881b      	ldrh	r3, [r3, #0]
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a6c:	801a      	strh	r2, [r3, #0]
 8007a6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a70:	881b      	ldrh	r3, [r3, #0]
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a80:	801a      	strh	r2, [r3, #0]
 8007a82:	e060      	b.n	8007b46 <USB_EPStartXfer+0xcaa>
 8007a84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a88:	2b3e      	cmp	r3, #62	; 0x3e
 8007a8a:	d817      	bhi.n	8007abc <USB_EPStartXfer+0xc20>
 8007a8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a90:	085b      	lsrs	r3, r3, #1
 8007a92:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007a96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d004      	beq.n	8007aac <USB_EPStartXfer+0xc10>
 8007aa2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007aac:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	029b      	lsls	r3, r3, #10
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ab8:	801a      	strh	r2, [r3, #0]
 8007aba:	e044      	b.n	8007b46 <USB_EPStartXfer+0xcaa>
 8007abc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ac0:	095b      	lsrs	r3, r3, #5
 8007ac2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007ac6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aca:	f003 031f 	and.w	r3, r3, #31
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d104      	bne.n	8007adc <USB_EPStartXfer+0xc40>
 8007ad2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007adc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	029b      	lsls	r3, r3, #10
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007af2:	801a      	strh	r2, [r3, #0]
 8007af4:	e027      	b.n	8007b46 <USB_EPStartXfer+0xcaa>
 8007af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007afa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	785b      	ldrb	r3, [r3, #1]
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d11f      	bne.n	8007b46 <USB_EPStartXfer+0xcaa>
 8007b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	461a      	mov	r2, r3
 8007b18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b1c:	4413      	add	r3, r2
 8007b1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	011a      	lsls	r2, r3, #4
 8007b30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b34:	4413      	add	r3, r2
 8007b36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b44:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007b46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	895b      	ldrh	r3, [r3, #10]
 8007b52:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	6959      	ldr	r1, [r3, #20]
 8007b62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007b6c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007b70:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007b74:	6800      	ldr	r0, [r0, #0]
 8007b76:	f001 f907 	bl	8008d88 <USB_WritePMA>
          ep->xfer_buff += len;
 8007b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	695a      	ldr	r2, [r3, #20]
 8007b86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b8a:	441a      	add	r2, r3
 8007b8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007b98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	6a1a      	ldr	r2, [r3, #32]
 8007ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ba8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d90f      	bls.n	8007bd4 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	6a1a      	ldr	r2, [r3, #32]
 8007bc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bc4:	1ad2      	subs	r2, r2, r3
 8007bc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	621a      	str	r2, [r3, #32]
 8007bd2:	e00e      	b.n	8007bf2 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007bd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	6a1b      	ldr	r3, [r3, #32]
 8007be0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007be4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007be8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007bf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f000 8295 	beq.w	8008126 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	785b      	ldrb	r3, [r3, #1]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d16d      	bne.n	8007ce8 <USB_EPStartXfer+0xe4c>
 8007c0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	461a      	mov	r2, r3
 8007c2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c2c:	4413      	add	r3, r2
 8007c2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	011a      	lsls	r2, r3, #4
 8007c3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c40:	4413      	add	r3, r2
 8007c42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c46:	667b      	str	r3, [r7, #100]	; 0x64
 8007c48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d112      	bne.n	8007c76 <USB_EPStartXfer+0xdda>
 8007c50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c52:	881b      	ldrh	r3, [r3, #0]
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c5e:	801a      	strh	r2, [r3, #0]
 8007c60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c62:	881b      	ldrh	r3, [r3, #0]
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c6e:	b29a      	uxth	r2, r3
 8007c70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c72:	801a      	strh	r2, [r3, #0]
 8007c74:	e063      	b.n	8007d3e <USB_EPStartXfer+0xea2>
 8007c76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c7a:	2b3e      	cmp	r3, #62	; 0x3e
 8007c7c:	d817      	bhi.n	8007cae <USB_EPStartXfer+0xe12>
 8007c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c82:	085b      	lsrs	r3, r3, #1
 8007c84:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007c88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c8c:	f003 0301 	and.w	r3, r3, #1
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d004      	beq.n	8007c9e <USB_EPStartXfer+0xe02>
 8007c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c98:	3301      	adds	r3, #1
 8007c9a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	029b      	lsls	r3, r3, #10
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007caa:	801a      	strh	r2, [r3, #0]
 8007cac:	e047      	b.n	8007d3e <USB_EPStartXfer+0xea2>
 8007cae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cb2:	095b      	lsrs	r3, r3, #5
 8007cb4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007cb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cbc:	f003 031f 	and.w	r3, r3, #31
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d104      	bne.n	8007cce <USB_EPStartXfer+0xe32>
 8007cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	029b      	lsls	r3, r3, #10
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ce4:	801a      	strh	r2, [r3, #0]
 8007ce6:	e02a      	b.n	8007d3e <USB_EPStartXfer+0xea2>
 8007ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	785b      	ldrb	r3, [r3, #1]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d122      	bne.n	8007d3e <USB_EPStartXfer+0xea2>
 8007cf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cfc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	673b      	str	r3, [r7, #112]	; 0x70
 8007d04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	461a      	mov	r2, r3
 8007d16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d18:	4413      	add	r3, r2
 8007d1a:	673b      	str	r3, [r7, #112]	; 0x70
 8007d1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	011a      	lsls	r2, r3, #4
 8007d2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d2c:	4413      	add	r3, r2
 8007d2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d38:	b29a      	uxth	r2, r3
 8007d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d3c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007d3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	891b      	ldrh	r3, [r3, #8]
 8007d4a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	6959      	ldr	r1, [r3, #20]
 8007d5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007d64:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007d68:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007d6c:	6800      	ldr	r0, [r0, #0]
 8007d6e:	f001 f80b 	bl	8008d88 <USB_WritePMA>
 8007d72:	e1d8      	b.n	8008126 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	785b      	ldrb	r3, [r3, #1]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d178      	bne.n	8007e76 <USB_EPStartXfer+0xfda>
 8007d84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	461a      	mov	r2, r3
 8007da4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007da8:	4413      	add	r3, r2
 8007daa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007dae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007db2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	011a      	lsls	r2, r3, #4
 8007dbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007dc0:	4413      	add	r3, r2
 8007dc2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007dc6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007dca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d116      	bne.n	8007e00 <USB_EPStartXfer+0xf64>
 8007dd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dd6:	881b      	ldrh	r3, [r3, #0]
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007de4:	801a      	strh	r2, [r3, #0]
 8007de6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dea:	881b      	ldrh	r3, [r3, #0]
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007df2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dfc:	801a      	strh	r2, [r3, #0]
 8007dfe:	e06b      	b.n	8007ed8 <USB_EPStartXfer+0x103c>
 8007e00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e04:	2b3e      	cmp	r3, #62	; 0x3e
 8007e06:	d818      	bhi.n	8007e3a <USB_EPStartXfer+0xf9e>
 8007e08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e0c:	085b      	lsrs	r3, r3, #1
 8007e0e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007e12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e16:	f003 0301 	and.w	r3, r3, #1
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d004      	beq.n	8007e28 <USB_EPStartXfer+0xf8c>
 8007e1e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e22:	3301      	adds	r3, #1
 8007e24:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007e28:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	029b      	lsls	r3, r3, #10
 8007e30:	b29a      	uxth	r2, r3
 8007e32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e36:	801a      	strh	r2, [r3, #0]
 8007e38:	e04e      	b.n	8007ed8 <USB_EPStartXfer+0x103c>
 8007e3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e3e:	095b      	lsrs	r3, r3, #5
 8007e40:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007e44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e48:	f003 031f 	and.w	r3, r3, #31
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d104      	bne.n	8007e5a <USB_EPStartXfer+0xfbe>
 8007e50:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e54:	3b01      	subs	r3, #1
 8007e56:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007e5a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	029b      	lsls	r3, r3, #10
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e72:	801a      	strh	r2, [r3, #0]
 8007e74:	e030      	b.n	8007ed8 <USB_EPStartXfer+0x103c>
 8007e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	785b      	ldrb	r3, [r3, #1]
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d128      	bne.n	8007ed8 <USB_EPStartXfer+0x103c>
 8007e86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007e94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007eaa:	4413      	add	r3, r2
 8007eac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007eb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	011a      	lsls	r2, r3, #4
 8007ebe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007ec2:	4413      	add	r3, r2
 8007ec4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ec8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007ecc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ed0:	b29a      	uxth	r2, r3
 8007ed2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007ed6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007ed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007edc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	891b      	ldrh	r3, [r3, #8]
 8007ee4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ee8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	6959      	ldr	r1, [r3, #20]
 8007ef4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007efe:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007f02:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007f06:	6800      	ldr	r0, [r0, #0]
 8007f08:	f000 ff3e 	bl	8008d88 <USB_WritePMA>
          ep->xfer_buff += len;
 8007f0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	695a      	ldr	r2, [r3, #20]
 8007f18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f1c:	441a      	add	r2, r3
 8007f1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007f2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	6a1a      	ldr	r2, [r3, #32]
 8007f36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d90f      	bls.n	8007f66 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8007f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	6a1a      	ldr	r2, [r3, #32]
 8007f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f56:	1ad2      	subs	r2, r2, r3
 8007f58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	621a      	str	r2, [r3, #32]
 8007f64:	e00e      	b.n	8007f84 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8007f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	6a1b      	ldr	r3, [r3, #32]
 8007f72:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007f76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2200      	movs	r2, #0
 8007f82:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007f84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	f000 80cc 	beq.w	8008126 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	785b      	ldrb	r3, [r3, #1]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d178      	bne.n	800809e <USB_EPStartXfer+0x1202>
 8007fac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fb0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	461a      	mov	r2, r3
 8007fcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007fd0:	4413      	add	r3, r2
 8007fd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007fd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	011a      	lsls	r2, r3, #4
 8007fe4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007fe8:	4413      	add	r3, r2
 8007fea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007fee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ff2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d116      	bne.n	8008028 <USB_EPStartXfer+0x118c>
 8007ffa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ffe:	881b      	ldrh	r3, [r3, #0]
 8008000:	b29b      	uxth	r3, r3
 8008002:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008006:	b29a      	uxth	r2, r3
 8008008:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800800c:	801a      	strh	r2, [r3, #0]
 800800e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008012:	881b      	ldrh	r3, [r3, #0]
 8008014:	b29b      	uxth	r3, r3
 8008016:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800801a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800801e:	b29a      	uxth	r2, r3
 8008020:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008024:	801a      	strh	r2, [r3, #0]
 8008026:	e064      	b.n	80080f2 <USB_EPStartXfer+0x1256>
 8008028:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800802c:	2b3e      	cmp	r3, #62	; 0x3e
 800802e:	d818      	bhi.n	8008062 <USB_EPStartXfer+0x11c6>
 8008030:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008034:	085b      	lsrs	r3, r3, #1
 8008036:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800803a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800803e:	f003 0301 	and.w	r3, r3, #1
 8008042:	2b00      	cmp	r3, #0
 8008044:	d004      	beq.n	8008050 <USB_EPStartXfer+0x11b4>
 8008046:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800804a:	3301      	adds	r3, #1
 800804c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008050:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008054:	b29b      	uxth	r3, r3
 8008056:	029b      	lsls	r3, r3, #10
 8008058:	b29a      	uxth	r2, r3
 800805a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800805e:	801a      	strh	r2, [r3, #0]
 8008060:	e047      	b.n	80080f2 <USB_EPStartXfer+0x1256>
 8008062:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008066:	095b      	lsrs	r3, r3, #5
 8008068:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800806c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008070:	f003 031f 	and.w	r3, r3, #31
 8008074:	2b00      	cmp	r3, #0
 8008076:	d104      	bne.n	8008082 <USB_EPStartXfer+0x11e6>
 8008078:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800807c:	3b01      	subs	r3, #1
 800807e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008082:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008086:	b29b      	uxth	r3, r3
 8008088:	029b      	lsls	r3, r3, #10
 800808a:	b29b      	uxth	r3, r3
 800808c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008094:	b29a      	uxth	r2, r3
 8008096:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800809a:	801a      	strh	r2, [r3, #0]
 800809c:	e029      	b.n	80080f2 <USB_EPStartXfer+0x1256>
 800809e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	785b      	ldrb	r3, [r3, #1]
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d121      	bne.n	80080f2 <USB_EPStartXfer+0x1256>
 80080ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080bc:	b29b      	uxth	r3, r3
 80080be:	461a      	mov	r2, r3
 80080c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80080c4:	4413      	add	r3, r2
 80080c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80080ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	011a      	lsls	r2, r3, #4
 80080d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80080dc:	4413      	add	r3, r2
 80080de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80080e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80080e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080ea:	b29a      	uxth	r2, r3
 80080ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80080f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	895b      	ldrh	r3, [r3, #10]
 80080fe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008106:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	6959      	ldr	r1, [r3, #20]
 800810e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008112:	b29b      	uxth	r3, r3
 8008114:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008118:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800811c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008120:	6800      	ldr	r0, [r0, #0]
 8008122:	f000 fe31 	bl	8008d88 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800812a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008134:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	4413      	add	r3, r2
 8008140:	881b      	ldrh	r3, [r3, #0]
 8008142:	b29b      	uxth	r3, r3
 8008144:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008148:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800814c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008150:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008154:	8013      	strh	r3, [r2, #0]
 8008156:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800815a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800815e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008162:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008166:	8812      	ldrh	r2, [r2, #0]
 8008168:	f082 0210 	eor.w	r2, r2, #16
 800816c:	801a      	strh	r2, [r3, #0]
 800816e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008172:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008176:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800817a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800817e:	8812      	ldrh	r2, [r2, #0]
 8008180:	f082 0220 	eor.w	r2, r2, #32
 8008184:	801a      	strh	r2, [r3, #0]
 8008186:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800818a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008194:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	441a      	add	r2, r3
 80081a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081a4:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80081a8:	881b      	ldrh	r3, [r3, #0]
 80081aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	8013      	strh	r3, [r2, #0]
 80081be:	f000 bc9f 	b.w	8008b00 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80081c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	7b1b      	ldrb	r3, [r3, #12]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	f040 80ae 	bne.w	8008330 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80081d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	699a      	ldr	r2, [r3, #24]
 80081e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d917      	bls.n	8008220 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80081f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	691b      	ldr	r3, [r3, #16]
 80081fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8008200:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008204:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	699a      	ldr	r2, [r3, #24]
 800820c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008210:	1ad2      	subs	r2, r2, r3
 8008212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008216:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	619a      	str	r2, [r3, #24]
 800821e:	e00e      	b.n	800823e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8008220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008224:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8008230:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008234:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2200      	movs	r2, #0
 800823c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800823e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008242:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800824c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008250:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800825a:	b29b      	uxth	r3, r3
 800825c:	461a      	mov	r2, r3
 800825e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008262:	4413      	add	r3, r2
 8008264:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008268:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800826c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	011a      	lsls	r2, r3, #4
 8008276:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800827a:	4413      	add	r3, r2
 800827c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008280:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008284:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008288:	2b00      	cmp	r3, #0
 800828a:	d116      	bne.n	80082ba <USB_EPStartXfer+0x141e>
 800828c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008290:	881b      	ldrh	r3, [r3, #0]
 8008292:	b29b      	uxth	r3, r3
 8008294:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008298:	b29a      	uxth	r2, r3
 800829a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800829e:	801a      	strh	r2, [r3, #0]
 80082a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082a4:	881b      	ldrh	r3, [r3, #0]
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082b6:	801a      	strh	r2, [r3, #0]
 80082b8:	e3e8      	b.n	8008a8c <USB_EPStartXfer+0x1bf0>
 80082ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082be:	2b3e      	cmp	r3, #62	; 0x3e
 80082c0:	d818      	bhi.n	80082f4 <USB_EPStartXfer+0x1458>
 80082c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082c6:	085b      	lsrs	r3, r3, #1
 80082c8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80082cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082d0:	f003 0301 	and.w	r3, r3, #1
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d004      	beq.n	80082e2 <USB_EPStartXfer+0x1446>
 80082d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80082dc:	3301      	adds	r3, #1
 80082de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80082e2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	029b      	lsls	r3, r3, #10
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082f0:	801a      	strh	r2, [r3, #0]
 80082f2:	e3cb      	b.n	8008a8c <USB_EPStartXfer+0x1bf0>
 80082f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082f8:	095b      	lsrs	r3, r3, #5
 80082fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80082fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008302:	f003 031f 	and.w	r3, r3, #31
 8008306:	2b00      	cmp	r3, #0
 8008308:	d104      	bne.n	8008314 <USB_EPStartXfer+0x1478>
 800830a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800830e:	3b01      	subs	r3, #1
 8008310:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008314:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008318:	b29b      	uxth	r3, r3
 800831a:	029b      	lsls	r3, r3, #10
 800831c:	b29b      	uxth	r3, r3
 800831e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008326:	b29a      	uxth	r2, r3
 8008328:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800832c:	801a      	strh	r2, [r3, #0]
 800832e:	e3ad      	b.n	8008a8c <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008330:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008334:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	78db      	ldrb	r3, [r3, #3]
 800833c:	2b02      	cmp	r3, #2
 800833e:	f040 8200 	bne.w	8008742 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008346:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	785b      	ldrb	r3, [r3, #1]
 800834e:	2b00      	cmp	r3, #0
 8008350:	f040 8091 	bne.w	8008476 <USB_EPStartXfer+0x15da>
 8008354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008358:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008366:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008370:	b29b      	uxth	r3, r3
 8008372:	461a      	mov	r2, r3
 8008374:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008378:	4413      	add	r3, r2
 800837a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800837e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008382:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	011a      	lsls	r2, r3, #4
 800838c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008390:	4413      	add	r3, r2
 8008392:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008396:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800839a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800839e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d116      	bne.n	80083d8 <USB_EPStartXfer+0x153c>
 80083aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083ae:	881b      	ldrh	r3, [r3, #0]
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083b6:	b29a      	uxth	r2, r3
 80083b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083bc:	801a      	strh	r2, [r3, #0]
 80083be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083c2:	881b      	ldrh	r3, [r3, #0]
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083ce:	b29a      	uxth	r2, r3
 80083d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083d4:	801a      	strh	r2, [r3, #0]
 80083d6:	e083      	b.n	80084e0 <USB_EPStartXfer+0x1644>
 80083d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	2b3e      	cmp	r3, #62	; 0x3e
 80083e6:	d820      	bhi.n	800842a <USB_EPStartXfer+0x158e>
 80083e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	085b      	lsrs	r3, r3, #1
 80083f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80083fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	f003 0301 	and.w	r3, r3, #1
 800840a:	2b00      	cmp	r3, #0
 800840c:	d004      	beq.n	8008418 <USB_EPStartXfer+0x157c>
 800840e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008412:	3301      	adds	r3, #1
 8008414:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008418:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800841c:	b29b      	uxth	r3, r3
 800841e:	029b      	lsls	r3, r3, #10
 8008420:	b29a      	uxth	r2, r3
 8008422:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008426:	801a      	strh	r2, [r3, #0]
 8008428:	e05a      	b.n	80084e0 <USB_EPStartXfer+0x1644>
 800842a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800842e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	095b      	lsrs	r3, r3, #5
 8008438:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800843c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008440:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	f003 031f 	and.w	r3, r3, #31
 800844c:	2b00      	cmp	r3, #0
 800844e:	d104      	bne.n	800845a <USB_EPStartXfer+0x15be>
 8008450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008454:	3b01      	subs	r3, #1
 8008456:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800845a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800845e:	b29b      	uxth	r3, r3
 8008460:	029b      	lsls	r3, r3, #10
 8008462:	b29b      	uxth	r3, r3
 8008464:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008468:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800846c:	b29a      	uxth	r2, r3
 800846e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008472:	801a      	strh	r2, [r3, #0]
 8008474:	e034      	b.n	80084e0 <USB_EPStartXfer+0x1644>
 8008476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800847a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	785b      	ldrb	r3, [r3, #1]
 8008482:	2b01      	cmp	r3, #1
 8008484:	d12c      	bne.n	80084e0 <USB_EPStartXfer+0x1644>
 8008486:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800848a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008494:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008498:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	461a      	mov	r2, r3
 80084a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084aa:	4413      	add	r3, r2
 80084ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80084b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	011a      	lsls	r2, r3, #4
 80084be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084c2:	4413      	add	r3, r2
 80084c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80084c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80084cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	b29a      	uxth	r2, r3
 80084da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80084de:	801a      	strh	r2, [r3, #0]
 80084e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80084ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	785b      	ldrb	r3, [r3, #1]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	f040 8091 	bne.w	8008622 <USB_EPStartXfer+0x1786>
 8008500:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008504:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800850e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008512:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800851c:	b29b      	uxth	r3, r3
 800851e:	461a      	mov	r2, r3
 8008520:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008524:	4413      	add	r3, r2
 8008526:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800852a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800852e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	011a      	lsls	r2, r3, #4
 8008538:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800853c:	4413      	add	r3, r2
 800853e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008542:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008546:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800854a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d116      	bne.n	8008584 <USB_EPStartXfer+0x16e8>
 8008556:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800855a:	881b      	ldrh	r3, [r3, #0]
 800855c:	b29b      	uxth	r3, r3
 800855e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008562:	b29a      	uxth	r2, r3
 8008564:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008568:	801a      	strh	r2, [r3, #0]
 800856a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800856e:	881b      	ldrh	r3, [r3, #0]
 8008570:	b29b      	uxth	r3, r3
 8008572:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008576:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800857a:	b29a      	uxth	r2, r3
 800857c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008580:	801a      	strh	r2, [r3, #0]
 8008582:	e07c      	b.n	800867e <USB_EPStartXfer+0x17e2>
 8008584:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008588:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	691b      	ldr	r3, [r3, #16]
 8008590:	2b3e      	cmp	r3, #62	; 0x3e
 8008592:	d820      	bhi.n	80085d6 <USB_EPStartXfer+0x173a>
 8008594:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008598:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	691b      	ldr	r3, [r3, #16]
 80085a0:	085b      	lsrs	r3, r3, #1
 80085a2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80085a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	f003 0301 	and.w	r3, r3, #1
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d004      	beq.n	80085c4 <USB_EPStartXfer+0x1728>
 80085ba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80085be:	3301      	adds	r3, #1
 80085c0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80085c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	029b      	lsls	r3, r3, #10
 80085cc:	b29a      	uxth	r2, r3
 80085ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085d2:	801a      	strh	r2, [r3, #0]
 80085d4:	e053      	b.n	800867e <USB_EPStartXfer+0x17e2>
 80085d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	095b      	lsrs	r3, r3, #5
 80085e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80085e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	691b      	ldr	r3, [r3, #16]
 80085f4:	f003 031f 	and.w	r3, r3, #31
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d104      	bne.n	8008606 <USB_EPStartXfer+0x176a>
 80085fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008600:	3b01      	subs	r3, #1
 8008602:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008606:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800860a:	b29b      	uxth	r3, r3
 800860c:	029b      	lsls	r3, r3, #10
 800860e:	b29b      	uxth	r3, r3
 8008610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008618:	b29a      	uxth	r2, r3
 800861a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800861e:	801a      	strh	r2, [r3, #0]
 8008620:	e02d      	b.n	800867e <USB_EPStartXfer+0x17e2>
 8008622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008626:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	785b      	ldrb	r3, [r3, #1]
 800862e:	2b01      	cmp	r3, #1
 8008630:	d125      	bne.n	800867e <USB_EPStartXfer+0x17e2>
 8008632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008636:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008640:	b29b      	uxth	r3, r3
 8008642:	461a      	mov	r2, r3
 8008644:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008648:	4413      	add	r3, r2
 800864a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800864e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008652:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	011a      	lsls	r2, r3, #4
 800865c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008660:	4413      	add	r3, r2
 8008662:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008666:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800866a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800866e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	691b      	ldr	r3, [r3, #16]
 8008676:	b29a      	uxth	r2, r3
 8008678:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800867c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800867e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008682:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	69db      	ldr	r3, [r3, #28]
 800868a:	2b00      	cmp	r3, #0
 800868c:	f000 81fe 	beq.w	8008a8c <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008690:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008694:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800869e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	4413      	add	r3, r2
 80086aa:	881b      	ldrh	r3, [r3, #0]
 80086ac:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80086b0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80086b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d005      	beq.n	80086c8 <USB_EPStartXfer+0x182c>
 80086bc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80086c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d10d      	bne.n	80086e4 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80086c8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80086cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	f040 81db 	bne.w	8008a8c <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80086d6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80086da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086de:	2b00      	cmp	r3, #0
 80086e0:	f040 81d4 	bne.w	8008a8c <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80086e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	4413      	add	r3, r2
 80086fe:	881b      	ldrh	r3, [r3, #0]
 8008700:	b29b      	uxth	r3, r3
 8008702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800870a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800870e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008712:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800871c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	441a      	add	r2, r3
 8008728:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800872c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008730:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008734:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008738:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800873c:	b29b      	uxth	r3, r3
 800873e:	8013      	strh	r3, [r2, #0]
 8008740:	e1a4      	b.n	8008a8c <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008742:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008746:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	78db      	ldrb	r3, [r3, #3]
 800874e:	2b01      	cmp	r3, #1
 8008750:	f040 819a 	bne.w	8008a88 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008758:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	699a      	ldr	r2, [r3, #24]
 8008760:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008764:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	429a      	cmp	r2, r3
 800876e:	d917      	bls.n	80087a0 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8008770:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008774:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	691b      	ldr	r3, [r3, #16]
 800877c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8008780:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008784:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	699a      	ldr	r2, [r3, #24]
 800878c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008790:	1ad2      	subs	r2, r2, r3
 8008792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008796:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	619a      	str	r2, [r3, #24]
 800879e:	e00e      	b.n	80087be <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80087a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	699b      	ldr	r3, [r3, #24]
 80087ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80087b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2200      	movs	r2, #0
 80087bc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80087be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	785b      	ldrb	r3, [r3, #1]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d178      	bne.n	80088c0 <USB_EPStartXfer+0x1a24>
 80087ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80087dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	461a      	mov	r2, r3
 80087ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087f2:	4413      	add	r3, r2
 80087f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80087f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	011a      	lsls	r2, r3, #4
 8008806:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800880a:	4413      	add	r3, r2
 800880c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008810:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008814:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008818:	2b00      	cmp	r3, #0
 800881a:	d116      	bne.n	800884a <USB_EPStartXfer+0x19ae>
 800881c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008820:	881b      	ldrh	r3, [r3, #0]
 8008822:	b29b      	uxth	r3, r3
 8008824:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008828:	b29a      	uxth	r2, r3
 800882a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800882e:	801a      	strh	r2, [r3, #0]
 8008830:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008834:	881b      	ldrh	r3, [r3, #0]
 8008836:	b29b      	uxth	r3, r3
 8008838:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800883c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008840:	b29a      	uxth	r2, r3
 8008842:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008846:	801a      	strh	r2, [r3, #0]
 8008848:	e06b      	b.n	8008922 <USB_EPStartXfer+0x1a86>
 800884a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800884e:	2b3e      	cmp	r3, #62	; 0x3e
 8008850:	d818      	bhi.n	8008884 <USB_EPStartXfer+0x19e8>
 8008852:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008856:	085b      	lsrs	r3, r3, #1
 8008858:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800885c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008860:	f003 0301 	and.w	r3, r3, #1
 8008864:	2b00      	cmp	r3, #0
 8008866:	d004      	beq.n	8008872 <USB_EPStartXfer+0x19d6>
 8008868:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800886c:	3301      	adds	r3, #1
 800886e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008872:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008876:	b29b      	uxth	r3, r3
 8008878:	029b      	lsls	r3, r3, #10
 800887a:	b29a      	uxth	r2, r3
 800887c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008880:	801a      	strh	r2, [r3, #0]
 8008882:	e04e      	b.n	8008922 <USB_EPStartXfer+0x1a86>
 8008884:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008888:	095b      	lsrs	r3, r3, #5
 800888a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800888e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008892:	f003 031f 	and.w	r3, r3, #31
 8008896:	2b00      	cmp	r3, #0
 8008898:	d104      	bne.n	80088a4 <USB_EPStartXfer+0x1a08>
 800889a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800889e:	3b01      	subs	r3, #1
 80088a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80088a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	029b      	lsls	r3, r3, #10
 80088ac:	b29b      	uxth	r3, r3
 80088ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088b6:	b29a      	uxth	r2, r3
 80088b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088bc:	801a      	strh	r2, [r3, #0]
 80088be:	e030      	b.n	8008922 <USB_EPStartXfer+0x1a86>
 80088c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	785b      	ldrb	r3, [r3, #1]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d128      	bne.n	8008922 <USB_EPStartXfer+0x1a86>
 80088d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80088de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	461a      	mov	r2, r3
 80088f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088f4:	4413      	add	r3, r2
 80088f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80088fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	011a      	lsls	r2, r3, #4
 8008908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800890c:	4413      	add	r3, r2
 800890e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008912:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008916:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800891a:	b29a      	uxth	r2, r3
 800891c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008920:	801a      	strh	r2, [r3, #0]
 8008922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008926:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008934:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	785b      	ldrb	r3, [r3, #1]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d178      	bne.n	8008a32 <USB_EPStartXfer+0x1b96>
 8008940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008944:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800894e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008952:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800895c:	b29b      	uxth	r3, r3
 800895e:	461a      	mov	r2, r3
 8008960:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008964:	4413      	add	r3, r2
 8008966:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800896a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800896e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	011a      	lsls	r2, r3, #4
 8008978:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800897c:	4413      	add	r3, r2
 800897e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008982:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008986:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800898a:	2b00      	cmp	r3, #0
 800898c:	d116      	bne.n	80089bc <USB_EPStartXfer+0x1b20>
 800898e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008992:	881b      	ldrh	r3, [r3, #0]
 8008994:	b29b      	uxth	r3, r3
 8008996:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800899a:	b29a      	uxth	r2, r3
 800899c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089a0:	801a      	strh	r2, [r3, #0]
 80089a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089a6:	881b      	ldrh	r3, [r3, #0]
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089b8:	801a      	strh	r2, [r3, #0]
 80089ba:	e067      	b.n	8008a8c <USB_EPStartXfer+0x1bf0>
 80089bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089c0:	2b3e      	cmp	r3, #62	; 0x3e
 80089c2:	d818      	bhi.n	80089f6 <USB_EPStartXfer+0x1b5a>
 80089c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089c8:	085b      	lsrs	r3, r3, #1
 80089ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80089ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089d2:	f003 0301 	and.w	r3, r3, #1
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d004      	beq.n	80089e4 <USB_EPStartXfer+0x1b48>
 80089da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089de:	3301      	adds	r3, #1
 80089e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80089e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	029b      	lsls	r3, r3, #10
 80089ec:	b29a      	uxth	r2, r3
 80089ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089f2:	801a      	strh	r2, [r3, #0]
 80089f4:	e04a      	b.n	8008a8c <USB_EPStartXfer+0x1bf0>
 80089f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089fa:	095b      	lsrs	r3, r3, #5
 80089fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a04:	f003 031f 	and.w	r3, r3, #31
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d104      	bne.n	8008a16 <USB_EPStartXfer+0x1b7a>
 8008a0c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a10:	3b01      	subs	r3, #1
 8008a12:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	029b      	lsls	r3, r3, #10
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a28:	b29a      	uxth	r2, r3
 8008a2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a2e:	801a      	strh	r2, [r3, #0]
 8008a30:	e02c      	b.n	8008a8c <USB_EPStartXfer+0x1bf0>
 8008a32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	785b      	ldrb	r3, [r3, #1]
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d124      	bne.n	8008a8c <USB_EPStartXfer+0x1bf0>
 8008a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	461a      	mov	r2, r3
 8008a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a58:	4413      	add	r3, r2
 8008a5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	011a      	lsls	r2, r3, #4
 8008a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a70:	4413      	add	r3, r2
 8008a72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a76:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008a7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a7e:	b29a      	uxth	r2, r3
 8008a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a84:	801a      	strh	r2, [r3, #0]
 8008a86:	e001      	b.n	8008a8c <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e03a      	b.n	8008b02 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008a8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	4413      	add	r3, r2
 8008aa6:	881b      	ldrh	r3, [r3, #0]
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ab2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008ab6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008aba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008abe:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008ac2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008ac6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008aca:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008ace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ad2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008adc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	441a      	add	r2, r3
 8008ae8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008aec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008af0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008af4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008b00:	2300      	movs	r3, #0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b085      	sub	sp, #20
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	785b      	ldrb	r3, [r3, #1]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d020      	beq.n	8008b60 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	4413      	add	r3, r2
 8008b28:	881b      	ldrh	r3, [r3, #0]
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b34:	81bb      	strh	r3, [r7, #12]
 8008b36:	89bb      	ldrh	r3, [r7, #12]
 8008b38:	f083 0310 	eor.w	r3, r3, #16
 8008b3c:	81bb      	strh	r3, [r7, #12]
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	441a      	add	r2, r3
 8008b48:	89bb      	ldrh	r3, [r7, #12]
 8008b4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	8013      	strh	r3, [r2, #0]
 8008b5e:	e01f      	b.n	8008ba0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	4413      	add	r3, r2
 8008b6a:	881b      	ldrh	r3, [r3, #0]
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b76:	81fb      	strh	r3, [r7, #14]
 8008b78:	89fb      	ldrh	r3, [r7, #14]
 8008b7a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008b7e:	81fb      	strh	r3, [r7, #14]
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	441a      	add	r2, r3
 8008b8a:	89fb      	ldrh	r3, [r7, #14]
 8008b8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3714      	adds	r7, #20
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bc80      	pop	{r7}
 8008baa:	4770      	bx	lr

08008bac <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b087      	sub	sp, #28
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	7b1b      	ldrb	r3, [r3, #12]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	f040 809d 	bne.w	8008cfa <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	785b      	ldrb	r3, [r3, #1]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d04c      	beq.n	8008c62 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	4413      	add	r3, r2
 8008bd2:	881b      	ldrh	r3, [r3, #0]
 8008bd4:	823b      	strh	r3, [r7, #16]
 8008bd6:	8a3b      	ldrh	r3, [r7, #16]
 8008bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d01b      	beq.n	8008c18 <USB_EPClearStall+0x6c>
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	4413      	add	r3, r2
 8008bea:	881b      	ldrh	r3, [r3, #0]
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bf6:	81fb      	strh	r3, [r7, #14]
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	441a      	add	r2, r3
 8008c02:	89fb      	ldrh	r3, [r7, #14]
 8008c04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	78db      	ldrb	r3, [r3, #3]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d06c      	beq.n	8008cfa <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	4413      	add	r3, r2
 8008c2a:	881b      	ldrh	r3, [r3, #0]
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c36:	81bb      	strh	r3, [r7, #12]
 8008c38:	89bb      	ldrh	r3, [r7, #12]
 8008c3a:	f083 0320 	eor.w	r3, r3, #32
 8008c3e:	81bb      	strh	r3, [r7, #12]
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	441a      	add	r2, r3
 8008c4a:	89bb      	ldrh	r3, [r7, #12]
 8008c4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	8013      	strh	r3, [r2, #0]
 8008c60:	e04b      	b.n	8008cfa <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	4413      	add	r3, r2
 8008c6c:	881b      	ldrh	r3, [r3, #0]
 8008c6e:	82fb      	strh	r3, [r7, #22]
 8008c70:	8afb      	ldrh	r3, [r7, #22]
 8008c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d01b      	beq.n	8008cb2 <USB_EPClearStall+0x106>
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	4413      	add	r3, r2
 8008c84:	881b      	ldrh	r3, [r3, #0]
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c90:	82bb      	strh	r3, [r7, #20]
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	441a      	add	r2, r3
 8008c9c:	8abb      	ldrh	r3, [r7, #20]
 8008c9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ca2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ca6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	4413      	add	r3, r2
 8008cbc:	881b      	ldrh	r3, [r3, #0]
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cc8:	827b      	strh	r3, [r7, #18]
 8008cca:	8a7b      	ldrh	r3, [r7, #18]
 8008ccc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008cd0:	827b      	strh	r3, [r7, #18]
 8008cd2:	8a7b      	ldrh	r3, [r7, #18]
 8008cd4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008cd8:	827b      	strh	r3, [r7, #18]
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	441a      	add	r2, r3
 8008ce4:	8a7b      	ldrh	r3, [r7, #18]
 8008ce6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	371c      	adds	r7, #28
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bc80      	pop	{r7}
 8008d04:	4770      	bx	lr

08008d06 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008d06:	b480      	push	{r7}
 8008d08:	b083      	sub	sp, #12
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
 8008d0e:	460b      	mov	r3, r1
 8008d10:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008d12:	78fb      	ldrb	r3, [r7, #3]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d103      	bne.n	8008d20 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2280      	movs	r2, #128	; 0x80
 8008d1c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	370c      	adds	r7, #12
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bc80      	pop	{r7}
 8008d2a:	4770      	bx	lr

08008d2c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	370c      	adds	r7, #12
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bc80      	pop	{r7}
 8008d3e:	4770      	bx	lr

08008d40 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	370c      	adds	r7, #12
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bc80      	pop	{r7}
 8008d52:	4770      	bx	lr

08008d54 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b085      	sub	sp, #20
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008d66:	68fb      	ldr	r3, [r7, #12]
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3714      	adds	r7, #20
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bc80      	pop	{r7}
 8008d70:	4770      	bx	lr

08008d72 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008d72:	b480      	push	{r7}
 8008d74:	b083      	sub	sp, #12
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
 8008d7a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008d7c:	2300      	movs	r3, #0
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	370c      	adds	r7, #12
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bc80      	pop	{r7}
 8008d86:	4770      	bx	lr

08008d88 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b08d      	sub	sp, #52	; 0x34
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	4611      	mov	r1, r2
 8008d94:	461a      	mov	r2, r3
 8008d96:	460b      	mov	r3, r1
 8008d98:	80fb      	strh	r3, [r7, #6]
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008d9e:	88bb      	ldrh	r3, [r7, #4]
 8008da0:	3301      	adds	r3, #1
 8008da2:	085b      	lsrs	r3, r3, #1
 8008da4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008dae:	88fb      	ldrh	r3, [r7, #6]
 8008db0:	005a      	lsls	r2, r3, #1
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	4413      	add	r3, r2
 8008db6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dba:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008dbc:	6a3b      	ldr	r3, [r7, #32]
 8008dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008dc0:	e01e      	b.n	8008e00 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dca:	3301      	adds	r3, #1
 8008dcc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	021b      	lsls	r3, r3, #8
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	461a      	mov	r2, r3
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	b29a      	uxth	r2, r3
 8008de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dea:	3302      	adds	r3, #2
 8008dec:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df0:	3302      	adds	r3, #2
 8008df2:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df6:	3301      	adds	r3, #1
 8008df8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d1dd      	bne.n	8008dc2 <USB_WritePMA+0x3a>
  }
}
 8008e06:	bf00      	nop
 8008e08:	bf00      	nop
 8008e0a:	3734      	adds	r7, #52	; 0x34
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bc80      	pop	{r7}
 8008e10:	4770      	bx	lr

08008e12 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008e12:	b480      	push	{r7}
 8008e14:	b08b      	sub	sp, #44	; 0x2c
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	60f8      	str	r0, [r7, #12]
 8008e1a:	60b9      	str	r1, [r7, #8]
 8008e1c:	4611      	mov	r1, r2
 8008e1e:	461a      	mov	r2, r3
 8008e20:	460b      	mov	r3, r1
 8008e22:	80fb      	strh	r3, [r7, #6]
 8008e24:	4613      	mov	r3, r2
 8008e26:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008e28:	88bb      	ldrh	r3, [r7, #4]
 8008e2a:	085b      	lsrs	r3, r3, #1
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008e38:	88fb      	ldrh	r3, [r7, #6]
 8008e3a:	005a      	lsls	r2, r3, #1
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	4413      	add	r3, r2
 8008e40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e44:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	627b      	str	r3, [r7, #36]	; 0x24
 8008e4a:	e01b      	b.n	8008e84 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008e4c:	6a3b      	ldr	r3, [r7, #32]
 8008e4e:	881b      	ldrh	r3, [r3, #0]
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008e54:	6a3b      	ldr	r3, [r7, #32]
 8008e56:	3302      	adds	r3, #2
 8008e58:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	b2da      	uxtb	r2, r3
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008e62:	69fb      	ldr	r3, [r7, #28]
 8008e64:	3301      	adds	r3, #1
 8008e66:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	0a1b      	lsrs	r3, r3, #8
 8008e6c:	b2da      	uxtb	r2, r3
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	3301      	adds	r3, #1
 8008e76:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008e78:	6a3b      	ldr	r3, [r7, #32]
 8008e7a:	3302      	adds	r3, #2
 8008e7c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e80:	3b01      	subs	r3, #1
 8008e82:	627b      	str	r3, [r7, #36]	; 0x24
 8008e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1e0      	bne.n	8008e4c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008e8a:	88bb      	ldrh	r3, [r7, #4]
 8008e8c:	f003 0301 	and.w	r3, r3, #1
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d007      	beq.n	8008ea6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008e96:	6a3b      	ldr	r3, [r7, #32]
 8008e98:	881b      	ldrh	r3, [r3, #0]
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	b2da      	uxtb	r2, r3
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	701a      	strb	r2, [r3, #0]
  }
}
 8008ea6:	bf00      	nop
 8008ea8:	372c      	adds	r7, #44	; 0x2c
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bc80      	pop	{r7}
 8008eae:	4770      	bx	lr

08008eb0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	460b      	mov	r3, r1
 8008eba:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	7c1b      	ldrb	r3, [r3, #16]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d115      	bne.n	8008ef4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008ec8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ecc:	2202      	movs	r2, #2
 8008ece:	2181      	movs	r1, #129	; 0x81
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f001 fea6 	bl	800ac22 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008edc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ee0:	2202      	movs	r2, #2
 8008ee2:	2101      	movs	r1, #1
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f001 fe9c 	bl	800ac22 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2201      	movs	r2, #1
 8008eee:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008ef2:	e012      	b.n	8008f1a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008ef4:	2340      	movs	r3, #64	; 0x40
 8008ef6:	2202      	movs	r2, #2
 8008ef8:	2181      	movs	r1, #129	; 0x81
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f001 fe91 	bl	800ac22 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008f06:	2340      	movs	r3, #64	; 0x40
 8008f08:	2202      	movs	r2, #2
 8008f0a:	2101      	movs	r1, #1
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f001 fe88 	bl	800ac22 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2201      	movs	r2, #1
 8008f16:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008f1a:	2308      	movs	r3, #8
 8008f1c:	2203      	movs	r2, #3
 8008f1e:	2182      	movs	r1, #130	; 0x82
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f001 fe7e 	bl	800ac22 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2201      	movs	r2, #1
 8008f2a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008f2c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008f30:	f001 ff9e 	bl	800ae70 <USBD_static_malloc>
 8008f34:	4602      	mov	r2, r0
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d102      	bne.n	8008f4c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008f46:	2301      	movs	r3, #1
 8008f48:	73fb      	strb	r3, [r7, #15]
 8008f4a:	e026      	b.n	8008f9a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f52:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	7c1b      	ldrb	r3, [r3, #16]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d109      	bne.n	8008f8a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f80:	2101      	movs	r1, #1
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f001 ff3e 	bl	800ae04 <USBD_LL_PrepareReceive>
 8008f88:	e007      	b.n	8008f9a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f90:	2340      	movs	r3, #64	; 0x40
 8008f92:	2101      	movs	r1, #1
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f001 ff35 	bl	800ae04 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	460b      	mov	r3, r1
 8008fae:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008fb4:	2181      	movs	r1, #129	; 0x81
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f001 fe59 	bl	800ac6e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008fc2:	2101      	movs	r1, #1
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f001 fe52 	bl	800ac6e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008fd2:	2182      	movs	r1, #130	; 0x82
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f001 fe4a 	bl	800ac6e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00e      	beq.n	8009008 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f001 ff44 	bl	800ae88 <USBD_static_free>
    pdev->pClassData = NULL;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009008:	7bfb      	ldrb	r3, [r7, #15]
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009012:	b580      	push	{r7, lr}
 8009014:	b086      	sub	sp, #24
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
 800901a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009022:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009024:	2300      	movs	r3, #0
 8009026:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009028:	2300      	movs	r3, #0
 800902a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800902c:	2300      	movs	r3, #0
 800902e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009038:	2b00      	cmp	r3, #0
 800903a:	d039      	beq.n	80090b0 <USBD_CDC_Setup+0x9e>
 800903c:	2b20      	cmp	r3, #32
 800903e:	d17f      	bne.n	8009140 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	88db      	ldrh	r3, [r3, #6]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d029      	beq.n	800909c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	b25b      	sxtb	r3, r3
 800904e:	2b00      	cmp	r3, #0
 8009050:	da11      	bge.n	8009076 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009058:	689b      	ldr	r3, [r3, #8]
 800905a:	683a      	ldr	r2, [r7, #0]
 800905c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800905e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009060:	683a      	ldr	r2, [r7, #0]
 8009062:	88d2      	ldrh	r2, [r2, #6]
 8009064:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009066:	6939      	ldr	r1, [r7, #16]
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	88db      	ldrh	r3, [r3, #6]
 800906c:	461a      	mov	r2, r3
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f001 fa09 	bl	800a486 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009074:	e06b      	b.n	800914e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	785a      	ldrb	r2, [r3, #1]
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	88db      	ldrh	r3, [r3, #6]
 8009084:	b2da      	uxtb	r2, r3
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800908c:	6939      	ldr	r1, [r7, #16]
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	88db      	ldrh	r3, [r3, #6]
 8009092:	461a      	mov	r2, r3
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f001 fa24 	bl	800a4e2 <USBD_CtlPrepareRx>
      break;
 800909a:	e058      	b.n	800914e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	683a      	ldr	r2, [r7, #0]
 80090a6:	7850      	ldrb	r0, [r2, #1]
 80090a8:	2200      	movs	r2, #0
 80090aa:	6839      	ldr	r1, [r7, #0]
 80090ac:	4798      	blx	r3
      break;
 80090ae:	e04e      	b.n	800914e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	785b      	ldrb	r3, [r3, #1]
 80090b4:	2b0b      	cmp	r3, #11
 80090b6:	d02e      	beq.n	8009116 <USBD_CDC_Setup+0x104>
 80090b8:	2b0b      	cmp	r3, #11
 80090ba:	dc38      	bgt.n	800912e <USBD_CDC_Setup+0x11c>
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d002      	beq.n	80090c6 <USBD_CDC_Setup+0xb4>
 80090c0:	2b0a      	cmp	r3, #10
 80090c2:	d014      	beq.n	80090ee <USBD_CDC_Setup+0xdc>
 80090c4:	e033      	b.n	800912e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090cc:	2b03      	cmp	r3, #3
 80090ce:	d107      	bne.n	80090e0 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80090d0:	f107 030c 	add.w	r3, r7, #12
 80090d4:	2202      	movs	r2, #2
 80090d6:	4619      	mov	r1, r3
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f001 f9d4 	bl	800a486 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80090de:	e02e      	b.n	800913e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80090e0:	6839      	ldr	r1, [r7, #0]
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f001 f965 	bl	800a3b2 <USBD_CtlError>
            ret = USBD_FAIL;
 80090e8:	2302      	movs	r3, #2
 80090ea:	75fb      	strb	r3, [r7, #23]
          break;
 80090ec:	e027      	b.n	800913e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090f4:	2b03      	cmp	r3, #3
 80090f6:	d107      	bne.n	8009108 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80090f8:	f107 030f 	add.w	r3, r7, #15
 80090fc:	2201      	movs	r2, #1
 80090fe:	4619      	mov	r1, r3
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f001 f9c0 	bl	800a486 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009106:	e01a      	b.n	800913e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009108:	6839      	ldr	r1, [r7, #0]
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f001 f951 	bl	800a3b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009110:	2302      	movs	r3, #2
 8009112:	75fb      	strb	r3, [r7, #23]
          break;
 8009114:	e013      	b.n	800913e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800911c:	2b03      	cmp	r3, #3
 800911e:	d00d      	beq.n	800913c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009120:	6839      	ldr	r1, [r7, #0]
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f001 f945 	bl	800a3b2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009128:	2302      	movs	r3, #2
 800912a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800912c:	e006      	b.n	800913c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800912e:	6839      	ldr	r1, [r7, #0]
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f001 f93e 	bl	800a3b2 <USBD_CtlError>
          ret = USBD_FAIL;
 8009136:	2302      	movs	r3, #2
 8009138:	75fb      	strb	r3, [r7, #23]
          break;
 800913a:	e000      	b.n	800913e <USBD_CDC_Setup+0x12c>
          break;
 800913c:	bf00      	nop
      }
      break;
 800913e:	e006      	b.n	800914e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009140:	6839      	ldr	r1, [r7, #0]
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f001 f935 	bl	800a3b2 <USBD_CtlError>
      ret = USBD_FAIL;
 8009148:	2302      	movs	r3, #2
 800914a:	75fb      	strb	r3, [r7, #23]
      break;
 800914c:	bf00      	nop
  }

  return ret;
 800914e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009150:	4618      	mov	r0, r3
 8009152:	3718      	adds	r7, #24
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b084      	sub	sp, #16
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	460b      	mov	r3, r1
 8009162:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800916a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009172:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800917a:	2b00      	cmp	r3, #0
 800917c:	d03a      	beq.n	80091f4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800917e:	78fa      	ldrb	r2, [r7, #3]
 8009180:	6879      	ldr	r1, [r7, #4]
 8009182:	4613      	mov	r3, r2
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	4413      	add	r3, r2
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	440b      	add	r3, r1
 800918c:	331c      	adds	r3, #28
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d029      	beq.n	80091e8 <USBD_CDC_DataIn+0x90>
 8009194:	78fa      	ldrb	r2, [r7, #3]
 8009196:	6879      	ldr	r1, [r7, #4]
 8009198:	4613      	mov	r3, r2
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	4413      	add	r3, r2
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	440b      	add	r3, r1
 80091a2:	331c      	adds	r3, #28
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	78f9      	ldrb	r1, [r7, #3]
 80091a8:	68b8      	ldr	r0, [r7, #8]
 80091aa:	460b      	mov	r3, r1
 80091ac:	009b      	lsls	r3, r3, #2
 80091ae:	440b      	add	r3, r1
 80091b0:	00db      	lsls	r3, r3, #3
 80091b2:	4403      	add	r3, r0
 80091b4:	3338      	adds	r3, #56	; 0x38
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	fbb2 f1f3 	udiv	r1, r2, r3
 80091bc:	fb01 f303 	mul.w	r3, r1, r3
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d110      	bne.n	80091e8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80091c6:	78fa      	ldrb	r2, [r7, #3]
 80091c8:	6879      	ldr	r1, [r7, #4]
 80091ca:	4613      	mov	r3, r2
 80091cc:	009b      	lsls	r3, r3, #2
 80091ce:	4413      	add	r3, r2
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	440b      	add	r3, r1
 80091d4:	331c      	adds	r3, #28
 80091d6:	2200      	movs	r2, #0
 80091d8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80091da:	78f9      	ldrb	r1, [r7, #3]
 80091dc:	2300      	movs	r3, #0
 80091de:	2200      	movs	r2, #0
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f001 fdec 	bl	800adbe <USBD_LL_Transmit>
 80091e6:	e003      	b.n	80091f0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80091f0:	2300      	movs	r3, #0
 80091f2:	e000      	b.n	80091f6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80091f4:	2302      	movs	r3, #2
  }
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3710      	adds	r7, #16
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}

080091fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80091fe:	b580      	push	{r7, lr}
 8009200:	b084      	sub	sp, #16
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
 8009206:	460b      	mov	r3, r1
 8009208:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009210:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009212:	78fb      	ldrb	r3, [r7, #3]
 8009214:	4619      	mov	r1, r3
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f001 fe17 	bl	800ae4a <USBD_LL_GetRxDataSize>
 800921c:	4602      	mov	r2, r0
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800922a:	2b00      	cmp	r3, #0
 800922c:	d00d      	beq.n	800924a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800923c:	68fa      	ldr	r2, [r7, #12]
 800923e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009242:	4611      	mov	r1, r2
 8009244:	4798      	blx	r3

    return USBD_OK;
 8009246:	2300      	movs	r3, #0
 8009248:	e000      	b.n	800924c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800924a:	2302      	movs	r3, #2
  }
}
 800924c:	4618      	mov	r0, r3
 800924e:	3710      	adds	r7, #16
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009262:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800926a:	2b00      	cmp	r3, #0
 800926c:	d015      	beq.n	800929a <USBD_CDC_EP0_RxReady+0x46>
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009274:	2bff      	cmp	r3, #255	; 0xff
 8009276:	d010      	beq.n	800929a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	68fa      	ldr	r2, [r7, #12]
 8009282:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009286:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800928e:	b292      	uxth	r2, r2
 8009290:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	22ff      	movs	r2, #255	; 0xff
 8009296:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800929a:	2300      	movs	r3, #0
}
 800929c:	4618      	mov	r0, r3
 800929e:	3710      	adds	r7, #16
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2243      	movs	r2, #67	; 0x43
 80092b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80092b2:	4b03      	ldr	r3, [pc, #12]	; (80092c0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	370c      	adds	r7, #12
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bc80      	pop	{r7}
 80092bc:	4770      	bx	lr
 80092be:	bf00      	nop
 80092c0:	20000098 	.word	0x20000098

080092c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2243      	movs	r2, #67	; 0x43
 80092d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80092d2:	4b03      	ldr	r3, [pc, #12]	; (80092e0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	370c      	adds	r7, #12
 80092d8:	46bd      	mov	sp, r7
 80092da:	bc80      	pop	{r7}
 80092dc:	4770      	bx	lr
 80092de:	bf00      	nop
 80092e0:	20000054 	.word	0x20000054

080092e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2243      	movs	r2, #67	; 0x43
 80092f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80092f2:	4b03      	ldr	r3, [pc, #12]	; (8009300 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	370c      	adds	r7, #12
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bc80      	pop	{r7}
 80092fc:	4770      	bx	lr
 80092fe:	bf00      	nop
 8009300:	200000dc 	.word	0x200000dc

08009304 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	220a      	movs	r2, #10
 8009310:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009312:	4b03      	ldr	r3, [pc, #12]	; (8009320 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009314:	4618      	mov	r0, r3
 8009316:	370c      	adds	r7, #12
 8009318:	46bd      	mov	sp, r7
 800931a:	bc80      	pop	{r7}
 800931c:	4770      	bx	lr
 800931e:	bf00      	nop
 8009320:	20000010 	.word	0x20000010

08009324 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009324:	b480      	push	{r7}
 8009326:	b085      	sub	sp, #20
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800932e:	2302      	movs	r3, #2
 8009330:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d005      	beq.n	8009344 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	683a      	ldr	r2, [r7, #0]
 800933c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009340:	2300      	movs	r3, #0
 8009342:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009344:	7bfb      	ldrb	r3, [r7, #15]
}
 8009346:	4618      	mov	r0, r3
 8009348:	3714      	adds	r7, #20
 800934a:	46bd      	mov	sp, r7
 800934c:	bc80      	pop	{r7}
 800934e:	4770      	bx	lr

08009350 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009350:	b480      	push	{r7}
 8009352:	b087      	sub	sp, #28
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	4613      	mov	r3, r2
 800935c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009364:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	68ba      	ldr	r2, [r7, #8]
 800936a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800936e:	88fa      	ldrh	r2, [r7, #6]
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	371c      	adds	r7, #28
 800937c:	46bd      	mov	sp, r7
 800937e:	bc80      	pop	{r7}
 8009380:	4770      	bx	lr

08009382 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009382:	b480      	push	{r7}
 8009384:	b085      	sub	sp, #20
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
 800938a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009392:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	683a      	ldr	r2, [r7, #0]
 8009398:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800939c:	2300      	movs	r3, #0
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3714      	adds	r7, #20
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bc80      	pop	{r7}
 80093a6:	4770      	bx	lr

080093a8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d01c      	beq.n	80093fc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d115      	bne.n	80093f8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2201      	movs	r2, #1
 80093d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	2181      	movs	r1, #129	; 0x81
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f001 fce5 	bl	800adbe <USBD_LL_Transmit>

      return USBD_OK;
 80093f4:	2300      	movs	r3, #0
 80093f6:	e002      	b.n	80093fe <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80093f8:	2301      	movs	r3, #1
 80093fa:	e000      	b.n	80093fe <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80093fc:	2302      	movs	r3, #2
  }
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3710      	adds	r7, #16
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}

08009406 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009406:	b580      	push	{r7, lr}
 8009408:	b084      	sub	sp, #16
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009414:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800941c:	2b00      	cmp	r3, #0
 800941e:	d017      	beq.n	8009450 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	7c1b      	ldrb	r3, [r3, #16]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d109      	bne.n	800943c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800942e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009432:	2101      	movs	r1, #1
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f001 fce5 	bl	800ae04 <USBD_LL_PrepareReceive>
 800943a:	e007      	b.n	800944c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009442:	2340      	movs	r3, #64	; 0x40
 8009444:	2101      	movs	r1, #1
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f001 fcdc 	bl	800ae04 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800944c:	2300      	movs	r3, #0
 800944e:	e000      	b.n	8009452 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009450:	2302      	movs	r3, #2
  }
}
 8009452:	4618      	mov	r0, r3
 8009454:	3710      	adds	r7, #16
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}

0800945a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800945a:	b580      	push	{r7, lr}
 800945c:	b084      	sub	sp, #16
 800945e:	af00      	add	r7, sp, #0
 8009460:	60f8      	str	r0, [r7, #12]
 8009462:	60b9      	str	r1, [r7, #8]
 8009464:	4613      	mov	r3, r2
 8009466:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d101      	bne.n	8009472 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800946e:	2302      	movs	r3, #2
 8009470:	e01a      	b.n	80094a8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009478:	2b00      	cmp	r3, #0
 800947a:	d003      	beq.n	8009484 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2200      	movs	r2, #0
 8009480:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d003      	beq.n	8009492 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	68ba      	ldr	r2, [r7, #8]
 800948e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2201      	movs	r2, #1
 8009496:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	79fa      	ldrb	r2, [r7, #7]
 800949e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f001 fb49 	bl	800ab38 <USBD_LL_Init>

  return USBD_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3710      	adds	r7, #16
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b085      	sub	sp, #20
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80094ba:	2300      	movs	r3, #0
 80094bc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d006      	beq.n	80094d2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	683a      	ldr	r2, [r7, #0]
 80094c8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80094cc:	2300      	movs	r3, #0
 80094ce:	73fb      	strb	r3, [r7, #15]
 80094d0:	e001      	b.n	80094d6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80094d2:	2302      	movs	r3, #2
 80094d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80094d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3714      	adds	r7, #20
 80094dc:	46bd      	mov	sp, r7
 80094de:	bc80      	pop	{r7}
 80094e0:	4770      	bx	lr

080094e2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b082      	sub	sp, #8
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f001 fb7e 	bl	800abec <USBD_LL_Start>

  return USBD_OK;
 80094f0:	2300      	movs	r3, #0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3708      	adds	r7, #8
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80094fa:	b480      	push	{r7}
 80094fc:	b083      	sub	sp, #12
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009502:	2300      	movs	r3, #0
}
 8009504:	4618      	mov	r0, r3
 8009506:	370c      	adds	r7, #12
 8009508:	46bd      	mov	sp, r7
 800950a:	bc80      	pop	{r7}
 800950c:	4770      	bx	lr

0800950e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b084      	sub	sp, #16
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
 8009516:	460b      	mov	r3, r1
 8009518:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800951a:	2302      	movs	r3, #2
 800951c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009524:	2b00      	cmp	r3, #0
 8009526:	d00c      	beq.n	8009542 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	78fa      	ldrb	r2, [r7, #3]
 8009532:	4611      	mov	r1, r2
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	4798      	blx	r3
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d101      	bne.n	8009542 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800953e:	2300      	movs	r3, #0
 8009540:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009542:	7bfb      	ldrb	r3, [r7, #15]
}
 8009544:	4618      	mov	r0, r3
 8009546:	3710      	adds	r7, #16
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	460b      	mov	r3, r1
 8009556:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	78fa      	ldrb	r2, [r7, #3]
 8009562:	4611      	mov	r1, r2
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	4798      	blx	r3

  return USBD_OK;
 8009568:	2300      	movs	r3, #0
}
 800956a:	4618      	mov	r0, r3
 800956c:	3708      	adds	r7, #8
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b082      	sub	sp, #8
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
 800957a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009582:	6839      	ldr	r1, [r7, #0]
 8009584:	4618      	mov	r0, r3
 8009586:	f000 fed8 	bl	800a33a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2201      	movs	r2, #1
 800958e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009598:	461a      	mov	r2, r3
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80095a6:	f003 031f 	and.w	r3, r3, #31
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	d016      	beq.n	80095dc <USBD_LL_SetupStage+0x6a>
 80095ae:	2b02      	cmp	r3, #2
 80095b0:	d81c      	bhi.n	80095ec <USBD_LL_SetupStage+0x7a>
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d002      	beq.n	80095bc <USBD_LL_SetupStage+0x4a>
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d008      	beq.n	80095cc <USBD_LL_SetupStage+0x5a>
 80095ba:	e017      	b.n	80095ec <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80095c2:	4619      	mov	r1, r3
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 f9cb 	bl	8009960 <USBD_StdDevReq>
      break;
 80095ca:	e01a      	b.n	8009602 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80095d2:	4619      	mov	r1, r3
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 fa2d 	bl	8009a34 <USBD_StdItfReq>
      break;
 80095da:	e012      	b.n	8009602 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80095e2:	4619      	mov	r1, r3
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 fa6d 	bl	8009ac4 <USBD_StdEPReq>
      break;
 80095ea:	e00a      	b.n	8009602 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80095f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	4619      	mov	r1, r3
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f001 fb56 	bl	800acac <USBD_LL_StallEP>
      break;
 8009600:	bf00      	nop
  }

  return USBD_OK;
 8009602:	2300      	movs	r3, #0
}
 8009604:	4618      	mov	r0, r3
 8009606:	3708      	adds	r7, #8
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b086      	sub	sp, #24
 8009610:	af00      	add	r7, sp, #0
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	460b      	mov	r3, r1
 8009616:	607a      	str	r2, [r7, #4]
 8009618:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800961a:	7afb      	ldrb	r3, [r7, #11]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d14b      	bne.n	80096b8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009626:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800962e:	2b03      	cmp	r3, #3
 8009630:	d134      	bne.n	800969c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	68da      	ldr	r2, [r3, #12]
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	429a      	cmp	r2, r3
 800963c:	d919      	bls.n	8009672 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	68da      	ldr	r2, [r3, #12]
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	691b      	ldr	r3, [r3, #16]
 8009646:	1ad2      	subs	r2, r2, r3
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	68da      	ldr	r2, [r3, #12]
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009654:	429a      	cmp	r2, r3
 8009656:	d203      	bcs.n	8009660 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800965c:	b29b      	uxth	r3, r3
 800965e:	e002      	b.n	8009666 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009664:	b29b      	uxth	r3, r3
 8009666:	461a      	mov	r2, r3
 8009668:	6879      	ldr	r1, [r7, #4]
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	f000 ff57 	bl	800a51e <USBD_CtlContinueRx>
 8009670:	e038      	b.n	80096e4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009678:	691b      	ldr	r3, [r3, #16]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d00a      	beq.n	8009694 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009684:	2b03      	cmp	r3, #3
 8009686:	d105      	bne.n	8009694 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800968e:	691b      	ldr	r3, [r3, #16]
 8009690:	68f8      	ldr	r0, [r7, #12]
 8009692:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009694:	68f8      	ldr	r0, [r7, #12]
 8009696:	f000 ff54 	bl	800a542 <USBD_CtlSendStatus>
 800969a:	e023      	b.n	80096e4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80096a2:	2b05      	cmp	r3, #5
 80096a4:	d11e      	bne.n	80096e4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2200      	movs	r2, #0
 80096aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80096ae:	2100      	movs	r1, #0
 80096b0:	68f8      	ldr	r0, [r7, #12]
 80096b2:	f001 fafb 	bl	800acac <USBD_LL_StallEP>
 80096b6:	e015      	b.n	80096e4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096be:	699b      	ldr	r3, [r3, #24]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d00d      	beq.n	80096e0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80096ca:	2b03      	cmp	r3, #3
 80096cc:	d108      	bne.n	80096e0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096d4:	699b      	ldr	r3, [r3, #24]
 80096d6:	7afa      	ldrb	r2, [r7, #11]
 80096d8:	4611      	mov	r1, r2
 80096da:	68f8      	ldr	r0, [r7, #12]
 80096dc:	4798      	blx	r3
 80096de:	e001      	b.n	80096e4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80096e0:	2302      	movs	r3, #2
 80096e2:	e000      	b.n	80096e6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80096e4:	2300      	movs	r3, #0
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3718      	adds	r7, #24
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b086      	sub	sp, #24
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	60f8      	str	r0, [r7, #12]
 80096f6:	460b      	mov	r3, r1
 80096f8:	607a      	str	r2, [r7, #4]
 80096fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80096fc:	7afb      	ldrb	r3, [r7, #11]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d17f      	bne.n	8009802 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	3314      	adds	r3, #20
 8009706:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800970e:	2b02      	cmp	r3, #2
 8009710:	d15c      	bne.n	80097cc <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	68da      	ldr	r2, [r3, #12]
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	691b      	ldr	r3, [r3, #16]
 800971a:	429a      	cmp	r2, r3
 800971c:	d915      	bls.n	800974a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	68da      	ldr	r2, [r3, #12]
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	691b      	ldr	r3, [r3, #16]
 8009726:	1ad2      	subs	r2, r2, r3
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	b29b      	uxth	r3, r3
 8009732:	461a      	mov	r2, r3
 8009734:	6879      	ldr	r1, [r7, #4]
 8009736:	68f8      	ldr	r0, [r7, #12]
 8009738:	f000 fec1 	bl	800a4be <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800973c:	2300      	movs	r3, #0
 800973e:	2200      	movs	r2, #0
 8009740:	2100      	movs	r1, #0
 8009742:	68f8      	ldr	r0, [r7, #12]
 8009744:	f001 fb5e 	bl	800ae04 <USBD_LL_PrepareReceive>
 8009748:	e04e      	b.n	80097e8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	697a      	ldr	r2, [r7, #20]
 8009750:	6912      	ldr	r2, [r2, #16]
 8009752:	fbb3 f1f2 	udiv	r1, r3, r2
 8009756:	fb01 f202 	mul.w	r2, r1, r2
 800975a:	1a9b      	subs	r3, r3, r2
 800975c:	2b00      	cmp	r3, #0
 800975e:	d11c      	bne.n	800979a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	689a      	ldr	r2, [r3, #8]
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009768:	429a      	cmp	r2, r3
 800976a:	d316      	bcc.n	800979a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	689a      	ldr	r2, [r3, #8]
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009776:	429a      	cmp	r2, r3
 8009778:	d20f      	bcs.n	800979a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800977a:	2200      	movs	r2, #0
 800977c:	2100      	movs	r1, #0
 800977e:	68f8      	ldr	r0, [r7, #12]
 8009780:	f000 fe9d 	bl	800a4be <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2200      	movs	r2, #0
 8009788:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800978c:	2300      	movs	r3, #0
 800978e:	2200      	movs	r2, #0
 8009790:	2100      	movs	r1, #0
 8009792:	68f8      	ldr	r0, [r7, #12]
 8009794:	f001 fb36 	bl	800ae04 <USBD_LL_PrepareReceive>
 8009798:	e026      	b.n	80097e8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097a0:	68db      	ldr	r3, [r3, #12]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d00a      	beq.n	80097bc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80097ac:	2b03      	cmp	r3, #3
 80097ae:	d105      	bne.n	80097bc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	68f8      	ldr	r0, [r7, #12]
 80097ba:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80097bc:	2180      	movs	r1, #128	; 0x80
 80097be:	68f8      	ldr	r0, [r7, #12]
 80097c0:	f001 fa74 	bl	800acac <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	f000 fecf 	bl	800a568 <USBD_CtlReceiveStatus>
 80097ca:	e00d      	b.n	80097e8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80097d2:	2b04      	cmp	r3, #4
 80097d4:	d004      	beq.n	80097e0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d103      	bne.n	80097e8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80097e0:	2180      	movs	r1, #128	; 0x80
 80097e2:	68f8      	ldr	r0, [r7, #12]
 80097e4:	f001 fa62 	bl	800acac <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d11d      	bne.n	800982e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80097f2:	68f8      	ldr	r0, [r7, #12]
 80097f4:	f7ff fe81 	bl	80094fa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2200      	movs	r2, #0
 80097fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009800:	e015      	b.n	800982e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009808:	695b      	ldr	r3, [r3, #20]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d00d      	beq.n	800982a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009814:	2b03      	cmp	r3, #3
 8009816:	d108      	bne.n	800982a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800981e:	695b      	ldr	r3, [r3, #20]
 8009820:	7afa      	ldrb	r2, [r7, #11]
 8009822:	4611      	mov	r1, r2
 8009824:	68f8      	ldr	r0, [r7, #12]
 8009826:	4798      	blx	r3
 8009828:	e001      	b.n	800982e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800982a:	2302      	movs	r3, #2
 800982c:	e000      	b.n	8009830 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800982e:	2300      	movs	r3, #0
}
 8009830:	4618      	mov	r0, r3
 8009832:	3718      	adds	r7, #24
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b082      	sub	sp, #8
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009840:	2340      	movs	r3, #64	; 0x40
 8009842:	2200      	movs	r2, #0
 8009844:	2100      	movs	r1, #0
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f001 f9eb 	bl	800ac22 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2201      	movs	r2, #1
 8009850:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2240      	movs	r2, #64	; 0x40
 8009858:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800985c:	2340      	movs	r3, #64	; 0x40
 800985e:	2200      	movs	r2, #0
 8009860:	2180      	movs	r1, #128	; 0x80
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f001 f9dd 	bl	800ac22 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2201      	movs	r2, #1
 800986c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2240      	movs	r2, #64	; 0x40
 8009872:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2201      	movs	r2, #1
 8009878:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009898:	2b00      	cmp	r3, #0
 800989a:	d009      	beq.n	80098b0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	6852      	ldr	r2, [r2, #4]
 80098a8:	b2d2      	uxtb	r2, r2
 80098aa:	4611      	mov	r1, r2
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	4798      	blx	r3
  }

  return USBD_OK;
 80098b0:	2300      	movs	r3, #0
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3708      	adds	r7, #8
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80098ba:	b480      	push	{r7}
 80098bc:	b083      	sub	sp, #12
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
 80098c2:	460b      	mov	r3, r1
 80098c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	78fa      	ldrb	r2, [r7, #3]
 80098ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80098cc:	2300      	movs	r3, #0
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	370c      	adds	r7, #12
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bc80      	pop	{r7}
 80098d6:	4770      	bx	lr

080098d8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80098d8:	b480      	push	{r7}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2204      	movs	r2, #4
 80098f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80098f4:	2300      	movs	r3, #0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	370c      	adds	r7, #12
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bc80      	pop	{r7}
 80098fe:	4770      	bx	lr

08009900 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009900:	b480      	push	{r7}
 8009902:	b083      	sub	sp, #12
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800990e:	2b04      	cmp	r3, #4
 8009910:	d105      	bne.n	800991e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800991e:	2300      	movs	r3, #0
}
 8009920:	4618      	mov	r0, r3
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	bc80      	pop	{r7}
 8009928:	4770      	bx	lr

0800992a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b082      	sub	sp, #8
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009938:	2b03      	cmp	r3, #3
 800993a:	d10b      	bne.n	8009954 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009942:	69db      	ldr	r3, [r3, #28]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d005      	beq.n	8009954 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800994e:	69db      	ldr	r3, [r3, #28]
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	3708      	adds	r7, #8
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
	...

08009960 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800996a:	2300      	movs	r3, #0
 800996c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009976:	2b40      	cmp	r3, #64	; 0x40
 8009978:	d005      	beq.n	8009986 <USBD_StdDevReq+0x26>
 800997a:	2b40      	cmp	r3, #64	; 0x40
 800997c:	d84f      	bhi.n	8009a1e <USBD_StdDevReq+0xbe>
 800997e:	2b00      	cmp	r3, #0
 8009980:	d009      	beq.n	8009996 <USBD_StdDevReq+0x36>
 8009982:	2b20      	cmp	r3, #32
 8009984:	d14b      	bne.n	8009a1e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	6839      	ldr	r1, [r7, #0]
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	4798      	blx	r3
      break;
 8009994:	e048      	b.n	8009a28 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	785b      	ldrb	r3, [r3, #1]
 800999a:	2b09      	cmp	r3, #9
 800999c:	d839      	bhi.n	8009a12 <USBD_StdDevReq+0xb2>
 800999e:	a201      	add	r2, pc, #4	; (adr r2, 80099a4 <USBD_StdDevReq+0x44>)
 80099a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a4:	080099f5 	.word	0x080099f5
 80099a8:	08009a09 	.word	0x08009a09
 80099ac:	08009a13 	.word	0x08009a13
 80099b0:	080099ff 	.word	0x080099ff
 80099b4:	08009a13 	.word	0x08009a13
 80099b8:	080099d7 	.word	0x080099d7
 80099bc:	080099cd 	.word	0x080099cd
 80099c0:	08009a13 	.word	0x08009a13
 80099c4:	080099eb 	.word	0x080099eb
 80099c8:	080099e1 	.word	0x080099e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80099cc:	6839      	ldr	r1, [r7, #0]
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f9dc 	bl	8009d8c <USBD_GetDescriptor>
          break;
 80099d4:	e022      	b.n	8009a1c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80099d6:	6839      	ldr	r1, [r7, #0]
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 fb3f 	bl	800a05c <USBD_SetAddress>
          break;
 80099de:	e01d      	b.n	8009a1c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80099e0:	6839      	ldr	r1, [r7, #0]
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 fb7e 	bl	800a0e4 <USBD_SetConfig>
          break;
 80099e8:	e018      	b.n	8009a1c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80099ea:	6839      	ldr	r1, [r7, #0]
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 fc07 	bl	800a200 <USBD_GetConfig>
          break;
 80099f2:	e013      	b.n	8009a1c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80099f4:	6839      	ldr	r1, [r7, #0]
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 fc37 	bl	800a26a <USBD_GetStatus>
          break;
 80099fc:	e00e      	b.n	8009a1c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80099fe:	6839      	ldr	r1, [r7, #0]
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 fc65 	bl	800a2d0 <USBD_SetFeature>
          break;
 8009a06:	e009      	b.n	8009a1c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009a08:	6839      	ldr	r1, [r7, #0]
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 fc74 	bl	800a2f8 <USBD_ClrFeature>
          break;
 8009a10:	e004      	b.n	8009a1c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009a12:	6839      	ldr	r1, [r7, #0]
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 fccc 	bl	800a3b2 <USBD_CtlError>
          break;
 8009a1a:	bf00      	nop
      }
      break;
 8009a1c:	e004      	b.n	8009a28 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009a1e:	6839      	ldr	r1, [r7, #0]
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 fcc6 	bl	800a3b2 <USBD_CtlError>
      break;
 8009a26:	bf00      	nop
  }

  return ret;
 8009a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop

08009a34 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a4a:	2b40      	cmp	r3, #64	; 0x40
 8009a4c:	d005      	beq.n	8009a5a <USBD_StdItfReq+0x26>
 8009a4e:	2b40      	cmp	r3, #64	; 0x40
 8009a50:	d82e      	bhi.n	8009ab0 <USBD_StdItfReq+0x7c>
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d001      	beq.n	8009a5a <USBD_StdItfReq+0x26>
 8009a56:	2b20      	cmp	r3, #32
 8009a58:	d12a      	bne.n	8009ab0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a60:	3b01      	subs	r3, #1
 8009a62:	2b02      	cmp	r3, #2
 8009a64:	d81d      	bhi.n	8009aa2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	889b      	ldrh	r3, [r3, #4]
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d813      	bhi.n	8009a98 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	6839      	ldr	r1, [r7, #0]
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	4798      	blx	r3
 8009a7e:	4603      	mov	r3, r0
 8009a80:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	88db      	ldrh	r3, [r3, #6]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d110      	bne.n	8009aac <USBD_StdItfReq+0x78>
 8009a8a:	7bfb      	ldrb	r3, [r7, #15]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d10d      	bne.n	8009aac <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f000 fd56 	bl	800a542 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009a96:	e009      	b.n	8009aac <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009a98:	6839      	ldr	r1, [r7, #0]
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 fc89 	bl	800a3b2 <USBD_CtlError>
          break;
 8009aa0:	e004      	b.n	8009aac <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009aa2:	6839      	ldr	r1, [r7, #0]
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 fc84 	bl	800a3b2 <USBD_CtlError>
          break;
 8009aaa:	e000      	b.n	8009aae <USBD_StdItfReq+0x7a>
          break;
 8009aac:	bf00      	nop
      }
      break;
 8009aae:	e004      	b.n	8009aba <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009ab0:	6839      	ldr	r1, [r7, #0]
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 fc7d 	bl	800a3b2 <USBD_CtlError>
      break;
 8009ab8:	bf00      	nop
  }

  return USBD_OK;
 8009aba:	2300      	movs	r3, #0
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3710      	adds	r7, #16
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	889b      	ldrh	r3, [r3, #4]
 8009ad6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ae0:	2b40      	cmp	r3, #64	; 0x40
 8009ae2:	d007      	beq.n	8009af4 <USBD_StdEPReq+0x30>
 8009ae4:	2b40      	cmp	r3, #64	; 0x40
 8009ae6:	f200 8146 	bhi.w	8009d76 <USBD_StdEPReq+0x2b2>
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d00a      	beq.n	8009b04 <USBD_StdEPReq+0x40>
 8009aee:	2b20      	cmp	r3, #32
 8009af0:	f040 8141 	bne.w	8009d76 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009afa:	689b      	ldr	r3, [r3, #8]
 8009afc:	6839      	ldr	r1, [r7, #0]
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	4798      	blx	r3
      break;
 8009b02:	e13d      	b.n	8009d80 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b0c:	2b20      	cmp	r3, #32
 8009b0e:	d10a      	bne.n	8009b26 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	6839      	ldr	r1, [r7, #0]
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	4798      	blx	r3
 8009b1e:	4603      	mov	r3, r0
 8009b20:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009b22:	7bfb      	ldrb	r3, [r7, #15]
 8009b24:	e12d      	b.n	8009d82 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	785b      	ldrb	r3, [r3, #1]
 8009b2a:	2b03      	cmp	r3, #3
 8009b2c:	d007      	beq.n	8009b3e <USBD_StdEPReq+0x7a>
 8009b2e:	2b03      	cmp	r3, #3
 8009b30:	f300 811b 	bgt.w	8009d6a <USBD_StdEPReq+0x2a6>
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d072      	beq.n	8009c1e <USBD_StdEPReq+0x15a>
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d03a      	beq.n	8009bb2 <USBD_StdEPReq+0xee>
 8009b3c:	e115      	b.n	8009d6a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b44:	2b02      	cmp	r3, #2
 8009b46:	d002      	beq.n	8009b4e <USBD_StdEPReq+0x8a>
 8009b48:	2b03      	cmp	r3, #3
 8009b4a:	d015      	beq.n	8009b78 <USBD_StdEPReq+0xb4>
 8009b4c:	e02b      	b.n	8009ba6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b4e:	7bbb      	ldrb	r3, [r7, #14]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d00c      	beq.n	8009b6e <USBD_StdEPReq+0xaa>
 8009b54:	7bbb      	ldrb	r3, [r7, #14]
 8009b56:	2b80      	cmp	r3, #128	; 0x80
 8009b58:	d009      	beq.n	8009b6e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009b5a:	7bbb      	ldrb	r3, [r7, #14]
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f001 f8a4 	bl	800acac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009b64:	2180      	movs	r1, #128	; 0x80
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f001 f8a0 	bl	800acac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b6c:	e020      	b.n	8009bb0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009b6e:	6839      	ldr	r1, [r7, #0]
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 fc1e 	bl	800a3b2 <USBD_CtlError>
              break;
 8009b76:	e01b      	b.n	8009bb0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	885b      	ldrh	r3, [r3, #2]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d10e      	bne.n	8009b9e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009b80:	7bbb      	ldrb	r3, [r7, #14]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d00b      	beq.n	8009b9e <USBD_StdEPReq+0xda>
 8009b86:	7bbb      	ldrb	r3, [r7, #14]
 8009b88:	2b80      	cmp	r3, #128	; 0x80
 8009b8a:	d008      	beq.n	8009b9e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	88db      	ldrh	r3, [r3, #6]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d104      	bne.n	8009b9e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009b94:	7bbb      	ldrb	r3, [r7, #14]
 8009b96:	4619      	mov	r1, r3
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f001 f887 	bl	800acac <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 fccf 	bl	800a542 <USBD_CtlSendStatus>

              break;
 8009ba4:	e004      	b.n	8009bb0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009ba6:	6839      	ldr	r1, [r7, #0]
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 fc02 	bl	800a3b2 <USBD_CtlError>
              break;
 8009bae:	bf00      	nop
          }
          break;
 8009bb0:	e0e0      	b.n	8009d74 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bb8:	2b02      	cmp	r3, #2
 8009bba:	d002      	beq.n	8009bc2 <USBD_StdEPReq+0xfe>
 8009bbc:	2b03      	cmp	r3, #3
 8009bbe:	d015      	beq.n	8009bec <USBD_StdEPReq+0x128>
 8009bc0:	e026      	b.n	8009c10 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009bc2:	7bbb      	ldrb	r3, [r7, #14]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d00c      	beq.n	8009be2 <USBD_StdEPReq+0x11e>
 8009bc8:	7bbb      	ldrb	r3, [r7, #14]
 8009bca:	2b80      	cmp	r3, #128	; 0x80
 8009bcc:	d009      	beq.n	8009be2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009bce:	7bbb      	ldrb	r3, [r7, #14]
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f001 f86a 	bl	800acac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009bd8:	2180      	movs	r1, #128	; 0x80
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f001 f866 	bl	800acac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009be0:	e01c      	b.n	8009c1c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009be2:	6839      	ldr	r1, [r7, #0]
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 fbe4 	bl	800a3b2 <USBD_CtlError>
              break;
 8009bea:	e017      	b.n	8009c1c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	885b      	ldrh	r3, [r3, #2]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d112      	bne.n	8009c1a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009bf4:	7bbb      	ldrb	r3, [r7, #14]
 8009bf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d004      	beq.n	8009c08 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009bfe:	7bbb      	ldrb	r3, [r7, #14]
 8009c00:	4619      	mov	r1, r3
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f001 f871 	bl	800acea <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 fc9a 	bl	800a542 <USBD_CtlSendStatus>
              }
              break;
 8009c0e:	e004      	b.n	8009c1a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009c10:	6839      	ldr	r1, [r7, #0]
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 fbcd 	bl	800a3b2 <USBD_CtlError>
              break;
 8009c18:	e000      	b.n	8009c1c <USBD_StdEPReq+0x158>
              break;
 8009c1a:	bf00      	nop
          }
          break;
 8009c1c:	e0aa      	b.n	8009d74 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c24:	2b02      	cmp	r3, #2
 8009c26:	d002      	beq.n	8009c2e <USBD_StdEPReq+0x16a>
 8009c28:	2b03      	cmp	r3, #3
 8009c2a:	d032      	beq.n	8009c92 <USBD_StdEPReq+0x1ce>
 8009c2c:	e097      	b.n	8009d5e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c2e:	7bbb      	ldrb	r3, [r7, #14]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d007      	beq.n	8009c44 <USBD_StdEPReq+0x180>
 8009c34:	7bbb      	ldrb	r3, [r7, #14]
 8009c36:	2b80      	cmp	r3, #128	; 0x80
 8009c38:	d004      	beq.n	8009c44 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009c3a:	6839      	ldr	r1, [r7, #0]
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 fbb8 	bl	800a3b2 <USBD_CtlError>
                break;
 8009c42:	e091      	b.n	8009d68 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	da0b      	bge.n	8009c64 <USBD_StdEPReq+0x1a0>
 8009c4c:	7bbb      	ldrb	r3, [r7, #14]
 8009c4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c52:	4613      	mov	r3, r2
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	4413      	add	r3, r2
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	3310      	adds	r3, #16
 8009c5c:	687a      	ldr	r2, [r7, #4]
 8009c5e:	4413      	add	r3, r2
 8009c60:	3304      	adds	r3, #4
 8009c62:	e00b      	b.n	8009c7c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c64:	7bbb      	ldrb	r3, [r7, #14]
 8009c66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c6a:	4613      	mov	r3, r2
 8009c6c:	009b      	lsls	r3, r3, #2
 8009c6e:	4413      	add	r3, r2
 8009c70:	009b      	lsls	r3, r3, #2
 8009c72:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	4413      	add	r3, r2
 8009c7a:	3304      	adds	r3, #4
 8009c7c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	2200      	movs	r2, #0
 8009c82:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	2202      	movs	r2, #2
 8009c88:	4619      	mov	r1, r3
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 fbfb 	bl	800a486 <USBD_CtlSendData>
              break;
 8009c90:	e06a      	b.n	8009d68 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009c92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	da11      	bge.n	8009cbe <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009c9a:	7bbb      	ldrb	r3, [r7, #14]
 8009c9c:	f003 020f 	and.w	r2, r3, #15
 8009ca0:	6879      	ldr	r1, [r7, #4]
 8009ca2:	4613      	mov	r3, r2
 8009ca4:	009b      	lsls	r3, r3, #2
 8009ca6:	4413      	add	r3, r2
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	440b      	add	r3, r1
 8009cac:	3318      	adds	r3, #24
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d117      	bne.n	8009ce4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009cb4:	6839      	ldr	r1, [r7, #0]
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 fb7b 	bl	800a3b2 <USBD_CtlError>
                  break;
 8009cbc:	e054      	b.n	8009d68 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009cbe:	7bbb      	ldrb	r3, [r7, #14]
 8009cc0:	f003 020f 	and.w	r2, r3, #15
 8009cc4:	6879      	ldr	r1, [r7, #4]
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	4413      	add	r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	440b      	add	r3, r1
 8009cd0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d104      	bne.n	8009ce4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009cda:	6839      	ldr	r1, [r7, #0]
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 fb68 	bl	800a3b2 <USBD_CtlError>
                  break;
 8009ce2:	e041      	b.n	8009d68 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ce4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	da0b      	bge.n	8009d04 <USBD_StdEPReq+0x240>
 8009cec:	7bbb      	ldrb	r3, [r7, #14]
 8009cee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009cf2:	4613      	mov	r3, r2
 8009cf4:	009b      	lsls	r3, r3, #2
 8009cf6:	4413      	add	r3, r2
 8009cf8:	009b      	lsls	r3, r3, #2
 8009cfa:	3310      	adds	r3, #16
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	4413      	add	r3, r2
 8009d00:	3304      	adds	r3, #4
 8009d02:	e00b      	b.n	8009d1c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009d04:	7bbb      	ldrb	r3, [r7, #14]
 8009d06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d0a:	4613      	mov	r3, r2
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	4413      	add	r3, r2
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	4413      	add	r3, r2
 8009d1a:	3304      	adds	r3, #4
 8009d1c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009d1e:	7bbb      	ldrb	r3, [r7, #14]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d002      	beq.n	8009d2a <USBD_StdEPReq+0x266>
 8009d24:	7bbb      	ldrb	r3, [r7, #14]
 8009d26:	2b80      	cmp	r3, #128	; 0x80
 8009d28:	d103      	bne.n	8009d32 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	601a      	str	r2, [r3, #0]
 8009d30:	e00e      	b.n	8009d50 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009d32:	7bbb      	ldrb	r3, [r7, #14]
 8009d34:	4619      	mov	r1, r3
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 fff6 	bl	800ad28 <USBD_LL_IsStallEP>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d003      	beq.n	8009d4a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	2201      	movs	r2, #1
 8009d46:	601a      	str	r2, [r3, #0]
 8009d48:	e002      	b.n	8009d50 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	2202      	movs	r2, #2
 8009d54:	4619      	mov	r1, r3
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 fb95 	bl	800a486 <USBD_CtlSendData>
              break;
 8009d5c:	e004      	b.n	8009d68 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009d5e:	6839      	ldr	r1, [r7, #0]
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 fb26 	bl	800a3b2 <USBD_CtlError>
              break;
 8009d66:	bf00      	nop
          }
          break;
 8009d68:	e004      	b.n	8009d74 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009d6a:	6839      	ldr	r1, [r7, #0]
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f000 fb20 	bl	800a3b2 <USBD_CtlError>
          break;
 8009d72:	bf00      	nop
      }
      break;
 8009d74:	e004      	b.n	8009d80 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009d76:	6839      	ldr	r1, [r7, #0]
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 fb1a 	bl	800a3b2 <USBD_CtlError>
      break;
 8009d7e:	bf00      	nop
  }

  return ret;
 8009d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
	...

08009d8c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d96:	2300      	movs	r3, #0
 8009d98:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	885b      	ldrh	r3, [r3, #2]
 8009da6:	0a1b      	lsrs	r3, r3, #8
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	3b01      	subs	r3, #1
 8009dac:	2b06      	cmp	r3, #6
 8009dae:	f200 8128 	bhi.w	800a002 <USBD_GetDescriptor+0x276>
 8009db2:	a201      	add	r2, pc, #4	; (adr r2, 8009db8 <USBD_GetDescriptor+0x2c>)
 8009db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db8:	08009dd5 	.word	0x08009dd5
 8009dbc:	08009ded 	.word	0x08009ded
 8009dc0:	08009e2d 	.word	0x08009e2d
 8009dc4:	0800a003 	.word	0x0800a003
 8009dc8:	0800a003 	.word	0x0800a003
 8009dcc:	08009fa3 	.word	0x08009fa3
 8009dd0:	08009fcf 	.word	0x08009fcf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	7c12      	ldrb	r2, [r2, #16]
 8009de0:	f107 0108 	add.w	r1, r7, #8
 8009de4:	4610      	mov	r0, r2
 8009de6:	4798      	blx	r3
 8009de8:	60f8      	str	r0, [r7, #12]
      break;
 8009dea:	e112      	b.n	800a012 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	7c1b      	ldrb	r3, [r3, #16]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d10d      	bne.n	8009e10 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dfc:	f107 0208 	add.w	r2, r7, #8
 8009e00:	4610      	mov	r0, r2
 8009e02:	4798      	blx	r3
 8009e04:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	3301      	adds	r3, #1
 8009e0a:	2202      	movs	r2, #2
 8009e0c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009e0e:	e100      	b.n	800a012 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e18:	f107 0208 	add.w	r2, r7, #8
 8009e1c:	4610      	mov	r0, r2
 8009e1e:	4798      	blx	r3
 8009e20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	3301      	adds	r3, #1
 8009e26:	2202      	movs	r2, #2
 8009e28:	701a      	strb	r2, [r3, #0]
      break;
 8009e2a:	e0f2      	b.n	800a012 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	885b      	ldrh	r3, [r3, #2]
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	2b05      	cmp	r3, #5
 8009e34:	f200 80ac 	bhi.w	8009f90 <USBD_GetDescriptor+0x204>
 8009e38:	a201      	add	r2, pc, #4	; (adr r2, 8009e40 <USBD_GetDescriptor+0xb4>)
 8009e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e3e:	bf00      	nop
 8009e40:	08009e59 	.word	0x08009e59
 8009e44:	08009e8d 	.word	0x08009e8d
 8009e48:	08009ec1 	.word	0x08009ec1
 8009e4c:	08009ef5 	.word	0x08009ef5
 8009e50:	08009f29 	.word	0x08009f29
 8009e54:	08009f5d 	.word	0x08009f5d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d00b      	beq.n	8009e7c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	7c12      	ldrb	r2, [r2, #16]
 8009e70:	f107 0108 	add.w	r1, r7, #8
 8009e74:	4610      	mov	r0, r2
 8009e76:	4798      	blx	r3
 8009e78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e7a:	e091      	b.n	8009fa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e7c:	6839      	ldr	r1, [r7, #0]
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 fa97 	bl	800a3b2 <USBD_CtlError>
            err++;
 8009e84:	7afb      	ldrb	r3, [r7, #11]
 8009e86:	3301      	adds	r3, #1
 8009e88:	72fb      	strb	r3, [r7, #11]
          break;
 8009e8a:	e089      	b.n	8009fa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d00b      	beq.n	8009eb0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	7c12      	ldrb	r2, [r2, #16]
 8009ea4:	f107 0108 	add.w	r1, r7, #8
 8009ea8:	4610      	mov	r0, r2
 8009eaa:	4798      	blx	r3
 8009eac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009eae:	e077      	b.n	8009fa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009eb0:	6839      	ldr	r1, [r7, #0]
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 fa7d 	bl	800a3b2 <USBD_CtlError>
            err++;
 8009eb8:	7afb      	ldrb	r3, [r7, #11]
 8009eba:	3301      	adds	r3, #1
 8009ebc:	72fb      	strb	r3, [r7, #11]
          break;
 8009ebe:	e06f      	b.n	8009fa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ec6:	68db      	ldr	r3, [r3, #12]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d00b      	beq.n	8009ee4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ed2:	68db      	ldr	r3, [r3, #12]
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	7c12      	ldrb	r2, [r2, #16]
 8009ed8:	f107 0108 	add.w	r1, r7, #8
 8009edc:	4610      	mov	r0, r2
 8009ede:	4798      	blx	r3
 8009ee0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ee2:	e05d      	b.n	8009fa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ee4:	6839      	ldr	r1, [r7, #0]
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 fa63 	bl	800a3b2 <USBD_CtlError>
            err++;
 8009eec:	7afb      	ldrb	r3, [r7, #11]
 8009eee:	3301      	adds	r3, #1
 8009ef0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ef2:	e055      	b.n	8009fa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009efa:	691b      	ldr	r3, [r3, #16]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d00b      	beq.n	8009f18 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f06:	691b      	ldr	r3, [r3, #16]
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	7c12      	ldrb	r2, [r2, #16]
 8009f0c:	f107 0108 	add.w	r1, r7, #8
 8009f10:	4610      	mov	r0, r2
 8009f12:	4798      	blx	r3
 8009f14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f16:	e043      	b.n	8009fa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f18:	6839      	ldr	r1, [r7, #0]
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 fa49 	bl	800a3b2 <USBD_CtlError>
            err++;
 8009f20:	7afb      	ldrb	r3, [r7, #11]
 8009f22:	3301      	adds	r3, #1
 8009f24:	72fb      	strb	r3, [r7, #11]
          break;
 8009f26:	e03b      	b.n	8009fa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f2e:	695b      	ldr	r3, [r3, #20]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00b      	beq.n	8009f4c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f3a:	695b      	ldr	r3, [r3, #20]
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	7c12      	ldrb	r2, [r2, #16]
 8009f40:	f107 0108 	add.w	r1, r7, #8
 8009f44:	4610      	mov	r0, r2
 8009f46:	4798      	blx	r3
 8009f48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f4a:	e029      	b.n	8009fa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f4c:	6839      	ldr	r1, [r7, #0]
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 fa2f 	bl	800a3b2 <USBD_CtlError>
            err++;
 8009f54:	7afb      	ldrb	r3, [r7, #11]
 8009f56:	3301      	adds	r3, #1
 8009f58:	72fb      	strb	r3, [r7, #11]
          break;
 8009f5a:	e021      	b.n	8009fa0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f62:	699b      	ldr	r3, [r3, #24]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d00b      	beq.n	8009f80 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f6e:	699b      	ldr	r3, [r3, #24]
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	7c12      	ldrb	r2, [r2, #16]
 8009f74:	f107 0108 	add.w	r1, r7, #8
 8009f78:	4610      	mov	r0, r2
 8009f7a:	4798      	blx	r3
 8009f7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f7e:	e00f      	b.n	8009fa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f80:	6839      	ldr	r1, [r7, #0]
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 fa15 	bl	800a3b2 <USBD_CtlError>
            err++;
 8009f88:	7afb      	ldrb	r3, [r7, #11]
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	72fb      	strb	r3, [r7, #11]
          break;
 8009f8e:	e007      	b.n	8009fa0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009f90:	6839      	ldr	r1, [r7, #0]
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 fa0d 	bl	800a3b2 <USBD_CtlError>
          err++;
 8009f98:	7afb      	ldrb	r3, [r7, #11]
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009f9e:	e038      	b.n	800a012 <USBD_GetDescriptor+0x286>
 8009fa0:	e037      	b.n	800a012 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	7c1b      	ldrb	r3, [r3, #16]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d109      	bne.n	8009fbe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fb2:	f107 0208 	add.w	r2, r7, #8
 8009fb6:	4610      	mov	r0, r2
 8009fb8:	4798      	blx	r3
 8009fba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009fbc:	e029      	b.n	800a012 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009fbe:	6839      	ldr	r1, [r7, #0]
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 f9f6 	bl	800a3b2 <USBD_CtlError>
        err++;
 8009fc6:	7afb      	ldrb	r3, [r7, #11]
 8009fc8:	3301      	adds	r3, #1
 8009fca:	72fb      	strb	r3, [r7, #11]
      break;
 8009fcc:	e021      	b.n	800a012 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	7c1b      	ldrb	r3, [r3, #16]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d10d      	bne.n	8009ff2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fde:	f107 0208 	add.w	r2, r7, #8
 8009fe2:	4610      	mov	r0, r2
 8009fe4:	4798      	blx	r3
 8009fe6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	3301      	adds	r3, #1
 8009fec:	2207      	movs	r2, #7
 8009fee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ff0:	e00f      	b.n	800a012 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009ff2:	6839      	ldr	r1, [r7, #0]
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 f9dc 	bl	800a3b2 <USBD_CtlError>
        err++;
 8009ffa:	7afb      	ldrb	r3, [r7, #11]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	72fb      	strb	r3, [r7, #11]
      break;
 800a000:	e007      	b.n	800a012 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a002:	6839      	ldr	r1, [r7, #0]
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f000 f9d4 	bl	800a3b2 <USBD_CtlError>
      err++;
 800a00a:	7afb      	ldrb	r3, [r7, #11]
 800a00c:	3301      	adds	r3, #1
 800a00e:	72fb      	strb	r3, [r7, #11]
      break;
 800a010:	bf00      	nop
  }

  if (err != 0U)
 800a012:	7afb      	ldrb	r3, [r7, #11]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d11c      	bne.n	800a052 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a018:	893b      	ldrh	r3, [r7, #8]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d011      	beq.n	800a042 <USBD_GetDescriptor+0x2b6>
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	88db      	ldrh	r3, [r3, #6]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d00d      	beq.n	800a042 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	88da      	ldrh	r2, [r3, #6]
 800a02a:	893b      	ldrh	r3, [r7, #8]
 800a02c:	4293      	cmp	r3, r2
 800a02e:	bf28      	it	cs
 800a030:	4613      	movcs	r3, r2
 800a032:	b29b      	uxth	r3, r3
 800a034:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a036:	893b      	ldrh	r3, [r7, #8]
 800a038:	461a      	mov	r2, r3
 800a03a:	68f9      	ldr	r1, [r7, #12]
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f000 fa22 	bl	800a486 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	88db      	ldrh	r3, [r3, #6]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d104      	bne.n	800a054 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 fa79 	bl	800a542 <USBD_CtlSendStatus>
 800a050:	e000      	b.n	800a054 <USBD_GetDescriptor+0x2c8>
    return;
 800a052:	bf00      	nop
    }
  }
}
 800a054:	3710      	adds	r7, #16
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop

0800a05c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	889b      	ldrh	r3, [r3, #4]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d130      	bne.n	800a0d0 <USBD_SetAddress+0x74>
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	88db      	ldrh	r3, [r3, #6]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d12c      	bne.n	800a0d0 <USBD_SetAddress+0x74>
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	885b      	ldrh	r3, [r3, #2]
 800a07a:	2b7f      	cmp	r3, #127	; 0x7f
 800a07c:	d828      	bhi.n	800a0d0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	885b      	ldrh	r3, [r3, #2]
 800a082:	b2db      	uxtb	r3, r3
 800a084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a088:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a090:	2b03      	cmp	r3, #3
 800a092:	d104      	bne.n	800a09e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a094:	6839      	ldr	r1, [r7, #0]
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 f98b 	bl	800a3b2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a09c:	e01d      	b.n	800a0da <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	7bfa      	ldrb	r2, [r7, #15]
 800a0a2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a0a6:	7bfb      	ldrb	r3, [r7, #15]
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 fe68 	bl	800ad80 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 fa46 	bl	800a542 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a0b6:	7bfb      	ldrb	r3, [r7, #15]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d004      	beq.n	800a0c6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2202      	movs	r2, #2
 800a0c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0c4:	e009      	b.n	800a0da <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0ce:	e004      	b.n	800a0da <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a0d0:	6839      	ldr	r1, [r7, #0]
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 f96d 	bl	800a3b2 <USBD_CtlError>
  }
}
 800a0d8:	bf00      	nop
 800a0da:	bf00      	nop
 800a0dc:	3710      	adds	r7, #16
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
	...

0800a0e4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b082      	sub	sp, #8
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	885b      	ldrh	r3, [r3, #2]
 800a0f2:	b2da      	uxtb	r2, r3
 800a0f4:	4b41      	ldr	r3, [pc, #260]	; (800a1fc <USBD_SetConfig+0x118>)
 800a0f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a0f8:	4b40      	ldr	r3, [pc, #256]	; (800a1fc <USBD_SetConfig+0x118>)
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d904      	bls.n	800a10a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a100:	6839      	ldr	r1, [r7, #0]
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 f955 	bl	800a3b2 <USBD_CtlError>
 800a108:	e075      	b.n	800a1f6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a110:	2b02      	cmp	r3, #2
 800a112:	d002      	beq.n	800a11a <USBD_SetConfig+0x36>
 800a114:	2b03      	cmp	r3, #3
 800a116:	d023      	beq.n	800a160 <USBD_SetConfig+0x7c>
 800a118:	e062      	b.n	800a1e0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a11a:	4b38      	ldr	r3, [pc, #224]	; (800a1fc <USBD_SetConfig+0x118>)
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d01a      	beq.n	800a158 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a122:	4b36      	ldr	r3, [pc, #216]	; (800a1fc <USBD_SetConfig+0x118>)
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	461a      	mov	r2, r3
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2203      	movs	r2, #3
 800a130:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a134:	4b31      	ldr	r3, [pc, #196]	; (800a1fc <USBD_SetConfig+0x118>)
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	4619      	mov	r1, r3
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f7ff f9e7 	bl	800950e <USBD_SetClassConfig>
 800a140:	4603      	mov	r3, r0
 800a142:	2b02      	cmp	r3, #2
 800a144:	d104      	bne.n	800a150 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a146:	6839      	ldr	r1, [r7, #0]
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f000 f932 	bl	800a3b2 <USBD_CtlError>
            return;
 800a14e:	e052      	b.n	800a1f6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 f9f6 	bl	800a542 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a156:	e04e      	b.n	800a1f6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 f9f2 	bl	800a542 <USBD_CtlSendStatus>
        break;
 800a15e:	e04a      	b.n	800a1f6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a160:	4b26      	ldr	r3, [pc, #152]	; (800a1fc <USBD_SetConfig+0x118>)
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d112      	bne.n	800a18e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2202      	movs	r2, #2
 800a16c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a170:	4b22      	ldr	r3, [pc, #136]	; (800a1fc <USBD_SetConfig+0x118>)
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	461a      	mov	r2, r3
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a17a:	4b20      	ldr	r3, [pc, #128]	; (800a1fc <USBD_SetConfig+0x118>)
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	4619      	mov	r1, r3
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f7ff f9e3 	bl	800954c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f000 f9db 	bl	800a542 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a18c:	e033      	b.n	800a1f6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a18e:	4b1b      	ldr	r3, [pc, #108]	; (800a1fc <USBD_SetConfig+0x118>)
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	461a      	mov	r2, r3
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	429a      	cmp	r2, r3
 800a19a:	d01d      	beq.n	800a1d8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f7ff f9d1 	bl	800954c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a1aa:	4b14      	ldr	r3, [pc, #80]	; (800a1fc <USBD_SetConfig+0x118>)
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a1b4:	4b11      	ldr	r3, [pc, #68]	; (800a1fc <USBD_SetConfig+0x118>)
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f7ff f9a7 	bl	800950e <USBD_SetClassConfig>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	2b02      	cmp	r3, #2
 800a1c4:	d104      	bne.n	800a1d0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a1c6:	6839      	ldr	r1, [r7, #0]
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 f8f2 	bl	800a3b2 <USBD_CtlError>
            return;
 800a1ce:	e012      	b.n	800a1f6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 f9b6 	bl	800a542 <USBD_CtlSendStatus>
        break;
 800a1d6:	e00e      	b.n	800a1f6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 f9b2 	bl	800a542 <USBD_CtlSendStatus>
        break;
 800a1de:	e00a      	b.n	800a1f6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a1e0:	6839      	ldr	r1, [r7, #0]
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f000 f8e5 	bl	800a3b2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a1e8:	4b04      	ldr	r3, [pc, #16]	; (800a1fc <USBD_SetConfig+0x118>)
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f7ff f9ac 	bl	800954c <USBD_ClrClassConfig>
        break;
 800a1f4:	bf00      	nop
    }
  }
}
 800a1f6:	3708      	adds	r7, #8
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	20000418 	.word	0x20000418

0800a200 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b082      	sub	sp, #8
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	88db      	ldrh	r3, [r3, #6]
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d004      	beq.n	800a21c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a212:	6839      	ldr	r1, [r7, #0]
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 f8cc 	bl	800a3b2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a21a:	e022      	b.n	800a262 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a222:	2b02      	cmp	r3, #2
 800a224:	dc02      	bgt.n	800a22c <USBD_GetConfig+0x2c>
 800a226:	2b00      	cmp	r3, #0
 800a228:	dc03      	bgt.n	800a232 <USBD_GetConfig+0x32>
 800a22a:	e015      	b.n	800a258 <USBD_GetConfig+0x58>
 800a22c:	2b03      	cmp	r3, #3
 800a22e:	d00b      	beq.n	800a248 <USBD_GetConfig+0x48>
 800a230:	e012      	b.n	800a258 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2200      	movs	r2, #0
 800a236:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	3308      	adds	r3, #8
 800a23c:	2201      	movs	r2, #1
 800a23e:	4619      	mov	r1, r3
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 f920 	bl	800a486 <USBD_CtlSendData>
        break;
 800a246:	e00c      	b.n	800a262 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	3304      	adds	r3, #4
 800a24c:	2201      	movs	r2, #1
 800a24e:	4619      	mov	r1, r3
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 f918 	bl	800a486 <USBD_CtlSendData>
        break;
 800a256:	e004      	b.n	800a262 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a258:	6839      	ldr	r1, [r7, #0]
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 f8a9 	bl	800a3b2 <USBD_CtlError>
        break;
 800a260:	bf00      	nop
}
 800a262:	bf00      	nop
 800a264:	3708      	adds	r7, #8
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}

0800a26a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a26a:	b580      	push	{r7, lr}
 800a26c:	b082      	sub	sp, #8
 800a26e:	af00      	add	r7, sp, #0
 800a270:	6078      	str	r0, [r7, #4]
 800a272:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a27a:	3b01      	subs	r3, #1
 800a27c:	2b02      	cmp	r3, #2
 800a27e:	d81e      	bhi.n	800a2be <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	88db      	ldrh	r3, [r3, #6]
 800a284:	2b02      	cmp	r3, #2
 800a286:	d004      	beq.n	800a292 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a288:	6839      	ldr	r1, [r7, #0]
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 f891 	bl	800a3b2 <USBD_CtlError>
        break;
 800a290:	e01a      	b.n	800a2c8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2201      	movs	r2, #1
 800a296:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d005      	beq.n	800a2ae <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	68db      	ldr	r3, [r3, #12]
 800a2a6:	f043 0202 	orr.w	r2, r3, #2
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	330c      	adds	r3, #12
 800a2b2:	2202      	movs	r2, #2
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 f8e5 	bl	800a486 <USBD_CtlSendData>
      break;
 800a2bc:	e004      	b.n	800a2c8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a2be:	6839      	ldr	r1, [r7, #0]
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f000 f876 	bl	800a3b2 <USBD_CtlError>
      break;
 800a2c6:	bf00      	nop
  }
}
 800a2c8:	bf00      	nop
 800a2ca:	3708      	adds	r7, #8
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	885b      	ldrh	r3, [r3, #2]
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d106      	bne.n	800a2f0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 f929 	bl	800a542 <USBD_CtlSendStatus>
  }
}
 800a2f0:	bf00      	nop
 800a2f2:	3708      	adds	r7, #8
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a308:	3b01      	subs	r3, #1
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d80b      	bhi.n	800a326 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	885b      	ldrh	r3, [r3, #2]
 800a312:	2b01      	cmp	r3, #1
 800a314:	d10c      	bne.n	800a330 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 f90f 	bl	800a542 <USBD_CtlSendStatus>
      }
      break;
 800a324:	e004      	b.n	800a330 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a326:	6839      	ldr	r1, [r7, #0]
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f000 f842 	bl	800a3b2 <USBD_CtlError>
      break;
 800a32e:	e000      	b.n	800a332 <USBD_ClrFeature+0x3a>
      break;
 800a330:	bf00      	nop
  }
}
 800a332:	bf00      	nop
 800a334:	3708      	adds	r7, #8
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}

0800a33a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a33a:	b480      	push	{r7}
 800a33c:	b083      	sub	sp, #12
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
 800a342:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	781a      	ldrb	r2, [r3, #0]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	785a      	ldrb	r2, [r3, #1]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	3302      	adds	r3, #2
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	b29a      	uxth	r2, r3
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	3303      	adds	r3, #3
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	b29b      	uxth	r3, r3
 800a364:	021b      	lsls	r3, r3, #8
 800a366:	b29b      	uxth	r3, r3
 800a368:	4413      	add	r3, r2
 800a36a:	b29a      	uxth	r2, r3
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	3304      	adds	r3, #4
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	b29a      	uxth	r2, r3
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	3305      	adds	r3, #5
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	b29b      	uxth	r3, r3
 800a380:	021b      	lsls	r3, r3, #8
 800a382:	b29b      	uxth	r3, r3
 800a384:	4413      	add	r3, r2
 800a386:	b29a      	uxth	r2, r3
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	3306      	adds	r3, #6
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	b29a      	uxth	r2, r3
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	3307      	adds	r3, #7
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	021b      	lsls	r3, r3, #8
 800a39e:	b29b      	uxth	r3, r3
 800a3a0:	4413      	add	r3, r2
 800a3a2:	b29a      	uxth	r2, r3
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	80da      	strh	r2, [r3, #6]

}
 800a3a8:	bf00      	nop
 800a3aa:	370c      	adds	r7, #12
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bc80      	pop	{r7}
 800a3b0:	4770      	bx	lr

0800a3b2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b082      	sub	sp, #8
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
 800a3ba:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a3bc:	2180      	movs	r1, #128	; 0x80
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 fc74 	bl	800acac <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a3c4:	2100      	movs	r1, #0
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 fc70 	bl	800acac <USBD_LL_StallEP>
}
 800a3cc:	bf00      	nop
 800a3ce:	3708      	adds	r7, #8
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b086      	sub	sp, #24
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	60f8      	str	r0, [r7, #12]
 800a3dc:	60b9      	str	r1, [r7, #8]
 800a3de:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d032      	beq.n	800a450 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a3ea:	68f8      	ldr	r0, [r7, #12]
 800a3ec:	f000 f834 	bl	800a458 <USBD_GetLen>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	005b      	lsls	r3, r3, #1
 800a3f8:	b29a      	uxth	r2, r3
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a3fe:	7dfb      	ldrb	r3, [r7, #23]
 800a400:	1c5a      	adds	r2, r3, #1
 800a402:	75fa      	strb	r2, [r7, #23]
 800a404:	461a      	mov	r2, r3
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	4413      	add	r3, r2
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	7812      	ldrb	r2, [r2, #0]
 800a40e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a410:	7dfb      	ldrb	r3, [r7, #23]
 800a412:	1c5a      	adds	r2, r3, #1
 800a414:	75fa      	strb	r2, [r7, #23]
 800a416:	461a      	mov	r2, r3
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	4413      	add	r3, r2
 800a41c:	2203      	movs	r2, #3
 800a41e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a420:	e012      	b.n	800a448 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	1c5a      	adds	r2, r3, #1
 800a426:	60fa      	str	r2, [r7, #12]
 800a428:	7dfa      	ldrb	r2, [r7, #23]
 800a42a:	1c51      	adds	r1, r2, #1
 800a42c:	75f9      	strb	r1, [r7, #23]
 800a42e:	4611      	mov	r1, r2
 800a430:	68ba      	ldr	r2, [r7, #8]
 800a432:	440a      	add	r2, r1
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a438:	7dfb      	ldrb	r3, [r7, #23]
 800a43a:	1c5a      	adds	r2, r3, #1
 800a43c:	75fa      	strb	r2, [r7, #23]
 800a43e:	461a      	mov	r2, r3
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	4413      	add	r3, r2
 800a444:	2200      	movs	r2, #0
 800a446:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d1e8      	bne.n	800a422 <USBD_GetString+0x4e>
    }
  }
}
 800a450:	bf00      	nop
 800a452:	3718      	adds	r7, #24
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a458:	b480      	push	{r7}
 800a45a:	b085      	sub	sp, #20
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a460:	2300      	movs	r3, #0
 800a462:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a464:	e005      	b.n	800a472 <USBD_GetLen+0x1a>
  {
    len++;
 800a466:	7bfb      	ldrb	r3, [r7, #15]
 800a468:	3301      	adds	r3, #1
 800a46a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	3301      	adds	r3, #1
 800a470:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d1f5      	bne.n	800a466 <USBD_GetLen+0xe>
  }

  return len;
 800a47a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3714      	adds	r7, #20
 800a480:	46bd      	mov	sp, r7
 800a482:	bc80      	pop	{r7}
 800a484:	4770      	bx	lr

0800a486 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a486:	b580      	push	{r7, lr}
 800a488:	b084      	sub	sp, #16
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	60f8      	str	r0, [r7, #12]
 800a48e:	60b9      	str	r1, [r7, #8]
 800a490:	4613      	mov	r3, r2
 800a492:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2202      	movs	r2, #2
 800a498:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a49c:	88fa      	ldrh	r2, [r7, #6]
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a4a2:	88fa      	ldrh	r2, [r7, #6]
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4a8:	88fb      	ldrh	r3, [r7, #6]
 800a4aa:	68ba      	ldr	r2, [r7, #8]
 800a4ac:	2100      	movs	r1, #0
 800a4ae:	68f8      	ldr	r0, [r7, #12]
 800a4b0:	f000 fc85 	bl	800adbe <USBD_LL_Transmit>

  return USBD_OK;
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3710      	adds	r7, #16
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}

0800a4be <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a4be:	b580      	push	{r7, lr}
 800a4c0:	b084      	sub	sp, #16
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	60f8      	str	r0, [r7, #12]
 800a4c6:	60b9      	str	r1, [r7, #8]
 800a4c8:	4613      	mov	r3, r2
 800a4ca:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4cc:	88fb      	ldrh	r3, [r7, #6]
 800a4ce:	68ba      	ldr	r2, [r7, #8]
 800a4d0:	2100      	movs	r1, #0
 800a4d2:	68f8      	ldr	r0, [r7, #12]
 800a4d4:	f000 fc73 	bl	800adbe <USBD_LL_Transmit>

  return USBD_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3710      	adds	r7, #16
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b084      	sub	sp, #16
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	60f8      	str	r0, [r7, #12]
 800a4ea:	60b9      	str	r1, [r7, #8]
 800a4ec:	4613      	mov	r3, r2
 800a4ee:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2203      	movs	r2, #3
 800a4f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a4f8:	88fa      	ldrh	r2, [r7, #6]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a500:	88fa      	ldrh	r2, [r7, #6]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a508:	88fb      	ldrh	r3, [r7, #6]
 800a50a:	68ba      	ldr	r2, [r7, #8]
 800a50c:	2100      	movs	r1, #0
 800a50e:	68f8      	ldr	r0, [r7, #12]
 800a510:	f000 fc78 	bl	800ae04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a514:	2300      	movs	r3, #0
}
 800a516:	4618      	mov	r0, r3
 800a518:	3710      	adds	r7, #16
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}

0800a51e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a51e:	b580      	push	{r7, lr}
 800a520:	b084      	sub	sp, #16
 800a522:	af00      	add	r7, sp, #0
 800a524:	60f8      	str	r0, [r7, #12]
 800a526:	60b9      	str	r1, [r7, #8]
 800a528:	4613      	mov	r3, r2
 800a52a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a52c:	88fb      	ldrh	r3, [r7, #6]
 800a52e:	68ba      	ldr	r2, [r7, #8]
 800a530:	2100      	movs	r1, #0
 800a532:	68f8      	ldr	r0, [r7, #12]
 800a534:	f000 fc66 	bl	800ae04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a538:	2300      	movs	r3, #0
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3710      	adds	r7, #16
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}

0800a542 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a542:	b580      	push	{r7, lr}
 800a544:	b082      	sub	sp, #8
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2204      	movs	r2, #4
 800a54e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a552:	2300      	movs	r3, #0
 800a554:	2200      	movs	r2, #0
 800a556:	2100      	movs	r1, #0
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f000 fc30 	bl	800adbe <USBD_LL_Transmit>

  return USBD_OK;
 800a55e:	2300      	movs	r3, #0
}
 800a560:	4618      	mov	r0, r3
 800a562:	3708      	adds	r7, #8
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2205      	movs	r2, #5
 800a574:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a578:	2300      	movs	r3, #0
 800a57a:	2200      	movs	r2, #0
 800a57c:	2100      	movs	r1, #0
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 fc40 	bl	800ae04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a584:	2300      	movs	r3, #0
}
 800a586:	4618      	mov	r0, r3
 800a588:	3708      	adds	r7, #8
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
	...

0800a590 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a594:	2200      	movs	r2, #0
 800a596:	4912      	ldr	r1, [pc, #72]	; (800a5e0 <MX_USB_DEVICE_Init+0x50>)
 800a598:	4812      	ldr	r0, [pc, #72]	; (800a5e4 <MX_USB_DEVICE_Init+0x54>)
 800a59a:	f7fe ff5e 	bl	800945a <USBD_Init>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d001      	beq.n	800a5a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a5a4:	f7f7 faca 	bl	8001b3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a5a8:	490f      	ldr	r1, [pc, #60]	; (800a5e8 <MX_USB_DEVICE_Init+0x58>)
 800a5aa:	480e      	ldr	r0, [pc, #56]	; (800a5e4 <MX_USB_DEVICE_Init+0x54>)
 800a5ac:	f7fe ff80 	bl	80094b0 <USBD_RegisterClass>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d001      	beq.n	800a5ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a5b6:	f7f7 fac1 	bl	8001b3c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a5ba:	490c      	ldr	r1, [pc, #48]	; (800a5ec <MX_USB_DEVICE_Init+0x5c>)
 800a5bc:	4809      	ldr	r0, [pc, #36]	; (800a5e4 <MX_USB_DEVICE_Init+0x54>)
 800a5be:	f7fe feb1 	bl	8009324 <USBD_CDC_RegisterInterface>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d001      	beq.n	800a5cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a5c8:	f7f7 fab8 	bl	8001b3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a5cc:	4805      	ldr	r0, [pc, #20]	; (800a5e4 <MX_USB_DEVICE_Init+0x54>)
 800a5ce:	f7fe ff88 	bl	80094e2 <USBD_Start>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d001      	beq.n	800a5dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a5d8:	f7f7 fab0 	bl	8001b3c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a5dc:	bf00      	nop
 800a5de:	bd80      	pop	{r7, pc}
 800a5e0:	20000130 	.word	0x20000130
 800a5e4:	2000041c 	.word	0x2000041c
 800a5e8:	2000001c 	.word	0x2000001c
 800a5ec:	20000120 	.word	0x20000120

0800a5f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	4905      	ldr	r1, [pc, #20]	; (800a60c <CDC_Init_FS+0x1c>)
 800a5f8:	4805      	ldr	r0, [pc, #20]	; (800a610 <CDC_Init_FS+0x20>)
 800a5fa:	f7fe fea9 	bl	8009350 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a5fe:	4905      	ldr	r1, [pc, #20]	; (800a614 <CDC_Init_FS+0x24>)
 800a600:	4803      	ldr	r0, [pc, #12]	; (800a610 <CDC_Init_FS+0x20>)
 800a602:	f7fe febe 	bl	8009382 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a606:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a608:	4618      	mov	r0, r3
 800a60a:	bd80      	pop	{r7, pc}
 800a60c:	20000ac8 	.word	0x20000ac8
 800a610:	2000041c 	.word	0x2000041c
 800a614:	200006e0 	.word	0x200006e0

0800a618 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a618:	b480      	push	{r7}
 800a61a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a61c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a61e:	4618      	mov	r0, r3
 800a620:	46bd      	mov	sp, r7
 800a622:	bc80      	pop	{r7}
 800a624:	4770      	bx	lr
	...

0800a628 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a628:	b480      	push	{r7}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	4603      	mov	r3, r0
 800a630:	6039      	str	r1, [r7, #0]
 800a632:	71fb      	strb	r3, [r7, #7]
 800a634:	4613      	mov	r3, r2
 800a636:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a638:	79fb      	ldrb	r3, [r7, #7]
 800a63a:	2b23      	cmp	r3, #35	; 0x23
 800a63c:	d84a      	bhi.n	800a6d4 <CDC_Control_FS+0xac>
 800a63e:	a201      	add	r2, pc, #4	; (adr r2, 800a644 <CDC_Control_FS+0x1c>)
 800a640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a644:	0800a6d5 	.word	0x0800a6d5
 800a648:	0800a6d5 	.word	0x0800a6d5
 800a64c:	0800a6d5 	.word	0x0800a6d5
 800a650:	0800a6d5 	.word	0x0800a6d5
 800a654:	0800a6d5 	.word	0x0800a6d5
 800a658:	0800a6d5 	.word	0x0800a6d5
 800a65c:	0800a6d5 	.word	0x0800a6d5
 800a660:	0800a6d5 	.word	0x0800a6d5
 800a664:	0800a6d5 	.word	0x0800a6d5
 800a668:	0800a6d5 	.word	0x0800a6d5
 800a66c:	0800a6d5 	.word	0x0800a6d5
 800a670:	0800a6d5 	.word	0x0800a6d5
 800a674:	0800a6d5 	.word	0x0800a6d5
 800a678:	0800a6d5 	.word	0x0800a6d5
 800a67c:	0800a6d5 	.word	0x0800a6d5
 800a680:	0800a6d5 	.word	0x0800a6d5
 800a684:	0800a6d5 	.word	0x0800a6d5
 800a688:	0800a6d5 	.word	0x0800a6d5
 800a68c:	0800a6d5 	.word	0x0800a6d5
 800a690:	0800a6d5 	.word	0x0800a6d5
 800a694:	0800a6d5 	.word	0x0800a6d5
 800a698:	0800a6d5 	.word	0x0800a6d5
 800a69c:	0800a6d5 	.word	0x0800a6d5
 800a6a0:	0800a6d5 	.word	0x0800a6d5
 800a6a4:	0800a6d5 	.word	0x0800a6d5
 800a6a8:	0800a6d5 	.word	0x0800a6d5
 800a6ac:	0800a6d5 	.word	0x0800a6d5
 800a6b0:	0800a6d5 	.word	0x0800a6d5
 800a6b4:	0800a6d5 	.word	0x0800a6d5
 800a6b8:	0800a6d5 	.word	0x0800a6d5
 800a6bc:	0800a6d5 	.word	0x0800a6d5
 800a6c0:	0800a6d5 	.word	0x0800a6d5
 800a6c4:	0800a6d5 	.word	0x0800a6d5
 800a6c8:	0800a6d5 	.word	0x0800a6d5
 800a6cc:	0800a6d5 	.word	0x0800a6d5
 800a6d0:	0800a6d5 	.word	0x0800a6d5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a6d4:	bf00      	nop
  }

  return (USBD_OK);
 800a6d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	370c      	adds	r7, #12
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bc80      	pop	{r7}
 800a6e0:	4770      	bx	lr
 800a6e2:	bf00      	nop

0800a6e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b084      	sub	sp, #16
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	uint8_t contador = 0;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	73fb      	strb	r3, [r7, #15]
	if(USB_FLAG == 0)
 800a6f2:	4b13      	ldr	r3, [pc, #76]	; (800a740 <CDC_Receive_FS+0x5c>)
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d11d      	bne.n	800a736 <CDC_Receive_FS+0x52>
	{
		 memset (buffer,'\0', 70);
 800a6fa:	2246      	movs	r2, #70	; 0x46
 800a6fc:	2100      	movs	r1, #0
 800a6fe:	4811      	ldr	r0, [pc, #68]	; (800a744 <CDC_Receive_FS+0x60>)
 800a700:	f000 fc34 	bl	800af6c <memset>
	 USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a704:	6879      	ldr	r1, [r7, #4]
 800a706:	4810      	ldr	r0, [pc, #64]	; (800a748 <CDC_Receive_FS+0x64>)
 800a708:	f7fe fe3b 	bl	8009382 <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a70c:	480e      	ldr	r0, [pc, #56]	; (800a748 <CDC_Receive_FS+0x64>)
 800a70e:	f7fe fe7a 	bl	8009406 <USBD_CDC_ReceivePacket>
	  uint8_t len = (uint8_t) *Len;
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	73bb      	strb	r3, [r7, #14]
	  memcpy (buffer,Buf,len);
 800a718:	7bbb      	ldrb	r3, [r7, #14]
 800a71a:	461a      	mov	r2, r3
 800a71c:	6879      	ldr	r1, [r7, #4]
 800a71e:	4809      	ldr	r0, [pc, #36]	; (800a744 <CDC_Receive_FS+0x60>)
 800a720:	f000 fc16 	bl	800af50 <memcpy>
	  memset (Buf,'\0',len);
 800a724:	7bbb      	ldrb	r3, [r7, #14]
 800a726:	461a      	mov	r2, r3
 800a728:	2100      	movs	r1, #0
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 fc1e 	bl	800af6c <memset>
	/*  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);*/
	  USB_FLAG = 1;
 800a730:	4b03      	ldr	r3, [pc, #12]	; (800a740 <CDC_Receive_FS+0x5c>)
 800a732:	2201      	movs	r2, #1
 800a734:	701a      	strb	r2, [r3, #0]
	}
	return (USBD_OK);
 800a736:	2300      	movs	r3, #0


  /* USER CODE END 6 */
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3710      	adds	r7, #16
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	200002b6 	.word	0x200002b6
 800a744:	20000270 	.word	0x20000270
 800a748:	2000041c 	.word	0x2000041c

0800a74c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b084      	sub	sp, #16
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	460b      	mov	r3, r1
 800a756:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a758:	2300      	movs	r3, #0
 800a75a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a75c:	4b0d      	ldr	r3, [pc, #52]	; (800a794 <CDC_Transmit_FS+0x48>)
 800a75e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a762:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d001      	beq.n	800a772 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a76e:	2301      	movs	r3, #1
 800a770:	e00b      	b.n	800a78a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a772:	887b      	ldrh	r3, [r7, #2]
 800a774:	461a      	mov	r2, r3
 800a776:	6879      	ldr	r1, [r7, #4]
 800a778:	4806      	ldr	r0, [pc, #24]	; (800a794 <CDC_Transmit_FS+0x48>)
 800a77a:	f7fe fde9 	bl	8009350 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a77e:	4805      	ldr	r0, [pc, #20]	; (800a794 <CDC_Transmit_FS+0x48>)
 800a780:	f7fe fe12 	bl	80093a8 <USBD_CDC_TransmitPacket>
 800a784:	4603      	mov	r3, r0
 800a786:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a788:	7bfb      	ldrb	r3, [r7, #15]
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3710      	adds	r7, #16
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop
 800a794:	2000041c 	.word	0x2000041c

0800a798 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a798:	b480      	push	{r7}
 800a79a:	b083      	sub	sp, #12
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	4603      	mov	r3, r0
 800a7a0:	6039      	str	r1, [r7, #0]
 800a7a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	2212      	movs	r2, #18
 800a7a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a7aa:	4b03      	ldr	r3, [pc, #12]	; (800a7b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	370c      	adds	r7, #12
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bc80      	pop	{r7}
 800a7b4:	4770      	bx	lr
 800a7b6:	bf00      	nop
 800a7b8:	2000014c 	.word	0x2000014c

0800a7bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b083      	sub	sp, #12
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	6039      	str	r1, [r7, #0]
 800a7c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	2204      	movs	r2, #4
 800a7cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a7ce:	4b03      	ldr	r3, [pc, #12]	; (800a7dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bc80      	pop	{r7}
 800a7d8:	4770      	bx	lr
 800a7da:	bf00      	nop
 800a7dc:	20000160 	.word	0x20000160

0800a7e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b082      	sub	sp, #8
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	6039      	str	r1, [r7, #0]
 800a7ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a7ec:	79fb      	ldrb	r3, [r7, #7]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d105      	bne.n	800a7fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a7f2:	683a      	ldr	r2, [r7, #0]
 800a7f4:	4907      	ldr	r1, [pc, #28]	; (800a814 <USBD_FS_ProductStrDescriptor+0x34>)
 800a7f6:	4808      	ldr	r0, [pc, #32]	; (800a818 <USBD_FS_ProductStrDescriptor+0x38>)
 800a7f8:	f7ff fdec 	bl	800a3d4 <USBD_GetString>
 800a7fc:	e004      	b.n	800a808 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a7fe:	683a      	ldr	r2, [r7, #0]
 800a800:	4904      	ldr	r1, [pc, #16]	; (800a814 <USBD_FS_ProductStrDescriptor+0x34>)
 800a802:	4805      	ldr	r0, [pc, #20]	; (800a818 <USBD_FS_ProductStrDescriptor+0x38>)
 800a804:	f7ff fde6 	bl	800a3d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a808:	4b02      	ldr	r3, [pc, #8]	; (800a814 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3708      	adds	r7, #8
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	20000eb0 	.word	0x20000eb0
 800a818:	0800afa4 	.word	0x0800afa4

0800a81c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	4603      	mov	r3, r0
 800a824:	6039      	str	r1, [r7, #0]
 800a826:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a828:	683a      	ldr	r2, [r7, #0]
 800a82a:	4904      	ldr	r1, [pc, #16]	; (800a83c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a82c:	4804      	ldr	r0, [pc, #16]	; (800a840 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a82e:	f7ff fdd1 	bl	800a3d4 <USBD_GetString>
  return USBD_StrDesc;
 800a832:	4b02      	ldr	r3, [pc, #8]	; (800a83c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a834:	4618      	mov	r0, r3
 800a836:	3708      	adds	r7, #8
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	20000eb0 	.word	0x20000eb0
 800a840:	0800afbc 	.word	0x0800afbc

0800a844 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b082      	sub	sp, #8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	4603      	mov	r3, r0
 800a84c:	6039      	str	r1, [r7, #0]
 800a84e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	221a      	movs	r2, #26
 800a854:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a856:	f000 f843 	bl	800a8e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a85a:	4b02      	ldr	r3, [pc, #8]	; (800a864 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3708      	adds	r7, #8
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}
 800a864:	20000164 	.word	0x20000164

0800a868 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	4603      	mov	r3, r0
 800a870:	6039      	str	r1, [r7, #0]
 800a872:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a874:	79fb      	ldrb	r3, [r7, #7]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d105      	bne.n	800a886 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a87a:	683a      	ldr	r2, [r7, #0]
 800a87c:	4907      	ldr	r1, [pc, #28]	; (800a89c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a87e:	4808      	ldr	r0, [pc, #32]	; (800a8a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a880:	f7ff fda8 	bl	800a3d4 <USBD_GetString>
 800a884:	e004      	b.n	800a890 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a886:	683a      	ldr	r2, [r7, #0]
 800a888:	4904      	ldr	r1, [pc, #16]	; (800a89c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a88a:	4805      	ldr	r0, [pc, #20]	; (800a8a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a88c:	f7ff fda2 	bl	800a3d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a890:	4b02      	ldr	r3, [pc, #8]	; (800a89c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a892:	4618      	mov	r0, r3
 800a894:	3708      	adds	r7, #8
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
 800a89a:	bf00      	nop
 800a89c:	20000eb0 	.word	0x20000eb0
 800a8a0:	0800afd0 	.word	0x0800afd0

0800a8a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b082      	sub	sp, #8
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	6039      	str	r1, [r7, #0]
 800a8ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a8b0:	79fb      	ldrb	r3, [r7, #7]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d105      	bne.n	800a8c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a8b6:	683a      	ldr	r2, [r7, #0]
 800a8b8:	4907      	ldr	r1, [pc, #28]	; (800a8d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a8ba:	4808      	ldr	r0, [pc, #32]	; (800a8dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a8bc:	f7ff fd8a 	bl	800a3d4 <USBD_GetString>
 800a8c0:	e004      	b.n	800a8cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a8c2:	683a      	ldr	r2, [r7, #0]
 800a8c4:	4904      	ldr	r1, [pc, #16]	; (800a8d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a8c6:	4805      	ldr	r0, [pc, #20]	; (800a8dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a8c8:	f7ff fd84 	bl	800a3d4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8cc:	4b02      	ldr	r3, [pc, #8]	; (800a8d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3708      	adds	r7, #8
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
 800a8d6:	bf00      	nop
 800a8d8:	20000eb0 	.word	0x20000eb0
 800a8dc:	0800afdc 	.word	0x0800afdc

0800a8e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a8e6:	4b0f      	ldr	r3, [pc, #60]	; (800a924 <Get_SerialNum+0x44>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a8ec:	4b0e      	ldr	r3, [pc, #56]	; (800a928 <Get_SerialNum+0x48>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a8f2:	4b0e      	ldr	r3, [pc, #56]	; (800a92c <Get_SerialNum+0x4c>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a8f8:	68fa      	ldr	r2, [r7, #12]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	4413      	add	r3, r2
 800a8fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d009      	beq.n	800a91a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a906:	2208      	movs	r2, #8
 800a908:	4909      	ldr	r1, [pc, #36]	; (800a930 <Get_SerialNum+0x50>)
 800a90a:	68f8      	ldr	r0, [r7, #12]
 800a90c:	f000 f814 	bl	800a938 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a910:	2204      	movs	r2, #4
 800a912:	4908      	ldr	r1, [pc, #32]	; (800a934 <Get_SerialNum+0x54>)
 800a914:	68b8      	ldr	r0, [r7, #8]
 800a916:	f000 f80f 	bl	800a938 <IntToUnicode>
  }
}
 800a91a:	bf00      	nop
 800a91c:	3710      	adds	r7, #16
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	1ffff7e8 	.word	0x1ffff7e8
 800a928:	1ffff7ec 	.word	0x1ffff7ec
 800a92c:	1ffff7f0 	.word	0x1ffff7f0
 800a930:	20000166 	.word	0x20000166
 800a934:	20000176 	.word	0x20000176

0800a938 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a938:	b480      	push	{r7}
 800a93a:	b087      	sub	sp, #28
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	4613      	mov	r3, r2
 800a944:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a946:	2300      	movs	r3, #0
 800a948:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a94a:	2300      	movs	r3, #0
 800a94c:	75fb      	strb	r3, [r7, #23]
 800a94e:	e027      	b.n	800a9a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	0f1b      	lsrs	r3, r3, #28
 800a954:	2b09      	cmp	r3, #9
 800a956:	d80b      	bhi.n	800a970 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	0f1b      	lsrs	r3, r3, #28
 800a95c:	b2da      	uxtb	r2, r3
 800a95e:	7dfb      	ldrb	r3, [r7, #23]
 800a960:	005b      	lsls	r3, r3, #1
 800a962:	4619      	mov	r1, r3
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	440b      	add	r3, r1
 800a968:	3230      	adds	r2, #48	; 0x30
 800a96a:	b2d2      	uxtb	r2, r2
 800a96c:	701a      	strb	r2, [r3, #0]
 800a96e:	e00a      	b.n	800a986 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	0f1b      	lsrs	r3, r3, #28
 800a974:	b2da      	uxtb	r2, r3
 800a976:	7dfb      	ldrb	r3, [r7, #23]
 800a978:	005b      	lsls	r3, r3, #1
 800a97a:	4619      	mov	r1, r3
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	440b      	add	r3, r1
 800a980:	3237      	adds	r2, #55	; 0x37
 800a982:	b2d2      	uxtb	r2, r2
 800a984:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	011b      	lsls	r3, r3, #4
 800a98a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a98c:	7dfb      	ldrb	r3, [r7, #23]
 800a98e:	005b      	lsls	r3, r3, #1
 800a990:	3301      	adds	r3, #1
 800a992:	68ba      	ldr	r2, [r7, #8]
 800a994:	4413      	add	r3, r2
 800a996:	2200      	movs	r2, #0
 800a998:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a99a:	7dfb      	ldrb	r3, [r7, #23]
 800a99c:	3301      	adds	r3, #1
 800a99e:	75fb      	strb	r3, [r7, #23]
 800a9a0:	7dfa      	ldrb	r2, [r7, #23]
 800a9a2:	79fb      	ldrb	r3, [r7, #7]
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d3d3      	bcc.n	800a950 <IntToUnicode+0x18>
  }
}
 800a9a8:	bf00      	nop
 800a9aa:	bf00      	nop
 800a9ac:	371c      	adds	r7, #28
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bc80      	pop	{r7}
 800a9b2:	4770      	bx	lr

0800a9b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a0d      	ldr	r2, [pc, #52]	; (800a9f8 <HAL_PCD_MspInit+0x44>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d113      	bne.n	800a9ee <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a9c6:	4b0d      	ldr	r3, [pc, #52]	; (800a9fc <HAL_PCD_MspInit+0x48>)
 800a9c8:	69db      	ldr	r3, [r3, #28]
 800a9ca:	4a0c      	ldr	r2, [pc, #48]	; (800a9fc <HAL_PCD_MspInit+0x48>)
 800a9cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a9d0:	61d3      	str	r3, [r2, #28]
 800a9d2:	4b0a      	ldr	r3, [pc, #40]	; (800a9fc <HAL_PCD_MspInit+0x48>)
 800a9d4:	69db      	ldr	r3, [r3, #28]
 800a9d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a9da:	60fb      	str	r3, [r7, #12]
 800a9dc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a9de:	2200      	movs	r2, #0
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	2014      	movs	r0, #20
 800a9e4:	f7f7 fb7f 	bl	80020e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a9e8:	2014      	movs	r0, #20
 800a9ea:	f7f7 fb98 	bl	800211e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a9ee:	bf00      	nop
 800a9f0:	3710      	adds	r7, #16
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	40005c00 	.word	0x40005c00
 800a9fc:	40021000 	.word	0x40021000

0800aa00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b082      	sub	sp, #8
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800aa14:	4619      	mov	r1, r3
 800aa16:	4610      	mov	r0, r2
 800aa18:	f7fe fdab 	bl	8009572 <USBD_LL_SetupStage>
}
 800aa1c:	bf00      	nop
 800aa1e:	3708      	adds	r7, #8
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	460b      	mov	r3, r1
 800aa2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800aa36:	78fa      	ldrb	r2, [r7, #3]
 800aa38:	6879      	ldr	r1, [r7, #4]
 800aa3a:	4613      	mov	r3, r2
 800aa3c:	009b      	lsls	r3, r3, #2
 800aa3e:	4413      	add	r3, r2
 800aa40:	00db      	lsls	r3, r3, #3
 800aa42:	440b      	add	r3, r1
 800aa44:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	78fb      	ldrb	r3, [r7, #3]
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	f7fe fddd 	bl	800960c <USBD_LL_DataOutStage>
}
 800aa52:	bf00      	nop
 800aa54:	3708      	adds	r7, #8
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}

0800aa5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa5a:	b580      	push	{r7, lr}
 800aa5c:	b082      	sub	sp, #8
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]
 800aa62:	460b      	mov	r3, r1
 800aa64:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800aa6c:	78fa      	ldrb	r2, [r7, #3]
 800aa6e:	6879      	ldr	r1, [r7, #4]
 800aa70:	4613      	mov	r3, r2
 800aa72:	009b      	lsls	r3, r3, #2
 800aa74:	4413      	add	r3, r2
 800aa76:	00db      	lsls	r3, r3, #3
 800aa78:	440b      	add	r3, r1
 800aa7a:	333c      	adds	r3, #60	; 0x3c
 800aa7c:	681a      	ldr	r2, [r3, #0]
 800aa7e:	78fb      	ldrb	r3, [r7, #3]
 800aa80:	4619      	mov	r1, r3
 800aa82:	f7fe fe34 	bl	80096ee <USBD_LL_DataInStage>
}
 800aa86:	bf00      	nop
 800aa88:	3708      	adds	r7, #8
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	b082      	sub	sp, #8
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f7fe ff44 	bl	800992a <USBD_LL_SOF>
}
 800aaa2:	bf00      	nop
 800aaa4:	3708      	adds	r7, #8
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}

0800aaaa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaaa:	b580      	push	{r7, lr}
 800aaac:	b084      	sub	sp, #16
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aab2:	2301      	movs	r3, #1
 800aab4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	689b      	ldr	r3, [r3, #8]
 800aaba:	2b02      	cmp	r3, #2
 800aabc:	d001      	beq.n	800aac2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aabe:	f7f7 f83d 	bl	8001b3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aac8:	7bfa      	ldrb	r2, [r7, #15]
 800aaca:	4611      	mov	r1, r2
 800aacc:	4618      	mov	r0, r3
 800aace:	f7fe fef4 	bl	80098ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aad8:	4618      	mov	r0, r3
 800aada:	f7fe fead 	bl	8009838 <USBD_LL_Reset>
}
 800aade:	bf00      	nop
 800aae0:	3710      	adds	r7, #16
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
	...

0800aae8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f7fe feee 	bl	80098d8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	699b      	ldr	r3, [r3, #24]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d005      	beq.n	800ab10 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab04:	4b04      	ldr	r3, [pc, #16]	; (800ab18 <HAL_PCD_SuspendCallback+0x30>)
 800ab06:	691b      	ldr	r3, [r3, #16]
 800ab08:	4a03      	ldr	r2, [pc, #12]	; (800ab18 <HAL_PCD_SuspendCallback+0x30>)
 800ab0a:	f043 0306 	orr.w	r3, r3, #6
 800ab0e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ab10:	bf00      	nop
 800ab12:	3708      	adds	r7, #8
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}
 800ab18:	e000ed00 	.word	0xe000ed00

0800ab1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7fe fee8 	bl	8009900 <USBD_LL_Resume>
}
 800ab30:	bf00      	nop
 800ab32:	3708      	adds	r7, #8
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ab40:	4a28      	ldr	r2, [pc, #160]	; (800abe4 <USBD_LL_Init+0xac>)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	4a26      	ldr	r2, [pc, #152]	; (800abe4 <USBD_LL_Init+0xac>)
 800ab4c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ab50:	4b24      	ldr	r3, [pc, #144]	; (800abe4 <USBD_LL_Init+0xac>)
 800ab52:	4a25      	ldr	r2, [pc, #148]	; (800abe8 <USBD_LL_Init+0xb0>)
 800ab54:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ab56:	4b23      	ldr	r3, [pc, #140]	; (800abe4 <USBD_LL_Init+0xac>)
 800ab58:	2208      	movs	r2, #8
 800ab5a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ab5c:	4b21      	ldr	r3, [pc, #132]	; (800abe4 <USBD_LL_Init+0xac>)
 800ab5e:	2202      	movs	r2, #2
 800ab60:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ab62:	4b20      	ldr	r3, [pc, #128]	; (800abe4 <USBD_LL_Init+0xac>)
 800ab64:	2200      	movs	r2, #0
 800ab66:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ab68:	4b1e      	ldr	r3, [pc, #120]	; (800abe4 <USBD_LL_Init+0xac>)
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ab6e:	4b1d      	ldr	r3, [pc, #116]	; (800abe4 <USBD_LL_Init+0xac>)
 800ab70:	2200      	movs	r2, #0
 800ab72:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ab74:	481b      	ldr	r0, [pc, #108]	; (800abe4 <USBD_LL_Init+0xac>)
 800ab76:	f7f7 ff97 	bl	8002aa8 <HAL_PCD_Init>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d001      	beq.n	800ab84 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ab80:	f7f6 ffdc 	bl	8001b3c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab8a:	2318      	movs	r3, #24
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	2100      	movs	r1, #0
 800ab90:	f7f9 fc0b 	bl	80043aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab9a:	2358      	movs	r3, #88	; 0x58
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	2180      	movs	r1, #128	; 0x80
 800aba0:	f7f9 fc03 	bl	80043aa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800abaa:	23c0      	movs	r3, #192	; 0xc0
 800abac:	2200      	movs	r2, #0
 800abae:	2181      	movs	r1, #129	; 0x81
 800abb0:	f7f9 fbfb 	bl	80043aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800abba:	f44f 7388 	mov.w	r3, #272	; 0x110
 800abbe:	2200      	movs	r2, #0
 800abc0:	2101      	movs	r1, #1
 800abc2:	f7f9 fbf2 	bl	80043aa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800abcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abd0:	2200      	movs	r2, #0
 800abd2:	2182      	movs	r1, #130	; 0x82
 800abd4:	f7f9 fbe9 	bl	80043aa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800abd8:	2300      	movs	r3, #0
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3708      	adds	r7, #8
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	bf00      	nop
 800abe4:	200010b0 	.word	0x200010b0
 800abe8:	40005c00 	.word	0x40005c00

0800abec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b084      	sub	sp, #16
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abf4:	2300      	movs	r3, #0
 800abf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abf8:	2300      	movs	r3, #0
 800abfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7f8 f85b 	bl	8002cbe <HAL_PCD_Start>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac0c:	7bfb      	ldrb	r3, [r7, #15]
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f000 f94e 	bl	800aeb0 <USBD_Get_USB_Status>
 800ac14:	4603      	mov	r3, r0
 800ac16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac18:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3710      	adds	r7, #16
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}

0800ac22 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ac22:	b580      	push	{r7, lr}
 800ac24:	b084      	sub	sp, #16
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
 800ac2a:	4608      	mov	r0, r1
 800ac2c:	4611      	mov	r1, r2
 800ac2e:	461a      	mov	r2, r3
 800ac30:	4603      	mov	r3, r0
 800ac32:	70fb      	strb	r3, [r7, #3]
 800ac34:	460b      	mov	r3, r1
 800ac36:	70bb      	strb	r3, [r7, #2]
 800ac38:	4613      	mov	r3, r2
 800ac3a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac40:	2300      	movs	r3, #0
 800ac42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac4a:	78bb      	ldrb	r3, [r7, #2]
 800ac4c:	883a      	ldrh	r2, [r7, #0]
 800ac4e:	78f9      	ldrb	r1, [r7, #3]
 800ac50:	f7f8 f9d3 	bl	8002ffa <HAL_PCD_EP_Open>
 800ac54:	4603      	mov	r3, r0
 800ac56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac58:	7bfb      	ldrb	r3, [r7, #15]
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f000 f928 	bl	800aeb0 <USBD_Get_USB_Status>
 800ac60:	4603      	mov	r3, r0
 800ac62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac64:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3710      	adds	r7, #16
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}

0800ac6e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac6e:	b580      	push	{r7, lr}
 800ac70:	b084      	sub	sp, #16
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
 800ac76:	460b      	mov	r3, r1
 800ac78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac88:	78fa      	ldrb	r2, [r7, #3]
 800ac8a:	4611      	mov	r1, r2
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f7f8 fa1a 	bl	80030c6 <HAL_PCD_EP_Close>
 800ac92:	4603      	mov	r3, r0
 800ac94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac96:	7bfb      	ldrb	r3, [r7, #15]
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f000 f909 	bl	800aeb0 <USBD_Get_USB_Status>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aca2:	7bbb      	ldrb	r3, [r7, #14]
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3710      	adds	r7, #16
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b084      	sub	sp, #16
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	460b      	mov	r3, r1
 800acb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acb8:	2300      	movs	r3, #0
 800acba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acbc:	2300      	movs	r3, #0
 800acbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800acc6:	78fa      	ldrb	r2, [r7, #3]
 800acc8:	4611      	mov	r1, r2
 800acca:	4618      	mov	r0, r3
 800accc:	f7f8 fada 	bl	8003284 <HAL_PCD_EP_SetStall>
 800acd0:	4603      	mov	r3, r0
 800acd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acd4:	7bfb      	ldrb	r3, [r7, #15]
 800acd6:	4618      	mov	r0, r3
 800acd8:	f000 f8ea 	bl	800aeb0 <USBD_Get_USB_Status>
 800acdc:	4603      	mov	r3, r0
 800acde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ace0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3710      	adds	r7, #16
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}

0800acea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acea:	b580      	push	{r7, lr}
 800acec:	b084      	sub	sp, #16
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
 800acf2:	460b      	mov	r3, r1
 800acf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acf6:	2300      	movs	r3, #0
 800acf8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acfa:	2300      	movs	r3, #0
 800acfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad04:	78fa      	ldrb	r2, [r7, #3]
 800ad06:	4611      	mov	r1, r2
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f7f8 fb1b 	bl	8003344 <HAL_PCD_EP_ClrStall>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad12:	7bfb      	ldrb	r3, [r7, #15]
 800ad14:	4618      	mov	r0, r3
 800ad16:	f000 f8cb 	bl	800aeb0 <USBD_Get_USB_Status>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad1e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3710      	adds	r7, #16
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b085      	sub	sp, #20
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	460b      	mov	r3, r1
 800ad32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad3a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ad3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	da0c      	bge.n	800ad5e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ad44:	78fb      	ldrb	r3, [r7, #3]
 800ad46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad4a:	68f9      	ldr	r1, [r7, #12]
 800ad4c:	1c5a      	adds	r2, r3, #1
 800ad4e:	4613      	mov	r3, r2
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	4413      	add	r3, r2
 800ad54:	00db      	lsls	r3, r3, #3
 800ad56:	440b      	add	r3, r1
 800ad58:	3302      	adds	r3, #2
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	e00b      	b.n	800ad76 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ad5e:	78fb      	ldrb	r3, [r7, #3]
 800ad60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad64:	68f9      	ldr	r1, [r7, #12]
 800ad66:	4613      	mov	r3, r2
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	4413      	add	r3, r2
 800ad6c:	00db      	lsls	r3, r3, #3
 800ad6e:	440b      	add	r3, r1
 800ad70:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ad74:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3714      	adds	r7, #20
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bc80      	pop	{r7}
 800ad7e:	4770      	bx	lr

0800ad80 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	460b      	mov	r3, r1
 800ad8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad90:	2300      	movs	r3, #0
 800ad92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad9a:	78fa      	ldrb	r2, [r7, #3]
 800ad9c:	4611      	mov	r1, r2
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f7f8 f906 	bl	8002fb0 <HAL_PCD_SetAddress>
 800ada4:	4603      	mov	r3, r0
 800ada6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ada8:	7bfb      	ldrb	r3, [r7, #15]
 800adaa:	4618      	mov	r0, r3
 800adac:	f000 f880 	bl	800aeb0 <USBD_Get_USB_Status>
 800adb0:	4603      	mov	r3, r0
 800adb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adb4:	7bbb      	ldrb	r3, [r7, #14]
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3710      	adds	r7, #16
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b086      	sub	sp, #24
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	60f8      	str	r0, [r7, #12]
 800adc6:	607a      	str	r2, [r7, #4]
 800adc8:	461a      	mov	r2, r3
 800adca:	460b      	mov	r3, r1
 800adcc:	72fb      	strb	r3, [r7, #11]
 800adce:	4613      	mov	r3, r2
 800add0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800add2:	2300      	movs	r3, #0
 800add4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800add6:	2300      	movs	r3, #0
 800add8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ade0:	893b      	ldrh	r3, [r7, #8]
 800ade2:	7af9      	ldrb	r1, [r7, #11]
 800ade4:	687a      	ldr	r2, [r7, #4]
 800ade6:	f7f8 fa0a 	bl	80031fe <HAL_PCD_EP_Transmit>
 800adea:	4603      	mov	r3, r0
 800adec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adee:	7dfb      	ldrb	r3, [r7, #23]
 800adf0:	4618      	mov	r0, r3
 800adf2:	f000 f85d 	bl	800aeb0 <USBD_Get_USB_Status>
 800adf6:	4603      	mov	r3, r0
 800adf8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800adfa:	7dbb      	ldrb	r3, [r7, #22]
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3718      	adds	r7, #24
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b086      	sub	sp, #24
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	60f8      	str	r0, [r7, #12]
 800ae0c:	607a      	str	r2, [r7, #4]
 800ae0e:	461a      	mov	r2, r3
 800ae10:	460b      	mov	r3, r1
 800ae12:	72fb      	strb	r3, [r7, #11]
 800ae14:	4613      	mov	r3, r2
 800ae16:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ae26:	893b      	ldrh	r3, [r7, #8]
 800ae28:	7af9      	ldrb	r1, [r7, #11]
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	f7f8 f993 	bl	8003156 <HAL_PCD_EP_Receive>
 800ae30:	4603      	mov	r3, r0
 800ae32:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae34:	7dfb      	ldrb	r3, [r7, #23]
 800ae36:	4618      	mov	r0, r3
 800ae38:	f000 f83a 	bl	800aeb0 <USBD_Get_USB_Status>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae40:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3718      	adds	r7, #24
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b082      	sub	sp, #8
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
 800ae52:	460b      	mov	r3, r1
 800ae54:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae5c:	78fa      	ldrb	r2, [r7, #3]
 800ae5e:	4611      	mov	r1, r2
 800ae60:	4618      	mov	r0, r3
 800ae62:	f7f8 f9b5 	bl	80031d0 <HAL_PCD_EP_GetRxCount>
 800ae66:	4603      	mov	r3, r0
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3708      	adds	r7, #8
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b083      	sub	sp, #12
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ae78:	4b02      	ldr	r3, [pc, #8]	; (800ae84 <USBD_static_malloc+0x14>)
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	370c      	adds	r7, #12
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bc80      	pop	{r7}
 800ae82:	4770      	bx	lr
 800ae84:	2000139c 	.word	0x2000139c

0800ae88 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b083      	sub	sp, #12
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]

}
 800ae90:	bf00      	nop
 800ae92:	370c      	adds	r7, #12
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bc80      	pop	{r7}
 800ae98:	4770      	bx	lr

0800ae9a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae9a:	b480      	push	{r7}
 800ae9c:	b083      	sub	sp, #12
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	6078      	str	r0, [r7, #4]
 800aea2:	460b      	mov	r3, r1
 800aea4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800aea6:	bf00      	nop
 800aea8:	370c      	adds	r7, #12
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bc80      	pop	{r7}
 800aeae:	4770      	bx	lr

0800aeb0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b085      	sub	sp, #20
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aeba:	2300      	movs	r3, #0
 800aebc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aebe:	79fb      	ldrb	r3, [r7, #7]
 800aec0:	2b03      	cmp	r3, #3
 800aec2:	d817      	bhi.n	800aef4 <USBD_Get_USB_Status+0x44>
 800aec4:	a201      	add	r2, pc, #4	; (adr r2, 800aecc <USBD_Get_USB_Status+0x1c>)
 800aec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeca:	bf00      	nop
 800aecc:	0800aedd 	.word	0x0800aedd
 800aed0:	0800aee3 	.word	0x0800aee3
 800aed4:	0800aee9 	.word	0x0800aee9
 800aed8:	0800aeef 	.word	0x0800aeef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aedc:	2300      	movs	r3, #0
 800aede:	73fb      	strb	r3, [r7, #15]
    break;
 800aee0:	e00b      	b.n	800aefa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aee2:	2302      	movs	r3, #2
 800aee4:	73fb      	strb	r3, [r7, #15]
    break;
 800aee6:	e008      	b.n	800aefa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aee8:	2301      	movs	r3, #1
 800aeea:	73fb      	strb	r3, [r7, #15]
    break;
 800aeec:	e005      	b.n	800aefa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aeee:	2302      	movs	r3, #2
 800aef0:	73fb      	strb	r3, [r7, #15]
    break;
 800aef2:	e002      	b.n	800aefa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aef4:	2302      	movs	r3, #2
 800aef6:	73fb      	strb	r3, [r7, #15]
    break;
 800aef8:	bf00      	nop
  }
  return usb_status;
 800aefa:	7bfb      	ldrb	r3, [r7, #15]
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3714      	adds	r7, #20
 800af00:	46bd      	mov	sp, r7
 800af02:	bc80      	pop	{r7}
 800af04:	4770      	bx	lr
 800af06:	bf00      	nop

0800af08 <__libc_init_array>:
 800af08:	b570      	push	{r4, r5, r6, lr}
 800af0a:	2600      	movs	r6, #0
 800af0c:	4d0c      	ldr	r5, [pc, #48]	; (800af40 <__libc_init_array+0x38>)
 800af0e:	4c0d      	ldr	r4, [pc, #52]	; (800af44 <__libc_init_array+0x3c>)
 800af10:	1b64      	subs	r4, r4, r5
 800af12:	10a4      	asrs	r4, r4, #2
 800af14:	42a6      	cmp	r6, r4
 800af16:	d109      	bne.n	800af2c <__libc_init_array+0x24>
 800af18:	f000 f830 	bl	800af7c <_init>
 800af1c:	2600      	movs	r6, #0
 800af1e:	4d0a      	ldr	r5, [pc, #40]	; (800af48 <__libc_init_array+0x40>)
 800af20:	4c0a      	ldr	r4, [pc, #40]	; (800af4c <__libc_init_array+0x44>)
 800af22:	1b64      	subs	r4, r4, r5
 800af24:	10a4      	asrs	r4, r4, #2
 800af26:	42a6      	cmp	r6, r4
 800af28:	d105      	bne.n	800af36 <__libc_init_array+0x2e>
 800af2a:	bd70      	pop	{r4, r5, r6, pc}
 800af2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800af30:	4798      	blx	r3
 800af32:	3601      	adds	r6, #1
 800af34:	e7ee      	b.n	800af14 <__libc_init_array+0xc>
 800af36:	f855 3b04 	ldr.w	r3, [r5], #4
 800af3a:	4798      	blx	r3
 800af3c:	3601      	adds	r6, #1
 800af3e:	e7f2      	b.n	800af26 <__libc_init_array+0x1e>
 800af40:	0800b004 	.word	0x0800b004
 800af44:	0800b004 	.word	0x0800b004
 800af48:	0800b004 	.word	0x0800b004
 800af4c:	0800b008 	.word	0x0800b008

0800af50 <memcpy>:
 800af50:	440a      	add	r2, r1
 800af52:	4291      	cmp	r1, r2
 800af54:	f100 33ff 	add.w	r3, r0, #4294967295
 800af58:	d100      	bne.n	800af5c <memcpy+0xc>
 800af5a:	4770      	bx	lr
 800af5c:	b510      	push	{r4, lr}
 800af5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af62:	4291      	cmp	r1, r2
 800af64:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af68:	d1f9      	bne.n	800af5e <memcpy+0xe>
 800af6a:	bd10      	pop	{r4, pc}

0800af6c <memset>:
 800af6c:	4603      	mov	r3, r0
 800af6e:	4402      	add	r2, r0
 800af70:	4293      	cmp	r3, r2
 800af72:	d100      	bne.n	800af76 <memset+0xa>
 800af74:	4770      	bx	lr
 800af76:	f803 1b01 	strb.w	r1, [r3], #1
 800af7a:	e7f9      	b.n	800af70 <memset+0x4>

0800af7c <_init>:
 800af7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af7e:	bf00      	nop
 800af80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af82:	bc08      	pop	{r3}
 800af84:	469e      	mov	lr, r3
 800af86:	4770      	bx	lr

0800af88 <_fini>:
 800af88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af8a:	bf00      	nop
 800af8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af8e:	bc08      	pop	{r3}
 800af90:	469e      	mov	lr, r3
 800af92:	4770      	bx	lr
