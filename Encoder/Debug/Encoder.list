
Encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae40  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800af4c  0800af4c  0001af4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afbc  0800afbc  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  0800afbc  0800afbc  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800afbc  0800afbc  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afbc  0800afbc  0001afbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800afc0  0800afc0  0001afc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800afc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001414  20000180  0800b144  00020180  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001594  0800b144  00021594  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d15  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ac5  00000000  00000000  00035ebe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001470  00000000  00000000  00039988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e8  00000000  00000000  0003adf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b3ef  00000000  00000000  0003c0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000183b1  00000000  00000000  000574cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ffb9  00000000  00000000  0006f880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ff839  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054a4  00000000  00000000  000ff88c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000180 	.word	0x20000180
 8000128:	00000000 	.word	0x00000000
 800012c:	0800af34 	.word	0x0800af34

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000184 	.word	0x20000184
 8000148:	0800af34 	.word	0x0800af34

0800014c <FLASH_apaga>:
  * @param  Endereço:	  Endereço inicial da página que deseja ser apagada
  * @param  Paginas:      Quantidade de páginas que deseja apagar a partir do endereço inicial.
  *
  * @retval Void
  */
void FLASH_apaga(uint32_t endereco, uint8_t paginas){
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	70fb      	strb	r3, [r7, #3]
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8000158:	f002 f8f6 	bl	8002348 <HAL_FLASH_Unlock>

	/* Allow Access to option bytes sector */
	HAL_FLASH_OB_Unlock();
 800015c:	f002 f92a 	bl	80023b4 <HAL_FLASH_OB_Unlock>

	/* Fill EraseInit structure*/
	FLASH_EraseInitTypeDef EraseInitStruct;			    // cria estrutura de dados para armazenar informações de apagamento
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;  // definição padrão da biblioteca HAL
 8000160:	2300      	movs	r3, #0
 8000162:	613b      	str	r3, [r7, #16]
	EraseInitStruct.PageAddress = endereco;				// definição do usuário do endereço da página que deseja apagar
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.NbPages = paginas;					// número de páginas que serão apagadas
 8000168:	78fb      	ldrb	r3, [r7, #3]
 800016a:	61fb      	str	r3, [r7, #28]

	uint32_t PageError;									// Valor do endereço caso ocorra erro no apagamento da função HAL_FLASHEx_Erase
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK){
 800016c:	f107 020c 	add.w	r2, r7, #12
 8000170:	f107 0310 	add.w	r3, r7, #16
 8000174:	4611      	mov	r1, r2
 8000176:	4618      	mov	r0, r3
 8000178:	f002 f9fa 	bl	8002570 <HAL_FLASHEx_Erase>
		// rotina caso ocorra erro no processo de apagar
	}

	HAL_FLASH_OB_Lock();
 800017c:	f002 f936 	bl	80023ec <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 8000180:	f002 f908 	bl	8002394 <HAL_FLASH_Lock>
}
 8000184:	bf00      	nop
 8000186:	3720      	adds	r7, #32
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}

0800018c <FLASH_escreve_16bits>:
  * @param  Endereço:	  Endereço da memória em que o dado de 16 bits deverá ser armazenado. Endereço deve ser múltiplo de 2)
  * @param  *dado:        Ponteiro para o valor a ser inserido no endereço de memória especificado
  *
  * @retval Void
  */
void FLASH_escreve_16bits(uint32_t endereco, uint16_t *dado){
 800018c:	b5b0      	push	{r4, r5, r7, lr}
 800018e:	b082      	sub	sp, #8
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
 8000194:	6039      	str	r1, [r7, #0]

	HAL_FLASH_Unlock();
 8000196:	f002 f8d7 	bl	8002348 <HAL_FLASH_Unlock>
	HAL_FLASH_OB_Unlock();
 800019a:	f002 f90b 	bl	80023b4 <HAL_FLASH_OB_Unlock>

	if( HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,(uint64_t)endereco, *dado) != HAL_OK){
 800019e:	683b      	ldr	r3, [r7, #0]
 80001a0:	881b      	ldrh	r3, [r3, #0]
 80001a2:	b29b      	uxth	r3, r3
 80001a4:	2200      	movs	r2, #0
 80001a6:	461c      	mov	r4, r3
 80001a8:	4615      	mov	r5, r2
 80001aa:	4622      	mov	r2, r4
 80001ac:	462b      	mov	r3, r5
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	2001      	movs	r0, #1
 80001b2:	f002 f859 	bl	8002268 <HAL_FLASH_Program>
		// rotina caso ocorra erro no processo de apagar
	}

	HAL_FLASH_OB_Lock();
 80001b6:	f002 f919 	bl	80023ec <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 80001ba:	f002 f8eb 	bl	8002394 <HAL_FLASH_Lock>
}
 80001be:	bf00      	nop
 80001c0:	3708      	adds	r7, #8
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bdb0      	pop	{r4, r5, r7, pc}

080001c6 <FLASH_le_16bits>:
  * @param  Endereço:	  Endereço da memória em que o dado de 16 bits deverá ser lido. Endereço deve ser múltiplo de 2
  * @param  *dado:        Ponteiro para armazenar o valor a ser lido no endereço de memória especificado
  *
  * @retval Void
  */
void FLASH_le_16bits(uint32_t endereco, uint16_t *dado){
 80001c6:	b480      	push	{r7}
 80001c8:	b083      	sub	sp, #12
 80001ca:	af00      	add	r7, sp, #0
 80001cc:	6078      	str	r0, [r7, #4]
 80001ce:	6039      	str	r1, [r7, #0]

	*dado = *(uint32_t*)(endereco);
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	b29a      	uxth	r2, r3
 80001d6:	683b      	ldr	r3, [r7, #0]
 80001d8:	801a      	strh	r2, [r3, #0]

}
 80001da:	bf00      	nop
 80001dc:	370c      	adds	r7, #12
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr

080001e4 <acquisition>:
	__HAL_TIM_SET_COUNTER(&htim3,0);
	while(__HAL_TIM_GET_COUNTER(&htim3) < delay);
}

void acquisition(void)
{
 80001e4:	b590      	push	{r4, r7, lr}
 80001e6:	b087      	sub	sp, #28
 80001e8:	af06      	add	r7, sp, #24
	readState = INIT;
 80001ea:	4b53      	ldr	r3, [pc, #332]	; (8000338 <acquisition+0x154>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	701a      	strb	r2, [r3, #0]
	edgeTime = 0;
 80001f0:	4b52      	ldr	r3, [pc, #328]	; (800033c <acquisition+0x158>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	801a      	strh	r2, [r3, #0]
	while(1)
	{
		if(readState == INIT)
 80001f6:	4b50      	ldr	r3, [pc, #320]	; (8000338 <acquisition+0x154>)
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d113      	bne.n	8000226 <acquisition+0x42>
		{
			pulseBuffer = 0;
 80001fe:	4b50      	ldr	r3, [pc, #320]	; (8000340 <acquisition+0x15c>)
 8000200:	2200      	movs	r2, #0
 8000202:	801a      	strh	r2, [r3, #0]
			USB_FLAG = 0;
 8000204:	4b4f      	ldr	r3, [pc, #316]	; (8000344 <acquisition+0x160>)
 8000206:	2200      	movs	r2, #0
 8000208:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim3,0);
 800020a:	4b4f      	ldr	r3, [pc, #316]	; (8000348 <acquisition+0x164>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	2200      	movs	r2, #0
 8000210:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start(&htim3);
 8000212:	484d      	ldr	r0, [pc, #308]	; (8000348 <acquisition+0x164>)
 8000214:	f004 fe06 	bl	8004e24 <HAL_TIM_Base_Start>
//			HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_1);
			HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000218:	213c      	movs	r1, #60	; 0x3c
 800021a:	484c      	ldr	r0, [pc, #304]	; (800034c <acquisition+0x168>)
 800021c:	f004 ff1c 	bl	8005058 <HAL_TIM_Encoder_Start_IT>
//			HAL_Delay(1);
			readState = COLETA_ALL;
 8000220:	4b45      	ldr	r3, [pc, #276]	; (8000338 <acquisition+0x154>)
 8000222:	2201      	movs	r2, #1
 8000224:	701a      	strb	r2, [r3, #0]


		}

		if(readState == COLETA_ALL)
 8000226:	4b44      	ldr	r3, [pc, #272]	; (8000338 <acquisition+0x154>)
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	2b01      	cmp	r3, #1
 800022c:	d153      	bne.n	80002d6 <acquisition+0xf2>
			 * Na funcao DeviceParamenter(), o valor recebido em dados[1] equivale a taxa de aquisição,
			 * sendo o valor mínimo de aquisição igual 1ms (Fmax = 1kHz, dado[1] = 1), realizo multiplicação
			 * dado[1] * 10 para que 1ms seja equivalente a 10 ticks do Timer3 (10 ticks x 100u = 1ms)
			 * e então o polling abaixo funcione;
			 */
			__HAL_TIM_SET_COUNTER(&htim3,0);
 800022e:	4b46      	ldr	r3, [pc, #280]	; (8000348 <acquisition+0x164>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	2200      	movs	r2, #0
 8000234:	625a      	str	r2, [r3, #36]	; 0x24
			while(__HAL_TIM_GET_COUNTER(&htim3) < timeTotal && samples<AMOSTRA);
 8000236:	bf00      	nop
 8000238:	4b43      	ldr	r3, [pc, #268]	; (8000348 <acquisition+0x164>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800023e:	4a44      	ldr	r2, [pc, #272]	; (8000350 <acquisition+0x16c>)
 8000240:	8812      	ldrh	r2, [r2, #0]
 8000242:	4293      	cmp	r3, r2
 8000244:	d203      	bcs.n	800024e <acquisition+0x6a>
 8000246:	4b43      	ldr	r3, [pc, #268]	; (8000354 <acquisition+0x170>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	2b09      	cmp	r3, #9
 800024c:	d9f4      	bls.n	8000238 <acquisition+0x54>
			memcpy(&bufferTime,&(__HAL_TIM_GET_COUNTER(&htim3)),sizeof(uint16_t));
 800024e:	4b3e      	ldr	r3, [pc, #248]	; (8000348 <acquisition+0x164>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	3324      	adds	r3, #36	; 0x24
 8000254:	881b      	ldrh	r3, [r3, #0]
 8000256:	b29a      	uxth	r2, r3
 8000258:	4b3f      	ldr	r3, [pc, #252]	; (8000358 <acquisition+0x174>)
 800025a:	801a      	strh	r2, [r3, #0]
 800025c:	4b3f      	ldr	r3, [pc, #252]	; (800035c <acquisition+0x178>)
 800025e:	881a      	ldrh	r2, [r3, #0]
			memcpy(&pulseBuffer,&count,sizeof(int16_t));
 8000260:	4b37      	ldr	r3, [pc, #220]	; (8000340 <acquisition+0x15c>)
 8000262:	801a      	strh	r2, [r3, #0]
//			pulseBuffer = pulseBuffer>>1; // Teste de apenas 1 canal
			pulseBuffer = pulseBuffer>>2; // aplicação
 8000264:	4b36      	ldr	r3, [pc, #216]	; (8000340 <acquisition+0x15c>)
 8000266:	f9b3 3000 	ldrsh.w	r3, [r3]
 800026a:	109b      	asrs	r3, r3, #2
 800026c:	b21a      	sxth	r2, r3
 800026e:	4b34      	ldr	r3, [pc, #208]	; (8000340 <acquisition+0x15c>)
 8000270:	801a      	strh	r2, [r3, #0]
//			previous = pulseBuffer;




			bufferTime = bufferTime/10;
 8000272:	4b39      	ldr	r3, [pc, #228]	; (8000358 <acquisition+0x174>)
 8000274:	881b      	ldrh	r3, [r3, #0]
 8000276:	4a3a      	ldr	r2, [pc, #232]	; (8000360 <acquisition+0x17c>)
 8000278:	fba2 2303 	umull	r2, r3, r2, r3
 800027c:	08db      	lsrs	r3, r3, #3
 800027e:	b29a      	uxth	r2, r3
 8000280:	4b35      	ldr	r3, [pc, #212]	; (8000358 <acquisition+0x174>)
 8000282:	801a      	strh	r2, [r3, #0]
			edgeTime = bufferTime + edgeTime;
 8000284:	4b34      	ldr	r3, [pc, #208]	; (8000358 <acquisition+0x174>)
 8000286:	881a      	ldrh	r2, [r3, #0]
 8000288:	4b2c      	ldr	r3, [pc, #176]	; (800033c <acquisition+0x158>)
 800028a:	881b      	ldrh	r3, [r3, #0]
 800028c:	4413      	add	r3, r2
 800028e:	b29a      	uxth	r2, r3
 8000290:	4b2a      	ldr	r3, [pc, #168]	; (800033c <acquisition+0x158>)
 8000292:	801a      	strh	r2, [r3, #0]

			currentPulse[samples] = pulseBuffer;
 8000294:	4b2a      	ldr	r3, [pc, #168]	; (8000340 <acquisition+0x15c>)
 8000296:	f9b3 1000 	ldrsh.w	r1, [r3]
 800029a:	4b2e      	ldr	r3, [pc, #184]	; (8000354 <acquisition+0x170>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	461a      	mov	r2, r3
 80002a0:	4b30      	ldr	r3, [pc, #192]	; (8000364 <acquisition+0x180>)
 80002a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			currentTime[samples] = edgeTime;
 80002a6:	4b2b      	ldr	r3, [pc, #172]	; (8000354 <acquisition+0x170>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	461a      	mov	r2, r3
 80002ac:	4b23      	ldr	r3, [pc, #140]	; (800033c <acquisition+0x158>)
 80002ae:	8819      	ldrh	r1, [r3, #0]
 80002b0:	4b2d      	ldr	r3, [pc, #180]	; (8000368 <acquisition+0x184>)
 80002b2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			samples++;
 80002b6:	4b27      	ldr	r3, [pc, #156]	; (8000354 <acquisition+0x170>)
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	3301      	adds	r3, #1
 80002bc:	b2da      	uxtb	r2, r3
 80002be:	4b25      	ldr	r3, [pc, #148]	; (8000354 <acquisition+0x170>)
 80002c0:	701a      	strb	r2, [r3, #0]

			if(samples == AMOSTRA)
 80002c2:	4b24      	ldr	r3, [pc, #144]	; (8000354 <acquisition+0x170>)
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	2b0a      	cmp	r3, #10
 80002c8:	d105      	bne.n	80002d6 <acquisition+0xf2>
			{
				samples = 0;
 80002ca:	4b22      	ldr	r3, [pc, #136]	; (8000354 <acquisition+0x170>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	701a      	strb	r2, [r3, #0]
				readState = TRANSMISSAO;
 80002d0:	4b19      	ldr	r3, [pc, #100]	; (8000338 <acquisition+0x154>)
 80002d2:	2203      	movs	r2, #3
 80002d4:	701a      	strb	r2, [r3, #0]
			}

		}


		if(readState == TRANSMISSAO)
 80002d6:	4b18      	ldr	r3, [pc, #96]	; (8000338 <acquisition+0x154>)
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	2b03      	cmp	r3, #3
 80002dc:	d121      	bne.n	8000322 <acquisition+0x13e>
		{
			TransmitData(receive_message,currentPulse,67);
 80002de:	4b23      	ldr	r3, [pc, #140]	; (800036c <acquisition+0x188>)
 80002e0:	2243      	movs	r2, #67	; 0x43
 80002e2:	9204      	str	r2, [sp, #16]
 80002e4:	4a1f      	ldr	r2, [pc, #124]	; (8000364 <acquisition+0x180>)
 80002e6:	9203      	str	r2, [sp, #12]
 80002e8:	466c      	mov	r4, sp
 80002ea:	f103 0210 	add.w	r2, r3, #16
 80002ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80002f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80002f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002f6:	f000 febb 	bl	8001070 <TransmitData>
			HAL_GPIO_TogglePin(GPIOA, ACQUISITION_Pin);
 80002fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002fe:	481c      	ldr	r0, [pc, #112]	; (8000370 <acquisition+0x18c>)
 8000300:	f002 fb7a 	bl	80029f8 <HAL_GPIO_TogglePin>
			EndReception = '\0';
 8000304:	4b1b      	ldr	r3, [pc, #108]	; (8000374 <acquisition+0x190>)
 8000306:	2200      	movs	r2, #0
 8000308:	701a      	strb	r2, [r3, #0]
			if(USB_FLAG == 1)
 800030a:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <acquisition+0x160>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	b2db      	uxtb	r3, r3
 8000310:	2b01      	cmp	r3, #1
 8000312:	d103      	bne.n	800031c <acquisition+0x138>
			{
				readState = COMUNICACAO;
 8000314:	4b08      	ldr	r3, [pc, #32]	; (8000338 <acquisition+0x154>)
 8000316:	2204      	movs	r2, #4
 8000318:	701a      	strb	r2, [r3, #0]
 800031a:	e002      	b.n	8000322 <acquisition+0x13e>
			}
			else readState = COLETA_ALL;
 800031c:	4b06      	ldr	r3, [pc, #24]	; (8000338 <acquisition+0x154>)
 800031e:	2201      	movs	r2, #1
 8000320:	701a      	strb	r2, [r3, #0]
		}
		if(readState == COMUNICACAO) break;
 8000322:	4b05      	ldr	r3, [pc, #20]	; (8000338 <acquisition+0x154>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	2b04      	cmp	r3, #4
 8000328:	d000      	beq.n	800032c <acquisition+0x148>
		if(readState == INIT)
 800032a:	e764      	b.n	80001f6 <acquisition+0x12>
		if(readState == COMUNICACAO) break;
 800032c:	bf00      	nop

	}
}
 800032e:	bf00      	nop
 8000330:	3704      	adds	r7, #4
 8000332:	46bd      	mov	sp, r7
 8000334:	bd90      	pop	{r4, r7, pc}
 8000336:	bf00      	nop
 8000338:	2000032a 	.word	0x2000032a
 800033c:	20000328 	.word	0x20000328
 8000340:	20000324 	.word	0x20000324
 8000344:	20000326 	.word	0x20000326
 8000348:	200001e4 	.word	0x200001e4
 800034c:	2000019c 	.word	0x2000019c
 8000350:	200002d0 	.word	0x200002d0
 8000354:	20000376 	.word	0x20000376
 8000358:	20000374 	.word	0x20000374
 800035c:	20000378 	.word	0x20000378
 8000360:	cccccccd 	.word	0xcccccccd
 8000364:	200002fc 	.word	0x200002fc
 8000368:	20000360 	.word	0x20000360
 800036c:	2000032c 	.word	0x2000032c
 8000370:	40010800 	.word	0x40010800
 8000374:	200002b6 	.word	0x200002b6

08000378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000378:	b590      	push	{r4, r7, lr}
 800037a:	b089      	sub	sp, #36	; 0x24
 800037c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800037e:	f001 fd2f 	bl	8001de0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000382:	f000 fa41 	bl	8000808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000386:	f000 fb67 	bl	8000a58 <MX_GPIO_Init>
  MX_TIM2_Init();
 800038a:	f000 fa99 	bl	80008c0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800038e:	f000 faeb 	bl	8000968 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000392:	f000 fb37 	bl	8000a04 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000396:	f00a f8d7 	bl	800a548 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
HAL_Delay(500);
 800039a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800039e:	f001 fd81 	bl	8001ea4 <HAL_Delay>
HAL_UART_Receive_IT(&huart2, (uint8_t *)RXBuffer, 1);
 80003a2:	2201      	movs	r2, #1
 80003a4:	49b8      	ldr	r1, [pc, #736]	; (8000688 <main+0x310>)
 80003a6:	48b9      	ldr	r0, [pc, #740]	; (800068c <main+0x314>)
 80003a8:	f005 fb83 	bl	8005ab2 <HAL_UART_Receive_IT>
StateMachine = iddle;
 80003ac:	4bb8      	ldr	r3, [pc, #736]	; (8000690 <main+0x318>)
 80003ae:	2249      	movs	r2, #73	; 0x49
 80003b0:	701a      	strb	r2, [r3, #0]
char reset_status;
HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,GPIO_PIN_SET);
 80003b2:	2201      	movs	r2, #1
 80003b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003b8:	48b6      	ldr	r0, [pc, #728]	; (8000694 <main+0x31c>)
 80003ba:	f002 fb05 	bl	80029c8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOB,STATUS_Pin, GPIO_PIN_SET);
 80003be:	2201      	movs	r2, #1
 80003c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003c4:	48b4      	ldr	r0, [pc, #720]	; (8000698 <main+0x320>)
 80003c6:	f002 faff 	bl	80029c8 <HAL_GPIO_WritePin>
char startFlag = 0;
 80003ca:	2300      	movs	r3, #0
 80003cc:	71fb      	strb	r3, [r7, #7]
char stopFlag = 1;
 80003ce:	2301      	movs	r3, #1
 80003d0:	71bb      	strb	r3, [r7, #6]
char i=0;
 80003d2:	2300      	movs	r3, #0
 80003d4:	717b      	strb	r3, [r7, #5]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

while (1)
{
  switch(StateMachine)
 80003d6:	4bae      	ldr	r3, [pc, #696]	; (8000690 <main+0x318>)
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	3b30      	subs	r3, #48	; 0x30
 80003dc:	2b19      	cmp	r3, #25
 80003de:	d8fa      	bhi.n	80003d6 <main+0x5e>
 80003e0:	a201      	add	r2, pc, #4	; (adr r2, 80003e8 <main+0x70>)
 80003e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003e6:	bf00      	nop
 80003e8:	08000527 	.word	0x08000527
 80003ec:	08000545 	.word	0x08000545
 80003f0:	080005b5 	.word	0x080005b5
 80003f4:	08000605 	.word	0x08000605
 80003f8:	08000671 	.word	0x08000671
 80003fc:	080006b9 	.word	0x080006b9
 8000400:	08000709 	.word	0x08000709
 8000404:	0800057d 	.word	0x0800057d
 8000408:	080003d7 	.word	0x080003d7
 800040c:	080003d7 	.word	0x080003d7
 8000410:	080003d7 	.word	0x080003d7
 8000414:	080003d7 	.word	0x080003d7
 8000418:	080003d7 	.word	0x080003d7
 800041c:	080003d7 	.word	0x080003d7
 8000420:	080003d7 	.word	0x080003d7
 8000424:	080003d7 	.word	0x080003d7
 8000428:	080003d7 	.word	0x080003d7
 800042c:	080003d7 	.word	0x080003d7
 8000430:	080003d7 	.word	0x080003d7
 8000434:	080003d7 	.word	0x080003d7
 8000438:	080003d7 	.word	0x080003d7
 800043c:	0800078b 	.word	0x0800078b
 8000440:	080003d7 	.word	0x080003d7
 8000444:	080003d7 	.word	0x080003d7
 8000448:	080003d7 	.word	0x080003d7
 800044c:	08000451 	.word	0x08000451
  {
	  case iddle:
		if(USB_FLAG == 1)
 8000450:	4b92      	ldr	r3, [pc, #584]	; (800069c <main+0x324>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	b2db      	uxtb	r3, r3
 8000456:	2b01      	cmp	r3, #1
 8000458:	d10a      	bne.n	8000470 <main+0xf8>
		{
			while(EndReception!=Fim) command(buffer);
 800045a:	e002      	b.n	8000462 <main+0xea>
 800045c:	4890      	ldr	r0, [pc, #576]	; (80006a0 <main+0x328>)
 800045e:	f000 fc63 	bl	8000d28 <command>
 8000462:	4b90      	ldr	r3, [pc, #576]	; (80006a4 <main+0x32c>)
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b44      	cmp	r3, #68	; 0x44
 8000468:	d1f8      	bne.n	800045c <main+0xe4>
			USB_FLAG = 0;
 800046a:	4b8c      	ldr	r3, [pc, #560]	; (800069c <main+0x324>)
 800046c:	2200      	movs	r2, #0
 800046e:	701a      	strb	r2, [r3, #0]
		}
		if(EndReception == Fim)
 8000470:	4b8c      	ldr	r3, [pc, #560]	; (80006a4 <main+0x32c>)
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	2b44      	cmp	r3, #68	; 0x44
 8000476:	d113      	bne.n	80004a0 <main+0x128>
		{
			structDados();
 8000478:	f000 fbbc 	bl	8000bf4 <structDados>
			errorFlag = VerificaErro();
 800047c:	f000 fc06 	bl	8000c8c <VerificaErro>
 8000480:	4603      	mov	r3, r0
 8000482:	b2da      	uxtb	r2, r3
 8000484:	4b88      	ldr	r3, [pc, #544]	; (80006a8 <main+0x330>)
 8000486:	701a      	strb	r2, [r3, #0]
			if(errorFlag != OK)
 8000488:	4b87      	ldr	r3, [pc, #540]	; (80006a8 <main+0x330>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b41      	cmp	r3, #65	; 0x41
 800048e:	d003      	beq.n	8000498 <main+0x120>
			 {
				StateMachine = error;
 8000490:	4b7f      	ldr	r3, [pc, #508]	; (8000690 <main+0x318>)
 8000492:	2245      	movs	r2, #69	; 0x45
 8000494:	701a      	strb	r2, [r3, #0]
				EndReception = Reset;
			}

		}
		else if(USB_FLAG == 0 && EndReception == '\0') StateMachine = iddle;
	  break;
 8000496:	e1a2      	b.n	80007de <main+0x466>
				StateMachine = Inicio;
 8000498:	4b7d      	ldr	r3, [pc, #500]	; (8000690 <main+0x318>)
 800049a:	2230      	movs	r2, #48	; 0x30
 800049c:	701a      	strb	r2, [r3, #0]
	  break;
 800049e:	e19e      	b.n	80007de <main+0x466>
		else if(EndReception == Reset)
 80004a0:	4b80      	ldr	r3, [pc, #512]	; (80006a4 <main+0x32c>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b52      	cmp	r3, #82	; 0x52
 80004a6:	d12f      	bne.n	8000508 <main+0x190>
			reset_status = deviceReset();
 80004a8:	f000 fb72 	bl	8000b90 <deviceReset>
 80004ac:	4603      	mov	r3, r0
 80004ae:	713b      	strb	r3, [r7, #4]
			if(reset_status == HAL_OK)
 80004b0:	793b      	ldrb	r3, [r7, #4]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d121      	bne.n	80004fa <main+0x182>
				StateMachine = iddle;
 80004b6:	4b76      	ldr	r3, [pc, #472]	; (8000690 <main+0x318>)
 80004b8:	2249      	movs	r2, #73	; 0x49
 80004ba:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB,ERRO_Pin, GPIO_PIN_RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004c2:	4875      	ldr	r0, [pc, #468]	; (8000698 <main+0x320>)
 80004c4:	f002 fa80 	bl	80029c8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,STOP_Pin, GPIO_PIN_RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004ce:	4872      	ldr	r0, [pc, #456]	; (8000698 <main+0x320>)
 80004d0:	f002 fa7a 	bl	80029c8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,CONFIG_Pin, GPIO_PIN_RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004da:	486f      	ldr	r0, [pc, #444]	; (8000698 <main+0x320>)
 80004dc:	f002 fa74 	bl	80029c8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,ACQUISITION_Pin, GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004e6:	486c      	ldr	r0, [pc, #432]	; (8000698 <main+0x320>)
 80004e8:	f002 fa6e 	bl	80029c8 <HAL_GPIO_WritePin>
				EndReception = '\0';
 80004ec:	4b6d      	ldr	r3, [pc, #436]	; (80006a4 <main+0x32c>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	701a      	strb	r2, [r3, #0]
				USB_FLAG = 0;
 80004f2:	4b6a      	ldr	r3, [pc, #424]	; (800069c <main+0x324>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	701a      	strb	r2, [r3, #0]
	  break;
 80004f8:	e171      	b.n	80007de <main+0x466>
				StateMachine = iddle;
 80004fa:	4b65      	ldr	r3, [pc, #404]	; (8000690 <main+0x318>)
 80004fc:	2249      	movs	r2, #73	; 0x49
 80004fe:	701a      	strb	r2, [r3, #0]
				EndReception = Reset;
 8000500:	4b68      	ldr	r3, [pc, #416]	; (80006a4 <main+0x32c>)
 8000502:	2252      	movs	r2, #82	; 0x52
 8000504:	701a      	strb	r2, [r3, #0]
	  break;
 8000506:	e16a      	b.n	80007de <main+0x466>
		else if(USB_FLAG == 0 && EndReception == '\0') StateMachine = iddle;
 8000508:	4b64      	ldr	r3, [pc, #400]	; (800069c <main+0x324>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	b2db      	uxtb	r3, r3
 800050e:	2b00      	cmp	r3, #0
 8000510:	f040 8165 	bne.w	80007de <main+0x466>
 8000514:	4b63      	ldr	r3, [pc, #396]	; (80006a4 <main+0x32c>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	f040 8160 	bne.w	80007de <main+0x466>
 800051e:	4b5c      	ldr	r3, [pc, #368]	; (8000690 <main+0x318>)
 8000520:	2249      	movs	r2, #73	; 0x49
 8000522:	701a      	strb	r2, [r3, #0]
	  break;
 8000524:	e15b      	b.n	80007de <main+0x466>

	  case Inicio:
				StateMachine = selectCommand(receive_message);
 8000526:	4b61      	ldr	r3, [pc, #388]	; (80006ac <main+0x334>)
 8000528:	466c      	mov	r4, sp
 800052a:	f103 0210 	add.w	r2, r3, #16
 800052e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000530:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000534:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000536:	f000 fccf 	bl	8000ed8 <selectCommand>
 800053a:	4603      	mov	r3, r0
 800053c:	b2da      	uxtb	r2, r3
 800053e:	4b54      	ldr	r3, [pc, #336]	; (8000690 <main+0x318>)
 8000540:	701a      	strb	r2, [r3, #0]
	  break;
 8000542:	e14d      	b.n	80007e0 <main+0x468>

	  case Identification:
			getID();
 8000544:	f000 fd08 	bl	8000f58 <getID>
			TransmitData(receive_message,infoDevice.Id,8);
 8000548:	4b59      	ldr	r3, [pc, #356]	; (80006b0 <main+0x338>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4619      	mov	r1, r3
 800054e:	4b57      	ldr	r3, [pc, #348]	; (80006ac <main+0x334>)
 8000550:	2208      	movs	r2, #8
 8000552:	9204      	str	r2, [sp, #16]
 8000554:	9103      	str	r1, [sp, #12]
 8000556:	466c      	mov	r4, sp
 8000558:	f103 0210 	add.w	r2, r3, #16
 800055c:	ca07      	ldmia	r2, {r0, r1, r2}
 800055e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000562:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000564:	f000 fd84 	bl	8001070 <TransmitData>
			StateMachine = iddle;
 8000568:	4b49      	ldr	r3, [pc, #292]	; (8000690 <main+0x318>)
 800056a:	2249      	movs	r2, #73	; 0x49
 800056c:	701a      	strb	r2, [r3, #0]
			EndReception = '\0';
 800056e:	4b4d      	ldr	r3, [pc, #308]	; (80006a4 <main+0x32c>)
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]
			USB_FLAG = 0;
 8000574:	4b49      	ldr	r3, [pc, #292]	; (800069c <main+0x324>)
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]
	  break;
 800057a:	e131      	b.n	80007e0 <main+0x468>

	  case Codification:
			setID();
 800057c:	f000 fd0c 	bl	8000f98 <setID>
			TransmitData(receive_message,infoDevice.Id,8);
 8000580:	4b4b      	ldr	r3, [pc, #300]	; (80006b0 <main+0x338>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4619      	mov	r1, r3
 8000586:	4b49      	ldr	r3, [pc, #292]	; (80006ac <main+0x334>)
 8000588:	2208      	movs	r2, #8
 800058a:	9204      	str	r2, [sp, #16]
 800058c:	9103      	str	r1, [sp, #12]
 800058e:	466c      	mov	r4, sp
 8000590:	f103 0210 	add.w	r2, r3, #16
 8000594:	ca07      	ldmia	r2, {r0, r1, r2}
 8000596:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800059a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800059c:	f000 fd68 	bl	8001070 <TransmitData>
			StateMachine = iddle;
 80005a0:	4b3b      	ldr	r3, [pc, #236]	; (8000690 <main+0x318>)
 80005a2:	2249      	movs	r2, #73	; 0x49
 80005a4:	701a      	strb	r2, [r3, #0]
			EndReception = '\0';
 80005a6:	4b3f      	ldr	r3, [pc, #252]	; (80006a4 <main+0x32c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	701a      	strb	r2, [r3, #0]
			USB_FLAG = 0;
 80005ac:	4b3b      	ldr	r3, [pc, #236]	; (800069c <main+0x324>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	701a      	strb	r2, [r3, #0]
	  break;
 80005b2:	e115      	b.n	80007e0 <main+0x468>

	  case Config:
		DeviceParamenter(receive_message);
 80005b4:	4b3d      	ldr	r3, [pc, #244]	; (80006ac <main+0x334>)
 80005b6:	466c      	mov	r4, sp
 80005b8:	f103 0210 	add.w	r2, r3, #16
 80005bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80005be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80005c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005c4:	f000 fd0e 	bl	8000fe4 <DeviceParamenter>
		HAL_GPIO_WritePin(GPIOB,CONFIG_Pin, GPIO_PIN_SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ce:	4832      	ldr	r0, [pc, #200]	; (8000698 <main+0x320>)
 80005d0:	f002 f9fa 	bl	80029c8 <HAL_GPIO_WritePin>
		TransmitData(receive_message,2,7);
 80005d4:	4b35      	ldr	r3, [pc, #212]	; (80006ac <main+0x334>)
 80005d6:	2207      	movs	r2, #7
 80005d8:	9204      	str	r2, [sp, #16]
 80005da:	2202      	movs	r2, #2
 80005dc:	9203      	str	r2, [sp, #12]
 80005de:	466c      	mov	r4, sp
 80005e0:	f103 0210 	add.w	r2, r3, #16
 80005e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80005e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80005ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005ec:	f000 fd40 	bl	8001070 <TransmitData>
		StateMachine = iddle;
 80005f0:	4b27      	ldr	r3, [pc, #156]	; (8000690 <main+0x318>)
 80005f2:	2249      	movs	r2, #73	; 0x49
 80005f4:	701a      	strb	r2, [r3, #0]
		EndReception = '\0';
 80005f6:	4b2b      	ldr	r3, [pc, #172]	; (80006a4 <main+0x32c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	701a      	strb	r2, [r3, #0]
		USB_FLAG = 0;
 80005fc:	4b27      	ldr	r3, [pc, #156]	; (800069c <main+0x324>)
 80005fe:	2200      	movs	r2, #0
 8000600:	701a      	strb	r2, [r3, #0]
	   break;
 8000602:	e0ed      	b.n	80007e0 <main+0x468>

	  case Start:
		startFlag = StartDevice(deviceFlag);
 8000604:	4b2b      	ldr	r3, [pc, #172]	; (80006b4 <main+0x33c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	4618      	mov	r0, r3
 800060a:	f000 fd19 	bl	8001040 <StartDevice>
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
		deviceFlag = startFlag;
 8000612:	4a28      	ldr	r2, [pc, #160]	; (80006b4 <main+0x33c>)
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	7013      	strb	r3, [r2, #0]
		if(deviceFlag == 1)
 8000618:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <main+0x33c>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d11d      	bne.n	800065c <main+0x2e4>
		{
			HAL_GPIO_WritePin(GPIOB,STOP_Pin, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000626:	481c      	ldr	r0, [pc, #112]	; (8000698 <main+0x320>)
 8000628:	f002 f9ce 	bl	80029c8 <HAL_GPIO_WritePin>
			TransmitData(receive_message,0,7);
 800062c:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <main+0x334>)
 800062e:	2207      	movs	r2, #7
 8000630:	9204      	str	r2, [sp, #16]
 8000632:	2200      	movs	r2, #0
 8000634:	9203      	str	r2, [sp, #12]
 8000636:	466c      	mov	r4, sp
 8000638:	f103 0210 	add.w	r2, r3, #16
 800063c:	ca07      	ldmia	r2, {r0, r1, r2}
 800063e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000642:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000644:	f000 fd14 	bl	8001070 <TransmitData>
			StateMachine = Read;
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <main+0x318>)
 800064a:	2234      	movs	r2, #52	; 0x34
 800064c:	701a      	strb	r2, [r3, #0]
			EndReception = '\0';
 800064e:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <main+0x32c>)
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
			USB_FLAG = 0;
 8000654:	4b11      	ldr	r3, [pc, #68]	; (800069c <main+0x324>)
 8000656:	2200      	movs	r2, #0
 8000658:	701a      	strb	r2, [r3, #0]
			StateMachine = iddle;
			EndReception = '\0';
			USB_FLAG = 0;
		}

	  break;
 800065a:	e0c1      	b.n	80007e0 <main+0x468>
			StateMachine = iddle;
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <main+0x318>)
 800065e:	2249      	movs	r2, #73	; 0x49
 8000660:	701a      	strb	r2, [r3, #0]
			EndReception = '\0';
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <main+0x32c>)
 8000664:	2200      	movs	r2, #0
 8000666:	701a      	strb	r2, [r3, #0]
			USB_FLAG = 0;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <main+0x324>)
 800066a:	2200      	movs	r2, #0
 800066c:	701a      	strb	r2, [r3, #0]
	  break;
 800066e:	e0b7      	b.n	80007e0 <main+0x468>
//		 while(1)
//		 {
//			 HAL_GPIO_TogglePin(GPIOB, CONFIG_Pin);
//			 delay(1000); //1tick = 1us 60000 ticks ->60ms
//		 }
		acquisition();
 8000670:	f7ff fdb8 	bl	80001e4 <acquisition>
		HAL_GPIO_WritePin(GPIOB,CONFIG_Pin, GPIO_PIN_RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800067a:	4807      	ldr	r0, [pc, #28]	; (8000698 <main+0x320>)
 800067c:	f002 f9a4 	bl	80029c8 <HAL_GPIO_WritePin>
		StateMachine = iddle;
 8000680:	4b03      	ldr	r3, [pc, #12]	; (8000690 <main+0x318>)
 8000682:	2249      	movs	r2, #73	; 0x49
 8000684:	701a      	strb	r2, [r3, #0]
	  break;
 8000686:	e0ab      	b.n	80007e0 <main+0x468>
 8000688:	200002b8 	.word	0x200002b8
 800068c:	2000022c 	.word	0x2000022c
 8000690:	2000035a 	.word	0x2000035a
 8000694:	40011000 	.word	0x40011000
 8000698:	40010c00 	.word	0x40010c00
 800069c:	20000326 	.word	0x20000326
 80006a0:	20000270 	.word	0x20000270
 80006a4:	200002b6 	.word	0x200002b6
 80006a8:	20000000 	.word	0x20000000
 80006ac:	2000032c 	.word	0x2000032c
 80006b0:	20000348 	.word	0x20000348
 80006b4:	2000037c 	.word	0x2000037c
 80006b8:	4b4a      	ldr	r3, [pc, #296]	; (80007e4 <main+0x46c>)
 80006ba:	681b      	ldr	r3, [r3, #0]

	  case ReadError:
		  memcpy(bufferPulso,currentPulse,sizeof(int32_t));
 80006bc:	4a4a      	ldr	r2, [pc, #296]	; (80007e8 <main+0x470>)
 80006be:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(GPIOA,ACQUISITION_Pin, GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006c6:	4849      	ldr	r0, [pc, #292]	; (80007ec <main+0x474>)
 80006c8:	f002 f97e 	bl	80029c8 <HAL_GPIO_WritePin>
		TransmitData(receive_message,bufferPulso,67);
 80006cc:	4b48      	ldr	r3, [pc, #288]	; (80007f0 <main+0x478>)
 80006ce:	2243      	movs	r2, #67	; 0x43
 80006d0:	9204      	str	r2, [sp, #16]
 80006d2:	4a45      	ldr	r2, [pc, #276]	; (80007e8 <main+0x470>)
 80006d4:	9203      	str	r2, [sp, #12]
 80006d6:	466c      	mov	r4, sp
 80006d8:	f103 0210 	add.w	r2, r3, #16
 80006dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80006de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80006e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006e4:	f000 fcc4 	bl	8001070 <TransmitData>
		HAL_GPIO_WritePin(GPIOA,ACQUISITION_Pin, GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ee:	483f      	ldr	r0, [pc, #252]	; (80007ec <main+0x474>)
 80006f0:	f002 f96a 	bl	80029c8 <HAL_GPIO_WritePin>
		StateMachine = iddle;
 80006f4:	4b3f      	ldr	r3, [pc, #252]	; (80007f4 <main+0x47c>)
 80006f6:	2249      	movs	r2, #73	; 0x49
 80006f8:	701a      	strb	r2, [r3, #0]
		EndReception = '\0';
 80006fa:	4b3f      	ldr	r3, [pc, #252]	; (80007f8 <main+0x480>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
		USB_FLAG = 0;
 8000700:	4b3e      	ldr	r3, [pc, #248]	; (80007fc <main+0x484>)
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]
	  break;
 8000706:	e06b      	b.n	80007e0 <main+0x468>

	  case Stop:
		stopFlag = StopDevice(deviceFlag);
 8000708:	4b3d      	ldr	r3, [pc, #244]	; (8000800 <main+0x488>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	4618      	mov	r0, r3
 800070e:	f001 f893 	bl	8001838 <StopDevice>
 8000712:	4603      	mov	r3, r0
 8000714:	71bb      	strb	r3, [r7, #6]
		deviceFlag = stopFlag;
 8000716:	4a3a      	ldr	r2, [pc, #232]	; (8000800 <main+0x488>)
 8000718:	79bb      	ldrb	r3, [r7, #6]
 800071a:	7013      	strb	r3, [r2, #0]
		if(stopFlag == 0)
 800071c:	79bb      	ldrb	r3, [r7, #6]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d123      	bne.n	800076a <main+0x3f2>
		{
			HAL_GPIO_WritePin(GPIOB,STOP_Pin, GPIO_PIN_SET);
 8000722:	2201      	movs	r2, #1
 8000724:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000728:	4836      	ldr	r0, [pc, #216]	; (8000804 <main+0x48c>)
 800072a:	f002 f94d 	bl	80029c8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,ACQUISITION_Pin, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000734:	482d      	ldr	r0, [pc, #180]	; (80007ec <main+0x474>)
 8000736:	f002 f947 	bl	80029c8 <HAL_GPIO_WritePin>
			TransmitData(receive_message,0,7);
 800073a:	4b2d      	ldr	r3, [pc, #180]	; (80007f0 <main+0x478>)
 800073c:	2207      	movs	r2, #7
 800073e:	9204      	str	r2, [sp, #16]
 8000740:	2200      	movs	r2, #0
 8000742:	9203      	str	r2, [sp, #12]
 8000744:	466c      	mov	r4, sp
 8000746:	f103 0210 	add.w	r2, r3, #16
 800074a:	ca07      	ldmia	r2, {r0, r1, r2}
 800074c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000750:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000752:	f000 fc8d 	bl	8001070 <TransmitData>
			StateMachine = iddle;
 8000756:	4b27      	ldr	r3, [pc, #156]	; (80007f4 <main+0x47c>)
 8000758:	2249      	movs	r2, #73	; 0x49
 800075a:	701a      	strb	r2, [r3, #0]
			EndReception = '\0';
 800075c:	4b26      	ldr	r3, [pc, #152]	; (80007f8 <main+0x480>)
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]
			USB_FLAG = 0;
 8000762:	4b26      	ldr	r3, [pc, #152]	; (80007fc <main+0x484>)
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB,STOP_Pin, GPIO_PIN_RESET);
			StateMachine = iddle;
			EndReception = '\0';
			USB_FLAG = 0;
		}
	   break;
 8000768:	e03a      	b.n	80007e0 <main+0x468>
			HAL_GPIO_WritePin(GPIOB,STOP_Pin, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000770:	4824      	ldr	r0, [pc, #144]	; (8000804 <main+0x48c>)
 8000772:	f002 f929 	bl	80029c8 <HAL_GPIO_WritePin>
			StateMachine = iddle;
 8000776:	4b1f      	ldr	r3, [pc, #124]	; (80007f4 <main+0x47c>)
 8000778:	2249      	movs	r2, #73	; 0x49
 800077a:	701a      	strb	r2, [r3, #0]
			EndReception = '\0';
 800077c:	4b1e      	ldr	r3, [pc, #120]	; (80007f8 <main+0x480>)
 800077e:	2200      	movs	r2, #0
 8000780:	701a      	strb	r2, [r3, #0]
			USB_FLAG = 0;
 8000782:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <main+0x484>)
 8000784:	2200      	movs	r2, #0
 8000786:	701a      	strb	r2, [r3, #0]
	   break;
 8000788:	e02a      	b.n	80007e0 <main+0x468>

	  case error:
		HAL_GPIO_WritePin(GPIOB,ERRO_Pin, GPIO_PIN_SET);
 800078a:	2201      	movs	r2, #1
 800078c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000790:	481c      	ldr	r0, [pc, #112]	; (8000804 <main+0x48c>)
 8000792:	f002 f919 	bl	80029c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,CONFIG_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800079c:	4819      	ldr	r0, [pc, #100]	; (8000804 <main+0x48c>)
 800079e:	f002 f913 	bl	80029c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,STOP_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a8:	4816      	ldr	r0, [pc, #88]	; (8000804 <main+0x48c>)
 80007aa:	f002 f90d 	bl	80029c8 <HAL_GPIO_WritePin>
		TransmitData(receive_message,0,8);
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <main+0x478>)
 80007b0:	2208      	movs	r2, #8
 80007b2:	9204      	str	r2, [sp, #16]
 80007b4:	2200      	movs	r2, #0
 80007b6:	9203      	str	r2, [sp, #12]
 80007b8:	466c      	mov	r4, sp
 80007ba:	f103 0210 	add.w	r2, r3, #16
 80007be:	ca07      	ldmia	r2, {r0, r1, r2}
 80007c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80007c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007c6:	f000 fc53 	bl	8001070 <TransmitData>
		StateMachine = iddle;
 80007ca:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <main+0x47c>)
 80007cc:	2249      	movs	r2, #73	; 0x49
 80007ce:	701a      	strb	r2, [r3, #0]
		EndReception = '\0';
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <main+0x480>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]
		USB_FLAG = 0;
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <main+0x484>)
 80007d8:	2200      	movs	r2, #0
 80007da:	701a      	strb	r2, [r3, #0]
		break;
 80007dc:	e000      	b.n	80007e0 <main+0x468>
	  break;
 80007de:	bf00      	nop
  switch(StateMachine)
 80007e0:	e5f9      	b.n	80003d6 <main+0x5e>
 80007e2:	bf00      	nop
 80007e4:	200002fc 	.word	0x200002fc
 80007e8:	200002d4 	.word	0x200002d4
 80007ec:	40010800 	.word	0x40010800
 80007f0:	2000032c 	.word	0x2000032c
 80007f4:	2000035a 	.word	0x2000035a
 80007f8:	200002b6 	.word	0x200002b6
 80007fc:	20000326 	.word	0x20000326
 8000800:	2000037c 	.word	0x2000037c
 8000804:	40010c00 	.word	0x40010c00

08000808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b094      	sub	sp, #80	; 0x50
 800080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000812:	2228      	movs	r2, #40	; 0x28
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f00a fb84 	bl	800af24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000838:	2301      	movs	r3, #1
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800083c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000840:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000846:	2301      	movs	r3, #1
 8000848:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084a:	2302      	movs	r3, #2
 800084c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800084e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000852:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000854:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000858:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800085e:	4618      	mov	r0, r3
 8000860:	f003 fdc0 	bl	80043e4 <HAL_RCC_OscConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800086a:	f001 f953 	bl	8001b14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086e:	230f      	movs	r3, #15
 8000870:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000872:	2302      	movs	r3, #2
 8000874:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800087a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800087e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	2101      	movs	r1, #1
 800088a:	4618      	mov	r0, r3
 800088c:	f004 f82c 	bl	80048e8 <HAL_RCC_ClockConfig>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000896:	f001 f93d 	bl	8001b14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800089a:	2310      	movs	r3, #16
 800089c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800089e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008a2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	4618      	mov	r0, r3
 80008a8:	f004 f9b6 	bl	8004c18 <HAL_RCCEx_PeriphCLKConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008b2:	f001 f92f 	bl	8001b14 <Error_Handler>
  }
}
 80008b6:	bf00      	nop
 80008b8:	3750      	adds	r7, #80	; 0x50
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08c      	sub	sp, #48	; 0x30
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008c6:	f107 030c 	add.w	r3, r7, #12
 80008ca:	2224      	movs	r2, #36	; 0x24
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f00a fb28 	bl	800af24 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008dc:	4b21      	ldr	r3, [pc, #132]	; (8000964 <MX_TIM2_Init+0xa4>)
 80008de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008e4:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <MX_TIM2_Init+0xa4>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ea:	4b1e      	ldr	r3, [pc, #120]	; (8000964 <MX_TIM2_Init+0xa4>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80008f0:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <MX_TIM2_Init+0xa4>)
 80008f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f8:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <MX_TIM2_Init+0xa4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008fe:	4b19      	ldr	r3, [pc, #100]	; (8000964 <MX_TIM2_Init+0xa4>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000904:	2303      	movs	r3, #3
 8000906:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000908:	2300      	movs	r3, #0
 800090a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800090c:	2301      	movs	r3, #1
 800090e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000914:	230f      	movs	r3, #15
 8000916:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000918:	2300      	movs	r3, #0
 800091a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800091c:	2301      	movs	r3, #1
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000924:	230f      	movs	r3, #15
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	4619      	mov	r1, r3
 800092e:	480d      	ldr	r0, [pc, #52]	; (8000964 <MX_TIM2_Init+0xa4>)
 8000930:	f004 faf0 	bl	8004f14 <HAL_TIM_Encoder_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800093a:	f001 f8eb 	bl	8001b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	4619      	mov	r1, r3
 800094a:	4806      	ldr	r0, [pc, #24]	; (8000964 <MX_TIM2_Init+0xa4>)
 800094c:	f004 fff4 	bl	8005938 <HAL_TIMEx_MasterConfigSynchronization>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000956:	f001 f8dd 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	3730      	adds	r7, #48	; 0x30
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	2000019c 	.word	0x2000019c

08000968 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800096e:	f107 0308 	add.w	r3, r7, #8
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800097c:	463b      	mov	r3, r7
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000984:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <MX_TIM3_Init+0x94>)
 8000986:	4a1e      	ldr	r2, [pc, #120]	; (8000a00 <MX_TIM3_Init+0x98>)
 8000988:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4800-1;
 800098a:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <MX_TIM3_Init+0x94>)
 800098c:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8000990:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000992:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <MX_TIM3_Init+0x94>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65356-1;
 8000998:	4b18      	ldr	r3, [pc, #96]	; (80009fc <MX_TIM3_Init+0x94>)
 800099a:	f64f 724b 	movw	r2, #65355	; 0xff4b
 800099e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <MX_TIM3_Init+0x94>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <MX_TIM3_Init+0x94>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009ac:	4813      	ldr	r0, [pc, #76]	; (80009fc <MX_TIM3_Init+0x94>)
 80009ae:	f004 f9e9 	bl	8004d84 <HAL_TIM_Base_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80009b8:	f001 f8ac 	bl	8001b14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009c2:	f107 0308 	add.w	r3, r7, #8
 80009c6:	4619      	mov	r1, r3
 80009c8:	480c      	ldr	r0, [pc, #48]	; (80009fc <MX_TIM3_Init+0x94>)
 80009ca:	f004 fdb0 	bl	800552e <HAL_TIM_ConfigClockSource>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80009d4:	f001 f89e 	bl	8001b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d8:	2300      	movs	r3, #0
 80009da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009dc:	2300      	movs	r3, #0
 80009de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009e0:	463b      	mov	r3, r7
 80009e2:	4619      	mov	r1, r3
 80009e4:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_TIM3_Init+0x94>)
 80009e6:	f004 ffa7 	bl	8005938 <HAL_TIMEx_MasterConfigSynchronization>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80009f0:	f001 f890 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	3718      	adds	r7, #24
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	200001e4 	.word	0x200001e4
 8000a00:	40000400 	.word	0x40000400

08000a04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a0a:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <MX_USART2_UART_Init+0x50>)
 8000a0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a28:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a3c:	f004 ffec 	bl	8005a18 <HAL_UART_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a46:	f001 f865 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	2000022c 	.word	0x2000022c
 8000a54:	40004400 	.word	0x40004400

08000a58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b088      	sub	sp, #32
 8000a5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5e:	f107 0310 	add.w	r3, r7, #16
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6c:	4b43      	ldr	r3, [pc, #268]	; (8000b7c <MX_GPIO_Init+0x124>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	4a42      	ldr	r2, [pc, #264]	; (8000b7c <MX_GPIO_Init+0x124>)
 8000a72:	f043 0310 	orr.w	r3, r3, #16
 8000a76:	6193      	str	r3, [r2, #24]
 8000a78:	4b40      	ldr	r3, [pc, #256]	; (8000b7c <MX_GPIO_Init+0x124>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	f003 0310 	and.w	r3, r3, #16
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a84:	4b3d      	ldr	r3, [pc, #244]	; (8000b7c <MX_GPIO_Init+0x124>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	4a3c      	ldr	r2, [pc, #240]	; (8000b7c <MX_GPIO_Init+0x124>)
 8000a8a:	f043 0320 	orr.w	r3, r3, #32
 8000a8e:	6193      	str	r3, [r2, #24]
 8000a90:	4b3a      	ldr	r3, [pc, #232]	; (8000b7c <MX_GPIO_Init+0x124>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f003 0320 	and.w	r3, r3, #32
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9c:	4b37      	ldr	r3, [pc, #220]	; (8000b7c <MX_GPIO_Init+0x124>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a36      	ldr	r2, [pc, #216]	; (8000b7c <MX_GPIO_Init+0x124>)
 8000aa2:	f043 0304 	orr.w	r3, r3, #4
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b34      	ldr	r3, [pc, #208]	; (8000b7c <MX_GPIO_Init+0x124>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0304 	and.w	r3, r3, #4
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab4:	4b31      	ldr	r3, [pc, #196]	; (8000b7c <MX_GPIO_Init+0x124>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a30      	ldr	r2, [pc, #192]	; (8000b7c <MX_GPIO_Init+0x124>)
 8000aba:	f043 0308 	orr.w	r3, r3, #8
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b2e      	ldr	r3, [pc, #184]	; (8000b7c <MX_GPIO_Init+0x124>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f003 0308 	and.w	r3, r3, #8
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad2:	482b      	ldr	r0, [pc, #172]	; (8000b80 <MX_GPIO_Init+0x128>)
 8000ad4:	f001 ff78 	bl	80029c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STOP_Pin|ERRO_Pin|STATUS_Pin|CONFIG_Pin, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000ade:	4829      	ldr	r0, [pc, #164]	; (8000b84 <MX_GPIO_Init+0x12c>)
 8000ae0:	f001 ff72 	bl	80029c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACQUISITION_GPIO_Port, ACQUISITION_Pin, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aea:	4827      	ldr	r0, [pc, #156]	; (8000b88 <MX_GPIO_Init+0x130>)
 8000aec:	f001 ff6c 	bl	80029c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000af0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2302      	movs	r3, #2
 8000b00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b02:	f107 0310 	add.w	r3, r7, #16
 8000b06:	4619      	mov	r1, r3
 8000b08:	481d      	ldr	r0, [pc, #116]	; (8000b80 <MX_GPIO_Init+0x128>)
 8000b0a:	f001 fdd9 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STOP_Pin ERRO_Pin STATUS_Pin CONFIG_Pin */
  GPIO_InitStruct.Pin = STOP_Pin|ERRO_Pin|STATUS_Pin|CONFIG_Pin;
 8000b0e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000b12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	4619      	mov	r1, r3
 8000b26:	4817      	ldr	r0, [pc, #92]	; (8000b84 <MX_GPIO_Init+0x12c>)
 8000b28:	f001 fdca 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACQUISITION_Pin */
  GPIO_InitStruct.Pin = ACQUISITION_Pin;
 8000b2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b32:	2301      	movs	r3, #1
 8000b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACQUISITION_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 0310 	add.w	r3, r7, #16
 8000b42:	4619      	mov	r1, r3
 8000b44:	4810      	ldr	r0, [pc, #64]	; (8000b88 <MX_GPIO_Init+0x130>)
 8000b46:	f001 fdbb 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8000b4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b50:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_GPIO_Init+0x134>)
 8000b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 0310 	add.w	r3, r7, #16
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	480a      	ldr	r0, [pc, #40]	; (8000b88 <MX_GPIO_Init+0x130>)
 8000b60:	f001 fdae 	bl	80026c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2102      	movs	r1, #2
 8000b68:	2017      	movs	r0, #23
 8000b6a:	f001 fa96 	bl	800209a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b6e:	2017      	movs	r0, #23
 8000b70:	f001 faaf 	bl	80020d2 <HAL_NVIC_EnableIRQ>

}
 8000b74:	bf00      	nop
 8000b76:	3720      	adds	r7, #32
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	40011000 	.word	0x40011000
 8000b84:	40010c00 	.word	0x40010c00
 8000b88:	40010800 	.word	0x40010800
 8000b8c:	10210000 	.word	0x10210000

08000b90 <deviceReset>:

/* USER CODE BEGIN 4 */
char deviceReset()
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
char i=0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	71fb      	strb	r3, [r7, #7]
char reset;
infoDevice.Id =0;
 8000b9a:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <deviceReset+0x54>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
for(i=0;i<10;i++)
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	71fb      	strb	r3, [r7, #7]
 8000ba4:	e011      	b.n	8000bca <deviceReset+0x3a>
{
  bufferPulso[i] = 0;
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	4a0f      	ldr	r2, [pc, #60]	; (8000be8 <deviceReset+0x58>)
 8000baa:	2100      	movs	r1, #0
 8000bac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  currentTime[i] = 0;
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <deviceReset+0x5c>)
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  currentPulse[i] = 0;
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	4a0c      	ldr	r2, [pc, #48]	; (8000bf0 <deviceReset+0x60>)
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
for(i=0;i<10;i++)
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	71fb      	strb	r3, [r7, #7]
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	2b09      	cmp	r3, #9
 8000bce:	d9ea      	bls.n	8000ba6 <deviceReset+0x16>
}
reset = StopDevice(HAL_OK);
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f000 fe31 	bl	8001838 <StopDevice>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71bb      	strb	r3, [r7, #6]

return reset;
 8000bda:	79bb      	ldrb	r3, [r7, #6]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000348 	.word	0x20000348
 8000be8:	200002d4 	.word	0x200002d4
 8000bec:	20000360 	.word	0x20000360
 8000bf0:	200002fc 	.word	0x200002fc

08000bf4 <structDados>:
	000011 - 0A C0 D0 02 02 01 05 66 0F  - Configuração
	000013 - 0A C0 D0 02 02 01 02 69 0F  - Configuração
	000015 - 0A C0 D0 02 02 01 01 6A 0F  - Configuração
 */
void structDados()
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
uint8_t counter=0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	71fb      	strb	r3, [r7, #7]
receive_message.inicio = RXBufferArray[0];
 8000bfe:	4b20      	ldr	r3, [pc, #128]	; (8000c80 <structDados+0x8c>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	461a      	mov	r2, r3
 8000c04:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <structDados+0x90>)
 8000c06:	601a      	str	r2, [r3, #0]
receive_message.endOrigem = RXBufferArray[1];
 8000c08:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <structDados+0x8c>)
 8000c0a:	785b      	ldrb	r3, [r3, #1]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <structDados+0x90>)
 8000c10:	605a      	str	r2, [r3, #4]
receive_message.endDestino = RXBufferArray[2];
 8000c12:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <structDados+0x8c>)
 8000c14:	789b      	ldrb	r3, [r3, #2]
 8000c16:	461a      	mov	r2, r3
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <structDados+0x90>)
 8000c1a:	609a      	str	r2, [r3, #8]
receive_message.funcao = RXBufferArray[3];
 8000c1c:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <structDados+0x8c>)
 8000c1e:	78db      	ldrb	r3, [r3, #3]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <structDados+0x90>)
 8000c24:	60da      	str	r2, [r3, #12]
receive_message.dadosCount = RXBufferArray[4];
 8000c26:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <structDados+0x8c>)
 8000c28:	791b      	ldrb	r3, [r3, #4]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <structDados+0x90>)
 8000c2e:	611a      	str	r2, [r3, #16]
while(counter<receive_message.dadosCount)
 8000c30:	e00b      	b.n	8000c4a <structDados+0x56>
{
	dados[counter] = RXBufferArray[5+counter];
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	3305      	adds	r3, #5
 8000c36:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <structDados+0x8c>)
 8000c38:	5cd2      	ldrb	r2, [r2, r3]
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	b211      	sxth	r1, r2
 8000c3e:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <structDados+0x94>)
 8000c40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	counter++;
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	3301      	adds	r3, #1
 8000c48:	71fb      	strb	r3, [r7, #7]
while(counter<receive_message.dadosCount)
 8000c4a:	79fa      	ldrb	r2, [r7, #7]
 8000c4c:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <structDados+0x90>)
 8000c4e:	691b      	ldr	r3, [r3, #16]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	dbee      	blt.n	8000c32 <structDados+0x3e>
}
receive_message.checksum = RXBufferArray[5+counter];
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	3305      	adds	r3, #5
 8000c58:	4a09      	ldr	r2, [pc, #36]	; (8000c80 <structDados+0x8c>)
 8000c5a:	5cd3      	ldrb	r3, [r2, r3]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <structDados+0x90>)
 8000c60:	615a      	str	r2, [r3, #20]
receive_message.fim=RXBufferArray[6+counter];
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	3306      	adds	r3, #6
 8000c66:	4a06      	ldr	r2, [pc, #24]	; (8000c80 <structDados+0x8c>)
 8000c68:	5cd3      	ldrb	r3, [r2, r3]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <structDados+0x90>)
 8000c6e:	619a      	str	r2, [r3, #24]
counter=0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	71fb      	strb	r3, [r7, #7]
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	200002bc 	.word	0x200002bc
 8000c84:	2000032c 	.word	0x2000032c
 8000c88:	200002c8 	.word	0x200002c8

08000c8c <VerificaErro>:

int VerificaErro()
{
 8000c8c:	b598      	push	{r3, r4, r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
if(receive_message.checksum != Checksum(RXBufferArray))
 8000c90:	4b21      	ldr	r3, [pc, #132]	; (8000d18 <VerificaErro+0x8c>)
 8000c92:	695c      	ldr	r4, [r3, #20]
 8000c94:	4821      	ldr	r0, [pc, #132]	; (8000d1c <VerificaErro+0x90>)
 8000c96:	f000 fe31 	bl	80018fc <Checksum>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	429c      	cmp	r4, r3
 8000c9e:	d001      	beq.n	8000ca4 <VerificaErro+0x18>
{
	return errorChecksum;
 8000ca0:	2330      	movs	r3, #48	; 0x30
 8000ca2:	e036      	b.n	8000d12 <VerificaErro+0x86>
}
if(receive_message.endDestino>255 || receive_message.endDestino<0)
 8000ca4:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <VerificaErro+0x8c>)
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	2bff      	cmp	r3, #255	; 0xff
 8000caa:	dc03      	bgt.n	8000cb4 <VerificaErro+0x28>
 8000cac:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <VerificaErro+0x8c>)
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	da06      	bge.n	8000cc2 <VerificaErro+0x36>
{
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000cb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb8:	4819      	ldr	r0, [pc, #100]	; (8000d20 <VerificaErro+0x94>)
 8000cba:	f001 fe9d 	bl	80029f8 <HAL_GPIO_TogglePin>
	return errorAddress;
 8000cbe:	2333      	movs	r3, #51	; 0x33
 8000cc0:	e027      	b.n	8000d12 <VerificaErro+0x86>
}
/*	if(infoDevice.Id != 0x00 && infoDevice.Id != receive_message.endDestino)
{
	return errorAddress;
}*/
if(receive_message.funcao == 2 && receive_message.dadosCount < 0)
 8000cc2:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <VerificaErro+0x8c>)
 8000cc4:	68db      	ldr	r3, [r3, #12]
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d105      	bne.n	8000cd6 <VerificaErro+0x4a>
 8000cca:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <VerificaErro+0x8c>)
 8000ccc:	691b      	ldr	r3, [r3, #16]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	da01      	bge.n	8000cd6 <VerificaErro+0x4a>
{
	return errorConfig;
 8000cd2:	2335      	movs	r3, #53	; 0x35
 8000cd4:	e01d      	b.n	8000d12 <VerificaErro+0x86>
}
if(receive_message.funcao > 0x08)
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <VerificaErro+0x8c>)
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	2b08      	cmp	r3, #8
 8000cdc:	dd01      	ble.n	8000ce2 <VerificaErro+0x56>
{
	return errorFunction;
 8000cde:	2336      	movs	r3, #54	; 0x36
 8000ce0:	e017      	b.n	8000d12 <VerificaErro+0x86>
}
if(receive_message.funcao == 2 && dados[1]<1)
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <VerificaErro+0x8c>)
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d106      	bne.n	8000cf8 <VerificaErro+0x6c>
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <VerificaErro+0x98>)
 8000cec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	dc01      	bgt.n	8000cf8 <VerificaErro+0x6c>
{
	return errorData;
 8000cf4:	2337      	movs	r3, #55	; 0x37
 8000cf6:	e00c      	b.n	8000d12 <VerificaErro+0x86>
}
if(receive_message.inicio != 0x0A)
 8000cf8:	4b07      	ldr	r3, [pc, #28]	; (8000d18 <VerificaErro+0x8c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b0a      	cmp	r3, #10
 8000cfe:	d001      	beq.n	8000d04 <VerificaErro+0x78>
{
	return errorStartHeader;
 8000d00:	2338      	movs	r3, #56	; 0x38
 8000d02:	e006      	b.n	8000d12 <VerificaErro+0x86>
}
if(receive_message.fim != 0x0f)
 8000d04:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <VerificaErro+0x8c>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	2b0f      	cmp	r3, #15
 8000d0a:	d001      	beq.n	8000d10 <VerificaErro+0x84>
{
	return errorEndHeader;
 8000d0c:	2339      	movs	r3, #57	; 0x39
 8000d0e:	e000      	b.n	8000d12 <VerificaErro+0x86>
}
return OK;
 8000d10:	2341      	movs	r3, #65	; 0x41

}
 8000d12:	4618      	mov	r0, r3
 8000d14:	bd98      	pop	{r3, r4, r7, pc}
 8000d16:	bf00      	nop
 8000d18:	2000032c 	.word	0x2000032c
 8000d1c:	200002bc 	.word	0x200002bc
 8000d20:	40011000 	.word	0x40011000
 8000d24:	200002c8 	.word	0x200002c8

08000d28 <command>:

void command(char *ReceivedChar)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]

static int FirstData = 0;
/*	int ReceivedInt = *ReceivedChar - '\0';*/
if (FirstData == 0)
 8000d30:	4b63      	ldr	r3, [pc, #396]	; (8000ec0 <command+0x198>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d10a      	bne.n	8000d4e <command+0x26>
{
RXBufferArray[0] = ReceivedChar[0];
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	781a      	ldrb	r2, [r3, #0]
 8000d3c:	4b61      	ldr	r3, [pc, #388]	; (8000ec4 <command+0x19c>)
 8000d3e:	701a      	strb	r2, [r3, #0]
FirstData = 1;
 8000d40:	4b5f      	ldr	r3, [pc, #380]	; (8000ec0 <command+0x198>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	601a      	str	r2, [r3, #0]
uart_state = Origem;
 8000d46:	4b60      	ldr	r3, [pc, #384]	; (8000ec8 <command+0x1a0>)
 8000d48:	2237      	movs	r2, #55	; 0x37
 8000d4a:	701a      	strb	r2, [r3, #0]
  default:
	uart_state = iddle;
  }
}
}
}
 8000d4c:	e0b3      	b.n	8000eb6 <command+0x18e>
if (uart_state != iddle)
 8000d4e:	4b5e      	ldr	r3, [pc, #376]	; (8000ec8 <command+0x1a0>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b49      	cmp	r3, #73	; 0x49
 8000d54:	f000 80ac 	beq.w	8000eb0 <command+0x188>
  switch (uart_state) {
 8000d58:	4b5b      	ldr	r3, [pc, #364]	; (8000ec8 <command+0x1a0>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	3b37      	subs	r3, #55	; 0x37
 8000d5e:	2b0d      	cmp	r3, #13
 8000d60:	f200 80a2 	bhi.w	8000ea8 <command+0x180>
 8000d64:	a201      	add	r2, pc, #4	; (adr r2, 8000d6c <command+0x44>)
 8000d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d6a:	bf00      	nop
 8000d6c:	08000da5 	.word	0x08000da5
 8000d70:	08000db5 	.word	0x08000db5
 8000d74:	08000dc5 	.word	0x08000dc5
 8000d78:	08000ea9 	.word	0x08000ea9
 8000d7c:	08000ea9 	.word	0x08000ea9
 8000d80:	08000ea9 	.word	0x08000ea9
 8000d84:	08000ea9 	.word	0x08000ea9
 8000d88:	08000ea9 	.word	0x08000ea9
 8000d8c:	08000ea9 	.word	0x08000ea9
 8000d90:	08000ea9 	.word	0x08000ea9
 8000d94:	08000dd5 	.word	0x08000dd5
 8000d98:	08000e09 	.word	0x08000e09
 8000d9c:	08000e49 	.word	0x08000e49
 8000da0:	08000e77 	.word	0x08000e77
		RXBufferArray[1] = ReceivedChar[1];
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	785a      	ldrb	r2, [r3, #1]
 8000da8:	4b46      	ldr	r3, [pc, #280]	; (8000ec4 <command+0x19c>)
 8000daa:	705a      	strb	r2, [r3, #1]
		uart_state = Destino;
 8000dac:	4b46      	ldr	r3, [pc, #280]	; (8000ec8 <command+0x1a0>)
 8000dae:	2238      	movs	r2, #56	; 0x38
 8000db0:	701a      	strb	r2, [r3, #0]
	break;
 8000db2:	e080      	b.n	8000eb6 <command+0x18e>
		RXBufferArray[2] = ReceivedChar[2];
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	789a      	ldrb	r2, [r3, #2]
 8000db8:	4b42      	ldr	r3, [pc, #264]	; (8000ec4 <command+0x19c>)
 8000dba:	709a      	strb	r2, [r3, #2]
		uart_state = Funcao;
 8000dbc:	4b42      	ldr	r3, [pc, #264]	; (8000ec8 <command+0x1a0>)
 8000dbe:	2239      	movs	r2, #57	; 0x39
 8000dc0:	701a      	strb	r2, [r3, #0]
	break;
 8000dc2:	e078      	b.n	8000eb6 <command+0x18e>
		RXBufferArray[3] = ReceivedChar[3];
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	78da      	ldrb	r2, [r3, #3]
 8000dc8:	4b3e      	ldr	r3, [pc, #248]	; (8000ec4 <command+0x19c>)
 8000dca:	70da      	strb	r2, [r3, #3]
		uart_state = DadosCount;
 8000dcc:	4b3e      	ldr	r3, [pc, #248]	; (8000ec8 <command+0x1a0>)
 8000dce:	2241      	movs	r2, #65	; 0x41
 8000dd0:	701a      	strb	r2, [r3, #0]
	break;
 8000dd2:	e070      	b.n	8000eb6 <command+0x18e>
	if(ReceivedChar[4]>0)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3304      	adds	r3, #4
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d007      	beq.n	8000dee <command+0xc6>
		RXBufferArray[4] = ReceivedChar[4];
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	791a      	ldrb	r2, [r3, #4]
 8000de2:	4b38      	ldr	r3, [pc, #224]	; (8000ec4 <command+0x19c>)
 8000de4:	711a      	strb	r2, [r3, #4]
		uart_state = Dados;
 8000de6:	4b38      	ldr	r3, [pc, #224]	; (8000ec8 <command+0x1a0>)
 8000de8:	2242      	movs	r2, #66	; 0x42
 8000dea:	701a      	strb	r2, [r3, #0]
	break;
 8000dec:	e062      	b.n	8000eb4 <command+0x18c>
	else if (ReceivedChar[4]==0)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	3304      	adds	r3, #4
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d15d      	bne.n	8000eb4 <command+0x18c>
		RXBufferArray[4] = ReceivedChar[4];
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	791a      	ldrb	r2, [r3, #4]
 8000dfc:	4b31      	ldr	r3, [pc, #196]	; (8000ec4 <command+0x19c>)
 8000dfe:	711a      	strb	r2, [r3, #4]
		uart_state = CheckSum;
 8000e00:	4b31      	ldr	r3, [pc, #196]	; (8000ec8 <command+0x1a0>)
 8000e02:	2243      	movs	r2, #67	; 0x43
 8000e04:	701a      	strb	r2, [r3, #0]
	break;
 8000e06:	e055      	b.n	8000eb4 <command+0x18c>
	  RXBufferArray[5+i] = ReceivedChar[5+i];
 8000e08:	4b30      	ldr	r3, [pc, #192]	; (8000ecc <command+0x1a4>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	3305      	adds	r3, #5
 8000e0e:	461a      	mov	r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	441a      	add	r2, r3
 8000e14:	4b2d      	ldr	r3, [pc, #180]	; (8000ecc <command+0x1a4>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	3305      	adds	r3, #5
 8000e1a:	7811      	ldrb	r1, [r2, #0]
 8000e1c:	4a29      	ldr	r2, [pc, #164]	; (8000ec4 <command+0x19c>)
 8000e1e:	54d1      	strb	r1, [r2, r3]
	  i++;
 8000e20:	4b2a      	ldr	r3, [pc, #168]	; (8000ecc <command+0x1a4>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	3301      	adds	r3, #1
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	4b28      	ldr	r3, [pc, #160]	; (8000ecc <command+0x1a4>)
 8000e2a:	701a      	strb	r2, [r3, #0]
	  if(i<RXBufferArray[4])
 8000e2c:	4b25      	ldr	r3, [pc, #148]	; (8000ec4 <command+0x19c>)
 8000e2e:	791a      	ldrb	r2, [r3, #4]
 8000e30:	4b26      	ldr	r3, [pc, #152]	; (8000ecc <command+0x1a4>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d903      	bls.n	8000e40 <command+0x118>
		  uart_state = Dados;
 8000e38:	4b23      	ldr	r3, [pc, #140]	; (8000ec8 <command+0x1a0>)
 8000e3a:	2242      	movs	r2, #66	; 0x42
 8000e3c:	701a      	strb	r2, [r3, #0]
	  break;
 8000e3e:	e03a      	b.n	8000eb6 <command+0x18e>
		  uart_state = CheckSum;
 8000e40:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <command+0x1a0>)
 8000e42:	2243      	movs	r2, #67	; 0x43
 8000e44:	701a      	strb	r2, [r3, #0]
	  break;
 8000e46:	e036      	b.n	8000eb6 <command+0x18e>
	  RXBufferArray[5+i] = ReceivedChar[5+i];
 8000e48:	4b20      	ldr	r3, [pc, #128]	; (8000ecc <command+0x1a4>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	3305      	adds	r3, #5
 8000e4e:	461a      	mov	r2, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	441a      	add	r2, r3
 8000e54:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <command+0x1a4>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	3305      	adds	r3, #5
 8000e5a:	7811      	ldrb	r1, [r2, #0]
 8000e5c:	4a19      	ldr	r2, [pc, #100]	; (8000ec4 <command+0x19c>)
 8000e5e:	54d1      	strb	r1, [r2, r3]
	  checksum = Checksum(RXBufferArray);
 8000e60:	4818      	ldr	r0, [pc, #96]	; (8000ec4 <command+0x19c>)
 8000e62:	f000 fd4b 	bl	80018fc <Checksum>
 8000e66:	4603      	mov	r3, r0
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <command+0x1a8>)
 8000e6c:	701a      	strb	r2, [r3, #0]
	  uart_state = Fim;
 8000e6e:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <command+0x1a0>)
 8000e70:	2244      	movs	r2, #68	; 0x44
 8000e72:	701a      	strb	r2, [r3, #0]
  break;
 8000e74:	e01f      	b.n	8000eb6 <command+0x18e>
	  RXBufferArray[6+i] = ReceivedChar[6+i];
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <command+0x1a4>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	3306      	adds	r3, #6
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	441a      	add	r2, r3
 8000e82:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <command+0x1a4>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	3306      	adds	r3, #6
 8000e88:	7811      	ldrb	r1, [r2, #0]
 8000e8a:	4a0e      	ldr	r2, [pc, #56]	; (8000ec4 <command+0x19c>)
 8000e8c:	54d1      	strb	r1, [r2, r3]
	  EndReception = Fim;
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <command+0x1ac>)
 8000e90:	2244      	movs	r2, #68	; 0x44
 8000e92:	701a      	strb	r2, [r3, #0]
	  i=0;
 8000e94:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <command+0x1a4>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	701a      	strb	r2, [r3, #0]
	  FirstData = 0;
 8000e9a:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <command+0x198>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
	  uart_state = iddle;
 8000ea0:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <command+0x1a0>)
 8000ea2:	2249      	movs	r2, #73	; 0x49
 8000ea4:	701a      	strb	r2, [r3, #0]
	break;
 8000ea6:	e006      	b.n	8000eb6 <command+0x18e>
	uart_state = iddle;
 8000ea8:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <command+0x1a0>)
 8000eaa:	2249      	movs	r2, #73	; 0x49
 8000eac:	701a      	strb	r2, [r3, #0]
}
 8000eae:	e002      	b.n	8000eb6 <command+0x18e>
}
 8000eb0:	bf00      	nop
 8000eb2:	e000      	b.n	8000eb6 <command+0x18e>
	break;
 8000eb4:	bf00      	nop
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000380 	.word	0x20000380
 8000ec4:	200002bc 	.word	0x200002bc
 8000ec8:	2000035b 	.word	0x2000035b
 8000ecc:	200002c7 	.word	0x200002c7
 8000ed0:	20000358 	.word	0x20000358
 8000ed4:	200002b6 	.word	0x200002b6

08000ed8 <selectCommand>:

int selectCommand(struct Recepcao receive_message)

{
 8000ed8:	b084      	sub	sp, #16
 8000eda:	b490      	push	{r4, r7}
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	f107 0408 	add.w	r4, r7, #8
 8000ee2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
if (receive_message.funcao == 1)
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d103      	bne.n	8000ef4 <selectCommand+0x1c>
 {
	  StateMachine = Identification;
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <selectCommand+0x7c>)
 8000eee:	2231      	movs	r2, #49	; 0x31
 8000ef0:	701a      	strb	r2, [r3, #0]
 8000ef2:	e028      	b.n	8000f46 <selectCommand+0x6e>
 }
  else if (receive_message.funcao == 2)
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d103      	bne.n	8000f02 <selectCommand+0x2a>
  {
	  StateMachine = Config;
 8000efa:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <selectCommand+0x7c>)
 8000efc:	2232      	movs	r2, #50	; 0x32
 8000efe:	701a      	strb	r2, [r3, #0]
 8000f00:	e021      	b.n	8000f46 <selectCommand+0x6e>
  }
  else if (receive_message.funcao == 3)
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	d103      	bne.n	8000f10 <selectCommand+0x38>
  {
	  StateMachine = Start;
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <selectCommand+0x7c>)
 8000f0a:	2233      	movs	r2, #51	; 0x33
 8000f0c:	701a      	strb	r2, [r3, #0]
 8000f0e:	e01a      	b.n	8000f46 <selectCommand+0x6e>
  }
else if (receive_message.funcao == 4)
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	d103      	bne.n	8000f1e <selectCommand+0x46>
{
	  StateMachine = Read;
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <selectCommand+0x7c>)
 8000f18:	2234      	movs	r2, #52	; 0x34
 8000f1a:	701a      	strb	r2, [r3, #0]
 8000f1c:	e013      	b.n	8000f46 <selectCommand+0x6e>
}
else if (receive_message.funcao == 5)
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	2b05      	cmp	r3, #5
 8000f22:	d103      	bne.n	8000f2c <selectCommand+0x54>
{
	  StateMachine = ReadError;
 8000f24:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <selectCommand+0x7c>)
 8000f26:	2235      	movs	r2, #53	; 0x35
 8000f28:	701a      	strb	r2, [r3, #0]
 8000f2a:	e00c      	b.n	8000f46 <selectCommand+0x6e>
}
else if (receive_message.funcao == 6)
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	2b06      	cmp	r3, #6
 8000f30:	d103      	bne.n	8000f3a <selectCommand+0x62>
{
	  StateMachine = Stop;
 8000f32:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <selectCommand+0x7c>)
 8000f34:	2236      	movs	r2, #54	; 0x36
 8000f36:	701a      	strb	r2, [r3, #0]
 8000f38:	e005      	b.n	8000f46 <selectCommand+0x6e>
}
else if (receive_message.funcao == 7)
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	2b07      	cmp	r3, #7
 8000f3e:	d102      	bne.n	8000f46 <selectCommand+0x6e>
{
	  StateMachine = Codification;
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <selectCommand+0x7c>)
 8000f42:	2237      	movs	r2, #55	; 0x37
 8000f44:	701a      	strb	r2, [r3, #0]
}
return StateMachine;
 8000f46:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <selectCommand+0x7c>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc90      	pop	{r4, r7}
 8000f50:	b004      	add	sp, #16
 8000f52:	4770      	bx	lr
 8000f54:	2000035a 	.word	0x2000035a

08000f58 <getID>:

void getID()
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
	uint16_t codCefise=0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	80fb      	strh	r3, [r7, #6]
	receive_message.dadosCount = 1;
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <getID+0x34>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	611a      	str	r2, [r3, #16]
	FLASH_le_16bits(END_INICIAL, &codCefise);
 8000f68:	1dbb      	adds	r3, r7, #6
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4808      	ldr	r0, [pc, #32]	; (8000f90 <getID+0x38>)
 8000f6e:	f7ff f92a 	bl	80001c6 <FLASH_le_16bits>
	if(codCefise != 0xFFFF)
 8000f72:	88fb      	ldrh	r3, [r7, #6]
 8000f74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d003      	beq.n	8000f84 <getID+0x2c>
	{
		infoDevice.Id = codCefise;
 8000f7c:	88fb      	ldrh	r3, [r7, #6]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <getID+0x3c>)
 8000f82:	601a      	str	r2, [r3, #0]
	}
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	2000032c 	.word	0x2000032c
 8000f90:	0800f000 	.word	0x0800f000
 8000f94:	20000348 	.word	0x20000348

08000f98 <setID>:

void setID()
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
	uint16_t codCefise=0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	80fb      	strh	r3, [r7, #6]
	receive_message.dadosCount = 1;
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <setID+0x3c>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	611a      	str	r2, [r3, #16]
	FLASH_apaga(END_INICIAL, 1);
 8000fa8:	2101      	movs	r1, #1
 8000faa:	480b      	ldr	r0, [pc, #44]	; (8000fd8 <setID+0x40>)
 8000fac:	f7ff f8ce 	bl	800014c <FLASH_apaga>
	codCefise = dados[0];
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <setID+0x44>)
 8000fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	80fb      	strh	r3, [r7, #6]
	infoDevice.Id = codCefise;
 8000fba:	88fb      	ldrh	r3, [r7, #6]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <setID+0x48>)
 8000fc0:	601a      	str	r2, [r3, #0]
	FLASH_escreve_16bits(END_INICIAL, &codCefise);
 8000fc2:	1dbb      	adds	r3, r7, #6
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <setID+0x40>)
 8000fc8:	f7ff f8e0 	bl	800018c <FLASH_escreve_16bits>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	2000032c 	.word	0x2000032c
 8000fd8:	0800f000 	.word	0x0800f000
 8000fdc:	200002c8 	.word	0x200002c8
 8000fe0:	20000348 	.word	0x20000348

08000fe4 <DeviceParamenter>:

void DeviceParamenter(struct Recepcao message)
{
 8000fe4:	b084      	sub	sp, #16
 8000fe6:	b490      	push	{r4, r7}
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	f107 0408 	add.w	r4, r7, #8
 8000fee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
timeTotal = dados[1] * 10;
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <DeviceParamenter+0x50>)
 8000ff4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	0092      	lsls	r2, r2, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	b29a      	uxth	r2, r3
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <DeviceParamenter+0x54>)
 8001006:	801a      	strh	r2, [r3, #0]
switch(dados[0])
 8001008:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <DeviceParamenter+0x50>)
 800100a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d002      	beq.n	8001018 <DeviceParamenter+0x34>
 8001012:	2b02      	cmp	r3, #2
 8001014:	d004      	beq.n	8001020 <DeviceParamenter+0x3c>
	case 0x02:
		readStatus = MAN;
	break;

}
}
 8001016:	e007      	b.n	8001028 <DeviceParamenter+0x44>
		readStatus = AUTO;
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <DeviceParamenter+0x58>)
 800101a:	2246      	movs	r2, #70	; 0x46
 800101c:	701a      	strb	r2, [r3, #0]
	break;
 800101e:	e003      	b.n	8001028 <DeviceParamenter+0x44>
		readStatus = MAN;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <DeviceParamenter+0x58>)
 8001022:	224d      	movs	r2, #77	; 0x4d
 8001024:	701a      	strb	r2, [r3, #0]
	break;
 8001026:	bf00      	nop
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	bc90      	pop	{r4, r7}
 800102e:	b004      	add	sp, #16
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	200002c8 	.word	0x200002c8
 8001038:	200002d0 	.word	0x200002d0
 800103c:	200002c6 	.word	0x200002c6

08001040 <StartDevice>:

char StartDevice(char deviceFlag)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
char startEncoder;
if(deviceFlag == 0)
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d104      	bne.n	800105a <StartDevice+0x1a>
{
	startEncoder = HAL_OK;
 8001050:	2300      	movs	r3, #0
 8001052:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8001054:	200a      	movs	r0, #10
 8001056:	f000 ff25 	bl	8001ea4 <HAL_Delay>
	//
}
if(startEncoder == HAL_OK)
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d101      	bne.n	8001064 <StartDevice+0x24>
	return 1;
 8001060:	2301      	movs	r3, #1
 8001062:	e000      	b.n	8001066 <StartDevice+0x26>
else return 0;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <TransmitData>:

void TransmitData(struct Recepcao Send_message,int32_t *dataToSend, uint8_t dataLenght)
{
 8001070:	b084      	sub	sp, #16
 8001072:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001076:	b08b      	sub	sp, #44	; 0x2c
 8001078:	af00      	add	r7, sp, #0
 800107a:	f107 0650 	add.w	r6, r7, #80	; 0x50
 800107e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8001082:	466b      	mov	r3, sp
 8001084:	607b      	str	r3, [r7, #4]
uint8_t txBuffer[dataLenght];
 8001086:	f897 6070 	ldrb.w	r6, [r7, #112]	; 0x70
 800108a:	4633      	mov	r3, r6
 800108c:	3b01      	subs	r3, #1
 800108e:	623b      	str	r3, [r7, #32]
 8001090:	b2f3      	uxtb	r3, r6
 8001092:	2200      	movs	r2, #0
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	60fa      	str	r2, [r7, #12]
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	f04f 0300 	mov.w	r3, #0
 80010a0:	68f9      	ldr	r1, [r7, #12]
 80010a2:	00cb      	lsls	r3, r1, #3
 80010a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010a8:	4684      	mov	ip, r0
 80010aa:	ea43 735c 	orr.w	r3, r3, ip, lsr #29
 80010ae:	4601      	mov	r1, r0
 80010b0:	00ca      	lsls	r2, r1, #3
 80010b2:	b2f3      	uxtb	r3, r6
 80010b4:	2200      	movs	r2, #0
 80010b6:	469a      	mov	sl, r3
 80010b8:	4693      	mov	fp, r2
 80010ba:	f04f 0200 	mov.w	r2, #0
 80010be:	f04f 0300 	mov.w	r3, #0
 80010c2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80010c6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80010ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80010ce:	4633      	mov	r3, r6
 80010d0:	3307      	adds	r3, #7
 80010d2:	08db      	lsrs	r3, r3, #3
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	ebad 0d03 	sub.w	sp, sp, r3
 80010da:	466b      	mov	r3, sp
 80010dc:	3300      	adds	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]
static uint8_t txBufferRead[67];
uint8_t errorBuffer[dataLenght];
 80010e0:	f897 1070 	ldrb.w	r1, [r7, #112]	; 0x70
 80010e4:	460b      	mov	r3, r1
 80010e6:	3b01      	subs	r3, #1
 80010e8:	61bb      	str	r3, [r7, #24]
 80010ea:	b2cb      	uxtb	r3, r1
 80010ec:	2200      	movs	r2, #0
 80010ee:	4698      	mov	r8, r3
 80010f0:	4691      	mov	r9, r2
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	f04f 0300 	mov.w	r3, #0
 80010fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80010fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001102:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001106:	b2cb      	uxtb	r3, r1
 8001108:	2200      	movs	r2, #0
 800110a:	461c      	mov	r4, r3
 800110c:	4615      	mov	r5, r2
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	f04f 0300 	mov.w	r3, #0
 8001116:	00eb      	lsls	r3, r5, #3
 8001118:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800111c:	00e2      	lsls	r2, r4, #3
 800111e:	460b      	mov	r3, r1
 8001120:	3307      	adds	r3, #7
 8001122:	08db      	lsrs	r3, r3, #3
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	ebad 0d03 	sub.w	sp, sp, r3
 800112a:	466b      	mov	r3, sp
 800112c:	3300      	adds	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
uint8_t counter = 2;
 8001130:	2302      	movs	r3, #2
 8001132:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
uint8_t countArray = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
uint8_t counterAux = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
switch(StateMachine)
 8001142:	4ba7      	ldr	r3, [pc, #668]	; (80013e0 <TransmitData+0x370>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	3b31      	subs	r3, #49	; 0x31
 8001148:	2b14      	cmp	r3, #20
 800114a:	f200 8367 	bhi.w	800181c <TransmitData+0x7ac>
 800114e:	a201      	add	r2, pc, #4	; (adr r2, 8001154 <TransmitData+0xe4>)
 8001150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001154:	080011a9 	.word	0x080011a9
 8001158:	0800125b 	.word	0x0800125b
 800115c:	080012a5 	.word	0x080012a5
 8001160:	080012ef 	.word	0x080012ef
 8001164:	080013f9 	.word	0x080013f9
 8001168:	08001427 	.word	0x08001427
 800116c:	08001203 	.word	0x08001203
 8001170:	0800181d 	.word	0x0800181d
 8001174:	0800181d 	.word	0x0800181d
 8001178:	0800181d 	.word	0x0800181d
 800117c:	0800181d 	.word	0x0800181d
 8001180:	0800181d 	.word	0x0800181d
 8001184:	0800181d 	.word	0x0800181d
 8001188:	0800181d 	.word	0x0800181d
 800118c:	0800181d 	.word	0x0800181d
 8001190:	0800181d 	.word	0x0800181d
 8001194:	0800181d 	.word	0x0800181d
 8001198:	0800181d 	.word	0x0800181d
 800119c:	0800181d 	.word	0x0800181d
 80011a0:	0800181d 	.word	0x0800181d
 80011a4:	08001473 	.word	0x08001473
{
	case Identification:
		txBuffer[0] = Send_message.inicio;
 80011a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	701a      	strb	r2, [r3, #0]
		txBuffer[1] = Send_message.endDestino;
 80011b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	705a      	strb	r2, [r3, #1]
		txBuffer[2] = Send_message.endOrigem;
 80011b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	709a      	strb	r2, [r3, #2]
		txBuffer[3] = Send_message.funcao;
 80011c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	70da      	strb	r2, [r3, #3]
		txBuffer[4] = Send_message.dadosCount;
 80011c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	711a      	strb	r2, [r3, #4]
		if(Send_message.dadosCount>0)
 80011d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	dd04      	ble.n	80011e0 <TransmitData+0x170>
		{
			txBuffer[5] = infoDevice.Id;
 80011d6:	4b83      	ldr	r3, [pc, #524]	; (80013e4 <TransmitData+0x374>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	715a      	strb	r2, [r3, #5]
		}
		txBuffer[6] = Checksum(txBuffer);
 80011e0:	69f8      	ldr	r0, [r7, #28]
 80011e2:	f000 fb8b 	bl	80018fc <Checksum>
 80011e6:	4603      	mov	r3, r0
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	719a      	strb	r2, [r3, #6]
		txBuffer[7] = Send_message.fim;
 80011ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	71da      	strb	r2, [r3, #7]
		CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 80011f6:	b2b3      	uxth	r3, r6
 80011f8:	4619      	mov	r1, r3
 80011fa:	69f8      	ldr	r0, [r7, #28]
 80011fc:	f009 fa82 	bl	800a704 <CDC_Transmit_FS>

	break;
 8001200:	e30c      	b.n	800181c <TransmitData+0x7ac>

	case Codification:
		txBuffer[0] = Send_message.inicio;
 8001202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001204:	b2da      	uxtb	r2, r3
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	701a      	strb	r2, [r3, #0]
		txBuffer[1] = Send_message.endDestino;
 800120a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800120c:	b2da      	uxtb	r2, r3
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	705a      	strb	r2, [r3, #1]
		txBuffer[2] = Send_message.endOrigem;
 8001212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001214:	b2da      	uxtb	r2, r3
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	709a      	strb	r2, [r3, #2]
		txBuffer[3] = 0x07;
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	2207      	movs	r2, #7
 800121e:	70da      	strb	r2, [r3, #3]
		txBuffer[4] = Send_message.dadosCount;
 8001220:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001222:	b2da      	uxtb	r2, r3
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	711a      	strb	r2, [r3, #4]
		if(Send_message.dadosCount>0)
 8001228:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800122a:	2b00      	cmp	r3, #0
 800122c:	dd04      	ble.n	8001238 <TransmitData+0x1c8>
		{
			txBuffer[5] = infoDevice.Id;
 800122e:	4b6d      	ldr	r3, [pc, #436]	; (80013e4 <TransmitData+0x374>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	715a      	strb	r2, [r3, #5]
		}
		txBuffer[6] = Checksum(txBuffer);
 8001238:	69f8      	ldr	r0, [r7, #28]
 800123a:	f000 fb5f 	bl	80018fc <Checksum>
 800123e:	4603      	mov	r3, r0
 8001240:	b2da      	uxtb	r2, r3
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	719a      	strb	r2, [r3, #6]
		txBuffer[7] = Send_message.fim;
 8001246:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001248:	b2da      	uxtb	r2, r3
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	71da      	strb	r2, [r3, #7]
		CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 800124e:	b2b3      	uxth	r3, r6
 8001250:	4619      	mov	r1, r3
 8001252:	69f8      	ldr	r0, [r7, #28]
 8001254:	f009 fa56 	bl	800a704 <CDC_Transmit_FS>

	break;
 8001258:	e2e0      	b.n	800181c <TransmitData+0x7ac>
	case Config:
		txBuffer[0] = Send_message.inicio;
 800125a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800125c:	b2da      	uxtb	r2, r3
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	701a      	strb	r2, [r3, #0]
		txBuffer[1] = infoDevice.Id;
 8001262:	4b60      	ldr	r3, [pc, #384]	; (80013e4 <TransmitData+0x374>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	705a      	strb	r2, [r3, #1]
		txBuffer[2] = Send_message.endOrigem;
 800126c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800126e:	b2da      	uxtb	r2, r3
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	709a      	strb	r2, [r3, #2]
		txBuffer[3] = Send_message.funcao;
 8001274:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001276:	b2da      	uxtb	r2, r3
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	70da      	strb	r2, [r3, #3]
		txBuffer[4] = 0x00;
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	2200      	movs	r2, #0
 8001280:	711a      	strb	r2, [r3, #4]
		txBuffer[5] = Checksum(txBuffer);
 8001282:	69f8      	ldr	r0, [r7, #28]
 8001284:	f000 fb3a 	bl	80018fc <Checksum>
 8001288:	4603      	mov	r3, r0
 800128a:	b2da      	uxtb	r2, r3
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	715a      	strb	r2, [r3, #5]
		txBuffer[6] = Send_message.fim;
 8001290:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001292:	b2da      	uxtb	r2, r3
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	719a      	strb	r2, [r3, #6]
		CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 8001298:	b2b3      	uxth	r3, r6
 800129a:	4619      	mov	r1, r3
 800129c:	69f8      	ldr	r0, [r7, #28]
 800129e:	f009 fa31 	bl	800a704 <CDC_Transmit_FS>

	break;
 80012a2:	e2bb      	b.n	800181c <TransmitData+0x7ac>
	case Start: // Msg de inicio de dispositivo
		txBuffer[0] = Send_message.inicio;
 80012a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	701a      	strb	r2, [r3, #0]
		txBuffer[1] = infoDevice.Id;
 80012ac:	4b4d      	ldr	r3, [pc, #308]	; (80013e4 <TransmitData+0x374>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	705a      	strb	r2, [r3, #1]
		txBuffer[2] = Send_message.endOrigem;
 80012b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	709a      	strb	r2, [r3, #2]
		txBuffer[3] = 0x03;
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	2203      	movs	r2, #3
 80012c2:	70da      	strb	r2, [r3, #3]
		txBuffer[4] = Send_message.dadosCount;
 80012c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	711a      	strb	r2, [r3, #4]
		txBuffer[5] = Checksum(txBuffer);
 80012cc:	69f8      	ldr	r0, [r7, #28]
 80012ce:	f000 fb15 	bl	80018fc <Checksum>
 80012d2:	4603      	mov	r3, r0
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	715a      	strb	r2, [r3, #5]
		txBuffer[6] = Send_message.fim;
 80012da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	719a      	strb	r2, [r3, #6]
		CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 80012e2:	b2b3      	uxth	r3, r6
 80012e4:	4619      	mov	r1, r3
 80012e6:	69f8      	ldr	r0, [r7, #28]
 80012e8:	f009 fa0c 	bl	800a704 <CDC_Transmit_FS>
	break;
 80012ec:	e296      	b.n	800181c <TransmitData+0x7ac>

	case Read:
		txBufferRead[0] = Send_message.inicio;
 80012ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4b3d      	ldr	r3, [pc, #244]	; (80013e8 <TransmitData+0x378>)
 80012f4:	701a      	strb	r2, [r3, #0]
		txBufferRead[1] = infoDevice.Id;
 80012f6:	4b3b      	ldr	r3, [pc, #236]	; (80013e4 <TransmitData+0x374>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	4b3a      	ldr	r3, [pc, #232]	; (80013e8 <TransmitData+0x378>)
 80012fe:	705a      	strb	r2, [r3, #1]
		txBufferRead[2] = Send_message.endOrigem;
 8001300:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001302:	b2da      	uxtb	r2, r3
 8001304:	4b38      	ldr	r3, [pc, #224]	; (80013e8 <TransmitData+0x378>)
 8001306:	709a      	strb	r2, [r3, #2]
		txBufferRead[3] = 0x04;
 8001308:	4b37      	ldr	r3, [pc, #220]	; (80013e8 <TransmitData+0x378>)
 800130a:	2204      	movs	r2, #4
 800130c:	70da      	strb	r2, [r3, #3]
		txBufferRead[4] = 0x3C;
 800130e:	4b36      	ldr	r3, [pc, #216]	; (80013e8 <TransmitData+0x378>)
 8001310:	223c      	movs	r2, #60	; 0x3c
 8001312:	711a      	strb	r2, [r3, #4]
		for(countArray = 0; countArray<10; countArray++)
 8001314:	2300      	movs	r3, #0
 8001316:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800131a:	e04b      	b.n	80013b4 <TransmitData+0x344>
		{
			timeEncoder.all = currentTime[countArray];
 800131c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001320:	4a32      	ldr	r2, [pc, #200]	; (80013ec <TransmitData+0x37c>)
 8001322:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001326:	4b32      	ldr	r3, [pc, #200]	; (80013f0 <TransmitData+0x380>)
 8001328:	801a      	strh	r2, [r3, #0]
//			timeEncoder.all = bufferTime[countArray];
			encoderPulso.all = dataToSend[countArray];
 800132a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001332:	4413      	add	r3, r2
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a2f      	ldr	r2, [pc, #188]	; (80013f4 <TransmitData+0x384>)
 8001338:	6013      	str	r3, [r2, #0]
			for(counter = 2; counter>0; counter--)
 800133a:	2302      	movs	r3, #2
 800133c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001340:	e013      	b.n	800136a <TransmitData+0x2fa>
			{
				txBufferRead[5+counterAux] = timeEncoder.pt[counter-1];
 8001342:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001346:	1e5a      	subs	r2, r3, #1
 8001348:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800134c:	3305      	adds	r3, #5
 800134e:	4928      	ldr	r1, [pc, #160]	; (80013f0 <TransmitData+0x380>)
 8001350:	5c89      	ldrb	r1, [r1, r2]
 8001352:	4a25      	ldr	r2, [pc, #148]	; (80013e8 <TransmitData+0x378>)
 8001354:	54d1      	strb	r1, [r2, r3]
				counterAux++;
 8001356:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800135a:	3301      	adds	r3, #1
 800135c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for(counter = 2; counter>0; counter--)
 8001360:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001364:	3b01      	subs	r3, #1
 8001366:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800136a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1e7      	bne.n	8001342 <TransmitData+0x2d2>
			}
			for(counter = 4; counter>0; counter--)
 8001372:	2304      	movs	r3, #4
 8001374:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001378:	e013      	b.n	80013a2 <TransmitData+0x332>
			{
				txBufferRead[5+counterAux] = encoderPulso.pt[counter-1];
 800137a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800137e:	1e5a      	subs	r2, r3, #1
 8001380:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001384:	3305      	adds	r3, #5
 8001386:	491b      	ldr	r1, [pc, #108]	; (80013f4 <TransmitData+0x384>)
 8001388:	5c89      	ldrb	r1, [r1, r2]
 800138a:	4a17      	ldr	r2, [pc, #92]	; (80013e8 <TransmitData+0x378>)
 800138c:	54d1      	strb	r1, [r2, r3]
				counterAux++;
 800138e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001392:	3301      	adds	r3, #1
 8001394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for(counter = 4; counter>0; counter--)
 8001398:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800139c:	3b01      	subs	r3, #1
 800139e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80013a2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1e7      	bne.n	800137a <TransmitData+0x30a>
		for(countArray = 0; countArray<10; countArray++)
 80013aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013ae:	3301      	adds	r3, #1
 80013b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80013b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013b8:	2b09      	cmp	r3, #9
 80013ba:	d9af      	bls.n	800131c <TransmitData+0x2ac>
			}
		}
		txBufferRead[65] = Checksum(txBufferRead);
 80013bc:	480a      	ldr	r0, [pc, #40]	; (80013e8 <TransmitData+0x378>)
 80013be:	f000 fa9d 	bl	80018fc <Checksum>
 80013c2:	4603      	mov	r3, r0
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <TransmitData+0x378>)
 80013c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		txBufferRead[66] = Send_message.fim;
 80013cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <TransmitData+0x378>)
 80013d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

		CDC_Transmit_FS((uint8_t*)txBufferRead, sizeof(txBufferRead));
 80013d6:	2143      	movs	r1, #67	; 0x43
 80013d8:	4803      	ldr	r0, [pc, #12]	; (80013e8 <TransmitData+0x378>)
 80013da:	f009 f993 	bl	800a704 <CDC_Transmit_FS>

	break;
 80013de:	e21d      	b.n	800181c <TransmitData+0x7ac>
 80013e0:	2000035a 	.word	0x2000035a
 80013e4:	20000348 	.word	0x20000348
 80013e8:	20000384 	.word	0x20000384
 80013ec:	20000360 	.word	0x20000360
 80013f0:	20000354 	.word	0x20000354
 80013f4:	20000350 	.word	0x20000350

	case ReadError:
		txBufferRead[0] = 0x0A;
 80013f8:	4b90      	ldr	r3, [pc, #576]	; (800163c <TransmitData+0x5cc>)
 80013fa:	220a      	movs	r2, #10
 80013fc:	701a      	strb	r2, [r3, #0]
		txBufferRead[3] = 0x05;
 80013fe:	4b8f      	ldr	r3, [pc, #572]	; (800163c <TransmitData+0x5cc>)
 8001400:	2205      	movs	r2, #5
 8001402:	70da      	strb	r2, [r3, #3]
		txBufferRead[65] = Checksum(txBufferRead);
 8001404:	488d      	ldr	r0, [pc, #564]	; (800163c <TransmitData+0x5cc>)
 8001406:	f000 fa79 	bl	80018fc <Checksum>
 800140a:	4603      	mov	r3, r0
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4b8b      	ldr	r3, [pc, #556]	; (800163c <TransmitData+0x5cc>)
 8001410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		txBufferRead[66] = 0x0F;
 8001414:	4b89      	ldr	r3, [pc, #548]	; (800163c <TransmitData+0x5cc>)
 8001416:	220f      	movs	r2, #15
 8001418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		CDC_Transmit_FS((uint8_t*)txBufferRead, sizeof(txBufferRead));
 800141c:	2143      	movs	r1, #67	; 0x43
 800141e:	4887      	ldr	r0, [pc, #540]	; (800163c <TransmitData+0x5cc>)
 8001420:	f009 f970 	bl	800a704 <CDC_Transmit_FS>
	break;
 8001424:	e1fa      	b.n	800181c <TransmitData+0x7ac>

	case Stop:
	txBuffer[0] = Send_message.inicio;
 8001426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001428:	b2da      	uxtb	r2, r3
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	701a      	strb	r2, [r3, #0]
	txBuffer[1] = infoDevice.Id;
 800142e:	4b84      	ldr	r3, [pc, #528]	; (8001640 <TransmitData+0x5d0>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	b2da      	uxtb	r2, r3
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	705a      	strb	r2, [r3, #1]
	txBuffer[2] = Send_message.endOrigem;
 8001438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800143a:	b2da      	uxtb	r2, r3
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	709a      	strb	r2, [r3, #2]
	txBuffer[3] = Send_message.funcao;
 8001440:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001442:	b2da      	uxtb	r2, r3
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	70da      	strb	r2, [r3, #3]
	txBuffer[4] = Send_message.dadosCount;
 8001448:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800144a:	b2da      	uxtb	r2, r3
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	711a      	strb	r2, [r3, #4]
	txBuffer[5] = Checksum(txBuffer);
 8001450:	69f8      	ldr	r0, [r7, #28]
 8001452:	f000 fa53 	bl	80018fc <Checksum>
 8001456:	4603      	mov	r3, r0
 8001458:	b2da      	uxtb	r2, r3
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	715a      	strb	r2, [r3, #5]
	txBuffer[6] = Send_message.fim;
 800145e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001460:	b2da      	uxtb	r2, r3
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	719a      	strb	r2, [r3, #6]
	CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 8001466:	b2b3      	uxth	r3, r6
 8001468:	4619      	mov	r1, r3
 800146a:	69f8      	ldr	r0, [r7, #28]
 800146c:	f009 f94a 	bl	800a704 <CDC_Transmit_FS>
	break;
 8001470:	e1d4      	b.n	800181c <TransmitData+0x7ac>

	case error:
		if(errorFlag == errorChecksum)
 8001472:	4b74      	ldr	r3, [pc, #464]	; (8001644 <TransmitData+0x5d4>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b30      	cmp	r3, #48	; 0x30
 8001478:	d12b      	bne.n	80014d2 <TransmitData+0x462>
		{
			txBuffer[0] = Send_message.inicio;
 800147a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800147c:	b2da      	uxtb	r2, r3
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 8001482:	4b6f      	ldr	r3, [pc, #444]	; (8001640 <TransmitData+0x5d0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	b2da      	uxtb	r2, r3
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 800148c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800148e:	b2da      	uxtb	r2, r3
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (Send_message.funcao | 0xF0);
 8001494:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001496:	b25b      	sxtb	r3, r3
 8001498:	f063 030f 	orn	r3, r3, #15
 800149c:	b25b      	sxtb	r3, r3
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	2201      	movs	r2, #1
 80014a8:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x00; //codigo de erro
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	2200      	movs	r2, #0
 80014ae:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 80014b0:	69f8      	ldr	r0, [r7, #28]
 80014b2:	f000 fa23 	bl	80018fc <Checksum>
 80014b6:	4603      	mov	r3, r0
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 80014be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 80014c6:	b2b3      	uxth	r3, r6
 80014c8:	4619      	mov	r1, r3
 80014ca:	69f8      	ldr	r0, [r7, #28]
 80014cc:	f009 f91a 	bl	800a704 <CDC_Transmit_FS>
			txBuffer[5] = 0x09;
			txBuffer[6] = Checksum(txBuffer);
			txBuffer[7] = Send_message.fim;
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
		}
		break;
 80014d0:	e1a3      	b.n	800181a <TransmitData+0x7aa>
		else if (errorFlag == timeOut)
 80014d2:	4b5c      	ldr	r3, [pc, #368]	; (8001644 <TransmitData+0x5d4>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b31      	cmp	r3, #49	; 0x31
 80014d8:	d12b      	bne.n	8001532 <TransmitData+0x4c2>
			txBuffer[0] = Send_message.inicio;
 80014da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 80014e2:	4b57      	ldr	r3, [pc, #348]	; (8001640 <TransmitData+0x5d0>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 80014ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (Send_message.funcao | 0xF0);
 80014f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014f6:	b25b      	sxtb	r3, r3
 80014f8:	f063 030f 	orn	r3, r3, #15
 80014fc:	b25b      	sxtb	r3, r3
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	2201      	movs	r2, #1
 8001508:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x01;
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	2201      	movs	r2, #1
 800150e:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 8001510:	69f8      	ldr	r0, [r7, #28]
 8001512:	f000 f9f3 	bl	80018fc <Checksum>
 8001516:	4603      	mov	r3, r0
 8001518:	b2da      	uxtb	r2, r3
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 800151e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001520:	b2da      	uxtb	r2, r3
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 8001526:	b2b3      	uxth	r3, r6
 8001528:	4619      	mov	r1, r3
 800152a:	69f8      	ldr	r0, [r7, #28]
 800152c:	f009 f8ea 	bl	800a704 <CDC_Transmit_FS>
		break;
 8001530:	e173      	b.n	800181a <TransmitData+0x7aa>
		else if (errorFlag == noAddress)
 8001532:	4b44      	ldr	r3, [pc, #272]	; (8001644 <TransmitData+0x5d4>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b32      	cmp	r3, #50	; 0x32
 8001538:	d126      	bne.n	8001588 <TransmitData+0x518>
			txBuffer[0] = Send_message.inicio;
 800153a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800153c:	b2da      	uxtb	r2, r3
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 8001542:	4b3f      	ldr	r3, [pc, #252]	; (8001640 <TransmitData+0x5d0>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	b2da      	uxtb	r2, r3
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 800154c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800154e:	b2da      	uxtb	r2, r3
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (0x01 | 0xF0);
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	22f1      	movs	r2, #241	; 0xf1
 8001558:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	2201      	movs	r2, #1
 800155e:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x02;
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	2202      	movs	r2, #2
 8001564:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 8001566:	69f8      	ldr	r0, [r7, #28]
 8001568:	f000 f9c8 	bl	80018fc <Checksum>
 800156c:	4603      	mov	r3, r0
 800156e:	b2da      	uxtb	r2, r3
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 8001574:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001576:	b2da      	uxtb	r2, r3
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 800157c:	b2b3      	uxth	r3, r6
 800157e:	4619      	mov	r1, r3
 8001580:	69f8      	ldr	r0, [r7, #28]
 8001582:	f009 f8bf 	bl	800a704 <CDC_Transmit_FS>
		break;
 8001586:	e148      	b.n	800181a <TransmitData+0x7aa>
		else if (errorFlag == errorAddress)
 8001588:	4b2e      	ldr	r3, [pc, #184]	; (8001644 <TransmitData+0x5d4>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b33      	cmp	r3, #51	; 0x33
 800158e:	d125      	bne.n	80015dc <TransmitData+0x56c>
			txBuffer[0] = Send_message.inicio;
 8001590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001592:	b2da      	uxtb	r2, r3
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 8001598:	4b29      	ldr	r3, [pc, #164]	; (8001640 <TransmitData+0x5d0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	b2da      	uxtb	r2, r3
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 80015a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (0x01 | 0xF0);
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	22f1      	movs	r2, #241	; 0xf1
 80015ae:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	2201      	movs	r2, #1
 80015b4:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x03;
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	2203      	movs	r2, #3
 80015ba:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 80015bc:	69f8      	ldr	r0, [r7, #28]
 80015be:	f000 f99d 	bl	80018fc <Checksum>
 80015c2:	4603      	mov	r3, r0
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = 0x0F;
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	220f      	movs	r2, #15
 80015ce:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 80015d0:	b2b3      	uxth	r3, r6
 80015d2:	4619      	mov	r1, r3
 80015d4:	69f8      	ldr	r0, [r7, #28]
 80015d6:	f009 f895 	bl	800a704 <CDC_Transmit_FS>
		break;
 80015da:	e11e      	b.n	800181a <TransmitData+0x7aa>
		else if (errorFlag == errorDevice)
 80015dc:	4b19      	ldr	r3, [pc, #100]	; (8001644 <TransmitData+0x5d4>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b34      	cmp	r3, #52	; 0x34
 80015e2:	d131      	bne.n	8001648 <TransmitData+0x5d8>
			txBuffer[0] = Send_message.inicio;
 80015e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 80015ec:	4b14      	ldr	r3, [pc, #80]	; (8001640 <TransmitData+0x5d0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 80015f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (Send_message.funcao | 0xF0);
 80015fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001600:	b25b      	sxtb	r3, r3
 8001602:	f063 030f 	orn	r3, r3, #15
 8001606:	b25b      	sxtb	r3, r3
 8001608:	b2da      	uxtb	r2, r3
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	2201      	movs	r2, #1
 8001612:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x04;
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	2204      	movs	r2, #4
 8001618:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 800161a:	69f8      	ldr	r0, [r7, #28]
 800161c:	f000 f96e 	bl	80018fc <Checksum>
 8001620:	4603      	mov	r3, r0
 8001622:	b2da      	uxtb	r2, r3
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 8001628:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800162a:	b2da      	uxtb	r2, r3
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 8001630:	b2b3      	uxth	r3, r6
 8001632:	4619      	mov	r1, r3
 8001634:	69f8      	ldr	r0, [r7, #28]
 8001636:	f009 f865 	bl	800a704 <CDC_Transmit_FS>
		break;
 800163a:	e0ee      	b.n	800181a <TransmitData+0x7aa>
 800163c:	20000384 	.word	0x20000384
 8001640:	20000348 	.word	0x20000348
 8001644:	20000000 	.word	0x20000000
		else if (errorFlag == errorConfig)
 8001648:	4b79      	ldr	r3, [pc, #484]	; (8001830 <TransmitData+0x7c0>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b35      	cmp	r3, #53	; 0x35
 800164e:	d126      	bne.n	800169e <TransmitData+0x62e>
			txBuffer[0] = Send_message.inicio;
 8001650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001652:	b2da      	uxtb	r2, r3
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 8001658:	4b76      	ldr	r3, [pc, #472]	; (8001834 <TransmitData+0x7c4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	b2da      	uxtb	r2, r3
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 8001662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001664:	b2da      	uxtb	r2, r3
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (0x02 | 0xF0);
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	22f2      	movs	r2, #242	; 0xf2
 800166e:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	2201      	movs	r2, #1
 8001674:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x05;
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	2205      	movs	r2, #5
 800167a:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 800167c:	69f8      	ldr	r0, [r7, #28]
 800167e:	f000 f93d 	bl	80018fc <Checksum>
 8001682:	4603      	mov	r3, r0
 8001684:	b2da      	uxtb	r2, r3
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 800168a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800168c:	b2da      	uxtb	r2, r3
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 8001692:	b2b3      	uxth	r3, r6
 8001694:	4619      	mov	r1, r3
 8001696:	69f8      	ldr	r0, [r7, #28]
 8001698:	f009 f834 	bl	800a704 <CDC_Transmit_FS>
		break;
 800169c:	e0bd      	b.n	800181a <TransmitData+0x7aa>
		else if (errorFlag == errorFunction)
 800169e:	4b64      	ldr	r3, [pc, #400]	; (8001830 <TransmitData+0x7c0>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b36      	cmp	r3, #54	; 0x36
 80016a4:	d12b      	bne.n	80016fe <TransmitData+0x68e>
			txBuffer[0] = Send_message.inicio;
 80016a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 80016ae:	4b61      	ldr	r3, [pc, #388]	; (8001834 <TransmitData+0x7c4>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 80016b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (Send_message.funcao | 0xF0);
 80016c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016c2:	b25b      	sxtb	r3, r3
 80016c4:	f063 030f 	orn	r3, r3, #15
 80016c8:	b25b      	sxtb	r3, r3
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	2201      	movs	r2, #1
 80016d4:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x06;
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	2206      	movs	r2, #6
 80016da:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 80016dc:	69f8      	ldr	r0, [r7, #28]
 80016de:	f000 f90d 	bl	80018fc <Checksum>
 80016e2:	4603      	mov	r3, r0
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 80016ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 80016f2:	b2b3      	uxth	r3, r6
 80016f4:	4619      	mov	r1, r3
 80016f6:	69f8      	ldr	r0, [r7, #28]
 80016f8:	f009 f804 	bl	800a704 <CDC_Transmit_FS>
		break;
 80016fc:	e08d      	b.n	800181a <TransmitData+0x7aa>
		else if (errorFlag == errorData)
 80016fe:	4b4c      	ldr	r3, [pc, #304]	; (8001830 <TransmitData+0x7c0>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b37      	cmp	r3, #55	; 0x37
 8001704:	d12b      	bne.n	800175e <TransmitData+0x6ee>
			txBuffer[0] = Send_message.inicio;
 8001706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001708:	b2da      	uxtb	r2, r3
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 800170e:	4b49      	ldr	r3, [pc, #292]	; (8001834 <TransmitData+0x7c4>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	b2da      	uxtb	r2, r3
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 8001718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800171a:	b2da      	uxtb	r2, r3
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (Send_message.funcao | 0xF0);
 8001720:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001722:	b25b      	sxtb	r3, r3
 8001724:	f063 030f 	orn	r3, r3, #15
 8001728:	b25b      	sxtb	r3, r3
 800172a:	b2da      	uxtb	r2, r3
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	2201      	movs	r2, #1
 8001734:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x07;
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	2207      	movs	r2, #7
 800173a:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 800173c:	69f8      	ldr	r0, [r7, #28]
 800173e:	f000 f8dd 	bl	80018fc <Checksum>
 8001742:	4603      	mov	r3, r0
 8001744:	b2da      	uxtb	r2, r3
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 800174a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800174c:	b2da      	uxtb	r2, r3
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 8001752:	b2b3      	uxth	r3, r6
 8001754:	4619      	mov	r1, r3
 8001756:	69f8      	ldr	r0, [r7, #28]
 8001758:	f008 ffd4 	bl	800a704 <CDC_Transmit_FS>
		break;
 800175c:	e05d      	b.n	800181a <TransmitData+0x7aa>
		else if (errorFlag == errorStartHeader)
 800175e:	4b34      	ldr	r3, [pc, #208]	; (8001830 <TransmitData+0x7c0>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b38      	cmp	r3, #56	; 0x38
 8001764:	d12a      	bne.n	80017bc <TransmitData+0x74c>
			txBuffer[0] = 0x0A;
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	220a      	movs	r2, #10
 800176a:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 800176c:	4b31      	ldr	r3, [pc, #196]	; (8001834 <TransmitData+0x7c4>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	b2da      	uxtb	r2, r3
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 8001776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001778:	b2da      	uxtb	r2, r3
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (Send_message.funcao | 0xF0);
 800177e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001780:	b25b      	sxtb	r3, r3
 8001782:	f063 030f 	orn	r3, r3, #15
 8001786:	b25b      	sxtb	r3, r3
 8001788:	b2da      	uxtb	r2, r3
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	2201      	movs	r2, #1
 8001792:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x08;
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	2208      	movs	r2, #8
 8001798:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 800179a:	69f8      	ldr	r0, [r7, #28]
 800179c:	f000 f8ae 	bl	80018fc <Checksum>
 80017a0:	4603      	mov	r3, r0
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 80017a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 80017b0:	b2b3      	uxth	r3, r6
 80017b2:	4619      	mov	r1, r3
 80017b4:	69f8      	ldr	r0, [r7, #28]
 80017b6:	f008 ffa5 	bl	800a704 <CDC_Transmit_FS>
		break;
 80017ba:	e02e      	b.n	800181a <TransmitData+0x7aa>
		else if (errorFlag == errorEndHeader)
 80017bc:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <TransmitData+0x7c0>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b39      	cmp	r3, #57	; 0x39
 80017c2:	d12a      	bne.n	800181a <TransmitData+0x7aa>
			txBuffer[0] = Send_message.inicio;
 80017c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 80017cc:	4b19      	ldr	r3, [pc, #100]	; (8001834 <TransmitData+0x7c4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 80017d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (Send_message.funcao | 0xF0);
 80017de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017e0:	b25b      	sxtb	r3, r3
 80017e2:	f063 030f 	orn	r3, r3, #15
 80017e6:	b25b      	sxtb	r3, r3
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	2201      	movs	r2, #1
 80017f2:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x09;
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	2209      	movs	r2, #9
 80017f8:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 80017fa:	69f8      	ldr	r0, [r7, #28]
 80017fc:	f000 f87e 	bl	80018fc <Checksum>
 8001800:	4603      	mov	r3, r0
 8001802:	b2da      	uxtb	r2, r3
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 8001808:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800180a:	b2da      	uxtb	r2, r3
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 8001810:	b2b3      	uxth	r3, r6
 8001812:	4619      	mov	r1, r3
 8001814:	69f8      	ldr	r0, [r7, #28]
 8001816:	f008 ff75 	bl	800a704 <CDC_Transmit_FS>
		break;
 800181a:	bf00      	nop
 800181c:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
}
 8001820:	bf00      	nop
 8001822:	372c      	adds	r7, #44	; 0x2c
 8001824:	46bd      	mov	sp, r7
 8001826:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800182a:	b004      	add	sp, #16
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	20000000 	.word	0x20000000
 8001834:	20000348 	.word	0x20000348

08001838 <StopDevice>:

char StopDevice(char deviceFlag)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
static char stopEncoder;
char contador = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	73fb      	strb	r3, [r7, #15]
if(deviceFlag == 1)
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d110      	bne.n	800186e <StopDevice+0x36>
{
//	stopEncoder = HAL_TIM_Encoder_Stop_IT(&htim2, TIM_CHANNEL_1);
	stopEncoder = HAL_TIM_Encoder_Stop_IT(&htim2, TIM_CHANNEL_ALL);
 800184c:	213c      	movs	r1, #60	; 0x3c
 800184e:	4821      	ldr	r0, [pc, #132]	; (80018d4 <StopDevice+0x9c>)
 8001850:	f003 fcb0 	bl	80051b4 <HAL_TIM_Encoder_Stop_IT>
 8001854:	4603      	mov	r3, r0
 8001856:	461a      	mov	r2, r3
 8001858:	4b1f      	ldr	r3, [pc, #124]	; (80018d8 <StopDevice+0xa0>)
 800185a:	701a      	strb	r2, [r3, #0]
	timerEnable = HAL_TIM_Base_Stop_IT(&htim3);
 800185c:	481f      	ldr	r0, [pc, #124]	; (80018dc <StopDevice+0xa4>)
 800185e:	f003 fb2b 	bl	8004eb8 <HAL_TIM_Base_Stop_IT>
 8001862:	4603      	mov	r3, r0
 8001864:	461a      	mov	r2, r3
 8001866:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <StopDevice+0xa8>)
 8001868:	601a      	str	r2, [r3, #0]
	deviceFlag = 0;
 800186a:	2300      	movs	r3, #0
 800186c:	71fb      	strb	r3, [r7, #7]
}


HAL_Delay(10);
 800186e:	200a      	movs	r0, #10
 8001870:	f000 fb18 	bl	8001ea4 <HAL_Delay>
if(stopEncoder == HAL_OK && timerEnable == HAL_OK)
 8001874:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <StopDevice+0xa0>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d126      	bne.n	80018ca <StopDevice+0x92>
 800187c:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <StopDevice+0xa8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d122      	bne.n	80018ca <StopDevice+0x92>
{
	for(contador=0;contador<10;contador++)
 8001884:	2300      	movs	r3, #0
 8001886:	73fb      	strb	r3, [r7, #15]
 8001888:	e014      	b.n	80018b4 <StopDevice+0x7c>
	{
		bufferPulso[contador] = 0;
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	4a15      	ldr	r2, [pc, #84]	; (80018e4 <StopDevice+0xac>)
 800188e:	2100      	movs	r1, #0
 8001890:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		currentPulse[contador] = 0;
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	4a14      	ldr	r2, [pc, #80]	; (80018e8 <StopDevice+0xb0>)
 8001898:	2100      	movs	r1, #0
 800189a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		currentTime[contador] = 0;
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	4a12      	ldr	r2, [pc, #72]	; (80018ec <StopDevice+0xb4>)
 80018a2:	2100      	movs	r1, #0
 80018a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		USB_FLAG = 0;
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <StopDevice+0xb8>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]
	for(contador=0;contador<10;contador++)
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
 80018b0:	3301      	adds	r3, #1
 80018b2:	73fb      	strb	r3, [r7, #15]
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	2b09      	cmp	r3, #9
 80018b8:	d9e7      	bls.n	800188a <StopDevice+0x52>
	}
	pulseBuffer = 0;
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <StopDevice+0xbc>)
 80018bc:	2200      	movs	r2, #0
 80018be:	801a      	strh	r2, [r3, #0]
	samples = 0;
 80018c0:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <StopDevice+0xc0>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
	return 0;
 80018c6:	2300      	movs	r3, #0
 80018c8:	e000      	b.n	80018cc <StopDevice+0x94>
}
else return 1;
 80018ca:	2301      	movs	r3, #1
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	2000019c 	.word	0x2000019c
 80018d8:	200003c7 	.word	0x200003c7
 80018dc:	200001e4 	.word	0x200001e4
 80018e0:	2000035c 	.word	0x2000035c
 80018e4:	200002d4 	.word	0x200002d4
 80018e8:	200002fc 	.word	0x200002fc
 80018ec:	20000360 	.word	0x20000360
 80018f0:	20000326 	.word	0x20000326
 80018f4:	20000324 	.word	0x20000324
 80018f8:	20000376 	.word	0x20000376

080018fc <Checksum>:


int Checksum(char *c)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
//if(c[0] == 0x0A)//Verifica Byte Inicio
//{
	if(c[4] == 0)Total=7;//Define tamanho do pacote
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3304      	adds	r3, #4
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d102      	bne.n	8001914 <Checksum+0x18>
 800190e:	4b54      	ldr	r3, [pc, #336]	; (8001a60 <Checksum+0x164>)
 8001910:	2207      	movs	r2, #7
 8001912:	701a      	strb	r2, [r3, #0]
	if(c[4] == 1)Total=8;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3304      	adds	r3, #4
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d102      	bne.n	8001924 <Checksum+0x28>
 800191e:	4b50      	ldr	r3, [pc, #320]	; (8001a60 <Checksum+0x164>)
 8001920:	2208      	movs	r2, #8
 8001922:	701a      	strb	r2, [r3, #0]
	if(c[4] == 2)Total=9;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3304      	adds	r3, #4
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d102      	bne.n	8001934 <Checksum+0x38>
 800192e:	4b4c      	ldr	r3, [pc, #304]	; (8001a60 <Checksum+0x164>)
 8001930:	2209      	movs	r2, #9
 8001932:	701a      	strb	r2, [r3, #0]
	if(c[4] == 4)Total=11;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3304      	adds	r3, #4
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b04      	cmp	r3, #4
 800193c:	d102      	bne.n	8001944 <Checksum+0x48>
 800193e:	4b48      	ldr	r3, [pc, #288]	; (8001a60 <Checksum+0x164>)
 8001940:	220b      	movs	r2, #11
 8001942:	701a      	strb	r2, [r3, #0]
	if(c[4] == 5) Total = 12;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3304      	adds	r3, #4
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b05      	cmp	r3, #5
 800194c:	d102      	bne.n	8001954 <Checksum+0x58>
 800194e:	4b44      	ldr	r3, [pc, #272]	; (8001a60 <Checksum+0x164>)
 8001950:	220c      	movs	r2, #12
 8001952:	701a      	strb	r2, [r3, #0]
	if(c[4] == 6) Total = 13;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3304      	adds	r3, #4
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b06      	cmp	r3, #6
 800195c:	d102      	bne.n	8001964 <Checksum+0x68>
 800195e:	4b40      	ldr	r3, [pc, #256]	; (8001a60 <Checksum+0x164>)
 8001960:	220d      	movs	r2, #13
 8001962:	701a      	strb	r2, [r3, #0]
	if(c[4] == 7) Total = 14;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3304      	adds	r3, #4
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b07      	cmp	r3, #7
 800196c:	d102      	bne.n	8001974 <Checksum+0x78>
 800196e:	4b3c      	ldr	r3, [pc, #240]	; (8001a60 <Checksum+0x164>)
 8001970:	220e      	movs	r2, #14
 8001972:	701a      	strb	r2, [r3, #0]
	if(c[4] == 8) Total = 15;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3304      	adds	r3, #4
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b08      	cmp	r3, #8
 800197c:	d102      	bne.n	8001984 <Checksum+0x88>
 800197e:	4b38      	ldr	r3, [pc, #224]	; (8001a60 <Checksum+0x164>)
 8001980:	220f      	movs	r2, #15
 8001982:	701a      	strb	r2, [r3, #0]
	if(c[4] == 9) Total = 16;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3304      	adds	r3, #4
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b09      	cmp	r3, #9
 800198c:	d102      	bne.n	8001994 <Checksum+0x98>
 800198e:	4b34      	ldr	r3, [pc, #208]	; (8001a60 <Checksum+0x164>)
 8001990:	2210      	movs	r2, #16
 8001992:	701a      	strb	r2, [r3, #0]
	if(c[4] == 10) Total = 17;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3304      	adds	r3, #4
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b0a      	cmp	r3, #10
 800199c:	d102      	bne.n	80019a4 <Checksum+0xa8>
 800199e:	4b30      	ldr	r3, [pc, #192]	; (8001a60 <Checksum+0x164>)
 80019a0:	2211      	movs	r2, #17
 80019a2:	701a      	strb	r2, [r3, #0]
	if(c[4] == 12) Total = 19;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3304      	adds	r3, #4
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b0c      	cmp	r3, #12
 80019ac:	d102      	bne.n	80019b4 <Checksum+0xb8>
 80019ae:	4b2c      	ldr	r3, [pc, #176]	; (8001a60 <Checksum+0x164>)
 80019b0:	2213      	movs	r2, #19
 80019b2:	701a      	strb	r2, [r3, #0]
	if(c[4] == 14) Total = 21;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3304      	adds	r3, #4
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b0e      	cmp	r3, #14
 80019bc:	d102      	bne.n	80019c4 <Checksum+0xc8>
 80019be:	4b28      	ldr	r3, [pc, #160]	; (8001a60 <Checksum+0x164>)
 80019c0:	2215      	movs	r2, #21
 80019c2:	701a      	strb	r2, [r3, #0]
	if(c[4] == 23 ) Total = 29;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3304      	adds	r3, #4
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b17      	cmp	r3, #23
 80019cc:	d102      	bne.n	80019d4 <Checksum+0xd8>
 80019ce:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <Checksum+0x164>)
 80019d0:	221d      	movs	r2, #29
 80019d2:	701a      	strb	r2, [r3, #0]
	if(c[4] == 32 ) Total = 38;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3304      	adds	r3, #4
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b20      	cmp	r3, #32
 80019dc:	d102      	bne.n	80019e4 <Checksum+0xe8>
 80019de:	4b20      	ldr	r3, [pc, #128]	; (8001a60 <Checksum+0x164>)
 80019e0:	2226      	movs	r2, #38	; 0x26
 80019e2:	701a      	strb	r2, [r3, #0]
	if(c[4] == 40 ) Total = 47;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3304      	adds	r3, #4
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b28      	cmp	r3, #40	; 0x28
 80019ec:	d102      	bne.n	80019f4 <Checksum+0xf8>
 80019ee:	4b1c      	ldr	r3, [pc, #112]	; (8001a60 <Checksum+0x164>)
 80019f0:	222f      	movs	r2, #47	; 0x2f
 80019f2:	701a      	strb	r2, [r3, #0]
	if(c[4] == 60 ) Total = 67;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3304      	adds	r3, #4
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b3c      	cmp	r3, #60	; 0x3c
 80019fc:	d102      	bne.n	8001a04 <Checksum+0x108>
 80019fe:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <Checksum+0x164>)
 8001a00:	2243      	movs	r2, #67	; 0x43
 8001a02:	701a      	strb	r2, [r3, #0]

	c_sum=0;
 8001a04:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <Checksum+0x168>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	801a      	strh	r2, [r3, #0]
	for(int i=1; i<(Total-2);i++)//Soma os bytes
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	e00d      	b.n	8001a2c <Checksum+0x130>
	{
		c_sum += c[i];
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <Checksum+0x168>)
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	4413      	add	r3, r2
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <Checksum+0x168>)
 8001a24:	801a      	strh	r2, [r3, #0]
	for(int i=1; i<(Total-2);i++)//Soma os bytes
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <Checksum+0x164>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	3b02      	subs	r3, #2
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	dbeb      	blt.n	8001a10 <Checksum+0x114>
	}

	checksum = 0xFF-c_sum;//Faz os calculos seguintes
 8001a38:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <Checksum+0x168>)
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <Checksum+0x16c>)
 8001a44:	701a      	strb	r2, [r3, #0]
	checksum += 0x01;
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <Checksum+0x16c>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <Checksum+0x16c>)
 8001a50:	701a      	strb	r2, [r3, #0]
//}
return checksum;
 8001a52:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <Checksum+0x16c>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr
 8001a60:	20000359 	.word	0x20000359
 8001a64:	20000356 	.word	0x20000356
 8001a68:	20000358 	.word	0x20000358

08001a6c <HAL_TIM_IC_CaptureCallback>:



//Interrupções
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a7c:	d10a      	bne.n	8001a94 <HAL_TIM_IC_CaptureCallback+0x28>
	{
		aux_count = __HAL_TIM_GET_COUNTER(&htim2);
 8001a7e:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <HAL_TIM_IC_CaptureCallback+0x34>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	b21a      	sxth	r2, r3
 8001a86:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <HAL_TIM_IC_CaptureCallback+0x38>)
 8001a88:	801a      	strh	r2, [r3, #0]
//		count = aux_count>>1;
		count = aux_count;
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <HAL_TIM_IC_CaptureCallback+0x38>)
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	b21a      	sxth	r2, r3
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8001a92:	801a      	strh	r2, [r3, #0]
	}


}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	2000019c 	.word	0x2000019c
 8001aa4:	2000037a 	.word	0x2000037a
 8001aa8:	20000378 	.word	0x20000378

08001aac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
if(EndReception == '\0')
 8001ab4:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <HAL_UART_RxCpltCallback+0x2c>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d109      	bne.n	8001ad0 <HAL_UART_RxCpltCallback+0x24>
{
	command(RXBuffer[0]);
 8001abc:	4b07      	ldr	r3, [pc, #28]	; (8001adc <HAL_UART_RxCpltCallback+0x30>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff f931 	bl	8000d28 <command>
	HAL_UART_Receive_IT(&huart2, (uint8_t *)RXBuffer, 1);
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	4904      	ldr	r1, [pc, #16]	; (8001adc <HAL_UART_RxCpltCallback+0x30>)
 8001aca:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <HAL_UART_RxCpltCallback+0x34>)
 8001acc:	f003 fff1 	bl	8005ab2 <HAL_UART_Receive_IT>
}

}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	200002b6 	.word	0x200002b6
 8001adc:	200002b8 	.word	0x200002b8
 8001ae0:	2000022c 	.word	0x2000022c

08001ae4 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	80fb      	strh	r3, [r7, #6]
if(GPIO_Pin == RESET_Pin)
 8001aee:	88fb      	ldrh	r3, [r7, #6]
 8001af0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001af4:	d105      	bne.n	8001b02 <HAL_GPIO_EXTI_Callback+0x1e>
{
	StateMachine = iddle;
 8001af6:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <HAL_GPIO_EXTI_Callback+0x28>)
 8001af8:	2249      	movs	r2, #73	; 0x49
 8001afa:	701a      	strb	r2, [r3, #0]
	EndReception = Reset;
 8001afc:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001afe:	2252      	movs	r2, #82	; 0x52
 8001b00:	701a      	strb	r2, [r3, #0]
}
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	2000035a 	.word	0x2000035a
 8001b10:	200002b6 	.word	0x200002b6

08001b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b18:	b672      	cpsid	i
}
 8001b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1)
 8001b1c:	e7fe      	b.n	8001b1c <Error_Handler+0x8>
	...

08001b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <HAL_MspInit+0x5c>)
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	4a14      	ldr	r2, [pc, #80]	; (8001b7c <HAL_MspInit+0x5c>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	6193      	str	r3, [r2, #24]
 8001b32:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <HAL_MspInit+0x5c>)
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <HAL_MspInit+0x5c>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	4a0e      	ldr	r2, [pc, #56]	; (8001b7c <HAL_MspInit+0x5c>)
 8001b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b48:	61d3      	str	r3, [r2, #28]
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <HAL_MspInit+0x5c>)
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <HAL_MspInit+0x60>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	4a04      	ldr	r2, [pc, #16]	; (8001b80 <HAL_MspInit+0x60>)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b72:	bf00      	nop
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40010000 	.word	0x40010000

08001b84 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 0310 	add.w	r3, r7, #16
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ba2:	d12b      	bne.n	8001bfc <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ba4:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <HAL_TIM_Encoder_MspInit+0x80>)
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	4a16      	ldr	r2, [pc, #88]	; (8001c04 <HAL_TIM_Encoder_MspInit+0x80>)
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	61d3      	str	r3, [r2, #28]
 8001bb0:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <HAL_TIM_Encoder_MspInit+0x80>)
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <HAL_TIM_Encoder_MspInit+0x80>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	4a10      	ldr	r2, [pc, #64]	; (8001c04 <HAL_TIM_Encoder_MspInit+0x80>)
 8001bc2:	f043 0304 	orr.w	r3, r3, #4
 8001bc6:	6193      	str	r3, [r2, #24]
 8001bc8:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <HAL_TIM_Encoder_MspInit+0x80>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be0:	f107 0310 	add.w	r3, r7, #16
 8001be4:	4619      	mov	r1, r3
 8001be6:	4808      	ldr	r0, [pc, #32]	; (8001c08 <HAL_TIM_Encoder_MspInit+0x84>)
 8001be8:	f000 fd6a 	bl	80026c0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bec:	2200      	movs	r2, #0
 8001bee:	2100      	movs	r1, #0
 8001bf0:	201c      	movs	r0, #28
 8001bf2:	f000 fa52 	bl	800209a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bf6:	201c      	movs	r0, #28
 8001bf8:	f000 fa6b 	bl	80020d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001bfc:	bf00      	nop
 8001bfe:	3720      	adds	r7, #32
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40010800 	.word	0x40010800

08001c0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a09      	ldr	r2, [pc, #36]	; (8001c40 <HAL_TIM_Base_MspInit+0x34>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d10b      	bne.n	8001c36 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <HAL_TIM_Base_MspInit+0x38>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	4a08      	ldr	r2, [pc, #32]	; (8001c44 <HAL_TIM_Base_MspInit+0x38>)
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	61d3      	str	r3, [r2, #28]
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_TIM_Base_MspInit+0x38>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c36:	bf00      	nop
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr
 8001c40:	40000400 	.word	0x40000400
 8001c44:	40021000 	.word	0x40021000

08001c48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 0310 	add.w	r3, r7, #16
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a1f      	ldr	r2, [pc, #124]	; (8001ce0 <HAL_UART_MspInit+0x98>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d137      	bne.n	8001cd8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c68:	4b1e      	ldr	r3, [pc, #120]	; (8001ce4 <HAL_UART_MspInit+0x9c>)
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	4a1d      	ldr	r2, [pc, #116]	; (8001ce4 <HAL_UART_MspInit+0x9c>)
 8001c6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c72:	61d3      	str	r3, [r2, #28]
 8001c74:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <HAL_UART_MspInit+0x9c>)
 8001c76:	69db      	ldr	r3, [r3, #28]
 8001c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c80:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <HAL_UART_MspInit+0x9c>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	4a17      	ldr	r2, [pc, #92]	; (8001ce4 <HAL_UART_MspInit+0x9c>)
 8001c86:	f043 0304 	orr.w	r3, r3, #4
 8001c8a:	6193      	str	r3, [r2, #24]
 8001c8c:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <HAL_UART_MspInit+0x9c>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c98:	2304      	movs	r3, #4
 8001c9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca4:	f107 0310 	add.w	r3, r7, #16
 8001ca8:	4619      	mov	r1, r3
 8001caa:	480f      	ldr	r0, [pc, #60]	; (8001ce8 <HAL_UART_MspInit+0xa0>)
 8001cac:	f000 fd08 	bl	80026c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001cb0:	2308      	movs	r3, #8
 8001cb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbc:	f107 0310 	add.w	r3, r7, #16
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4809      	ldr	r0, [pc, #36]	; (8001ce8 <HAL_UART_MspInit+0xa0>)
 8001cc4:	f000 fcfc 	bl	80026c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2101      	movs	r1, #1
 8001ccc:	2026      	movs	r0, #38	; 0x26
 8001cce:	f000 f9e4 	bl	800209a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cd2:	2026      	movs	r0, #38	; 0x26
 8001cd4:	f000 f9fd 	bl	80020d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cd8:	bf00      	nop
 8001cda:	3720      	adds	r7, #32
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40004400 	.word	0x40004400
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40010800 	.word	0x40010800

08001cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cf0:	e7fe      	b.n	8001cf0 <NMI_Handler+0x4>

08001cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cf6:	e7fe      	b.n	8001cf6 <HardFault_Handler+0x4>

08001cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cfc:	e7fe      	b.n	8001cfc <MemManage_Handler+0x4>

08001cfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d02:	e7fe      	b.n	8001d02 <BusFault_Handler+0x4>

08001d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d08:	e7fe      	b.n	8001d08 <UsageFault_Handler+0x4>

08001d0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr

08001d16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr

08001d22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr

08001d2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d32:	f000 f89b 	bl	8001e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001d40:	4802      	ldr	r0, [pc, #8]	; (8001d4c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001d42:	f000 ffbc 	bl	8002cbe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20001088 	.word	0x20001088

08001d50 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RESET_Pin);
 8001d54:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d58:	f000 fe68 	bl	8002a2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d64:	4802      	ldr	r0, [pc, #8]	; (8001d70 <TIM2_IRQHandler+0x10>)
 8001d66:	f003 fada 	bl	800531e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	2000019c 	.word	0x2000019c

08001d74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d78:	4802      	ldr	r0, [pc, #8]	; (8001d84 <USART2_IRQHandler+0x10>)
 8001d7a:	f003 fecb 	bl	8005b14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	2000022c 	.word	0x2000022c

08001d88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d94:	480c      	ldr	r0, [pc, #48]	; (8001dc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d96:	490d      	ldr	r1, [pc, #52]	; (8001dcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d98:	4a0d      	ldr	r2, [pc, #52]	; (8001dd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d9c:	e002      	b.n	8001da4 <LoopCopyDataInit>

08001d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001da2:	3304      	adds	r3, #4

08001da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da8:	d3f9      	bcc.n	8001d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001daa:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dac:	4c0a      	ldr	r4, [pc, #40]	; (8001dd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db0:	e001      	b.n	8001db6 <LoopFillZerobss>

08001db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db4:	3204      	adds	r2, #4

08001db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db8:	d3fb      	bcc.n	8001db2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001dba:	f7ff ffe5 	bl	8001d88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dbe:	f009 f87f 	bl	800aec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dc2:	f7fe fad9 	bl	8000378 <main>
  bx lr
 8001dc6:	4770      	bx	lr
  ldr r0, =_sdata
 8001dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dcc:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8001dd0:	0800afc4 	.word	0x0800afc4
  ldr r2, =_sbss
 8001dd4:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8001dd8:	20001594 	.word	0x20001594

08001ddc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ddc:	e7fe      	b.n	8001ddc <ADC1_2_IRQHandler>
	...

08001de0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de4:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <HAL_Init+0x28>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a07      	ldr	r2, [pc, #28]	; (8001e08 <HAL_Init+0x28>)
 8001dea:	f043 0310 	orr.w	r3, r3, #16
 8001dee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df0:	2003      	movs	r0, #3
 8001df2:	f000 f947 	bl	8002084 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001df6:	2000      	movs	r0, #0
 8001df8:	f000 f808 	bl	8001e0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dfc:	f7ff fe90 	bl	8001b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40022000 	.word	0x40022000

08001e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e14:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <HAL_InitTick+0x54>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <HAL_InitTick+0x58>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 f95f 	bl	80020ee <HAL_SYSTICK_Config>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e00e      	b.n	8001e58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2b0f      	cmp	r3, #15
 8001e3e:	d80a      	bhi.n	8001e56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e40:	2200      	movs	r2, #0
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	f04f 30ff 	mov.w	r0, #4294967295
 8001e48:	f000 f927 	bl	800209a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e4c:	4a06      	ldr	r2, [pc, #24]	; (8001e68 <HAL_InitTick+0x5c>)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	e000      	b.n	8001e58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20000004 	.word	0x20000004
 8001e64:	2000000c 	.word	0x2000000c
 8001e68:	20000008 	.word	0x20000008

08001e6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <HAL_IncTick+0x1c>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <HAL_IncTick+0x20>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	4a03      	ldr	r2, [pc, #12]	; (8001e8c <HAL_IncTick+0x20>)
 8001e7e:	6013      	str	r3, [r2, #0]
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr
 8001e88:	2000000c 	.word	0x2000000c
 8001e8c:	200003c8 	.word	0x200003c8

08001e90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return uwTick;
 8001e94:	4b02      	ldr	r3, [pc, #8]	; (8001ea0 <HAL_GetTick+0x10>)
 8001e96:	681b      	ldr	r3, [r3, #0]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr
 8001ea0:	200003c8 	.word	0x200003c8

08001ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eac:	f7ff fff0 	bl	8001e90 <HAL_GetTick>
 8001eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ebc:	d005      	beq.n	8001eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <HAL_Delay+0x44>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eca:	bf00      	nop
 8001ecc:	f7ff ffe0 	bl	8001e90 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d8f7      	bhi.n	8001ecc <HAL_Delay+0x28>
  {
  }
}
 8001edc:	bf00      	nop
 8001ede:	bf00      	nop
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	2000000c 	.word	0x2000000c

08001eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f1e:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	60d3      	str	r3, [r2, #12]
}
 8001f24:	bf00      	nop
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <__NVIC_GetPriorityGrouping+0x18>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	0a1b      	lsrs	r3, r3, #8
 8001f3e:	f003 0307 	and.w	r3, r3, #7
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	db0b      	blt.n	8001f7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	f003 021f 	and.w	r2, r3, #31
 8001f68:	4906      	ldr	r1, [pc, #24]	; (8001f84 <__NVIC_EnableIRQ+0x34>)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	095b      	lsrs	r3, r3, #5
 8001f70:	2001      	movs	r0, #1
 8001f72:	fa00 f202 	lsl.w	r2, r0, r2
 8001f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr
 8001f84:	e000e100 	.word	0xe000e100

08001f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	6039      	str	r1, [r7, #0]
 8001f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	db0a      	blt.n	8001fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	490c      	ldr	r1, [pc, #48]	; (8001fd4 <__NVIC_SetPriority+0x4c>)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	0112      	lsls	r2, r2, #4
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	440b      	add	r3, r1
 8001fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fb0:	e00a      	b.n	8001fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	4908      	ldr	r1, [pc, #32]	; (8001fd8 <__NVIC_SetPriority+0x50>)
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	3b04      	subs	r3, #4
 8001fc0:	0112      	lsls	r2, r2, #4
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	761a      	strb	r2, [r3, #24]
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	e000e100 	.word	0xe000e100
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b089      	sub	sp, #36	; 0x24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f1c3 0307 	rsb	r3, r3, #7
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	bf28      	it	cs
 8001ffa:	2304      	movcs	r3, #4
 8001ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	3304      	adds	r3, #4
 8002002:	2b06      	cmp	r3, #6
 8002004:	d902      	bls.n	800200c <NVIC_EncodePriority+0x30>
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	3b03      	subs	r3, #3
 800200a:	e000      	b.n	800200e <NVIC_EncodePriority+0x32>
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002010:	f04f 32ff 	mov.w	r2, #4294967295
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	43da      	mvns	r2, r3
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	401a      	ands	r2, r3
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002024:	f04f 31ff 	mov.w	r1, #4294967295
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	fa01 f303 	lsl.w	r3, r1, r3
 800202e:	43d9      	mvns	r1, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002034:	4313      	orrs	r3, r2
         );
}
 8002036:	4618      	mov	r0, r3
 8002038:	3724      	adds	r7, #36	; 0x24
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr

08002040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3b01      	subs	r3, #1
 800204c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002050:	d301      	bcc.n	8002056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002052:	2301      	movs	r3, #1
 8002054:	e00f      	b.n	8002076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002056:	4a0a      	ldr	r2, [pc, #40]	; (8002080 <SysTick_Config+0x40>)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3b01      	subs	r3, #1
 800205c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800205e:	210f      	movs	r1, #15
 8002060:	f04f 30ff 	mov.w	r0, #4294967295
 8002064:	f7ff ff90 	bl	8001f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <SysTick_Config+0x40>)
 800206a:	2200      	movs	r2, #0
 800206c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800206e:	4b04      	ldr	r3, [pc, #16]	; (8002080 <SysTick_Config+0x40>)
 8002070:	2207      	movs	r2, #7
 8002072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	e000e010 	.word	0xe000e010

08002084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff ff2d 	bl	8001eec <__NVIC_SetPriorityGrouping>
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800209a:	b580      	push	{r7, lr}
 800209c:	b086      	sub	sp, #24
 800209e:	af00      	add	r7, sp, #0
 80020a0:	4603      	mov	r3, r0
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	607a      	str	r2, [r7, #4]
 80020a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020ac:	f7ff ff42 	bl	8001f34 <__NVIC_GetPriorityGrouping>
 80020b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	68b9      	ldr	r1, [r7, #8]
 80020b6:	6978      	ldr	r0, [r7, #20]
 80020b8:	f7ff ff90 	bl	8001fdc <NVIC_EncodePriority>
 80020bc:	4602      	mov	r2, r0
 80020be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c2:	4611      	mov	r1, r2
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ff5f 	bl	8001f88 <__NVIC_SetPriority>
}
 80020ca:	bf00      	nop
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	4603      	mov	r3, r0
 80020da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff35 	bl	8001f50 <__NVIC_EnableIRQ>
}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7ff ffa2 	bl	8002040 <SysTick_Config>
 80020fc:	4603      	mov	r3, r0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002106:	b480      	push	{r7}
 8002108:	b085      	sub	sp, #20
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800210e:	2300      	movs	r3, #0
 8002110:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002118:	2b02      	cmp	r3, #2
 800211a:	d008      	beq.n	800212e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2204      	movs	r2, #4
 8002120:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e020      	b.n	8002170 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 020e 	bic.w	r2, r2, #14
 800213c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0201 	bic.w	r2, r2, #1
 800214c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002156:	2101      	movs	r1, #1
 8002158:	fa01 f202 	lsl.w	r2, r1, r2
 800215c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800216e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr
	...

0800217c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002184:	2300      	movs	r3, #0
 8002186:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800218e:	2b02      	cmp	r3, #2
 8002190:	d005      	beq.n	800219e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2204      	movs	r2, #4
 8002196:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	73fb      	strb	r3, [r7, #15]
 800219c:	e051      	b.n	8002242 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 020e 	bic.w	r2, r2, #14
 80021ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 0201 	bic.w	r2, r2, #1
 80021bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a22      	ldr	r2, [pc, #136]	; (800224c <HAL_DMA_Abort_IT+0xd0>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d029      	beq.n	800221c <HAL_DMA_Abort_IT+0xa0>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a20      	ldr	r2, [pc, #128]	; (8002250 <HAL_DMA_Abort_IT+0xd4>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d022      	beq.n	8002218 <HAL_DMA_Abort_IT+0x9c>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a1f      	ldr	r2, [pc, #124]	; (8002254 <HAL_DMA_Abort_IT+0xd8>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d01a      	beq.n	8002212 <HAL_DMA_Abort_IT+0x96>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a1d      	ldr	r2, [pc, #116]	; (8002258 <HAL_DMA_Abort_IT+0xdc>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d012      	beq.n	800220c <HAL_DMA_Abort_IT+0x90>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a1c      	ldr	r2, [pc, #112]	; (800225c <HAL_DMA_Abort_IT+0xe0>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d00a      	beq.n	8002206 <HAL_DMA_Abort_IT+0x8a>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a1a      	ldr	r2, [pc, #104]	; (8002260 <HAL_DMA_Abort_IT+0xe4>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d102      	bne.n	8002200 <HAL_DMA_Abort_IT+0x84>
 80021fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80021fe:	e00e      	b.n	800221e <HAL_DMA_Abort_IT+0xa2>
 8002200:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002204:	e00b      	b.n	800221e <HAL_DMA_Abort_IT+0xa2>
 8002206:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800220a:	e008      	b.n	800221e <HAL_DMA_Abort_IT+0xa2>
 800220c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002210:	e005      	b.n	800221e <HAL_DMA_Abort_IT+0xa2>
 8002212:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002216:	e002      	b.n	800221e <HAL_DMA_Abort_IT+0xa2>
 8002218:	2310      	movs	r3, #16
 800221a:	e000      	b.n	800221e <HAL_DMA_Abort_IT+0xa2>
 800221c:	2301      	movs	r3, #1
 800221e:	4a11      	ldr	r2, [pc, #68]	; (8002264 <HAL_DMA_Abort_IT+0xe8>)
 8002220:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	4798      	blx	r3
    } 
  }
  return status;
 8002242:	7bfb      	ldrb	r3, [r7, #15]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40020008 	.word	0x40020008
 8002250:	4002001c 	.word	0x4002001c
 8002254:	40020030 	.word	0x40020030
 8002258:	40020044 	.word	0x40020044
 800225c:	40020058 	.word	0x40020058
 8002260:	4002006c 	.word	0x4002006c
 8002264:	40020000 	.word	0x40020000

08002268 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800226a:	b087      	sub	sp, #28
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800227a:	2300      	movs	r3, #0
 800227c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800227e:	2300      	movs	r3, #0
 8002280:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002282:	4b2f      	ldr	r3, [pc, #188]	; (8002340 <HAL_FLASH_Program+0xd8>)
 8002284:	7e1b      	ldrb	r3, [r3, #24]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d101      	bne.n	800228e <HAL_FLASH_Program+0x26>
 800228a:	2302      	movs	r3, #2
 800228c:	e054      	b.n	8002338 <HAL_FLASH_Program+0xd0>
 800228e:	4b2c      	ldr	r3, [pc, #176]	; (8002340 <HAL_FLASH_Program+0xd8>)
 8002290:	2201      	movs	r2, #1
 8002292:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002294:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002298:	f000 f8d4 	bl	8002444 <FLASH_WaitForLastOperation>
 800229c:	4603      	mov	r3, r0
 800229e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80022a0:	7dfb      	ldrb	r3, [r7, #23]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d144      	bne.n	8002330 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d102      	bne.n	80022b2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80022ac:	2301      	movs	r3, #1
 80022ae:	757b      	strb	r3, [r7, #21]
 80022b0:	e007      	b.n	80022c2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d102      	bne.n	80022be <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80022b8:	2302      	movs	r3, #2
 80022ba:	757b      	strb	r3, [r7, #21]
 80022bc:	e001      	b.n	80022c2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80022be:	2304      	movs	r3, #4
 80022c0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80022c2:	2300      	movs	r3, #0
 80022c4:	75bb      	strb	r3, [r7, #22]
 80022c6:	e02d      	b.n	8002324 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80022c8:	7dbb      	ldrb	r3, [r7, #22]
 80022ca:	005a      	lsls	r2, r3, #1
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	eb02 0c03 	add.w	ip, r2, r3
 80022d2:	7dbb      	ldrb	r3, [r7, #22]
 80022d4:	0119      	lsls	r1, r3, #4
 80022d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022da:	f1c1 0620 	rsb	r6, r1, #32
 80022de:	f1a1 0020 	sub.w	r0, r1, #32
 80022e2:	fa22 f401 	lsr.w	r4, r2, r1
 80022e6:	fa03 f606 	lsl.w	r6, r3, r6
 80022ea:	4334      	orrs	r4, r6
 80022ec:	fa23 f000 	lsr.w	r0, r3, r0
 80022f0:	4304      	orrs	r4, r0
 80022f2:	fa23 f501 	lsr.w	r5, r3, r1
 80022f6:	b2a3      	uxth	r3, r4
 80022f8:	4619      	mov	r1, r3
 80022fa:	4660      	mov	r0, ip
 80022fc:	f000 f886 	bl	800240c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002300:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002304:	f000 f89e 	bl	8002444 <FLASH_WaitForLastOperation>
 8002308:	4603      	mov	r3, r0
 800230a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800230c:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <HAL_FLASH_Program+0xdc>)
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	4a0c      	ldr	r2, [pc, #48]	; (8002344 <HAL_FLASH_Program+0xdc>)
 8002312:	f023 0301 	bic.w	r3, r3, #1
 8002316:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002318:	7dfb      	ldrb	r3, [r7, #23]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d107      	bne.n	800232e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800231e:	7dbb      	ldrb	r3, [r7, #22]
 8002320:	3301      	adds	r3, #1
 8002322:	75bb      	strb	r3, [r7, #22]
 8002324:	7dba      	ldrb	r2, [r7, #22]
 8002326:	7d7b      	ldrb	r3, [r7, #21]
 8002328:	429a      	cmp	r2, r3
 800232a:	d3cd      	bcc.n	80022c8 <HAL_FLASH_Program+0x60>
 800232c:	e000      	b.n	8002330 <HAL_FLASH_Program+0xc8>
      {
        break;
 800232e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002330:	4b03      	ldr	r3, [pc, #12]	; (8002340 <HAL_FLASH_Program+0xd8>)
 8002332:	2200      	movs	r2, #0
 8002334:	761a      	strb	r2, [r3, #24]

  return status;
 8002336:	7dfb      	ldrb	r3, [r7, #23]
}
 8002338:	4618      	mov	r0, r3
 800233a:	371c      	adds	r7, #28
 800233c:	46bd      	mov	sp, r7
 800233e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002340:	200003d0 	.word	0x200003d0
 8002344:	40022000 	.word	0x40022000

08002348 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002352:	4b0d      	ldr	r3, [pc, #52]	; (8002388 <HAL_FLASH_Unlock+0x40>)
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00d      	beq.n	800237a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800235e:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <HAL_FLASH_Unlock+0x40>)
 8002360:	4a0a      	ldr	r2, [pc, #40]	; (800238c <HAL_FLASH_Unlock+0x44>)
 8002362:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002364:	4b08      	ldr	r3, [pc, #32]	; (8002388 <HAL_FLASH_Unlock+0x40>)
 8002366:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <HAL_FLASH_Unlock+0x48>)
 8002368:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800236a:	4b07      	ldr	r3, [pc, #28]	; (8002388 <HAL_FLASH_Unlock+0x40>)
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800237a:	79fb      	ldrb	r3, [r7, #7]
}
 800237c:	4618      	mov	r0, r3
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40022000 	.word	0x40022000
 800238c:	45670123 	.word	0x45670123
 8002390:	cdef89ab 	.word	0xcdef89ab

08002394 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002398:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <HAL_FLASH_Lock+0x1c>)
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	4a04      	ldr	r2, [pc, #16]	; (80023b0 <HAL_FLASH_Lock+0x1c>)
 800239e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023a2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40022000 	.word	0x40022000

080023b4 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 80023b8:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <HAL_FLASH_OB_Unlock+0x2c>)
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d107      	bne.n	80023d4 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 80023c4:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <HAL_FLASH_OB_Unlock+0x2c>)
 80023c6:	4a07      	ldr	r2, [pc, #28]	; (80023e4 <HAL_FLASH_OB_Unlock+0x30>)
 80023c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 80023ca:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <HAL_FLASH_OB_Unlock+0x2c>)
 80023cc:	4a06      	ldr	r2, [pc, #24]	; (80023e8 <HAL_FLASH_OB_Unlock+0x34>)
 80023ce:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 80023d0:	2300      	movs	r3, #0
 80023d2:	e000      	b.n	80023d6 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	40022000 	.word	0x40022000
 80023e4:	45670123 	.word	0x45670123
 80023e8:	cdef89ab 	.word	0xcdef89ab

080023ec <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 80023f0:	4b05      	ldr	r3, [pc, #20]	; (8002408 <HAL_FLASH_OB_Lock+0x1c>)
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	4a04      	ldr	r2, [pc, #16]	; (8002408 <HAL_FLASH_OB_Lock+0x1c>)
 80023f6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023fa:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40022000 	.word	0x40022000

0800240c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	460b      	mov	r3, r1
 8002416:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002418:	4b08      	ldr	r3, [pc, #32]	; (800243c <FLASH_Program_HalfWord+0x30>)
 800241a:	2200      	movs	r2, #0
 800241c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800241e:	4b08      	ldr	r3, [pc, #32]	; (8002440 <FLASH_Program_HalfWord+0x34>)
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	4a07      	ldr	r2, [pc, #28]	; (8002440 <FLASH_Program_HalfWord+0x34>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	887a      	ldrh	r2, [r7, #2]
 800242e:	801a      	strh	r2, [r3, #0]
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	200003d0 	.word	0x200003d0
 8002440:	40022000 	.word	0x40022000

08002444 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800244c:	f7ff fd20 	bl	8001e90 <HAL_GetTick>
 8002450:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002452:	e010      	b.n	8002476 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800245a:	d00c      	beq.n	8002476 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d007      	beq.n	8002472 <FLASH_WaitForLastOperation+0x2e>
 8002462:	f7ff fd15 	bl	8001e90 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	429a      	cmp	r2, r3
 8002470:	d201      	bcs.n	8002476 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e025      	b.n	80024c2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002476:	4b15      	ldr	r3, [pc, #84]	; (80024cc <FLASH_WaitForLastOperation+0x88>)
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1e8      	bne.n	8002454 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002482:	4b12      	ldr	r3, [pc, #72]	; (80024cc <FLASH_WaitForLastOperation+0x88>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f003 0320 	and.w	r3, r3, #32
 800248a:	2b00      	cmp	r3, #0
 800248c:	d002      	beq.n	8002494 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800248e:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <FLASH_WaitForLastOperation+0x88>)
 8002490:	2220      	movs	r2, #32
 8002492:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002494:	4b0d      	ldr	r3, [pc, #52]	; (80024cc <FLASH_WaitForLastOperation+0x88>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f003 0310 	and.w	r3, r3, #16
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10b      	bne.n	80024b8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80024a0:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <FLASH_WaitForLastOperation+0x88>)
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d105      	bne.n	80024b8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80024ac:	4b07      	ldr	r3, [pc, #28]	; (80024cc <FLASH_WaitForLastOperation+0x88>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80024b8:	f000 f80a 	bl	80024d0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e000      	b.n	80024c2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40022000 	.word	0x40022000

080024d0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80024da:	4b23      	ldr	r3, [pc, #140]	; (8002568 <FLASH_SetErrorCode+0x98>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f003 0310 	and.w	r3, r3, #16
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d009      	beq.n	80024fa <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80024e6:	4b21      	ldr	r3, [pc, #132]	; (800256c <FLASH_SetErrorCode+0x9c>)
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	f043 0302 	orr.w	r3, r3, #2
 80024ee:	4a1f      	ldr	r2, [pc, #124]	; (800256c <FLASH_SetErrorCode+0x9c>)
 80024f0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f043 0310 	orr.w	r3, r3, #16
 80024f8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80024fa:	4b1b      	ldr	r3, [pc, #108]	; (8002568 <FLASH_SetErrorCode+0x98>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f003 0304 	and.w	r3, r3, #4
 8002502:	2b00      	cmp	r3, #0
 8002504:	d009      	beq.n	800251a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002506:	4b19      	ldr	r3, [pc, #100]	; (800256c <FLASH_SetErrorCode+0x9c>)
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	4a17      	ldr	r2, [pc, #92]	; (800256c <FLASH_SetErrorCode+0x9c>)
 8002510:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f043 0304 	orr.w	r3, r3, #4
 8002518:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800251a:	4b13      	ldr	r3, [pc, #76]	; (8002568 <FLASH_SetErrorCode+0x98>)
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00b      	beq.n	800253e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002526:	4b11      	ldr	r3, [pc, #68]	; (800256c <FLASH_SetErrorCode+0x9c>)
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	f043 0304 	orr.w	r3, r3, #4
 800252e:	4a0f      	ldr	r2, [pc, #60]	; (800256c <FLASH_SetErrorCode+0x9c>)
 8002530:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002532:	4b0d      	ldr	r3, [pc, #52]	; (8002568 <FLASH_SetErrorCode+0x98>)
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	4a0c      	ldr	r2, [pc, #48]	; (8002568 <FLASH_SetErrorCode+0x98>)
 8002538:	f023 0301 	bic.w	r3, r3, #1
 800253c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f240 1201 	movw	r2, #257	; 0x101
 8002544:	4293      	cmp	r3, r2
 8002546:	d106      	bne.n	8002556 <FLASH_SetErrorCode+0x86>
 8002548:	4b07      	ldr	r3, [pc, #28]	; (8002568 <FLASH_SetErrorCode+0x98>)
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	4a06      	ldr	r2, [pc, #24]	; (8002568 <FLASH_SetErrorCode+0x98>)
 800254e:	f023 0301 	bic.w	r3, r3, #1
 8002552:	61d3      	str	r3, [r2, #28]
}  
 8002554:	e002      	b.n	800255c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002556:	4a04      	ldr	r2, [pc, #16]	; (8002568 <FLASH_SetErrorCode+0x98>)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	60d3      	str	r3, [r2, #12]
}  
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40022000 	.word	0x40022000
 800256c:	200003d0 	.word	0x200003d0

08002570 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800257e:	2300      	movs	r3, #0
 8002580:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002582:	4b2f      	ldr	r3, [pc, #188]	; (8002640 <HAL_FLASHEx_Erase+0xd0>)
 8002584:	7e1b      	ldrb	r3, [r3, #24]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d101      	bne.n	800258e <HAL_FLASHEx_Erase+0x1e>
 800258a:	2302      	movs	r3, #2
 800258c:	e053      	b.n	8002636 <HAL_FLASHEx_Erase+0xc6>
 800258e:	4b2c      	ldr	r3, [pc, #176]	; (8002640 <HAL_FLASHEx_Erase+0xd0>)
 8002590:	2201      	movs	r2, #1
 8002592:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b02      	cmp	r3, #2
 800259a:	d116      	bne.n	80025ca <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800259c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025a0:	f7ff ff50 	bl	8002444 <FLASH_WaitForLastOperation>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d141      	bne.n	800262e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80025aa:	2001      	movs	r0, #1
 80025ac:	f000 f84c 	bl	8002648 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80025b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025b4:	f7ff ff46 	bl	8002444 <FLASH_WaitForLastOperation>
 80025b8:	4603      	mov	r3, r0
 80025ba:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80025bc:	4b21      	ldr	r3, [pc, #132]	; (8002644 <HAL_FLASHEx_Erase+0xd4>)
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	4a20      	ldr	r2, [pc, #128]	; (8002644 <HAL_FLASHEx_Erase+0xd4>)
 80025c2:	f023 0304 	bic.w	r3, r3, #4
 80025c6:	6113      	str	r3, [r2, #16]
 80025c8:	e031      	b.n	800262e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80025ca:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025ce:	f7ff ff39 	bl	8002444 <FLASH_WaitForLastOperation>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d12a      	bne.n	800262e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	f04f 32ff 	mov.w	r2, #4294967295
 80025de:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	60bb      	str	r3, [r7, #8]
 80025e6:	e019      	b.n	800261c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80025e8:	68b8      	ldr	r0, [r7, #8]
 80025ea:	f000 f849 	bl	8002680 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80025ee:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025f2:	f7ff ff27 	bl	8002444 <FLASH_WaitForLastOperation>
 80025f6:	4603      	mov	r3, r0
 80025f8:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80025fa:	4b12      	ldr	r3, [pc, #72]	; (8002644 <HAL_FLASHEx_Erase+0xd4>)
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	4a11      	ldr	r2, [pc, #68]	; (8002644 <HAL_FLASHEx_Erase+0xd4>)
 8002600:	f023 0302 	bic.w	r3, r3, #2
 8002604:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002606:	7bfb      	ldrb	r3, [r7, #15]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	68ba      	ldr	r2, [r7, #8]
 8002610:	601a      	str	r2, [r3, #0]
            break;
 8002612:	e00c      	b.n	800262e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800261a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	029a      	lsls	r2, r3, #10
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	429a      	cmp	r2, r3
 800262c:	d3dc      	bcc.n	80025e8 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800262e:	4b04      	ldr	r3, [pc, #16]	; (8002640 <HAL_FLASHEx_Erase+0xd0>)
 8002630:	2200      	movs	r2, #0
 8002632:	761a      	strb	r2, [r3, #24]

  return status;
 8002634:	7bfb      	ldrb	r3, [r7, #15]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	200003d0 	.word	0x200003d0
 8002644:	40022000 	.word	0x40022000

08002648 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002650:	4b09      	ldr	r3, [pc, #36]	; (8002678 <FLASH_MassErase+0x30>)
 8002652:	2200      	movs	r2, #0
 8002654:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002656:	4b09      	ldr	r3, [pc, #36]	; (800267c <FLASH_MassErase+0x34>)
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	4a08      	ldr	r2, [pc, #32]	; (800267c <FLASH_MassErase+0x34>)
 800265c:	f043 0304 	orr.w	r3, r3, #4
 8002660:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002662:	4b06      	ldr	r3, [pc, #24]	; (800267c <FLASH_MassErase+0x34>)
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	4a05      	ldr	r2, [pc, #20]	; (800267c <FLASH_MassErase+0x34>)
 8002668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800266c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	bc80      	pop	{r7}
 8002676:	4770      	bx	lr
 8002678:	200003d0 	.word	0x200003d0
 800267c:	40022000 	.word	0x40022000

08002680 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002688:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <FLASH_PageErase+0x38>)
 800268a:	2200      	movs	r2, #0
 800268c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800268e:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <FLASH_PageErase+0x3c>)
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	4a0a      	ldr	r2, [pc, #40]	; (80026bc <FLASH_PageErase+0x3c>)
 8002694:	f043 0302 	orr.w	r3, r3, #2
 8002698:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800269a:	4a08      	ldr	r2, [pc, #32]	; (80026bc <FLASH_PageErase+0x3c>)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80026a0:	4b06      	ldr	r3, [pc, #24]	; (80026bc <FLASH_PageErase+0x3c>)
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	4a05      	ldr	r2, [pc, #20]	; (80026bc <FLASH_PageErase+0x3c>)
 80026a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026aa:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	200003d0 	.word	0x200003d0
 80026bc:	40022000 	.word	0x40022000

080026c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b08b      	sub	sp, #44	; 0x2c
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026ca:	2300      	movs	r3, #0
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026ce:	2300      	movs	r3, #0
 80026d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026d2:	e169      	b.n	80029a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026d4:	2201      	movs	r2, #1
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	69fa      	ldr	r2, [r7, #28]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	f040 8158 	bne.w	80029a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	4a9a      	ldr	r2, [pc, #616]	; (8002960 <HAL_GPIO_Init+0x2a0>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d05e      	beq.n	80027ba <HAL_GPIO_Init+0xfa>
 80026fc:	4a98      	ldr	r2, [pc, #608]	; (8002960 <HAL_GPIO_Init+0x2a0>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d875      	bhi.n	80027ee <HAL_GPIO_Init+0x12e>
 8002702:	4a98      	ldr	r2, [pc, #608]	; (8002964 <HAL_GPIO_Init+0x2a4>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d058      	beq.n	80027ba <HAL_GPIO_Init+0xfa>
 8002708:	4a96      	ldr	r2, [pc, #600]	; (8002964 <HAL_GPIO_Init+0x2a4>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d86f      	bhi.n	80027ee <HAL_GPIO_Init+0x12e>
 800270e:	4a96      	ldr	r2, [pc, #600]	; (8002968 <HAL_GPIO_Init+0x2a8>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d052      	beq.n	80027ba <HAL_GPIO_Init+0xfa>
 8002714:	4a94      	ldr	r2, [pc, #592]	; (8002968 <HAL_GPIO_Init+0x2a8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d869      	bhi.n	80027ee <HAL_GPIO_Init+0x12e>
 800271a:	4a94      	ldr	r2, [pc, #592]	; (800296c <HAL_GPIO_Init+0x2ac>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d04c      	beq.n	80027ba <HAL_GPIO_Init+0xfa>
 8002720:	4a92      	ldr	r2, [pc, #584]	; (800296c <HAL_GPIO_Init+0x2ac>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d863      	bhi.n	80027ee <HAL_GPIO_Init+0x12e>
 8002726:	4a92      	ldr	r2, [pc, #584]	; (8002970 <HAL_GPIO_Init+0x2b0>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d046      	beq.n	80027ba <HAL_GPIO_Init+0xfa>
 800272c:	4a90      	ldr	r2, [pc, #576]	; (8002970 <HAL_GPIO_Init+0x2b0>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d85d      	bhi.n	80027ee <HAL_GPIO_Init+0x12e>
 8002732:	2b12      	cmp	r3, #18
 8002734:	d82a      	bhi.n	800278c <HAL_GPIO_Init+0xcc>
 8002736:	2b12      	cmp	r3, #18
 8002738:	d859      	bhi.n	80027ee <HAL_GPIO_Init+0x12e>
 800273a:	a201      	add	r2, pc, #4	; (adr r2, 8002740 <HAL_GPIO_Init+0x80>)
 800273c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002740:	080027bb 	.word	0x080027bb
 8002744:	08002795 	.word	0x08002795
 8002748:	080027a7 	.word	0x080027a7
 800274c:	080027e9 	.word	0x080027e9
 8002750:	080027ef 	.word	0x080027ef
 8002754:	080027ef 	.word	0x080027ef
 8002758:	080027ef 	.word	0x080027ef
 800275c:	080027ef 	.word	0x080027ef
 8002760:	080027ef 	.word	0x080027ef
 8002764:	080027ef 	.word	0x080027ef
 8002768:	080027ef 	.word	0x080027ef
 800276c:	080027ef 	.word	0x080027ef
 8002770:	080027ef 	.word	0x080027ef
 8002774:	080027ef 	.word	0x080027ef
 8002778:	080027ef 	.word	0x080027ef
 800277c:	080027ef 	.word	0x080027ef
 8002780:	080027ef 	.word	0x080027ef
 8002784:	0800279d 	.word	0x0800279d
 8002788:	080027b1 	.word	0x080027b1
 800278c:	4a79      	ldr	r2, [pc, #484]	; (8002974 <HAL_GPIO_Init+0x2b4>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d013      	beq.n	80027ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002792:	e02c      	b.n	80027ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	623b      	str	r3, [r7, #32]
          break;
 800279a:	e029      	b.n	80027f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	3304      	adds	r3, #4
 80027a2:	623b      	str	r3, [r7, #32]
          break;
 80027a4:	e024      	b.n	80027f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	3308      	adds	r3, #8
 80027ac:	623b      	str	r3, [r7, #32]
          break;
 80027ae:	e01f      	b.n	80027f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	330c      	adds	r3, #12
 80027b6:	623b      	str	r3, [r7, #32]
          break;
 80027b8:	e01a      	b.n	80027f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d102      	bne.n	80027c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027c2:	2304      	movs	r3, #4
 80027c4:	623b      	str	r3, [r7, #32]
          break;
 80027c6:	e013      	b.n	80027f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d105      	bne.n	80027dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027d0:	2308      	movs	r3, #8
 80027d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69fa      	ldr	r2, [r7, #28]
 80027d8:	611a      	str	r2, [r3, #16]
          break;
 80027da:	e009      	b.n	80027f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027dc:	2308      	movs	r3, #8
 80027de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	69fa      	ldr	r2, [r7, #28]
 80027e4:	615a      	str	r2, [r3, #20]
          break;
 80027e6:	e003      	b.n	80027f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027e8:	2300      	movs	r3, #0
 80027ea:	623b      	str	r3, [r7, #32]
          break;
 80027ec:	e000      	b.n	80027f0 <HAL_GPIO_Init+0x130>
          break;
 80027ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	2bff      	cmp	r3, #255	; 0xff
 80027f4:	d801      	bhi.n	80027fa <HAL_GPIO_Init+0x13a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	e001      	b.n	80027fe <HAL_GPIO_Init+0x13e>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3304      	adds	r3, #4
 80027fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	2bff      	cmp	r3, #255	; 0xff
 8002804:	d802      	bhi.n	800280c <HAL_GPIO_Init+0x14c>
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	e002      	b.n	8002812 <HAL_GPIO_Init+0x152>
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	3b08      	subs	r3, #8
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	210f      	movs	r1, #15
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	fa01 f303 	lsl.w	r3, r1, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	401a      	ands	r2, r3
 8002824:	6a39      	ldr	r1, [r7, #32]
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	fa01 f303 	lsl.w	r3, r1, r3
 800282c:	431a      	orrs	r2, r3
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 80b1 	beq.w	80029a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002840:	4b4d      	ldr	r3, [pc, #308]	; (8002978 <HAL_GPIO_Init+0x2b8>)
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	4a4c      	ldr	r2, [pc, #304]	; (8002978 <HAL_GPIO_Init+0x2b8>)
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	6193      	str	r3, [r2, #24]
 800284c:	4b4a      	ldr	r3, [pc, #296]	; (8002978 <HAL_GPIO_Init+0x2b8>)
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002858:	4a48      	ldr	r2, [pc, #288]	; (800297c <HAL_GPIO_Init+0x2bc>)
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	089b      	lsrs	r3, r3, #2
 800285e:	3302      	adds	r3, #2
 8002860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002864:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	f003 0303 	and.w	r3, r3, #3
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	220f      	movs	r2, #15
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43db      	mvns	r3, r3
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	4013      	ands	r3, r2
 800287a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a40      	ldr	r2, [pc, #256]	; (8002980 <HAL_GPIO_Init+0x2c0>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d013      	beq.n	80028ac <HAL_GPIO_Init+0x1ec>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a3f      	ldr	r2, [pc, #252]	; (8002984 <HAL_GPIO_Init+0x2c4>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d00d      	beq.n	80028a8 <HAL_GPIO_Init+0x1e8>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a3e      	ldr	r2, [pc, #248]	; (8002988 <HAL_GPIO_Init+0x2c8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d007      	beq.n	80028a4 <HAL_GPIO_Init+0x1e4>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a3d      	ldr	r2, [pc, #244]	; (800298c <HAL_GPIO_Init+0x2cc>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d101      	bne.n	80028a0 <HAL_GPIO_Init+0x1e0>
 800289c:	2303      	movs	r3, #3
 800289e:	e006      	b.n	80028ae <HAL_GPIO_Init+0x1ee>
 80028a0:	2304      	movs	r3, #4
 80028a2:	e004      	b.n	80028ae <HAL_GPIO_Init+0x1ee>
 80028a4:	2302      	movs	r3, #2
 80028a6:	e002      	b.n	80028ae <HAL_GPIO_Init+0x1ee>
 80028a8:	2301      	movs	r3, #1
 80028aa:	e000      	b.n	80028ae <HAL_GPIO_Init+0x1ee>
 80028ac:	2300      	movs	r3, #0
 80028ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b0:	f002 0203 	and.w	r2, r2, #3
 80028b4:	0092      	lsls	r2, r2, #2
 80028b6:	4093      	lsls	r3, r2
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028be:	492f      	ldr	r1, [pc, #188]	; (800297c <HAL_GPIO_Init+0x2bc>)
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	089b      	lsrs	r3, r3, #2
 80028c4:	3302      	adds	r3, #2
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d006      	beq.n	80028e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028d8:	4b2d      	ldr	r3, [pc, #180]	; (8002990 <HAL_GPIO_Init+0x2d0>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	492c      	ldr	r1, [pc, #176]	; (8002990 <HAL_GPIO_Init+0x2d0>)
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	600b      	str	r3, [r1, #0]
 80028e4:	e006      	b.n	80028f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028e6:	4b2a      	ldr	r3, [pc, #168]	; (8002990 <HAL_GPIO_Init+0x2d0>)
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	4928      	ldr	r1, [pc, #160]	; (8002990 <HAL_GPIO_Init+0x2d0>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d006      	beq.n	800290e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002900:	4b23      	ldr	r3, [pc, #140]	; (8002990 <HAL_GPIO_Init+0x2d0>)
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	4922      	ldr	r1, [pc, #136]	; (8002990 <HAL_GPIO_Init+0x2d0>)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	4313      	orrs	r3, r2
 800290a:	604b      	str	r3, [r1, #4]
 800290c:	e006      	b.n	800291c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800290e:	4b20      	ldr	r3, [pc, #128]	; (8002990 <HAL_GPIO_Init+0x2d0>)
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	43db      	mvns	r3, r3
 8002916:	491e      	ldr	r1, [pc, #120]	; (8002990 <HAL_GPIO_Init+0x2d0>)
 8002918:	4013      	ands	r3, r2
 800291a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d006      	beq.n	8002936 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002928:	4b19      	ldr	r3, [pc, #100]	; (8002990 <HAL_GPIO_Init+0x2d0>)
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	4918      	ldr	r1, [pc, #96]	; (8002990 <HAL_GPIO_Init+0x2d0>)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	4313      	orrs	r3, r2
 8002932:	608b      	str	r3, [r1, #8]
 8002934:	e006      	b.n	8002944 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002936:	4b16      	ldr	r3, [pc, #88]	; (8002990 <HAL_GPIO_Init+0x2d0>)
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	43db      	mvns	r3, r3
 800293e:	4914      	ldr	r1, [pc, #80]	; (8002990 <HAL_GPIO_Init+0x2d0>)
 8002940:	4013      	ands	r3, r2
 8002942:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d021      	beq.n	8002994 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002950:	4b0f      	ldr	r3, [pc, #60]	; (8002990 <HAL_GPIO_Init+0x2d0>)
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	490e      	ldr	r1, [pc, #56]	; (8002990 <HAL_GPIO_Init+0x2d0>)
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	4313      	orrs	r3, r2
 800295a:	60cb      	str	r3, [r1, #12]
 800295c:	e021      	b.n	80029a2 <HAL_GPIO_Init+0x2e2>
 800295e:	bf00      	nop
 8002960:	10320000 	.word	0x10320000
 8002964:	10310000 	.word	0x10310000
 8002968:	10220000 	.word	0x10220000
 800296c:	10210000 	.word	0x10210000
 8002970:	10120000 	.word	0x10120000
 8002974:	10110000 	.word	0x10110000
 8002978:	40021000 	.word	0x40021000
 800297c:	40010000 	.word	0x40010000
 8002980:	40010800 	.word	0x40010800
 8002984:	40010c00 	.word	0x40010c00
 8002988:	40011000 	.word	0x40011000
 800298c:	40011400 	.word	0x40011400
 8002990:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002994:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <HAL_GPIO_Init+0x304>)
 8002996:	68da      	ldr	r2, [r3, #12]
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	43db      	mvns	r3, r3
 800299c:	4909      	ldr	r1, [pc, #36]	; (80029c4 <HAL_GPIO_Init+0x304>)
 800299e:	4013      	ands	r3, r2
 80029a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	3301      	adds	r3, #1
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	fa22 f303 	lsr.w	r3, r2, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f47f ae8e 	bne.w	80026d4 <HAL_GPIO_Init+0x14>
  }
}
 80029b8:	bf00      	nop
 80029ba:	bf00      	nop
 80029bc:	372c      	adds	r7, #44	; 0x2c
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr
 80029c4:	40010400 	.word	0x40010400

080029c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	460b      	mov	r3, r1
 80029d2:	807b      	strh	r3, [r7, #2]
 80029d4:	4613      	mov	r3, r2
 80029d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029d8:	787b      	ldrb	r3, [r7, #1]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029de:	887a      	ldrh	r2, [r7, #2]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80029e4:	e003      	b.n	80029ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80029e6:	887b      	ldrh	r3, [r7, #2]
 80029e8:	041a      	lsls	r2, r3, #16
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	611a      	str	r2, [r3, #16]
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a0a:	887a      	ldrh	r2, [r7, #2]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	041a      	lsls	r2, r3, #16
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	43d9      	mvns	r1, r3
 8002a16:	887b      	ldrh	r3, [r7, #2]
 8002a18:	400b      	ands	r3, r1
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	611a      	str	r2, [r3, #16]
}
 8002a20:	bf00      	nop
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr
	...

08002a2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a36:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a38:	695a      	ldr	r2, [r3, #20]
 8002a3a:	88fb      	ldrh	r3, [r7, #6]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d006      	beq.n	8002a50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a42:	4a05      	ldr	r2, [pc, #20]	; (8002a58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a44:	88fb      	ldrh	r3, [r7, #6]
 8002a46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a48:	88fb      	ldrh	r3, [r7, #6]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff f84a 	bl	8001ae4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a50:	bf00      	nop
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40010400 	.word	0x40010400

08002a5c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a5e:	b08b      	sub	sp, #44	; 0x2c
 8002a60:	af06      	add	r7, sp, #24
 8002a62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e0fd      	b.n	8002c6a <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d106      	bne.n	8002a88 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f007 ff72 	bl	800a96c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f003 fc41 	bl	800631c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	687e      	ldr	r6, [r7, #4]
 8002aa2:	466d      	mov	r5, sp
 8002aa4:	f106 0410 	add.w	r4, r6, #16
 8002aa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aac:	6823      	ldr	r3, [r4, #0]
 8002aae:	602b      	str	r3, [r5, #0]
 8002ab0:	1d33      	adds	r3, r6, #4
 8002ab2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ab4:	6838      	ldr	r0, [r7, #0]
 8002ab6:	f003 fc0b 	bl	80062d0 <USB_CoreInit>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d005      	beq.n	8002acc <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e0ce      	b.n	8002c6a <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f003 fc3c 	bl	8006350 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ad8:	2300      	movs	r3, #0
 8002ada:	73fb      	strb	r3, [r7, #15]
 8002adc:	e04c      	b.n	8002b78 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ade:	7bfb      	ldrb	r3, [r7, #15]
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	1c5a      	adds	r2, r3, #1
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	440b      	add	r3, r1
 8002aee:	3301      	adds	r3, #1
 8002af0:	2201      	movs	r2, #1
 8002af2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	440b      	add	r3, r1
 8002b04:	7bfa      	ldrb	r2, [r7, #15]
 8002b06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b08:	7bfa      	ldrb	r2, [r7, #15]
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	b298      	uxth	r0, r3
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	440b      	add	r3, r1
 8002b1a:	3336      	adds	r3, #54	; 0x36
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	1c5a      	adds	r2, r3, #1
 8002b26:	4613      	mov	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	440b      	add	r3, r1
 8002b30:	3303      	adds	r3, #3
 8002b32:	2200      	movs	r2, #0
 8002b34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b36:	7bfa      	ldrb	r2, [r7, #15]
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	440b      	add	r3, r1
 8002b44:	3338      	adds	r3, #56	; 0x38
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b4a:	7bfa      	ldrb	r2, [r7, #15]
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	4413      	add	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	440b      	add	r3, r1
 8002b58:	333c      	adds	r3, #60	; 0x3c
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b5e:	7bfa      	ldrb	r2, [r7, #15]
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	440b      	add	r3, r1
 8002b6c:	3340      	adds	r3, #64	; 0x40
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	3301      	adds	r3, #1
 8002b76:	73fb      	strb	r3, [r7, #15]
 8002b78:	7bfa      	ldrb	r2, [r7, #15]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d3ad      	bcc.n	8002ade <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b82:	2300      	movs	r3, #0
 8002b84:	73fb      	strb	r3, [r7, #15]
 8002b86:	e044      	b.n	8002c12 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b88:	7bfa      	ldrb	r2, [r7, #15]
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	440b      	add	r3, r1
 8002b96:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	440b      	add	r3, r1
 8002bac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bb0:	7bfa      	ldrb	r2, [r7, #15]
 8002bb2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bb4:	7bfa      	ldrb	r2, [r7, #15]
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	440b      	add	r3, r1
 8002bc2:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bca:	7bfa      	ldrb	r2, [r7, #15]
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	440b      	add	r3, r1
 8002bd8:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002be0:	7bfa      	ldrb	r2, [r7, #15]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	440b      	add	r3, r1
 8002bee:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bf6:	7bfa      	ldrb	r2, [r7, #15]
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	440b      	add	r3, r1
 8002c04:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	73fb      	strb	r3, [r7, #15]
 8002c12:	7bfa      	ldrb	r2, [r7, #15]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d3b5      	bcc.n	8002b88 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	603b      	str	r3, [r7, #0]
 8002c22:	687e      	ldr	r6, [r7, #4]
 8002c24:	466d      	mov	r5, sp
 8002c26:	f106 0410 	add.w	r4, r6, #16
 8002c2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c2e:	6823      	ldr	r3, [r4, #0]
 8002c30:	602b      	str	r3, [r5, #0]
 8002c32:	1d33      	adds	r3, r6, #4
 8002c34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c36:	6838      	ldr	r0, [r7, #0]
 8002c38:	f003 fb96 	bl	8006368 <USB_DevInit>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d005      	beq.n	8002c4e <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2202      	movs	r2, #2
 8002c46:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e00d      	b.n	8002c6a <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f006 f848 	bl	8008cf8 <USB_DevDisconnect>

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c72 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b082      	sub	sp, #8
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d101      	bne.n	8002c88 <HAL_PCD_Start+0x16>
 8002c84:	2302      	movs	r3, #2
 8002c86:	e016      	b.n	8002cb6 <HAL_PCD_Start+0x44>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f003 fb2b 	bl	80062f0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f008 f8d8 	bl	800ae52 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f006 f81c 	bl	8008ce4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b088      	sub	sp, #32
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f006 f81e 	bl	8008d0c <USB_ReadInterrupts>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cda:	d102      	bne.n	8002ce2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 fb5f 	bl	80033a0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f006 f810 	bl	8008d0c <USB_ReadInterrupts>
 8002cec:	4603      	mov	r3, r0
 8002cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf6:	d112      	bne.n	8002d1e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d0a:	b292      	uxth	r2, r2
 8002d0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f007 fea6 	bl	800aa62 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002d16:	2100      	movs	r1, #0
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f923 	bl	8002f64 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f005 fff2 	bl	8008d0c <USB_ReadInterrupts>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d32:	d10b      	bne.n	8002d4c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d46:	b292      	uxth	r2, r2
 8002d48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f005 ffdb 	bl	8008d0c <USB_ReadInterrupts>
 8002d56:	4603      	mov	r3, r0
 8002d58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d60:	d10b      	bne.n	8002d7a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d74:	b292      	uxth	r2, r2
 8002d76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f005 ffc4 	bl	8008d0c <USB_ReadInterrupts>
 8002d84:	4603      	mov	r3, r0
 8002d86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d8e:	d126      	bne.n	8002dde <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0204 	bic.w	r2, r2, #4
 8002da2:	b292      	uxth	r2, r2
 8002da4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0208 	bic.w	r2, r2, #8
 8002dba:	b292      	uxth	r2, r2
 8002dbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f007 fe87 	bl	800aad4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dd8:	b292      	uxth	r2, r2
 8002dda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f005 ff92 	bl	8008d0c <USB_ReadInterrupts>
 8002de8:	4603      	mov	r3, r0
 8002dea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002df2:	f040 8082 	bne.w	8002efa <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002df6:	2300      	movs	r3, #0
 8002df8:	77fb      	strb	r3, [r7, #31]
 8002dfa:	e010      	b.n	8002e1e <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	461a      	mov	r2, r3
 8002e02:	7ffb      	ldrb	r3, [r7, #31]
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	441a      	add	r2, r3
 8002e08:	7ffb      	ldrb	r3, [r7, #31]
 8002e0a:	8812      	ldrh	r2, [r2, #0]
 8002e0c:	b292      	uxth	r2, r2
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	3320      	adds	r3, #32
 8002e12:	443b      	add	r3, r7
 8002e14:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002e18:	7ffb      	ldrb	r3, [r7, #31]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	77fb      	strb	r3, [r7, #31]
 8002e1e:	7ffb      	ldrb	r3, [r7, #31]
 8002e20:	2b07      	cmp	r3, #7
 8002e22:	d9eb      	bls.n	8002dfc <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0201 	orr.w	r2, r2, #1
 8002e36:	b292      	uxth	r2, r2
 8002e38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 0201 	bic.w	r2, r2, #1
 8002e4e:	b292      	uxth	r2, r2
 8002e50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002e54:	bf00      	nop
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0f6      	beq.n	8002e56 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e7a:	b292      	uxth	r2, r2
 8002e7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002e80:	2300      	movs	r3, #0
 8002e82:	77fb      	strb	r3, [r7, #31]
 8002e84:	e00f      	b.n	8002ea6 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002e86:	7ffb      	ldrb	r3, [r7, #31]
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6812      	ldr	r2, [r2, #0]
 8002e8c:	4611      	mov	r1, r2
 8002e8e:	7ffa      	ldrb	r2, [r7, #31]
 8002e90:	0092      	lsls	r2, r2, #2
 8002e92:	440a      	add	r2, r1
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	3320      	adds	r3, #32
 8002e98:	443b      	add	r3, r7
 8002e9a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002e9e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002ea0:	7ffb      	ldrb	r3, [r7, #31]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	77fb      	strb	r3, [r7, #31]
 8002ea6:	7ffb      	ldrb	r3, [r7, #31]
 8002ea8:	2b07      	cmp	r3, #7
 8002eaa:	d9ec      	bls.n	8002e86 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0208 	orr.w	r2, r2, #8
 8002ebe:	b292      	uxth	r2, r2
 8002ec0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ed6:	b292      	uxth	r2, r2
 8002ed8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0204 	orr.w	r2, r2, #4
 8002eee:	b292      	uxth	r2, r2
 8002ef0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f007 fdd3 	bl	800aaa0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f005 ff04 	bl	8008d0c <USB_ReadInterrupts>
 8002f04:	4603      	mov	r3, r0
 8002f06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f0e:	d10e      	bne.n	8002f2e <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f22:	b292      	uxth	r2, r2
 8002f24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f007 fd8c 	bl	800aa46 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f005 feea 	bl	8008d0c <USB_ReadInterrupts>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f42:	d10b      	bne.n	8002f5c <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f56:	b292      	uxth	r2, r2
 8002f58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002f5c:	bf00      	nop
 8002f5e:	3720      	adds	r7, #32
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d101      	bne.n	8002f7e <HAL_PCD_SetAddress+0x1a>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	e013      	b.n	8002fa6 <HAL_PCD_SetAddress+0x42>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	78fa      	ldrb	r2, [r7, #3]
 8002f8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	78fa      	ldrb	r2, [r7, #3]
 8002f94:	4611      	mov	r1, r2
 8002f96:	4618      	mov	r0, r3
 8002f98:	f005 fe91 	bl	8008cbe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b084      	sub	sp, #16
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	4608      	mov	r0, r1
 8002fb8:	4611      	mov	r1, r2
 8002fba:	461a      	mov	r2, r3
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	70fb      	strb	r3, [r7, #3]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	803b      	strh	r3, [r7, #0]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	da0e      	bge.n	8002ff2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fd4:	78fb      	ldrb	r3, [r7, #3]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	4613      	mov	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4413      	add	r3, r2
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2201      	movs	r2, #1
 8002fee:	705a      	strb	r2, [r3, #1]
 8002ff0:	e00e      	b.n	8003010 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ff2:	78fb      	ldrb	r3, [r7, #3]
 8002ff4:	f003 0207 	and.w	r2, r3, #7
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	4413      	add	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003010:	78fb      	ldrb	r3, [r7, #3]
 8003012:	f003 0307 	and.w	r3, r3, #7
 8003016:	b2da      	uxtb	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800301c:	883a      	ldrh	r2, [r7, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	78ba      	ldrb	r2, [r7, #2]
 8003026:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	785b      	ldrb	r3, [r3, #1]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d004      	beq.n	800303a <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800303a:	78bb      	ldrb	r3, [r7, #2]
 800303c:	2b02      	cmp	r3, #2
 800303e:	d102      	bne.n	8003046 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800304c:	2b01      	cmp	r3, #1
 800304e:	d101      	bne.n	8003054 <HAL_PCD_EP_Open+0xa6>
 8003050:	2302      	movs	r3, #2
 8003052:	e00e      	b.n	8003072 <HAL_PCD_EP_Open+0xc4>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68f9      	ldr	r1, [r7, #12]
 8003062:	4618      	mov	r0, r3
 8003064:	f003 f9a0 	bl	80063a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003070:	7afb      	ldrb	r3, [r7, #11]
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b084      	sub	sp, #16
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
 8003082:	460b      	mov	r3, r1
 8003084:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003086:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800308a:	2b00      	cmp	r3, #0
 800308c:	da0e      	bge.n	80030ac <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800308e:	78fb      	ldrb	r3, [r7, #3]
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	1c5a      	adds	r2, r3, #1
 8003096:	4613      	mov	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	4413      	add	r3, r2
 80030a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2201      	movs	r2, #1
 80030a8:	705a      	strb	r2, [r3, #1]
 80030aa:	e00e      	b.n	80030ca <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030ac:	78fb      	ldrb	r3, [r7, #3]
 80030ae:	f003 0207 	and.w	r2, r3, #7
 80030b2:	4613      	mov	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	4413      	add	r3, r2
 80030c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80030ca:	78fb      	ldrb	r3, [r7, #3]
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d101      	bne.n	80030e4 <HAL_PCD_EP_Close+0x6a>
 80030e0:	2302      	movs	r3, #2
 80030e2:	e00e      	b.n	8003102 <HAL_PCD_EP_Close+0x88>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68f9      	ldr	r1, [r7, #12]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f003 fcc2 	bl	8006a7c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b086      	sub	sp, #24
 800310e:	af00      	add	r7, sp, #0
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	607a      	str	r2, [r7, #4]
 8003114:	603b      	str	r3, [r7, #0]
 8003116:	460b      	mov	r3, r1
 8003118:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800311a:	7afb      	ldrb	r3, [r7, #11]
 800311c:	f003 0207 	and.w	r2, r3, #7
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	4413      	add	r3, r2
 8003130:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2200      	movs	r2, #0
 8003142:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	2200      	movs	r2, #0
 8003148:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800314a:	7afb      	ldrb	r3, [r7, #11]
 800314c:	f003 0307 	and.w	r3, r3, #7
 8003150:	b2da      	uxtb	r2, r3
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003156:	7afb      	ldrb	r3, [r7, #11]
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	2b00      	cmp	r3, #0
 800315e:	d106      	bne.n	800316e <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6979      	ldr	r1, [r7, #20]
 8003166:	4618      	mov	r0, r3
 8003168:	f003 fe74 	bl	8006e54 <USB_EPStartXfer>
 800316c:	e005      	b.n	800317a <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6979      	ldr	r1, [r7, #20]
 8003174:	4618      	mov	r0, r3
 8003176:	f003 fe6d 	bl	8006e54 <USB_EPStartXfer>
  }

  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3718      	adds	r7, #24
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003190:	78fb      	ldrb	r3, [r7, #3]
 8003192:	f003 0207 	and.w	r2, r3, #7
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	440b      	add	r3, r1
 80031a2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80031a6:	681b      	ldr	r3, [r3, #0]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bc80      	pop	{r7}
 80031b0:	4770      	bx	lr

080031b2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b086      	sub	sp, #24
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	60f8      	str	r0, [r7, #12]
 80031ba:	607a      	str	r2, [r7, #4]
 80031bc:	603b      	str	r3, [r7, #0]
 80031be:	460b      	mov	r3, r1
 80031c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031c2:	7afb      	ldrb	r3, [r7, #11]
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	4613      	mov	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	4413      	add	r3, r2
 80031d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	2200      	movs	r2, #0
 80031f6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	2201      	movs	r2, #1
 80031fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031fe:	7afb      	ldrb	r3, [r7, #11]
 8003200:	f003 0307 	and.w	r3, r3, #7
 8003204:	b2da      	uxtb	r2, r3
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800320a:	7afb      	ldrb	r3, [r7, #11]
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	2b00      	cmp	r3, #0
 8003212:	d106      	bne.n	8003222 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6979      	ldr	r1, [r7, #20]
 800321a:	4618      	mov	r0, r3
 800321c:	f003 fe1a 	bl	8006e54 <USB_EPStartXfer>
 8003220:	e005      	b.n	800322e <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6979      	ldr	r1, [r7, #20]
 8003228:	4618      	mov	r0, r3
 800322a:	f003 fe13 	bl	8006e54 <USB_EPStartXfer>
  }

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3718      	adds	r7, #24
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003244:	78fb      	ldrb	r3, [r7, #3]
 8003246:	f003 0207 	and.w	r2, r3, #7
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	429a      	cmp	r2, r3
 8003250:	d901      	bls.n	8003256 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e04c      	b.n	80032f0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003256:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800325a:	2b00      	cmp	r3, #0
 800325c:	da0e      	bge.n	800327c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800325e:	78fb      	ldrb	r3, [r7, #3]
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	4613      	mov	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	4413      	add	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2201      	movs	r2, #1
 8003278:	705a      	strb	r2, [r3, #1]
 800327a:	e00c      	b.n	8003296 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800327c:	78fa      	ldrb	r2, [r7, #3]
 800327e:	4613      	mov	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	4413      	add	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2201      	movs	r2, #1
 800329a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800329c:	78fb      	ldrb	r3, [r7, #3]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d101      	bne.n	80032b6 <HAL_PCD_EP_SetStall+0x7e>
 80032b2:	2302      	movs	r3, #2
 80032b4:	e01c      	b.n	80032f0 <HAL_PCD_EP_SetStall+0xb8>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68f9      	ldr	r1, [r7, #12]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f005 fbfd 	bl	8008ac4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032ca:	78fb      	ldrb	r3, [r7, #3]
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d108      	bne.n	80032e6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80032de:	4619      	mov	r1, r3
 80032e0:	4610      	mov	r0, r2
 80032e2:	f005 fd22 	bl	8008d2a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	460b      	mov	r3, r1
 8003302:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003304:	78fb      	ldrb	r3, [r7, #3]
 8003306:	f003 020f 	and.w	r2, r3, #15
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	429a      	cmp	r2, r3
 8003310:	d901      	bls.n	8003316 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e040      	b.n	8003398 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003316:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800331a:	2b00      	cmp	r3, #0
 800331c:	da0e      	bge.n	800333c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800331e:	78fb      	ldrb	r3, [r7, #3]
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	4613      	mov	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	4413      	add	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2201      	movs	r2, #1
 8003338:	705a      	strb	r2, [r3, #1]
 800333a:	e00e      	b.n	800335a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800333c:	78fb      	ldrb	r3, [r7, #3]
 800333e:	f003 0207 	and.w	r2, r3, #7
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003360:	78fb      	ldrb	r3, [r7, #3]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	b2da      	uxtb	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003372:	2b01      	cmp	r3, #1
 8003374:	d101      	bne.n	800337a <HAL_PCD_EP_ClrStall+0x82>
 8003376:	2302      	movs	r3, #2
 8003378:	e00e      	b.n	8003398 <HAL_PCD_EP_ClrStall+0xa0>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68f9      	ldr	r1, [r7, #12]
 8003388:	4618      	mov	r0, r3
 800338a:	f005 fbeb 	bl	8008b64 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b08e      	sub	sp, #56	; 0x38
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80033a8:	e2ec      	b.n	8003984 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033b2:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80033b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	f003 030f 	and.w	r3, r3, #15
 80033bc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80033c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f040 8161 	bne.w	800368c <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80033ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80033cc:	f003 0310 	and.w	r3, r3, #16
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d152      	bne.n	800347a <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	b29b      	uxth	r3, r3
 80033dc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80033e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e4:	81fb      	strh	r3, [r7, #14]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	89fb      	ldrh	r3, [r7, #14]
 80033ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3328      	adds	r3, #40	; 0x28
 80033fc:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003406:	b29b      	uxth	r3, r3
 8003408:	461a      	mov	r2, r3
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	4413      	add	r3, r2
 8003412:	3302      	adds	r3, #2
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6812      	ldr	r2, [r2, #0]
 800341a:	4413      	add	r3, r2
 800341c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003420:	881b      	ldrh	r3, [r3, #0]
 8003422:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	695a      	ldr	r2, [r3, #20]
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	441a      	add	r2, r3
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003438:	2100      	movs	r1, #0
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f007 fae9 	bl	800aa12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 829b 	beq.w	8003984 <PCD_EP_ISR_Handler+0x5e4>
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	2b00      	cmp	r3, #0
 8003454:	f040 8296 	bne.w	8003984 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800345e:	b2db      	uxtb	r3, r3
 8003460:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003464:	b2da      	uxtb	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	b292      	uxth	r2, r2
 800346c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003478:	e284      	b.n	8003984 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003480:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800348a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800348c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003490:	2b00      	cmp	r3, #0
 8003492:	d034      	beq.n	80034fe <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800349c:	b29b      	uxth	r3, r3
 800349e:	461a      	mov	r2, r3
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	4413      	add	r3, r2
 80034a8:	3306      	adds	r3, #6
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	4413      	add	r3, r2
 80034b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	f005 fc79 	bl	8008dca <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	b29a      	uxth	r2, r3
 80034e0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80034e4:	4013      	ands	r3, r2
 80034e6:	823b      	strh	r3, [r7, #16]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	8a3a      	ldrh	r2, [r7, #16]
 80034ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034f2:	b292      	uxth	r2, r2
 80034f4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f007 fa5e 	bl	800a9b8 <HAL_PCD_SetupStageCallback>
 80034fc:	e242      	b.n	8003984 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80034fe:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003502:	2b00      	cmp	r3, #0
 8003504:	f280 823e 	bge.w	8003984 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	881b      	ldrh	r3, [r3, #0]
 800350e:	b29a      	uxth	r2, r3
 8003510:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003514:	4013      	ands	r3, r2
 8003516:	83bb      	strh	r3, [r7, #28]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	8bba      	ldrh	r2, [r7, #28]
 800351e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003522:	b292      	uxth	r2, r2
 8003524:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800352e:	b29b      	uxth	r3, r3
 8003530:	461a      	mov	r2, r3
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	4413      	add	r3, r2
 800353a:	3306      	adds	r3, #6
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6812      	ldr	r2, [r2, #0]
 8003542:	4413      	add	r3, r2
 8003544:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d019      	beq.n	800358e <PCD_EP_ISR_Handler+0x1ee>
 800355a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d015      	beq.n	800358e <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	6959      	ldr	r1, [r3, #20]
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003572:	b29b      	uxth	r3, r3
 8003574:	f005 fc29 	bl	8008dca <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	695a      	ldr	r2, [r3, #20]
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	441a      	add	r2, r3
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003586:	2100      	movs	r1, #0
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f007 fa27 	bl	800a9dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	b29b      	uxth	r3, r3
 8003596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800359a:	2b00      	cmp	r3, #0
 800359c:	f040 81f2 	bne.w	8003984 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	61bb      	str	r3, [r7, #24]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	461a      	mov	r2, r3
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	4413      	add	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80035be:	617b      	str	r3, [r7, #20]
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d112      	bne.n	80035ee <PCD_EP_ISR_Handler+0x24e>
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	801a      	strh	r2, [r3, #0]
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	881b      	ldrh	r3, [r3, #0]
 80035dc:	b29b      	uxth	r3, r3
 80035de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	801a      	strh	r2, [r3, #0]
 80035ec:	e02f      	b.n	800364e <PCD_EP_ISR_Handler+0x2ae>
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	2b3e      	cmp	r3, #62	; 0x3e
 80035f4:	d813      	bhi.n	800361e <PCD_EP_ISR_Handler+0x27e>
 80035f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	085b      	lsrs	r3, r3, #1
 80035fc:	633b      	str	r3, [r7, #48]	; 0x30
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d002      	beq.n	8003610 <PCD_EP_ISR_Handler+0x270>
 800360a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360c:	3301      	adds	r3, #1
 800360e:	633b      	str	r3, [r7, #48]	; 0x30
 8003610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003612:	b29b      	uxth	r3, r3
 8003614:	029b      	lsls	r3, r3, #10
 8003616:	b29a      	uxth	r2, r3
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	801a      	strh	r2, [r3, #0]
 800361c:	e017      	b.n	800364e <PCD_EP_ISR_Handler+0x2ae>
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	095b      	lsrs	r3, r3, #5
 8003624:	633b      	str	r3, [r7, #48]	; 0x30
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	f003 031f 	and.w	r3, r3, #31
 800362e:	2b00      	cmp	r3, #0
 8003630:	d102      	bne.n	8003638 <PCD_EP_ISR_Handler+0x298>
 8003632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003634:	3b01      	subs	r3, #1
 8003636:	633b      	str	r3, [r7, #48]	; 0x30
 8003638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363a:	b29b      	uxth	r3, r3
 800363c:	029b      	lsls	r3, r3, #10
 800363e:	b29b      	uxth	r3, r3
 8003640:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003644:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003648:	b29a      	uxth	r2, r3
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	881b      	ldrh	r3, [r3, #0]
 8003654:	b29b      	uxth	r3, r3
 8003656:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800365a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365e:	827b      	strh	r3, [r7, #18]
 8003660:	8a7b      	ldrh	r3, [r7, #18]
 8003662:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003666:	827b      	strh	r3, [r7, #18]
 8003668:	8a7b      	ldrh	r3, [r7, #18]
 800366a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800366e:	827b      	strh	r3, [r7, #18]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	8a7b      	ldrh	r3, [r7, #18]
 8003676:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800367a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800367e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003686:	b29b      	uxth	r3, r3
 8003688:	8013      	strh	r3, [r2, #0]
 800368a:	e17b      	b.n	8003984 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	461a      	mov	r2, r3
 8003692:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4413      	add	r3, r2
 800369a:	881b      	ldrh	r3, [r3, #0]
 800369c:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800369e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f280 80ea 	bge.w	800387c <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	461a      	mov	r2, r3
 80036ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	881b      	ldrh	r3, [r3, #0]
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	f640 738f 	movw	r3, #3983	; 0xf8f
 80036be:	4013      	ands	r3, r2
 80036c0:	853b      	strh	r3, [r7, #40]	; 0x28
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	461a      	mov	r2, r3
 80036c8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80036d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036d6:	b292      	uxth	r2, r2
 80036d8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80036da:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80036de:	4613      	mov	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	4413      	add	r3, r2
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	4413      	add	r3, r2
 80036ee:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f2:	7b1b      	ldrb	r3, [r3, #12]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d122      	bne.n	800373e <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003700:	b29b      	uxth	r3, r3
 8003702:	461a      	mov	r2, r3
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	4413      	add	r3, r2
 800370c:	3306      	adds	r3, #6
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6812      	ldr	r2, [r2, #0]
 8003714:	4413      	add	r3, r2
 8003716:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800371a:	881b      	ldrh	r3, [r3, #0]
 800371c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003720:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003722:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 8087 	beq.w	8003838 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6818      	ldr	r0, [r3, #0]
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	6959      	ldr	r1, [r3, #20]
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	88da      	ldrh	r2, [r3, #6]
 8003736:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003738:	f005 fb47 	bl	8008dca <USB_ReadPMA>
 800373c:	e07c      	b.n	8003838 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	78db      	ldrb	r3, [r3, #3]
 8003742:	2b02      	cmp	r3, #2
 8003744:	d108      	bne.n	8003758 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003746:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003748:	461a      	mov	r2, r3
 800374a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f927 	bl	80039a0 <HAL_PCD_EP_DB_Receive>
 8003752:	4603      	mov	r3, r0
 8003754:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003756:	e06f      	b.n	8003838 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	461a      	mov	r2, r3
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	881b      	ldrh	r3, [r3, #0]
 8003768:	b29b      	uxth	r3, r3
 800376a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800376e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003772:	847b      	strh	r3, [r7, #34]	; 0x22
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	461a      	mov	r2, r3
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	441a      	add	r2, r3
 8003782:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003784:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003788:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800378c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003790:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003794:	b29b      	uxth	r3, r3
 8003796:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	461a      	mov	r2, r3
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	4413      	add	r3, r2
 80037a6:	881b      	ldrh	r3, [r3, #0]
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d021      	beq.n	80037f6 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	461a      	mov	r2, r3
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	4413      	add	r3, r2
 80037c6:	3302      	adds	r3, #2
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6812      	ldr	r2, [r2, #0]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037d4:	881b      	ldrh	r3, [r3, #0]
 80037d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037da:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80037dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d02a      	beq.n	8003838 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6818      	ldr	r0, [r3, #0]
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	6959      	ldr	r1, [r3, #20]
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	891a      	ldrh	r2, [r3, #8]
 80037ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037f0:	f005 faeb 	bl	8008dca <USB_ReadPMA>
 80037f4:	e020      	b.n	8003838 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037fe:	b29b      	uxth	r3, r3
 8003800:	461a      	mov	r2, r3
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	4413      	add	r3, r2
 800380a:	3306      	adds	r3, #6
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6812      	ldr	r2, [r2, #0]
 8003812:	4413      	add	r3, r2
 8003814:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800381e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003820:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003822:	2b00      	cmp	r3, #0
 8003824:	d008      	beq.n	8003838 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6818      	ldr	r0, [r3, #0]
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	6959      	ldr	r1, [r3, #20]
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	895a      	ldrh	r2, [r3, #10]
 8003832:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003834:	f005 fac9 	bl	8008dca <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	69da      	ldr	r2, [r3, #28]
 800383c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800383e:	441a      	add	r2, r3
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	695a      	ldr	r2, [r3, #20]
 8003848:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800384a:	441a      	add	r2, r3
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d004      	beq.n	8003862 <PCD_EP_ISR_Handler+0x4c2>
 8003858:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	429a      	cmp	r2, r3
 8003860:	d206      	bcs.n	8003870 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	4619      	mov	r1, r3
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f007 f8b7 	bl	800a9dc <HAL_PCD_DataOutStageCallback>
 800386e:	e005      	b.n	800387c <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003876:	4618      	mov	r0, r3
 8003878:	f003 faec 	bl	8006e54 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800387c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800387e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003882:	2b00      	cmp	r3, #0
 8003884:	d07e      	beq.n	8003984 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003886:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800388a:	1c5a      	adds	r2, r3, #1
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	4413      	add	r3, r2
 8003898:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	461a      	mov	r2, r3
 80038a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80038b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b4:	843b      	strh	r3, [r7, #32]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	441a      	add	r2, r3
 80038c4:	8c3b      	ldrh	r3, [r7, #32]
 80038c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	78db      	ldrb	r3, [r3, #3]
 80038d6:	2b03      	cmp	r3, #3
 80038d8:	d00c      	beq.n	80038f4 <PCD_EP_ISR_Handler+0x554>
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	78db      	ldrb	r3, [r3, #3]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d008      	beq.n	80038f4 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d146      	bne.n	8003978 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80038ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80038ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d141      	bne.n	8003978 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	461a      	mov	r2, r3
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	4413      	add	r3, r2
 8003908:	3302      	adds	r3, #2
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	4413      	add	r3, r2
 8003912:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003916:	881b      	ldrh	r3, [r3, #0]
 8003918:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800391c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	699a      	ldr	r2, [r3, #24]
 8003922:	8bfb      	ldrh	r3, [r7, #30]
 8003924:	429a      	cmp	r2, r3
 8003926:	d906      	bls.n	8003936 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	699a      	ldr	r2, [r3, #24]
 800392c:	8bfb      	ldrh	r3, [r7, #30]
 800392e:	1ad2      	subs	r2, r2, r3
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	619a      	str	r2, [r3, #24]
 8003934:	e002      	b.n	800393c <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	2200      	movs	r2, #0
 800393a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d106      	bne.n	8003952 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	4619      	mov	r1, r3
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f007 f861 	bl	800aa12 <HAL_PCD_DataInStageCallback>
 8003950:	e018      	b.n	8003984 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	695a      	ldr	r2, [r3, #20]
 8003956:	8bfb      	ldrh	r3, [r7, #30]
 8003958:	441a      	add	r2, r3
 800395a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	69da      	ldr	r2, [r3, #28]
 8003962:	8bfb      	ldrh	r3, [r7, #30]
 8003964:	441a      	add	r2, r3
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003970:	4618      	mov	r0, r3
 8003972:	f003 fa6f 	bl	8006e54 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003976:	e005      	b.n	8003984 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003978:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800397a:	461a      	mov	r2, r3
 800397c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f91b 	bl	8003bba <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800398c:	b29b      	uxth	r3, r3
 800398e:	b21b      	sxth	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	f6ff ad0a 	blt.w	80033aa <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3738      	adds	r7, #56	; 0x38
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b088      	sub	sp, #32
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	4613      	mov	r3, r2
 80039ac:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80039ae:	88fb      	ldrh	r3, [r7, #6]
 80039b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d07e      	beq.n	8003ab6 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	461a      	mov	r2, r3
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	4413      	add	r3, r2
 80039cc:	3302      	adds	r3, #2
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	6812      	ldr	r2, [r2, #0]
 80039d4:	4413      	add	r3, r2
 80039d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039da:	881b      	ldrh	r3, [r3, #0]
 80039dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039e0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	699a      	ldr	r2, [r3, #24]
 80039e6:	8b7b      	ldrh	r3, [r7, #26]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d306      	bcc.n	80039fa <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	699a      	ldr	r2, [r3, #24]
 80039f0:	8b7b      	ldrh	r3, [r7, #26]
 80039f2:	1ad2      	subs	r2, r2, r3
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	619a      	str	r2, [r3, #24]
 80039f8:	e002      	b.n	8003a00 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2200      	movs	r2, #0
 80039fe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d123      	bne.n	8003a50 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4413      	add	r3, r2
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a22:	833b      	strh	r3, [r7, #24]
 8003a24:	8b3b      	ldrh	r3, [r7, #24]
 8003a26:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003a2a:	833b      	strh	r3, [r7, #24]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	461a      	mov	r2, r3
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	441a      	add	r2, r3
 8003a3a:	8b3b      	ldrh	r3, [r7, #24]
 8003a3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a50:	88fb      	ldrh	r3, [r7, #6]
 8003a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d01f      	beq.n	8003a9a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a74:	82fb      	strh	r3, [r7, #22]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	441a      	add	r2, r3
 8003a84:	8afb      	ldrh	r3, [r7, #22]
 8003a86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003a9a:	8b7b      	ldrh	r3, [r7, #26]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 8087 	beq.w	8003bb0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6818      	ldr	r0, [r3, #0]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	6959      	ldr	r1, [r3, #20]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	891a      	ldrh	r2, [r3, #8]
 8003aae:	8b7b      	ldrh	r3, [r7, #26]
 8003ab0:	f005 f98b 	bl	8008dca <USB_ReadPMA>
 8003ab4:	e07c      	b.n	8003bb0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	4413      	add	r3, r2
 8003aca:	3306      	adds	r3, #6
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	6812      	ldr	r2, [r2, #0]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ad8:	881b      	ldrh	r3, [r3, #0]
 8003ada:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ade:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	699a      	ldr	r2, [r3, #24]
 8003ae4:	8b7b      	ldrh	r3, [r7, #26]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d306      	bcc.n	8003af8 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	699a      	ldr	r2, [r3, #24]
 8003aee:	8b7b      	ldrh	r3, [r7, #26]
 8003af0:	1ad2      	subs	r2, r2, r3
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	619a      	str	r2, [r3, #24]
 8003af6:	e002      	b.n	8003afe <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	2200      	movs	r2, #0
 8003afc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d123      	bne.n	8003b4e <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b20:	83fb      	strh	r3, [r7, #30]
 8003b22:	8bfb      	ldrh	r3, [r7, #30]
 8003b24:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003b28:	83fb      	strh	r3, [r7, #30]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	441a      	add	r2, r3
 8003b38:	8bfb      	ldrh	r3, [r7, #30]
 8003b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003b4e:	88fb      	ldrh	r3, [r7, #6]
 8003b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d11f      	bne.n	8003b98 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	881b      	ldrh	r3, [r3, #0]
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b72:	83bb      	strh	r3, [r7, #28]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	441a      	add	r2, r3
 8003b82:	8bbb      	ldrh	r3, [r7, #28]
 8003b84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003b98:	8b7b      	ldrh	r3, [r7, #26]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d008      	beq.n	8003bb0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6818      	ldr	r0, [r3, #0]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	6959      	ldr	r1, [r3, #20]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	895a      	ldrh	r2, [r3, #10]
 8003baa:	8b7b      	ldrh	r3, [r7, #26]
 8003bac:	f005 f90d 	bl	8008dca <USB_ReadPMA>
    }
  }

  return count;
 8003bb0:	8b7b      	ldrh	r3, [r7, #26]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3720      	adds	r7, #32
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b0a2      	sub	sp, #136	; 0x88
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	60f8      	str	r0, [r7, #12]
 8003bc2:	60b9      	str	r1, [r7, #8]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003bc8:	88fb      	ldrh	r3, [r7, #6]
 8003bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 81c7 	beq.w	8003f62 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	461a      	mov	r2, r3
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	4413      	add	r3, r2
 8003be8:	3302      	adds	r3, #2
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	6812      	ldr	r2, [r2, #0]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bf6:	881b      	ldrh	r3, [r3, #0]
 8003bf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bfc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	699a      	ldr	r2, [r3, #24]
 8003c04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d907      	bls.n	8003c1c <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	699a      	ldr	r2, [r3, #24]
 8003c10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c14:	1ad2      	subs	r2, r2, r3
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	619a      	str	r2, [r3, #24]
 8003c1a:	e002      	b.n	8003c22 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f040 80b9 	bne.w	8003d9e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	785b      	ldrb	r3, [r3, #1]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d126      	bne.n	8003c82 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	461a      	mov	r2, r3
 8003c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c48:	4413      	add	r3, r2
 8003c4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	011a      	lsls	r2, r3, #4
 8003c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c54:	4413      	add	r3, r2
 8003c56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	881b      	ldrh	r3, [r3, #0]
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	801a      	strh	r2, [r3, #0]
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	801a      	strh	r2, [r3, #0]
 8003c80:	e01a      	b.n	8003cb8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	785b      	ldrb	r3, [r3, #1]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d116      	bne.n	8003cb8 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	633b      	str	r3, [r7, #48]	; 0x30
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9e:	4413      	add	r3, r2
 8003ca0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	011a      	lsls	r2, r3, #4
 8003ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003caa:	4413      	add	r3, r2
 8003cac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	623b      	str	r3, [r7, #32]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	785b      	ldrb	r3, [r3, #1]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d126      	bne.n	8003d14 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	61bb      	str	r3, [r7, #24]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	4413      	add	r3, r2
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	011a      	lsls	r2, r3, #4
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003cec:	617b      	str	r3, [r7, #20]
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	881b      	ldrh	r3, [r3, #0]
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	801a      	strh	r2, [r3, #0]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	881b      	ldrh	r3, [r3, #0]
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	801a      	strh	r2, [r3, #0]
 8003d12:	e017      	b.n	8003d44 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	785b      	ldrb	r3, [r3, #1]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d113      	bne.n	8003d44 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	461a      	mov	r2, r3
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	623b      	str	r3, [r7, #32]
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	011a      	lsls	r2, r3, #4
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	4413      	add	r3, r2
 8003d38:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d3c:	61fb      	str	r3, [r7, #28]
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	2200      	movs	r2, #0
 8003d42:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	4619      	mov	r1, r3
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	f006 fe61 	bl	800aa12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d50:	88fb      	ldrh	r3, [r7, #6]
 8003d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 82d4 	beq.w	8004304 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	461a      	mov	r2, r3
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4413      	add	r3, r2
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d76:	827b      	strh	r3, [r7, #18]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	441a      	add	r2, r3
 8003d86:	8a7b      	ldrh	r3, [r7, #18]
 8003d88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	8013      	strh	r3, [r2, #0]
 8003d9c:	e2b2      	b.n	8004304 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d9e:	88fb      	ldrh	r3, [r7, #6]
 8003da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d021      	beq.n	8003dec <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	461a      	mov	r2, r3
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4413      	add	r3, r2
 8003db6:	881b      	ldrh	r3, [r3, #0]
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dc2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	441a      	add	r2, r3
 8003dd4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003dd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ddc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003de0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	f040 8286 	bne.w	8004304 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	695a      	ldr	r2, [r3, #20]
 8003dfc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e00:	441a      	add	r2, r3
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	69da      	ldr	r2, [r3, #28]
 8003e0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e0e:	441a      	add	r2, r3
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	6a1a      	ldr	r2, [r3, #32]
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d309      	bcc.n	8003e34 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	6a1a      	ldr	r2, [r3, #32]
 8003e2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e2c:	1ad2      	subs	r2, r2, r3
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	621a      	str	r2, [r3, #32]
 8003e32:	e015      	b.n	8003e60 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d107      	bne.n	8003e4c <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003e3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e40:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003e4a:	e009      	b.n	8003e60 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	785b      	ldrb	r3, [r3, #1]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d155      	bne.n	8003f14 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	461a      	mov	r2, r3
 8003e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7c:	4413      	add	r3, r2
 8003e7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	011a      	lsls	r2, r3, #4
 8003e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e88:	4413      	add	r3, r2
 8003e8a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e8e:	637b      	str	r3, [r7, #52]	; 0x34
 8003e90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d112      	bne.n	8003ebc <HAL_PCD_EP_DB_Transmit+0x302>
 8003e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e98:	881b      	ldrh	r3, [r3, #0]
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea4:	801a      	strh	r2, [r3, #0]
 8003ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea8:	881b      	ldrh	r3, [r3, #0]
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003eb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb8:	801a      	strh	r2, [r3, #0]
 8003eba:	e047      	b.n	8003f4c <HAL_PCD_EP_DB_Transmit+0x392>
 8003ebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ebe:	2b3e      	cmp	r3, #62	; 0x3e
 8003ec0:	d811      	bhi.n	8003ee6 <HAL_PCD_EP_DB_Transmit+0x32c>
 8003ec2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ec4:	085b      	lsrs	r3, r3, #1
 8003ec6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d002      	beq.n	8003ed8 <HAL_PCD_EP_DB_Transmit+0x31e>
 8003ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	029b      	lsls	r3, r3, #10
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ee2:	801a      	strh	r2, [r3, #0]
 8003ee4:	e032      	b.n	8003f4c <HAL_PCD_EP_DB_Transmit+0x392>
 8003ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ee8:	095b      	lsrs	r3, r3, #5
 8003eea:	64bb      	str	r3, [r7, #72]	; 0x48
 8003eec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eee:	f003 031f 	and.w	r3, r3, #31
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d102      	bne.n	8003efc <HAL_PCD_EP_DB_Transmit+0x342>
 8003ef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	64bb      	str	r3, [r7, #72]	; 0x48
 8003efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	029b      	lsls	r3, r3, #10
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f10:	801a      	strh	r2, [r3, #0]
 8003f12:	e01b      	b.n	8003f4c <HAL_PCD_EP_DB_Transmit+0x392>
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	785b      	ldrb	r3, [r3, #1]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d117      	bne.n	8003f4c <HAL_PCD_EP_DB_Transmit+0x392>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	643b      	str	r3, [r7, #64]	; 0x40
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f30:	4413      	add	r3, r2
 8003f32:	643b      	str	r3, [r7, #64]	; 0x40
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	011a      	lsls	r2, r3, #4
 8003f3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f4a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6818      	ldr	r0, [r3, #0]
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	6959      	ldr	r1, [r3, #20]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	891a      	ldrh	r2, [r3, #8]
 8003f58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	f004 fef0 	bl	8008d40 <USB_WritePMA>
 8003f60:	e1d0      	b.n	8004304 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	4413      	add	r3, r2
 8003f76:	3306      	adds	r3, #6
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	6812      	ldr	r2, [r2, #0]
 8003f7e:	4413      	add	r3, r2
 8003f80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f8a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	699a      	ldr	r2, [r3, #24]
 8003f92:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d307      	bcc.n	8003faa <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	699a      	ldr	r2, [r3, #24]
 8003f9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003fa2:	1ad2      	subs	r2, r2, r3
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	619a      	str	r2, [r3, #24]
 8003fa8:	e002      	b.n	8003fb0 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2200      	movs	r2, #0
 8003fae:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f040 80c4 	bne.w	8004142 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	785b      	ldrb	r3, [r3, #1]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d126      	bne.n	8004010 <HAL_PCD_EP_DB_Transmit+0x456>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd6:	4413      	add	r3, r2
 8003fd8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	011a      	lsls	r2, r3, #4
 8003fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003fe8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fec:	881b      	ldrh	r3, [r3, #0]
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ff8:	801a      	strh	r2, [r3, #0]
 8003ffa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ffc:	881b      	ldrh	r3, [r3, #0]
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004004:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004008:	b29a      	uxth	r2, r3
 800400a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800400c:	801a      	strh	r2, [r3, #0]
 800400e:	e01a      	b.n	8004046 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	785b      	ldrb	r3, [r3, #1]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d116      	bne.n	8004046 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	677b      	str	r3, [r7, #116]	; 0x74
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004026:	b29b      	uxth	r3, r3
 8004028:	461a      	mov	r2, r3
 800402a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800402c:	4413      	add	r3, r2
 800402e:	677b      	str	r3, [r7, #116]	; 0x74
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	011a      	lsls	r2, r3, #4
 8004036:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004038:	4413      	add	r3, r2
 800403a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800403e:	673b      	str	r3, [r7, #112]	; 0x70
 8004040:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004042:	2200      	movs	r2, #0
 8004044:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	67bb      	str	r3, [r7, #120]	; 0x78
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	785b      	ldrb	r3, [r3, #1]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d12f      	bne.n	80040b4 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004064:	b29b      	uxth	r3, r3
 8004066:	461a      	mov	r2, r3
 8004068:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800406c:	4413      	add	r3, r2
 800406e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	011a      	lsls	r2, r3, #4
 8004078:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800407c:	4413      	add	r3, r2
 800407e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004082:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004086:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	b29b      	uxth	r3, r3
 800408e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004092:	b29a      	uxth	r2, r3
 8004094:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004098:	801a      	strh	r2, [r3, #0]
 800409a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800409e:	881b      	ldrh	r3, [r3, #0]
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040b0:	801a      	strh	r2, [r3, #0]
 80040b2:	e017      	b.n	80040e4 <HAL_PCD_EP_DB_Transmit+0x52a>
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	785b      	ldrb	r3, [r3, #1]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d113      	bne.n	80040e4 <HAL_PCD_EP_DB_Transmit+0x52a>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	461a      	mov	r2, r3
 80040c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040ca:	4413      	add	r3, r2
 80040cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	011a      	lsls	r2, r3, #4
 80040d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040d6:	4413      	add	r3, r2
 80040d8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80040dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80040de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040e0:	2200      	movs	r2, #0
 80040e2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	4619      	mov	r1, r3
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f006 fc91 	bl	800aa12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80040f0:	88fb      	ldrh	r3, [r7, #6]
 80040f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f040 8104 	bne.w	8004304 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	461a      	mov	r2, r3
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	b29b      	uxth	r3, r3
 800410e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004116:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	461a      	mov	r2, r3
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	441a      	add	r2, r3
 8004128:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800412c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004130:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004134:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800413c:	b29b      	uxth	r3, r3
 800413e:	8013      	strh	r3, [r2, #0]
 8004140:	e0e0      	b.n	8004304 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004142:	88fb      	ldrh	r3, [r7, #6]
 8004144:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d121      	bne.n	8004190 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	461a      	mov	r2, r3
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	881b      	ldrh	r3, [r3, #0]
 800415c:	b29b      	uxth	r3, r3
 800415e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004166:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	461a      	mov	r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	441a      	add	r2, r3
 8004178:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800417c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004180:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004184:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800418c:	b29b      	uxth	r3, r3
 800418e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004196:	2b01      	cmp	r3, #1
 8004198:	f040 80b4 	bne.w	8004304 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	695a      	ldr	r2, [r3, #20]
 80041a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80041a4:	441a      	add	r2, r3
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	69da      	ldr	r2, [r3, #28]
 80041ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80041b2:	441a      	add	r2, r3
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	6a1a      	ldr	r2, [r3, #32]
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d309      	bcc.n	80041d8 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	6a1a      	ldr	r2, [r3, #32]
 80041ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041d0:	1ad2      	subs	r2, r2, r3
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	621a      	str	r2, [r3, #32]
 80041d6:	e015      	b.n	8004204 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d107      	bne.n	80041f0 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80041e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80041e4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80041ee:	e009      	b.n	8004204 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2200      	movs	r2, #0
 80041fa:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	667b      	str	r3, [r7, #100]	; 0x64
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	785b      	ldrb	r3, [r3, #1]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d155      	bne.n	80042be <HAL_PCD_EP_DB_Transmit+0x704>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004220:	b29b      	uxth	r3, r3
 8004222:	461a      	mov	r2, r3
 8004224:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004226:	4413      	add	r3, r2
 8004228:	65fb      	str	r3, [r7, #92]	; 0x5c
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	011a      	lsls	r2, r3, #4
 8004230:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004232:	4413      	add	r3, r2
 8004234:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004238:	65bb      	str	r3, [r7, #88]	; 0x58
 800423a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800423c:	2b00      	cmp	r3, #0
 800423e:	d112      	bne.n	8004266 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004240:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004242:	881b      	ldrh	r3, [r3, #0]
 8004244:	b29b      	uxth	r3, r3
 8004246:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800424a:	b29a      	uxth	r2, r3
 800424c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800424e:	801a      	strh	r2, [r3, #0]
 8004250:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	b29b      	uxth	r3, r3
 8004256:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800425a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800425e:	b29a      	uxth	r2, r3
 8004260:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004262:	801a      	strh	r2, [r3, #0]
 8004264:	e044      	b.n	80042f0 <HAL_PCD_EP_DB_Transmit+0x736>
 8004266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004268:	2b3e      	cmp	r3, #62	; 0x3e
 800426a:	d811      	bhi.n	8004290 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800426c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800426e:	085b      	lsrs	r3, r3, #1
 8004270:	657b      	str	r3, [r7, #84]	; 0x54
 8004272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d002      	beq.n	8004282 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800427c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800427e:	3301      	adds	r3, #1
 8004280:	657b      	str	r3, [r7, #84]	; 0x54
 8004282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004284:	b29b      	uxth	r3, r3
 8004286:	029b      	lsls	r3, r3, #10
 8004288:	b29a      	uxth	r2, r3
 800428a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800428c:	801a      	strh	r2, [r3, #0]
 800428e:	e02f      	b.n	80042f0 <HAL_PCD_EP_DB_Transmit+0x736>
 8004290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	657b      	str	r3, [r7, #84]	; 0x54
 8004296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004298:	f003 031f 	and.w	r3, r3, #31
 800429c:	2b00      	cmp	r3, #0
 800429e:	d102      	bne.n	80042a6 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80042a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042a2:	3b01      	subs	r3, #1
 80042a4:	657b      	str	r3, [r7, #84]	; 0x54
 80042a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	029b      	lsls	r3, r3, #10
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042ba:	801a      	strh	r2, [r3, #0]
 80042bc:	e018      	b.n	80042f0 <HAL_PCD_EP_DB_Transmit+0x736>
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	785b      	ldrb	r3, [r3, #1]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d114      	bne.n	80042f0 <HAL_PCD_EP_DB_Transmit+0x736>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	461a      	mov	r2, r3
 80042d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042d4:	4413      	add	r3, r2
 80042d6:	667b      	str	r3, [r7, #100]	; 0x64
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	011a      	lsls	r2, r3, #4
 80042de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042e0:	4413      	add	r3, r2
 80042e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042e6:	663b      	str	r3, [r7, #96]	; 0x60
 80042e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042ee:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6818      	ldr	r0, [r3, #0]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	6959      	ldr	r1, [r3, #20]
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	895a      	ldrh	r2, [r3, #10]
 80042fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042fe:	b29b      	uxth	r3, r3
 8004300:	f004 fd1e 	bl	8008d40 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	461a      	mov	r2, r3
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4413      	add	r3, r2
 8004312:	881b      	ldrh	r3, [r3, #0]
 8004314:	b29b      	uxth	r3, r3
 8004316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800431a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800431e:	823b      	strh	r3, [r7, #16]
 8004320:	8a3b      	ldrh	r3, [r7, #16]
 8004322:	f083 0310 	eor.w	r3, r3, #16
 8004326:	823b      	strh	r3, [r7, #16]
 8004328:	8a3b      	ldrh	r3, [r7, #16]
 800432a:	f083 0320 	eor.w	r3, r3, #32
 800432e:	823b      	strh	r3, [r7, #16]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	461a      	mov	r2, r3
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	441a      	add	r2, r3
 800433e:	8a3b      	ldrh	r3, [r7, #16]
 8004340:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004344:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800434c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004350:	b29b      	uxth	r3, r3
 8004352:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3788      	adds	r7, #136	; 0x88
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800435e:	b480      	push	{r7}
 8004360:	b087      	sub	sp, #28
 8004362:	af00      	add	r7, sp, #0
 8004364:	60f8      	str	r0, [r7, #12]
 8004366:	607b      	str	r3, [r7, #4]
 8004368:	460b      	mov	r3, r1
 800436a:	817b      	strh	r3, [r7, #10]
 800436c:	4613      	mov	r3, r2
 800436e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004370:	897b      	ldrh	r3, [r7, #10]
 8004372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004376:	b29b      	uxth	r3, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00b      	beq.n	8004394 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800437c:	897b      	ldrh	r3, [r7, #10]
 800437e:	f003 0307 	and.w	r3, r3, #7
 8004382:	1c5a      	adds	r2, r3, #1
 8004384:	4613      	mov	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	4413      	add	r3, r2
 8004390:	617b      	str	r3, [r7, #20]
 8004392:	e009      	b.n	80043a8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004394:	897a      	ldrh	r2, [r7, #10]
 8004396:	4613      	mov	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4413      	add	r3, r2
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	4413      	add	r3, r2
 80043a6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80043a8:	893b      	ldrh	r3, [r7, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d107      	bne.n	80043be <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2200      	movs	r2, #0
 80043b2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	80da      	strh	r2, [r3, #6]
 80043bc:	e00b      	b.n	80043d6 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	2201      	movs	r2, #1
 80043c2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	0c1b      	lsrs	r3, r3, #16
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	371c      	adds	r7, #28
 80043dc:	46bd      	mov	sp, r7
 80043de:	bc80      	pop	{r7}
 80043e0:	4770      	bx	lr
	...

080043e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e272      	b.n	80048dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f000 8087 	beq.w	8004512 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004404:	4b92      	ldr	r3, [pc, #584]	; (8004650 <HAL_RCC_OscConfig+0x26c>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f003 030c 	and.w	r3, r3, #12
 800440c:	2b04      	cmp	r3, #4
 800440e:	d00c      	beq.n	800442a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004410:	4b8f      	ldr	r3, [pc, #572]	; (8004650 <HAL_RCC_OscConfig+0x26c>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f003 030c 	and.w	r3, r3, #12
 8004418:	2b08      	cmp	r3, #8
 800441a:	d112      	bne.n	8004442 <HAL_RCC_OscConfig+0x5e>
 800441c:	4b8c      	ldr	r3, [pc, #560]	; (8004650 <HAL_RCC_OscConfig+0x26c>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004428:	d10b      	bne.n	8004442 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800442a:	4b89      	ldr	r3, [pc, #548]	; (8004650 <HAL_RCC_OscConfig+0x26c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d06c      	beq.n	8004510 <HAL_RCC_OscConfig+0x12c>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d168      	bne.n	8004510 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e24c      	b.n	80048dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800444a:	d106      	bne.n	800445a <HAL_RCC_OscConfig+0x76>
 800444c:	4b80      	ldr	r3, [pc, #512]	; (8004650 <HAL_RCC_OscConfig+0x26c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a7f      	ldr	r2, [pc, #508]	; (8004650 <HAL_RCC_OscConfig+0x26c>)
 8004452:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004456:	6013      	str	r3, [r2, #0]
 8004458:	e02e      	b.n	80044b8 <HAL_RCC_OscConfig+0xd4>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10c      	bne.n	800447c <HAL_RCC_OscConfig+0x98>
 8004462:	4b7b      	ldr	r3, [pc, #492]	; (8004650 <HAL_RCC_OscConfig+0x26c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a7a      	ldr	r2, [pc, #488]	; (8004650 <HAL_RCC_OscConfig+0x26c>)
 8004468:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800446c:	6013      	str	r3, [r2, #0]
 800446e:	4b78      	ldr	r3, [pc, #480]	; (8004650 <HAL_RCC_OscConfig+0x26c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a77      	ldr	r2, [pc, #476]	; (8004650 <HAL_RCC_OscConfig+0x26c>)
 8004474:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004478:	6013      	str	r3, [r2, #0]
 800447a:	e01d      	b.n	80044b8 <HAL_RCC_OscConfig+0xd4>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004484:	d10c      	bne.n	80044a0 <HAL_RCC_OscConfig+0xbc>
 8004486:	4b72      	ldr	r3, [pc, #456]	; (8004650 <HAL_RCC_OscConfig+0x26c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a71      	ldr	r2, [pc, #452]	; (8004650 <HAL_RCC_OscConfig+0x26c>)
 800448c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	4b6f      	ldr	r3, [pc, #444]	; (8004650 <HAL_RCC_OscConfig+0x26c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a6e      	ldr	r2, [pc, #440]	; (8004650 <HAL_RCC_OscConfig+0x26c>)
 8004498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	e00b      	b.n	80044b8 <HAL_RCC_OscConfig+0xd4>
 80044a0:	4b6b      	ldr	r3, [pc, #428]	; (8004650 <HAL_RCC_OscConfig+0x26c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a6a      	ldr	r2, [pc, #424]	; (8004650 <HAL_RCC_OscConfig+0x26c>)
 80044a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044aa:	6013      	str	r3, [r2, #0]
 80044ac:	4b68      	ldr	r3, [pc, #416]	; (8004650 <HAL_RCC_OscConfig+0x26c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a67      	ldr	r2, [pc, #412]	; (8004650 <HAL_RCC_OscConfig+0x26c>)
 80044b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d013      	beq.n	80044e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c0:	f7fd fce6 	bl	8001e90 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044c8:	f7fd fce2 	bl	8001e90 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b64      	cmp	r3, #100	; 0x64
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e200      	b.n	80048dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044da:	4b5d      	ldr	r3, [pc, #372]	; (8004650 <HAL_RCC_OscConfig+0x26c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0f0      	beq.n	80044c8 <HAL_RCC_OscConfig+0xe4>
 80044e6:	e014      	b.n	8004512 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e8:	f7fd fcd2 	bl	8001e90 <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044f0:	f7fd fcce 	bl	8001e90 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b64      	cmp	r3, #100	; 0x64
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e1ec      	b.n	80048dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004502:	4b53      	ldr	r3, [pc, #332]	; (8004650 <HAL_RCC_OscConfig+0x26c>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1f0      	bne.n	80044f0 <HAL_RCC_OscConfig+0x10c>
 800450e:	e000      	b.n	8004512 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d063      	beq.n	80045e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800451e:	4b4c      	ldr	r3, [pc, #304]	; (8004650 <HAL_RCC_OscConfig+0x26c>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f003 030c 	and.w	r3, r3, #12
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00b      	beq.n	8004542 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800452a:	4b49      	ldr	r3, [pc, #292]	; (8004650 <HAL_RCC_OscConfig+0x26c>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f003 030c 	and.w	r3, r3, #12
 8004532:	2b08      	cmp	r3, #8
 8004534:	d11c      	bne.n	8004570 <HAL_RCC_OscConfig+0x18c>
 8004536:	4b46      	ldr	r3, [pc, #280]	; (8004650 <HAL_RCC_OscConfig+0x26c>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d116      	bne.n	8004570 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004542:	4b43      	ldr	r3, [pc, #268]	; (8004650 <HAL_RCC_OscConfig+0x26c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d005      	beq.n	800455a <HAL_RCC_OscConfig+0x176>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d001      	beq.n	800455a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e1c0      	b.n	80048dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800455a:	4b3d      	ldr	r3, [pc, #244]	; (8004650 <HAL_RCC_OscConfig+0x26c>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	00db      	lsls	r3, r3, #3
 8004568:	4939      	ldr	r1, [pc, #228]	; (8004650 <HAL_RCC_OscConfig+0x26c>)
 800456a:	4313      	orrs	r3, r2
 800456c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800456e:	e03a      	b.n	80045e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d020      	beq.n	80045ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004578:	4b36      	ldr	r3, [pc, #216]	; (8004654 <HAL_RCC_OscConfig+0x270>)
 800457a:	2201      	movs	r2, #1
 800457c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457e:	f7fd fc87 	bl	8001e90 <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004584:	e008      	b.n	8004598 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004586:	f7fd fc83 	bl	8001e90 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d901      	bls.n	8004598 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e1a1      	b.n	80048dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004598:	4b2d      	ldr	r3, [pc, #180]	; (8004650 <HAL_RCC_OscConfig+0x26c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0f0      	beq.n	8004586 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a4:	4b2a      	ldr	r3, [pc, #168]	; (8004650 <HAL_RCC_OscConfig+0x26c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	4927      	ldr	r1, [pc, #156]	; (8004650 <HAL_RCC_OscConfig+0x26c>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	600b      	str	r3, [r1, #0]
 80045b8:	e015      	b.n	80045e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045ba:	4b26      	ldr	r3, [pc, #152]	; (8004654 <HAL_RCC_OscConfig+0x270>)
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c0:	f7fd fc66 	bl	8001e90 <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045c8:	f7fd fc62 	bl	8001e90 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e180      	b.n	80048dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045da:	4b1d      	ldr	r3, [pc, #116]	; (8004650 <HAL_RCC_OscConfig+0x26c>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f0      	bne.n	80045c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d03a      	beq.n	8004668 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d019      	beq.n	800462e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045fa:	4b17      	ldr	r3, [pc, #92]	; (8004658 <HAL_RCC_OscConfig+0x274>)
 80045fc:	2201      	movs	r2, #1
 80045fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004600:	f7fd fc46 	bl	8001e90 <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004608:	f7fd fc42 	bl	8001e90 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e160      	b.n	80048dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800461a:	4b0d      	ldr	r3, [pc, #52]	; (8004650 <HAL_RCC_OscConfig+0x26c>)
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0f0      	beq.n	8004608 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004626:	2001      	movs	r0, #1
 8004628:	f000 fad8 	bl	8004bdc <RCC_Delay>
 800462c:	e01c      	b.n	8004668 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800462e:	4b0a      	ldr	r3, [pc, #40]	; (8004658 <HAL_RCC_OscConfig+0x274>)
 8004630:	2200      	movs	r2, #0
 8004632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004634:	f7fd fc2c 	bl	8001e90 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800463a:	e00f      	b.n	800465c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800463c:	f7fd fc28 	bl	8001e90 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d908      	bls.n	800465c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e146      	b.n	80048dc <HAL_RCC_OscConfig+0x4f8>
 800464e:	bf00      	nop
 8004650:	40021000 	.word	0x40021000
 8004654:	42420000 	.word	0x42420000
 8004658:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800465c:	4b92      	ldr	r3, [pc, #584]	; (80048a8 <HAL_RCC_OscConfig+0x4c4>)
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1e9      	bne.n	800463c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 80a6 	beq.w	80047c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004676:	2300      	movs	r3, #0
 8004678:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800467a:	4b8b      	ldr	r3, [pc, #556]	; (80048a8 <HAL_RCC_OscConfig+0x4c4>)
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10d      	bne.n	80046a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004686:	4b88      	ldr	r3, [pc, #544]	; (80048a8 <HAL_RCC_OscConfig+0x4c4>)
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	4a87      	ldr	r2, [pc, #540]	; (80048a8 <HAL_RCC_OscConfig+0x4c4>)
 800468c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004690:	61d3      	str	r3, [r2, #28]
 8004692:	4b85      	ldr	r3, [pc, #532]	; (80048a8 <HAL_RCC_OscConfig+0x4c4>)
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800469a:	60bb      	str	r3, [r7, #8]
 800469c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800469e:	2301      	movs	r3, #1
 80046a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a2:	4b82      	ldr	r3, [pc, #520]	; (80048ac <HAL_RCC_OscConfig+0x4c8>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d118      	bne.n	80046e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046ae:	4b7f      	ldr	r3, [pc, #508]	; (80048ac <HAL_RCC_OscConfig+0x4c8>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a7e      	ldr	r2, [pc, #504]	; (80048ac <HAL_RCC_OscConfig+0x4c8>)
 80046b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ba:	f7fd fbe9 	bl	8001e90 <HAL_GetTick>
 80046be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046c2:	f7fd fbe5 	bl	8001e90 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b64      	cmp	r3, #100	; 0x64
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e103      	b.n	80048dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d4:	4b75      	ldr	r3, [pc, #468]	; (80048ac <HAL_RCC_OscConfig+0x4c8>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0f0      	beq.n	80046c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d106      	bne.n	80046f6 <HAL_RCC_OscConfig+0x312>
 80046e8:	4b6f      	ldr	r3, [pc, #444]	; (80048a8 <HAL_RCC_OscConfig+0x4c4>)
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	4a6e      	ldr	r2, [pc, #440]	; (80048a8 <HAL_RCC_OscConfig+0x4c4>)
 80046ee:	f043 0301 	orr.w	r3, r3, #1
 80046f2:	6213      	str	r3, [r2, #32]
 80046f4:	e02d      	b.n	8004752 <HAL_RCC_OscConfig+0x36e>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10c      	bne.n	8004718 <HAL_RCC_OscConfig+0x334>
 80046fe:	4b6a      	ldr	r3, [pc, #424]	; (80048a8 <HAL_RCC_OscConfig+0x4c4>)
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	4a69      	ldr	r2, [pc, #420]	; (80048a8 <HAL_RCC_OscConfig+0x4c4>)
 8004704:	f023 0301 	bic.w	r3, r3, #1
 8004708:	6213      	str	r3, [r2, #32]
 800470a:	4b67      	ldr	r3, [pc, #412]	; (80048a8 <HAL_RCC_OscConfig+0x4c4>)
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	4a66      	ldr	r2, [pc, #408]	; (80048a8 <HAL_RCC_OscConfig+0x4c4>)
 8004710:	f023 0304 	bic.w	r3, r3, #4
 8004714:	6213      	str	r3, [r2, #32]
 8004716:	e01c      	b.n	8004752 <HAL_RCC_OscConfig+0x36e>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	2b05      	cmp	r3, #5
 800471e:	d10c      	bne.n	800473a <HAL_RCC_OscConfig+0x356>
 8004720:	4b61      	ldr	r3, [pc, #388]	; (80048a8 <HAL_RCC_OscConfig+0x4c4>)
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	4a60      	ldr	r2, [pc, #384]	; (80048a8 <HAL_RCC_OscConfig+0x4c4>)
 8004726:	f043 0304 	orr.w	r3, r3, #4
 800472a:	6213      	str	r3, [r2, #32]
 800472c:	4b5e      	ldr	r3, [pc, #376]	; (80048a8 <HAL_RCC_OscConfig+0x4c4>)
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	4a5d      	ldr	r2, [pc, #372]	; (80048a8 <HAL_RCC_OscConfig+0x4c4>)
 8004732:	f043 0301 	orr.w	r3, r3, #1
 8004736:	6213      	str	r3, [r2, #32]
 8004738:	e00b      	b.n	8004752 <HAL_RCC_OscConfig+0x36e>
 800473a:	4b5b      	ldr	r3, [pc, #364]	; (80048a8 <HAL_RCC_OscConfig+0x4c4>)
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	4a5a      	ldr	r2, [pc, #360]	; (80048a8 <HAL_RCC_OscConfig+0x4c4>)
 8004740:	f023 0301 	bic.w	r3, r3, #1
 8004744:	6213      	str	r3, [r2, #32]
 8004746:	4b58      	ldr	r3, [pc, #352]	; (80048a8 <HAL_RCC_OscConfig+0x4c4>)
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	4a57      	ldr	r2, [pc, #348]	; (80048a8 <HAL_RCC_OscConfig+0x4c4>)
 800474c:	f023 0304 	bic.w	r3, r3, #4
 8004750:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d015      	beq.n	8004786 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800475a:	f7fd fb99 	bl	8001e90 <HAL_GetTick>
 800475e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004760:	e00a      	b.n	8004778 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004762:	f7fd fb95 	bl	8001e90 <HAL_GetTick>
 8004766:	4602      	mov	r2, r0
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004770:	4293      	cmp	r3, r2
 8004772:	d901      	bls.n	8004778 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e0b1      	b.n	80048dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004778:	4b4b      	ldr	r3, [pc, #300]	; (80048a8 <HAL_RCC_OscConfig+0x4c4>)
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	f003 0302 	and.w	r3, r3, #2
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0ee      	beq.n	8004762 <HAL_RCC_OscConfig+0x37e>
 8004784:	e014      	b.n	80047b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004786:	f7fd fb83 	bl	8001e90 <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800478c:	e00a      	b.n	80047a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800478e:	f7fd fb7f 	bl	8001e90 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	f241 3288 	movw	r2, #5000	; 0x1388
 800479c:	4293      	cmp	r3, r2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e09b      	b.n	80048dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047a4:	4b40      	ldr	r3, [pc, #256]	; (80048a8 <HAL_RCC_OscConfig+0x4c4>)
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1ee      	bne.n	800478e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047b0:	7dfb      	ldrb	r3, [r7, #23]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d105      	bne.n	80047c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047b6:	4b3c      	ldr	r3, [pc, #240]	; (80048a8 <HAL_RCC_OscConfig+0x4c4>)
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	4a3b      	ldr	r2, [pc, #236]	; (80048a8 <HAL_RCC_OscConfig+0x4c4>)
 80047bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f000 8087 	beq.w	80048da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047cc:	4b36      	ldr	r3, [pc, #216]	; (80048a8 <HAL_RCC_OscConfig+0x4c4>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f003 030c 	and.w	r3, r3, #12
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d061      	beq.n	800489c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d146      	bne.n	800486e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047e0:	4b33      	ldr	r3, [pc, #204]	; (80048b0 <HAL_RCC_OscConfig+0x4cc>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e6:	f7fd fb53 	bl	8001e90 <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047ec:	e008      	b.n	8004800 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ee:	f7fd fb4f 	bl	8001e90 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e06d      	b.n	80048dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004800:	4b29      	ldr	r3, [pc, #164]	; (80048a8 <HAL_RCC_OscConfig+0x4c4>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1f0      	bne.n	80047ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004814:	d108      	bne.n	8004828 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004816:	4b24      	ldr	r3, [pc, #144]	; (80048a8 <HAL_RCC_OscConfig+0x4c4>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	4921      	ldr	r1, [pc, #132]	; (80048a8 <HAL_RCC_OscConfig+0x4c4>)
 8004824:	4313      	orrs	r3, r2
 8004826:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004828:	4b1f      	ldr	r3, [pc, #124]	; (80048a8 <HAL_RCC_OscConfig+0x4c4>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a19      	ldr	r1, [r3, #32]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	430b      	orrs	r3, r1
 800483a:	491b      	ldr	r1, [pc, #108]	; (80048a8 <HAL_RCC_OscConfig+0x4c4>)
 800483c:	4313      	orrs	r3, r2
 800483e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004840:	4b1b      	ldr	r3, [pc, #108]	; (80048b0 <HAL_RCC_OscConfig+0x4cc>)
 8004842:	2201      	movs	r2, #1
 8004844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004846:	f7fd fb23 	bl	8001e90 <HAL_GetTick>
 800484a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800484c:	e008      	b.n	8004860 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800484e:	f7fd fb1f 	bl	8001e90 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d901      	bls.n	8004860 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e03d      	b.n	80048dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004860:	4b11      	ldr	r3, [pc, #68]	; (80048a8 <HAL_RCC_OscConfig+0x4c4>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0f0      	beq.n	800484e <HAL_RCC_OscConfig+0x46a>
 800486c:	e035      	b.n	80048da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800486e:	4b10      	ldr	r3, [pc, #64]	; (80048b0 <HAL_RCC_OscConfig+0x4cc>)
 8004870:	2200      	movs	r2, #0
 8004872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004874:	f7fd fb0c 	bl	8001e90 <HAL_GetTick>
 8004878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800487c:	f7fd fb08 	bl	8001e90 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e026      	b.n	80048dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800488e:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <HAL_RCC_OscConfig+0x4c4>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1f0      	bne.n	800487c <HAL_RCC_OscConfig+0x498>
 800489a:	e01e      	b.n	80048da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	69db      	ldr	r3, [r3, #28]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d107      	bne.n	80048b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e019      	b.n	80048dc <HAL_RCC_OscConfig+0x4f8>
 80048a8:	40021000 	.word	0x40021000
 80048ac:	40007000 	.word	0x40007000
 80048b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048b4:	4b0b      	ldr	r3, [pc, #44]	; (80048e4 <HAL_RCC_OscConfig+0x500>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d106      	bne.n	80048d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d001      	beq.n	80048da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e000      	b.n	80048dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3718      	adds	r7, #24
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40021000 	.word	0x40021000

080048e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e0d0      	b.n	8004a9e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048fc:	4b6a      	ldr	r3, [pc, #424]	; (8004aa8 <HAL_RCC_ClockConfig+0x1c0>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0307 	and.w	r3, r3, #7
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	429a      	cmp	r2, r3
 8004908:	d910      	bls.n	800492c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800490a:	4b67      	ldr	r3, [pc, #412]	; (8004aa8 <HAL_RCC_ClockConfig+0x1c0>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f023 0207 	bic.w	r2, r3, #7
 8004912:	4965      	ldr	r1, [pc, #404]	; (8004aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	4313      	orrs	r3, r2
 8004918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800491a:	4b63      	ldr	r3, [pc, #396]	; (8004aa8 <HAL_RCC_ClockConfig+0x1c0>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	429a      	cmp	r2, r3
 8004926:	d001      	beq.n	800492c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e0b8      	b.n	8004a9e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d020      	beq.n	800497a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b00      	cmp	r3, #0
 8004942:	d005      	beq.n	8004950 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004944:	4b59      	ldr	r3, [pc, #356]	; (8004aac <HAL_RCC_ClockConfig+0x1c4>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	4a58      	ldr	r2, [pc, #352]	; (8004aac <HAL_RCC_ClockConfig+0x1c4>)
 800494a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800494e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0308 	and.w	r3, r3, #8
 8004958:	2b00      	cmp	r3, #0
 800495a:	d005      	beq.n	8004968 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800495c:	4b53      	ldr	r3, [pc, #332]	; (8004aac <HAL_RCC_ClockConfig+0x1c4>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	4a52      	ldr	r2, [pc, #328]	; (8004aac <HAL_RCC_ClockConfig+0x1c4>)
 8004962:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004966:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004968:	4b50      	ldr	r3, [pc, #320]	; (8004aac <HAL_RCC_ClockConfig+0x1c4>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	494d      	ldr	r1, [pc, #308]	; (8004aac <HAL_RCC_ClockConfig+0x1c4>)
 8004976:	4313      	orrs	r3, r2
 8004978:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d040      	beq.n	8004a08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d107      	bne.n	800499e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800498e:	4b47      	ldr	r3, [pc, #284]	; (8004aac <HAL_RCC_ClockConfig+0x1c4>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d115      	bne.n	80049c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e07f      	b.n	8004a9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d107      	bne.n	80049b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049a6:	4b41      	ldr	r3, [pc, #260]	; (8004aac <HAL_RCC_ClockConfig+0x1c4>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d109      	bne.n	80049c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e073      	b.n	8004a9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049b6:	4b3d      	ldr	r3, [pc, #244]	; (8004aac <HAL_RCC_ClockConfig+0x1c4>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e06b      	b.n	8004a9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049c6:	4b39      	ldr	r3, [pc, #228]	; (8004aac <HAL_RCC_ClockConfig+0x1c4>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f023 0203 	bic.w	r2, r3, #3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	4936      	ldr	r1, [pc, #216]	; (8004aac <HAL_RCC_ClockConfig+0x1c4>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049d8:	f7fd fa5a 	bl	8001e90 <HAL_GetTick>
 80049dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049de:	e00a      	b.n	80049f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049e0:	f7fd fa56 	bl	8001e90 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e053      	b.n	8004a9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049f6:	4b2d      	ldr	r3, [pc, #180]	; (8004aac <HAL_RCC_ClockConfig+0x1c4>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f003 020c 	and.w	r2, r3, #12
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d1eb      	bne.n	80049e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a08:	4b27      	ldr	r3, [pc, #156]	; (8004aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0307 	and.w	r3, r3, #7
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d210      	bcs.n	8004a38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a16:	4b24      	ldr	r3, [pc, #144]	; (8004aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f023 0207 	bic.w	r2, r3, #7
 8004a1e:	4922      	ldr	r1, [pc, #136]	; (8004aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a26:	4b20      	ldr	r3, [pc, #128]	; (8004aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0307 	and.w	r3, r3, #7
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d001      	beq.n	8004a38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e032      	b.n	8004a9e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0304 	and.w	r3, r3, #4
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d008      	beq.n	8004a56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a44:	4b19      	ldr	r3, [pc, #100]	; (8004aac <HAL_RCC_ClockConfig+0x1c4>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	4916      	ldr	r1, [pc, #88]	; (8004aac <HAL_RCC_ClockConfig+0x1c4>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0308 	and.w	r3, r3, #8
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d009      	beq.n	8004a76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a62:	4b12      	ldr	r3, [pc, #72]	; (8004aac <HAL_RCC_ClockConfig+0x1c4>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	490e      	ldr	r1, [pc, #56]	; (8004aac <HAL_RCC_ClockConfig+0x1c4>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a76:	f000 f821 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <HAL_RCC_ClockConfig+0x1c4>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	091b      	lsrs	r3, r3, #4
 8004a82:	f003 030f 	and.w	r3, r3, #15
 8004a86:	490a      	ldr	r1, [pc, #40]	; (8004ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a88:	5ccb      	ldrb	r3, [r1, r3]
 8004a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a8e:	4a09      	ldr	r2, [pc, #36]	; (8004ab4 <HAL_RCC_ClockConfig+0x1cc>)
 8004a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a92:	4b09      	ldr	r3, [pc, #36]	; (8004ab8 <HAL_RCC_ClockConfig+0x1d0>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fd f9b8 	bl	8001e0c <HAL_InitTick>

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	40022000 	.word	0x40022000
 8004aac:	40021000 	.word	0x40021000
 8004ab0:	0800afa4 	.word	0x0800afa4
 8004ab4:	20000004 	.word	0x20000004
 8004ab8:	20000008 	.word	0x20000008

08004abc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004abc:	b490      	push	{r4, r7}
 8004abe:	b08a      	sub	sp, #40	; 0x28
 8004ac0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004ac2:	4b29      	ldr	r3, [pc, #164]	; (8004b68 <HAL_RCC_GetSysClockFreq+0xac>)
 8004ac4:	1d3c      	adds	r4, r7, #4
 8004ac6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ac8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004acc:	f240 2301 	movw	r3, #513	; 0x201
 8004ad0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	61fb      	str	r3, [r7, #28]
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	61bb      	str	r3, [r7, #24]
 8004ada:	2300      	movs	r3, #0
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ade:	2300      	movs	r3, #0
 8004ae0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004ae6:	4b21      	ldr	r3, [pc, #132]	; (8004b6c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	f003 030c 	and.w	r3, r3, #12
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d002      	beq.n	8004afc <HAL_RCC_GetSysClockFreq+0x40>
 8004af6:	2b08      	cmp	r3, #8
 8004af8:	d003      	beq.n	8004b02 <HAL_RCC_GetSysClockFreq+0x46>
 8004afa:	e02b      	b.n	8004b54 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004afc:	4b1c      	ldr	r3, [pc, #112]	; (8004b70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004afe:	623b      	str	r3, [r7, #32]
      break;
 8004b00:	e02b      	b.n	8004b5a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	0c9b      	lsrs	r3, r3, #18
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	3328      	adds	r3, #40	; 0x28
 8004b0c:	443b      	add	r3, r7
 8004b0e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004b12:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d012      	beq.n	8004b44 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b1e:	4b13      	ldr	r3, [pc, #76]	; (8004b6c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	0c5b      	lsrs	r3, r3, #17
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	3328      	adds	r3, #40	; 0x28
 8004b2a:	443b      	add	r3, r7
 8004b2c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004b30:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	4a0e      	ldr	r2, [pc, #56]	; (8004b70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b36:	fb03 f202 	mul.w	r2, r3, r2
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b40:	627b      	str	r3, [r7, #36]	; 0x24
 8004b42:	e004      	b.n	8004b4e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	4a0b      	ldr	r2, [pc, #44]	; (8004b74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b48:	fb02 f303 	mul.w	r3, r2, r3
 8004b4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	623b      	str	r3, [r7, #32]
      break;
 8004b52:	e002      	b.n	8004b5a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b54:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b56:	623b      	str	r3, [r7, #32]
      break;
 8004b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3728      	adds	r7, #40	; 0x28
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bc90      	pop	{r4, r7}
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	0800af4c 	.word	0x0800af4c
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	007a1200 	.word	0x007a1200
 8004b74:	003d0900 	.word	0x003d0900

08004b78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b7c:	4b02      	ldr	r3, [pc, #8]	; (8004b88 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bc80      	pop	{r7}
 8004b86:	4770      	bx	lr
 8004b88:	20000004 	.word	0x20000004

08004b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b90:	f7ff fff2 	bl	8004b78 <HAL_RCC_GetHCLKFreq>
 8004b94:	4602      	mov	r2, r0
 8004b96:	4b05      	ldr	r3, [pc, #20]	; (8004bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	0a1b      	lsrs	r3, r3, #8
 8004b9c:	f003 0307 	and.w	r3, r3, #7
 8004ba0:	4903      	ldr	r1, [pc, #12]	; (8004bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ba2:	5ccb      	ldrb	r3, [r1, r3]
 8004ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	40021000 	.word	0x40021000
 8004bb0:	0800afb4 	.word	0x0800afb4

08004bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004bb8:	f7ff ffde 	bl	8004b78 <HAL_RCC_GetHCLKFreq>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	4b05      	ldr	r3, [pc, #20]	; (8004bd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	0adb      	lsrs	r3, r3, #11
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	4903      	ldr	r1, [pc, #12]	; (8004bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bca:	5ccb      	ldrb	r3, [r1, r3]
 8004bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	0800afb4 	.word	0x0800afb4

08004bdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004be4:	4b0a      	ldr	r3, [pc, #40]	; (8004c10 <RCC_Delay+0x34>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a0a      	ldr	r2, [pc, #40]	; (8004c14 <RCC_Delay+0x38>)
 8004bea:	fba2 2303 	umull	r2, r3, r2, r3
 8004bee:	0a5b      	lsrs	r3, r3, #9
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	fb02 f303 	mul.w	r3, r2, r3
 8004bf6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004bf8:	bf00      	nop
  }
  while (Delay --);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	1e5a      	subs	r2, r3, #1
 8004bfe:	60fa      	str	r2, [r7, #12]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1f9      	bne.n	8004bf8 <RCC_Delay+0x1c>
}
 8004c04:	bf00      	nop
 8004c06:	bf00      	nop
 8004c08:	3714      	adds	r7, #20
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bc80      	pop	{r7}
 8004c0e:	4770      	bx	lr
 8004c10:	20000004 	.word	0x20000004
 8004c14:	10624dd3 	.word	0x10624dd3

08004c18 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004c20:	2300      	movs	r3, #0
 8004c22:	613b      	str	r3, [r7, #16]
 8004c24:	2300      	movs	r3, #0
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d07d      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004c34:	2300      	movs	r3, #0
 8004c36:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c38:	4b4f      	ldr	r3, [pc, #316]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10d      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c44:	4b4c      	ldr	r3, [pc, #304]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	4a4b      	ldr	r2, [pc, #300]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c4e:	61d3      	str	r3, [r2, #28]
 8004c50:	4b49      	ldr	r3, [pc, #292]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c52:	69db      	ldr	r3, [r3, #28]
 8004c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c58:	60bb      	str	r3, [r7, #8]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c60:	4b46      	ldr	r3, [pc, #280]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d118      	bne.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c6c:	4b43      	ldr	r3, [pc, #268]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a42      	ldr	r2, [pc, #264]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c78:	f7fd f90a 	bl	8001e90 <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c7e:	e008      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c80:	f7fd f906 	bl	8001e90 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b64      	cmp	r3, #100	; 0x64
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e06d      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c92:	4b3a      	ldr	r3, [pc, #232]	; (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0f0      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c9e:	4b36      	ldr	r3, [pc, #216]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ca6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d02e      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d027      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cbc:	4b2e      	ldr	r3, [pc, #184]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cc4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cc6:	4b2e      	ldr	r3, [pc, #184]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cc8:	2201      	movs	r2, #1
 8004cca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ccc:	4b2c      	ldr	r3, [pc, #176]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004cd2:	4a29      	ldr	r2, [pc, #164]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d014      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce2:	f7fd f8d5 	bl	8001e90 <HAL_GetTick>
 8004ce6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ce8:	e00a      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cea:	f7fd f8d1 	bl	8001e90 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e036      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d00:	4b1d      	ldr	r3, [pc, #116]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d02:	6a1b      	ldr	r3, [r3, #32]
 8004d04:	f003 0302 	and.w	r3, r3, #2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d0ee      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d0c:	4b1a      	ldr	r3, [pc, #104]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	4917      	ldr	r1, [pc, #92]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d1e:	7dfb      	ldrb	r3, [r7, #23]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d105      	bne.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d24:	4b14      	ldr	r3, [pc, #80]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d26:	69db      	ldr	r3, [r3, #28]
 8004d28:	4a13      	ldr	r2, [pc, #76]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d2e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d008      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d3c:	4b0e      	ldr	r3, [pc, #56]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	490b      	ldr	r1, [pc, #44]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0310 	and.w	r3, r3, #16
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d008      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d5a:	4b07      	ldr	r3, [pc, #28]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	4904      	ldr	r1, [pc, #16]	; (8004d78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3718      	adds	r7, #24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	40021000 	.word	0x40021000
 8004d7c:	40007000 	.word	0x40007000
 8004d80:	42420440 	.word	0x42420440

08004d84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e041      	b.n	8004e1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d106      	bne.n	8004db0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7fc ff2e 	bl	8001c0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	3304      	adds	r3, #4
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4610      	mov	r0, r2
 8004dc4:	f000 fc9c 	bl	8005700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
	...

08004e24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d001      	beq.n	8004e3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e032      	b.n	8004ea2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a18      	ldr	r2, [pc, #96]	; (8004eac <HAL_TIM_Base_Start+0x88>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00e      	beq.n	8004e6c <HAL_TIM_Base_Start+0x48>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e56:	d009      	beq.n	8004e6c <HAL_TIM_Base_Start+0x48>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a14      	ldr	r2, [pc, #80]	; (8004eb0 <HAL_TIM_Base_Start+0x8c>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d004      	beq.n	8004e6c <HAL_TIM_Base_Start+0x48>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a13      	ldr	r2, [pc, #76]	; (8004eb4 <HAL_TIM_Base_Start+0x90>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d111      	bne.n	8004e90 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f003 0307 	and.w	r3, r3, #7
 8004e76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2b06      	cmp	r3, #6
 8004e7c:	d010      	beq.n	8004ea0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f042 0201 	orr.w	r2, r2, #1
 8004e8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e8e:	e007      	b.n	8004ea0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f042 0201 	orr.w	r2, r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3714      	adds	r7, #20
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bc80      	pop	{r7}
 8004eaa:	4770      	bx	lr
 8004eac:	40012c00 	.word	0x40012c00
 8004eb0:	40000400 	.word	0x40000400
 8004eb4:	40000800 	.word	0x40000800

08004eb8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68da      	ldr	r2, [r3, #12]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 0201 	bic.w	r2, r2, #1
 8004ece:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6a1a      	ldr	r2, [r3, #32]
 8004ed6:	f241 1311 	movw	r3, #4369	; 0x1111
 8004eda:	4013      	ands	r3, r2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10f      	bne.n	8004f00 <HAL_TIM_Base_Stop_IT+0x48>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6a1a      	ldr	r2, [r3, #32]
 8004ee6:	f240 4344 	movw	r3, #1092	; 0x444
 8004eea:	4013      	ands	r3, r2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d107      	bne.n	8004f00 <HAL_TIM_Base_Stop_IT+0x48>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 0201 	bic.w	r2, r2, #1
 8004efe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bc80      	pop	{r7}
 8004f12:	4770      	bx	lr

08004f14 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d101      	bne.n	8004f28 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e093      	b.n	8005050 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d106      	bne.n	8004f42 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7fc fe21 	bl	8001b84 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2202      	movs	r2, #2
 8004f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	6812      	ldr	r2, [r2, #0]
 8004f54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f58:	f023 0307 	bic.w	r3, r3, #7
 8004f5c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	3304      	adds	r3, #4
 8004f66:	4619      	mov	r1, r3
 8004f68:	4610      	mov	r0, r2
 8004f6a:	f000 fbc9 	bl	8005700 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6a1b      	ldr	r3, [r3, #32]
 8004f84:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f96:	f023 0303 	bic.w	r3, r3, #3
 8004f9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	021b      	lsls	r3, r3, #8
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004fb4:	f023 030c 	bic.w	r3, r3, #12
 8004fb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	68da      	ldr	r2, [r3, #12]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	021b      	lsls	r3, r3, #8
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	011a      	lsls	r2, r3, #4
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	031b      	lsls	r3, r3, #12
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004ff2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	011b      	lsls	r3, r3, #4
 8004ffe:	4313      	orrs	r3, r2
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	4313      	orrs	r3, r2
 8005004:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3718      	adds	r7, #24
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005068:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005070:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005078:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005080:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d110      	bne.n	80050aa <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005088:	7bfb      	ldrb	r3, [r7, #15]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d102      	bne.n	8005094 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800508e:	7b7b      	ldrb	r3, [r7, #13]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d001      	beq.n	8005098 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e089      	b.n	80051ac <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050a8:	e031      	b.n	800510e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2b04      	cmp	r3, #4
 80050ae:	d110      	bne.n	80050d2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80050b0:	7bbb      	ldrb	r3, [r7, #14]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d102      	bne.n	80050bc <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80050b6:	7b3b      	ldrb	r3, [r7, #12]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d001      	beq.n	80050c0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e075      	b.n	80051ac <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2202      	movs	r2, #2
 80050cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050d0:	e01d      	b.n	800510e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050d2:	7bfb      	ldrb	r3, [r7, #15]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d108      	bne.n	80050ea <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80050d8:	7bbb      	ldrb	r3, [r7, #14]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d105      	bne.n	80050ea <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050de:	7b7b      	ldrb	r3, [r7, #13]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d102      	bne.n	80050ea <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80050e4:	7b3b      	ldrb	r3, [r7, #12]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d001      	beq.n	80050ee <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e05e      	b.n	80051ac <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2202      	movs	r2, #2
 80050f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2202      	movs	r2, #2
 80050fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2202      	movs	r2, #2
 8005102:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2202      	movs	r2, #2
 800510a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d003      	beq.n	800511c <HAL_TIM_Encoder_Start_IT+0xc4>
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	2b04      	cmp	r3, #4
 8005118:	d010      	beq.n	800513c <HAL_TIM_Encoder_Start_IT+0xe4>
 800511a:	e01f      	b.n	800515c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2201      	movs	r2, #1
 8005122:	2100      	movs	r1, #0
 8005124:	4618      	mov	r0, r3
 8005126:	f000 fbe3 	bl	80058f0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68da      	ldr	r2, [r3, #12]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f042 0202 	orr.w	r2, r2, #2
 8005138:	60da      	str	r2, [r3, #12]
      break;
 800513a:	e02e      	b.n	800519a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2201      	movs	r2, #1
 8005142:	2104      	movs	r1, #4
 8005144:	4618      	mov	r0, r3
 8005146:	f000 fbd3 	bl	80058f0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68da      	ldr	r2, [r3, #12]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f042 0204 	orr.w	r2, r2, #4
 8005158:	60da      	str	r2, [r3, #12]
      break;
 800515a:	e01e      	b.n	800519a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2201      	movs	r2, #1
 8005162:	2100      	movs	r1, #0
 8005164:	4618      	mov	r0, r3
 8005166:	f000 fbc3 	bl	80058f0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2201      	movs	r2, #1
 8005170:	2104      	movs	r1, #4
 8005172:	4618      	mov	r0, r3
 8005174:	f000 fbbc 	bl	80058f0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68da      	ldr	r2, [r3, #12]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f042 0202 	orr.w	r2, r2, #2
 8005186:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68da      	ldr	r2, [r3, #12]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0204 	orr.w	r2, r2, #4
 8005196:	60da      	str	r2, [r3, #12]
      break;
 8005198:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0201 	orr.w	r2, r2, #1
 80051a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10f      	bne.n	80051e4 <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2200      	movs	r2, #0
 80051ca:	2100      	movs	r1, #0
 80051cc:	4618      	mov	r0, r3
 80051ce:	f000 fb8f 	bl	80058f0 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68da      	ldr	r2, [r3, #12]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f022 0202 	bic.w	r2, r2, #2
 80051e0:	60da      	str	r2, [r3, #12]
 80051e2:	e030      	b.n	8005246 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	2b04      	cmp	r3, #4
 80051e8:	d10f      	bne.n	800520a <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2200      	movs	r2, #0
 80051f0:	2104      	movs	r1, #4
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 fb7c 	bl	80058f0 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68da      	ldr	r2, [r3, #12]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 0204 	bic.w	r2, r2, #4
 8005206:	60da      	str	r2, [r3, #12]
 8005208:	e01d      	b.n	8005246 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2200      	movs	r2, #0
 8005210:	2100      	movs	r1, #0
 8005212:	4618      	mov	r0, r3
 8005214:	f000 fb6c 	bl	80058f0 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2200      	movs	r2, #0
 800521e:	2104      	movs	r1, #4
 8005220:	4618      	mov	r0, r3
 8005222:	f000 fb65 	bl	80058f0 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 0202 	bic.w	r2, r2, #2
 8005234:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68da      	ldr	r2, [r3, #12]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 0204 	bic.w	r2, r2, #4
 8005244:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6a1a      	ldr	r2, [r3, #32]
 800524c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005250:	4013      	ands	r3, r2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10f      	bne.n	8005276 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6a1a      	ldr	r2, [r3, #32]
 800525c:	f240 4344 	movw	r3, #1092	; 0x444
 8005260:	4013      	ands	r3, r2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d107      	bne.n	8005276 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 0201 	bic.w	r2, r2, #1
 8005274:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d002      	beq.n	8005282 <HAL_TIM_Encoder_Stop_IT+0xce>
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	2b04      	cmp	r3, #4
 8005280:	d138      	bne.n	80052f4 <HAL_TIM_Encoder_Stop_IT+0x140>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d104      	bne.n	8005292 <HAL_TIM_Encoder_Stop_IT+0xde>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005290:	e013      	b.n	80052ba <HAL_TIM_Encoder_Stop_IT+0x106>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b04      	cmp	r3, #4
 8005296:	d104      	bne.n	80052a2 <HAL_TIM_Encoder_Stop_IT+0xee>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052a0:	e00b      	b.n	80052ba <HAL_TIM_Encoder_Stop_IT+0x106>
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b08      	cmp	r3, #8
 80052a6:	d104      	bne.n	80052b2 <HAL_TIM_Encoder_Stop_IT+0xfe>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052b0:	e003      	b.n	80052ba <HAL_TIM_Encoder_Stop_IT+0x106>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d104      	bne.n	80052ca <HAL_TIM_Encoder_Stop_IT+0x116>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052c8:	e024      	b.n	8005314 <HAL_TIM_Encoder_Stop_IT+0x160>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b04      	cmp	r3, #4
 80052ce:	d104      	bne.n	80052da <HAL_TIM_Encoder_Stop_IT+0x126>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052d8:	e01c      	b.n	8005314 <HAL_TIM_Encoder_Stop_IT+0x160>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b08      	cmp	r3, #8
 80052de:	d104      	bne.n	80052ea <HAL_TIM_Encoder_Stop_IT+0x136>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052e8:	e014      	b.n	8005314 <HAL_TIM_Encoder_Stop_IT+0x160>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052f2:	e00f      	b.n	8005314 <HAL_TIM_Encoder_Stop_IT+0x160>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b082      	sub	sp, #8
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	f003 0302 	and.w	r3, r3, #2
 8005330:	2b02      	cmp	r3, #2
 8005332:	d122      	bne.n	800537a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b02      	cmp	r3, #2
 8005340:	d11b      	bne.n	800537a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f06f 0202 	mvn.w	r2, #2
 800534a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	f003 0303 	and.w	r3, r3, #3
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7fc fb83 	bl	8001a6c <HAL_TIM_IC_CaptureCallback>
 8005366:	e005      	b.n	8005374 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f9ad 	bl	80056c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f9b3 	bl	80056da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	2b04      	cmp	r3, #4
 8005386:	d122      	bne.n	80053ce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	f003 0304 	and.w	r3, r3, #4
 8005392:	2b04      	cmp	r3, #4
 8005394:	d11b      	bne.n	80053ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f06f 0204 	mvn.w	r2, #4
 800539e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2202      	movs	r2, #2
 80053a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f7fc fb59 	bl	8001a6c <HAL_TIM_IC_CaptureCallback>
 80053ba:	e005      	b.n	80053c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f983 	bl	80056c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f989 	bl	80056da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	f003 0308 	and.w	r3, r3, #8
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d122      	bne.n	8005422 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	f003 0308 	and.w	r3, r3, #8
 80053e6:	2b08      	cmp	r3, #8
 80053e8:	d11b      	bne.n	8005422 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f06f 0208 	mvn.w	r2, #8
 80053f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2204      	movs	r2, #4
 80053f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	f003 0303 	and.w	r3, r3, #3
 8005404:	2b00      	cmp	r3, #0
 8005406:	d003      	beq.n	8005410 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7fc fb2f 	bl	8001a6c <HAL_TIM_IC_CaptureCallback>
 800540e:	e005      	b.n	800541c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 f959 	bl	80056c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f95f 	bl	80056da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	f003 0310 	and.w	r3, r3, #16
 800542c:	2b10      	cmp	r3, #16
 800542e:	d122      	bne.n	8005476 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f003 0310 	and.w	r3, r3, #16
 800543a:	2b10      	cmp	r3, #16
 800543c:	d11b      	bne.n	8005476 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f06f 0210 	mvn.w	r2, #16
 8005446:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2208      	movs	r2, #8
 800544c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	69db      	ldr	r3, [r3, #28]
 8005454:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005458:	2b00      	cmp	r3, #0
 800545a:	d003      	beq.n	8005464 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f7fc fb05 	bl	8001a6c <HAL_TIM_IC_CaptureCallback>
 8005462:	e005      	b.n	8005470 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f92f 	bl	80056c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f935 	bl	80056da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	f003 0301 	and.w	r3, r3, #1
 8005480:	2b01      	cmp	r3, #1
 8005482:	d10e      	bne.n	80054a2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b01      	cmp	r3, #1
 8005490:	d107      	bne.n	80054a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f06f 0201 	mvn.w	r2, #1
 800549a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f90a 	bl	80056b6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ac:	2b80      	cmp	r3, #128	; 0x80
 80054ae:	d10e      	bne.n	80054ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ba:	2b80      	cmp	r3, #128	; 0x80
 80054bc:	d107      	bne.n	80054ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 fa9c 	bl	8005a06 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d8:	2b40      	cmp	r3, #64	; 0x40
 80054da:	d10e      	bne.n	80054fa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e6:	2b40      	cmp	r3, #64	; 0x40
 80054e8:	d107      	bne.n	80054fa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 f8f9 	bl	80056ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	f003 0320 	and.w	r3, r3, #32
 8005504:	2b20      	cmp	r3, #32
 8005506:	d10e      	bne.n	8005526 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	f003 0320 	and.w	r3, r3, #32
 8005512:	2b20      	cmp	r3, #32
 8005514:	d107      	bne.n	8005526 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f06f 0220 	mvn.w	r2, #32
 800551e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 fa67 	bl	80059f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005526:	bf00      	nop
 8005528:	3708      	adds	r7, #8
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b084      	sub	sp, #16
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
 8005536:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800553e:	2b01      	cmp	r3, #1
 8005540:	d101      	bne.n	8005546 <HAL_TIM_ConfigClockSource+0x18>
 8005542:	2302      	movs	r3, #2
 8005544:	e0b3      	b.n	80056ae <HAL_TIM_ConfigClockSource+0x180>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2202      	movs	r2, #2
 8005552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005564:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800556c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800557e:	d03e      	beq.n	80055fe <HAL_TIM_ConfigClockSource+0xd0>
 8005580:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005584:	f200 8087 	bhi.w	8005696 <HAL_TIM_ConfigClockSource+0x168>
 8005588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800558c:	f000 8085 	beq.w	800569a <HAL_TIM_ConfigClockSource+0x16c>
 8005590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005594:	d87f      	bhi.n	8005696 <HAL_TIM_ConfigClockSource+0x168>
 8005596:	2b70      	cmp	r3, #112	; 0x70
 8005598:	d01a      	beq.n	80055d0 <HAL_TIM_ConfigClockSource+0xa2>
 800559a:	2b70      	cmp	r3, #112	; 0x70
 800559c:	d87b      	bhi.n	8005696 <HAL_TIM_ConfigClockSource+0x168>
 800559e:	2b60      	cmp	r3, #96	; 0x60
 80055a0:	d050      	beq.n	8005644 <HAL_TIM_ConfigClockSource+0x116>
 80055a2:	2b60      	cmp	r3, #96	; 0x60
 80055a4:	d877      	bhi.n	8005696 <HAL_TIM_ConfigClockSource+0x168>
 80055a6:	2b50      	cmp	r3, #80	; 0x50
 80055a8:	d03c      	beq.n	8005624 <HAL_TIM_ConfigClockSource+0xf6>
 80055aa:	2b50      	cmp	r3, #80	; 0x50
 80055ac:	d873      	bhi.n	8005696 <HAL_TIM_ConfigClockSource+0x168>
 80055ae:	2b40      	cmp	r3, #64	; 0x40
 80055b0:	d058      	beq.n	8005664 <HAL_TIM_ConfigClockSource+0x136>
 80055b2:	2b40      	cmp	r3, #64	; 0x40
 80055b4:	d86f      	bhi.n	8005696 <HAL_TIM_ConfigClockSource+0x168>
 80055b6:	2b30      	cmp	r3, #48	; 0x30
 80055b8:	d064      	beq.n	8005684 <HAL_TIM_ConfigClockSource+0x156>
 80055ba:	2b30      	cmp	r3, #48	; 0x30
 80055bc:	d86b      	bhi.n	8005696 <HAL_TIM_ConfigClockSource+0x168>
 80055be:	2b20      	cmp	r3, #32
 80055c0:	d060      	beq.n	8005684 <HAL_TIM_ConfigClockSource+0x156>
 80055c2:	2b20      	cmp	r3, #32
 80055c4:	d867      	bhi.n	8005696 <HAL_TIM_ConfigClockSource+0x168>
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d05c      	beq.n	8005684 <HAL_TIM_ConfigClockSource+0x156>
 80055ca:	2b10      	cmp	r3, #16
 80055cc:	d05a      	beq.n	8005684 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80055ce:	e062      	b.n	8005696 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6818      	ldr	r0, [r3, #0]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	6899      	ldr	r1, [r3, #8]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f000 f967 	bl	80058b2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055f2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	609a      	str	r2, [r3, #8]
      break;
 80055fc:	e04e      	b.n	800569c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6818      	ldr	r0, [r3, #0]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	6899      	ldr	r1, [r3, #8]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	f000 f950 	bl	80058b2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689a      	ldr	r2, [r3, #8]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005620:	609a      	str	r2, [r3, #8]
      break;
 8005622:	e03b      	b.n	800569c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6818      	ldr	r0, [r3, #0]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	6859      	ldr	r1, [r3, #4]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	461a      	mov	r2, r3
 8005632:	f000 f8c7 	bl	80057c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2150      	movs	r1, #80	; 0x50
 800563c:	4618      	mov	r0, r3
 800563e:	f000 f91e 	bl	800587e <TIM_ITRx_SetConfig>
      break;
 8005642:	e02b      	b.n	800569c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6818      	ldr	r0, [r3, #0]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	6859      	ldr	r1, [r3, #4]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	461a      	mov	r2, r3
 8005652:	f000 f8e5 	bl	8005820 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2160      	movs	r1, #96	; 0x60
 800565c:	4618      	mov	r0, r3
 800565e:	f000 f90e 	bl	800587e <TIM_ITRx_SetConfig>
      break;
 8005662:	e01b      	b.n	800569c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6818      	ldr	r0, [r3, #0]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	6859      	ldr	r1, [r3, #4]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	461a      	mov	r2, r3
 8005672:	f000 f8a7 	bl	80057c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2140      	movs	r1, #64	; 0x40
 800567c:	4618      	mov	r0, r3
 800567e:	f000 f8fe 	bl	800587e <TIM_ITRx_SetConfig>
      break;
 8005682:	e00b      	b.n	800569c <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4619      	mov	r1, r3
 800568e:	4610      	mov	r0, r2
 8005690:	f000 f8f5 	bl	800587e <TIM_ITRx_SetConfig>
        break;
 8005694:	e002      	b.n	800569c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005696:	bf00      	nop
 8005698:	e000      	b.n	800569c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800569a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80056be:	bf00      	nop
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bc80      	pop	{r7}
 80056c6:	4770      	bx	lr

080056c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bc80      	pop	{r7}
 80056d8:	4770      	bx	lr

080056da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056da:	b480      	push	{r7}
 80056dc:	b083      	sub	sp, #12
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056e2:	bf00      	nop
 80056e4:	370c      	adds	r7, #12
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bc80      	pop	{r7}
 80056ea:	4770      	bx	lr

080056ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bc80      	pop	{r7}
 80056fc:	4770      	bx	lr
	...

08005700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a29      	ldr	r2, [pc, #164]	; (80057b8 <TIM_Base_SetConfig+0xb8>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d00b      	beq.n	8005730 <TIM_Base_SetConfig+0x30>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800571e:	d007      	beq.n	8005730 <TIM_Base_SetConfig+0x30>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a26      	ldr	r2, [pc, #152]	; (80057bc <TIM_Base_SetConfig+0xbc>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d003      	beq.n	8005730 <TIM_Base_SetConfig+0x30>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a25      	ldr	r2, [pc, #148]	; (80057c0 <TIM_Base_SetConfig+0xc0>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d108      	bne.n	8005742 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	4313      	orrs	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a1c      	ldr	r2, [pc, #112]	; (80057b8 <TIM_Base_SetConfig+0xb8>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d00b      	beq.n	8005762 <TIM_Base_SetConfig+0x62>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005750:	d007      	beq.n	8005762 <TIM_Base_SetConfig+0x62>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a19      	ldr	r2, [pc, #100]	; (80057bc <TIM_Base_SetConfig+0xbc>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d003      	beq.n	8005762 <TIM_Base_SetConfig+0x62>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a18      	ldr	r2, [pc, #96]	; (80057c0 <TIM_Base_SetConfig+0xc0>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d108      	bne.n	8005774 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005768:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	4313      	orrs	r3, r2
 8005772:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	4313      	orrs	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a07      	ldr	r2, [pc, #28]	; (80057b8 <TIM_Base_SetConfig+0xb8>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d103      	bne.n	80057a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	691a      	ldr	r2, [r3, #16]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	615a      	str	r2, [r3, #20]
}
 80057ae:	bf00      	nop
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bc80      	pop	{r7}
 80057b6:	4770      	bx	lr
 80057b8:	40012c00 	.word	0x40012c00
 80057bc:	40000400 	.word	0x40000400
 80057c0:	40000800 	.word	0x40000800

080057c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b087      	sub	sp, #28
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6a1b      	ldr	r3, [r3, #32]
 80057d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	f023 0201 	bic.w	r2, r3, #1
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	011b      	lsls	r3, r3, #4
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f023 030a 	bic.w	r3, r3, #10
 8005800:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	4313      	orrs	r3, r2
 8005808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	621a      	str	r2, [r3, #32]
}
 8005816:	bf00      	nop
 8005818:	371c      	adds	r7, #28
 800581a:	46bd      	mov	sp, r7
 800581c:	bc80      	pop	{r7}
 800581e:	4770      	bx	lr

08005820 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005820:	b480      	push	{r7}
 8005822:	b087      	sub	sp, #28
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6a1b      	ldr	r3, [r3, #32]
 8005830:	f023 0210 	bic.w	r2, r3, #16
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800584a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	031b      	lsls	r3, r3, #12
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	4313      	orrs	r3, r2
 8005854:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800585c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	011b      	lsls	r3, r3, #4
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	4313      	orrs	r3, r2
 8005866:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	621a      	str	r2, [r3, #32]
}
 8005874:	bf00      	nop
 8005876:	371c      	adds	r7, #28
 8005878:	46bd      	mov	sp, r7
 800587a:	bc80      	pop	{r7}
 800587c:	4770      	bx	lr

0800587e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800587e:	b480      	push	{r7}
 8005880:	b085      	sub	sp, #20
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
 8005886:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005894:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	4313      	orrs	r3, r2
 800589c:	f043 0307 	orr.w	r3, r3, #7
 80058a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	609a      	str	r2, [r3, #8]
}
 80058a8:	bf00      	nop
 80058aa:	3714      	adds	r7, #20
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bc80      	pop	{r7}
 80058b0:	4770      	bx	lr

080058b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b087      	sub	sp, #28
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	60f8      	str	r0, [r7, #12]
 80058ba:	60b9      	str	r1, [r7, #8]
 80058bc:	607a      	str	r2, [r7, #4]
 80058be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	021a      	lsls	r2, r3, #8
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	431a      	orrs	r2, r3
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	4313      	orrs	r3, r2
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	4313      	orrs	r3, r2
 80058de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	609a      	str	r2, [r3, #8]
}
 80058e6:	bf00      	nop
 80058e8:	371c      	adds	r7, #28
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bc80      	pop	{r7}
 80058ee:	4770      	bx	lr

080058f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b087      	sub	sp, #28
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	f003 031f 	and.w	r3, r3, #31
 8005902:	2201      	movs	r2, #1
 8005904:	fa02 f303 	lsl.w	r3, r2, r3
 8005908:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6a1a      	ldr	r2, [r3, #32]
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	43db      	mvns	r3, r3
 8005912:	401a      	ands	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6a1a      	ldr	r2, [r3, #32]
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f003 031f 	and.w	r3, r3, #31
 8005922:	6879      	ldr	r1, [r7, #4]
 8005924:	fa01 f303 	lsl.w	r3, r1, r3
 8005928:	431a      	orrs	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	621a      	str	r2, [r3, #32]
}
 800592e:	bf00      	nop
 8005930:	371c      	adds	r7, #28
 8005932:	46bd      	mov	sp, r7
 8005934:	bc80      	pop	{r7}
 8005936:	4770      	bx	lr

08005938 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005948:	2b01      	cmp	r3, #1
 800594a:	d101      	bne.n	8005950 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800594c:	2302      	movs	r3, #2
 800594e:	e046      	b.n	80059de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2202      	movs	r2, #2
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005976:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	4313      	orrs	r3, r2
 8005980:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a16      	ldr	r2, [pc, #88]	; (80059e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d00e      	beq.n	80059b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800599c:	d009      	beq.n	80059b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a12      	ldr	r2, [pc, #72]	; (80059ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d004      	beq.n	80059b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a10      	ldr	r2, [pc, #64]	; (80059f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d10c      	bne.n	80059cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bc80      	pop	{r7}
 80059e6:	4770      	bx	lr
 80059e8:	40012c00 	.word	0x40012c00
 80059ec:	40000400 	.word	0x40000400
 80059f0:	40000800 	.word	0x40000800

080059f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bc80      	pop	{r7}
 8005a04:	4770      	bx	lr

08005a06 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b083      	sub	sp, #12
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a0e:	bf00      	nop
 8005a10:	370c      	adds	r7, #12
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bc80      	pop	{r7}
 8005a16:	4770      	bx	lr

08005a18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e03f      	b.n	8005aaa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d106      	bne.n	8005a44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7fc f902 	bl	8001c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2224      	movs	r2, #36	; 0x24
 8005a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68da      	ldr	r2, [r3, #12]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 fba9 	bl	80061b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	691a      	ldr	r2, [r3, #16]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	695a      	ldr	r2, [r3, #20]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68da      	ldr	r2, [r3, #12]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b084      	sub	sp, #16
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	60f8      	str	r0, [r7, #12]
 8005aba:	60b9      	str	r1, [r7, #8]
 8005abc:	4613      	mov	r3, r2
 8005abe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b20      	cmp	r3, #32
 8005aca:	d11d      	bne.n	8005b08 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d002      	beq.n	8005ad8 <HAL_UART_Receive_IT+0x26>
 8005ad2:	88fb      	ldrh	r3, [r7, #6]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d101      	bne.n	8005adc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e016      	b.n	8005b0a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d101      	bne.n	8005aea <HAL_UART_Receive_IT+0x38>
 8005ae6:	2302      	movs	r3, #2
 8005ae8:	e00f      	b.n	8005b0a <HAL_UART_Receive_IT+0x58>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005af8:	88fb      	ldrh	r3, [r7, #6]
 8005afa:	461a      	mov	r2, r3
 8005afc:	68b9      	ldr	r1, [r7, #8]
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f000 f9cf 	bl	8005ea2 <UART_Start_Receive_IT>
 8005b04:	4603      	mov	r3, r0
 8005b06:	e000      	b.n	8005b0a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005b08:	2302      	movs	r3, #2
  }
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
	...

08005b14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b08a      	sub	sp, #40	; 0x28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3e:	f003 030f 	and.w	r3, r3, #15
 8005b42:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10d      	bne.n	8005b66 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4c:	f003 0320 	and.w	r3, r3, #32
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d008      	beq.n	8005b66 <HAL_UART_IRQHandler+0x52>
 8005b54:	6a3b      	ldr	r3, [r7, #32]
 8005b56:	f003 0320 	and.w	r3, r3, #32
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fa7f 	bl	8006062 <UART_Receive_IT>
      return;
 8005b64:	e17b      	b.n	8005e5e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f000 80b1 	beq.w	8005cd0 <HAL_UART_IRQHandler+0x1bc>
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d105      	bne.n	8005b84 <HAL_UART_IRQHandler+0x70>
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f000 80a6 	beq.w	8005cd0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00a      	beq.n	8005ba4 <HAL_UART_IRQHandler+0x90>
 8005b8e:	6a3b      	ldr	r3, [r7, #32]
 8005b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d005      	beq.n	8005ba4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9c:	f043 0201 	orr.w	r2, r3, #1
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	f003 0304 	and.w	r3, r3, #4
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00a      	beq.n	8005bc4 <HAL_UART_IRQHandler+0xb0>
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d005      	beq.n	8005bc4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbc:	f043 0202 	orr.w	r2, r3, #2
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	f003 0302 	and.w	r3, r3, #2
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00a      	beq.n	8005be4 <HAL_UART_IRQHandler+0xd0>
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d005      	beq.n	8005be4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bdc:	f043 0204 	orr.w	r2, r3, #4
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	f003 0308 	and.w	r3, r3, #8
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00f      	beq.n	8005c0e <HAL_UART_IRQHandler+0xfa>
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	f003 0320 	and.w	r3, r3, #32
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d104      	bne.n	8005c02 <HAL_UART_IRQHandler+0xee>
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d005      	beq.n	8005c0e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c06:	f043 0208 	orr.w	r2, r3, #8
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f000 811e 	beq.w	8005e54 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1a:	f003 0320 	and.w	r3, r3, #32
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d007      	beq.n	8005c32 <HAL_UART_IRQHandler+0x11e>
 8005c22:	6a3b      	ldr	r3, [r7, #32]
 8005c24:	f003 0320 	and.w	r3, r3, #32
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 fa18 	bl	8006062 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	bf14      	ite	ne
 8005c40:	2301      	movne	r3, #1
 8005c42:	2300      	moveq	r3, #0
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4c:	f003 0308 	and.w	r3, r3, #8
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d102      	bne.n	8005c5a <HAL_UART_IRQHandler+0x146>
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d031      	beq.n	8005cbe <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f95a 	bl	8005f14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d023      	beq.n	8005cb6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	695a      	ldr	r2, [r3, #20]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c7c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d013      	beq.n	8005cae <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8a:	4a76      	ldr	r2, [pc, #472]	; (8005e64 <HAL_UART_IRQHandler+0x350>)
 8005c8c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fc fa72 	bl	800217c <HAL_DMA_Abort_IT>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d016      	beq.n	8005ccc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ca8:	4610      	mov	r0, r2
 8005caa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cac:	e00e      	b.n	8005ccc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 f8e3 	bl	8005e7a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cb4:	e00a      	b.n	8005ccc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f8df 	bl	8005e7a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cbc:	e006      	b.n	8005ccc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f8db 	bl	8005e7a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005cca:	e0c3      	b.n	8005e54 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ccc:	bf00      	nop
    return;
 8005cce:	e0c1      	b.n	8005e54 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	f040 80a1 	bne.w	8005e1c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cdc:	f003 0310 	and.w	r3, r3, #16
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 809b 	beq.w	8005e1c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	f003 0310 	and.w	r3, r3, #16
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f000 8095 	beq.w	8005e1c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	60fb      	str	r3, [r7, #12]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	60fb      	str	r3, [r7, #12]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	60fb      	str	r3, [r7, #12]
 8005d06:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d04e      	beq.n	8005db4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005d20:	8a3b      	ldrh	r3, [r7, #16]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f000 8098 	beq.w	8005e58 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d2c:	8a3a      	ldrh	r2, [r7, #16]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	f080 8092 	bcs.w	8005e58 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	8a3a      	ldrh	r2, [r7, #16]
 8005d38:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	2b20      	cmp	r3, #32
 8005d42:	d02b      	beq.n	8005d9c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d52:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	695a      	ldr	r2, [r3, #20]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f022 0201 	bic.w	r2, r2, #1
 8005d62:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	695a      	ldr	r2, [r3, #20]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d72:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2220      	movs	r2, #32
 8005d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68da      	ldr	r2, [r3, #12]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 0210 	bic.w	r2, r2, #16
 8005d90:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7fc f9b5 	bl	8002106 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	4619      	mov	r1, r3
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 f86d 	bl	8005e8c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005db2:	e051      	b.n	8005e58 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d047      	beq.n	8005e5c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005dcc:	8a7b      	ldrh	r3, [r7, #18]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d044      	beq.n	8005e5c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68da      	ldr	r2, [r3, #12]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005de0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	695a      	ldr	r2, [r3, #20]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f022 0201 	bic.w	r2, r2, #1
 8005df0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2220      	movs	r2, #32
 8005df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68da      	ldr	r2, [r3, #12]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f022 0210 	bic.w	r2, r2, #16
 8005e0e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e10:	8a7b      	ldrh	r3, [r7, #18]
 8005e12:	4619      	mov	r1, r3
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 f839 	bl	8005e8c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005e1a:	e01f      	b.n	8005e5c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d008      	beq.n	8005e38 <HAL_UART_IRQHandler+0x324>
 8005e26:	6a3b      	ldr	r3, [r7, #32]
 8005e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 f8af 	bl	8005f94 <UART_Transmit_IT>
    return;
 8005e36:	e012      	b.n	8005e5e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00d      	beq.n	8005e5e <HAL_UART_IRQHandler+0x34a>
 8005e42:	6a3b      	ldr	r3, [r7, #32]
 8005e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d008      	beq.n	8005e5e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 f8f0 	bl	8006032 <UART_EndTransmit_IT>
    return;
 8005e52:	e004      	b.n	8005e5e <HAL_UART_IRQHandler+0x34a>
    return;
 8005e54:	bf00      	nop
 8005e56:	e002      	b.n	8005e5e <HAL_UART_IRQHandler+0x34a>
      return;
 8005e58:	bf00      	nop
 8005e5a:	e000      	b.n	8005e5e <HAL_UART_IRQHandler+0x34a>
      return;
 8005e5c:	bf00      	nop
  }
}
 8005e5e:	3728      	adds	r7, #40	; 0x28
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	08005f6d 	.word	0x08005f6d

08005e68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bc80      	pop	{r7}
 8005e78:	4770      	bx	lr

08005e7a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e7a:	b480      	push	{r7}
 8005e7c:	b083      	sub	sp, #12
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e82:	bf00      	nop
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bc80      	pop	{r7}
 8005e8a:	4770      	bx	lr

08005e8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	460b      	mov	r3, r1
 8005e96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bc80      	pop	{r7}
 8005ea0:	4770      	bx	lr

08005ea2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	b085      	sub	sp, #20
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	60f8      	str	r0, [r7, #12]
 8005eaa:	60b9      	str	r1, [r7, #8]
 8005eac:	4613      	mov	r3, r2
 8005eae:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	88fa      	ldrh	r2, [r7, #6]
 8005eba:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	88fa      	ldrh	r2, [r7, #6]
 8005ec0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2222      	movs	r2, #34	; 0x22
 8005ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68da      	ldr	r2, [r3, #12]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ee6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	695a      	ldr	r2, [r3, #20]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f042 0201 	orr.w	r2, r2, #1
 8005ef6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68da      	ldr	r2, [r3, #12]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f042 0220 	orr.w	r2, r2, #32
 8005f06:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bc80      	pop	{r7}
 8005f12:	4770      	bx	lr

08005f14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68da      	ldr	r2, [r3, #12]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005f2a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	695a      	ldr	r2, [r3, #20]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f022 0201 	bic.w	r2, r2, #1
 8005f3a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d107      	bne.n	8005f54 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68da      	ldr	r2, [r3, #12]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f022 0210 	bic.w	r2, r2, #16
 8005f52:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2220      	movs	r2, #32
 8005f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f62:	bf00      	nop
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bc80      	pop	{r7}
 8005f6a:	4770      	bx	lr

08005f6c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b084      	sub	sp, #16
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f7ff ff77 	bl	8005e7a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f8c:	bf00      	nop
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	2b21      	cmp	r3, #33	; 0x21
 8005fa6:	d13e      	bne.n	8006026 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fb0:	d114      	bne.n	8005fdc <UART_Transmit_IT+0x48>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d110      	bne.n	8005fdc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a1b      	ldr	r3, [r3, #32]
 8005fd4:	1c9a      	adds	r2, r3, #2
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	621a      	str	r2, [r3, #32]
 8005fda:	e008      	b.n	8005fee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	1c59      	adds	r1, r3, #1
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	6211      	str	r1, [r2, #32]
 8005fe6:	781a      	ldrb	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10f      	bne.n	8006022 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68da      	ldr	r2, [r3, #12]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006010:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68da      	ldr	r2, [r3, #12]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006020:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006022:	2300      	movs	r3, #0
 8006024:	e000      	b.n	8006028 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006026:	2302      	movs	r3, #2
  }
}
 8006028:	4618      	mov	r0, r3
 800602a:	3714      	adds	r7, #20
 800602c:	46bd      	mov	sp, r7
 800602e:	bc80      	pop	{r7}
 8006030:	4770      	bx	lr

08006032 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b082      	sub	sp, #8
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68da      	ldr	r2, [r3, #12]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006048:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2220      	movs	r2, #32
 800604e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7ff ff08 	bl	8005e68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b086      	sub	sp, #24
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b22      	cmp	r3, #34	; 0x22
 8006074:	f040 8099 	bne.w	80061aa <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006080:	d117      	bne.n	80060b2 <UART_Receive_IT+0x50>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d113      	bne.n	80060b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800608a:	2300      	movs	r3, #0
 800608c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006092:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	b29b      	uxth	r3, r3
 800609c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060aa:	1c9a      	adds	r2, r3, #2
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	629a      	str	r2, [r3, #40]	; 0x28
 80060b0:	e026      	b.n	8006100 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80060b8:	2300      	movs	r3, #0
 80060ba:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060c4:	d007      	beq.n	80060d6 <UART_Receive_IT+0x74>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10a      	bne.n	80060e4 <UART_Receive_IT+0x82>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d106      	bne.n	80060e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	b2da      	uxtb	r2, r3
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	701a      	strb	r2, [r3, #0]
 80060e2:	e008      	b.n	80060f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060f0:	b2da      	uxtb	r2, r3
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fa:	1c5a      	adds	r2, r3, #1
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006104:	b29b      	uxth	r3, r3
 8006106:	3b01      	subs	r3, #1
 8006108:	b29b      	uxth	r3, r3
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	4619      	mov	r1, r3
 800610e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006110:	2b00      	cmp	r3, #0
 8006112:	d148      	bne.n	80061a6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68da      	ldr	r2, [r3, #12]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f022 0220 	bic.w	r2, r2, #32
 8006122:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68da      	ldr	r2, [r3, #12]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006132:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	695a      	ldr	r2, [r3, #20]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f022 0201 	bic.w	r2, r2, #1
 8006142:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2220      	movs	r2, #32
 8006148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006150:	2b01      	cmp	r3, #1
 8006152:	d123      	bne.n	800619c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68da      	ldr	r2, [r3, #12]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f022 0210 	bic.w	r2, r2, #16
 8006168:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0310 	and.w	r3, r3, #16
 8006174:	2b10      	cmp	r3, #16
 8006176:	d10a      	bne.n	800618e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006178:	2300      	movs	r3, #0
 800617a:	60fb      	str	r3, [r7, #12]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	60fb      	str	r3, [r7, #12]
 800618c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006192:	4619      	mov	r1, r3
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f7ff fe79 	bl	8005e8c <HAL_UARTEx_RxEventCallback>
 800619a:	e002      	b.n	80061a2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7fb fc85 	bl	8001aac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80061a2:	2300      	movs	r3, #0
 80061a4:	e002      	b.n	80061ac <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80061a6:	2300      	movs	r3, #0
 80061a8:	e000      	b.n	80061ac <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80061aa:	2302      	movs	r3, #2
  }
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3718      	adds	r7, #24
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68da      	ldr	r2, [r3, #12]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	689a      	ldr	r2, [r3, #8]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	431a      	orrs	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	695b      	ldr	r3, [r3, #20]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80061ee:	f023 030c 	bic.w	r3, r3, #12
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	6812      	ldr	r2, [r2, #0]
 80061f6:	68b9      	ldr	r1, [r7, #8]
 80061f8:	430b      	orrs	r3, r1
 80061fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	699a      	ldr	r2, [r3, #24]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	430a      	orrs	r2, r1
 8006210:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a2c      	ldr	r2, [pc, #176]	; (80062c8 <UART_SetConfig+0x114>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d103      	bne.n	8006224 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800621c:	f7fe fcca 	bl	8004bb4 <HAL_RCC_GetPCLK2Freq>
 8006220:	60f8      	str	r0, [r7, #12]
 8006222:	e002      	b.n	800622a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006224:	f7fe fcb2 	bl	8004b8c <HAL_RCC_GetPCLK1Freq>
 8006228:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	4613      	mov	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4413      	add	r3, r2
 8006232:	009a      	lsls	r2, r3, #2
 8006234:	441a      	add	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006240:	4a22      	ldr	r2, [pc, #136]	; (80062cc <UART_SetConfig+0x118>)
 8006242:	fba2 2303 	umull	r2, r3, r2, r3
 8006246:	095b      	lsrs	r3, r3, #5
 8006248:	0119      	lsls	r1, r3, #4
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	4613      	mov	r3, r2
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	4413      	add	r3, r2
 8006252:	009a      	lsls	r2, r3, #2
 8006254:	441a      	add	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006260:	4b1a      	ldr	r3, [pc, #104]	; (80062cc <UART_SetConfig+0x118>)
 8006262:	fba3 0302 	umull	r0, r3, r3, r2
 8006266:	095b      	lsrs	r3, r3, #5
 8006268:	2064      	movs	r0, #100	; 0x64
 800626a:	fb00 f303 	mul.w	r3, r0, r3
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	011b      	lsls	r3, r3, #4
 8006272:	3332      	adds	r3, #50	; 0x32
 8006274:	4a15      	ldr	r2, [pc, #84]	; (80062cc <UART_SetConfig+0x118>)
 8006276:	fba2 2303 	umull	r2, r3, r2, r3
 800627a:	095b      	lsrs	r3, r3, #5
 800627c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006280:	4419      	add	r1, r3
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	4613      	mov	r3, r2
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	4413      	add	r3, r2
 800628a:	009a      	lsls	r2, r3, #2
 800628c:	441a      	add	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	fbb2 f2f3 	udiv	r2, r2, r3
 8006298:	4b0c      	ldr	r3, [pc, #48]	; (80062cc <UART_SetConfig+0x118>)
 800629a:	fba3 0302 	umull	r0, r3, r3, r2
 800629e:	095b      	lsrs	r3, r3, #5
 80062a0:	2064      	movs	r0, #100	; 0x64
 80062a2:	fb00 f303 	mul.w	r3, r0, r3
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	011b      	lsls	r3, r3, #4
 80062aa:	3332      	adds	r3, #50	; 0x32
 80062ac:	4a07      	ldr	r2, [pc, #28]	; (80062cc <UART_SetConfig+0x118>)
 80062ae:	fba2 2303 	umull	r2, r3, r2, r3
 80062b2:	095b      	lsrs	r3, r3, #5
 80062b4:	f003 020f 	and.w	r2, r3, #15
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	440a      	add	r2, r1
 80062be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80062c0:	bf00      	nop
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	40013800 	.word	0x40013800
 80062cc:	51eb851f 	.word	0x51eb851f

080062d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80062d0:	b084      	sub	sp, #16
 80062d2:	b480      	push	{r7}
 80062d4:	b083      	sub	sp, #12
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
 80062da:	f107 0014 	add.w	r0, r7, #20
 80062de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bc80      	pop	{r7}
 80062ec:	b004      	add	sp, #16
 80062ee:	4770      	bx	lr

080062f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006300:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006304:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	b29a      	uxth	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3714      	adds	r7, #20
 8006316:	46bd      	mov	sp, r7
 8006318:	bc80      	pop	{r7}
 800631a:	4770      	bx	lr

0800631c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006324:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006328:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006330:	b29a      	uxth	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	b29b      	uxth	r3, r3
 8006336:	43db      	mvns	r3, r3
 8006338:	b29b      	uxth	r3, r3
 800633a:	4013      	ands	r3, r2
 800633c:	b29a      	uxth	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3714      	adds	r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	bc80      	pop	{r7}
 800634e:	4770      	bx	lr

08006350 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	460b      	mov	r3, r1
 800635a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	bc80      	pop	{r7}
 8006366:	4770      	bx	lr

08006368 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006368:	b084      	sub	sp, #16
 800636a:	b480      	push	{r7}
 800636c:	b083      	sub	sp, #12
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
 8006372:	f107 0014 	add.w	r0, r7, #20
 8006376:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bc80      	pop	{r7}
 80063a4:	b004      	add	sp, #16
 80063a6:	4770      	bx	lr

080063a8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b09b      	sub	sp, #108	; 0x6c
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80063b2:	2300      	movs	r3, #0
 80063b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	881b      	ldrh	r3, [r3, #0]
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80063ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ce:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	78db      	ldrb	r3, [r3, #3]
 80063d6:	2b03      	cmp	r3, #3
 80063d8:	d81f      	bhi.n	800641a <USB_ActivateEndpoint+0x72>
 80063da:	a201      	add	r2, pc, #4	; (adr r2, 80063e0 <USB_ActivateEndpoint+0x38>)
 80063dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e0:	080063f1 	.word	0x080063f1
 80063e4:	0800640d 	.word	0x0800640d
 80063e8:	08006423 	.word	0x08006423
 80063ec:	080063ff 	.word	0x080063ff
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80063f0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80063f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063f8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80063fc:	e012      	b.n	8006424 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80063fe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006402:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006406:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800640a:	e00b      	b.n	8006424 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800640c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006410:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006414:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006418:	e004      	b.n	8006424 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006420:	e000      	b.n	8006424 <USB_ActivateEndpoint+0x7c>
      break;
 8006422:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	441a      	add	r2, r3
 800642e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006432:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006436:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800643a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800643e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006442:	b29b      	uxth	r3, r3
 8006444:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	4413      	add	r3, r2
 8006450:	881b      	ldrh	r3, [r3, #0]
 8006452:	b29b      	uxth	r3, r3
 8006454:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800645c:	b29a      	uxth	r2, r3
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	b29b      	uxth	r3, r3
 8006464:	4313      	orrs	r3, r2
 8006466:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	441a      	add	r2, r3
 8006474:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006478:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800647c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006480:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006488:	b29b      	uxth	r3, r3
 800648a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	7b1b      	ldrb	r3, [r3, #12]
 8006490:	2b00      	cmp	r3, #0
 8006492:	f040 8149 	bne.w	8006728 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	785b      	ldrb	r3, [r3, #1]
 800649a:	2b00      	cmp	r3, #0
 800649c:	f000 8084 	beq.w	80065a8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	617b      	str	r3, [r7, #20]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	461a      	mov	r2, r3
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	4413      	add	r3, r2
 80064b2:	617b      	str	r3, [r7, #20]
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	011a      	lsls	r2, r3, #4
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064c2:	613b      	str	r3, [r7, #16]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	88db      	ldrh	r3, [r3, #6]
 80064c8:	085b      	lsrs	r3, r3, #1
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	005b      	lsls	r3, r3, #1
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4413      	add	r3, r2
 80064de:	881b      	ldrh	r3, [r3, #0]
 80064e0:	81fb      	strh	r3, [r7, #14]
 80064e2:	89fb      	ldrh	r3, [r7, #14]
 80064e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d01b      	beq.n	8006524 <USB_ActivateEndpoint+0x17c>
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	4413      	add	r3, r2
 80064f6:	881b      	ldrh	r3, [r3, #0]
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006502:	81bb      	strh	r3, [r7, #12]
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	441a      	add	r2, r3
 800650e:	89bb      	ldrh	r3, [r7, #12]
 8006510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800651c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006520:	b29b      	uxth	r3, r3
 8006522:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	78db      	ldrb	r3, [r3, #3]
 8006528:	2b01      	cmp	r3, #1
 800652a:	d020      	beq.n	800656e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4413      	add	r3, r2
 8006536:	881b      	ldrh	r3, [r3, #0]
 8006538:	b29b      	uxth	r3, r3
 800653a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800653e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006542:	813b      	strh	r3, [r7, #8]
 8006544:	893b      	ldrh	r3, [r7, #8]
 8006546:	f083 0320 	eor.w	r3, r3, #32
 800654a:	813b      	strh	r3, [r7, #8]
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	441a      	add	r2, r3
 8006556:	893b      	ldrh	r3, [r7, #8]
 8006558:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800655c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006560:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006568:	b29b      	uxth	r3, r3
 800656a:	8013      	strh	r3, [r2, #0]
 800656c:	e27f      	b.n	8006a6e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4413      	add	r3, r2
 8006578:	881b      	ldrh	r3, [r3, #0]
 800657a:	b29b      	uxth	r3, r3
 800657c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006580:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006584:	817b      	strh	r3, [r7, #10]
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	441a      	add	r2, r3
 8006590:	897b      	ldrh	r3, [r7, #10]
 8006592:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006596:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800659a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800659e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	8013      	strh	r3, [r2, #0]
 80065a6:	e262      	b.n	8006a6e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	461a      	mov	r2, r3
 80065b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b8:	4413      	add	r3, r2
 80065ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	011a      	lsls	r2, r3, #4
 80065c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80065ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	88db      	ldrh	r3, [r3, #6]
 80065d0:	085b      	lsrs	r3, r3, #1
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	005b      	lsls	r3, r3, #1
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065da:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	627b      	str	r3, [r7, #36]	; 0x24
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	461a      	mov	r2, r3
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ec:	4413      	add	r3, r2
 80065ee:	627b      	str	r3, [r7, #36]	; 0x24
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	011a      	lsls	r2, r3, #4
 80065f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f8:	4413      	add	r3, r2
 80065fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065fe:	623b      	str	r3, [r7, #32]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d112      	bne.n	800662e <USB_ActivateEndpoint+0x286>
 8006608:	6a3b      	ldr	r3, [r7, #32]
 800660a:	881b      	ldrh	r3, [r3, #0]
 800660c:	b29b      	uxth	r3, r3
 800660e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006612:	b29a      	uxth	r2, r3
 8006614:	6a3b      	ldr	r3, [r7, #32]
 8006616:	801a      	strh	r2, [r3, #0]
 8006618:	6a3b      	ldr	r3, [r7, #32]
 800661a:	881b      	ldrh	r3, [r3, #0]
 800661c:	b29b      	uxth	r3, r3
 800661e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006622:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006626:	b29a      	uxth	r2, r3
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	801a      	strh	r2, [r3, #0]
 800662c:	e02f      	b.n	800668e <USB_ActivateEndpoint+0x2e6>
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	2b3e      	cmp	r3, #62	; 0x3e
 8006634:	d813      	bhi.n	800665e <USB_ActivateEndpoint+0x2b6>
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	085b      	lsrs	r3, r3, #1
 800663c:	663b      	str	r3, [r7, #96]	; 0x60
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	2b00      	cmp	r3, #0
 8006648:	d002      	beq.n	8006650 <USB_ActivateEndpoint+0x2a8>
 800664a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800664c:	3301      	adds	r3, #1
 800664e:	663b      	str	r3, [r7, #96]	; 0x60
 8006650:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006652:	b29b      	uxth	r3, r3
 8006654:	029b      	lsls	r3, r3, #10
 8006656:	b29a      	uxth	r2, r3
 8006658:	6a3b      	ldr	r3, [r7, #32]
 800665a:	801a      	strh	r2, [r3, #0]
 800665c:	e017      	b.n	800668e <USB_ActivateEndpoint+0x2e6>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	095b      	lsrs	r3, r3, #5
 8006664:	663b      	str	r3, [r7, #96]	; 0x60
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	f003 031f 	and.w	r3, r3, #31
 800666e:	2b00      	cmp	r3, #0
 8006670:	d102      	bne.n	8006678 <USB_ActivateEndpoint+0x2d0>
 8006672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006674:	3b01      	subs	r3, #1
 8006676:	663b      	str	r3, [r7, #96]	; 0x60
 8006678:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800667a:	b29b      	uxth	r3, r3
 800667c:	029b      	lsls	r3, r3, #10
 800667e:	b29b      	uxth	r3, r3
 8006680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006688:	b29a      	uxth	r2, r3
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4413      	add	r3, r2
 8006698:	881b      	ldrh	r3, [r3, #0]
 800669a:	83fb      	strh	r3, [r7, #30]
 800669c:	8bfb      	ldrh	r3, [r7, #30]
 800669e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d01b      	beq.n	80066de <USB_ActivateEndpoint+0x336>
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	881b      	ldrh	r3, [r3, #0]
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066bc:	83bb      	strh	r3, [r7, #28]
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	441a      	add	r2, r3
 80066c8:	8bbb      	ldrh	r3, [r7, #28]
 80066ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066da:	b29b      	uxth	r3, r3
 80066dc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4413      	add	r3, r2
 80066e8:	881b      	ldrh	r3, [r3, #0]
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f4:	837b      	strh	r3, [r7, #26]
 80066f6:	8b7b      	ldrh	r3, [r7, #26]
 80066f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80066fc:	837b      	strh	r3, [r7, #26]
 80066fe:	8b7b      	ldrh	r3, [r7, #26]
 8006700:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006704:	837b      	strh	r3, [r7, #26]
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	441a      	add	r2, r3
 8006710:	8b7b      	ldrh	r3, [r7, #26]
 8006712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006716:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800671a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800671e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006722:	b29b      	uxth	r3, r3
 8006724:	8013      	strh	r3, [r2, #0]
 8006726:	e1a2      	b.n	8006a6e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	881b      	ldrh	r3, [r3, #0]
 8006734:	b29b      	uxth	r3, r3
 8006736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800673a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800673e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	441a      	add	r2, r3
 800674c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006758:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800675c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006760:	b29b      	uxth	r3, r3
 8006762:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	65bb      	str	r3, [r7, #88]	; 0x58
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800676e:	b29b      	uxth	r3, r3
 8006770:	461a      	mov	r2, r3
 8006772:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006774:	4413      	add	r3, r2
 8006776:	65bb      	str	r3, [r7, #88]	; 0x58
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	011a      	lsls	r2, r3, #4
 800677e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006780:	4413      	add	r3, r2
 8006782:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006786:	657b      	str	r3, [r7, #84]	; 0x54
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	891b      	ldrh	r3, [r3, #8]
 800678c:	085b      	lsrs	r3, r3, #1
 800678e:	b29b      	uxth	r3, r3
 8006790:	005b      	lsls	r3, r3, #1
 8006792:	b29a      	uxth	r2, r3
 8006794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006796:	801a      	strh	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	653b      	str	r3, [r7, #80]	; 0x50
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	461a      	mov	r2, r3
 80067a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067a8:	4413      	add	r3, r2
 80067aa:	653b      	str	r3, [r7, #80]	; 0x50
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	011a      	lsls	r2, r3, #4
 80067b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067b4:	4413      	add	r3, r2
 80067b6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80067ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	895b      	ldrh	r3, [r3, #10]
 80067c0:	085b      	lsrs	r3, r3, #1
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	005b      	lsls	r3, r3, #1
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ca:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	785b      	ldrb	r3, [r3, #1]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f040 8091 	bne.w	80068f8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4413      	add	r3, r2
 80067e0:	881b      	ldrh	r3, [r3, #0]
 80067e2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80067e4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80067e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d01b      	beq.n	8006826 <USB_ActivateEndpoint+0x47e>
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	881b      	ldrh	r3, [r3, #0]
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006804:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	441a      	add	r2, r3
 8006810:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800681a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800681e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006822:	b29b      	uxth	r3, r3
 8006824:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4413      	add	r3, r2
 8006830:	881b      	ldrh	r3, [r3, #0]
 8006832:	873b      	strh	r3, [r7, #56]	; 0x38
 8006834:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800683a:	2b00      	cmp	r3, #0
 800683c:	d01b      	beq.n	8006876 <USB_ActivateEndpoint+0x4ce>
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4413      	add	r3, r2
 8006848:	881b      	ldrh	r3, [r3, #0]
 800684a:	b29b      	uxth	r3, r3
 800684c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006854:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	441a      	add	r2, r3
 8006860:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006862:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006866:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800686a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800686e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006872:	b29b      	uxth	r3, r3
 8006874:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4413      	add	r3, r2
 8006880:	881b      	ldrh	r3, [r3, #0]
 8006882:	b29b      	uxth	r3, r3
 8006884:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800688e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006890:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006894:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006896:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006898:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800689c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	441a      	add	r2, r3
 80068a8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80068aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	881b      	ldrh	r3, [r3, #0]
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068d4:	867b      	strh	r3, [r7, #50]	; 0x32
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	441a      	add	r2, r3
 80068e0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80068e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	8013      	strh	r3, [r2, #0]
 80068f6:	e0ba      	b.n	8006a6e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4413      	add	r3, r2
 8006902:	881b      	ldrh	r3, [r3, #0]
 8006904:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006908:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800690c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006910:	2b00      	cmp	r3, #0
 8006912:	d01d      	beq.n	8006950 <USB_ActivateEndpoint+0x5a8>
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	881b      	ldrh	r3, [r3, #0]
 8006920:	b29b      	uxth	r3, r3
 8006922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800692a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	441a      	add	r2, r3
 8006938:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800693c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006940:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006944:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800694c:	b29b      	uxth	r3, r3
 800694e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	881b      	ldrh	r3, [r3, #0]
 800695c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006960:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006968:	2b00      	cmp	r3, #0
 800696a:	d01d      	beq.n	80069a8 <USB_ActivateEndpoint+0x600>
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	4413      	add	r3, r2
 8006976:	881b      	ldrh	r3, [r3, #0]
 8006978:	b29b      	uxth	r3, r3
 800697a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800697e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006982:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	441a      	add	r2, r3
 8006990:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006994:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006998:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800699c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	78db      	ldrb	r3, [r3, #3]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d024      	beq.n	80069fa <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	4413      	add	r3, r2
 80069ba:	881b      	ldrh	r3, [r3, #0]
 80069bc:	b29b      	uxth	r3, r3
 80069be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80069ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80069ce:	f083 0320 	eor.w	r3, r3, #32
 80069d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	441a      	add	r2, r3
 80069e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80069e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	8013      	strh	r3, [r2, #0]
 80069f8:	e01d      	b.n	8006a36 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	4413      	add	r3, r2
 8006a04:	881b      	ldrh	r3, [r3, #0]
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a10:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	441a      	add	r2, r3
 8006a1e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006a22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	4413      	add	r3, r2
 8006a40:	881b      	ldrh	r3, [r3, #0]
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a4c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	441a      	add	r2, r3
 8006a58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006a6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	376c      	adds	r7, #108	; 0x6c
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bc80      	pop	{r7}
 8006a7a:	4770      	bx	lr

08006a7c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b08d      	sub	sp, #52	; 0x34
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	7b1b      	ldrb	r3, [r3, #12]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f040 808e 	bne.w	8006bac <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	785b      	ldrb	r3, [r3, #1]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d044      	beq.n	8006b22 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4413      	add	r3, r2
 8006aa2:	881b      	ldrh	r3, [r3, #0]
 8006aa4:	81bb      	strh	r3, [r7, #12]
 8006aa6:	89bb      	ldrh	r3, [r7, #12]
 8006aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d01b      	beq.n	8006ae8 <USB_DeactivateEndpoint+0x6c>
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	4413      	add	r3, r2
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac6:	817b      	strh	r3, [r7, #10]
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	441a      	add	r2, r3
 8006ad2:	897b      	ldrh	r3, [r7, #10]
 8006ad4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ad8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006adc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ae0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4413      	add	r3, r2
 8006af2:	881b      	ldrh	r3, [r3, #0]
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006afa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006afe:	813b      	strh	r3, [r7, #8]
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	441a      	add	r2, r3
 8006b0a:	893b      	ldrh	r3, [r7, #8]
 8006b0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	8013      	strh	r3, [r2, #0]
 8006b20:	e192      	b.n	8006e48 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	4413      	add	r3, r2
 8006b2c:	881b      	ldrh	r3, [r3, #0]
 8006b2e:	827b      	strh	r3, [r7, #18]
 8006b30:	8a7b      	ldrh	r3, [r7, #18]
 8006b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d01b      	beq.n	8006b72 <USB_DeactivateEndpoint+0xf6>
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	881b      	ldrh	r3, [r3, #0]
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b50:	823b      	strh	r3, [r7, #16]
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	441a      	add	r2, r3
 8006b5c:	8a3b      	ldrh	r3, [r7, #16]
 8006b5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	881b      	ldrh	r3, [r3, #0]
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b88:	81fb      	strh	r3, [r7, #14]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	441a      	add	r2, r3
 8006b94:	89fb      	ldrh	r3, [r7, #14]
 8006b96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	8013      	strh	r3, [r2, #0]
 8006baa:	e14d      	b.n	8006e48 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	785b      	ldrb	r3, [r3, #1]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f040 80a5 	bne.w	8006d00 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4413      	add	r3, r2
 8006bc0:	881b      	ldrh	r3, [r3, #0]
 8006bc2:	843b      	strh	r3, [r7, #32]
 8006bc4:	8c3b      	ldrh	r3, [r7, #32]
 8006bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d01b      	beq.n	8006c06 <USB_DeactivateEndpoint+0x18a>
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	881b      	ldrh	r3, [r3, #0]
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be4:	83fb      	strh	r3, [r7, #30]
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	441a      	add	r2, r3
 8006bf0:	8bfb      	ldrh	r3, [r7, #30]
 8006bf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	4413      	add	r3, r2
 8006c10:	881b      	ldrh	r3, [r3, #0]
 8006c12:	83bb      	strh	r3, [r7, #28]
 8006c14:	8bbb      	ldrh	r3, [r7, #28]
 8006c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d01b      	beq.n	8006c56 <USB_DeactivateEndpoint+0x1da>
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	4413      	add	r3, r2
 8006c28:	881b      	ldrh	r3, [r3, #0]
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c34:	837b      	strh	r3, [r7, #26]
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	441a      	add	r2, r3
 8006c40:	8b7b      	ldrh	r3, [r7, #26]
 8006c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4413      	add	r3, r2
 8006c60:	881b      	ldrh	r3, [r3, #0]
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c6c:	833b      	strh	r3, [r7, #24]
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	441a      	add	r2, r3
 8006c78:	8b3b      	ldrh	r3, [r7, #24]
 8006c7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c86:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4413      	add	r3, r2
 8006c98:	881b      	ldrh	r3, [r3, #0]
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ca4:	82fb      	strh	r3, [r7, #22]
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	441a      	add	r2, r3
 8006cb0:	8afb      	ldrh	r3, [r7, #22]
 8006cb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	881b      	ldrh	r3, [r3, #0]
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cdc:	82bb      	strh	r3, [r7, #20]
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	441a      	add	r2, r3
 8006ce8:	8abb      	ldrh	r3, [r7, #20]
 8006cea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	8013      	strh	r3, [r2, #0]
 8006cfe:	e0a3      	b.n	8006e48 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	4413      	add	r3, r2
 8006d0a:	881b      	ldrh	r3, [r3, #0]
 8006d0c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006d0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d01b      	beq.n	8006d50 <USB_DeactivateEndpoint+0x2d4>
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4413      	add	r3, r2
 8006d22:	881b      	ldrh	r3, [r3, #0]
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d2e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	441a      	add	r2, r3
 8006d3a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006d3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4413      	add	r3, r2
 8006d5a:	881b      	ldrh	r3, [r3, #0]
 8006d5c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006d5e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d01b      	beq.n	8006da0 <USB_DeactivateEndpoint+0x324>
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	4413      	add	r3, r2
 8006d72:	881b      	ldrh	r3, [r3, #0]
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d7e:	853b      	strh	r3, [r7, #40]	; 0x28
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	441a      	add	r2, r3
 8006d8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006d8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	4413      	add	r3, r2
 8006daa:	881b      	ldrh	r3, [r3, #0]
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006db6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	441a      	add	r2, r3
 8006dc2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006dc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	4413      	add	r3, r2
 8006de2:	881b      	ldrh	r3, [r3, #0]
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dee:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	441a      	add	r2, r3
 8006dfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006dfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4413      	add	r3, r2
 8006e1a:	881b      	ldrh	r3, [r3, #0]
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e26:	847b      	strh	r3, [r7, #34]	; 0x22
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	441a      	add	r2, r3
 8006e32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006e34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3734      	adds	r7, #52	; 0x34
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bc80      	pop	{r7}
 8006e52:	4770      	bx	lr

08006e54 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b0cc      	sub	sp, #304	; 0x130
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e62:	6018      	str	r0, [r3, #0]
 8006e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e6c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	785b      	ldrb	r3, [r3, #1]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	f041 817d 	bne.w	800817a <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006e80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	699a      	ldr	r2, [r3, #24]
 8006e8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d908      	bls.n	8006eae <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006e9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ea0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006eac:	e007      	b.n	8006ebe <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006eae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006ebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ec2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	7b1b      	ldrb	r3, [r3, #12]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d152      	bne.n	8006f74 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006ece:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	6959      	ldr	r1, [r3, #20]
 8006eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ede:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	88da      	ldrh	r2, [r3, #6]
 8006ee6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006ef0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006ef4:	6800      	ldr	r0, [r0, #0]
 8006ef6:	f001 ff23 	bl	8008d40 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006efa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006efe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006f02:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f06:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006f0a:	6812      	ldr	r2, [r2, #0]
 8006f0c:	601a      	str	r2, [r3, #0]
 8006f0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	4619      	mov	r1, r3
 8006f20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f24:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006f28:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f2c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006f30:	6812      	ldr	r2, [r2, #0]
 8006f32:	440a      	add	r2, r1
 8006f34:	601a      	str	r2, [r3, #0]
 8006f36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	011a      	lsls	r2, r3, #4
 8006f44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f48:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4413      	add	r3, r2
 8006f50:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006f54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f58:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006f5c:	601a      	str	r2, [r3, #0]
 8006f5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f68:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	801a      	strh	r2, [r3, #0]
 8006f70:	f001 b8b5 	b.w	80080de <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	78db      	ldrb	r3, [r3, #3]
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	f040 84c6 	bne.w	8007912 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006f86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6a1a      	ldr	r2, [r3, #32]
 8006f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	f240 8443 	bls.w	800782a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006fa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fa8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4413      	add	r3, r2
 8006fbe:	881b      	ldrh	r3, [r3, #0]
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fca:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	441a      	add	r2, r3
 8006fe8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006fec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ff0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ff4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007000:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007004:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	6a1a      	ldr	r2, [r3, #32]
 800700c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007010:	1ad2      	subs	r2, r2, r3
 8007012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007016:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800701e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007022:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800702c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4413      	add	r3, r2
 8007038:	881b      	ldrh	r3, [r3, #0]
 800703a:	b29b      	uxth	r3, r3
 800703c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 823e 	beq.w	80074c2 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800704a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800704e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007052:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007056:	6812      	ldr	r2, [r2, #0]
 8007058:	601a      	str	r2, [r3, #0]
 800705a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800705e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	785b      	ldrb	r3, [r3, #1]
 8007066:	2b00      	cmp	r3, #0
 8007068:	f040 809a 	bne.w	80071a0 <USB_EPStartXfer+0x34c>
 800706c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007070:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007074:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007078:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800707c:	6812      	ldr	r2, [r2, #0]
 800707e:	601a      	str	r2, [r3, #0]
 8007080:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007084:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800708e:	b29b      	uxth	r3, r3
 8007090:	4619      	mov	r1, r3
 8007092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007096:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800709a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800709e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80070a2:	6812      	ldr	r2, [r2, #0]
 80070a4:	440a      	add	r2, r1
 80070a6:	601a      	str	r2, [r3, #0]
 80070a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	011a      	lsls	r2, r3, #4
 80070b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4413      	add	r3, r2
 80070c2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80070c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80070ce:	601a      	str	r2, [r3, #0]
 80070d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d122      	bne.n	800711e <USB_EPStartXfer+0x2ca>
 80070d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	881b      	ldrh	r3, [r3, #0]
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070ea:	b29a      	uxth	r2, r3
 80070ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	801a      	strh	r2, [r3, #0]
 80070f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070fc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	881b      	ldrh	r3, [r3, #0]
 8007104:	b29b      	uxth	r3, r3
 8007106:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800710a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800710e:	b29a      	uxth	r2, r3
 8007110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007114:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	801a      	strh	r2, [r3, #0]
 800711c:	e079      	b.n	8007212 <USB_EPStartXfer+0x3be>
 800711e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007122:	2b3e      	cmp	r3, #62	; 0x3e
 8007124:	d81b      	bhi.n	800715e <USB_EPStartXfer+0x30a>
 8007126:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800712a:	085b      	lsrs	r3, r3, #1
 800712c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007130:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007134:	f003 0301 	and.w	r3, r3, #1
 8007138:	2b00      	cmp	r3, #0
 800713a:	d004      	beq.n	8007146 <USB_EPStartXfer+0x2f2>
 800713c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007140:	3301      	adds	r3, #1
 8007142:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007146:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800714a:	b29b      	uxth	r3, r3
 800714c:	029b      	lsls	r3, r3, #10
 800714e:	b29a      	uxth	r2, r3
 8007150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007154:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	801a      	strh	r2, [r3, #0]
 800715c:	e059      	b.n	8007212 <USB_EPStartXfer+0x3be>
 800715e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007162:	095b      	lsrs	r3, r3, #5
 8007164:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007168:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800716c:	f003 031f 	and.w	r3, r3, #31
 8007170:	2b00      	cmp	r3, #0
 8007172:	d104      	bne.n	800717e <USB_EPStartXfer+0x32a>
 8007174:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007178:	3b01      	subs	r3, #1
 800717a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800717e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007182:	b29b      	uxth	r3, r3
 8007184:	029b      	lsls	r3, r3, #10
 8007186:	b29b      	uxth	r3, r3
 8007188:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800718c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007190:	b29a      	uxth	r2, r3
 8007192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007196:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	801a      	strh	r2, [r3, #0]
 800719e:	e038      	b.n	8007212 <USB_EPStartXfer+0x3be>
 80071a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	785b      	ldrb	r3, [r3, #1]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d130      	bne.n	8007212 <USB_EPStartXfer+0x3be>
 80071b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071be:	b29b      	uxth	r3, r3
 80071c0:	4619      	mov	r1, r3
 80071c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071c6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80071ca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80071ce:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80071d2:	6812      	ldr	r2, [r2, #0]
 80071d4:	440a      	add	r2, r1
 80071d6:	601a      	str	r2, [r3, #0]
 80071d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	011a      	lsls	r2, r3, #4
 80071e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ea:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4413      	add	r3, r2
 80071f2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80071f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071fe:	601a      	str	r2, [r3, #0]
 8007200:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007204:	b29a      	uxth	r2, r3
 8007206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800720a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007216:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	895b      	ldrh	r3, [r3, #10]
 800721e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007226:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6959      	ldr	r1, [r3, #20]
 800722e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007232:	b29b      	uxth	r3, r3
 8007234:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007238:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800723c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007240:	6800      	ldr	r0, [r0, #0]
 8007242:	f001 fd7d 	bl	8008d40 <USB_WritePMA>
            ep->xfer_buff += len;
 8007246:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800724a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	695a      	ldr	r2, [r3, #20]
 8007252:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007256:	441a      	add	r2, r3
 8007258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800725c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007264:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007268:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	6a1a      	ldr	r2, [r3, #32]
 8007270:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007274:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	429a      	cmp	r2, r3
 800727e:	d90f      	bls.n	80072a0 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8007280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007284:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	6a1a      	ldr	r2, [r3, #32]
 800728c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007290:	1ad2      	subs	r2, r2, r3
 8007292:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007296:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	621a      	str	r2, [r3, #32]
 800729e:	e00e      	b.n	80072be <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80072a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	6a1b      	ldr	r3, [r3, #32]
 80072ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80072b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2200      	movs	r2, #0
 80072bc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80072be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	785b      	ldrb	r3, [r3, #1]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	f040 809a 	bne.w	8007404 <USB_EPStartXfer+0x5b0>
 80072d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80072d8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80072dc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80072e0:	6812      	ldr	r2, [r2, #0]
 80072e2:	601a      	str	r2, [r3, #0]
 80072e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	4619      	mov	r1, r3
 80072f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072fa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80072fe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007302:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8007306:	6812      	ldr	r2, [r2, #0]
 8007308:	440a      	add	r2, r1
 800730a:	601a      	str	r2, [r3, #0]
 800730c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007310:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	011a      	lsls	r2, r3, #4
 800731a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800731e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4413      	add	r3, r2
 8007326:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800732a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800732e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007338:	2b00      	cmp	r3, #0
 800733a:	d122      	bne.n	8007382 <USB_EPStartXfer+0x52e>
 800733c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007340:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	881b      	ldrh	r3, [r3, #0]
 8007348:	b29b      	uxth	r3, r3
 800734a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800734e:	b29a      	uxth	r2, r3
 8007350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007354:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	801a      	strh	r2, [r3, #0]
 800735c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007360:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	881b      	ldrh	r3, [r3, #0]
 8007368:	b29b      	uxth	r3, r3
 800736a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800736e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007372:	b29a      	uxth	r2, r3
 8007374:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007378:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	801a      	strh	r2, [r3, #0]
 8007380:	e083      	b.n	800748a <USB_EPStartXfer+0x636>
 8007382:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007386:	2b3e      	cmp	r3, #62	; 0x3e
 8007388:	d81b      	bhi.n	80073c2 <USB_EPStartXfer+0x56e>
 800738a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800738e:	085b      	lsrs	r3, r3, #1
 8007390:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007394:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007398:	f003 0301 	and.w	r3, r3, #1
 800739c:	2b00      	cmp	r3, #0
 800739e:	d004      	beq.n	80073aa <USB_EPStartXfer+0x556>
 80073a0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80073a4:	3301      	adds	r3, #1
 80073a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80073aa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	029b      	lsls	r3, r3, #10
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073b8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	801a      	strh	r2, [r3, #0]
 80073c0:	e063      	b.n	800748a <USB_EPStartXfer+0x636>
 80073c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073c6:	095b      	lsrs	r3, r3, #5
 80073c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80073cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073d0:	f003 031f 	and.w	r3, r3, #31
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d104      	bne.n	80073e2 <USB_EPStartXfer+0x58e>
 80073d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80073dc:	3b01      	subs	r3, #1
 80073de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80073e2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	029b      	lsls	r3, r3, #10
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073fa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	801a      	strh	r2, [r3, #0]
 8007402:	e042      	b.n	800748a <USB_EPStartXfer+0x636>
 8007404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007408:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	785b      	ldrb	r3, [r3, #1]
 8007410:	2b01      	cmp	r3, #1
 8007412:	d13a      	bne.n	800748a <USB_EPStartXfer+0x636>
 8007414:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007418:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800741c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007420:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007424:	6812      	ldr	r2, [r2, #0]
 8007426:	601a      	str	r2, [r3, #0]
 8007428:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800742c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007436:	b29b      	uxth	r3, r3
 8007438:	4619      	mov	r1, r3
 800743a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800743e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007442:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007446:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800744a:	6812      	ldr	r2, [r2, #0]
 800744c:	440a      	add	r2, r1
 800744e:	601a      	str	r2, [r3, #0]
 8007450:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007454:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	011a      	lsls	r2, r3, #4
 800745e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007462:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4413      	add	r3, r2
 800746a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800746e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007472:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007476:	601a      	str	r2, [r3, #0]
 8007478:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800747c:	b29a      	uxth	r2, r3
 800747e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007482:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800748a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800748e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	891b      	ldrh	r3, [r3, #8]
 8007496:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800749a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800749e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	6959      	ldr	r1, [r3, #20]
 80074a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80074b0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80074b4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80074b8:	6800      	ldr	r0, [r0, #0]
 80074ba:	f001 fc41 	bl	8008d40 <USB_WritePMA>
 80074be:	f000 be0e 	b.w	80080de <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80074c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	785b      	ldrb	r3, [r3, #1]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d16d      	bne.n	80075ae <USB_EPStartXfer+0x75a>
 80074d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80074de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	461a      	mov	r2, r3
 80074f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074f2:	4413      	add	r3, r2
 80074f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80074f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	011a      	lsls	r2, r3, #4
 8007504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007506:	4413      	add	r3, r2
 8007508:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800750c:	647b      	str	r3, [r7, #68]	; 0x44
 800750e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007512:	2b00      	cmp	r3, #0
 8007514:	d112      	bne.n	800753c <USB_EPStartXfer+0x6e8>
 8007516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007518:	881b      	ldrh	r3, [r3, #0]
 800751a:	b29b      	uxth	r3, r3
 800751c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007520:	b29a      	uxth	r2, r3
 8007522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007524:	801a      	strh	r2, [r3, #0]
 8007526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007528:	881b      	ldrh	r3, [r3, #0]
 800752a:	b29b      	uxth	r3, r3
 800752c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007530:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007534:	b29a      	uxth	r2, r3
 8007536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007538:	801a      	strh	r2, [r3, #0]
 800753a:	e063      	b.n	8007604 <USB_EPStartXfer+0x7b0>
 800753c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007540:	2b3e      	cmp	r3, #62	; 0x3e
 8007542:	d817      	bhi.n	8007574 <USB_EPStartXfer+0x720>
 8007544:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007548:	085b      	lsrs	r3, r3, #1
 800754a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800754e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007552:	f003 0301 	and.w	r3, r3, #1
 8007556:	2b00      	cmp	r3, #0
 8007558:	d004      	beq.n	8007564 <USB_EPStartXfer+0x710>
 800755a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800755e:	3301      	adds	r3, #1
 8007560:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007564:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007568:	b29b      	uxth	r3, r3
 800756a:	029b      	lsls	r3, r3, #10
 800756c:	b29a      	uxth	r2, r3
 800756e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007570:	801a      	strh	r2, [r3, #0]
 8007572:	e047      	b.n	8007604 <USB_EPStartXfer+0x7b0>
 8007574:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007578:	095b      	lsrs	r3, r3, #5
 800757a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800757e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007582:	f003 031f 	and.w	r3, r3, #31
 8007586:	2b00      	cmp	r3, #0
 8007588:	d104      	bne.n	8007594 <USB_EPStartXfer+0x740>
 800758a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800758e:	3b01      	subs	r3, #1
 8007590:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007594:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007598:	b29b      	uxth	r3, r3
 800759a:	029b      	lsls	r3, r3, #10
 800759c:	b29b      	uxth	r3, r3
 800759e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075aa:	801a      	strh	r2, [r3, #0]
 80075ac:	e02a      	b.n	8007604 <USB_EPStartXfer+0x7b0>
 80075ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	785b      	ldrb	r3, [r3, #1]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d122      	bne.n	8007604 <USB_EPStartXfer+0x7b0>
 80075be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	653b      	str	r3, [r7, #80]	; 0x50
 80075ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075d8:	b29b      	uxth	r3, r3
 80075da:	461a      	mov	r2, r3
 80075dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075de:	4413      	add	r3, r2
 80075e0:	653b      	str	r3, [r7, #80]	; 0x50
 80075e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	011a      	lsls	r2, r3, #4
 80075f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075f2:	4413      	add	r3, r2
 80075f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80075f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075fe:	b29a      	uxth	r2, r3
 8007600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007602:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007604:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007608:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	891b      	ldrh	r3, [r3, #8]
 8007610:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007614:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007618:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	6959      	ldr	r1, [r3, #20]
 8007620:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007624:	b29b      	uxth	r3, r3
 8007626:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800762a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800762e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007632:	6800      	ldr	r0, [r0, #0]
 8007634:	f001 fb84 	bl	8008d40 <USB_WritePMA>
            ep->xfer_buff += len;
 8007638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800763c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	695a      	ldr	r2, [r3, #20]
 8007644:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007648:	441a      	add	r2, r3
 800764a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800764e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800765a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	6a1a      	ldr	r2, [r3, #32]
 8007662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007666:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	429a      	cmp	r2, r3
 8007670:	d90f      	bls.n	8007692 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8007672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007676:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	6a1a      	ldr	r2, [r3, #32]
 800767e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007682:	1ad2      	subs	r2, r2, r3
 8007684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007688:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	621a      	str	r2, [r3, #32]
 8007690:	e00e      	b.n	80076b0 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8007692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007696:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6a1b      	ldr	r3, [r3, #32]
 800769e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80076a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2200      	movs	r2, #0
 80076ae:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	643b      	str	r3, [r7, #64]	; 0x40
 80076bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	785b      	ldrb	r3, [r3, #1]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d16d      	bne.n	80077a8 <USB_EPStartXfer+0x954>
 80076cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80076d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	461a      	mov	r2, r3
 80076ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ec:	4413      	add	r3, r2
 80076ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80076f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	011a      	lsls	r2, r3, #4
 80076fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007700:	4413      	add	r3, r2
 8007702:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007706:	637b      	str	r3, [r7, #52]	; 0x34
 8007708:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800770c:	2b00      	cmp	r3, #0
 800770e:	d112      	bne.n	8007736 <USB_EPStartXfer+0x8e2>
 8007710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007712:	881b      	ldrh	r3, [r3, #0]
 8007714:	b29b      	uxth	r3, r3
 8007716:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800771a:	b29a      	uxth	r2, r3
 800771c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800771e:	801a      	strh	r2, [r3, #0]
 8007720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007722:	881b      	ldrh	r3, [r3, #0]
 8007724:	b29b      	uxth	r3, r3
 8007726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800772a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800772e:	b29a      	uxth	r2, r3
 8007730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007732:	801a      	strh	r2, [r3, #0]
 8007734:	e05d      	b.n	80077f2 <USB_EPStartXfer+0x99e>
 8007736:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800773a:	2b3e      	cmp	r3, #62	; 0x3e
 800773c:	d817      	bhi.n	800776e <USB_EPStartXfer+0x91a>
 800773e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007742:	085b      	lsrs	r3, r3, #1
 8007744:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007748:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800774c:	f003 0301 	and.w	r3, r3, #1
 8007750:	2b00      	cmp	r3, #0
 8007752:	d004      	beq.n	800775e <USB_EPStartXfer+0x90a>
 8007754:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007758:	3301      	adds	r3, #1
 800775a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800775e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007762:	b29b      	uxth	r3, r3
 8007764:	029b      	lsls	r3, r3, #10
 8007766:	b29a      	uxth	r2, r3
 8007768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800776a:	801a      	strh	r2, [r3, #0]
 800776c:	e041      	b.n	80077f2 <USB_EPStartXfer+0x99e>
 800776e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007772:	095b      	lsrs	r3, r3, #5
 8007774:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007778:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800777c:	f003 031f 	and.w	r3, r3, #31
 8007780:	2b00      	cmp	r3, #0
 8007782:	d104      	bne.n	800778e <USB_EPStartXfer+0x93a>
 8007784:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007788:	3b01      	subs	r3, #1
 800778a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800778e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007792:	b29b      	uxth	r3, r3
 8007794:	029b      	lsls	r3, r3, #10
 8007796:	b29b      	uxth	r3, r3
 8007798:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800779c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a4:	801a      	strh	r2, [r3, #0]
 80077a6:	e024      	b.n	80077f2 <USB_EPStartXfer+0x99e>
 80077a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	785b      	ldrb	r3, [r3, #1]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d11c      	bne.n	80077f2 <USB_EPStartXfer+0x99e>
 80077b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	461a      	mov	r2, r3
 80077ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077cc:	4413      	add	r3, r2
 80077ce:	643b      	str	r3, [r7, #64]	; 0x40
 80077d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	011a      	lsls	r2, r3, #4
 80077de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077e0:	4413      	add	r3, r2
 80077e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80077e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80077f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	895b      	ldrh	r3, [r3, #10]
 80077fe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007806:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	6959      	ldr	r1, [r3, #20]
 800780e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007812:	b29b      	uxth	r3, r3
 8007814:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007818:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800781c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007820:	6800      	ldr	r0, [r0, #0]
 8007822:	f001 fa8d 	bl	8008d40 <USB_WritePMA>
 8007826:	f000 bc5a 	b.w	80080de <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800782a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800782e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6a1b      	ldr	r3, [r3, #32]
 8007836:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800783a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800783e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007848:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4413      	add	r3, r2
 8007854:	881b      	ldrh	r3, [r3, #0]
 8007856:	b29b      	uxth	r3, r3
 8007858:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800785c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007860:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007868:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007872:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	441a      	add	r2, r3
 800787e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007882:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007886:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800788a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800788e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007892:	b29b      	uxth	r3, r3
 8007894:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800789a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	461a      	mov	r2, r3
 80078b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078b6:	4413      	add	r3, r2
 80078b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	011a      	lsls	r2, r3, #4
 80078c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078ca:	4413      	add	r3, r2
 80078cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80078d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80078d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80078dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	891b      	ldrh	r3, [r3, #8]
 80078e8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	6959      	ldr	r1, [r3, #20]
 80078f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007902:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007906:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800790a:	6800      	ldr	r0, [r0, #0]
 800790c:	f001 fa18 	bl	8008d40 <USB_WritePMA>
 8007910:	e3e5      	b.n	80080de <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007912:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007916:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007920:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	4413      	add	r3, r2
 800792c:	881b      	ldrh	r3, [r3, #0]
 800792e:	b29b      	uxth	r3, r3
 8007930:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007938:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800793c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007940:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800794a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	441a      	add	r2, r3
 8007956:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800795a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800795e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007962:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800796a:	b29b      	uxth	r3, r3
 800796c:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800796e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007972:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	6a1a      	ldr	r2, [r3, #32]
 800797a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800797e:	1ad2      	subs	r2, r2, r3
 8007980:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007984:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800798c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007990:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800799a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	4413      	add	r3, r2
 80079a6:	881b      	ldrh	r3, [r3, #0]
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	f000 81bc 	beq.w	8007d2c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80079b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80079c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	785b      	ldrb	r3, [r3, #1]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d16d      	bne.n	8007aae <USB_EPStartXfer+0xc5a>
 80079d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80079de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	461a      	mov	r2, r3
 80079f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079f2:	4413      	add	r3, r2
 80079f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80079f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	011a      	lsls	r2, r3, #4
 8007a04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a06:	4413      	add	r3, r2
 8007a08:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a0c:	677b      	str	r3, [r7, #116]	; 0x74
 8007a0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d112      	bne.n	8007a3c <USB_EPStartXfer+0xbe8>
 8007a16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a18:	881b      	ldrh	r3, [r3, #0]
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a24:	801a      	strh	r2, [r3, #0]
 8007a26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a28:	881b      	ldrh	r3, [r3, #0]
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a34:	b29a      	uxth	r2, r3
 8007a36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a38:	801a      	strh	r2, [r3, #0]
 8007a3a:	e060      	b.n	8007afe <USB_EPStartXfer+0xcaa>
 8007a3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a40:	2b3e      	cmp	r3, #62	; 0x3e
 8007a42:	d817      	bhi.n	8007a74 <USB_EPStartXfer+0xc20>
 8007a44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a48:	085b      	lsrs	r3, r3, #1
 8007a4a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007a4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a52:	f003 0301 	and.w	r3, r3, #1
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d004      	beq.n	8007a64 <USB_EPStartXfer+0xc10>
 8007a5a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007a5e:	3301      	adds	r3, #1
 8007a60:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007a64:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	029b      	lsls	r3, r3, #10
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a70:	801a      	strh	r2, [r3, #0]
 8007a72:	e044      	b.n	8007afe <USB_EPStartXfer+0xcaa>
 8007a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a78:	095b      	lsrs	r3, r3, #5
 8007a7a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007a7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a82:	f003 031f 	and.w	r3, r3, #31
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d104      	bne.n	8007a94 <USB_EPStartXfer+0xc40>
 8007a8a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007a94:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	029b      	lsls	r3, r3, #10
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007aaa:	801a      	strh	r2, [r3, #0]
 8007aac:	e027      	b.n	8007afe <USB_EPStartXfer+0xcaa>
 8007aae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ab2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	785b      	ldrb	r3, [r3, #1]
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d11f      	bne.n	8007afe <USB_EPStartXfer+0xcaa>
 8007abe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ac2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	461a      	mov	r2, r3
 8007ad0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ad4:	4413      	add	r3, r2
 8007ad6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ada:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ade:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	011a      	lsls	r2, r3, #4
 8007ae8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007aec:	4413      	add	r3, r2
 8007aee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007af2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007af4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007afc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007afe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	895b      	ldrh	r3, [r3, #10]
 8007b0a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	6959      	ldr	r1, [r3, #20]
 8007b1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007b24:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007b28:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007b2c:	6800      	ldr	r0, [r0, #0]
 8007b2e:	f001 f907 	bl	8008d40 <USB_WritePMA>
          ep->xfer_buff += len;
 8007b32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	695a      	ldr	r2, [r3, #20]
 8007b3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b42:	441a      	add	r2, r3
 8007b44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007b50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	6a1a      	ldr	r2, [r3, #32]
 8007b5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d90f      	bls.n	8007b8c <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007b6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	6a1a      	ldr	r2, [r3, #32]
 8007b78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b7c:	1ad2      	subs	r2, r2, r3
 8007b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	621a      	str	r2, [r3, #32]
 8007b8a:	e00e      	b.n	8007baa <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007b8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	6a1b      	ldr	r3, [r3, #32]
 8007b98:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007b9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ba0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007baa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f000 8295 	beq.w	80080de <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	785b      	ldrb	r3, [r3, #1]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d16d      	bne.n	8007ca0 <USB_EPStartXfer+0xe4c>
 8007bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bc8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	461a      	mov	r2, r3
 8007be2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007be4:	4413      	add	r3, r2
 8007be6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007be8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	011a      	lsls	r2, r3, #4
 8007bf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007bf8:	4413      	add	r3, r2
 8007bfa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007bfe:	667b      	str	r3, [r7, #100]	; 0x64
 8007c00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d112      	bne.n	8007c2e <USB_EPStartXfer+0xdda>
 8007c08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c0a:	881b      	ldrh	r3, [r3, #0]
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c16:	801a      	strh	r2, [r3, #0]
 8007c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c1a:	881b      	ldrh	r3, [r3, #0]
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c26:	b29a      	uxth	r2, r3
 8007c28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c2a:	801a      	strh	r2, [r3, #0]
 8007c2c:	e063      	b.n	8007cf6 <USB_EPStartXfer+0xea2>
 8007c2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c32:	2b3e      	cmp	r3, #62	; 0x3e
 8007c34:	d817      	bhi.n	8007c66 <USB_EPStartXfer+0xe12>
 8007c36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c3a:	085b      	lsrs	r3, r3, #1
 8007c3c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007c40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c44:	f003 0301 	and.w	r3, r3, #1
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d004      	beq.n	8007c56 <USB_EPStartXfer+0xe02>
 8007c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c50:	3301      	adds	r3, #1
 8007c52:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	029b      	lsls	r3, r3, #10
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c62:	801a      	strh	r2, [r3, #0]
 8007c64:	e047      	b.n	8007cf6 <USB_EPStartXfer+0xea2>
 8007c66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c6a:	095b      	lsrs	r3, r3, #5
 8007c6c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007c70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c74:	f003 031f 	and.w	r3, r3, #31
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d104      	bne.n	8007c86 <USB_EPStartXfer+0xe32>
 8007c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c80:	3b01      	subs	r3, #1
 8007c82:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	029b      	lsls	r3, r3, #10
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c98:	b29a      	uxth	r2, r3
 8007c9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c9c:	801a      	strh	r2, [r3, #0]
 8007c9e:	e02a      	b.n	8007cf6 <USB_EPStartXfer+0xea2>
 8007ca0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ca4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	785b      	ldrb	r3, [r3, #1]
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d122      	bne.n	8007cf6 <USB_EPStartXfer+0xea2>
 8007cb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	673b      	str	r3, [r7, #112]	; 0x70
 8007cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	461a      	mov	r2, r3
 8007cce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cd0:	4413      	add	r3, r2
 8007cd2:	673b      	str	r3, [r7, #112]	; 0x70
 8007cd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	011a      	lsls	r2, r3, #4
 8007ce2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ce4:	4413      	add	r3, r2
 8007ce6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007cea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007cec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cf4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007cf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	891b      	ldrh	r3, [r3, #8]
 8007d02:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	6959      	ldr	r1, [r3, #20]
 8007d12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007d1c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007d20:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007d24:	6800      	ldr	r0, [r0, #0]
 8007d26:	f001 f80b 	bl	8008d40 <USB_WritePMA>
 8007d2a:	e1d8      	b.n	80080de <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	785b      	ldrb	r3, [r3, #1]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d178      	bne.n	8007e2e <USB_EPStartXfer+0xfda>
 8007d3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d60:	4413      	add	r3, r2
 8007d62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	011a      	lsls	r2, r3, #4
 8007d74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d78:	4413      	add	r3, r2
 8007d7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d7e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d116      	bne.n	8007db8 <USB_EPStartXfer+0xf64>
 8007d8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d8e:	881b      	ldrh	r3, [r3, #0]
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d96:	b29a      	uxth	r2, r3
 8007d98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d9c:	801a      	strh	r2, [r3, #0]
 8007d9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007da2:	881b      	ldrh	r3, [r3, #0]
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007daa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007db4:	801a      	strh	r2, [r3, #0]
 8007db6:	e06b      	b.n	8007e90 <USB_EPStartXfer+0x103c>
 8007db8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dbc:	2b3e      	cmp	r3, #62	; 0x3e
 8007dbe:	d818      	bhi.n	8007df2 <USB_EPStartXfer+0xf9e>
 8007dc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dc4:	085b      	lsrs	r3, r3, #1
 8007dc6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007dca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dce:	f003 0301 	and.w	r3, r3, #1
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d004      	beq.n	8007de0 <USB_EPStartXfer+0xf8c>
 8007dd6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007dda:	3301      	adds	r3, #1
 8007ddc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007de0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	029b      	lsls	r3, r3, #10
 8007de8:	b29a      	uxth	r2, r3
 8007dea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dee:	801a      	strh	r2, [r3, #0]
 8007df0:	e04e      	b.n	8007e90 <USB_EPStartXfer+0x103c>
 8007df2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007df6:	095b      	lsrs	r3, r3, #5
 8007df8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007dfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e00:	f003 031f 	and.w	r3, r3, #31
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d104      	bne.n	8007e12 <USB_EPStartXfer+0xfbe>
 8007e08:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007e12:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	029b      	lsls	r3, r3, #10
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e24:	b29a      	uxth	r2, r3
 8007e26:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e2a:	801a      	strh	r2, [r3, #0]
 8007e2c:	e030      	b.n	8007e90 <USB_EPStartXfer+0x103c>
 8007e2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	785b      	ldrb	r3, [r3, #1]
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d128      	bne.n	8007e90 <USB_EPStartXfer+0x103c>
 8007e3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007e4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007e62:	4413      	add	r3, r2
 8007e64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007e68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	011a      	lsls	r2, r3, #4
 8007e76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007e7a:	4413      	add	r3, r2
 8007e7c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007e84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e88:	b29a      	uxth	r2, r3
 8007e8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e8e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007e90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	891b      	ldrh	r3, [r3, #8]
 8007e9c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ea4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	6959      	ldr	r1, [r3, #20]
 8007eac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007eb6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007eba:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007ebe:	6800      	ldr	r0, [r0, #0]
 8007ec0:	f000 ff3e 	bl	8008d40 <USB_WritePMA>
          ep->xfer_buff += len;
 8007ec4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ec8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	695a      	ldr	r2, [r3, #20]
 8007ed0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ed4:	441a      	add	r2, r3
 8007ed6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ee6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	6a1a      	ldr	r2, [r3, #32]
 8007eee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ef2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d90f      	bls.n	8007f1e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8007efe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	6a1a      	ldr	r2, [r3, #32]
 8007f0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f0e:	1ad2      	subs	r2, r2, r3
 8007f10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	621a      	str	r2, [r3, #32]
 8007f1c:	e00e      	b.n	8007f3c <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8007f1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	6a1b      	ldr	r3, [r3, #32]
 8007f2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007f2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	f000 80cc 	beq.w	80080de <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	785b      	ldrb	r3, [r3, #1]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d178      	bne.n	8008056 <USB_EPStartXfer+0x1202>
 8007f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007f72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	461a      	mov	r2, r3
 8007f84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f88:	4413      	add	r3, r2
 8007f8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	011a      	lsls	r2, r3, #4
 8007f9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007fa0:	4413      	add	r3, r2
 8007fa2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007fa6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007faa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d116      	bne.n	8007fe0 <USB_EPStartXfer+0x118c>
 8007fb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007fb6:	881b      	ldrh	r3, [r3, #0]
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007fc4:	801a      	strh	r2, [r3, #0]
 8007fc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007fca:	881b      	ldrh	r3, [r3, #0]
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007fdc:	801a      	strh	r2, [r3, #0]
 8007fde:	e064      	b.n	80080aa <USB_EPStartXfer+0x1256>
 8007fe0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fe4:	2b3e      	cmp	r3, #62	; 0x3e
 8007fe6:	d818      	bhi.n	800801a <USB_EPStartXfer+0x11c6>
 8007fe8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fec:	085b      	lsrs	r3, r3, #1
 8007fee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007ff2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ff6:	f003 0301 	and.w	r3, r3, #1
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d004      	beq.n	8008008 <USB_EPStartXfer+0x11b4>
 8007ffe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008002:	3301      	adds	r3, #1
 8008004:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008008:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800800c:	b29b      	uxth	r3, r3
 800800e:	029b      	lsls	r3, r3, #10
 8008010:	b29a      	uxth	r2, r3
 8008012:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008016:	801a      	strh	r2, [r3, #0]
 8008018:	e047      	b.n	80080aa <USB_EPStartXfer+0x1256>
 800801a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800801e:	095b      	lsrs	r3, r3, #5
 8008020:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008024:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008028:	f003 031f 	and.w	r3, r3, #31
 800802c:	2b00      	cmp	r3, #0
 800802e:	d104      	bne.n	800803a <USB_EPStartXfer+0x11e6>
 8008030:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008034:	3b01      	subs	r3, #1
 8008036:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800803a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800803e:	b29b      	uxth	r3, r3
 8008040:	029b      	lsls	r3, r3, #10
 8008042:	b29b      	uxth	r3, r3
 8008044:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008048:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800804c:	b29a      	uxth	r2, r3
 800804e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008052:	801a      	strh	r2, [r3, #0]
 8008054:	e029      	b.n	80080aa <USB_EPStartXfer+0x1256>
 8008056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800805a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	785b      	ldrb	r3, [r3, #1]
 8008062:	2b01      	cmp	r3, #1
 8008064:	d121      	bne.n	80080aa <USB_EPStartXfer+0x1256>
 8008066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800806a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008074:	b29b      	uxth	r3, r3
 8008076:	461a      	mov	r2, r3
 8008078:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800807c:	4413      	add	r3, r2
 800807e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008086:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	011a      	lsls	r2, r3, #4
 8008090:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008094:	4413      	add	r3, r2
 8008096:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800809a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800809e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80080aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	895b      	ldrh	r3, [r3, #10]
 80080b6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6959      	ldr	r1, [r3, #20]
 80080c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80080d0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80080d4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80080d8:	6800      	ldr	r0, [r0, #0]
 80080da:	f000 fe31 	bl	8008d40 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80080de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	4413      	add	r3, r2
 80080f8:	881b      	ldrh	r3, [r3, #0]
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008100:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008104:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008108:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800810c:	8013      	strh	r3, [r2, #0]
 800810e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008112:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008116:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800811a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800811e:	8812      	ldrh	r2, [r2, #0]
 8008120:	f082 0210 	eor.w	r2, r2, #16
 8008124:	801a      	strh	r2, [r3, #0]
 8008126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800812a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800812e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008132:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008136:	8812      	ldrh	r2, [r2, #0]
 8008138:	f082 0220 	eor.w	r2, r2, #32
 800813c:	801a      	strh	r2, [r3, #0]
 800813e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008142:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800814c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	441a      	add	r2, r3
 8008158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800815c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008160:	881b      	ldrh	r3, [r3, #0]
 8008162:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008166:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800816a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800816e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008172:	b29b      	uxth	r3, r3
 8008174:	8013      	strh	r3, [r2, #0]
 8008176:	f000 bc9f 	b.w	8008ab8 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800817a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800817e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	7b1b      	ldrb	r3, [r3, #12]
 8008186:	2b00      	cmp	r3, #0
 8008188:	f040 80ae 	bne.w	80082e8 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800818c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008190:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	699a      	ldr	r2, [r3, #24]
 8008198:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800819c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	691b      	ldr	r3, [r3, #16]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d917      	bls.n	80081d8 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80081a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80081b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	699a      	ldr	r2, [r3, #24]
 80081c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081c8:	1ad2      	subs	r2, r2, r3
 80081ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	619a      	str	r2, [r3, #24]
 80081d6:	e00e      	b.n	80081f6 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80081d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80081e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2200      	movs	r2, #0
 80081f4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80081f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008208:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008212:	b29b      	uxth	r3, r3
 8008214:	461a      	mov	r2, r3
 8008216:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800821a:	4413      	add	r3, r2
 800821c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008224:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	011a      	lsls	r2, r3, #4
 800822e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008232:	4413      	add	r3, r2
 8008234:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008238:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800823c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008240:	2b00      	cmp	r3, #0
 8008242:	d116      	bne.n	8008272 <USB_EPStartXfer+0x141e>
 8008244:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008248:	881b      	ldrh	r3, [r3, #0]
 800824a:	b29b      	uxth	r3, r3
 800824c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008250:	b29a      	uxth	r2, r3
 8008252:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008256:	801a      	strh	r2, [r3, #0]
 8008258:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800825c:	881b      	ldrh	r3, [r3, #0]
 800825e:	b29b      	uxth	r3, r3
 8008260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008268:	b29a      	uxth	r2, r3
 800826a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800826e:	801a      	strh	r2, [r3, #0]
 8008270:	e3e8      	b.n	8008a44 <USB_EPStartXfer+0x1bf0>
 8008272:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008276:	2b3e      	cmp	r3, #62	; 0x3e
 8008278:	d818      	bhi.n	80082ac <USB_EPStartXfer+0x1458>
 800827a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800827e:	085b      	lsrs	r3, r3, #1
 8008280:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008284:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008288:	f003 0301 	and.w	r3, r3, #1
 800828c:	2b00      	cmp	r3, #0
 800828e:	d004      	beq.n	800829a <USB_EPStartXfer+0x1446>
 8008290:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008294:	3301      	adds	r3, #1
 8008296:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800829a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800829e:	b29b      	uxth	r3, r3
 80082a0:	029b      	lsls	r3, r3, #10
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082a8:	801a      	strh	r2, [r3, #0]
 80082aa:	e3cb      	b.n	8008a44 <USB_EPStartXfer+0x1bf0>
 80082ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082b0:	095b      	lsrs	r3, r3, #5
 80082b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80082b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082ba:	f003 031f 	and.w	r3, r3, #31
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d104      	bne.n	80082cc <USB_EPStartXfer+0x1478>
 80082c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80082c6:	3b01      	subs	r3, #1
 80082c8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80082cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	029b      	lsls	r3, r3, #10
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082de:	b29a      	uxth	r2, r3
 80082e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082e4:	801a      	strh	r2, [r3, #0]
 80082e6:	e3ad      	b.n	8008a44 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80082e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	78db      	ldrb	r3, [r3, #3]
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	f040 8200 	bne.w	80086fa <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80082fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	785b      	ldrb	r3, [r3, #1]
 8008306:	2b00      	cmp	r3, #0
 8008308:	f040 8091 	bne.w	800842e <USB_EPStartXfer+0x15da>
 800830c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008310:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800831a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800831e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008328:	b29b      	uxth	r3, r3
 800832a:	461a      	mov	r2, r3
 800832c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008330:	4413      	add	r3, r2
 8008332:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800833a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	011a      	lsls	r2, r3, #4
 8008344:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008348:	4413      	add	r3, r2
 800834a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800834e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008352:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008356:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d116      	bne.n	8008390 <USB_EPStartXfer+0x153c>
 8008362:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008366:	881b      	ldrh	r3, [r3, #0]
 8008368:	b29b      	uxth	r3, r3
 800836a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800836e:	b29a      	uxth	r2, r3
 8008370:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008374:	801a      	strh	r2, [r3, #0]
 8008376:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800837a:	881b      	ldrh	r3, [r3, #0]
 800837c:	b29b      	uxth	r3, r3
 800837e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008382:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008386:	b29a      	uxth	r2, r3
 8008388:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800838c:	801a      	strh	r2, [r3, #0]
 800838e:	e083      	b.n	8008498 <USB_EPStartXfer+0x1644>
 8008390:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008394:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	691b      	ldr	r3, [r3, #16]
 800839c:	2b3e      	cmp	r3, #62	; 0x3e
 800839e:	d820      	bhi.n	80083e2 <USB_EPStartXfer+0x158e>
 80083a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	085b      	lsrs	r3, r3, #1
 80083ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80083b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	691b      	ldr	r3, [r3, #16]
 80083be:	f003 0301 	and.w	r3, r3, #1
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d004      	beq.n	80083d0 <USB_EPStartXfer+0x157c>
 80083c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083ca:	3301      	adds	r3, #1
 80083cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80083d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	029b      	lsls	r3, r3, #10
 80083d8:	b29a      	uxth	r2, r3
 80083da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083de:	801a      	strh	r2, [r3, #0]
 80083e0:	e05a      	b.n	8008498 <USB_EPStartXfer+0x1644>
 80083e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	095b      	lsrs	r3, r3, #5
 80083f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80083f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	691b      	ldr	r3, [r3, #16]
 8008400:	f003 031f 	and.w	r3, r3, #31
 8008404:	2b00      	cmp	r3, #0
 8008406:	d104      	bne.n	8008412 <USB_EPStartXfer+0x15be>
 8008408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800840c:	3b01      	subs	r3, #1
 800840e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008416:	b29b      	uxth	r3, r3
 8008418:	029b      	lsls	r3, r3, #10
 800841a:	b29b      	uxth	r3, r3
 800841c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008424:	b29a      	uxth	r2, r3
 8008426:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800842a:	801a      	strh	r2, [r3, #0]
 800842c:	e034      	b.n	8008498 <USB_EPStartXfer+0x1644>
 800842e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008432:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	785b      	ldrb	r3, [r3, #1]
 800843a:	2b01      	cmp	r3, #1
 800843c:	d12c      	bne.n	8008498 <USB_EPStartXfer+0x1644>
 800843e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008442:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800844c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008450:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800845a:	b29b      	uxth	r3, r3
 800845c:	461a      	mov	r2, r3
 800845e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008462:	4413      	add	r3, r2
 8008464:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800846c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	011a      	lsls	r2, r3, #4
 8008476:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800847a:	4413      	add	r3, r2
 800847c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008480:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008488:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	b29a      	uxth	r2, r3
 8008492:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008496:	801a      	strh	r2, [r3, #0]
 8008498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800849c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80084a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	785b      	ldrb	r3, [r3, #1]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	f040 8091 	bne.w	80085da <USB_EPStartXfer+0x1786>
 80084b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80084c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	461a      	mov	r2, r3
 80084d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80084dc:	4413      	add	r3, r2
 80084de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80084e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	011a      	lsls	r2, r3, #4
 80084f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80084f4:	4413      	add	r3, r2
 80084f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80084fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80084fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008502:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d116      	bne.n	800853c <USB_EPStartXfer+0x16e8>
 800850e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008512:	881b      	ldrh	r3, [r3, #0]
 8008514:	b29b      	uxth	r3, r3
 8008516:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800851a:	b29a      	uxth	r2, r3
 800851c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008520:	801a      	strh	r2, [r3, #0]
 8008522:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008526:	881b      	ldrh	r3, [r3, #0]
 8008528:	b29b      	uxth	r3, r3
 800852a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800852e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008532:	b29a      	uxth	r2, r3
 8008534:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008538:	801a      	strh	r2, [r3, #0]
 800853a:	e07c      	b.n	8008636 <USB_EPStartXfer+0x17e2>
 800853c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008540:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	691b      	ldr	r3, [r3, #16]
 8008548:	2b3e      	cmp	r3, #62	; 0x3e
 800854a:	d820      	bhi.n	800858e <USB_EPStartXfer+0x173a>
 800854c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008550:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	085b      	lsrs	r3, r3, #1
 800855a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800855e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008562:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	691b      	ldr	r3, [r3, #16]
 800856a:	f003 0301 	and.w	r3, r3, #1
 800856e:	2b00      	cmp	r3, #0
 8008570:	d004      	beq.n	800857c <USB_EPStartXfer+0x1728>
 8008572:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008576:	3301      	adds	r3, #1
 8008578:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800857c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008580:	b29b      	uxth	r3, r3
 8008582:	029b      	lsls	r3, r3, #10
 8008584:	b29a      	uxth	r2, r3
 8008586:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800858a:	801a      	strh	r2, [r3, #0]
 800858c:	e053      	b.n	8008636 <USB_EPStartXfer+0x17e2>
 800858e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008592:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	095b      	lsrs	r3, r3, #5
 800859c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80085a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	f003 031f 	and.w	r3, r3, #31
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d104      	bne.n	80085be <USB_EPStartXfer+0x176a>
 80085b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80085b8:	3b01      	subs	r3, #1
 80085ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80085be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	029b      	lsls	r3, r3, #10
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085d0:	b29a      	uxth	r2, r3
 80085d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085d6:	801a      	strh	r2, [r3, #0]
 80085d8:	e02d      	b.n	8008636 <USB_EPStartXfer+0x17e2>
 80085da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	785b      	ldrb	r3, [r3, #1]
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d125      	bne.n	8008636 <USB_EPStartXfer+0x17e2>
 80085ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	461a      	mov	r2, r3
 80085fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008600:	4413      	add	r3, r2
 8008602:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800860a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	011a      	lsls	r2, r3, #4
 8008614:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008618:	4413      	add	r3, r2
 800861a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800861e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008626:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	691b      	ldr	r3, [r3, #16]
 800862e:	b29a      	uxth	r2, r3
 8008630:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008634:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008636:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800863a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	69db      	ldr	r3, [r3, #28]
 8008642:	2b00      	cmp	r3, #0
 8008644:	f000 81fe 	beq.w	8008a44 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800864c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008656:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	4413      	add	r3, r2
 8008662:	881b      	ldrh	r3, [r3, #0]
 8008664:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008668:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800866c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008670:	2b00      	cmp	r3, #0
 8008672:	d005      	beq.n	8008680 <USB_EPStartXfer+0x182c>
 8008674:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800867c:	2b00      	cmp	r3, #0
 800867e:	d10d      	bne.n	800869c <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008680:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008688:	2b00      	cmp	r3, #0
 800868a:	f040 81db 	bne.w	8008a44 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800868e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008696:	2b00      	cmp	r3, #0
 8008698:	f040 81d4 	bne.w	8008a44 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800869c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4413      	add	r3, r2
 80086b6:	881b      	ldrh	r3, [r3, #0]
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086c2:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80086c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	441a      	add	r2, r3
 80086e0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80086e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	8013      	strh	r3, [r2, #0]
 80086f8:	e1a4      	b.n	8008a44 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80086fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	78db      	ldrb	r3, [r3, #3]
 8008706:	2b01      	cmp	r3, #1
 8008708:	f040 819a 	bne.w	8008a40 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800870c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008710:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	699a      	ldr	r2, [r3, #24]
 8008718:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800871c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	429a      	cmp	r2, r3
 8008726:	d917      	bls.n	8008758 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8008728:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800872c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	691b      	ldr	r3, [r3, #16]
 8008734:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8008738:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800873c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	699a      	ldr	r2, [r3, #24]
 8008744:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008748:	1ad2      	subs	r2, r2, r3
 800874a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800874e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	619a      	str	r2, [r3, #24]
 8008756:	e00e      	b.n	8008776 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8008758:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800875c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	699b      	ldr	r3, [r3, #24]
 8008764:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8008768:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800876c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2200      	movs	r2, #0
 8008774:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800877a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	785b      	ldrb	r3, [r3, #1]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d178      	bne.n	8008878 <USB_EPStartXfer+0x1a24>
 8008786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800878a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008794:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008798:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	461a      	mov	r2, r3
 80087a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087aa:	4413      	add	r3, r2
 80087ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80087b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	011a      	lsls	r2, r3, #4
 80087be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087c2:	4413      	add	r3, r2
 80087c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80087c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80087cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d116      	bne.n	8008802 <USB_EPStartXfer+0x19ae>
 80087d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80087d8:	881b      	ldrh	r3, [r3, #0]
 80087da:	b29b      	uxth	r3, r3
 80087dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80087e6:	801a      	strh	r2, [r3, #0]
 80087e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80087ec:	881b      	ldrh	r3, [r3, #0]
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087f8:	b29a      	uxth	r2, r3
 80087fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80087fe:	801a      	strh	r2, [r3, #0]
 8008800:	e06b      	b.n	80088da <USB_EPStartXfer+0x1a86>
 8008802:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008806:	2b3e      	cmp	r3, #62	; 0x3e
 8008808:	d818      	bhi.n	800883c <USB_EPStartXfer+0x19e8>
 800880a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800880e:	085b      	lsrs	r3, r3, #1
 8008810:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008814:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008818:	f003 0301 	and.w	r3, r3, #1
 800881c:	2b00      	cmp	r3, #0
 800881e:	d004      	beq.n	800882a <USB_EPStartXfer+0x19d6>
 8008820:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008824:	3301      	adds	r3, #1
 8008826:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800882a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800882e:	b29b      	uxth	r3, r3
 8008830:	029b      	lsls	r3, r3, #10
 8008832:	b29a      	uxth	r2, r3
 8008834:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008838:	801a      	strh	r2, [r3, #0]
 800883a:	e04e      	b.n	80088da <USB_EPStartXfer+0x1a86>
 800883c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008840:	095b      	lsrs	r3, r3, #5
 8008842:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008846:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800884a:	f003 031f 	and.w	r3, r3, #31
 800884e:	2b00      	cmp	r3, #0
 8008850:	d104      	bne.n	800885c <USB_EPStartXfer+0x1a08>
 8008852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008856:	3b01      	subs	r3, #1
 8008858:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800885c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008860:	b29b      	uxth	r3, r3
 8008862:	029b      	lsls	r3, r3, #10
 8008864:	b29b      	uxth	r3, r3
 8008866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800886a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800886e:	b29a      	uxth	r2, r3
 8008870:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008874:	801a      	strh	r2, [r3, #0]
 8008876:	e030      	b.n	80088da <USB_EPStartXfer+0x1a86>
 8008878:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800887c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	785b      	ldrb	r3, [r3, #1]
 8008884:	2b01      	cmp	r3, #1
 8008886:	d128      	bne.n	80088da <USB_EPStartXfer+0x1a86>
 8008888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800888c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800889a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	461a      	mov	r2, r3
 80088a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088ac:	4413      	add	r3, r2
 80088ae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80088b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	011a      	lsls	r2, r3, #4
 80088c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088c4:	4413      	add	r3, r2
 80088c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80088ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80088ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088d2:	b29a      	uxth	r2, r3
 80088d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80088d8:	801a      	strh	r2, [r3, #0]
 80088da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80088e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	785b      	ldrb	r3, [r3, #1]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d178      	bne.n	80089ea <USB_EPStartXfer+0x1b96>
 80088f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008906:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800890a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008914:	b29b      	uxth	r3, r3
 8008916:	461a      	mov	r2, r3
 8008918:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800891c:	4413      	add	r3, r2
 800891e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008926:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	011a      	lsls	r2, r3, #4
 8008930:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008934:	4413      	add	r3, r2
 8008936:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800893a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800893e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008942:	2b00      	cmp	r3, #0
 8008944:	d116      	bne.n	8008974 <USB_EPStartXfer+0x1b20>
 8008946:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800894a:	881b      	ldrh	r3, [r3, #0]
 800894c:	b29b      	uxth	r3, r3
 800894e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008952:	b29a      	uxth	r2, r3
 8008954:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008958:	801a      	strh	r2, [r3, #0]
 800895a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800895e:	881b      	ldrh	r3, [r3, #0]
 8008960:	b29b      	uxth	r3, r3
 8008962:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008966:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800896a:	b29a      	uxth	r2, r3
 800896c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008970:	801a      	strh	r2, [r3, #0]
 8008972:	e067      	b.n	8008a44 <USB_EPStartXfer+0x1bf0>
 8008974:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008978:	2b3e      	cmp	r3, #62	; 0x3e
 800897a:	d818      	bhi.n	80089ae <USB_EPStartXfer+0x1b5a>
 800897c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008980:	085b      	lsrs	r3, r3, #1
 8008982:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008986:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800898a:	f003 0301 	and.w	r3, r3, #1
 800898e:	2b00      	cmp	r3, #0
 8008990:	d004      	beq.n	800899c <USB_EPStartXfer+0x1b48>
 8008992:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008996:	3301      	adds	r3, #1
 8008998:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800899c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	029b      	lsls	r3, r3, #10
 80089a4:	b29a      	uxth	r2, r3
 80089a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089aa:	801a      	strh	r2, [r3, #0]
 80089ac:	e04a      	b.n	8008a44 <USB_EPStartXfer+0x1bf0>
 80089ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089b2:	095b      	lsrs	r3, r3, #5
 80089b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80089b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089bc:	f003 031f 	and.w	r3, r3, #31
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d104      	bne.n	80089ce <USB_EPStartXfer+0x1b7a>
 80089c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089c8:	3b01      	subs	r3, #1
 80089ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80089ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	029b      	lsls	r3, r3, #10
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089e0:	b29a      	uxth	r2, r3
 80089e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089e6:	801a      	strh	r2, [r3, #0]
 80089e8:	e02c      	b.n	8008a44 <USB_EPStartXfer+0x1bf0>
 80089ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	785b      	ldrb	r3, [r3, #1]
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d124      	bne.n	8008a44 <USB_EPStartXfer+0x1bf0>
 80089fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a10:	4413      	add	r3, r2
 8008a12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	011a      	lsls	r2, r3, #4
 8008a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a28:	4413      	add	r3, r2
 8008a2a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a2e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008a32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a36:	b29a      	uxth	r2, r3
 8008a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a3c:	801a      	strh	r2, [r3, #0]
 8008a3e:	e001      	b.n	8008a44 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	e03a      	b.n	8008aba <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008a44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	4413      	add	r3, r2
 8008a5e:	881b      	ldrh	r3, [r3, #0]
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a6a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008a6e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008a72:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008a76:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008a7a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008a7e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008a82:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008a86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	441a      	add	r2, r3
 8008aa0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008aa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008aac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008ab8:	2300      	movs	r3, #0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	785b      	ldrb	r3, [r3, #1]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d020      	beq.n	8008b18 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	4413      	add	r3, r2
 8008ae0:	881b      	ldrh	r3, [r3, #0]
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ae8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008aec:	81bb      	strh	r3, [r7, #12]
 8008aee:	89bb      	ldrh	r3, [r7, #12]
 8008af0:	f083 0310 	eor.w	r3, r3, #16
 8008af4:	81bb      	strh	r3, [r7, #12]
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	441a      	add	r2, r3
 8008b00:	89bb      	ldrh	r3, [r7, #12]
 8008b02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	8013      	strh	r3, [r2, #0]
 8008b16:	e01f      	b.n	8008b58 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	4413      	add	r3, r2
 8008b22:	881b      	ldrh	r3, [r3, #0]
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b2e:	81fb      	strh	r3, [r7, #14]
 8008b30:	89fb      	ldrh	r3, [r7, #14]
 8008b32:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008b36:	81fb      	strh	r3, [r7, #14]
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	441a      	add	r2, r3
 8008b42:	89fb      	ldrh	r3, [r7, #14]
 8008b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3714      	adds	r7, #20
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bc80      	pop	{r7}
 8008b62:	4770      	bx	lr

08008b64 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b087      	sub	sp, #28
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	7b1b      	ldrb	r3, [r3, #12]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	f040 809d 	bne.w	8008cb2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	785b      	ldrb	r3, [r3, #1]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d04c      	beq.n	8008c1a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	4413      	add	r3, r2
 8008b8a:	881b      	ldrh	r3, [r3, #0]
 8008b8c:	823b      	strh	r3, [r7, #16]
 8008b8e:	8a3b      	ldrh	r3, [r7, #16]
 8008b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d01b      	beq.n	8008bd0 <USB_EPClearStall+0x6c>
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	4413      	add	r3, r2
 8008ba2:	881b      	ldrh	r3, [r3, #0]
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bae:	81fb      	strh	r3, [r7, #14]
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	441a      	add	r2, r3
 8008bba:	89fb      	ldrh	r3, [r7, #14]
 8008bbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bc8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	78db      	ldrb	r3, [r3, #3]
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d06c      	beq.n	8008cb2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	4413      	add	r3, r2
 8008be2:	881b      	ldrh	r3, [r3, #0]
 8008be4:	b29b      	uxth	r3, r3
 8008be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bee:	81bb      	strh	r3, [r7, #12]
 8008bf0:	89bb      	ldrh	r3, [r7, #12]
 8008bf2:	f083 0320 	eor.w	r3, r3, #32
 8008bf6:	81bb      	strh	r3, [r7, #12]
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	441a      	add	r2, r3
 8008c02:	89bb      	ldrh	r3, [r7, #12]
 8008c04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	8013      	strh	r3, [r2, #0]
 8008c18:	e04b      	b.n	8008cb2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	4413      	add	r3, r2
 8008c24:	881b      	ldrh	r3, [r3, #0]
 8008c26:	82fb      	strh	r3, [r7, #22]
 8008c28:	8afb      	ldrh	r3, [r7, #22]
 8008c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d01b      	beq.n	8008c6a <USB_EPClearStall+0x106>
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	4413      	add	r3, r2
 8008c3c:	881b      	ldrh	r3, [r3, #0]
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c48:	82bb      	strh	r3, [r7, #20]
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	441a      	add	r2, r3
 8008c54:	8abb      	ldrh	r3, [r7, #20]
 8008c56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	4413      	add	r3, r2
 8008c74:	881b      	ldrh	r3, [r3, #0]
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c80:	827b      	strh	r3, [r7, #18]
 8008c82:	8a7b      	ldrh	r3, [r7, #18]
 8008c84:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008c88:	827b      	strh	r3, [r7, #18]
 8008c8a:	8a7b      	ldrh	r3, [r7, #18]
 8008c8c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008c90:	827b      	strh	r3, [r7, #18]
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	441a      	add	r2, r3
 8008c9c:	8a7b      	ldrh	r3, [r7, #18]
 8008c9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ca2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	371c      	adds	r7, #28
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bc80      	pop	{r7}
 8008cbc:	4770      	bx	lr

08008cbe <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008cbe:	b480      	push	{r7}
 8008cc0:	b083      	sub	sp, #12
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008cca:	78fb      	ldrb	r3, [r7, #3]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d103      	bne.n	8008cd8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2280      	movs	r2, #128	; 0x80
 8008cd4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	370c      	adds	r7, #12
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bc80      	pop	{r7}
 8008ce2:	4770      	bx	lr

08008ce4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008cec:	2300      	movs	r3, #0
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	370c      	adds	r7, #12
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bc80      	pop	{r7}
 8008cf6:	4770      	bx	lr

08008cf8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	370c      	adds	r7, #12
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bc80      	pop	{r7}
 8008d0a:	4770      	bx	lr

08008d0c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b085      	sub	sp, #20
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3714      	adds	r7, #20
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bc80      	pop	{r7}
 8008d28:	4770      	bx	lr

08008d2a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008d2a:	b480      	push	{r7}
 8008d2c:	b083      	sub	sp, #12
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
 8008d32:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	370c      	adds	r7, #12
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bc80      	pop	{r7}
 8008d3e:	4770      	bx	lr

08008d40 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b08d      	sub	sp, #52	; 0x34
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	4611      	mov	r1, r2
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	460b      	mov	r3, r1
 8008d50:	80fb      	strh	r3, [r7, #6]
 8008d52:	4613      	mov	r3, r2
 8008d54:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008d56:	88bb      	ldrh	r3, [r7, #4]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	085b      	lsrs	r3, r3, #1
 8008d5c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008d66:	88fb      	ldrh	r3, [r7, #6]
 8008d68:	005a      	lsls	r2, r3, #1
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d72:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008d74:	6a3b      	ldr	r3, [r7, #32]
 8008d76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d78:	e01e      	b.n	8008db8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d82:	3301      	adds	r3, #1
 8008d84:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	021b      	lsls	r3, r3, #8
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	461a      	mov	r2, r3
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	b29a      	uxth	r2, r3
 8008d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d9e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da2:	3302      	adds	r3, #2
 8008da4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da8:	3302      	adds	r3, #2
 8008daa:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dae:	3301      	adds	r3, #1
 8008db0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db4:	3b01      	subs	r3, #1
 8008db6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d1dd      	bne.n	8008d7a <USB_WritePMA+0x3a>
  }
}
 8008dbe:	bf00      	nop
 8008dc0:	bf00      	nop
 8008dc2:	3734      	adds	r7, #52	; 0x34
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bc80      	pop	{r7}
 8008dc8:	4770      	bx	lr

08008dca <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008dca:	b480      	push	{r7}
 8008dcc:	b08b      	sub	sp, #44	; 0x2c
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	60f8      	str	r0, [r7, #12]
 8008dd2:	60b9      	str	r1, [r7, #8]
 8008dd4:	4611      	mov	r1, r2
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	460b      	mov	r3, r1
 8008dda:	80fb      	strh	r3, [r7, #6]
 8008ddc:	4613      	mov	r3, r2
 8008dde:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008de0:	88bb      	ldrh	r3, [r7, #4]
 8008de2:	085b      	lsrs	r3, r3, #1
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008df0:	88fb      	ldrh	r3, [r7, #6]
 8008df2:	005a      	lsls	r2, r3, #1
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	4413      	add	r3, r2
 8008df8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dfc:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	627b      	str	r3, [r7, #36]	; 0x24
 8008e02:	e01b      	b.n	8008e3c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008e04:	6a3b      	ldr	r3, [r7, #32]
 8008e06:	881b      	ldrh	r3, [r3, #0]
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008e0c:	6a3b      	ldr	r3, [r7, #32]
 8008e0e:	3302      	adds	r3, #2
 8008e10:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	b2da      	uxtb	r2, r3
 8008e16:	69fb      	ldr	r3, [r7, #28]
 8008e18:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008e1a:	69fb      	ldr	r3, [r7, #28]
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	0a1b      	lsrs	r3, r3, #8
 8008e24:	b2da      	uxtb	r2, r3
 8008e26:	69fb      	ldr	r3, [r7, #28]
 8008e28:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008e30:	6a3b      	ldr	r3, [r7, #32]
 8008e32:	3302      	adds	r3, #2
 8008e34:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8008e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d1e0      	bne.n	8008e04 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008e42:	88bb      	ldrh	r3, [r7, #4]
 8008e44:	f003 0301 	and.w	r3, r3, #1
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d007      	beq.n	8008e5e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008e4e:	6a3b      	ldr	r3, [r7, #32]
 8008e50:	881b      	ldrh	r3, [r3, #0]
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	b2da      	uxtb	r2, r3
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	701a      	strb	r2, [r3, #0]
  }
}
 8008e5e:	bf00      	nop
 8008e60:	372c      	adds	r7, #44	; 0x2c
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bc80      	pop	{r7}
 8008e66:	4770      	bx	lr

08008e68 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	460b      	mov	r3, r1
 8008e72:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008e74:	2300      	movs	r3, #0
 8008e76:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	7c1b      	ldrb	r3, [r3, #16]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d115      	bne.n	8008eac <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008e80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e84:	2202      	movs	r2, #2
 8008e86:	2181      	movs	r1, #129	; 0x81
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f001 fea6 	bl	800abda <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2201      	movs	r2, #1
 8008e92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008e94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e98:	2202      	movs	r2, #2
 8008e9a:	2101      	movs	r1, #1
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f001 fe9c 	bl	800abda <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008eaa:	e012      	b.n	8008ed2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008eac:	2340      	movs	r3, #64	; 0x40
 8008eae:	2202      	movs	r2, #2
 8008eb0:	2181      	movs	r1, #129	; 0x81
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f001 fe91 	bl	800abda <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008ebe:	2340      	movs	r3, #64	; 0x40
 8008ec0:	2202      	movs	r2, #2
 8008ec2:	2101      	movs	r1, #1
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f001 fe88 	bl	800abda <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008ed2:	2308      	movs	r3, #8
 8008ed4:	2203      	movs	r2, #3
 8008ed6:	2182      	movs	r1, #130	; 0x82
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f001 fe7e 	bl	800abda <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008ee4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008ee8:	f001 ff9e 	bl	800ae28 <USBD_static_malloc>
 8008eec:	4602      	mov	r2, r0
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d102      	bne.n	8008f04 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008efe:	2301      	movs	r3, #1
 8008f00:	73fb      	strb	r3, [r7, #15]
 8008f02:	e026      	b.n	8008f52 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f0a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	7c1b      	ldrb	r3, [r3, #16]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d109      	bne.n	8008f42 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f38:	2101      	movs	r1, #1
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f001 ff3e 	bl	800adbc <USBD_LL_PrepareReceive>
 8008f40:	e007      	b.n	8008f52 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f48:	2340      	movs	r3, #64	; 0x40
 8008f4a:	2101      	movs	r1, #1
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f001 ff35 	bl	800adbc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3710      	adds	r7, #16
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	460b      	mov	r3, r1
 8008f66:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008f6c:	2181      	movs	r1, #129	; 0x81
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f001 fe59 	bl	800ac26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008f7a:	2101      	movs	r1, #1
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f001 fe52 	bl	800ac26 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008f8a:	2182      	movs	r1, #130	; 0x82
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f001 fe4a 	bl	800ac26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00e      	beq.n	8008fc0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f001 ff44 	bl	800ae40 <USBD_static_free>
    pdev->pClassData = NULL;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}

08008fca <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b086      	sub	sp, #24
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
 8008fd2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fda:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d039      	beq.n	8009068 <USBD_CDC_Setup+0x9e>
 8008ff4:	2b20      	cmp	r3, #32
 8008ff6:	d17f      	bne.n	80090f8 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	88db      	ldrh	r3, [r3, #6]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d029      	beq.n	8009054 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	b25b      	sxtb	r3, r3
 8009006:	2b00      	cmp	r3, #0
 8009008:	da11      	bge.n	800902e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	683a      	ldr	r2, [r7, #0]
 8009014:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009016:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009018:	683a      	ldr	r2, [r7, #0]
 800901a:	88d2      	ldrh	r2, [r2, #6]
 800901c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800901e:	6939      	ldr	r1, [r7, #16]
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	88db      	ldrh	r3, [r3, #6]
 8009024:	461a      	mov	r2, r3
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f001 fa09 	bl	800a43e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800902c:	e06b      	b.n	8009106 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	785a      	ldrb	r2, [r3, #1]
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	88db      	ldrh	r3, [r3, #6]
 800903c:	b2da      	uxtb	r2, r3
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009044:	6939      	ldr	r1, [r7, #16]
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	88db      	ldrh	r3, [r3, #6]
 800904a:	461a      	mov	r2, r3
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f001 fa24 	bl	800a49a <USBD_CtlPrepareRx>
      break;
 8009052:	e058      	b.n	8009106 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	683a      	ldr	r2, [r7, #0]
 800905e:	7850      	ldrb	r0, [r2, #1]
 8009060:	2200      	movs	r2, #0
 8009062:	6839      	ldr	r1, [r7, #0]
 8009064:	4798      	blx	r3
      break;
 8009066:	e04e      	b.n	8009106 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	785b      	ldrb	r3, [r3, #1]
 800906c:	2b0b      	cmp	r3, #11
 800906e:	d02e      	beq.n	80090ce <USBD_CDC_Setup+0x104>
 8009070:	2b0b      	cmp	r3, #11
 8009072:	dc38      	bgt.n	80090e6 <USBD_CDC_Setup+0x11c>
 8009074:	2b00      	cmp	r3, #0
 8009076:	d002      	beq.n	800907e <USBD_CDC_Setup+0xb4>
 8009078:	2b0a      	cmp	r3, #10
 800907a:	d014      	beq.n	80090a6 <USBD_CDC_Setup+0xdc>
 800907c:	e033      	b.n	80090e6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009084:	2b03      	cmp	r3, #3
 8009086:	d107      	bne.n	8009098 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009088:	f107 030c 	add.w	r3, r7, #12
 800908c:	2202      	movs	r2, #2
 800908e:	4619      	mov	r1, r3
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f001 f9d4 	bl	800a43e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009096:	e02e      	b.n	80090f6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009098:	6839      	ldr	r1, [r7, #0]
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f001 f965 	bl	800a36a <USBD_CtlError>
            ret = USBD_FAIL;
 80090a0:	2302      	movs	r3, #2
 80090a2:	75fb      	strb	r3, [r7, #23]
          break;
 80090a4:	e027      	b.n	80090f6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090ac:	2b03      	cmp	r3, #3
 80090ae:	d107      	bne.n	80090c0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80090b0:	f107 030f 	add.w	r3, r7, #15
 80090b4:	2201      	movs	r2, #1
 80090b6:	4619      	mov	r1, r3
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f001 f9c0 	bl	800a43e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80090be:	e01a      	b.n	80090f6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80090c0:	6839      	ldr	r1, [r7, #0]
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f001 f951 	bl	800a36a <USBD_CtlError>
            ret = USBD_FAIL;
 80090c8:	2302      	movs	r3, #2
 80090ca:	75fb      	strb	r3, [r7, #23]
          break;
 80090cc:	e013      	b.n	80090f6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090d4:	2b03      	cmp	r3, #3
 80090d6:	d00d      	beq.n	80090f4 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80090d8:	6839      	ldr	r1, [r7, #0]
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f001 f945 	bl	800a36a <USBD_CtlError>
            ret = USBD_FAIL;
 80090e0:	2302      	movs	r3, #2
 80090e2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80090e4:	e006      	b.n	80090f4 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80090e6:	6839      	ldr	r1, [r7, #0]
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f001 f93e 	bl	800a36a <USBD_CtlError>
          ret = USBD_FAIL;
 80090ee:	2302      	movs	r3, #2
 80090f0:	75fb      	strb	r3, [r7, #23]
          break;
 80090f2:	e000      	b.n	80090f6 <USBD_CDC_Setup+0x12c>
          break;
 80090f4:	bf00      	nop
      }
      break;
 80090f6:	e006      	b.n	8009106 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80090f8:	6839      	ldr	r1, [r7, #0]
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f001 f935 	bl	800a36a <USBD_CtlError>
      ret = USBD_FAIL;
 8009100:	2302      	movs	r3, #2
 8009102:	75fb      	strb	r3, [r7, #23]
      break;
 8009104:	bf00      	nop
  }

  return ret;
 8009106:	7dfb      	ldrb	r3, [r7, #23]
}
 8009108:	4618      	mov	r0, r3
 800910a:	3718      	adds	r7, #24
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	460b      	mov	r3, r1
 800911a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009122:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800912a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009132:	2b00      	cmp	r3, #0
 8009134:	d03a      	beq.n	80091ac <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009136:	78fa      	ldrb	r2, [r7, #3]
 8009138:	6879      	ldr	r1, [r7, #4]
 800913a:	4613      	mov	r3, r2
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	4413      	add	r3, r2
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	440b      	add	r3, r1
 8009144:	331c      	adds	r3, #28
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d029      	beq.n	80091a0 <USBD_CDC_DataIn+0x90>
 800914c:	78fa      	ldrb	r2, [r7, #3]
 800914e:	6879      	ldr	r1, [r7, #4]
 8009150:	4613      	mov	r3, r2
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	4413      	add	r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	440b      	add	r3, r1
 800915a:	331c      	adds	r3, #28
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	78f9      	ldrb	r1, [r7, #3]
 8009160:	68b8      	ldr	r0, [r7, #8]
 8009162:	460b      	mov	r3, r1
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	440b      	add	r3, r1
 8009168:	00db      	lsls	r3, r3, #3
 800916a:	4403      	add	r3, r0
 800916c:	3338      	adds	r3, #56	; 0x38
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	fbb2 f1f3 	udiv	r1, r2, r3
 8009174:	fb01 f303 	mul.w	r3, r1, r3
 8009178:	1ad3      	subs	r3, r2, r3
 800917a:	2b00      	cmp	r3, #0
 800917c:	d110      	bne.n	80091a0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800917e:	78fa      	ldrb	r2, [r7, #3]
 8009180:	6879      	ldr	r1, [r7, #4]
 8009182:	4613      	mov	r3, r2
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	4413      	add	r3, r2
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	440b      	add	r3, r1
 800918c:	331c      	adds	r3, #28
 800918e:	2200      	movs	r2, #0
 8009190:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009192:	78f9      	ldrb	r1, [r7, #3]
 8009194:	2300      	movs	r3, #0
 8009196:	2200      	movs	r2, #0
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f001 fdec 	bl	800ad76 <USBD_LL_Transmit>
 800919e:	e003      	b.n	80091a8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2200      	movs	r2, #0
 80091a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80091a8:	2300      	movs	r3, #0
 80091aa:	e000      	b.n	80091ae <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80091ac:	2302      	movs	r3, #2
  }
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3710      	adds	r7, #16
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b084      	sub	sp, #16
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
 80091be:	460b      	mov	r3, r1
 80091c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091c8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80091ca:	78fb      	ldrb	r3, [r7, #3]
 80091cc:	4619      	mov	r1, r3
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f001 fe17 	bl	800ae02 <USBD_LL_GetRxDataSize>
 80091d4:	4602      	mov	r2, r0
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00d      	beq.n	8009202 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091ec:	68db      	ldr	r3, [r3, #12]
 80091ee:	68fa      	ldr	r2, [r7, #12]
 80091f0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80091f4:	68fa      	ldr	r2, [r7, #12]
 80091f6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80091fa:	4611      	mov	r1, r2
 80091fc:	4798      	blx	r3

    return USBD_OK;
 80091fe:	2300      	movs	r3, #0
 8009200:	e000      	b.n	8009204 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009202:	2302      	movs	r3, #2
  }
}
 8009204:	4618      	mov	r0, r3
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800921a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009222:	2b00      	cmp	r3, #0
 8009224:	d015      	beq.n	8009252 <USBD_CDC_EP0_RxReady+0x46>
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800922c:	2bff      	cmp	r3, #255	; 0xff
 800922e:	d010      	beq.n	8009252 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	68fa      	ldr	r2, [r7, #12]
 800923a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800923e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009240:	68fa      	ldr	r2, [r7, #12]
 8009242:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009246:	b292      	uxth	r2, r2
 8009248:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	22ff      	movs	r2, #255	; 0xff
 800924e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	3710      	adds	r7, #16
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2243      	movs	r2, #67	; 0x43
 8009268:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800926a:	4b03      	ldr	r3, [pc, #12]	; (8009278 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800926c:	4618      	mov	r0, r3
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	bc80      	pop	{r7}
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	20000098 	.word	0x20000098

0800927c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2243      	movs	r2, #67	; 0x43
 8009288:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800928a:	4b03      	ldr	r3, [pc, #12]	; (8009298 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800928c:	4618      	mov	r0, r3
 800928e:	370c      	adds	r7, #12
 8009290:	46bd      	mov	sp, r7
 8009292:	bc80      	pop	{r7}
 8009294:	4770      	bx	lr
 8009296:	bf00      	nop
 8009298:	20000054 	.word	0x20000054

0800929c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2243      	movs	r2, #67	; 0x43
 80092a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80092aa:	4b03      	ldr	r3, [pc, #12]	; (80092b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bc80      	pop	{r7}
 80092b4:	4770      	bx	lr
 80092b6:	bf00      	nop
 80092b8:	200000dc 	.word	0x200000dc

080092bc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	220a      	movs	r2, #10
 80092c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80092ca:	4b03      	ldr	r3, [pc, #12]	; (80092d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	370c      	adds	r7, #12
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bc80      	pop	{r7}
 80092d4:	4770      	bx	lr
 80092d6:	bf00      	nop
 80092d8:	20000010 	.word	0x20000010

080092dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80092dc:	b480      	push	{r7}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80092e6:	2302      	movs	r3, #2
 80092e8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d005      	beq.n	80092fc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	683a      	ldr	r2, [r7, #0]
 80092f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80092f8:	2300      	movs	r3, #0
 80092fa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80092fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3714      	adds	r7, #20
 8009302:	46bd      	mov	sp, r7
 8009304:	bc80      	pop	{r7}
 8009306:	4770      	bx	lr

08009308 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009308:	b480      	push	{r7}
 800930a:	b087      	sub	sp, #28
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	4613      	mov	r3, r2
 8009314:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800931c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	68ba      	ldr	r2, [r7, #8]
 8009322:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009326:	88fa      	ldrh	r2, [r7, #6]
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	371c      	adds	r7, #28
 8009334:	46bd      	mov	sp, r7
 8009336:	bc80      	pop	{r7}
 8009338:	4770      	bx	lr

0800933a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800933a:	b480      	push	{r7}
 800933c:	b085      	sub	sp, #20
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
 8009342:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800934a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	683a      	ldr	r2, [r7, #0]
 8009350:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3714      	adds	r7, #20
 800935a:	46bd      	mov	sp, r7
 800935c:	bc80      	pop	{r7}
 800935e:	4770      	bx	lr

08009360 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800936e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009376:	2b00      	cmp	r3, #0
 8009378:	d01c      	beq.n	80093b4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009380:	2b00      	cmp	r3, #0
 8009382:	d115      	bne.n	80093b0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2201      	movs	r2, #1
 8009388:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	2181      	movs	r1, #129	; 0x81
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f001 fce5 	bl	800ad76 <USBD_LL_Transmit>

      return USBD_OK;
 80093ac:	2300      	movs	r3, #0
 80093ae:	e002      	b.n	80093b6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80093b0:	2301      	movs	r3, #1
 80093b2:	e000      	b.n	80093b6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80093b4:	2302      	movs	r3, #2
  }
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3710      	adds	r7, #16
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b084      	sub	sp, #16
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093cc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d017      	beq.n	8009408 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	7c1b      	ldrb	r3, [r3, #16]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d109      	bne.n	80093f4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093ea:	2101      	movs	r1, #1
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f001 fce5 	bl	800adbc <USBD_LL_PrepareReceive>
 80093f2:	e007      	b.n	8009404 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093fa:	2340      	movs	r3, #64	; 0x40
 80093fc:	2101      	movs	r1, #1
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f001 fcdc 	bl	800adbc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009404:	2300      	movs	r3, #0
 8009406:	e000      	b.n	800940a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009408:	2302      	movs	r3, #2
  }
}
 800940a:	4618      	mov	r0, r3
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b084      	sub	sp, #16
 8009416:	af00      	add	r7, sp, #0
 8009418:	60f8      	str	r0, [r7, #12]
 800941a:	60b9      	str	r1, [r7, #8]
 800941c:	4613      	mov	r3, r2
 800941e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d101      	bne.n	800942a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009426:	2302      	movs	r3, #2
 8009428:	e01a      	b.n	8009460 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009430:	2b00      	cmp	r3, #0
 8009432:	d003      	beq.n	800943c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2200      	movs	r2, #0
 8009438:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d003      	beq.n	800944a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	68ba      	ldr	r2, [r7, #8]
 8009446:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2201      	movs	r2, #1
 800944e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	79fa      	ldrb	r2, [r7, #7]
 8009456:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009458:	68f8      	ldr	r0, [r7, #12]
 800945a:	f001 fb49 	bl	800aaf0 <USBD_LL_Init>

  return USBD_OK;
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	3710      	adds	r7, #16
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009468:	b480      	push	{r7}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009472:	2300      	movs	r3, #0
 8009474:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d006      	beq.n	800948a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	683a      	ldr	r2, [r7, #0]
 8009480:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009484:	2300      	movs	r3, #0
 8009486:	73fb      	strb	r3, [r7, #15]
 8009488:	e001      	b.n	800948e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800948a:	2302      	movs	r3, #2
 800948c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800948e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009490:	4618      	mov	r0, r3
 8009492:	3714      	adds	r7, #20
 8009494:	46bd      	mov	sp, r7
 8009496:	bc80      	pop	{r7}
 8009498:	4770      	bx	lr

0800949a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800949a:	b580      	push	{r7, lr}
 800949c:	b082      	sub	sp, #8
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f001 fb7e 	bl	800aba4 <USBD_LL_Start>

  return USBD_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3708      	adds	r7, #8
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80094b2:	b480      	push	{r7}
 80094b4:	b083      	sub	sp, #12
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80094ba:	2300      	movs	r3, #0
}
 80094bc:	4618      	mov	r0, r3
 80094be:	370c      	adds	r7, #12
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bc80      	pop	{r7}
 80094c4:	4770      	bx	lr

080094c6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b084      	sub	sp, #16
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
 80094ce:	460b      	mov	r3, r1
 80094d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80094d2:	2302      	movs	r3, #2
 80094d4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d00c      	beq.n	80094fa <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	78fa      	ldrb	r2, [r7, #3]
 80094ea:	4611      	mov	r1, r2
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	4798      	blx	r3
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d101      	bne.n	80094fa <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80094f6:	2300      	movs	r3, #0
 80094f8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80094fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3710      	adds	r7, #16
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	460b      	mov	r3, r1
 800950e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	78fa      	ldrb	r2, [r7, #3]
 800951a:	4611      	mov	r1, r2
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	4798      	blx	r3

  return USBD_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	3708      	adds	r7, #8
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b082      	sub	sp, #8
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
 8009532:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800953a:	6839      	ldr	r1, [r7, #0]
 800953c:	4618      	mov	r0, r3
 800953e:	f000 fed8 	bl	800a2f2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2201      	movs	r2, #1
 8009546:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009550:	461a      	mov	r2, r3
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800955e:	f003 031f 	and.w	r3, r3, #31
 8009562:	2b02      	cmp	r3, #2
 8009564:	d016      	beq.n	8009594 <USBD_LL_SetupStage+0x6a>
 8009566:	2b02      	cmp	r3, #2
 8009568:	d81c      	bhi.n	80095a4 <USBD_LL_SetupStage+0x7a>
 800956a:	2b00      	cmp	r3, #0
 800956c:	d002      	beq.n	8009574 <USBD_LL_SetupStage+0x4a>
 800956e:	2b01      	cmp	r3, #1
 8009570:	d008      	beq.n	8009584 <USBD_LL_SetupStage+0x5a>
 8009572:	e017      	b.n	80095a4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800957a:	4619      	mov	r1, r3
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 f9cb 	bl	8009918 <USBD_StdDevReq>
      break;
 8009582:	e01a      	b.n	80095ba <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800958a:	4619      	mov	r1, r3
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 fa2d 	bl	80099ec <USBD_StdItfReq>
      break;
 8009592:	e012      	b.n	80095ba <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800959a:	4619      	mov	r1, r3
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 fa6d 	bl	8009a7c <USBD_StdEPReq>
      break;
 80095a2:	e00a      	b.n	80095ba <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80095aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80095ae:	b2db      	uxtb	r3, r3
 80095b0:	4619      	mov	r1, r3
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f001 fb56 	bl	800ac64 <USBD_LL_StallEP>
      break;
 80095b8:	bf00      	nop
  }

  return USBD_OK;
 80095ba:	2300      	movs	r3, #0
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3708      	adds	r7, #8
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b086      	sub	sp, #24
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	460b      	mov	r3, r1
 80095ce:	607a      	str	r2, [r7, #4]
 80095d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80095d2:	7afb      	ldrb	r3, [r7, #11]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d14b      	bne.n	8009670 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80095de:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80095e6:	2b03      	cmp	r3, #3
 80095e8:	d134      	bne.n	8009654 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	68da      	ldr	r2, [r3, #12]
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d919      	bls.n	800962a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	68da      	ldr	r2, [r3, #12]
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	691b      	ldr	r3, [r3, #16]
 80095fe:	1ad2      	subs	r2, r2, r3
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	68da      	ldr	r2, [r3, #12]
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800960c:	429a      	cmp	r2, r3
 800960e:	d203      	bcs.n	8009618 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009614:	b29b      	uxth	r3, r3
 8009616:	e002      	b.n	800961e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800961c:	b29b      	uxth	r3, r3
 800961e:	461a      	mov	r2, r3
 8009620:	6879      	ldr	r1, [r7, #4]
 8009622:	68f8      	ldr	r0, [r7, #12]
 8009624:	f000 ff57 	bl	800a4d6 <USBD_CtlContinueRx>
 8009628:	e038      	b.n	800969c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009630:	691b      	ldr	r3, [r3, #16]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d00a      	beq.n	800964c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800963c:	2b03      	cmp	r3, #3
 800963e:	d105      	bne.n	800964c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800964c:	68f8      	ldr	r0, [r7, #12]
 800964e:	f000 ff54 	bl	800a4fa <USBD_CtlSendStatus>
 8009652:	e023      	b.n	800969c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800965a:	2b05      	cmp	r3, #5
 800965c:	d11e      	bne.n	800969c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2200      	movs	r2, #0
 8009662:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009666:	2100      	movs	r1, #0
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	f001 fafb 	bl	800ac64 <USBD_LL_StallEP>
 800966e:	e015      	b.n	800969c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009676:	699b      	ldr	r3, [r3, #24]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d00d      	beq.n	8009698 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009682:	2b03      	cmp	r3, #3
 8009684:	d108      	bne.n	8009698 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800968c:	699b      	ldr	r3, [r3, #24]
 800968e:	7afa      	ldrb	r2, [r7, #11]
 8009690:	4611      	mov	r1, r2
 8009692:	68f8      	ldr	r0, [r7, #12]
 8009694:	4798      	blx	r3
 8009696:	e001      	b.n	800969c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009698:	2302      	movs	r3, #2
 800969a:	e000      	b.n	800969e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800969c:	2300      	movs	r3, #0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3718      	adds	r7, #24
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b086      	sub	sp, #24
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	60f8      	str	r0, [r7, #12]
 80096ae:	460b      	mov	r3, r1
 80096b0:	607a      	str	r2, [r7, #4]
 80096b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80096b4:	7afb      	ldrb	r3, [r7, #11]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d17f      	bne.n	80097ba <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	3314      	adds	r3, #20
 80096be:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80096c6:	2b02      	cmp	r3, #2
 80096c8:	d15c      	bne.n	8009784 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	68da      	ldr	r2, [r3, #12]
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	691b      	ldr	r3, [r3, #16]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d915      	bls.n	8009702 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	68da      	ldr	r2, [r3, #12]
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	691b      	ldr	r3, [r3, #16]
 80096de:	1ad2      	subs	r2, r2, r3
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	461a      	mov	r2, r3
 80096ec:	6879      	ldr	r1, [r7, #4]
 80096ee:	68f8      	ldr	r0, [r7, #12]
 80096f0:	f000 fec1 	bl	800a476 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096f4:	2300      	movs	r3, #0
 80096f6:	2200      	movs	r2, #0
 80096f8:	2100      	movs	r1, #0
 80096fa:	68f8      	ldr	r0, [r7, #12]
 80096fc:	f001 fb5e 	bl	800adbc <USBD_LL_PrepareReceive>
 8009700:	e04e      	b.n	80097a0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	689b      	ldr	r3, [r3, #8]
 8009706:	697a      	ldr	r2, [r7, #20]
 8009708:	6912      	ldr	r2, [r2, #16]
 800970a:	fbb3 f1f2 	udiv	r1, r3, r2
 800970e:	fb01 f202 	mul.w	r2, r1, r2
 8009712:	1a9b      	subs	r3, r3, r2
 8009714:	2b00      	cmp	r3, #0
 8009716:	d11c      	bne.n	8009752 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	689a      	ldr	r2, [r3, #8]
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009720:	429a      	cmp	r2, r3
 8009722:	d316      	bcc.n	8009752 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	689a      	ldr	r2, [r3, #8]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800972e:	429a      	cmp	r2, r3
 8009730:	d20f      	bcs.n	8009752 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009732:	2200      	movs	r2, #0
 8009734:	2100      	movs	r1, #0
 8009736:	68f8      	ldr	r0, [r7, #12]
 8009738:	f000 fe9d 	bl	800a476 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2200      	movs	r2, #0
 8009740:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009744:	2300      	movs	r3, #0
 8009746:	2200      	movs	r2, #0
 8009748:	2100      	movs	r1, #0
 800974a:	68f8      	ldr	r0, [r7, #12]
 800974c:	f001 fb36 	bl	800adbc <USBD_LL_PrepareReceive>
 8009750:	e026      	b.n	80097a0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009758:	68db      	ldr	r3, [r3, #12]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d00a      	beq.n	8009774 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009764:	2b03      	cmp	r3, #3
 8009766:	d105      	bne.n	8009774 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009774:	2180      	movs	r1, #128	; 0x80
 8009776:	68f8      	ldr	r0, [r7, #12]
 8009778:	f001 fa74 	bl	800ac64 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800977c:	68f8      	ldr	r0, [r7, #12]
 800977e:	f000 fecf 	bl	800a520 <USBD_CtlReceiveStatus>
 8009782:	e00d      	b.n	80097a0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800978a:	2b04      	cmp	r3, #4
 800978c:	d004      	beq.n	8009798 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009794:	2b00      	cmp	r3, #0
 8009796:	d103      	bne.n	80097a0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009798:	2180      	movs	r1, #128	; 0x80
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f001 fa62 	bl	800ac64 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d11d      	bne.n	80097e6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80097aa:	68f8      	ldr	r0, [r7, #12]
 80097ac:	f7ff fe81 	bl	80094b2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2200      	movs	r2, #0
 80097b4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80097b8:	e015      	b.n	80097e6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097c0:	695b      	ldr	r3, [r3, #20]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d00d      	beq.n	80097e2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80097cc:	2b03      	cmp	r3, #3
 80097ce:	d108      	bne.n	80097e2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097d6:	695b      	ldr	r3, [r3, #20]
 80097d8:	7afa      	ldrb	r2, [r7, #11]
 80097da:	4611      	mov	r1, r2
 80097dc:	68f8      	ldr	r0, [r7, #12]
 80097de:	4798      	blx	r3
 80097e0:	e001      	b.n	80097e6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80097e2:	2302      	movs	r3, #2
 80097e4:	e000      	b.n	80097e8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80097e6:	2300      	movs	r3, #0
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3718      	adds	r7, #24
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80097f8:	2340      	movs	r3, #64	; 0x40
 80097fa:	2200      	movs	r2, #0
 80097fc:	2100      	movs	r1, #0
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f001 f9eb 	bl	800abda <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2201      	movs	r2, #1
 8009808:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2240      	movs	r2, #64	; 0x40
 8009810:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009814:	2340      	movs	r3, #64	; 0x40
 8009816:	2200      	movs	r2, #0
 8009818:	2180      	movs	r1, #128	; 0x80
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f001 f9dd 	bl	800abda <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2240      	movs	r2, #64	; 0x40
 800982a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009850:	2b00      	cmp	r3, #0
 8009852:	d009      	beq.n	8009868 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	6852      	ldr	r2, [r2, #4]
 8009860:	b2d2      	uxtb	r2, r2
 8009862:	4611      	mov	r1, r2
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	4798      	blx	r3
  }

  return USBD_OK;
 8009868:	2300      	movs	r3, #0
}
 800986a:	4618      	mov	r0, r3
 800986c:	3708      	adds	r7, #8
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}

08009872 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009872:	b480      	push	{r7}
 8009874:	b083      	sub	sp, #12
 8009876:	af00      	add	r7, sp, #0
 8009878:	6078      	str	r0, [r7, #4]
 800987a:	460b      	mov	r3, r1
 800987c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	78fa      	ldrb	r2, [r7, #3]
 8009882:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	370c      	adds	r7, #12
 800988a:	46bd      	mov	sp, r7
 800988c:	bc80      	pop	{r7}
 800988e:	4770      	bx	lr

08009890 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2204      	movs	r2, #4
 80098a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80098ac:	2300      	movs	r3, #0
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	370c      	adds	r7, #12
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bc80      	pop	{r7}
 80098b6:	4770      	bx	lr

080098b8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098c6:	2b04      	cmp	r3, #4
 80098c8:	d105      	bne.n	80098d6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80098d6:	2300      	movs	r3, #0
}
 80098d8:	4618      	mov	r0, r3
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	bc80      	pop	{r7}
 80098e0:	4770      	bx	lr

080098e2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80098e2:	b580      	push	{r7, lr}
 80098e4:	b082      	sub	sp, #8
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098f0:	2b03      	cmp	r3, #3
 80098f2:	d10b      	bne.n	800990c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098fa:	69db      	ldr	r3, [r3, #28]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d005      	beq.n	800990c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009906:	69db      	ldr	r3, [r3, #28]
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	3708      	adds	r7, #8
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
	...

08009918 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009922:	2300      	movs	r3, #0
 8009924:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800992e:	2b40      	cmp	r3, #64	; 0x40
 8009930:	d005      	beq.n	800993e <USBD_StdDevReq+0x26>
 8009932:	2b40      	cmp	r3, #64	; 0x40
 8009934:	d84f      	bhi.n	80099d6 <USBD_StdDevReq+0xbe>
 8009936:	2b00      	cmp	r3, #0
 8009938:	d009      	beq.n	800994e <USBD_StdDevReq+0x36>
 800993a:	2b20      	cmp	r3, #32
 800993c:	d14b      	bne.n	80099d6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009944:	689b      	ldr	r3, [r3, #8]
 8009946:	6839      	ldr	r1, [r7, #0]
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	4798      	blx	r3
      break;
 800994c:	e048      	b.n	80099e0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	785b      	ldrb	r3, [r3, #1]
 8009952:	2b09      	cmp	r3, #9
 8009954:	d839      	bhi.n	80099ca <USBD_StdDevReq+0xb2>
 8009956:	a201      	add	r2, pc, #4	; (adr r2, 800995c <USBD_StdDevReq+0x44>)
 8009958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800995c:	080099ad 	.word	0x080099ad
 8009960:	080099c1 	.word	0x080099c1
 8009964:	080099cb 	.word	0x080099cb
 8009968:	080099b7 	.word	0x080099b7
 800996c:	080099cb 	.word	0x080099cb
 8009970:	0800998f 	.word	0x0800998f
 8009974:	08009985 	.word	0x08009985
 8009978:	080099cb 	.word	0x080099cb
 800997c:	080099a3 	.word	0x080099a3
 8009980:	08009999 	.word	0x08009999
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009984:	6839      	ldr	r1, [r7, #0]
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 f9dc 	bl	8009d44 <USBD_GetDescriptor>
          break;
 800998c:	e022      	b.n	80099d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800998e:	6839      	ldr	r1, [r7, #0]
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 fb3f 	bl	800a014 <USBD_SetAddress>
          break;
 8009996:	e01d      	b.n	80099d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009998:	6839      	ldr	r1, [r7, #0]
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 fb7e 	bl	800a09c <USBD_SetConfig>
          break;
 80099a0:	e018      	b.n	80099d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80099a2:	6839      	ldr	r1, [r7, #0]
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 fc07 	bl	800a1b8 <USBD_GetConfig>
          break;
 80099aa:	e013      	b.n	80099d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80099ac:	6839      	ldr	r1, [r7, #0]
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 fc37 	bl	800a222 <USBD_GetStatus>
          break;
 80099b4:	e00e      	b.n	80099d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80099b6:	6839      	ldr	r1, [r7, #0]
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 fc65 	bl	800a288 <USBD_SetFeature>
          break;
 80099be:	e009      	b.n	80099d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80099c0:	6839      	ldr	r1, [r7, #0]
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 fc74 	bl	800a2b0 <USBD_ClrFeature>
          break;
 80099c8:	e004      	b.n	80099d4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80099ca:	6839      	ldr	r1, [r7, #0]
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 fccc 	bl	800a36a <USBD_CtlError>
          break;
 80099d2:	bf00      	nop
      }
      break;
 80099d4:	e004      	b.n	80099e0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80099d6:	6839      	ldr	r1, [r7, #0]
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 fcc6 	bl	800a36a <USBD_CtlError>
      break;
 80099de:	bf00      	nop
  }

  return ret;
 80099e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3710      	adds	r7, #16
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop

080099ec <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099f6:	2300      	movs	r3, #0
 80099f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a02:	2b40      	cmp	r3, #64	; 0x40
 8009a04:	d005      	beq.n	8009a12 <USBD_StdItfReq+0x26>
 8009a06:	2b40      	cmp	r3, #64	; 0x40
 8009a08:	d82e      	bhi.n	8009a68 <USBD_StdItfReq+0x7c>
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d001      	beq.n	8009a12 <USBD_StdItfReq+0x26>
 8009a0e:	2b20      	cmp	r3, #32
 8009a10:	d12a      	bne.n	8009a68 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a18:	3b01      	subs	r3, #1
 8009a1a:	2b02      	cmp	r3, #2
 8009a1c:	d81d      	bhi.n	8009a5a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	889b      	ldrh	r3, [r3, #4]
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d813      	bhi.n	8009a50 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	6839      	ldr	r1, [r7, #0]
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	4798      	blx	r3
 8009a36:	4603      	mov	r3, r0
 8009a38:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	88db      	ldrh	r3, [r3, #6]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d110      	bne.n	8009a64 <USBD_StdItfReq+0x78>
 8009a42:	7bfb      	ldrb	r3, [r7, #15]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d10d      	bne.n	8009a64 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 fd56 	bl	800a4fa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009a4e:	e009      	b.n	8009a64 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009a50:	6839      	ldr	r1, [r7, #0]
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 fc89 	bl	800a36a <USBD_CtlError>
          break;
 8009a58:	e004      	b.n	8009a64 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009a5a:	6839      	ldr	r1, [r7, #0]
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 fc84 	bl	800a36a <USBD_CtlError>
          break;
 8009a62:	e000      	b.n	8009a66 <USBD_StdItfReq+0x7a>
          break;
 8009a64:	bf00      	nop
      }
      break;
 8009a66:	e004      	b.n	8009a72 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009a68:	6839      	ldr	r1, [r7, #0]
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 fc7d 	bl	800a36a <USBD_CtlError>
      break;
 8009a70:	bf00      	nop
  }

  return USBD_OK;
 8009a72:	2300      	movs	r3, #0
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3710      	adds	r7, #16
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009a86:	2300      	movs	r3, #0
 8009a88:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	889b      	ldrh	r3, [r3, #4]
 8009a8e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a98:	2b40      	cmp	r3, #64	; 0x40
 8009a9a:	d007      	beq.n	8009aac <USBD_StdEPReq+0x30>
 8009a9c:	2b40      	cmp	r3, #64	; 0x40
 8009a9e:	f200 8146 	bhi.w	8009d2e <USBD_StdEPReq+0x2b2>
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d00a      	beq.n	8009abc <USBD_StdEPReq+0x40>
 8009aa6:	2b20      	cmp	r3, #32
 8009aa8:	f040 8141 	bne.w	8009d2e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	6839      	ldr	r1, [r7, #0]
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	4798      	blx	r3
      break;
 8009aba:	e13d      	b.n	8009d38 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ac4:	2b20      	cmp	r3, #32
 8009ac6:	d10a      	bne.n	8009ade <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	6839      	ldr	r1, [r7, #0]
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	4798      	blx	r3
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009ada:	7bfb      	ldrb	r3, [r7, #15]
 8009adc:	e12d      	b.n	8009d3a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	785b      	ldrb	r3, [r3, #1]
 8009ae2:	2b03      	cmp	r3, #3
 8009ae4:	d007      	beq.n	8009af6 <USBD_StdEPReq+0x7a>
 8009ae6:	2b03      	cmp	r3, #3
 8009ae8:	f300 811b 	bgt.w	8009d22 <USBD_StdEPReq+0x2a6>
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d072      	beq.n	8009bd6 <USBD_StdEPReq+0x15a>
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d03a      	beq.n	8009b6a <USBD_StdEPReq+0xee>
 8009af4:	e115      	b.n	8009d22 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009afc:	2b02      	cmp	r3, #2
 8009afe:	d002      	beq.n	8009b06 <USBD_StdEPReq+0x8a>
 8009b00:	2b03      	cmp	r3, #3
 8009b02:	d015      	beq.n	8009b30 <USBD_StdEPReq+0xb4>
 8009b04:	e02b      	b.n	8009b5e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b06:	7bbb      	ldrb	r3, [r7, #14]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00c      	beq.n	8009b26 <USBD_StdEPReq+0xaa>
 8009b0c:	7bbb      	ldrb	r3, [r7, #14]
 8009b0e:	2b80      	cmp	r3, #128	; 0x80
 8009b10:	d009      	beq.n	8009b26 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009b12:	7bbb      	ldrb	r3, [r7, #14]
 8009b14:	4619      	mov	r1, r3
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f001 f8a4 	bl	800ac64 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009b1c:	2180      	movs	r1, #128	; 0x80
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f001 f8a0 	bl	800ac64 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b24:	e020      	b.n	8009b68 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009b26:	6839      	ldr	r1, [r7, #0]
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 fc1e 	bl	800a36a <USBD_CtlError>
              break;
 8009b2e:	e01b      	b.n	8009b68 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	885b      	ldrh	r3, [r3, #2]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d10e      	bne.n	8009b56 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009b38:	7bbb      	ldrb	r3, [r7, #14]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d00b      	beq.n	8009b56 <USBD_StdEPReq+0xda>
 8009b3e:	7bbb      	ldrb	r3, [r7, #14]
 8009b40:	2b80      	cmp	r3, #128	; 0x80
 8009b42:	d008      	beq.n	8009b56 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	88db      	ldrh	r3, [r3, #6]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d104      	bne.n	8009b56 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009b4c:	7bbb      	ldrb	r3, [r7, #14]
 8009b4e:	4619      	mov	r1, r3
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f001 f887 	bl	800ac64 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 fccf 	bl	800a4fa <USBD_CtlSendStatus>

              break;
 8009b5c:	e004      	b.n	8009b68 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009b5e:	6839      	ldr	r1, [r7, #0]
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 fc02 	bl	800a36a <USBD_CtlError>
              break;
 8009b66:	bf00      	nop
          }
          break;
 8009b68:	e0e0      	b.n	8009d2c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b70:	2b02      	cmp	r3, #2
 8009b72:	d002      	beq.n	8009b7a <USBD_StdEPReq+0xfe>
 8009b74:	2b03      	cmp	r3, #3
 8009b76:	d015      	beq.n	8009ba4 <USBD_StdEPReq+0x128>
 8009b78:	e026      	b.n	8009bc8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b7a:	7bbb      	ldrb	r3, [r7, #14]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d00c      	beq.n	8009b9a <USBD_StdEPReq+0x11e>
 8009b80:	7bbb      	ldrb	r3, [r7, #14]
 8009b82:	2b80      	cmp	r3, #128	; 0x80
 8009b84:	d009      	beq.n	8009b9a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009b86:	7bbb      	ldrb	r3, [r7, #14]
 8009b88:	4619      	mov	r1, r3
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f001 f86a 	bl	800ac64 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009b90:	2180      	movs	r1, #128	; 0x80
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f001 f866 	bl	800ac64 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b98:	e01c      	b.n	8009bd4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009b9a:	6839      	ldr	r1, [r7, #0]
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 fbe4 	bl	800a36a <USBD_CtlError>
              break;
 8009ba2:	e017      	b.n	8009bd4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	885b      	ldrh	r3, [r3, #2]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d112      	bne.n	8009bd2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009bac:	7bbb      	ldrb	r3, [r7, #14]
 8009bae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d004      	beq.n	8009bc0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009bb6:	7bbb      	ldrb	r3, [r7, #14]
 8009bb8:	4619      	mov	r1, r3
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f001 f871 	bl	800aca2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 fc9a 	bl	800a4fa <USBD_CtlSendStatus>
              }
              break;
 8009bc6:	e004      	b.n	8009bd2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009bc8:	6839      	ldr	r1, [r7, #0]
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 fbcd 	bl	800a36a <USBD_CtlError>
              break;
 8009bd0:	e000      	b.n	8009bd4 <USBD_StdEPReq+0x158>
              break;
 8009bd2:	bf00      	nop
          }
          break;
 8009bd4:	e0aa      	b.n	8009d2c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bdc:	2b02      	cmp	r3, #2
 8009bde:	d002      	beq.n	8009be6 <USBD_StdEPReq+0x16a>
 8009be0:	2b03      	cmp	r3, #3
 8009be2:	d032      	beq.n	8009c4a <USBD_StdEPReq+0x1ce>
 8009be4:	e097      	b.n	8009d16 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009be6:	7bbb      	ldrb	r3, [r7, #14]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d007      	beq.n	8009bfc <USBD_StdEPReq+0x180>
 8009bec:	7bbb      	ldrb	r3, [r7, #14]
 8009bee:	2b80      	cmp	r3, #128	; 0x80
 8009bf0:	d004      	beq.n	8009bfc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009bf2:	6839      	ldr	r1, [r7, #0]
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 fbb8 	bl	800a36a <USBD_CtlError>
                break;
 8009bfa:	e091      	b.n	8009d20 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	da0b      	bge.n	8009c1c <USBD_StdEPReq+0x1a0>
 8009c04:	7bbb      	ldrb	r3, [r7, #14]
 8009c06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c0a:	4613      	mov	r3, r2
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	4413      	add	r3, r2
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	3310      	adds	r3, #16
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	4413      	add	r3, r2
 8009c18:	3304      	adds	r3, #4
 8009c1a:	e00b      	b.n	8009c34 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c1c:	7bbb      	ldrb	r3, [r7, #14]
 8009c1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c22:	4613      	mov	r3, r2
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	4413      	add	r3, r2
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	4413      	add	r3, r2
 8009c32:	3304      	adds	r3, #4
 8009c34:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	2202      	movs	r2, #2
 8009c40:	4619      	mov	r1, r3
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 fbfb 	bl	800a43e <USBD_CtlSendData>
              break;
 8009c48:	e06a      	b.n	8009d20 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009c4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	da11      	bge.n	8009c76 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009c52:	7bbb      	ldrb	r3, [r7, #14]
 8009c54:	f003 020f 	and.w	r2, r3, #15
 8009c58:	6879      	ldr	r1, [r7, #4]
 8009c5a:	4613      	mov	r3, r2
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	4413      	add	r3, r2
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	440b      	add	r3, r1
 8009c64:	3318      	adds	r3, #24
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d117      	bne.n	8009c9c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009c6c:	6839      	ldr	r1, [r7, #0]
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 fb7b 	bl	800a36a <USBD_CtlError>
                  break;
 8009c74:	e054      	b.n	8009d20 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009c76:	7bbb      	ldrb	r3, [r7, #14]
 8009c78:	f003 020f 	and.w	r2, r3, #15
 8009c7c:	6879      	ldr	r1, [r7, #4]
 8009c7e:	4613      	mov	r3, r2
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	4413      	add	r3, r2
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	440b      	add	r3, r1
 8009c88:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d104      	bne.n	8009c9c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009c92:	6839      	ldr	r1, [r7, #0]
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 fb68 	bl	800a36a <USBD_CtlError>
                  break;
 8009c9a:	e041      	b.n	8009d20 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	da0b      	bge.n	8009cbc <USBD_StdEPReq+0x240>
 8009ca4:	7bbb      	ldrb	r3, [r7, #14]
 8009ca6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009caa:	4613      	mov	r3, r2
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	4413      	add	r3, r2
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	3310      	adds	r3, #16
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	4413      	add	r3, r2
 8009cb8:	3304      	adds	r3, #4
 8009cba:	e00b      	b.n	8009cd4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009cbc:	7bbb      	ldrb	r3, [r7, #14]
 8009cbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cc2:	4613      	mov	r3, r2
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	4413      	add	r3, r2
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	4413      	add	r3, r2
 8009cd2:	3304      	adds	r3, #4
 8009cd4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009cd6:	7bbb      	ldrb	r3, [r7, #14]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d002      	beq.n	8009ce2 <USBD_StdEPReq+0x266>
 8009cdc:	7bbb      	ldrb	r3, [r7, #14]
 8009cde:	2b80      	cmp	r3, #128	; 0x80
 8009ce0:	d103      	bne.n	8009cea <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	601a      	str	r2, [r3, #0]
 8009ce8:	e00e      	b.n	8009d08 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009cea:	7bbb      	ldrb	r3, [r7, #14]
 8009cec:	4619      	mov	r1, r3
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 fff6 	bl	800ace0 <USBD_LL_IsStallEP>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d003      	beq.n	8009d02 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	601a      	str	r2, [r3, #0]
 8009d00:	e002      	b.n	8009d08 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	2200      	movs	r2, #0
 8009d06:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	2202      	movs	r2, #2
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 fb95 	bl	800a43e <USBD_CtlSendData>
              break;
 8009d14:	e004      	b.n	8009d20 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009d16:	6839      	ldr	r1, [r7, #0]
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 fb26 	bl	800a36a <USBD_CtlError>
              break;
 8009d1e:	bf00      	nop
          }
          break;
 8009d20:	e004      	b.n	8009d2c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009d22:	6839      	ldr	r1, [r7, #0]
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 fb20 	bl	800a36a <USBD_CtlError>
          break;
 8009d2a:	bf00      	nop
      }
      break;
 8009d2c:	e004      	b.n	8009d38 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009d2e:	6839      	ldr	r1, [r7, #0]
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 fb1a 	bl	800a36a <USBD_CtlError>
      break;
 8009d36:	bf00      	nop
  }

  return ret;
 8009d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3710      	adds	r7, #16
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
	...

08009d44 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009d52:	2300      	movs	r3, #0
 8009d54:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009d56:	2300      	movs	r3, #0
 8009d58:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	885b      	ldrh	r3, [r3, #2]
 8009d5e:	0a1b      	lsrs	r3, r3, #8
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	3b01      	subs	r3, #1
 8009d64:	2b06      	cmp	r3, #6
 8009d66:	f200 8128 	bhi.w	8009fba <USBD_GetDescriptor+0x276>
 8009d6a:	a201      	add	r2, pc, #4	; (adr r2, 8009d70 <USBD_GetDescriptor+0x2c>)
 8009d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d70:	08009d8d 	.word	0x08009d8d
 8009d74:	08009da5 	.word	0x08009da5
 8009d78:	08009de5 	.word	0x08009de5
 8009d7c:	08009fbb 	.word	0x08009fbb
 8009d80:	08009fbb 	.word	0x08009fbb
 8009d84:	08009f5b 	.word	0x08009f5b
 8009d88:	08009f87 	.word	0x08009f87
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	7c12      	ldrb	r2, [r2, #16]
 8009d98:	f107 0108 	add.w	r1, r7, #8
 8009d9c:	4610      	mov	r0, r2
 8009d9e:	4798      	blx	r3
 8009da0:	60f8      	str	r0, [r7, #12]
      break;
 8009da2:	e112      	b.n	8009fca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	7c1b      	ldrb	r3, [r3, #16]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d10d      	bne.n	8009dc8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009db4:	f107 0208 	add.w	r2, r7, #8
 8009db8:	4610      	mov	r0, r2
 8009dba:	4798      	blx	r3
 8009dbc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	3301      	adds	r3, #1
 8009dc2:	2202      	movs	r2, #2
 8009dc4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009dc6:	e100      	b.n	8009fca <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd0:	f107 0208 	add.w	r2, r7, #8
 8009dd4:	4610      	mov	r0, r2
 8009dd6:	4798      	blx	r3
 8009dd8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	3301      	adds	r3, #1
 8009dde:	2202      	movs	r2, #2
 8009de0:	701a      	strb	r2, [r3, #0]
      break;
 8009de2:	e0f2      	b.n	8009fca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	885b      	ldrh	r3, [r3, #2]
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	2b05      	cmp	r3, #5
 8009dec:	f200 80ac 	bhi.w	8009f48 <USBD_GetDescriptor+0x204>
 8009df0:	a201      	add	r2, pc, #4	; (adr r2, 8009df8 <USBD_GetDescriptor+0xb4>)
 8009df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df6:	bf00      	nop
 8009df8:	08009e11 	.word	0x08009e11
 8009dfc:	08009e45 	.word	0x08009e45
 8009e00:	08009e79 	.word	0x08009e79
 8009e04:	08009ead 	.word	0x08009ead
 8009e08:	08009ee1 	.word	0x08009ee1
 8009e0c:	08009f15 	.word	0x08009f15
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d00b      	beq.n	8009e34 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	7c12      	ldrb	r2, [r2, #16]
 8009e28:	f107 0108 	add.w	r1, r7, #8
 8009e2c:	4610      	mov	r0, r2
 8009e2e:	4798      	blx	r3
 8009e30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e32:	e091      	b.n	8009f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e34:	6839      	ldr	r1, [r7, #0]
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 fa97 	bl	800a36a <USBD_CtlError>
            err++;
 8009e3c:	7afb      	ldrb	r3, [r7, #11]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	72fb      	strb	r3, [r7, #11]
          break;
 8009e42:	e089      	b.n	8009f58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d00b      	beq.n	8009e68 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	7c12      	ldrb	r2, [r2, #16]
 8009e5c:	f107 0108 	add.w	r1, r7, #8
 8009e60:	4610      	mov	r0, r2
 8009e62:	4798      	blx	r3
 8009e64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e66:	e077      	b.n	8009f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e68:	6839      	ldr	r1, [r7, #0]
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 fa7d 	bl	800a36a <USBD_CtlError>
            err++;
 8009e70:	7afb      	ldrb	r3, [r7, #11]
 8009e72:	3301      	adds	r3, #1
 8009e74:	72fb      	strb	r3, [r7, #11]
          break;
 8009e76:	e06f      	b.n	8009f58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d00b      	beq.n	8009e9c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	7c12      	ldrb	r2, [r2, #16]
 8009e90:	f107 0108 	add.w	r1, r7, #8
 8009e94:	4610      	mov	r0, r2
 8009e96:	4798      	blx	r3
 8009e98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e9a:	e05d      	b.n	8009f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e9c:	6839      	ldr	r1, [r7, #0]
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 fa63 	bl	800a36a <USBD_CtlError>
            err++;
 8009ea4:	7afb      	ldrb	r3, [r7, #11]
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	72fb      	strb	r3, [r7, #11]
          break;
 8009eaa:	e055      	b.n	8009f58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009eb2:	691b      	ldr	r3, [r3, #16]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d00b      	beq.n	8009ed0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ebe:	691b      	ldr	r3, [r3, #16]
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	7c12      	ldrb	r2, [r2, #16]
 8009ec4:	f107 0108 	add.w	r1, r7, #8
 8009ec8:	4610      	mov	r0, r2
 8009eca:	4798      	blx	r3
 8009ecc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ece:	e043      	b.n	8009f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ed0:	6839      	ldr	r1, [r7, #0]
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 fa49 	bl	800a36a <USBD_CtlError>
            err++;
 8009ed8:	7afb      	ldrb	r3, [r7, #11]
 8009eda:	3301      	adds	r3, #1
 8009edc:	72fb      	strb	r3, [r7, #11]
          break;
 8009ede:	e03b      	b.n	8009f58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ee6:	695b      	ldr	r3, [r3, #20]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d00b      	beq.n	8009f04 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ef2:	695b      	ldr	r3, [r3, #20]
 8009ef4:	687a      	ldr	r2, [r7, #4]
 8009ef6:	7c12      	ldrb	r2, [r2, #16]
 8009ef8:	f107 0108 	add.w	r1, r7, #8
 8009efc:	4610      	mov	r0, r2
 8009efe:	4798      	blx	r3
 8009f00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f02:	e029      	b.n	8009f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f04:	6839      	ldr	r1, [r7, #0]
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 fa2f 	bl	800a36a <USBD_CtlError>
            err++;
 8009f0c:	7afb      	ldrb	r3, [r7, #11]
 8009f0e:	3301      	adds	r3, #1
 8009f10:	72fb      	strb	r3, [r7, #11]
          break;
 8009f12:	e021      	b.n	8009f58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f1a:	699b      	ldr	r3, [r3, #24]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d00b      	beq.n	8009f38 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f26:	699b      	ldr	r3, [r3, #24]
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	7c12      	ldrb	r2, [r2, #16]
 8009f2c:	f107 0108 	add.w	r1, r7, #8
 8009f30:	4610      	mov	r0, r2
 8009f32:	4798      	blx	r3
 8009f34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f36:	e00f      	b.n	8009f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f38:	6839      	ldr	r1, [r7, #0]
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 fa15 	bl	800a36a <USBD_CtlError>
            err++;
 8009f40:	7afb      	ldrb	r3, [r7, #11]
 8009f42:	3301      	adds	r3, #1
 8009f44:	72fb      	strb	r3, [r7, #11]
          break;
 8009f46:	e007      	b.n	8009f58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009f48:	6839      	ldr	r1, [r7, #0]
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 fa0d 	bl	800a36a <USBD_CtlError>
          err++;
 8009f50:	7afb      	ldrb	r3, [r7, #11]
 8009f52:	3301      	adds	r3, #1
 8009f54:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009f56:	e038      	b.n	8009fca <USBD_GetDescriptor+0x286>
 8009f58:	e037      	b.n	8009fca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	7c1b      	ldrb	r3, [r3, #16]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d109      	bne.n	8009f76 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f6a:	f107 0208 	add.w	r2, r7, #8
 8009f6e:	4610      	mov	r0, r2
 8009f70:	4798      	blx	r3
 8009f72:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f74:	e029      	b.n	8009fca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f76:	6839      	ldr	r1, [r7, #0]
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f000 f9f6 	bl	800a36a <USBD_CtlError>
        err++;
 8009f7e:	7afb      	ldrb	r3, [r7, #11]
 8009f80:	3301      	adds	r3, #1
 8009f82:	72fb      	strb	r3, [r7, #11]
      break;
 8009f84:	e021      	b.n	8009fca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	7c1b      	ldrb	r3, [r3, #16]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d10d      	bne.n	8009faa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f96:	f107 0208 	add.w	r2, r7, #8
 8009f9a:	4610      	mov	r0, r2
 8009f9c:	4798      	blx	r3
 8009f9e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	2207      	movs	r2, #7
 8009fa6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009fa8:	e00f      	b.n	8009fca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009faa:	6839      	ldr	r1, [r7, #0]
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 f9dc 	bl	800a36a <USBD_CtlError>
        err++;
 8009fb2:	7afb      	ldrb	r3, [r7, #11]
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	72fb      	strb	r3, [r7, #11]
      break;
 8009fb8:	e007      	b.n	8009fca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009fba:	6839      	ldr	r1, [r7, #0]
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f000 f9d4 	bl	800a36a <USBD_CtlError>
      err++;
 8009fc2:	7afb      	ldrb	r3, [r7, #11]
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	72fb      	strb	r3, [r7, #11]
      break;
 8009fc8:	bf00      	nop
  }

  if (err != 0U)
 8009fca:	7afb      	ldrb	r3, [r7, #11]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d11c      	bne.n	800a00a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009fd0:	893b      	ldrh	r3, [r7, #8]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d011      	beq.n	8009ffa <USBD_GetDescriptor+0x2b6>
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	88db      	ldrh	r3, [r3, #6]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d00d      	beq.n	8009ffa <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	88da      	ldrh	r2, [r3, #6]
 8009fe2:	893b      	ldrh	r3, [r7, #8]
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	bf28      	it	cs
 8009fe8:	4613      	movcs	r3, r2
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009fee:	893b      	ldrh	r3, [r7, #8]
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	68f9      	ldr	r1, [r7, #12]
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 fa22 	bl	800a43e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	88db      	ldrh	r3, [r3, #6]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d104      	bne.n	800a00c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f000 fa79 	bl	800a4fa <USBD_CtlSendStatus>
 800a008:	e000      	b.n	800a00c <USBD_GetDescriptor+0x2c8>
    return;
 800a00a:	bf00      	nop
    }
  }
}
 800a00c:	3710      	adds	r7, #16
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop

0800a014 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b084      	sub	sp, #16
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	889b      	ldrh	r3, [r3, #4]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d130      	bne.n	800a088 <USBD_SetAddress+0x74>
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	88db      	ldrh	r3, [r3, #6]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d12c      	bne.n	800a088 <USBD_SetAddress+0x74>
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	885b      	ldrh	r3, [r3, #2]
 800a032:	2b7f      	cmp	r3, #127	; 0x7f
 800a034:	d828      	bhi.n	800a088 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	885b      	ldrh	r3, [r3, #2]
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a040:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a048:	2b03      	cmp	r3, #3
 800a04a:	d104      	bne.n	800a056 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a04c:	6839      	ldr	r1, [r7, #0]
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 f98b 	bl	800a36a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a054:	e01d      	b.n	800a092 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	7bfa      	ldrb	r2, [r7, #15]
 800a05a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a05e:	7bfb      	ldrb	r3, [r7, #15]
 800a060:	4619      	mov	r1, r3
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 fe68 	bl	800ad38 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 fa46 	bl	800a4fa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a06e:	7bfb      	ldrb	r3, [r7, #15]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d004      	beq.n	800a07e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2202      	movs	r2, #2
 800a078:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a07c:	e009      	b.n	800a092 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2201      	movs	r2, #1
 800a082:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a086:	e004      	b.n	800a092 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a088:	6839      	ldr	r1, [r7, #0]
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 f96d 	bl	800a36a <USBD_CtlError>
  }
}
 800a090:	bf00      	nop
 800a092:	bf00      	nop
 800a094:	3710      	adds	r7, #16
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
	...

0800a09c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	885b      	ldrh	r3, [r3, #2]
 800a0aa:	b2da      	uxtb	r2, r3
 800a0ac:	4b41      	ldr	r3, [pc, #260]	; (800a1b4 <USBD_SetConfig+0x118>)
 800a0ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a0b0:	4b40      	ldr	r3, [pc, #256]	; (800a1b4 <USBD_SetConfig+0x118>)
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d904      	bls.n	800a0c2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a0b8:	6839      	ldr	r1, [r7, #0]
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 f955 	bl	800a36a <USBD_CtlError>
 800a0c0:	e075      	b.n	800a1ae <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d002      	beq.n	800a0d2 <USBD_SetConfig+0x36>
 800a0cc:	2b03      	cmp	r3, #3
 800a0ce:	d023      	beq.n	800a118 <USBD_SetConfig+0x7c>
 800a0d0:	e062      	b.n	800a198 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a0d2:	4b38      	ldr	r3, [pc, #224]	; (800a1b4 <USBD_SetConfig+0x118>)
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d01a      	beq.n	800a110 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a0da:	4b36      	ldr	r3, [pc, #216]	; (800a1b4 <USBD_SetConfig+0x118>)
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	461a      	mov	r2, r3
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2203      	movs	r2, #3
 800a0e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a0ec:	4b31      	ldr	r3, [pc, #196]	; (800a1b4 <USBD_SetConfig+0x118>)
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f7ff f9e7 	bl	80094c6 <USBD_SetClassConfig>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b02      	cmp	r3, #2
 800a0fc:	d104      	bne.n	800a108 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a0fe:	6839      	ldr	r1, [r7, #0]
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f000 f932 	bl	800a36a <USBD_CtlError>
            return;
 800a106:	e052      	b.n	800a1ae <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f000 f9f6 	bl	800a4fa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a10e:	e04e      	b.n	800a1ae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 f9f2 	bl	800a4fa <USBD_CtlSendStatus>
        break;
 800a116:	e04a      	b.n	800a1ae <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a118:	4b26      	ldr	r3, [pc, #152]	; (800a1b4 <USBD_SetConfig+0x118>)
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d112      	bne.n	800a146 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2202      	movs	r2, #2
 800a124:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a128:	4b22      	ldr	r3, [pc, #136]	; (800a1b4 <USBD_SetConfig+0x118>)
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	461a      	mov	r2, r3
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a132:	4b20      	ldr	r3, [pc, #128]	; (800a1b4 <USBD_SetConfig+0x118>)
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	4619      	mov	r1, r3
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f7ff f9e3 	bl	8009504 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 f9db 	bl	800a4fa <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a144:	e033      	b.n	800a1ae <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a146:	4b1b      	ldr	r3, [pc, #108]	; (800a1b4 <USBD_SetConfig+0x118>)
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	461a      	mov	r2, r3
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	429a      	cmp	r2, r3
 800a152:	d01d      	beq.n	800a190 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	4619      	mov	r1, r3
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f7ff f9d1 	bl	8009504 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a162:	4b14      	ldr	r3, [pc, #80]	; (800a1b4 <USBD_SetConfig+0x118>)
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	461a      	mov	r2, r3
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a16c:	4b11      	ldr	r3, [pc, #68]	; (800a1b4 <USBD_SetConfig+0x118>)
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	4619      	mov	r1, r3
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f7ff f9a7 	bl	80094c6 <USBD_SetClassConfig>
 800a178:	4603      	mov	r3, r0
 800a17a:	2b02      	cmp	r3, #2
 800a17c:	d104      	bne.n	800a188 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a17e:	6839      	ldr	r1, [r7, #0]
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f000 f8f2 	bl	800a36a <USBD_CtlError>
            return;
 800a186:	e012      	b.n	800a1ae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 f9b6 	bl	800a4fa <USBD_CtlSendStatus>
        break;
 800a18e:	e00e      	b.n	800a1ae <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 f9b2 	bl	800a4fa <USBD_CtlSendStatus>
        break;
 800a196:	e00a      	b.n	800a1ae <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a198:	6839      	ldr	r1, [r7, #0]
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f000 f8e5 	bl	800a36a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a1a0:	4b04      	ldr	r3, [pc, #16]	; (800a1b4 <USBD_SetConfig+0x118>)
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f7ff f9ac 	bl	8009504 <USBD_ClrClassConfig>
        break;
 800a1ac:	bf00      	nop
    }
  }
}
 800a1ae:	3708      	adds	r7, #8
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}
 800a1b4:	200003f0 	.word	0x200003f0

0800a1b8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	88db      	ldrh	r3, [r3, #6]
 800a1c6:	2b01      	cmp	r3, #1
 800a1c8:	d004      	beq.n	800a1d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a1ca:	6839      	ldr	r1, [r7, #0]
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 f8cc 	bl	800a36a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a1d2:	e022      	b.n	800a21a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1da:	2b02      	cmp	r3, #2
 800a1dc:	dc02      	bgt.n	800a1e4 <USBD_GetConfig+0x2c>
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	dc03      	bgt.n	800a1ea <USBD_GetConfig+0x32>
 800a1e2:	e015      	b.n	800a210 <USBD_GetConfig+0x58>
 800a1e4:	2b03      	cmp	r3, #3
 800a1e6:	d00b      	beq.n	800a200 <USBD_GetConfig+0x48>
 800a1e8:	e012      	b.n	800a210 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	3308      	adds	r3, #8
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 f920 	bl	800a43e <USBD_CtlSendData>
        break;
 800a1fe:	e00c      	b.n	800a21a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	3304      	adds	r3, #4
 800a204:	2201      	movs	r2, #1
 800a206:	4619      	mov	r1, r3
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 f918 	bl	800a43e <USBD_CtlSendData>
        break;
 800a20e:	e004      	b.n	800a21a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a210:	6839      	ldr	r1, [r7, #0]
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 f8a9 	bl	800a36a <USBD_CtlError>
        break;
 800a218:	bf00      	nop
}
 800a21a:	bf00      	nop
 800a21c:	3708      	adds	r7, #8
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}

0800a222 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a222:	b580      	push	{r7, lr}
 800a224:	b082      	sub	sp, #8
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
 800a22a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a232:	3b01      	subs	r3, #1
 800a234:	2b02      	cmp	r3, #2
 800a236:	d81e      	bhi.n	800a276 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	88db      	ldrh	r3, [r3, #6]
 800a23c:	2b02      	cmp	r3, #2
 800a23e:	d004      	beq.n	800a24a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a240:	6839      	ldr	r1, [r7, #0]
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f000 f891 	bl	800a36a <USBD_CtlError>
        break;
 800a248:	e01a      	b.n	800a280 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2201      	movs	r2, #1
 800a24e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a256:	2b00      	cmp	r3, #0
 800a258:	d005      	beq.n	800a266 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	68db      	ldr	r3, [r3, #12]
 800a25e:	f043 0202 	orr.w	r2, r3, #2
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	330c      	adds	r3, #12
 800a26a:	2202      	movs	r2, #2
 800a26c:	4619      	mov	r1, r3
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 f8e5 	bl	800a43e <USBD_CtlSendData>
      break;
 800a274:	e004      	b.n	800a280 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a276:	6839      	ldr	r1, [r7, #0]
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 f876 	bl	800a36a <USBD_CtlError>
      break;
 800a27e:	bf00      	nop
  }
}
 800a280:	bf00      	nop
 800a282:	3708      	adds	r7, #8
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	885b      	ldrh	r3, [r3, #2]
 800a296:	2b01      	cmp	r3, #1
 800a298:	d106      	bne.n	800a2a8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2201      	movs	r2, #1
 800a29e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 f929 	bl	800a4fa <USBD_CtlSendStatus>
  }
}
 800a2a8:	bf00      	nop
 800a2aa:	3708      	adds	r7, #8
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2c0:	3b01      	subs	r3, #1
 800a2c2:	2b02      	cmp	r3, #2
 800a2c4:	d80b      	bhi.n	800a2de <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	885b      	ldrh	r3, [r3, #2]
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d10c      	bne.n	800a2e8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 f90f 	bl	800a4fa <USBD_CtlSendStatus>
      }
      break;
 800a2dc:	e004      	b.n	800a2e8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a2de:	6839      	ldr	r1, [r7, #0]
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 f842 	bl	800a36a <USBD_CtlError>
      break;
 800a2e6:	e000      	b.n	800a2ea <USBD_ClrFeature+0x3a>
      break;
 800a2e8:	bf00      	nop
  }
}
 800a2ea:	bf00      	nop
 800a2ec:	3708      	adds	r7, #8
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a2f2:	b480      	push	{r7}
 800a2f4:	b083      	sub	sp, #12
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
 800a2fa:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	781a      	ldrb	r2, [r3, #0]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	785a      	ldrb	r2, [r3, #1]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	3302      	adds	r3, #2
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	b29a      	uxth	r2, r3
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	3303      	adds	r3, #3
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	021b      	lsls	r3, r3, #8
 800a31e:	b29b      	uxth	r3, r3
 800a320:	4413      	add	r3, r2
 800a322:	b29a      	uxth	r2, r3
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	3304      	adds	r3, #4
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	b29a      	uxth	r2, r3
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	3305      	adds	r3, #5
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	b29b      	uxth	r3, r3
 800a338:	021b      	lsls	r3, r3, #8
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	4413      	add	r3, r2
 800a33e:	b29a      	uxth	r2, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	3306      	adds	r3, #6
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	b29a      	uxth	r2, r3
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	3307      	adds	r3, #7
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	b29b      	uxth	r3, r3
 800a354:	021b      	lsls	r3, r3, #8
 800a356:	b29b      	uxth	r3, r3
 800a358:	4413      	add	r3, r2
 800a35a:	b29a      	uxth	r2, r3
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	80da      	strh	r2, [r3, #6]

}
 800a360:	bf00      	nop
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	bc80      	pop	{r7}
 800a368:	4770      	bx	lr

0800a36a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a36a:	b580      	push	{r7, lr}
 800a36c:	b082      	sub	sp, #8
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
 800a372:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a374:	2180      	movs	r1, #128	; 0x80
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 fc74 	bl	800ac64 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a37c:	2100      	movs	r1, #0
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f000 fc70 	bl	800ac64 <USBD_LL_StallEP>
}
 800a384:	bf00      	nop
 800a386:	3708      	adds	r7, #8
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b086      	sub	sp, #24
 800a390:	af00      	add	r7, sp, #0
 800a392:	60f8      	str	r0, [r7, #12]
 800a394:	60b9      	str	r1, [r7, #8]
 800a396:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a398:	2300      	movs	r3, #0
 800a39a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d032      	beq.n	800a408 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a3a2:	68f8      	ldr	r0, [r7, #12]
 800a3a4:	f000 f834 	bl	800a410 <USBD_GetLen>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	005b      	lsls	r3, r3, #1
 800a3b0:	b29a      	uxth	r2, r3
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a3b6:	7dfb      	ldrb	r3, [r7, #23]
 800a3b8:	1c5a      	adds	r2, r3, #1
 800a3ba:	75fa      	strb	r2, [r7, #23]
 800a3bc:	461a      	mov	r2, r3
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	4413      	add	r3, r2
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	7812      	ldrb	r2, [r2, #0]
 800a3c6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a3c8:	7dfb      	ldrb	r3, [r7, #23]
 800a3ca:	1c5a      	adds	r2, r3, #1
 800a3cc:	75fa      	strb	r2, [r7, #23]
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	4413      	add	r3, r2
 800a3d4:	2203      	movs	r2, #3
 800a3d6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a3d8:	e012      	b.n	800a400 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	1c5a      	adds	r2, r3, #1
 800a3de:	60fa      	str	r2, [r7, #12]
 800a3e0:	7dfa      	ldrb	r2, [r7, #23]
 800a3e2:	1c51      	adds	r1, r2, #1
 800a3e4:	75f9      	strb	r1, [r7, #23]
 800a3e6:	4611      	mov	r1, r2
 800a3e8:	68ba      	ldr	r2, [r7, #8]
 800a3ea:	440a      	add	r2, r1
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a3f0:	7dfb      	ldrb	r3, [r7, #23]
 800a3f2:	1c5a      	adds	r2, r3, #1
 800a3f4:	75fa      	strb	r2, [r7, #23]
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d1e8      	bne.n	800a3da <USBD_GetString+0x4e>
    }
  }
}
 800a408:	bf00      	nop
 800a40a:	3718      	adds	r7, #24
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a410:	b480      	push	{r7}
 800a412:	b085      	sub	sp, #20
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a418:	2300      	movs	r3, #0
 800a41a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a41c:	e005      	b.n	800a42a <USBD_GetLen+0x1a>
  {
    len++;
 800a41e:	7bfb      	ldrb	r3, [r7, #15]
 800a420:	3301      	adds	r3, #1
 800a422:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	3301      	adds	r3, #1
 800a428:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d1f5      	bne.n	800a41e <USBD_GetLen+0xe>
  }

  return len;
 800a432:	7bfb      	ldrb	r3, [r7, #15]
}
 800a434:	4618      	mov	r0, r3
 800a436:	3714      	adds	r7, #20
 800a438:	46bd      	mov	sp, r7
 800a43a:	bc80      	pop	{r7}
 800a43c:	4770      	bx	lr

0800a43e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a43e:	b580      	push	{r7, lr}
 800a440:	b084      	sub	sp, #16
 800a442:	af00      	add	r7, sp, #0
 800a444:	60f8      	str	r0, [r7, #12]
 800a446:	60b9      	str	r1, [r7, #8]
 800a448:	4613      	mov	r3, r2
 800a44a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2202      	movs	r2, #2
 800a450:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a454:	88fa      	ldrh	r2, [r7, #6]
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a45a:	88fa      	ldrh	r2, [r7, #6]
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a460:	88fb      	ldrh	r3, [r7, #6]
 800a462:	68ba      	ldr	r2, [r7, #8]
 800a464:	2100      	movs	r1, #0
 800a466:	68f8      	ldr	r0, [r7, #12]
 800a468:	f000 fc85 	bl	800ad76 <USBD_LL_Transmit>

  return USBD_OK;
 800a46c:	2300      	movs	r3, #0
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3710      	adds	r7, #16
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}

0800a476 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a476:	b580      	push	{r7, lr}
 800a478:	b084      	sub	sp, #16
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	60f8      	str	r0, [r7, #12]
 800a47e:	60b9      	str	r1, [r7, #8]
 800a480:	4613      	mov	r3, r2
 800a482:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a484:	88fb      	ldrh	r3, [r7, #6]
 800a486:	68ba      	ldr	r2, [r7, #8]
 800a488:	2100      	movs	r1, #0
 800a48a:	68f8      	ldr	r0, [r7, #12]
 800a48c:	f000 fc73 	bl	800ad76 <USBD_LL_Transmit>

  return USBD_OK;
 800a490:	2300      	movs	r3, #0
}
 800a492:	4618      	mov	r0, r3
 800a494:	3710      	adds	r7, #16
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b084      	sub	sp, #16
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	60f8      	str	r0, [r7, #12]
 800a4a2:	60b9      	str	r1, [r7, #8]
 800a4a4:	4613      	mov	r3, r2
 800a4a6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2203      	movs	r2, #3
 800a4ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a4b0:	88fa      	ldrh	r2, [r7, #6]
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a4b8:	88fa      	ldrh	r2, [r7, #6]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4c0:	88fb      	ldrh	r3, [r7, #6]
 800a4c2:	68ba      	ldr	r2, [r7, #8]
 800a4c4:	2100      	movs	r1, #0
 800a4c6:	68f8      	ldr	r0, [r7, #12]
 800a4c8:	f000 fc78 	bl	800adbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4cc:	2300      	movs	r3, #0
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3710      	adds	r7, #16
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}

0800a4d6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	b084      	sub	sp, #16
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	60f8      	str	r0, [r7, #12]
 800a4de:	60b9      	str	r1, [r7, #8]
 800a4e0:	4613      	mov	r3, r2
 800a4e2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4e4:	88fb      	ldrh	r3, [r7, #6]
 800a4e6:	68ba      	ldr	r2, [r7, #8]
 800a4e8:	2100      	movs	r1, #0
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	f000 fc66 	bl	800adbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4f0:	2300      	movs	r3, #0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3710      	adds	r7, #16
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}

0800a4fa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a4fa:	b580      	push	{r7, lr}
 800a4fc:	b082      	sub	sp, #8
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2204      	movs	r2, #4
 800a506:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a50a:	2300      	movs	r3, #0
 800a50c:	2200      	movs	r2, #0
 800a50e:	2100      	movs	r1, #0
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f000 fc30 	bl	800ad76 <USBD_LL_Transmit>

  return USBD_OK;
 800a516:	2300      	movs	r3, #0
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3708      	adds	r7, #8
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b082      	sub	sp, #8
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2205      	movs	r2, #5
 800a52c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a530:	2300      	movs	r3, #0
 800a532:	2200      	movs	r2, #0
 800a534:	2100      	movs	r1, #0
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 fc40 	bl	800adbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3708      	adds	r7, #8
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
	...

0800a548 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a54c:	2200      	movs	r2, #0
 800a54e:	4912      	ldr	r1, [pc, #72]	; (800a598 <MX_USB_DEVICE_Init+0x50>)
 800a550:	4812      	ldr	r0, [pc, #72]	; (800a59c <MX_USB_DEVICE_Init+0x54>)
 800a552:	f7fe ff5e 	bl	8009412 <USBD_Init>
 800a556:	4603      	mov	r3, r0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d001      	beq.n	800a560 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a55c:	f7f7 fada 	bl	8001b14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a560:	490f      	ldr	r1, [pc, #60]	; (800a5a0 <MX_USB_DEVICE_Init+0x58>)
 800a562:	480e      	ldr	r0, [pc, #56]	; (800a59c <MX_USB_DEVICE_Init+0x54>)
 800a564:	f7fe ff80 	bl	8009468 <USBD_RegisterClass>
 800a568:	4603      	mov	r3, r0
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d001      	beq.n	800a572 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a56e:	f7f7 fad1 	bl	8001b14 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a572:	490c      	ldr	r1, [pc, #48]	; (800a5a4 <MX_USB_DEVICE_Init+0x5c>)
 800a574:	4809      	ldr	r0, [pc, #36]	; (800a59c <MX_USB_DEVICE_Init+0x54>)
 800a576:	f7fe feb1 	bl	80092dc <USBD_CDC_RegisterInterface>
 800a57a:	4603      	mov	r3, r0
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d001      	beq.n	800a584 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a580:	f7f7 fac8 	bl	8001b14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a584:	4805      	ldr	r0, [pc, #20]	; (800a59c <MX_USB_DEVICE_Init+0x54>)
 800a586:	f7fe ff88 	bl	800949a <USBD_Start>
 800a58a:	4603      	mov	r3, r0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d001      	beq.n	800a594 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a590:	f7f7 fac0 	bl	8001b14 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a594:	bf00      	nop
 800a596:	bd80      	pop	{r7, pc}
 800a598:	20000130 	.word	0x20000130
 800a59c:	200003f4 	.word	0x200003f4
 800a5a0:	2000001c 	.word	0x2000001c
 800a5a4:	20000120 	.word	0x20000120

0800a5a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	4905      	ldr	r1, [pc, #20]	; (800a5c4 <CDC_Init_FS+0x1c>)
 800a5b0:	4805      	ldr	r0, [pc, #20]	; (800a5c8 <CDC_Init_FS+0x20>)
 800a5b2:	f7fe fea9 	bl	8009308 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a5b6:	4905      	ldr	r1, [pc, #20]	; (800a5cc <CDC_Init_FS+0x24>)
 800a5b8:	4803      	ldr	r0, [pc, #12]	; (800a5c8 <CDC_Init_FS+0x20>)
 800a5ba:	f7fe febe 	bl	800933a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a5be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	bd80      	pop	{r7, pc}
 800a5c4:	20000aa0 	.word	0x20000aa0
 800a5c8:	200003f4 	.word	0x200003f4
 800a5cc:	200006b8 	.word	0x200006b8

0800a5d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a5d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bc80      	pop	{r7}
 800a5dc:	4770      	bx	lr
	...

0800a5e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b083      	sub	sp, #12
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	6039      	str	r1, [r7, #0]
 800a5ea:	71fb      	strb	r3, [r7, #7]
 800a5ec:	4613      	mov	r3, r2
 800a5ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a5f0:	79fb      	ldrb	r3, [r7, #7]
 800a5f2:	2b23      	cmp	r3, #35	; 0x23
 800a5f4:	d84a      	bhi.n	800a68c <CDC_Control_FS+0xac>
 800a5f6:	a201      	add	r2, pc, #4	; (adr r2, 800a5fc <CDC_Control_FS+0x1c>)
 800a5f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5fc:	0800a68d 	.word	0x0800a68d
 800a600:	0800a68d 	.word	0x0800a68d
 800a604:	0800a68d 	.word	0x0800a68d
 800a608:	0800a68d 	.word	0x0800a68d
 800a60c:	0800a68d 	.word	0x0800a68d
 800a610:	0800a68d 	.word	0x0800a68d
 800a614:	0800a68d 	.word	0x0800a68d
 800a618:	0800a68d 	.word	0x0800a68d
 800a61c:	0800a68d 	.word	0x0800a68d
 800a620:	0800a68d 	.word	0x0800a68d
 800a624:	0800a68d 	.word	0x0800a68d
 800a628:	0800a68d 	.word	0x0800a68d
 800a62c:	0800a68d 	.word	0x0800a68d
 800a630:	0800a68d 	.word	0x0800a68d
 800a634:	0800a68d 	.word	0x0800a68d
 800a638:	0800a68d 	.word	0x0800a68d
 800a63c:	0800a68d 	.word	0x0800a68d
 800a640:	0800a68d 	.word	0x0800a68d
 800a644:	0800a68d 	.word	0x0800a68d
 800a648:	0800a68d 	.word	0x0800a68d
 800a64c:	0800a68d 	.word	0x0800a68d
 800a650:	0800a68d 	.word	0x0800a68d
 800a654:	0800a68d 	.word	0x0800a68d
 800a658:	0800a68d 	.word	0x0800a68d
 800a65c:	0800a68d 	.word	0x0800a68d
 800a660:	0800a68d 	.word	0x0800a68d
 800a664:	0800a68d 	.word	0x0800a68d
 800a668:	0800a68d 	.word	0x0800a68d
 800a66c:	0800a68d 	.word	0x0800a68d
 800a670:	0800a68d 	.word	0x0800a68d
 800a674:	0800a68d 	.word	0x0800a68d
 800a678:	0800a68d 	.word	0x0800a68d
 800a67c:	0800a68d 	.word	0x0800a68d
 800a680:	0800a68d 	.word	0x0800a68d
 800a684:	0800a68d 	.word	0x0800a68d
 800a688:	0800a68d 	.word	0x0800a68d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a68c:	bf00      	nop
  }

  return (USBD_OK);
 800a68e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a690:	4618      	mov	r0, r3
 800a692:	370c      	adds	r7, #12
 800a694:	46bd      	mov	sp, r7
 800a696:	bc80      	pop	{r7}
 800a698:	4770      	bx	lr
 800a69a:	bf00      	nop

0800a69c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b084      	sub	sp, #16
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	uint8_t contador = 0;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	73fb      	strb	r3, [r7, #15]
	if(USB_FLAG == 0)
 800a6aa:	4b13      	ldr	r3, [pc, #76]	; (800a6f8 <CDC_Receive_FS+0x5c>)
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d11d      	bne.n	800a6ee <CDC_Receive_FS+0x52>
	{
	memset (buffer,'\0', 70);
 800a6b2:	2246      	movs	r2, #70	; 0x46
 800a6b4:	2100      	movs	r1, #0
 800a6b6:	4811      	ldr	r0, [pc, #68]	; (800a6fc <CDC_Receive_FS+0x60>)
 800a6b8:	f000 fc34 	bl	800af24 <memset>
	 USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a6bc:	6879      	ldr	r1, [r7, #4]
 800a6be:	4810      	ldr	r0, [pc, #64]	; (800a700 <CDC_Receive_FS+0x64>)
 800a6c0:	f7fe fe3b 	bl	800933a <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a6c4:	480e      	ldr	r0, [pc, #56]	; (800a700 <CDC_Receive_FS+0x64>)
 800a6c6:	f7fe fe7a 	bl	80093be <USBD_CDC_ReceivePacket>
	  uint8_t len = (uint8_t) *Len;
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	73bb      	strb	r3, [r7, #14]
	  memcpy (buffer,Buf,len);
 800a6d0:	7bbb      	ldrb	r3, [r7, #14]
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	6879      	ldr	r1, [r7, #4]
 800a6d6:	4809      	ldr	r0, [pc, #36]	; (800a6fc <CDC_Receive_FS+0x60>)
 800a6d8:	f000 fc16 	bl	800af08 <memcpy>
	  memset (Buf,'\0',len);
 800a6dc:	7bbb      	ldrb	r3, [r7, #14]
 800a6de:	461a      	mov	r2, r3
 800a6e0:	2100      	movs	r1, #0
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 fc1e 	bl	800af24 <memset>
	/*  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);*/
	  USB_FLAG = 1;
 800a6e8:	4b03      	ldr	r3, [pc, #12]	; (800a6f8 <CDC_Receive_FS+0x5c>)
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	701a      	strb	r2, [r3, #0]
	}
	return (USBD_OK);
 800a6ee:	2300      	movs	r3, #0


  /* USER CODE END 6 */
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3710      	adds	r7, #16
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}
 800a6f8:	20000326 	.word	0x20000326
 800a6fc:	20000270 	.word	0x20000270
 800a700:	200003f4 	.word	0x200003f4

0800a704 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	460b      	mov	r3, r1
 800a70e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a710:	2300      	movs	r3, #0
 800a712:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a714:	4b0d      	ldr	r3, [pc, #52]	; (800a74c <CDC_Transmit_FS+0x48>)
 800a716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a71a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a722:	2b00      	cmp	r3, #0
 800a724:	d001      	beq.n	800a72a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a726:	2301      	movs	r3, #1
 800a728:	e00b      	b.n	800a742 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a72a:	887b      	ldrh	r3, [r7, #2]
 800a72c:	461a      	mov	r2, r3
 800a72e:	6879      	ldr	r1, [r7, #4]
 800a730:	4806      	ldr	r0, [pc, #24]	; (800a74c <CDC_Transmit_FS+0x48>)
 800a732:	f7fe fde9 	bl	8009308 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a736:	4805      	ldr	r0, [pc, #20]	; (800a74c <CDC_Transmit_FS+0x48>)
 800a738:	f7fe fe12 	bl	8009360 <USBD_CDC_TransmitPacket>
 800a73c:	4603      	mov	r3, r0
 800a73e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a740:	7bfb      	ldrb	r3, [r7, #15]
}
 800a742:	4618      	mov	r0, r3
 800a744:	3710      	adds	r7, #16
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	bf00      	nop
 800a74c:	200003f4 	.word	0x200003f4

0800a750 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a750:	b480      	push	{r7}
 800a752:	b083      	sub	sp, #12
 800a754:	af00      	add	r7, sp, #0
 800a756:	4603      	mov	r3, r0
 800a758:	6039      	str	r1, [r7, #0]
 800a75a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	2212      	movs	r2, #18
 800a760:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a762:	4b03      	ldr	r3, [pc, #12]	; (800a770 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a764:	4618      	mov	r0, r3
 800a766:	370c      	adds	r7, #12
 800a768:	46bd      	mov	sp, r7
 800a76a:	bc80      	pop	{r7}
 800a76c:	4770      	bx	lr
 800a76e:	bf00      	nop
 800a770:	2000014c 	.word	0x2000014c

0800a774 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a774:	b480      	push	{r7}
 800a776:	b083      	sub	sp, #12
 800a778:	af00      	add	r7, sp, #0
 800a77a:	4603      	mov	r3, r0
 800a77c:	6039      	str	r1, [r7, #0]
 800a77e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	2204      	movs	r2, #4
 800a784:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a786:	4b03      	ldr	r3, [pc, #12]	; (800a794 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a788:	4618      	mov	r0, r3
 800a78a:	370c      	adds	r7, #12
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bc80      	pop	{r7}
 800a790:	4770      	bx	lr
 800a792:	bf00      	nop
 800a794:	20000160 	.word	0x20000160

0800a798 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	4603      	mov	r3, r0
 800a7a0:	6039      	str	r1, [r7, #0]
 800a7a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a7a4:	79fb      	ldrb	r3, [r7, #7]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d105      	bne.n	800a7b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a7aa:	683a      	ldr	r2, [r7, #0]
 800a7ac:	4907      	ldr	r1, [pc, #28]	; (800a7cc <USBD_FS_ProductStrDescriptor+0x34>)
 800a7ae:	4808      	ldr	r0, [pc, #32]	; (800a7d0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a7b0:	f7ff fdec 	bl	800a38c <USBD_GetString>
 800a7b4:	e004      	b.n	800a7c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a7b6:	683a      	ldr	r2, [r7, #0]
 800a7b8:	4904      	ldr	r1, [pc, #16]	; (800a7cc <USBD_FS_ProductStrDescriptor+0x34>)
 800a7ba:	4805      	ldr	r0, [pc, #20]	; (800a7d0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a7bc:	f7ff fde6 	bl	800a38c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7c0:	4b02      	ldr	r3, [pc, #8]	; (800a7cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3708      	adds	r7, #8
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}
 800a7ca:	bf00      	nop
 800a7cc:	20000e88 	.word	0x20000e88
 800a7d0:	0800af5c 	.word	0x0800af5c

0800a7d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	4603      	mov	r3, r0
 800a7dc:	6039      	str	r1, [r7, #0]
 800a7de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a7e0:	683a      	ldr	r2, [r7, #0]
 800a7e2:	4904      	ldr	r1, [pc, #16]	; (800a7f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a7e4:	4804      	ldr	r0, [pc, #16]	; (800a7f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a7e6:	f7ff fdd1 	bl	800a38c <USBD_GetString>
  return USBD_StrDesc;
 800a7ea:	4b02      	ldr	r3, [pc, #8]	; (800a7f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3708      	adds	r7, #8
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}
 800a7f4:	20000e88 	.word	0x20000e88
 800a7f8:	0800af74 	.word	0x0800af74

0800a7fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b082      	sub	sp, #8
 800a800:	af00      	add	r7, sp, #0
 800a802:	4603      	mov	r3, r0
 800a804:	6039      	str	r1, [r7, #0]
 800a806:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	221a      	movs	r2, #26
 800a80c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a80e:	f000 f843 	bl	800a898 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a812:	4b02      	ldr	r3, [pc, #8]	; (800a81c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a814:	4618      	mov	r0, r3
 800a816:	3708      	adds	r7, #8
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	20000164 	.word	0x20000164

0800a820 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b082      	sub	sp, #8
 800a824:	af00      	add	r7, sp, #0
 800a826:	4603      	mov	r3, r0
 800a828:	6039      	str	r1, [r7, #0]
 800a82a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a82c:	79fb      	ldrb	r3, [r7, #7]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d105      	bne.n	800a83e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a832:	683a      	ldr	r2, [r7, #0]
 800a834:	4907      	ldr	r1, [pc, #28]	; (800a854 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a836:	4808      	ldr	r0, [pc, #32]	; (800a858 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a838:	f7ff fda8 	bl	800a38c <USBD_GetString>
 800a83c:	e004      	b.n	800a848 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a83e:	683a      	ldr	r2, [r7, #0]
 800a840:	4904      	ldr	r1, [pc, #16]	; (800a854 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a842:	4805      	ldr	r0, [pc, #20]	; (800a858 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a844:	f7ff fda2 	bl	800a38c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a848:	4b02      	ldr	r3, [pc, #8]	; (800a854 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3708      	adds	r7, #8
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
 800a852:	bf00      	nop
 800a854:	20000e88 	.word	0x20000e88
 800a858:	0800af88 	.word	0x0800af88

0800a85c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	4603      	mov	r3, r0
 800a864:	6039      	str	r1, [r7, #0]
 800a866:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a868:	79fb      	ldrb	r3, [r7, #7]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d105      	bne.n	800a87a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a86e:	683a      	ldr	r2, [r7, #0]
 800a870:	4907      	ldr	r1, [pc, #28]	; (800a890 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a872:	4808      	ldr	r0, [pc, #32]	; (800a894 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a874:	f7ff fd8a 	bl	800a38c <USBD_GetString>
 800a878:	e004      	b.n	800a884 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a87a:	683a      	ldr	r2, [r7, #0]
 800a87c:	4904      	ldr	r1, [pc, #16]	; (800a890 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a87e:	4805      	ldr	r0, [pc, #20]	; (800a894 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a880:	f7ff fd84 	bl	800a38c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a884:	4b02      	ldr	r3, [pc, #8]	; (800a890 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a886:	4618      	mov	r0, r3
 800a888:	3708      	adds	r7, #8
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	bf00      	nop
 800a890:	20000e88 	.word	0x20000e88
 800a894:	0800af94 	.word	0x0800af94

0800a898 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b084      	sub	sp, #16
 800a89c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a89e:	4b0f      	ldr	r3, [pc, #60]	; (800a8dc <Get_SerialNum+0x44>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a8a4:	4b0e      	ldr	r3, [pc, #56]	; (800a8e0 <Get_SerialNum+0x48>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a8aa:	4b0e      	ldr	r3, [pc, #56]	; (800a8e4 <Get_SerialNum+0x4c>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a8b0:	68fa      	ldr	r2, [r7, #12]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	4413      	add	r3, r2
 800a8b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d009      	beq.n	800a8d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a8be:	2208      	movs	r2, #8
 800a8c0:	4909      	ldr	r1, [pc, #36]	; (800a8e8 <Get_SerialNum+0x50>)
 800a8c2:	68f8      	ldr	r0, [r7, #12]
 800a8c4:	f000 f814 	bl	800a8f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a8c8:	2204      	movs	r2, #4
 800a8ca:	4908      	ldr	r1, [pc, #32]	; (800a8ec <Get_SerialNum+0x54>)
 800a8cc:	68b8      	ldr	r0, [r7, #8]
 800a8ce:	f000 f80f 	bl	800a8f0 <IntToUnicode>
  }
}
 800a8d2:	bf00      	nop
 800a8d4:	3710      	adds	r7, #16
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	1ffff7e8 	.word	0x1ffff7e8
 800a8e0:	1ffff7ec 	.word	0x1ffff7ec
 800a8e4:	1ffff7f0 	.word	0x1ffff7f0
 800a8e8:	20000166 	.word	0x20000166
 800a8ec:	20000176 	.word	0x20000176

0800a8f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b087      	sub	sp, #28
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	60f8      	str	r0, [r7, #12]
 800a8f8:	60b9      	str	r1, [r7, #8]
 800a8fa:	4613      	mov	r3, r2
 800a8fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a8fe:	2300      	movs	r3, #0
 800a900:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a902:	2300      	movs	r3, #0
 800a904:	75fb      	strb	r3, [r7, #23]
 800a906:	e027      	b.n	800a958 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	0f1b      	lsrs	r3, r3, #28
 800a90c:	2b09      	cmp	r3, #9
 800a90e:	d80b      	bhi.n	800a928 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	0f1b      	lsrs	r3, r3, #28
 800a914:	b2da      	uxtb	r2, r3
 800a916:	7dfb      	ldrb	r3, [r7, #23]
 800a918:	005b      	lsls	r3, r3, #1
 800a91a:	4619      	mov	r1, r3
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	440b      	add	r3, r1
 800a920:	3230      	adds	r2, #48	; 0x30
 800a922:	b2d2      	uxtb	r2, r2
 800a924:	701a      	strb	r2, [r3, #0]
 800a926:	e00a      	b.n	800a93e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	0f1b      	lsrs	r3, r3, #28
 800a92c:	b2da      	uxtb	r2, r3
 800a92e:	7dfb      	ldrb	r3, [r7, #23]
 800a930:	005b      	lsls	r3, r3, #1
 800a932:	4619      	mov	r1, r3
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	440b      	add	r3, r1
 800a938:	3237      	adds	r2, #55	; 0x37
 800a93a:	b2d2      	uxtb	r2, r2
 800a93c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	011b      	lsls	r3, r3, #4
 800a942:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a944:	7dfb      	ldrb	r3, [r7, #23]
 800a946:	005b      	lsls	r3, r3, #1
 800a948:	3301      	adds	r3, #1
 800a94a:	68ba      	ldr	r2, [r7, #8]
 800a94c:	4413      	add	r3, r2
 800a94e:	2200      	movs	r2, #0
 800a950:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a952:	7dfb      	ldrb	r3, [r7, #23]
 800a954:	3301      	adds	r3, #1
 800a956:	75fb      	strb	r3, [r7, #23]
 800a958:	7dfa      	ldrb	r2, [r7, #23]
 800a95a:	79fb      	ldrb	r3, [r7, #7]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d3d3      	bcc.n	800a908 <IntToUnicode+0x18>
  }
}
 800a960:	bf00      	nop
 800a962:	bf00      	nop
 800a964:	371c      	adds	r7, #28
 800a966:	46bd      	mov	sp, r7
 800a968:	bc80      	pop	{r7}
 800a96a:	4770      	bx	lr

0800a96c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	4a0d      	ldr	r2, [pc, #52]	; (800a9b0 <HAL_PCD_MspInit+0x44>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d113      	bne.n	800a9a6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a97e:	4b0d      	ldr	r3, [pc, #52]	; (800a9b4 <HAL_PCD_MspInit+0x48>)
 800a980:	69db      	ldr	r3, [r3, #28]
 800a982:	4a0c      	ldr	r2, [pc, #48]	; (800a9b4 <HAL_PCD_MspInit+0x48>)
 800a984:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a988:	61d3      	str	r3, [r2, #28]
 800a98a:	4b0a      	ldr	r3, [pc, #40]	; (800a9b4 <HAL_PCD_MspInit+0x48>)
 800a98c:	69db      	ldr	r3, [r3, #28]
 800a98e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a992:	60fb      	str	r3, [r7, #12]
 800a994:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a996:	2200      	movs	r2, #0
 800a998:	2100      	movs	r1, #0
 800a99a:	2014      	movs	r0, #20
 800a99c:	f7f7 fb7d 	bl	800209a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a9a0:	2014      	movs	r0, #20
 800a9a2:	f7f7 fb96 	bl	80020d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a9a6:	bf00      	nop
 800a9a8:	3710      	adds	r7, #16
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	40005c00 	.word	0x40005c00
 800a9b4:	40021000 	.word	0x40021000

0800a9b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	4610      	mov	r0, r2
 800a9d0:	f7fe fdab 	bl	800952a <USBD_LL_SetupStage>
}
 800a9d4:	bf00      	nop
 800a9d6:	3708      	adds	r7, #8
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b082      	sub	sp, #8
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a9ee:	78fa      	ldrb	r2, [r7, #3]
 800a9f0:	6879      	ldr	r1, [r7, #4]
 800a9f2:	4613      	mov	r3, r2
 800a9f4:	009b      	lsls	r3, r3, #2
 800a9f6:	4413      	add	r3, r2
 800a9f8:	00db      	lsls	r3, r3, #3
 800a9fa:	440b      	add	r3, r1
 800a9fc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800aa00:	681a      	ldr	r2, [r3, #0]
 800aa02:	78fb      	ldrb	r3, [r7, #3]
 800aa04:	4619      	mov	r1, r3
 800aa06:	f7fe fddd 	bl	80095c4 <USBD_LL_DataOutStage>
}
 800aa0a:	bf00      	nop
 800aa0c:	3708      	adds	r7, #8
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}

0800aa12 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa12:	b580      	push	{r7, lr}
 800aa14:	b082      	sub	sp, #8
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
 800aa1a:	460b      	mov	r3, r1
 800aa1c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800aa24:	78fa      	ldrb	r2, [r7, #3]
 800aa26:	6879      	ldr	r1, [r7, #4]
 800aa28:	4613      	mov	r3, r2
 800aa2a:	009b      	lsls	r3, r3, #2
 800aa2c:	4413      	add	r3, r2
 800aa2e:	00db      	lsls	r3, r3, #3
 800aa30:	440b      	add	r3, r1
 800aa32:	333c      	adds	r3, #60	; 0x3c
 800aa34:	681a      	ldr	r2, [r3, #0]
 800aa36:	78fb      	ldrb	r3, [r7, #3]
 800aa38:	4619      	mov	r1, r3
 800aa3a:	f7fe fe34 	bl	80096a6 <USBD_LL_DataInStage>
}
 800aa3e:	bf00      	nop
 800aa40:	3708      	adds	r7, #8
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}

0800aa46 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa46:	b580      	push	{r7, lr}
 800aa48:	b082      	sub	sp, #8
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7fe ff44 	bl	80098e2 <USBD_LL_SOF>
}
 800aa5a:	bf00      	nop
 800aa5c:	3708      	adds	r7, #8
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}

0800aa62 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b084      	sub	sp, #16
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	689b      	ldr	r3, [r3, #8]
 800aa72:	2b02      	cmp	r3, #2
 800aa74:	d001      	beq.n	800aa7a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aa76:	f7f7 f84d 	bl	8001b14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aa80:	7bfa      	ldrb	r2, [r7, #15]
 800aa82:	4611      	mov	r1, r2
 800aa84:	4618      	mov	r0, r3
 800aa86:	f7fe fef4 	bl	8009872 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aa90:	4618      	mov	r0, r3
 800aa92:	f7fe fead 	bl	80097f0 <USBD_LL_Reset>
}
 800aa96:	bf00      	nop
 800aa98:	3710      	adds	r7, #16
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
	...

0800aaa0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b082      	sub	sp, #8
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aaae:	4618      	mov	r0, r3
 800aab0:	f7fe feee 	bl	8009890 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	699b      	ldr	r3, [r3, #24]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d005      	beq.n	800aac8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aabc:	4b04      	ldr	r3, [pc, #16]	; (800aad0 <HAL_PCD_SuspendCallback+0x30>)
 800aabe:	691b      	ldr	r3, [r3, #16]
 800aac0:	4a03      	ldr	r2, [pc, #12]	; (800aad0 <HAL_PCD_SuspendCallback+0x30>)
 800aac2:	f043 0306 	orr.w	r3, r3, #6
 800aac6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aac8:	bf00      	nop
 800aaca:	3708      	adds	r7, #8
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}
 800aad0:	e000ed00 	.word	0xe000ed00

0800aad4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b082      	sub	sp, #8
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7fe fee8 	bl	80098b8 <USBD_LL_Resume>
}
 800aae8:	bf00      	nop
 800aaea:	3708      	adds	r7, #8
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b082      	sub	sp, #8
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800aaf8:	4a28      	ldr	r2, [pc, #160]	; (800ab9c <USBD_LL_Init+0xac>)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	4a26      	ldr	r2, [pc, #152]	; (800ab9c <USBD_LL_Init+0xac>)
 800ab04:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ab08:	4b24      	ldr	r3, [pc, #144]	; (800ab9c <USBD_LL_Init+0xac>)
 800ab0a:	4a25      	ldr	r2, [pc, #148]	; (800aba0 <USBD_LL_Init+0xb0>)
 800ab0c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ab0e:	4b23      	ldr	r3, [pc, #140]	; (800ab9c <USBD_LL_Init+0xac>)
 800ab10:	2208      	movs	r2, #8
 800ab12:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ab14:	4b21      	ldr	r3, [pc, #132]	; (800ab9c <USBD_LL_Init+0xac>)
 800ab16:	2202      	movs	r2, #2
 800ab18:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ab1a:	4b20      	ldr	r3, [pc, #128]	; (800ab9c <USBD_LL_Init+0xac>)
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ab20:	4b1e      	ldr	r3, [pc, #120]	; (800ab9c <USBD_LL_Init+0xac>)
 800ab22:	2200      	movs	r2, #0
 800ab24:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ab26:	4b1d      	ldr	r3, [pc, #116]	; (800ab9c <USBD_LL_Init+0xac>)
 800ab28:	2200      	movs	r2, #0
 800ab2a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ab2c:	481b      	ldr	r0, [pc, #108]	; (800ab9c <USBD_LL_Init+0xac>)
 800ab2e:	f7f7 ff95 	bl	8002a5c <HAL_PCD_Init>
 800ab32:	4603      	mov	r3, r0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d001      	beq.n	800ab3c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ab38:	f7f6 ffec 	bl	8001b14 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab42:	2318      	movs	r3, #24
 800ab44:	2200      	movs	r2, #0
 800ab46:	2100      	movs	r1, #0
 800ab48:	f7f9 fc09 	bl	800435e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab52:	2358      	movs	r3, #88	; 0x58
 800ab54:	2200      	movs	r2, #0
 800ab56:	2180      	movs	r1, #128	; 0x80
 800ab58:	f7f9 fc01 	bl	800435e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab62:	23c0      	movs	r3, #192	; 0xc0
 800ab64:	2200      	movs	r2, #0
 800ab66:	2181      	movs	r1, #129	; 0x81
 800ab68:	f7f9 fbf9 	bl	800435e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab72:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ab76:	2200      	movs	r2, #0
 800ab78:	2101      	movs	r1, #1
 800ab7a:	f7f9 fbf0 	bl	800435e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab84:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab88:	2200      	movs	r2, #0
 800ab8a:	2182      	movs	r1, #130	; 0x82
 800ab8c:	f7f9 fbe7 	bl	800435e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ab90:	2300      	movs	r3, #0
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3708      	adds	r7, #8
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	20001088 	.word	0x20001088
 800aba0:	40005c00 	.word	0x40005c00

0800aba4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abac:	2300      	movs	r3, #0
 800abae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abb0:	2300      	movs	r3, #0
 800abb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abba:	4618      	mov	r0, r3
 800abbc:	f7f8 f859 	bl	8002c72 <HAL_PCD_Start>
 800abc0:	4603      	mov	r3, r0
 800abc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abc4:	7bfb      	ldrb	r3, [r7, #15]
 800abc6:	4618      	mov	r0, r3
 800abc8:	f000 f94e 	bl	800ae68 <USBD_Get_USB_Status>
 800abcc:	4603      	mov	r3, r0
 800abce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abd0:	7bbb      	ldrb	r3, [r7, #14]
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3710      	adds	r7, #16
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}

0800abda <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800abda:	b580      	push	{r7, lr}
 800abdc:	b084      	sub	sp, #16
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
 800abe2:	4608      	mov	r0, r1
 800abe4:	4611      	mov	r1, r2
 800abe6:	461a      	mov	r2, r3
 800abe8:	4603      	mov	r3, r0
 800abea:	70fb      	strb	r3, [r7, #3]
 800abec:	460b      	mov	r3, r1
 800abee:	70bb      	strb	r3, [r7, #2]
 800abf0:	4613      	mov	r3, r2
 800abf2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abf4:	2300      	movs	r3, #0
 800abf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abf8:	2300      	movs	r3, #0
 800abfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac02:	78bb      	ldrb	r3, [r7, #2]
 800ac04:	883a      	ldrh	r2, [r7, #0]
 800ac06:	78f9      	ldrb	r1, [r7, #3]
 800ac08:	f7f8 f9d1 	bl	8002fae <HAL_PCD_EP_Open>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac10:	7bfb      	ldrb	r3, [r7, #15]
 800ac12:	4618      	mov	r0, r3
 800ac14:	f000 f928 	bl	800ae68 <USBD_Get_USB_Status>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3710      	adds	r7, #16
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}

0800ac26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac26:	b580      	push	{r7, lr}
 800ac28:	b084      	sub	sp, #16
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	6078      	str	r0, [r7, #4]
 800ac2e:	460b      	mov	r3, r1
 800ac30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac32:	2300      	movs	r3, #0
 800ac34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac36:	2300      	movs	r3, #0
 800ac38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac40:	78fa      	ldrb	r2, [r7, #3]
 800ac42:	4611      	mov	r1, r2
 800ac44:	4618      	mov	r0, r3
 800ac46:	f7f8 fa18 	bl	800307a <HAL_PCD_EP_Close>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac4e:	7bfb      	ldrb	r3, [r7, #15]
 800ac50:	4618      	mov	r0, r3
 800ac52:	f000 f909 	bl	800ae68 <USBD_Get_USB_Status>
 800ac56:	4603      	mov	r3, r0
 800ac58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3710      	adds	r7, #16
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac70:	2300      	movs	r3, #0
 800ac72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac74:	2300      	movs	r3, #0
 800ac76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac7e:	78fa      	ldrb	r2, [r7, #3]
 800ac80:	4611      	mov	r1, r2
 800ac82:	4618      	mov	r0, r3
 800ac84:	f7f8 fad8 	bl	8003238 <HAL_PCD_EP_SetStall>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac8c:	7bfb      	ldrb	r3, [r7, #15]
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f000 f8ea 	bl	800ae68 <USBD_Get_USB_Status>
 800ac94:	4603      	mov	r3, r0
 800ac96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac98:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3710      	adds	r7, #16
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}

0800aca2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aca2:	b580      	push	{r7, lr}
 800aca4:	b084      	sub	sp, #16
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	6078      	str	r0, [r7, #4]
 800acaa:	460b      	mov	r3, r1
 800acac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acae:	2300      	movs	r3, #0
 800acb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acb2:	2300      	movs	r3, #0
 800acb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800acbc:	78fa      	ldrb	r2, [r7, #3]
 800acbe:	4611      	mov	r1, r2
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7f8 fb19 	bl	80032f8 <HAL_PCD_EP_ClrStall>
 800acc6:	4603      	mov	r3, r0
 800acc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acca:	7bfb      	ldrb	r3, [r7, #15]
 800accc:	4618      	mov	r0, r3
 800acce:	f000 f8cb 	bl	800ae68 <USBD_Get_USB_Status>
 800acd2:	4603      	mov	r3, r0
 800acd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acd6:	7bbb      	ldrb	r3, [r7, #14]
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3710      	adds	r7, #16
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}

0800ace0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b085      	sub	sp, #20
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	460b      	mov	r3, r1
 800acea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800acf2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800acf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	da0c      	bge.n	800ad16 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800acfc:	78fb      	ldrb	r3, [r7, #3]
 800acfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad02:	68f9      	ldr	r1, [r7, #12]
 800ad04:	1c5a      	adds	r2, r3, #1
 800ad06:	4613      	mov	r3, r2
 800ad08:	009b      	lsls	r3, r3, #2
 800ad0a:	4413      	add	r3, r2
 800ad0c:	00db      	lsls	r3, r3, #3
 800ad0e:	440b      	add	r3, r1
 800ad10:	3302      	adds	r3, #2
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	e00b      	b.n	800ad2e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ad16:	78fb      	ldrb	r3, [r7, #3]
 800ad18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad1c:	68f9      	ldr	r1, [r7, #12]
 800ad1e:	4613      	mov	r3, r2
 800ad20:	009b      	lsls	r3, r3, #2
 800ad22:	4413      	add	r3, r2
 800ad24:	00db      	lsls	r3, r3, #3
 800ad26:	440b      	add	r3, r1
 800ad28:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ad2c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3714      	adds	r7, #20
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bc80      	pop	{r7}
 800ad36:	4770      	bx	lr

0800ad38 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	460b      	mov	r3, r1
 800ad42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad44:	2300      	movs	r3, #0
 800ad46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad52:	78fa      	ldrb	r2, [r7, #3]
 800ad54:	4611      	mov	r1, r2
 800ad56:	4618      	mov	r0, r3
 800ad58:	f7f8 f904 	bl	8002f64 <HAL_PCD_SetAddress>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad60:	7bfb      	ldrb	r3, [r7, #15]
 800ad62:	4618      	mov	r0, r3
 800ad64:	f000 f880 	bl	800ae68 <USBD_Get_USB_Status>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3710      	adds	r7, #16
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}

0800ad76 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ad76:	b580      	push	{r7, lr}
 800ad78:	b086      	sub	sp, #24
 800ad7a:	af00      	add	r7, sp, #0
 800ad7c:	60f8      	str	r0, [r7, #12]
 800ad7e:	607a      	str	r2, [r7, #4]
 800ad80:	461a      	mov	r2, r3
 800ad82:	460b      	mov	r3, r1
 800ad84:	72fb      	strb	r3, [r7, #11]
 800ad86:	4613      	mov	r3, r2
 800ad88:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ad98:	893b      	ldrh	r3, [r7, #8]
 800ad9a:	7af9      	ldrb	r1, [r7, #11]
 800ad9c:	687a      	ldr	r2, [r7, #4]
 800ad9e:	f7f8 fa08 	bl	80031b2 <HAL_PCD_EP_Transmit>
 800ada2:	4603      	mov	r3, r0
 800ada4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ada6:	7dfb      	ldrb	r3, [r7, #23]
 800ada8:	4618      	mov	r0, r3
 800adaa:	f000 f85d 	bl	800ae68 <USBD_Get_USB_Status>
 800adae:	4603      	mov	r3, r0
 800adb0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800adb2:	7dbb      	ldrb	r3, [r7, #22]
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3718      	adds	r7, #24
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}

0800adbc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b086      	sub	sp, #24
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	60f8      	str	r0, [r7, #12]
 800adc4:	607a      	str	r2, [r7, #4]
 800adc6:	461a      	mov	r2, r3
 800adc8:	460b      	mov	r3, r1
 800adca:	72fb      	strb	r3, [r7, #11]
 800adcc:	4613      	mov	r3, r2
 800adce:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800add0:	2300      	movs	r3, #0
 800add2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800add4:	2300      	movs	r3, #0
 800add6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800adde:	893b      	ldrh	r3, [r7, #8]
 800ade0:	7af9      	ldrb	r1, [r7, #11]
 800ade2:	687a      	ldr	r2, [r7, #4]
 800ade4:	f7f8 f991 	bl	800310a <HAL_PCD_EP_Receive>
 800ade8:	4603      	mov	r3, r0
 800adea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adec:	7dfb      	ldrb	r3, [r7, #23]
 800adee:	4618      	mov	r0, r3
 800adf0:	f000 f83a 	bl	800ae68 <USBD_Get_USB_Status>
 800adf4:	4603      	mov	r3, r0
 800adf6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800adf8:	7dbb      	ldrb	r3, [r7, #22]
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3718      	adds	r7, #24
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}

0800ae02 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae02:	b580      	push	{r7, lr}
 800ae04:	b082      	sub	sp, #8
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	6078      	str	r0, [r7, #4]
 800ae0a:	460b      	mov	r3, r1
 800ae0c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae14:	78fa      	ldrb	r2, [r7, #3]
 800ae16:	4611      	mov	r1, r2
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f7f8 f9b3 	bl	8003184 <HAL_PCD_EP_GetRxCount>
 800ae1e:	4603      	mov	r3, r0
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3708      	adds	r7, #8
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b083      	sub	sp, #12
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ae30:	4b02      	ldr	r3, [pc, #8]	; (800ae3c <USBD_static_malloc+0x14>)
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	370c      	adds	r7, #12
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bc80      	pop	{r7}
 800ae3a:	4770      	bx	lr
 800ae3c:	20001374 	.word	0x20001374

0800ae40 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b083      	sub	sp, #12
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]

}
 800ae48:	bf00      	nop
 800ae4a:	370c      	adds	r7, #12
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bc80      	pop	{r7}
 800ae50:	4770      	bx	lr

0800ae52 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae52:	b480      	push	{r7}
 800ae54:	b083      	sub	sp, #12
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ae5e:	bf00      	nop
 800ae60:	370c      	adds	r7, #12
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bc80      	pop	{r7}
 800ae66:	4770      	bx	lr

0800ae68 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b085      	sub	sp, #20
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	4603      	mov	r3, r0
 800ae70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae72:	2300      	movs	r3, #0
 800ae74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ae76:	79fb      	ldrb	r3, [r7, #7]
 800ae78:	2b03      	cmp	r3, #3
 800ae7a:	d817      	bhi.n	800aeac <USBD_Get_USB_Status+0x44>
 800ae7c:	a201      	add	r2, pc, #4	; (adr r2, 800ae84 <USBD_Get_USB_Status+0x1c>)
 800ae7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae82:	bf00      	nop
 800ae84:	0800ae95 	.word	0x0800ae95
 800ae88:	0800ae9b 	.word	0x0800ae9b
 800ae8c:	0800aea1 	.word	0x0800aea1
 800ae90:	0800aea7 	.word	0x0800aea7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ae94:	2300      	movs	r3, #0
 800ae96:	73fb      	strb	r3, [r7, #15]
    break;
 800ae98:	e00b      	b.n	800aeb2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ae9a:	2302      	movs	r3, #2
 800ae9c:	73fb      	strb	r3, [r7, #15]
    break;
 800ae9e:	e008      	b.n	800aeb2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aea0:	2301      	movs	r3, #1
 800aea2:	73fb      	strb	r3, [r7, #15]
    break;
 800aea4:	e005      	b.n	800aeb2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aea6:	2302      	movs	r3, #2
 800aea8:	73fb      	strb	r3, [r7, #15]
    break;
 800aeaa:	e002      	b.n	800aeb2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aeac:	2302      	movs	r3, #2
 800aeae:	73fb      	strb	r3, [r7, #15]
    break;
 800aeb0:	bf00      	nop
  }
  return usb_status;
 800aeb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3714      	adds	r7, #20
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bc80      	pop	{r7}
 800aebc:	4770      	bx	lr
 800aebe:	bf00      	nop

0800aec0 <__libc_init_array>:
 800aec0:	b570      	push	{r4, r5, r6, lr}
 800aec2:	2600      	movs	r6, #0
 800aec4:	4d0c      	ldr	r5, [pc, #48]	; (800aef8 <__libc_init_array+0x38>)
 800aec6:	4c0d      	ldr	r4, [pc, #52]	; (800aefc <__libc_init_array+0x3c>)
 800aec8:	1b64      	subs	r4, r4, r5
 800aeca:	10a4      	asrs	r4, r4, #2
 800aecc:	42a6      	cmp	r6, r4
 800aece:	d109      	bne.n	800aee4 <__libc_init_array+0x24>
 800aed0:	f000 f830 	bl	800af34 <_init>
 800aed4:	2600      	movs	r6, #0
 800aed6:	4d0a      	ldr	r5, [pc, #40]	; (800af00 <__libc_init_array+0x40>)
 800aed8:	4c0a      	ldr	r4, [pc, #40]	; (800af04 <__libc_init_array+0x44>)
 800aeda:	1b64      	subs	r4, r4, r5
 800aedc:	10a4      	asrs	r4, r4, #2
 800aede:	42a6      	cmp	r6, r4
 800aee0:	d105      	bne.n	800aeee <__libc_init_array+0x2e>
 800aee2:	bd70      	pop	{r4, r5, r6, pc}
 800aee4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aee8:	4798      	blx	r3
 800aeea:	3601      	adds	r6, #1
 800aeec:	e7ee      	b.n	800aecc <__libc_init_array+0xc>
 800aeee:	f855 3b04 	ldr.w	r3, [r5], #4
 800aef2:	4798      	blx	r3
 800aef4:	3601      	adds	r6, #1
 800aef6:	e7f2      	b.n	800aede <__libc_init_array+0x1e>
 800aef8:	0800afbc 	.word	0x0800afbc
 800aefc:	0800afbc 	.word	0x0800afbc
 800af00:	0800afbc 	.word	0x0800afbc
 800af04:	0800afc0 	.word	0x0800afc0

0800af08 <memcpy>:
 800af08:	440a      	add	r2, r1
 800af0a:	4291      	cmp	r1, r2
 800af0c:	f100 33ff 	add.w	r3, r0, #4294967295
 800af10:	d100      	bne.n	800af14 <memcpy+0xc>
 800af12:	4770      	bx	lr
 800af14:	b510      	push	{r4, lr}
 800af16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af1a:	4291      	cmp	r1, r2
 800af1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af20:	d1f9      	bne.n	800af16 <memcpy+0xe>
 800af22:	bd10      	pop	{r4, pc}

0800af24 <memset>:
 800af24:	4603      	mov	r3, r0
 800af26:	4402      	add	r2, r0
 800af28:	4293      	cmp	r3, r2
 800af2a:	d100      	bne.n	800af2e <memset+0xa>
 800af2c:	4770      	bx	lr
 800af2e:	f803 1b01 	strb.w	r1, [r3], #1
 800af32:	e7f9      	b.n	800af28 <memset+0x4>

0800af34 <_init>:
 800af34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af36:	bf00      	nop
 800af38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af3a:	bc08      	pop	{r3}
 800af3c:	469e      	mov	lr, r3
 800af3e:	4770      	bx	lr

0800af40 <_fini>:
 800af40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af42:	bf00      	nop
 800af44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af46:	bc08      	pop	{r3}
 800af48:	469e      	mov	lr, r3
 800af4a:	4770      	bx	lr
