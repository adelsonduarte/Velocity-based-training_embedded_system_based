
Encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae50  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800af5c  0800af5c  0001af5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afcc  0800afcc  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  0800afcc  0800afcc  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800afcc  0800afcc  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afcc  0800afcc  0001afcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800afd0  0800afd0  0001afd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800afd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001464  20000180  0800b154  00020180  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200015e4  0800b154  000215e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e6d  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ab4  00000000  00000000  00036016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001478  00000000  00000000  00039ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f0  00000000  00000000  0003af48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b3c6  00000000  00000000  0003c238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000183ad  00000000  00000000  000575fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090056  00000000  00000000  0006f9ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ffa01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054cc  00000000  00000000  000ffa54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000180 	.word	0x20000180
 8000128:	00000000 	.word	0x00000000
 800012c:	0800af44 	.word	0x0800af44

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000184 	.word	0x20000184
 8000148:	0800af44 	.word	0x0800af44

0800014c <FLASH_apaga>:
  * @param  Endereço:	  Endereço inicial da página que deseja ser apagada
  * @param  Paginas:      Quantidade de páginas que deseja apagar a partir do endereço inicial.
  *
  * @retval Void
  */
void FLASH_apaga(uint32_t endereco, uint8_t paginas){
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	70fb      	strb	r3, [r7, #3]
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8000158:	f002 f908 	bl	800236c <HAL_FLASH_Unlock>

	/* Allow Access to option bytes sector */
	HAL_FLASH_OB_Unlock();
 800015c:	f002 f93c 	bl	80023d8 <HAL_FLASH_OB_Unlock>

	/* Fill EraseInit structure*/
	FLASH_EraseInitTypeDef EraseInitStruct;			    // cria estrutura de dados para armazenar informações de apagamento
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;  // definição padrão da biblioteca HAL
 8000160:	2300      	movs	r3, #0
 8000162:	613b      	str	r3, [r7, #16]
	EraseInitStruct.PageAddress = endereco;				// definição do usuário do endereço da página que deseja apagar
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.NbPages = paginas;					// número de páginas que serão apagadas
 8000168:	78fb      	ldrb	r3, [r7, #3]
 800016a:	61fb      	str	r3, [r7, #28]

	uint32_t PageError;									// Valor do endereço caso ocorra erro no apagamento da função HAL_FLASHEx_Erase
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK){
 800016c:	f107 020c 	add.w	r2, r7, #12
 8000170:	f107 0310 	add.w	r3, r7, #16
 8000174:	4611      	mov	r1, r2
 8000176:	4618      	mov	r0, r3
 8000178:	f002 fa0c 	bl	8002594 <HAL_FLASHEx_Erase>
		// rotina caso ocorra erro no processo de apagar
	}

	HAL_FLASH_OB_Lock();
 800017c:	f002 f948 	bl	8002410 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 8000180:	f002 f91a 	bl	80023b8 <HAL_FLASH_Lock>
}
 8000184:	bf00      	nop
 8000186:	3720      	adds	r7, #32
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}

0800018c <FLASH_escreve_16bits>:
  * @param  Endereço:	  Endereço da memória em que o dado de 16 bits deverá ser armazenado. Endereço deve ser múltiplo de 2)
  * @param  *dado:        Ponteiro para o valor a ser inserido no endereço de memória especificado
  *
  * @retval Void
  */
void FLASH_escreve_16bits(uint32_t endereco, uint16_t *dado){
 800018c:	b5b0      	push	{r4, r5, r7, lr}
 800018e:	b082      	sub	sp, #8
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
 8000194:	6039      	str	r1, [r7, #0]

	HAL_FLASH_Unlock();
 8000196:	f002 f8e9 	bl	800236c <HAL_FLASH_Unlock>
	HAL_FLASH_OB_Unlock();
 800019a:	f002 f91d 	bl	80023d8 <HAL_FLASH_OB_Unlock>

	if( HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,(uint64_t)endereco, *dado) != HAL_OK){
 800019e:	683b      	ldr	r3, [r7, #0]
 80001a0:	881b      	ldrh	r3, [r3, #0]
 80001a2:	b29b      	uxth	r3, r3
 80001a4:	2200      	movs	r2, #0
 80001a6:	461c      	mov	r4, r3
 80001a8:	4615      	mov	r5, r2
 80001aa:	4622      	mov	r2, r4
 80001ac:	462b      	mov	r3, r5
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	2001      	movs	r0, #1
 80001b2:	f002 f86b 	bl	800228c <HAL_FLASH_Program>
		// rotina caso ocorra erro no processo de apagar
	}

	HAL_FLASH_OB_Lock();
 80001b6:	f002 f92b 	bl	8002410 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 80001ba:	f002 f8fd 	bl	80023b8 <HAL_FLASH_Lock>
}
 80001be:	bf00      	nop
 80001c0:	3708      	adds	r7, #8
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bdb0      	pop	{r4, r5, r7, pc}

080001c6 <FLASH_le_16bits>:
  * @param  Endereço:	  Endereço da memória em que o dado de 16 bits deverá ser lido. Endereço deve ser múltiplo de 2
  * @param  *dado:        Ponteiro para armazenar o valor a ser lido no endereço de memória especificado
  *
  * @retval Void
  */
void FLASH_le_16bits(uint32_t endereco, uint16_t *dado){
 80001c6:	b480      	push	{r7}
 80001c8:	b083      	sub	sp, #12
 80001ca:	af00      	add	r7, sp, #0
 80001cc:	6078      	str	r0, [r7, #4]
 80001ce:	6039      	str	r1, [r7, #0]

	*dado = *(uint32_t*)(endereco);
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	b29a      	uxth	r2, r3
 80001d6:	683b      	ldr	r3, [r7, #0]
 80001d8:	801a      	strh	r2, [r3, #0]

}
 80001da:	bf00      	nop
 80001dc:	370c      	adds	r7, #12
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr

080001e4 <acquisition>:
	__HAL_TIM_SET_COUNTER(&htim3,0);
	while(__HAL_TIM_GET_COUNTER(&htim3) < delay);
}

void acquisition(void)
{
 80001e4:	b5b0      	push	{r4, r5, r7, lr}
 80001e6:	b086      	sub	sp, #24
 80001e8:	af06      	add	r7, sp, #24
	readState = INIT;
 80001ea:	4b37      	ldr	r3, [pc, #220]	; (80002c8 <acquisition+0xe4>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	701a      	strb	r2, [r3, #0]
	while(1)
	{
		if(readState == INIT)
 80001f0:	4b35      	ldr	r3, [pc, #212]	; (80002c8 <acquisition+0xe4>)
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d113      	bne.n	8000220 <acquisition+0x3c>
		{
			USB_FLAG = 0;
 80001f8:	4b34      	ldr	r3, [pc, #208]	; (80002cc <acquisition+0xe8>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim3,0);
 80001fe:	4b34      	ldr	r3, [pc, #208]	; (80002d0 <acquisition+0xec>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	2200      	movs	r2, #0
 8000204:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start(&htim3);
 8000206:	4832      	ldr	r0, [pc, #200]	; (80002d0 <acquisition+0xec>)
 8000208:	f004 fe1e 	bl	8004e48 <HAL_TIM_Base_Start>
			HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_1);
 800020c:	2100      	movs	r1, #0
 800020e:	4831      	ldr	r0, [pc, #196]	; (80002d4 <acquisition+0xf0>)
 8000210:	f004 ff34 	bl	800507c <HAL_TIM_Encoder_Start_IT>
			HAL_Delay(1);
 8000214:	2001      	movs	r0, #1
 8000216:	f001 fe57 	bl	8001ec8 <HAL_Delay>
//			readState = COLETA_ALL;
			readState = TRANSMISSAO;
 800021a:	4b2b      	ldr	r3, [pc, #172]	; (80002c8 <acquisition+0xe4>)
 800021c:	2203      	movs	r2, #3
 800021e:	701a      	strb	r2, [r3, #0]


		}

		if(readState == COLETA_ALL)
 8000220:	4b29      	ldr	r3, [pc, #164]	; (80002c8 <acquisition+0xe4>)
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	2b01      	cmp	r3, #1
 8000226:	d116      	bne.n	8000256 <acquisition+0x72>
		{
//			while (samples <10);
//			samples = 0;
			memcpy(bufferPulso,fimPulso,sizeof(fimPulso));
 8000228:	4a2b      	ldr	r2, [pc, #172]	; (80002d8 <acquisition+0xf4>)
 800022a:	4b2c      	ldr	r3, [pc, #176]	; (80002dc <acquisition+0xf8>)
 800022c:	4614      	mov	r4, r2
 800022e:	461d      	mov	r5, r3
 8000230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000238:	e895 0003 	ldmia.w	r5, {r0, r1}
 800023c:	e884 0003 	stmia.w	r4, {r0, r1}
			memcpy(bufferTime,currentTime,sizeof(currentTime));
 8000240:	4a27      	ldr	r2, [pc, #156]	; (80002e0 <acquisition+0xfc>)
 8000242:	4b28      	ldr	r3, [pc, #160]	; (80002e4 <acquisition+0x100>)
 8000244:	4614      	mov	r4, r2
 8000246:	461d      	mov	r5, r3
 8000248:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800024a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800024c:	682b      	ldr	r3, [r5, #0]
 800024e:	6023      	str	r3, [r4, #0]
//			for(int i = 0; i<9; i++)
//			{
//			 transmitTime[i] = bufferTime[i+1] - bufferTime[i];
//			}
			readState = TRANSMISSAO;
 8000250:	4b1d      	ldr	r3, [pc, #116]	; (80002c8 <acquisition+0xe4>)
 8000252:	2203      	movs	r2, #3
 8000254:	701a      	strb	r2, [r3, #0]
		}
		if(readState == TRANSMISSAO)
 8000256:	4b1c      	ldr	r3, [pc, #112]	; (80002c8 <acquisition+0xe4>)
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	2b03      	cmp	r3, #3
 800025c:	d12a      	bne.n	80002b4 <acquisition+0xd0>
		{
			while (samples <10)
 800025e:	e01b      	b.n	8000298 <acquisition+0xb4>
			{
				TransmitData(receive_message,fimPulso,67);
 8000260:	4b21      	ldr	r3, [pc, #132]	; (80002e8 <acquisition+0x104>)
 8000262:	2243      	movs	r2, #67	; 0x43
 8000264:	9204      	str	r2, [sp, #16]
 8000266:	4a1d      	ldr	r2, [pc, #116]	; (80002dc <acquisition+0xf8>)
 8000268:	9203      	str	r2, [sp, #12]
 800026a:	466c      	mov	r4, sp
 800026c:	f103 0210 	add.w	r2, r3, #16
 8000270:	ca07      	ldmia	r2, {r0, r1, r2}
 8000272:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000276:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000278:	f000 feaa 	bl	8000fd0 <TransmitData>
				EndReception = '\0';
 800027c:	4b1b      	ldr	r3, [pc, #108]	; (80002ec <acquisition+0x108>)
 800027e:	2200      	movs	r2, #0
 8000280:	701a      	strb	r2, [r3, #0]
				if(USB_FLAG == 1)
 8000282:	4b12      	ldr	r3, [pc, #72]	; (80002cc <acquisition+0xe8>)
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	2b01      	cmp	r3, #1
 8000288:	d103      	bne.n	8000292 <acquisition+0xae>
				{
					readState = COMUNICACAO;
 800028a:	4b0f      	ldr	r3, [pc, #60]	; (80002c8 <acquisition+0xe4>)
 800028c:	2204      	movs	r2, #4
 800028e:	701a      	strb	r2, [r3, #0]
 8000290:	e002      	b.n	8000298 <acquisition+0xb4>
				}
				else readState = TRANSMISSAO;
 8000292:	4b0d      	ldr	r3, [pc, #52]	; (80002c8 <acquisition+0xe4>)
 8000294:	2203      	movs	r2, #3
 8000296:	701a      	strb	r2, [r3, #0]
			while (samples <10)
 8000298:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <acquisition+0x10c>)
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	2b09      	cmp	r3, #9
 800029e:	d9df      	bls.n	8000260 <acquisition+0x7c>
			}
			if(samples == 10)
 80002a0:	4b13      	ldr	r3, [pc, #76]	; (80002f0 <acquisition+0x10c>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	2b0a      	cmp	r3, #10
 80002a6:	d105      	bne.n	80002b4 <acquisition+0xd0>
			{
				samples = 0;
 80002a8:	4b11      	ldr	r3, [pc, #68]	; (80002f0 <acquisition+0x10c>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	701a      	strb	r2, [r3, #0]
				readState = COLETA_ALL;
 80002ae:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <acquisition+0xe4>)
 80002b0:	2201      	movs	r2, #1
 80002b2:	701a      	strb	r2, [r3, #0]
//			{
//				readState = COMUNICACAO;
//			}
//			else readState = COLETA_ALL;
		}
		if(readState == COMUNICACAO) break;
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <acquisition+0xe4>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	2b04      	cmp	r3, #4
 80002ba:	d000      	beq.n	80002be <acquisition+0xda>
		if(readState == INIT)
 80002bc:	e798      	b.n	80001f0 <acquisition+0xc>
		if(readState == COMUNICACAO) break;
 80002be:	bf00      	nop



	}
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bdb0      	pop	{r4, r5, r7, pc}
 80002c6:	bf00      	nop
 80002c8:	20000367 	.word	0x20000367
 80002cc:	200002b6 	.word	0x200002b6
 80002d0:	200001e4 	.word	0x200001e4
 80002d4:	2000019c 	.word	0x2000019c
 80002d8:	200002e0 	.word	0x200002e0
 80002dc:	20000308 	.word	0x20000308
 80002e0:	200003b0 	.word	0x200003b0
 80002e4:	2000039c 	.word	0x2000039c
 80002e8:	20000368 	.word	0x20000368
 80002ec:	200002b7 	.word	0x200002b7
 80002f0:	200003c4 	.word	0x200003c4

080002f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f4:	b590      	push	{r4, r7, lr}
 80002f6:	b089      	sub	sp, #36	; 0x24
 80002f8:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002fa:	f001 fd83 	bl	8001e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002fe:	f000 fa39 	bl	8000774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000302:	f000 fb5f 	bl	80009c4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000306:	f000 fa91 	bl	800082c <MX_TIM2_Init>
  MX_TIM3_Init();
 800030a:	f000 fae3 	bl	80008d4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800030e:	f000 fb2f 	bl	8000970 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000312:	f00a f921 	bl	800a558 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
HAL_Delay(500);
 8000316:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800031a:	f001 fdd5 	bl	8001ec8 <HAL_Delay>
//HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
HAL_UART_Receive_IT(&huart2, (uint8_t *)RXBuffer, 1);
 800031e:	2201      	movs	r2, #1
 8000320:	49b7      	ldr	r1, [pc, #732]	; (8000600 <main+0x30c>)
 8000322:	48b8      	ldr	r0, [pc, #736]	; (8000604 <main+0x310>)
 8000324:	f005 fbcd 	bl	8005ac2 <HAL_UART_Receive_IT>
StateMachine = iddle;
 8000328:	4bb7      	ldr	r3, [pc, #732]	; (8000608 <main+0x314>)
 800032a:	2249      	movs	r2, #73	; 0x49
 800032c:	701a      	strb	r2, [r3, #0]
char reset_status;
HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,GPIO_PIN_SET);
 800032e:	2201      	movs	r2, #1
 8000330:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000334:	48b5      	ldr	r0, [pc, #724]	; (800060c <main+0x318>)
 8000336:	f002 fb59 	bl	80029ec <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOB,STATUS_Pin, GPIO_PIN_SET);
 800033a:	2201      	movs	r2, #1
 800033c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000340:	48b3      	ldr	r0, [pc, #716]	; (8000610 <main+0x31c>)
 8000342:	f002 fb53 	bl	80029ec <HAL_GPIO_WritePin>
char startFlag = 0;
 8000346:	2300      	movs	r3, #0
 8000348:	71fb      	strb	r3, [r7, #7]
char stopFlag = 1;
 800034a:	2301      	movs	r3, #1
 800034c:	71bb      	strb	r3, [r7, #6]
char i=0;
 800034e:	2300      	movs	r3, #0
 8000350:	717b      	strb	r3, [r7, #5]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

while (1)
{
  switch(StateMachine)
 8000352:	4bad      	ldr	r3, [pc, #692]	; (8000608 <main+0x314>)
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	3b30      	subs	r3, #48	; 0x30
 8000358:	2b19      	cmp	r3, #25
 800035a:	d8fa      	bhi.n	8000352 <main+0x5e>
 800035c:	a201      	add	r2, pc, #4	; (adr r2, 8000364 <main+0x70>)
 800035e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000362:	bf00      	nop
 8000364:	0800049f 	.word	0x0800049f
 8000368:	080004bd 	.word	0x080004bd
 800036c:	0800052d 	.word	0x0800052d
 8000370:	0800057d 	.word	0x0800057d
 8000374:	080005e9 	.word	0x080005e9
 8000378:	08000631 	.word	0x08000631
 800037c:	08000679 	.word	0x08000679
 8000380:	080004f5 	.word	0x080004f5
 8000384:	08000353 	.word	0x08000353
 8000388:	08000353 	.word	0x08000353
 800038c:	08000353 	.word	0x08000353
 8000390:	08000353 	.word	0x08000353
 8000394:	08000353 	.word	0x08000353
 8000398:	08000353 	.word	0x08000353
 800039c:	08000353 	.word	0x08000353
 80003a0:	08000353 	.word	0x08000353
 80003a4:	08000353 	.word	0x08000353
 80003a8:	08000353 	.word	0x08000353
 80003ac:	08000353 	.word	0x08000353
 80003b0:	08000353 	.word	0x08000353
 80003b4:	08000353 	.word	0x08000353
 80003b8:	080006fb 	.word	0x080006fb
 80003bc:	08000353 	.word	0x08000353
 80003c0:	08000353 	.word	0x08000353
 80003c4:	08000353 	.word	0x08000353
 80003c8:	080003cd 	.word	0x080003cd
  {
	  case iddle:
		if(USB_FLAG == 1)
 80003cc:	4b91      	ldr	r3, [pc, #580]	; (8000614 <main+0x320>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	2b01      	cmp	r3, #1
 80003d2:	d10a      	bne.n	80003ea <main+0xf6>
		{
			while(EndReception!=Fim) command(buffer);
 80003d4:	e002      	b.n	80003dc <main+0xe8>
 80003d6:	4890      	ldr	r0, [pc, #576]	; (8000618 <main+0x324>)
 80003d8:	f000 fc5e 	bl	8000c98 <command>
 80003dc:	4b8f      	ldr	r3, [pc, #572]	; (800061c <main+0x328>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	2b44      	cmp	r3, #68	; 0x44
 80003e2:	d1f8      	bne.n	80003d6 <main+0xe2>
			USB_FLAG = 0;
 80003e4:	4b8b      	ldr	r3, [pc, #556]	; (8000614 <main+0x320>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	701a      	strb	r2, [r3, #0]
		}
		if(EndReception == Fim)
 80003ea:	4b8c      	ldr	r3, [pc, #560]	; (800061c <main+0x328>)
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	2b44      	cmp	r3, #68	; 0x44
 80003f0:	d113      	bne.n	800041a <main+0x126>
		{
			structDados();
 80003f2:	f000 fbb9 	bl	8000b68 <structDados>
			errorFlag = VerificaErro();
 80003f6:	f000 fc03 	bl	8000c00 <VerificaErro>
 80003fa:	4603      	mov	r3, r0
 80003fc:	b2da      	uxtb	r2, r3
 80003fe:	4b88      	ldr	r3, [pc, #544]	; (8000620 <main+0x32c>)
 8000400:	701a      	strb	r2, [r3, #0]
			if(errorFlag != OK)
 8000402:	4b87      	ldr	r3, [pc, #540]	; (8000620 <main+0x32c>)
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	2b41      	cmp	r3, #65	; 0x41
 8000408:	d003      	beq.n	8000412 <main+0x11e>
			 {
				StateMachine = error;
 800040a:	4b7f      	ldr	r3, [pc, #508]	; (8000608 <main+0x314>)
 800040c:	2245      	movs	r2, #69	; 0x45
 800040e:	701a      	strb	r2, [r3, #0]
				EndReception = Reset;
			}

		}
		else if(USB_FLAG == 0 && EndReception == '\0') StateMachine = iddle;
	  break;
 8000410:	e19d      	b.n	800074e <main+0x45a>
				StateMachine = Inicio;
 8000412:	4b7d      	ldr	r3, [pc, #500]	; (8000608 <main+0x314>)
 8000414:	2230      	movs	r2, #48	; 0x30
 8000416:	701a      	strb	r2, [r3, #0]
	  break;
 8000418:	e199      	b.n	800074e <main+0x45a>
		else if(EndReception == Reset)
 800041a:	4b80      	ldr	r3, [pc, #512]	; (800061c <main+0x328>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b52      	cmp	r3, #82	; 0x52
 8000420:	d12f      	bne.n	8000482 <main+0x18e>
			reset_status = deviceReset();
 8000422:	f000 fb6b 	bl	8000afc <deviceReset>
 8000426:	4603      	mov	r3, r0
 8000428:	713b      	strb	r3, [r7, #4]
			if(reset_status == HAL_OK)
 800042a:	793b      	ldrb	r3, [r7, #4]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d121      	bne.n	8000474 <main+0x180>
				StateMachine = iddle;
 8000430:	4b75      	ldr	r3, [pc, #468]	; (8000608 <main+0x314>)
 8000432:	2249      	movs	r2, #73	; 0x49
 8000434:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB,ERRO_Pin, GPIO_PIN_RESET);
 8000436:	2200      	movs	r2, #0
 8000438:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800043c:	4874      	ldr	r0, [pc, #464]	; (8000610 <main+0x31c>)
 800043e:	f002 fad5 	bl	80029ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,STOP_Pin, GPIO_PIN_RESET);
 8000442:	2200      	movs	r2, #0
 8000444:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000448:	4871      	ldr	r0, [pc, #452]	; (8000610 <main+0x31c>)
 800044a:	f002 facf 	bl	80029ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,CONFIG_Pin, GPIO_PIN_RESET);
 800044e:	2200      	movs	r2, #0
 8000450:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000454:	486e      	ldr	r0, [pc, #440]	; (8000610 <main+0x31c>)
 8000456:	f002 fac9 	bl	80029ec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,ACQUISITION_Pin, GPIO_PIN_RESET);
 800045a:	2200      	movs	r2, #0
 800045c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000460:	486b      	ldr	r0, [pc, #428]	; (8000610 <main+0x31c>)
 8000462:	f002 fac3 	bl	80029ec <HAL_GPIO_WritePin>
				EndReception = '\0';
 8000466:	4b6d      	ldr	r3, [pc, #436]	; (800061c <main+0x328>)
 8000468:	2200      	movs	r2, #0
 800046a:	701a      	strb	r2, [r3, #0]
				USB_FLAG = 0;
 800046c:	4b69      	ldr	r3, [pc, #420]	; (8000614 <main+0x320>)
 800046e:	2200      	movs	r2, #0
 8000470:	701a      	strb	r2, [r3, #0]
	  break;
 8000472:	e16c      	b.n	800074e <main+0x45a>
				StateMachine = iddle;
 8000474:	4b64      	ldr	r3, [pc, #400]	; (8000608 <main+0x314>)
 8000476:	2249      	movs	r2, #73	; 0x49
 8000478:	701a      	strb	r2, [r3, #0]
				EndReception = Reset;
 800047a:	4b68      	ldr	r3, [pc, #416]	; (800061c <main+0x328>)
 800047c:	2252      	movs	r2, #82	; 0x52
 800047e:	701a      	strb	r2, [r3, #0]
	  break;
 8000480:	e165      	b.n	800074e <main+0x45a>
		else if(USB_FLAG == 0 && EndReception == '\0') StateMachine = iddle;
 8000482:	4b64      	ldr	r3, [pc, #400]	; (8000614 <main+0x320>)
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	2b00      	cmp	r3, #0
 8000488:	f040 8161 	bne.w	800074e <main+0x45a>
 800048c:	4b63      	ldr	r3, [pc, #396]	; (800061c <main+0x328>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	2b00      	cmp	r3, #0
 8000492:	f040 815c 	bne.w	800074e <main+0x45a>
 8000496:	4b5c      	ldr	r3, [pc, #368]	; (8000608 <main+0x314>)
 8000498:	2249      	movs	r2, #73	; 0x49
 800049a:	701a      	strb	r2, [r3, #0]
	  break;
 800049c:	e157      	b.n	800074e <main+0x45a>

	  case Inicio:
				StateMachine = selectCommand(receive_message);
 800049e:	4b61      	ldr	r3, [pc, #388]	; (8000624 <main+0x330>)
 80004a0:	466c      	mov	r4, sp
 80004a2:	f103 0210 	add.w	r2, r3, #16
 80004a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80004a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80004ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004ae:	f000 fccb 	bl	8000e48 <selectCommand>
 80004b2:	4603      	mov	r3, r0
 80004b4:	b2da      	uxtb	r2, r3
 80004b6:	4b54      	ldr	r3, [pc, #336]	; (8000608 <main+0x314>)
 80004b8:	701a      	strb	r2, [r3, #0]
	  break;
 80004ba:	e149      	b.n	8000750 <main+0x45c>

	  case Identification:
			getID();
 80004bc:	f000 fd04 	bl	8000ec8 <getID>
			TransmitData(receive_message,infoDevice.Id,8);
 80004c0:	4b59      	ldr	r3, [pc, #356]	; (8000628 <main+0x334>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4619      	mov	r1, r3
 80004c6:	4b57      	ldr	r3, [pc, #348]	; (8000624 <main+0x330>)
 80004c8:	2208      	movs	r2, #8
 80004ca:	9204      	str	r2, [sp, #16]
 80004cc:	9103      	str	r1, [sp, #12]
 80004ce:	466c      	mov	r4, sp
 80004d0:	f103 0210 	add.w	r2, r3, #16
 80004d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80004d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80004da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004dc:	f000 fd78 	bl	8000fd0 <TransmitData>
			StateMachine = iddle;
 80004e0:	4b49      	ldr	r3, [pc, #292]	; (8000608 <main+0x314>)
 80004e2:	2249      	movs	r2, #73	; 0x49
 80004e4:	701a      	strb	r2, [r3, #0]
			EndReception = '\0';
 80004e6:	4b4d      	ldr	r3, [pc, #308]	; (800061c <main+0x328>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	701a      	strb	r2, [r3, #0]
			USB_FLAG = 0;
 80004ec:	4b49      	ldr	r3, [pc, #292]	; (8000614 <main+0x320>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	701a      	strb	r2, [r3, #0]
	  break;
 80004f2:	e12d      	b.n	8000750 <main+0x45c>

	  case Codification:
			setID();
 80004f4:	f000 fd08 	bl	8000f08 <setID>
			TransmitData(receive_message,infoDevice.Id,8);
 80004f8:	4b4b      	ldr	r3, [pc, #300]	; (8000628 <main+0x334>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4619      	mov	r1, r3
 80004fe:	4b49      	ldr	r3, [pc, #292]	; (8000624 <main+0x330>)
 8000500:	2208      	movs	r2, #8
 8000502:	9204      	str	r2, [sp, #16]
 8000504:	9103      	str	r1, [sp, #12]
 8000506:	466c      	mov	r4, sp
 8000508:	f103 0210 	add.w	r2, r3, #16
 800050c:	ca07      	ldmia	r2, {r0, r1, r2}
 800050e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000512:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000514:	f000 fd5c 	bl	8000fd0 <TransmitData>
			StateMachine = iddle;
 8000518:	4b3b      	ldr	r3, [pc, #236]	; (8000608 <main+0x314>)
 800051a:	2249      	movs	r2, #73	; 0x49
 800051c:	701a      	strb	r2, [r3, #0]
			EndReception = '\0';
 800051e:	4b3f      	ldr	r3, [pc, #252]	; (800061c <main+0x328>)
 8000520:	2200      	movs	r2, #0
 8000522:	701a      	strb	r2, [r3, #0]
			USB_FLAG = 0;
 8000524:	4b3b      	ldr	r3, [pc, #236]	; (8000614 <main+0x320>)
 8000526:	2200      	movs	r2, #0
 8000528:	701a      	strb	r2, [r3, #0]
	  break;
 800052a:	e111      	b.n	8000750 <main+0x45c>

	  case Config:
		DeviceParamenter(receive_message);
 800052c:	4b3d      	ldr	r3, [pc, #244]	; (8000624 <main+0x330>)
 800052e:	466c      	mov	r4, sp
 8000530:	f103 0210 	add.w	r2, r3, #16
 8000534:	ca07      	ldmia	r2, {r0, r1, r2}
 8000536:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800053a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800053c:	f000 fd0a 	bl	8000f54 <DeviceParamenter>
		HAL_GPIO_WritePin(GPIOB,CONFIG_Pin, GPIO_PIN_SET);
 8000540:	2201      	movs	r2, #1
 8000542:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000546:	4832      	ldr	r0, [pc, #200]	; (8000610 <main+0x31c>)
 8000548:	f002 fa50 	bl	80029ec <HAL_GPIO_WritePin>
		TransmitData(receive_message,2,7);
 800054c:	4b35      	ldr	r3, [pc, #212]	; (8000624 <main+0x330>)
 800054e:	2207      	movs	r2, #7
 8000550:	9204      	str	r2, [sp, #16]
 8000552:	2202      	movs	r2, #2
 8000554:	9203      	str	r2, [sp, #12]
 8000556:	466c      	mov	r4, sp
 8000558:	f103 0210 	add.w	r2, r3, #16
 800055c:	ca07      	ldmia	r2, {r0, r1, r2}
 800055e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000562:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000564:	f000 fd34 	bl	8000fd0 <TransmitData>
		StateMachine = iddle;
 8000568:	4b27      	ldr	r3, [pc, #156]	; (8000608 <main+0x314>)
 800056a:	2249      	movs	r2, #73	; 0x49
 800056c:	701a      	strb	r2, [r3, #0]
		EndReception = '\0';
 800056e:	4b2b      	ldr	r3, [pc, #172]	; (800061c <main+0x328>)
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]
		USB_FLAG = 0;
 8000574:	4b27      	ldr	r3, [pc, #156]	; (8000614 <main+0x320>)
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]
	   break;
 800057a:	e0e9      	b.n	8000750 <main+0x45c>

	   /*Primeiro TransmitData(receive_message,0,7) envia a confirmação da msg de inicio de leitura
		*Segundo TransmitData(receive_message,counterPulso,67) envia os dados
		*/
	  case Start:
		startFlag = StartDevice(deviceFlag);
 800057c:	4b2b      	ldr	r3, [pc, #172]	; (800062c <main+0x338>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	4618      	mov	r0, r3
 8000582:	f000 fd0d 	bl	8000fa0 <StartDevice>
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
		deviceFlag = startFlag;
 800058a:	4a28      	ldr	r2, [pc, #160]	; (800062c <main+0x338>)
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	7013      	strb	r3, [r2, #0]
		if(deviceFlag == 1)
 8000590:	4b26      	ldr	r3, [pc, #152]	; (800062c <main+0x338>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d11d      	bne.n	80005d4 <main+0x2e0>
		{
			HAL_GPIO_WritePin(GPIOB,STOP_Pin, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800059e:	481c      	ldr	r0, [pc, #112]	; (8000610 <main+0x31c>)
 80005a0:	f002 fa24 	bl	80029ec <HAL_GPIO_WritePin>
			TransmitData(receive_message,0,7);
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <main+0x330>)
 80005a6:	2207      	movs	r2, #7
 80005a8:	9204      	str	r2, [sp, #16]
 80005aa:	2200      	movs	r2, #0
 80005ac:	9203      	str	r2, [sp, #12]
 80005ae:	466c      	mov	r4, sp
 80005b0:	f103 0210 	add.w	r2, r3, #16
 80005b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80005b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80005ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005bc:	f000 fd08 	bl	8000fd0 <TransmitData>
			StateMachine = Read;
 80005c0:	4b11      	ldr	r3, [pc, #68]	; (8000608 <main+0x314>)
 80005c2:	2234      	movs	r2, #52	; 0x34
 80005c4:	701a      	strb	r2, [r3, #0]
			EndReception = '\0';
 80005c6:	4b15      	ldr	r3, [pc, #84]	; (800061c <main+0x328>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	701a      	strb	r2, [r3, #0]
			USB_FLAG = 0;
 80005cc:	4b11      	ldr	r3, [pc, #68]	; (8000614 <main+0x320>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
			StateMachine = iddle;
			EndReception = '\0';
			USB_FLAG = 0;
		}

	  break;
 80005d2:	e0bd      	b.n	8000750 <main+0x45c>
			StateMachine = iddle;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <main+0x314>)
 80005d6:	2249      	movs	r2, #73	; 0x49
 80005d8:	701a      	strb	r2, [r3, #0]
			EndReception = '\0';
 80005da:	4b10      	ldr	r3, [pc, #64]	; (800061c <main+0x328>)
 80005dc:	2200      	movs	r2, #0
 80005de:	701a      	strb	r2, [r3, #0]
			USB_FLAG = 0;
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <main+0x320>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	701a      	strb	r2, [r3, #0]
	  break;
 80005e6:	e0b3      	b.n	8000750 <main+0x45c>
//		 while(1)
//		 {
//			 HAL_GPIO_TogglePin(GPIOB, CONFIG_Pin);
//			 delay(1000); //1tick = 1us 60000 ticks ->60ms
//		 }
		acquisition();
 80005e8:	f7ff fdfc 	bl	80001e4 <acquisition>
		HAL_GPIO_WritePin(GPIOB,CONFIG_Pin, GPIO_PIN_RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f2:	4807      	ldr	r0, [pc, #28]	; (8000610 <main+0x31c>)
 80005f4:	f002 f9fa 	bl	80029ec <HAL_GPIO_WritePin>
		StateMachine = iddle;
 80005f8:	4b03      	ldr	r3, [pc, #12]	; (8000608 <main+0x314>)
 80005fa:	2249      	movs	r2, #73	; 0x49
 80005fc:	701a      	strb	r2, [r3, #0]
	  break;
 80005fe:	e0a7      	b.n	8000750 <main+0x45c>
 8000600:	200002b8 	.word	0x200002b8
 8000604:	2000022c 	.word	0x2000022c
 8000608:	20000396 	.word	0x20000396
 800060c:	40011000 	.word	0x40011000
 8000610:	40010c00 	.word	0x40010c00
 8000614:	200002b6 	.word	0x200002b6
 8000618:	20000270 	.word	0x20000270
 800061c:	200002b7 	.word	0x200002b7
 8000620:	20000000 	.word	0x20000000
 8000624:	20000368 	.word	0x20000368
 8000628:	20000384 	.word	0x20000384
 800062c:	200003cd 	.word	0x200003cd

	  case ReadError:
		HAL_GPIO_WritePin(GPIOA,ACQUISITION_Pin, GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000636:	4847      	ldr	r0, [pc, #284]	; (8000754 <main+0x460>)
 8000638:	f002 f9d8 	bl	80029ec <HAL_GPIO_WritePin>
		TransmitData(receive_message,counterPulso,67);
 800063c:	4b46      	ldr	r3, [pc, #280]	; (8000758 <main+0x464>)
 800063e:	2243      	movs	r2, #67	; 0x43
 8000640:	9204      	str	r2, [sp, #16]
 8000642:	4a46      	ldr	r2, [pc, #280]	; (800075c <main+0x468>)
 8000644:	9203      	str	r2, [sp, #12]
 8000646:	466c      	mov	r4, sp
 8000648:	f103 0210 	add.w	r2, r3, #16
 800064c:	ca07      	ldmia	r2, {r0, r1, r2}
 800064e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000652:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000654:	f000 fcbc 	bl	8000fd0 <TransmitData>
		HAL_GPIO_WritePin(GPIOA,ACQUISITION_Pin, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800065e:	483d      	ldr	r0, [pc, #244]	; (8000754 <main+0x460>)
 8000660:	f002 f9c4 	bl	80029ec <HAL_GPIO_WritePin>
		StateMachine = iddle;
 8000664:	4b3e      	ldr	r3, [pc, #248]	; (8000760 <main+0x46c>)
 8000666:	2249      	movs	r2, #73	; 0x49
 8000668:	701a      	strb	r2, [r3, #0]
		EndReception = '\0';
 800066a:	4b3e      	ldr	r3, [pc, #248]	; (8000764 <main+0x470>)
 800066c:	2200      	movs	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]
		USB_FLAG = 0;
 8000670:	4b3d      	ldr	r3, [pc, #244]	; (8000768 <main+0x474>)
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
	  break;
 8000676:	e06b      	b.n	8000750 <main+0x45c>

	  case Stop:
		stopFlag = StopDevice(deviceFlag);
 8000678:	4b3c      	ldr	r3, [pc, #240]	; (800076c <main+0x478>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	4618      	mov	r0, r3
 800067e:	f001 f88d 	bl	800179c <StopDevice>
 8000682:	4603      	mov	r3, r0
 8000684:	71bb      	strb	r3, [r7, #6]
		deviceFlag = stopFlag;
 8000686:	4a39      	ldr	r2, [pc, #228]	; (800076c <main+0x478>)
 8000688:	79bb      	ldrb	r3, [r7, #6]
 800068a:	7013      	strb	r3, [r2, #0]
		if(stopFlag == 0)
 800068c:	79bb      	ldrb	r3, [r7, #6]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d123      	bne.n	80006da <main+0x3e6>
		{
			HAL_GPIO_WritePin(GPIOB,STOP_Pin, GPIO_PIN_SET);
 8000692:	2201      	movs	r2, #1
 8000694:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000698:	4835      	ldr	r0, [pc, #212]	; (8000770 <main+0x47c>)
 800069a:	f002 f9a7 	bl	80029ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,ACQUISITION_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a4:	482b      	ldr	r0, [pc, #172]	; (8000754 <main+0x460>)
 80006a6:	f002 f9a1 	bl	80029ec <HAL_GPIO_WritePin>
			TransmitData(receive_message,0,7);
 80006aa:	4b2b      	ldr	r3, [pc, #172]	; (8000758 <main+0x464>)
 80006ac:	2207      	movs	r2, #7
 80006ae:	9204      	str	r2, [sp, #16]
 80006b0:	2200      	movs	r2, #0
 80006b2:	9203      	str	r2, [sp, #12]
 80006b4:	466c      	mov	r4, sp
 80006b6:	f103 0210 	add.w	r2, r3, #16
 80006ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80006bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80006c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006c2:	f000 fc85 	bl	8000fd0 <TransmitData>
			StateMachine = iddle;
 80006c6:	4b26      	ldr	r3, [pc, #152]	; (8000760 <main+0x46c>)
 80006c8:	2249      	movs	r2, #73	; 0x49
 80006ca:	701a      	strb	r2, [r3, #0]
			EndReception = '\0';
 80006cc:	4b25      	ldr	r3, [pc, #148]	; (8000764 <main+0x470>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	701a      	strb	r2, [r3, #0]
			USB_FLAG = 0;
 80006d2:	4b25      	ldr	r3, [pc, #148]	; (8000768 <main+0x474>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB,STOP_Pin, GPIO_PIN_RESET);
			StateMachine = iddle;
			EndReception = '\0';
			USB_FLAG = 0;
		}
	   break;
 80006d8:	e03a      	b.n	8000750 <main+0x45c>
			HAL_GPIO_WritePin(GPIOB,STOP_Pin, GPIO_PIN_RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006e0:	4823      	ldr	r0, [pc, #140]	; (8000770 <main+0x47c>)
 80006e2:	f002 f983 	bl	80029ec <HAL_GPIO_WritePin>
			StateMachine = iddle;
 80006e6:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <main+0x46c>)
 80006e8:	2249      	movs	r2, #73	; 0x49
 80006ea:	701a      	strb	r2, [r3, #0]
			EndReception = '\0';
 80006ec:	4b1d      	ldr	r3, [pc, #116]	; (8000764 <main+0x470>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	701a      	strb	r2, [r3, #0]
			USB_FLAG = 0;
 80006f2:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <main+0x474>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	701a      	strb	r2, [r3, #0]
	   break;
 80006f8:	e02a      	b.n	8000750 <main+0x45c>

	  case error:
		HAL_GPIO_WritePin(GPIOB,ERRO_Pin, GPIO_PIN_SET);
 80006fa:	2201      	movs	r2, #1
 80006fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000700:	481b      	ldr	r0, [pc, #108]	; (8000770 <main+0x47c>)
 8000702:	f002 f973 	bl	80029ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,CONFIG_Pin, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800070c:	4818      	ldr	r0, [pc, #96]	; (8000770 <main+0x47c>)
 800070e:	f002 f96d 	bl	80029ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,STOP_Pin, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000718:	4815      	ldr	r0, [pc, #84]	; (8000770 <main+0x47c>)
 800071a:	f002 f967 	bl	80029ec <HAL_GPIO_WritePin>
		TransmitData(receive_message,0,8);
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <main+0x464>)
 8000720:	2208      	movs	r2, #8
 8000722:	9204      	str	r2, [sp, #16]
 8000724:	2200      	movs	r2, #0
 8000726:	9203      	str	r2, [sp, #12]
 8000728:	466c      	mov	r4, sp
 800072a:	f103 0210 	add.w	r2, r3, #16
 800072e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000730:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000734:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000736:	f000 fc4b 	bl	8000fd0 <TransmitData>
		StateMachine = iddle;
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <main+0x46c>)
 800073c:	2249      	movs	r2, #73	; 0x49
 800073e:	701a      	strb	r2, [r3, #0]
		EndReception = '\0';
 8000740:	4b08      	ldr	r3, [pc, #32]	; (8000764 <main+0x470>)
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]
		USB_FLAG = 0;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <main+0x474>)
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
		break;
 800074c:	e000      	b.n	8000750 <main+0x45c>
	  break;
 800074e:	bf00      	nop
  switch(StateMachine)
 8000750:	e5ff      	b.n	8000352 <main+0x5e>
 8000752:	bf00      	nop
 8000754:	40010800 	.word	0x40010800
 8000758:	20000368 	.word	0x20000368
 800075c:	20000338 	.word	0x20000338
 8000760:	20000396 	.word	0x20000396
 8000764:	200002b7 	.word	0x200002b7
 8000768:	200002b6 	.word	0x200002b6
 800076c:	200003cd 	.word	0x200003cd
 8000770:	40010c00 	.word	0x40010c00

08000774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b094      	sub	sp, #80	; 0x50
 8000778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800077e:	2228      	movs	r2, #40	; 0x28
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f00a fbd6 	bl	800af34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a4:	2301      	movs	r3, #1
 80007a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80007ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b4:	2301      	movs	r3, #1
 80007b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b8:	2302      	movs	r3, #2
 80007ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80007c2:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 80007c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007cc:	4618      	mov	r0, r3
 80007ce:	f003 fe1b 	bl	8004408 <HAL_RCC_OscConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x68>
  {
    Error_Handler();
 80007d8:	f001 f9ae 	bl	8001b38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007dc:	230f      	movs	r3, #15
 80007de:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e0:	2302      	movs	r3, #2
 80007e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ec:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	2101      	movs	r1, #1
 80007f8:	4618      	mov	r0, r3
 80007fa:	f004 f887 	bl	800490c <HAL_RCC_ClockConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000804:	f001 f998 	bl	8001b38 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000808:	2310      	movs	r3, #16
 800080a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800080c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000810:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	4618      	mov	r0, r3
 8000816:	f004 fa11 	bl	8004c3c <HAL_RCCEx_PeriphCLKConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000820:	f001 f98a 	bl	8001b38 <Error_Handler>
  }
}
 8000824:	bf00      	nop
 8000826:	3750      	adds	r7, #80	; 0x50
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08c      	sub	sp, #48	; 0x30
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	2224      	movs	r2, #36	; 0x24
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f00a fb7a 	bl	800af34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000848:	4b21      	ldr	r3, [pc, #132]	; (80008d0 <MX_TIM2_Init+0xa4>)
 800084a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800084e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000850:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <MX_TIM2_Init+0xa4>)
 8000852:	2200      	movs	r2, #0
 8000854:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000856:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <MX_TIM2_Init+0xa4>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800085c:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <MX_TIM2_Init+0xa4>)
 800085e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000862:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000864:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_TIM2_Init+0xa4>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800086a:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <MX_TIM2_Init+0xa4>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000870:	2301      	movs	r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000874:	2300      	movs	r3, #0
 8000876:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000878:	2301      	movs	r3, #1
 800087a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000880:	230f      	movs	r3, #15
 8000882:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000884:	2300      	movs	r3, #0
 8000886:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000888:	2301      	movs	r3, #1
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000890:	230f      	movs	r3, #15
 8000892:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	4619      	mov	r1, r3
 800089a:	480d      	ldr	r0, [pc, #52]	; (80008d0 <MX_TIM2_Init+0xa4>)
 800089c:	f004 fb4c 	bl	8004f38 <HAL_TIM_Encoder_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80008a6:	f001 f947 	bl	8001b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	4619      	mov	r1, r3
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <MX_TIM2_Init+0xa4>)
 80008b8:	f005 f846 	bl	8005948 <HAL_TIMEx_MasterConfigSynchronization>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80008c2:	f001 f939 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	3730      	adds	r7, #48	; 0x30
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	2000019c 	.word	0x2000019c

080008d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008da:	f107 0308 	add.w	r3, r7, #8
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e8:	463b      	mov	r3, r7
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008f0:	4b1d      	ldr	r3, [pc, #116]	; (8000968 <MX_TIM3_Init+0x94>)
 80008f2:	4a1e      	ldr	r2, [pc, #120]	; (800096c <MX_TIM3_Init+0x98>)
 80008f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48000-1;
 80008f6:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <MX_TIM3_Init+0x94>)
 80008f8:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80008fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_TIM3_Init+0x94>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65356-1;
 8000904:	4b18      	ldr	r3, [pc, #96]	; (8000968 <MX_TIM3_Init+0x94>)
 8000906:	f64f 724b 	movw	r2, #65355	; 0xff4b
 800090a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090c:	4b16      	ldr	r3, [pc, #88]	; (8000968 <MX_TIM3_Init+0x94>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <MX_TIM3_Init+0x94>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000918:	4813      	ldr	r0, [pc, #76]	; (8000968 <MX_TIM3_Init+0x94>)
 800091a:	f004 fa45 	bl	8004da8 <HAL_TIM_Base_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000924:	f001 f908 	bl	8001b38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800092c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800092e:	f107 0308 	add.w	r3, r7, #8
 8000932:	4619      	mov	r1, r3
 8000934:	480c      	ldr	r0, [pc, #48]	; (8000968 <MX_TIM3_Init+0x94>)
 8000936:	f004 fe0c 	bl	8005552 <HAL_TIM_ConfigClockSource>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000940:	f001 f8fa 	bl	8001b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000944:	2300      	movs	r3, #0
 8000946:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000948:	2300      	movs	r3, #0
 800094a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800094c:	463b      	mov	r3, r7
 800094e:	4619      	mov	r1, r3
 8000950:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_TIM3_Init+0x94>)
 8000952:	f004 fff9 	bl	8005948 <HAL_TIMEx_MasterConfigSynchronization>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800095c:	f001 f8ec 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	3718      	adds	r7, #24
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200001e4 	.word	0x200001e4
 800096c:	40000400 	.word	0x40000400

08000970 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_USART2_UART_Init+0x4c>)
 8000976:	4a12      	ldr	r2, [pc, #72]	; (80009c0 <MX_USART2_UART_Init+0x50>)
 8000978:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <MX_USART2_UART_Init+0x4c>)
 800097c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000980:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_USART2_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_USART2_UART_Init+0x4c>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <MX_USART2_UART_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_USART2_UART_Init+0x4c>)
 8000996:	220c      	movs	r2, #12
 8000998:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <MX_USART2_UART_Init+0x4c>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_USART2_UART_Init+0x4c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_USART2_UART_Init+0x4c>)
 80009a8:	f005 f83e 	bl	8005a28 <HAL_UART_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009b2:	f001 f8c1 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	2000022c 	.word	0x2000022c
 80009c0:	40004400 	.word	0x40004400

080009c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b088      	sub	sp, #32
 80009c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ca:	f107 0310 	add.w	r3, r7, #16
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d8:	4b43      	ldr	r3, [pc, #268]	; (8000ae8 <MX_GPIO_Init+0x124>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	4a42      	ldr	r2, [pc, #264]	; (8000ae8 <MX_GPIO_Init+0x124>)
 80009de:	f043 0310 	orr.w	r3, r3, #16
 80009e2:	6193      	str	r3, [r2, #24]
 80009e4:	4b40      	ldr	r3, [pc, #256]	; (8000ae8 <MX_GPIO_Init+0x124>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	f003 0310 	and.w	r3, r3, #16
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f0:	4b3d      	ldr	r3, [pc, #244]	; (8000ae8 <MX_GPIO_Init+0x124>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	4a3c      	ldr	r2, [pc, #240]	; (8000ae8 <MX_GPIO_Init+0x124>)
 80009f6:	f043 0320 	orr.w	r3, r3, #32
 80009fa:	6193      	str	r3, [r2, #24]
 80009fc:	4b3a      	ldr	r3, [pc, #232]	; (8000ae8 <MX_GPIO_Init+0x124>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	f003 0320 	and.w	r3, r3, #32
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a08:	4b37      	ldr	r3, [pc, #220]	; (8000ae8 <MX_GPIO_Init+0x124>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	4a36      	ldr	r2, [pc, #216]	; (8000ae8 <MX_GPIO_Init+0x124>)
 8000a0e:	f043 0304 	orr.w	r3, r3, #4
 8000a12:	6193      	str	r3, [r2, #24]
 8000a14:	4b34      	ldr	r3, [pc, #208]	; (8000ae8 <MX_GPIO_Init+0x124>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	f003 0304 	and.w	r3, r3, #4
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a20:	4b31      	ldr	r3, [pc, #196]	; (8000ae8 <MX_GPIO_Init+0x124>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	4a30      	ldr	r2, [pc, #192]	; (8000ae8 <MX_GPIO_Init+0x124>)
 8000a26:	f043 0308 	orr.w	r3, r3, #8
 8000a2a:	6193      	str	r3, [r2, #24]
 8000a2c:	4b2e      	ldr	r3, [pc, #184]	; (8000ae8 <MX_GPIO_Init+0x124>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	f003 0308 	and.w	r3, r3, #8
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a3e:	482b      	ldr	r0, [pc, #172]	; (8000aec <MX_GPIO_Init+0x128>)
 8000a40:	f001 ffd4 	bl	80029ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STOP_Pin|ERRO_Pin|STATUS_Pin|CONFIG_Pin, GPIO_PIN_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000a4a:	4829      	ldr	r0, [pc, #164]	; (8000af0 <MX_GPIO_Init+0x12c>)
 8000a4c:	f001 ffce 	bl	80029ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACQUISITION_GPIO_Port, ACQUISITION_Pin, GPIO_PIN_RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a56:	4827      	ldr	r0, [pc, #156]	; (8000af4 <MX_GPIO_Init+0x130>)
 8000a58:	f001 ffc8 	bl	80029ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6e:	f107 0310 	add.w	r3, r7, #16
 8000a72:	4619      	mov	r1, r3
 8000a74:	481d      	ldr	r0, [pc, #116]	; (8000aec <MX_GPIO_Init+0x128>)
 8000a76:	f001 fe35 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STOP_Pin ERRO_Pin STATUS_Pin CONFIG_Pin */
  GPIO_InitStruct.Pin = STOP_Pin|ERRO_Pin|STATUS_Pin|CONFIG_Pin;
 8000a7a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000a7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8c:	f107 0310 	add.w	r3, r7, #16
 8000a90:	4619      	mov	r1, r3
 8000a92:	4817      	ldr	r0, [pc, #92]	; (8000af0 <MX_GPIO_Init+0x12c>)
 8000a94:	f001 fe26 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACQUISITION_Pin */
  GPIO_InitStruct.Pin = ACQUISITION_Pin;
 8000a98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACQUISITION_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 0310 	add.w	r3, r7, #16
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4810      	ldr	r0, [pc, #64]	; (8000af4 <MX_GPIO_Init+0x130>)
 8000ab2:	f001 fe17 	bl	80026e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8000ab6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000abc:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <MX_GPIO_Init+0x134>)
 8000abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	4619      	mov	r1, r3
 8000aca:	480a      	ldr	r0, [pc, #40]	; (8000af4 <MX_GPIO_Init+0x130>)
 8000acc:	f001 fe0a 	bl	80026e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	2017      	movs	r0, #23
 8000ad6:	f001 faf2 	bl	80020be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ada:	2017      	movs	r0, #23
 8000adc:	f001 fb0b 	bl	80020f6 <HAL_NVIC_EnableIRQ>

}
 8000ae0:	bf00      	nop
 8000ae2:	3720      	adds	r7, #32
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40011000 	.word	0x40011000
 8000af0:	40010c00 	.word	0x40010c00
 8000af4:	40010800 	.word	0x40010800
 8000af8:	10210000 	.word	0x10210000

08000afc <deviceReset>:

/* USER CODE BEGIN 4 */
char deviceReset()
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
char i=0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	71fb      	strb	r3, [r7, #7]
char reset;
infoDevice.Id =0;
 8000b06:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <deviceReset+0x58>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
for(i=0;i<10;i++)
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	71fb      	strb	r3, [r7, #7]
 8000b10:	e012      	b.n	8000b38 <deviceReset+0x3c>
{
  counterPulso[i] = 0;
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	4a10      	ldr	r2, [pc, #64]	; (8000b58 <deviceReset+0x5c>)
 8000b16:	2100      	movs	r1, #0
 8000b18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  currentTime[i] = 0;
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	4a0f      	ldr	r2, [pc, #60]	; (8000b5c <deviceReset+0x60>)
 8000b20:	2100      	movs	r1, #0
 8000b22:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  fimPulso[contador] = 0;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <deviceReset+0x64>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a0e      	ldr	r2, [pc, #56]	; (8000b64 <deviceReset+0x68>)
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
for(i=0;i<10;i++)
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	3301      	adds	r3, #1
 8000b36:	71fb      	strb	r3, [r7, #7]
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	2b09      	cmp	r3, #9
 8000b3c:	d9e9      	bls.n	8000b12 <deviceReset+0x16>
}
reset = StopDevice(HAL_OK);
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f000 fe2c 	bl	800179c <StopDevice>
 8000b44:	4603      	mov	r3, r0
 8000b46:	71bb      	strb	r3, [r7, #6]

return reset;
 8000b48:	79bb      	ldrb	r3, [r7, #6]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000384 	.word	0x20000384
 8000b58:	20000338 	.word	0x20000338
 8000b5c:	2000039c 	.word	0x2000039c
 8000b60:	200003c8 	.word	0x200003c8
 8000b64:	20000308 	.word	0x20000308

08000b68 <structDados>:

void structDados()
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
uint8_t counter=0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	71fb      	strb	r3, [r7, #7]
receive_message.inicio = RXBufferArray[0];
 8000b72:	4b20      	ldr	r3, [pc, #128]	; (8000bf4 <structDados+0x8c>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	461a      	mov	r2, r3
 8000b78:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <structDados+0x90>)
 8000b7a:	601a      	str	r2, [r3, #0]
receive_message.endOrigem = RXBufferArray[1];
 8000b7c:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <structDados+0x8c>)
 8000b7e:	785b      	ldrb	r3, [r3, #1]
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <structDados+0x90>)
 8000b84:	605a      	str	r2, [r3, #4]
receive_message.endDestino = RXBufferArray[2];
 8000b86:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <structDados+0x8c>)
 8000b88:	789b      	ldrb	r3, [r3, #2]
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <structDados+0x90>)
 8000b8e:	609a      	str	r2, [r3, #8]
receive_message.funcao = RXBufferArray[3];
 8000b90:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <structDados+0x8c>)
 8000b92:	78db      	ldrb	r3, [r3, #3]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <structDados+0x90>)
 8000b98:	60da      	str	r2, [r3, #12]
receive_message.dadosCount = RXBufferArray[4];
 8000b9a:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <structDados+0x8c>)
 8000b9c:	791b      	ldrb	r3, [r3, #4]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <structDados+0x90>)
 8000ba2:	611a      	str	r2, [r3, #16]
while(counter<receive_message.dadosCount)
 8000ba4:	e00b      	b.n	8000bbe <structDados+0x56>
{
	dados[counter] = RXBufferArray[5+counter];
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	3305      	adds	r3, #5
 8000baa:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <structDados+0x8c>)
 8000bac:	5cd2      	ldrb	r2, [r2, r3]
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	4611      	mov	r1, r2
 8000bb2:	4a12      	ldr	r2, [pc, #72]	; (8000bfc <structDados+0x94>)
 8000bb4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	counter++;
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	71fb      	strb	r3, [r7, #7]
while(counter<receive_message.dadosCount)
 8000bbe:	79fa      	ldrb	r2, [r7, #7]
 8000bc0:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <structDados+0x90>)
 8000bc2:	691b      	ldr	r3, [r3, #16]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	dbee      	blt.n	8000ba6 <structDados+0x3e>
}
receive_message.checksum = RXBufferArray[5+counter];
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	3305      	adds	r3, #5
 8000bcc:	4a09      	ldr	r2, [pc, #36]	; (8000bf4 <structDados+0x8c>)
 8000bce:	5cd3      	ldrb	r3, [r2, r3]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <structDados+0x90>)
 8000bd4:	615a      	str	r2, [r3, #20]
receive_message.fim=RXBufferArray[6+counter];
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	3306      	adds	r3, #6
 8000bda:	4a06      	ldr	r2, [pc, #24]	; (8000bf4 <structDados+0x8c>)
 8000bdc:	5cd3      	ldrb	r3, [r2, r3]
 8000bde:	461a      	mov	r2, r3
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <structDados+0x90>)
 8000be2:	619a      	str	r2, [r3, #24]
counter=0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	71fb      	strb	r3, [r7, #7]
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	200002bc 	.word	0x200002bc
 8000bf8:	20000368 	.word	0x20000368
 8000bfc:	200002d0 	.word	0x200002d0

08000c00 <VerificaErro>:

int VerificaErro()
{
 8000c00:	b598      	push	{r3, r4, r7, lr}
 8000c02:	af00      	add	r7, sp, #0
if(receive_message.checksum != Checksum(RXBufferArray))
 8000c04:	4b20      	ldr	r3, [pc, #128]	; (8000c88 <VerificaErro+0x88>)
 8000c06:	695c      	ldr	r4, [r3, #20]
 8000c08:	4820      	ldr	r0, [pc, #128]	; (8000c8c <VerificaErro+0x8c>)
 8000c0a:	f000 fe29 	bl	8001860 <Checksum>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	429c      	cmp	r4, r3
 8000c12:	d001      	beq.n	8000c18 <VerificaErro+0x18>
{
	return errorChecksum;
 8000c14:	2330      	movs	r3, #48	; 0x30
 8000c16:	e035      	b.n	8000c84 <VerificaErro+0x84>
}
if(receive_message.endDestino>255 || receive_message.endDestino<0)
 8000c18:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <VerificaErro+0x88>)
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	2bff      	cmp	r3, #255	; 0xff
 8000c1e:	dc03      	bgt.n	8000c28 <VerificaErro+0x28>
 8000c20:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <VerificaErro+0x88>)
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	da06      	bge.n	8000c36 <VerificaErro+0x36>
{
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000c28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c2c:	4818      	ldr	r0, [pc, #96]	; (8000c90 <VerificaErro+0x90>)
 8000c2e:	f001 fef5 	bl	8002a1c <HAL_GPIO_TogglePin>
	return errorAddress;
 8000c32:	2333      	movs	r3, #51	; 0x33
 8000c34:	e026      	b.n	8000c84 <VerificaErro+0x84>
}
/*	if(infoDevice.Id != 0x00 && infoDevice.Id != receive_message.endDestino)
{
	return errorAddress;
}*/
if(receive_message.funcao == 2 && receive_message.dadosCount < 0)
 8000c36:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <VerificaErro+0x88>)
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d105      	bne.n	8000c4a <VerificaErro+0x4a>
 8000c3e:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <VerificaErro+0x88>)
 8000c40:	691b      	ldr	r3, [r3, #16]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	da01      	bge.n	8000c4a <VerificaErro+0x4a>
{
	return errorConfig;
 8000c46:	2335      	movs	r3, #53	; 0x35
 8000c48:	e01c      	b.n	8000c84 <VerificaErro+0x84>
}
if(receive_message.funcao > 0x08)
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <VerificaErro+0x88>)
 8000c4c:	68db      	ldr	r3, [r3, #12]
 8000c4e:	2b08      	cmp	r3, #8
 8000c50:	dd01      	ble.n	8000c56 <VerificaErro+0x56>
{
	return errorFunction;
 8000c52:	2336      	movs	r3, #54	; 0x36
 8000c54:	e016      	b.n	8000c84 <VerificaErro+0x84>
}
if(receive_message.funcao == 2 && dados[1]<1)
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <VerificaErro+0x88>)
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d105      	bne.n	8000c6a <VerificaErro+0x6a>
 8000c5e:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <VerificaErro+0x94>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	dc01      	bgt.n	8000c6a <VerificaErro+0x6a>
{
	return errorData;
 8000c66:	2337      	movs	r3, #55	; 0x37
 8000c68:	e00c      	b.n	8000c84 <VerificaErro+0x84>
}
if(receive_message.inicio != 0x0A)
 8000c6a:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <VerificaErro+0x88>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2b0a      	cmp	r3, #10
 8000c70:	d001      	beq.n	8000c76 <VerificaErro+0x76>
{
	return errorStartHeader;
 8000c72:	2338      	movs	r3, #56	; 0x38
 8000c74:	e006      	b.n	8000c84 <VerificaErro+0x84>
}
if(receive_message.fim != 0x0f)
 8000c76:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <VerificaErro+0x88>)
 8000c78:	699b      	ldr	r3, [r3, #24]
 8000c7a:	2b0f      	cmp	r3, #15
 8000c7c:	d001      	beq.n	8000c82 <VerificaErro+0x82>
{
	return errorEndHeader;
 8000c7e:	2339      	movs	r3, #57	; 0x39
 8000c80:	e000      	b.n	8000c84 <VerificaErro+0x84>
}
return OK;
 8000c82:	2341      	movs	r3, #65	; 0x41

}
 8000c84:	4618      	mov	r0, r3
 8000c86:	bd98      	pop	{r3, r4, r7, pc}
 8000c88:	20000368 	.word	0x20000368
 8000c8c:	200002bc 	.word	0x200002bc
 8000c90:	40011000 	.word	0x40011000
 8000c94:	200002d0 	.word	0x200002d0

08000c98 <command>:

void command(char *ReceivedChar)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]

static int FirstData = 0;
/*	int ReceivedInt = *ReceivedChar - '\0';*/
if (FirstData == 0)
 8000ca0:	4b63      	ldr	r3, [pc, #396]	; (8000e30 <command+0x198>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d10a      	bne.n	8000cbe <command+0x26>
{
RXBufferArray[0] = ReceivedChar[0];
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	781a      	ldrb	r2, [r3, #0]
 8000cac:	4b61      	ldr	r3, [pc, #388]	; (8000e34 <command+0x19c>)
 8000cae:	701a      	strb	r2, [r3, #0]
FirstData = 1;
 8000cb0:	4b5f      	ldr	r3, [pc, #380]	; (8000e30 <command+0x198>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	601a      	str	r2, [r3, #0]
uart_state = Origem;
 8000cb6:	4b60      	ldr	r3, [pc, #384]	; (8000e38 <command+0x1a0>)
 8000cb8:	2237      	movs	r2, #55	; 0x37
 8000cba:	701a      	strb	r2, [r3, #0]
  default:
	uart_state = iddle;
  }
}
}
}
 8000cbc:	e0b3      	b.n	8000e26 <command+0x18e>
if (uart_state != iddle)
 8000cbe:	4b5e      	ldr	r3, [pc, #376]	; (8000e38 <command+0x1a0>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b49      	cmp	r3, #73	; 0x49
 8000cc4:	f000 80ac 	beq.w	8000e20 <command+0x188>
  switch (uart_state) {
 8000cc8:	4b5b      	ldr	r3, [pc, #364]	; (8000e38 <command+0x1a0>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	3b37      	subs	r3, #55	; 0x37
 8000cce:	2b0d      	cmp	r3, #13
 8000cd0:	f200 80a2 	bhi.w	8000e18 <command+0x180>
 8000cd4:	a201      	add	r2, pc, #4	; (adr r2, 8000cdc <command+0x44>)
 8000cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cda:	bf00      	nop
 8000cdc:	08000d15 	.word	0x08000d15
 8000ce0:	08000d25 	.word	0x08000d25
 8000ce4:	08000d35 	.word	0x08000d35
 8000ce8:	08000e19 	.word	0x08000e19
 8000cec:	08000e19 	.word	0x08000e19
 8000cf0:	08000e19 	.word	0x08000e19
 8000cf4:	08000e19 	.word	0x08000e19
 8000cf8:	08000e19 	.word	0x08000e19
 8000cfc:	08000e19 	.word	0x08000e19
 8000d00:	08000e19 	.word	0x08000e19
 8000d04:	08000d45 	.word	0x08000d45
 8000d08:	08000d79 	.word	0x08000d79
 8000d0c:	08000db9 	.word	0x08000db9
 8000d10:	08000de7 	.word	0x08000de7
		RXBufferArray[1] = ReceivedChar[1];
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	785a      	ldrb	r2, [r3, #1]
 8000d18:	4b46      	ldr	r3, [pc, #280]	; (8000e34 <command+0x19c>)
 8000d1a:	705a      	strb	r2, [r3, #1]
		uart_state = Destino;
 8000d1c:	4b46      	ldr	r3, [pc, #280]	; (8000e38 <command+0x1a0>)
 8000d1e:	2238      	movs	r2, #56	; 0x38
 8000d20:	701a      	strb	r2, [r3, #0]
	break;
 8000d22:	e080      	b.n	8000e26 <command+0x18e>
		RXBufferArray[2] = ReceivedChar[2];
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	789a      	ldrb	r2, [r3, #2]
 8000d28:	4b42      	ldr	r3, [pc, #264]	; (8000e34 <command+0x19c>)
 8000d2a:	709a      	strb	r2, [r3, #2]
		uart_state = Funcao;
 8000d2c:	4b42      	ldr	r3, [pc, #264]	; (8000e38 <command+0x1a0>)
 8000d2e:	2239      	movs	r2, #57	; 0x39
 8000d30:	701a      	strb	r2, [r3, #0]
	break;
 8000d32:	e078      	b.n	8000e26 <command+0x18e>
		RXBufferArray[3] = ReceivedChar[3];
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	78da      	ldrb	r2, [r3, #3]
 8000d38:	4b3e      	ldr	r3, [pc, #248]	; (8000e34 <command+0x19c>)
 8000d3a:	70da      	strb	r2, [r3, #3]
		uart_state = DadosCount;
 8000d3c:	4b3e      	ldr	r3, [pc, #248]	; (8000e38 <command+0x1a0>)
 8000d3e:	2241      	movs	r2, #65	; 0x41
 8000d40:	701a      	strb	r2, [r3, #0]
	break;
 8000d42:	e070      	b.n	8000e26 <command+0x18e>
	if(ReceivedChar[4]>0)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3304      	adds	r3, #4
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d007      	beq.n	8000d5e <command+0xc6>
		RXBufferArray[4] = ReceivedChar[4];
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	791a      	ldrb	r2, [r3, #4]
 8000d52:	4b38      	ldr	r3, [pc, #224]	; (8000e34 <command+0x19c>)
 8000d54:	711a      	strb	r2, [r3, #4]
		uart_state = Dados;
 8000d56:	4b38      	ldr	r3, [pc, #224]	; (8000e38 <command+0x1a0>)
 8000d58:	2242      	movs	r2, #66	; 0x42
 8000d5a:	701a      	strb	r2, [r3, #0]
	break;
 8000d5c:	e062      	b.n	8000e24 <command+0x18c>
	else if (ReceivedChar[4]==0)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	3304      	adds	r3, #4
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d15d      	bne.n	8000e24 <command+0x18c>
		RXBufferArray[4] = ReceivedChar[4];
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	791a      	ldrb	r2, [r3, #4]
 8000d6c:	4b31      	ldr	r3, [pc, #196]	; (8000e34 <command+0x19c>)
 8000d6e:	711a      	strb	r2, [r3, #4]
		uart_state = CheckSum;
 8000d70:	4b31      	ldr	r3, [pc, #196]	; (8000e38 <command+0x1a0>)
 8000d72:	2243      	movs	r2, #67	; 0x43
 8000d74:	701a      	strb	r2, [r3, #0]
	break;
 8000d76:	e055      	b.n	8000e24 <command+0x18c>
	  RXBufferArray[5+i] = ReceivedChar[5+i];
 8000d78:	4b30      	ldr	r3, [pc, #192]	; (8000e3c <command+0x1a4>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	3305      	adds	r3, #5
 8000d7e:	461a      	mov	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	441a      	add	r2, r3
 8000d84:	4b2d      	ldr	r3, [pc, #180]	; (8000e3c <command+0x1a4>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	3305      	adds	r3, #5
 8000d8a:	7811      	ldrb	r1, [r2, #0]
 8000d8c:	4a29      	ldr	r2, [pc, #164]	; (8000e34 <command+0x19c>)
 8000d8e:	54d1      	strb	r1, [r2, r3]
	  i++;
 8000d90:	4b2a      	ldr	r3, [pc, #168]	; (8000e3c <command+0x1a4>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	3301      	adds	r3, #1
 8000d96:	4a29      	ldr	r2, [pc, #164]	; (8000e3c <command+0x1a4>)
 8000d98:	6013      	str	r3, [r2, #0]
	  if(i<RXBufferArray[4])
 8000d9a:	4b26      	ldr	r3, [pc, #152]	; (8000e34 <command+0x19c>)
 8000d9c:	791b      	ldrb	r3, [r3, #4]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	4b26      	ldr	r3, [pc, #152]	; (8000e3c <command+0x1a4>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	dd03      	ble.n	8000db0 <command+0x118>
		  uart_state = Dados;
 8000da8:	4b23      	ldr	r3, [pc, #140]	; (8000e38 <command+0x1a0>)
 8000daa:	2242      	movs	r2, #66	; 0x42
 8000dac:	701a      	strb	r2, [r3, #0]
	  break;
 8000dae:	e03a      	b.n	8000e26 <command+0x18e>
		  uart_state = CheckSum;
 8000db0:	4b21      	ldr	r3, [pc, #132]	; (8000e38 <command+0x1a0>)
 8000db2:	2243      	movs	r2, #67	; 0x43
 8000db4:	701a      	strb	r2, [r3, #0]
	  break;
 8000db6:	e036      	b.n	8000e26 <command+0x18e>
	  RXBufferArray[5+i] = ReceivedChar[5+i];
 8000db8:	4b20      	ldr	r3, [pc, #128]	; (8000e3c <command+0x1a4>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	3305      	adds	r3, #5
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	441a      	add	r2, r3
 8000dc4:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <command+0x1a4>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	3305      	adds	r3, #5
 8000dca:	7811      	ldrb	r1, [r2, #0]
 8000dcc:	4a19      	ldr	r2, [pc, #100]	; (8000e34 <command+0x19c>)
 8000dce:	54d1      	strb	r1, [r2, r3]
	  checksum = Checksum(RXBufferArray);
 8000dd0:	4818      	ldr	r0, [pc, #96]	; (8000e34 <command+0x19c>)
 8000dd2:	f000 fd45 	bl	8001860 <Checksum>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <command+0x1a8>)
 8000ddc:	701a      	strb	r2, [r3, #0]
	  uart_state = Fim;
 8000dde:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <command+0x1a0>)
 8000de0:	2244      	movs	r2, #68	; 0x44
 8000de2:	701a      	strb	r2, [r3, #0]
  break;
 8000de4:	e01f      	b.n	8000e26 <command+0x18e>
	  RXBufferArray[6+i] = ReceivedChar[6+i];
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <command+0x1a4>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	3306      	adds	r3, #6
 8000dec:	461a      	mov	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	441a      	add	r2, r3
 8000df2:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <command+0x1a4>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	3306      	adds	r3, #6
 8000df8:	7811      	ldrb	r1, [r2, #0]
 8000dfa:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <command+0x19c>)
 8000dfc:	54d1      	strb	r1, [r2, r3]
	  EndReception = Fim;
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <command+0x1ac>)
 8000e00:	2244      	movs	r2, #68	; 0x44
 8000e02:	701a      	strb	r2, [r3, #0]
	  i=0;
 8000e04:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <command+0x1a4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
	  FirstData = 0;
 8000e0a:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <command+0x198>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
	  uart_state = iddle;
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <command+0x1a0>)
 8000e12:	2249      	movs	r2, #73	; 0x49
 8000e14:	701a      	strb	r2, [r3, #0]
	break;
 8000e16:	e006      	b.n	8000e26 <command+0x18e>
	uart_state = iddle;
 8000e18:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <command+0x1a0>)
 8000e1a:	2249      	movs	r2, #73	; 0x49
 8000e1c:	701a      	strb	r2, [r3, #0]
}
 8000e1e:	e002      	b.n	8000e26 <command+0x18e>
}
 8000e20:	bf00      	nop
 8000e22:	e000      	b.n	8000e26 <command+0x18e>
	break;
 8000e24:	bf00      	nop
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200003d0 	.word	0x200003d0
 8000e34:	200002bc 	.word	0x200002bc
 8000e38:	20000397 	.word	0x20000397
 8000e3c:	200002c8 	.word	0x200002c8
 8000e40:	20000394 	.word	0x20000394
 8000e44:	200002b7 	.word	0x200002b7

08000e48 <selectCommand>:

int selectCommand(struct Recepcao receive_message)

{
 8000e48:	b084      	sub	sp, #16
 8000e4a:	b490      	push	{r4, r7}
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	f107 0408 	add.w	r4, r7, #8
 8000e52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
if (receive_message.funcao == 1)
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d103      	bne.n	8000e64 <selectCommand+0x1c>
 {
	  StateMachine = Identification;
 8000e5c:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <selectCommand+0x7c>)
 8000e5e:	2231      	movs	r2, #49	; 0x31
 8000e60:	701a      	strb	r2, [r3, #0]
 8000e62:	e028      	b.n	8000eb6 <selectCommand+0x6e>
 }
  else if (receive_message.funcao == 2)
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d103      	bne.n	8000e72 <selectCommand+0x2a>
  {
	  StateMachine = Config;
 8000e6a:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <selectCommand+0x7c>)
 8000e6c:	2232      	movs	r2, #50	; 0x32
 8000e6e:	701a      	strb	r2, [r3, #0]
 8000e70:	e021      	b.n	8000eb6 <selectCommand+0x6e>
  }
  else if (receive_message.funcao == 3)
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	2b03      	cmp	r3, #3
 8000e76:	d103      	bne.n	8000e80 <selectCommand+0x38>
  {
	  StateMachine = Start;
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <selectCommand+0x7c>)
 8000e7a:	2233      	movs	r2, #51	; 0x33
 8000e7c:	701a      	strb	r2, [r3, #0]
 8000e7e:	e01a      	b.n	8000eb6 <selectCommand+0x6e>
  }
else if (receive_message.funcao == 4)
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	d103      	bne.n	8000e8e <selectCommand+0x46>
{
	  StateMachine = Read;
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <selectCommand+0x7c>)
 8000e88:	2234      	movs	r2, #52	; 0x34
 8000e8a:	701a      	strb	r2, [r3, #0]
 8000e8c:	e013      	b.n	8000eb6 <selectCommand+0x6e>
}
else if (receive_message.funcao == 5)
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	2b05      	cmp	r3, #5
 8000e92:	d103      	bne.n	8000e9c <selectCommand+0x54>
{
	  StateMachine = ReadError;
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <selectCommand+0x7c>)
 8000e96:	2235      	movs	r2, #53	; 0x35
 8000e98:	701a      	strb	r2, [r3, #0]
 8000e9a:	e00c      	b.n	8000eb6 <selectCommand+0x6e>
}
else if (receive_message.funcao == 6)
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	2b06      	cmp	r3, #6
 8000ea0:	d103      	bne.n	8000eaa <selectCommand+0x62>
{
	  StateMachine = Stop;
 8000ea2:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <selectCommand+0x7c>)
 8000ea4:	2236      	movs	r2, #54	; 0x36
 8000ea6:	701a      	strb	r2, [r3, #0]
 8000ea8:	e005      	b.n	8000eb6 <selectCommand+0x6e>
}
else if (receive_message.funcao == 7)
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	2b07      	cmp	r3, #7
 8000eae:	d102      	bne.n	8000eb6 <selectCommand+0x6e>
{
	  StateMachine = Codification;
 8000eb0:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <selectCommand+0x7c>)
 8000eb2:	2237      	movs	r2, #55	; 0x37
 8000eb4:	701a      	strb	r2, [r3, #0]
}
return StateMachine;
 8000eb6:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <selectCommand+0x7c>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc90      	pop	{r4, r7}
 8000ec0:	b004      	add	sp, #16
 8000ec2:	4770      	bx	lr
 8000ec4:	20000396 	.word	0x20000396

08000ec8 <getID>:

void getID()
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
	uint16_t codCefise=0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	80fb      	strh	r3, [r7, #6]
	receive_message.dadosCount = 1;
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <getID+0x34>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	611a      	str	r2, [r3, #16]
	FLASH_le_16bits(END_INICIAL, &codCefise);
 8000ed8:	1dbb      	adds	r3, r7, #6
 8000eda:	4619      	mov	r1, r3
 8000edc:	4808      	ldr	r0, [pc, #32]	; (8000f00 <getID+0x38>)
 8000ede:	f7ff f972 	bl	80001c6 <FLASH_le_16bits>
	if(codCefise != 0xFFFF)
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d003      	beq.n	8000ef4 <getID+0x2c>
	{
		infoDevice.Id = codCefise;
 8000eec:	88fb      	ldrh	r3, [r7, #6]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <getID+0x3c>)
 8000ef2:	601a      	str	r2, [r3, #0]
	}
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000368 	.word	0x20000368
 8000f00:	0800f000 	.word	0x0800f000
 8000f04:	20000384 	.word	0x20000384

08000f08 <setID>:

void setID()
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
	uint16_t codCefise=0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	80fb      	strh	r3, [r7, #6]
	receive_message.dadosCount = 1;
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <setID+0x3c>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	611a      	str	r2, [r3, #16]
	FLASH_apaga(END_INICIAL, 1);
 8000f18:	2101      	movs	r1, #1
 8000f1a:	480b      	ldr	r0, [pc, #44]	; (8000f48 <setID+0x40>)
 8000f1c:	f7ff f916 	bl	800014c <FLASH_apaga>
	codCefise = dados[0];
 8000f20:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <setID+0x44>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	80fb      	strh	r3, [r7, #6]
	infoDevice.Id = codCefise;
 8000f28:	88fb      	ldrh	r3, [r7, #6]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <setID+0x48>)
 8000f2e:	601a      	str	r2, [r3, #0]
	FLASH_escreve_16bits(END_INICIAL, &codCefise);
 8000f30:	1dbb      	adds	r3, r7, #6
 8000f32:	4619      	mov	r1, r3
 8000f34:	4804      	ldr	r0, [pc, #16]	; (8000f48 <setID+0x40>)
 8000f36:	f7ff f929 	bl	800018c <FLASH_escreve_16bits>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000368 	.word	0x20000368
 8000f48:	0800f000 	.word	0x0800f000
 8000f4c:	200002d0 	.word	0x200002d0
 8000f50:	20000384 	.word	0x20000384

08000f54 <DeviceParamenter>:

void DeviceParamenter(struct Recepcao message)
{
 8000f54:	b084      	sub	sp, #16
 8000f56:	b490      	push	{r4, r7}
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	f107 0408 	add.w	r4, r7, #8
 8000f5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
timeTotal = dados[1];
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <DeviceParamenter+0x40>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <DeviceParamenter+0x44>)
 8000f6a:	701a      	strb	r2, [r3, #0]
switch(dados[0])
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <DeviceParamenter+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d002      	beq.n	8000f7a <DeviceParamenter+0x26>
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d004      	beq.n	8000f82 <DeviceParamenter+0x2e>
	case 0x02:
		readStatus = MAN;
	break;

}
}
 8000f78:	e007      	b.n	8000f8a <DeviceParamenter+0x36>
		readStatus = AUTO;
 8000f7a:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <DeviceParamenter+0x48>)
 8000f7c:	2246      	movs	r2, #70	; 0x46
 8000f7e:	701a      	strb	r2, [r3, #0]
	break;
 8000f80:	e003      	b.n	8000f8a <DeviceParamenter+0x36>
		readStatus = MAN;
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <DeviceParamenter+0x48>)
 8000f84:	224d      	movs	r2, #77	; 0x4d
 8000f86:	701a      	strb	r2, [r3, #0]
	break;
 8000f88:	bf00      	nop
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc90      	pop	{r4, r7}
 8000f90:	b004      	add	sp, #16
 8000f92:	4770      	bx	lr
 8000f94:	200002d0 	.word	0x200002d0
 8000f98:	20000330 	.word	0x20000330
 8000f9c:	200002c6 	.word	0x200002c6

08000fa0 <StartDevice>:

char StartDevice(char deviceFlag)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
char startEncoder;
if(deviceFlag == 0)
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d104      	bne.n	8000fba <StartDevice+0x1a>
{
//	startEncoder = HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
//	startEncoder = HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_1);
	startEncoder = HAL_OK;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000fb4:	200a      	movs	r0, #10
 8000fb6:	f000 ff87 	bl	8001ec8 <HAL_Delay>
	//
}
if(startEncoder == HAL_OK)
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d101      	bne.n	8000fc4 <StartDevice+0x24>
	return 1;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e000      	b.n	8000fc6 <StartDevice+0x26>
else return 0;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <TransmitData>:

void TransmitData(struct Recepcao Send_message,int32_t *dataToSend, uint8_t dataLenght)
{
 8000fd0:	b084      	sub	sp, #16
 8000fd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fd6:	b08b      	sub	sp, #44	; 0x2c
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	f107 0650 	add.w	r6, r7, #80	; 0x50
 8000fde:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000fe2:	466b      	mov	r3, sp
 8000fe4:	607b      	str	r3, [r7, #4]
uint8_t txBuffer[dataLenght];
 8000fe6:	f897 6070 	ldrb.w	r6, [r7, #112]	; 0x70
 8000fea:	4633      	mov	r3, r6
 8000fec:	3b01      	subs	r3, #1
 8000fee:	623b      	str	r3, [r7, #32]
 8000ff0:	b2f3      	uxtb	r3, r6
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	60fa      	str	r2, [r7, #12]
 8000ff8:	f04f 0200 	mov.w	r2, #0
 8000ffc:	f04f 0300 	mov.w	r3, #0
 8001000:	68f9      	ldr	r1, [r7, #12]
 8001002:	00cb      	lsls	r3, r1, #3
 8001004:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001008:	4684      	mov	ip, r0
 800100a:	ea43 735c 	orr.w	r3, r3, ip, lsr #29
 800100e:	4601      	mov	r1, r0
 8001010:	00ca      	lsls	r2, r1, #3
 8001012:	b2f3      	uxtb	r3, r6
 8001014:	2200      	movs	r2, #0
 8001016:	469a      	mov	sl, r3
 8001018:	4693      	mov	fp, r2
 800101a:	f04f 0200 	mov.w	r2, #0
 800101e:	f04f 0300 	mov.w	r3, #0
 8001022:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001026:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800102a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800102e:	4633      	mov	r3, r6
 8001030:	3307      	adds	r3, #7
 8001032:	08db      	lsrs	r3, r3, #3
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	ebad 0d03 	sub.w	sp, sp, r3
 800103a:	466b      	mov	r3, sp
 800103c:	3300      	adds	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
static uint8_t txBufferRead[67];
uint8_t errorBuffer[dataLenght];
 8001040:	f897 1070 	ldrb.w	r1, [r7, #112]	; 0x70
 8001044:	460b      	mov	r3, r1
 8001046:	3b01      	subs	r3, #1
 8001048:	61bb      	str	r3, [r7, #24]
 800104a:	b2cb      	uxtb	r3, r1
 800104c:	2200      	movs	r2, #0
 800104e:	4698      	mov	r8, r3
 8001050:	4691      	mov	r9, r2
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	f04f 0300 	mov.w	r3, #0
 800105a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800105e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001062:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001066:	b2cb      	uxtb	r3, r1
 8001068:	2200      	movs	r2, #0
 800106a:	461c      	mov	r4, r3
 800106c:	4615      	mov	r5, r2
 800106e:	f04f 0200 	mov.w	r2, #0
 8001072:	f04f 0300 	mov.w	r3, #0
 8001076:	00eb      	lsls	r3, r5, #3
 8001078:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800107c:	00e2      	lsls	r2, r4, #3
 800107e:	460b      	mov	r3, r1
 8001080:	3307      	adds	r3, #7
 8001082:	08db      	lsrs	r3, r3, #3
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	ebad 0d03 	sub.w	sp, sp, r3
 800108a:	466b      	mov	r3, sp
 800108c:	3300      	adds	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
uint8_t counter = 2;
 8001090:	2302      	movs	r3, #2
 8001092:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
uint8_t countArray = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
uint8_t counterAux = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
switch(StateMachine)
 80010a2:	4ba8      	ldr	r3, [pc, #672]	; (8001344 <TransmitData+0x374>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	3b31      	subs	r3, #49	; 0x31
 80010a8:	2b14      	cmp	r3, #20
 80010aa:	f200 8369 	bhi.w	8001780 <TransmitData+0x7b0>
 80010ae:	a201      	add	r2, pc, #4	; (adr r2, 80010b4 <TransmitData+0xe4>)
 80010b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b4:	08001109 	.word	0x08001109
 80010b8:	080011bb 	.word	0x080011bb
 80010bc:	08001205 	.word	0x08001205
 80010c0:	0800124f 	.word	0x0800124f
 80010c4:	0800135d 	.word	0x0800135d
 80010c8:	0800138b 	.word	0x0800138b
 80010cc:	08001163 	.word	0x08001163
 80010d0:	08001781 	.word	0x08001781
 80010d4:	08001781 	.word	0x08001781
 80010d8:	08001781 	.word	0x08001781
 80010dc:	08001781 	.word	0x08001781
 80010e0:	08001781 	.word	0x08001781
 80010e4:	08001781 	.word	0x08001781
 80010e8:	08001781 	.word	0x08001781
 80010ec:	08001781 	.word	0x08001781
 80010f0:	08001781 	.word	0x08001781
 80010f4:	08001781 	.word	0x08001781
 80010f8:	08001781 	.word	0x08001781
 80010fc:	08001781 	.word	0x08001781
 8001100:	08001781 	.word	0x08001781
 8001104:	080013d7 	.word	0x080013d7
{
	case Identification:
		txBuffer[0] = Send_message.inicio;
 8001108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800110a:	b2da      	uxtb	r2, r3
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	701a      	strb	r2, [r3, #0]
		txBuffer[1] = Send_message.endDestino;
 8001110:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001112:	b2da      	uxtb	r2, r3
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	705a      	strb	r2, [r3, #1]
		txBuffer[2] = Send_message.endOrigem;
 8001118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800111a:	b2da      	uxtb	r2, r3
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	709a      	strb	r2, [r3, #2]
		txBuffer[3] = Send_message.funcao;
 8001120:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001122:	b2da      	uxtb	r2, r3
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	70da      	strb	r2, [r3, #3]
		txBuffer[4] = Send_message.dadosCount;
 8001128:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800112a:	b2da      	uxtb	r2, r3
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	711a      	strb	r2, [r3, #4]
		if(Send_message.dadosCount>0)
 8001130:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001132:	2b00      	cmp	r3, #0
 8001134:	dd04      	ble.n	8001140 <TransmitData+0x170>
		{
			txBuffer[5] = infoDevice.Id;
 8001136:	4b84      	ldr	r3, [pc, #528]	; (8001348 <TransmitData+0x378>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	b2da      	uxtb	r2, r3
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	715a      	strb	r2, [r3, #5]
		}
		txBuffer[6] = Checksum(txBuffer);
 8001140:	69f8      	ldr	r0, [r7, #28]
 8001142:	f000 fb8d 	bl	8001860 <Checksum>
 8001146:	4603      	mov	r3, r0
 8001148:	b2da      	uxtb	r2, r3
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	719a      	strb	r2, [r3, #6]
		txBuffer[7] = Send_message.fim;
 800114e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001150:	b2da      	uxtb	r2, r3
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	71da      	strb	r2, [r3, #7]
		CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 8001156:	b2b3      	uxth	r3, r6
 8001158:	4619      	mov	r1, r3
 800115a:	69f8      	ldr	r0, [r7, #28]
 800115c:	f009 fada 	bl	800a714 <CDC_Transmit_FS>

	break;
 8001160:	e30e      	b.n	8001780 <TransmitData+0x7b0>

	case Codification:
		txBuffer[0] = Send_message.inicio;
 8001162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001164:	b2da      	uxtb	r2, r3
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	701a      	strb	r2, [r3, #0]
		txBuffer[1] = Send_message.endDestino;
 800116a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800116c:	b2da      	uxtb	r2, r3
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	705a      	strb	r2, [r3, #1]
		txBuffer[2] = Send_message.endOrigem;
 8001172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001174:	b2da      	uxtb	r2, r3
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	709a      	strb	r2, [r3, #2]
		txBuffer[3] = 0x07;
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	2207      	movs	r2, #7
 800117e:	70da      	strb	r2, [r3, #3]
		txBuffer[4] = Send_message.dadosCount;
 8001180:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001182:	b2da      	uxtb	r2, r3
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	711a      	strb	r2, [r3, #4]
		if(Send_message.dadosCount>0)
 8001188:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800118a:	2b00      	cmp	r3, #0
 800118c:	dd04      	ble.n	8001198 <TransmitData+0x1c8>
		{
			txBuffer[5] = infoDevice.Id;
 800118e:	4b6e      	ldr	r3, [pc, #440]	; (8001348 <TransmitData+0x378>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	715a      	strb	r2, [r3, #5]
		}
		txBuffer[6] = Checksum(txBuffer);
 8001198:	69f8      	ldr	r0, [r7, #28]
 800119a:	f000 fb61 	bl	8001860 <Checksum>
 800119e:	4603      	mov	r3, r0
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	719a      	strb	r2, [r3, #6]
		txBuffer[7] = Send_message.fim;
 80011a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	71da      	strb	r2, [r3, #7]
		CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 80011ae:	b2b3      	uxth	r3, r6
 80011b0:	4619      	mov	r1, r3
 80011b2:	69f8      	ldr	r0, [r7, #28]
 80011b4:	f009 faae 	bl	800a714 <CDC_Transmit_FS>

	break;
 80011b8:	e2e2      	b.n	8001780 <TransmitData+0x7b0>
	case Config:
		txBuffer[0] = Send_message.inicio;
 80011ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	701a      	strb	r2, [r3, #0]
		txBuffer[1] = infoDevice.Id;
 80011c2:	4b61      	ldr	r3, [pc, #388]	; (8001348 <TransmitData+0x378>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	705a      	strb	r2, [r3, #1]
		txBuffer[2] = Send_message.endOrigem;
 80011cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	709a      	strb	r2, [r3, #2]
		txBuffer[3] = Send_message.funcao;
 80011d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	70da      	strb	r2, [r3, #3]
		txBuffer[4] = 0x00;
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	2200      	movs	r2, #0
 80011e0:	711a      	strb	r2, [r3, #4]
		txBuffer[5] = Checksum(txBuffer);
 80011e2:	69f8      	ldr	r0, [r7, #28]
 80011e4:	f000 fb3c 	bl	8001860 <Checksum>
 80011e8:	4603      	mov	r3, r0
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	715a      	strb	r2, [r3, #5]
		txBuffer[6] = Send_message.fim;
 80011f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	719a      	strb	r2, [r3, #6]
		CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 80011f8:	b2b3      	uxth	r3, r6
 80011fa:	4619      	mov	r1, r3
 80011fc:	69f8      	ldr	r0, [r7, #28]
 80011fe:	f009 fa89 	bl	800a714 <CDC_Transmit_FS>

	break;
 8001202:	e2bd      	b.n	8001780 <TransmitData+0x7b0>
	case Start: // Msg de inicio de dispositivo
		txBuffer[0] = Send_message.inicio;
 8001204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001206:	b2da      	uxtb	r2, r3
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	701a      	strb	r2, [r3, #0]
		txBuffer[1] = infoDevice.Id;
 800120c:	4b4e      	ldr	r3, [pc, #312]	; (8001348 <TransmitData+0x378>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	705a      	strb	r2, [r3, #1]
		txBuffer[2] = Send_message.endOrigem;
 8001216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001218:	b2da      	uxtb	r2, r3
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	709a      	strb	r2, [r3, #2]
		txBuffer[3] = 0x03;
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	2203      	movs	r2, #3
 8001222:	70da      	strb	r2, [r3, #3]
		txBuffer[4] = Send_message.dadosCount;
 8001224:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001226:	b2da      	uxtb	r2, r3
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	711a      	strb	r2, [r3, #4]
		txBuffer[5] = Checksum(txBuffer);
 800122c:	69f8      	ldr	r0, [r7, #28]
 800122e:	f000 fb17 	bl	8001860 <Checksum>
 8001232:	4603      	mov	r3, r0
 8001234:	b2da      	uxtb	r2, r3
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	715a      	strb	r2, [r3, #5]
		txBuffer[6] = Send_message.fim;
 800123a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800123c:	b2da      	uxtb	r2, r3
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	719a      	strb	r2, [r3, #6]
		CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 8001242:	b2b3      	uxth	r3, r6
 8001244:	4619      	mov	r1, r3
 8001246:	69f8      	ldr	r0, [r7, #28]
 8001248:	f009 fa64 	bl	800a714 <CDC_Transmit_FS>
	break;
 800124c:	e298      	b.n	8001780 <TransmitData+0x7b0>

	case Read:
		txBufferRead[0] = Send_message.inicio;
 800124e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4b3e      	ldr	r3, [pc, #248]	; (800134c <TransmitData+0x37c>)
 8001254:	701a      	strb	r2, [r3, #0]
		txBufferRead[1] = infoDevice.Id;
 8001256:	4b3c      	ldr	r3, [pc, #240]	; (8001348 <TransmitData+0x378>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	b2da      	uxtb	r2, r3
 800125c:	4b3b      	ldr	r3, [pc, #236]	; (800134c <TransmitData+0x37c>)
 800125e:	705a      	strb	r2, [r3, #1]
		txBufferRead[2] = Send_message.endOrigem;
 8001260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001262:	b2da      	uxtb	r2, r3
 8001264:	4b39      	ldr	r3, [pc, #228]	; (800134c <TransmitData+0x37c>)
 8001266:	709a      	strb	r2, [r3, #2]
		txBufferRead[3] = 0x04;
 8001268:	4b38      	ldr	r3, [pc, #224]	; (800134c <TransmitData+0x37c>)
 800126a:	2204      	movs	r2, #4
 800126c:	70da      	strb	r2, [r3, #3]
		txBufferRead[4] = 0x3C;
 800126e:	4b37      	ldr	r3, [pc, #220]	; (800134c <TransmitData+0x37c>)
 8001270:	223c      	movs	r2, #60	; 0x3c
 8001272:	711a      	strb	r2, [r3, #4]
		for(countArray = 0; countArray<10; countArray++)
 8001274:	2300      	movs	r3, #0
 8001276:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800127a:	e04c      	b.n	8001316 <TransmitData+0x346>
		{
//			timeEncoder.all = currentTime[countArray];
			timeEncoder.all = bufferTime[countArray];
 800127c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001280:	4a33      	ldr	r2, [pc, #204]	; (8001350 <TransmitData+0x380>)
 8001282:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001286:	b29a      	uxth	r2, r3
 8001288:	4b32      	ldr	r3, [pc, #200]	; (8001354 <TransmitData+0x384>)
 800128a:	801a      	strh	r2, [r3, #0]
			encoderPulso.all = dataToSend[countArray];
 800128c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001294:	4413      	add	r3, r2
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a2f      	ldr	r2, [pc, #188]	; (8001358 <TransmitData+0x388>)
 800129a:	6013      	str	r3, [r2, #0]
			for(counter = 2; counter>0; counter--)
 800129c:	2302      	movs	r3, #2
 800129e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80012a2:	e013      	b.n	80012cc <TransmitData+0x2fc>
			{
				txBufferRead[5+counterAux] = timeEncoder.pt[counter-1];
 80012a4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012a8:	1e5a      	subs	r2, r3, #1
 80012aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012ae:	3305      	adds	r3, #5
 80012b0:	4928      	ldr	r1, [pc, #160]	; (8001354 <TransmitData+0x384>)
 80012b2:	5c89      	ldrb	r1, [r1, r2]
 80012b4:	4a25      	ldr	r2, [pc, #148]	; (800134c <TransmitData+0x37c>)
 80012b6:	54d1      	strb	r1, [r2, r3]
				counterAux++;
 80012b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012bc:	3301      	adds	r3, #1
 80012be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for(counter = 2; counter>0; counter--)
 80012c2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012c6:	3b01      	subs	r3, #1
 80012c8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80012cc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1e7      	bne.n	80012a4 <TransmitData+0x2d4>
			}
			for(counter = 4; counter>0; counter--)
 80012d4:	2304      	movs	r3, #4
 80012d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80012da:	e013      	b.n	8001304 <TransmitData+0x334>
			{
				txBufferRead[5+counterAux] = encoderPulso.pt[counter-1];
 80012dc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012e0:	1e5a      	subs	r2, r3, #1
 80012e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012e6:	3305      	adds	r3, #5
 80012e8:	491b      	ldr	r1, [pc, #108]	; (8001358 <TransmitData+0x388>)
 80012ea:	5c89      	ldrb	r1, [r1, r2]
 80012ec:	4a17      	ldr	r2, [pc, #92]	; (800134c <TransmitData+0x37c>)
 80012ee:	54d1      	strb	r1, [r2, r3]
				counterAux++;
 80012f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012f4:	3301      	adds	r3, #1
 80012f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for(counter = 4; counter>0; counter--)
 80012fa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012fe:	3b01      	subs	r3, #1
 8001300:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001304:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1e7      	bne.n	80012dc <TransmitData+0x30c>
		for(countArray = 0; countArray<10; countArray++)
 800130c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001310:	3301      	adds	r3, #1
 8001312:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001316:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800131a:	2b09      	cmp	r3, #9
 800131c:	d9ae      	bls.n	800127c <TransmitData+0x2ac>
			}
		}
		txBufferRead[65] = Checksum(txBufferRead);
 800131e:	480b      	ldr	r0, [pc, #44]	; (800134c <TransmitData+0x37c>)
 8001320:	f000 fa9e 	bl	8001860 <Checksum>
 8001324:	4603      	mov	r3, r0
 8001326:	b2da      	uxtb	r2, r3
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <TransmitData+0x37c>)
 800132a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		txBufferRead[66] = Send_message.fim;
 800132e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <TransmitData+0x37c>)
 8001334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

		CDC_Transmit_FS((uint8_t*)txBufferRead, sizeof(txBufferRead));
 8001338:	2143      	movs	r1, #67	; 0x43
 800133a:	4804      	ldr	r0, [pc, #16]	; (800134c <TransmitData+0x37c>)
 800133c:	f009 f9ea 	bl	800a714 <CDC_Transmit_FS>

	break;
 8001340:	e21e      	b.n	8001780 <TransmitData+0x7b0>
 8001342:	bf00      	nop
 8001344:	20000396 	.word	0x20000396
 8001348:	20000384 	.word	0x20000384
 800134c:	200003d4 	.word	0x200003d4
 8001350:	200003b0 	.word	0x200003b0
 8001354:	20000390 	.word	0x20000390
 8001358:	2000038c 	.word	0x2000038c

	case ReadError:
		txBufferRead[0] = 0x0A;
 800135c:	4b90      	ldr	r3, [pc, #576]	; (80015a0 <TransmitData+0x5d0>)
 800135e:	220a      	movs	r2, #10
 8001360:	701a      	strb	r2, [r3, #0]
		txBufferRead[3] = 0x05;
 8001362:	4b8f      	ldr	r3, [pc, #572]	; (80015a0 <TransmitData+0x5d0>)
 8001364:	2205      	movs	r2, #5
 8001366:	70da      	strb	r2, [r3, #3]
		txBufferRead[65] = Checksum(txBufferRead);
 8001368:	488d      	ldr	r0, [pc, #564]	; (80015a0 <TransmitData+0x5d0>)
 800136a:	f000 fa79 	bl	8001860 <Checksum>
 800136e:	4603      	mov	r3, r0
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4b8b      	ldr	r3, [pc, #556]	; (80015a0 <TransmitData+0x5d0>)
 8001374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		txBufferRead[66] = 0x0F;
 8001378:	4b89      	ldr	r3, [pc, #548]	; (80015a0 <TransmitData+0x5d0>)
 800137a:	220f      	movs	r2, #15
 800137c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		CDC_Transmit_FS((uint8_t*)txBufferRead, sizeof(txBufferRead));
 8001380:	2143      	movs	r1, #67	; 0x43
 8001382:	4887      	ldr	r0, [pc, #540]	; (80015a0 <TransmitData+0x5d0>)
 8001384:	f009 f9c6 	bl	800a714 <CDC_Transmit_FS>
	break;
 8001388:	e1fa      	b.n	8001780 <TransmitData+0x7b0>

	case Stop:
	txBuffer[0] = Send_message.inicio;
 800138a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800138c:	b2da      	uxtb	r2, r3
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	701a      	strb	r2, [r3, #0]
	txBuffer[1] = infoDevice.Id;
 8001392:	4b84      	ldr	r3, [pc, #528]	; (80015a4 <TransmitData+0x5d4>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	b2da      	uxtb	r2, r3
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	705a      	strb	r2, [r3, #1]
	txBuffer[2] = Send_message.endOrigem;
 800139c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	709a      	strb	r2, [r3, #2]
	txBuffer[3] = Send_message.funcao;
 80013a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	70da      	strb	r2, [r3, #3]
	txBuffer[4] = Send_message.dadosCount;
 80013ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	711a      	strb	r2, [r3, #4]
	txBuffer[5] = Checksum(txBuffer);
 80013b4:	69f8      	ldr	r0, [r7, #28]
 80013b6:	f000 fa53 	bl	8001860 <Checksum>
 80013ba:	4603      	mov	r3, r0
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	715a      	strb	r2, [r3, #5]
	txBuffer[6] = Send_message.fim;
 80013c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	719a      	strb	r2, [r3, #6]
	CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 80013ca:	b2b3      	uxth	r3, r6
 80013cc:	4619      	mov	r1, r3
 80013ce:	69f8      	ldr	r0, [r7, #28]
 80013d0:	f009 f9a0 	bl	800a714 <CDC_Transmit_FS>
	break;
 80013d4:	e1d4      	b.n	8001780 <TransmitData+0x7b0>

	case error:
		if(errorFlag == errorChecksum)
 80013d6:	4b74      	ldr	r3, [pc, #464]	; (80015a8 <TransmitData+0x5d8>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b30      	cmp	r3, #48	; 0x30
 80013dc:	d12b      	bne.n	8001436 <TransmitData+0x466>
		{
			txBuffer[0] = Send_message.inicio;
 80013de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 80013e6:	4b6f      	ldr	r3, [pc, #444]	; (80015a4 <TransmitData+0x5d4>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 80013f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (Send_message.funcao | 0xF0);
 80013f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013fa:	b25b      	sxtb	r3, r3
 80013fc:	f063 030f 	orn	r3, r3, #15
 8001400:	b25b      	sxtb	r3, r3
 8001402:	b2da      	uxtb	r2, r3
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	2201      	movs	r2, #1
 800140c:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x00; //codigo de erro
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	2200      	movs	r2, #0
 8001412:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 8001414:	69f8      	ldr	r0, [r7, #28]
 8001416:	f000 fa23 	bl	8001860 <Checksum>
 800141a:	4603      	mov	r3, r0
 800141c:	b2da      	uxtb	r2, r3
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 8001422:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001424:	b2da      	uxtb	r2, r3
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 800142a:	b2b3      	uxth	r3, r6
 800142c:	4619      	mov	r1, r3
 800142e:	69f8      	ldr	r0, [r7, #28]
 8001430:	f009 f970 	bl	800a714 <CDC_Transmit_FS>
			txBuffer[5] = 0x09;
			txBuffer[6] = Checksum(txBuffer);
			txBuffer[7] = Send_message.fim;
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
		}
		break;
 8001434:	e1a3      	b.n	800177e <TransmitData+0x7ae>
		else if (errorFlag == timeOut)
 8001436:	4b5c      	ldr	r3, [pc, #368]	; (80015a8 <TransmitData+0x5d8>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b31      	cmp	r3, #49	; 0x31
 800143c:	d12b      	bne.n	8001496 <TransmitData+0x4c6>
			txBuffer[0] = Send_message.inicio;
 800143e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001440:	b2da      	uxtb	r2, r3
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 8001446:	4b57      	ldr	r3, [pc, #348]	; (80015a4 <TransmitData+0x5d4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	b2da      	uxtb	r2, r3
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 8001450:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001452:	b2da      	uxtb	r2, r3
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (Send_message.funcao | 0xF0);
 8001458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800145a:	b25b      	sxtb	r3, r3
 800145c:	f063 030f 	orn	r3, r3, #15
 8001460:	b25b      	sxtb	r3, r3
 8001462:	b2da      	uxtb	r2, r3
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	2201      	movs	r2, #1
 800146c:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x01;
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	2201      	movs	r2, #1
 8001472:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 8001474:	69f8      	ldr	r0, [r7, #28]
 8001476:	f000 f9f3 	bl	8001860 <Checksum>
 800147a:	4603      	mov	r3, r0
 800147c:	b2da      	uxtb	r2, r3
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 8001482:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001484:	b2da      	uxtb	r2, r3
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 800148a:	b2b3      	uxth	r3, r6
 800148c:	4619      	mov	r1, r3
 800148e:	69f8      	ldr	r0, [r7, #28]
 8001490:	f009 f940 	bl	800a714 <CDC_Transmit_FS>
		break;
 8001494:	e173      	b.n	800177e <TransmitData+0x7ae>
		else if (errorFlag == noAddress)
 8001496:	4b44      	ldr	r3, [pc, #272]	; (80015a8 <TransmitData+0x5d8>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b32      	cmp	r3, #50	; 0x32
 800149c:	d126      	bne.n	80014ec <TransmitData+0x51c>
			txBuffer[0] = Send_message.inicio;
 800149e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 80014a6:	4b3f      	ldr	r3, [pc, #252]	; (80015a4 <TransmitData+0x5d4>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 80014b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (0x01 | 0xF0);
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	22f1      	movs	r2, #241	; 0xf1
 80014bc:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	2201      	movs	r2, #1
 80014c2:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x02;
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	2202      	movs	r2, #2
 80014c8:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 80014ca:	69f8      	ldr	r0, [r7, #28]
 80014cc:	f000 f9c8 	bl	8001860 <Checksum>
 80014d0:	4603      	mov	r3, r0
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 80014d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 80014e0:	b2b3      	uxth	r3, r6
 80014e2:	4619      	mov	r1, r3
 80014e4:	69f8      	ldr	r0, [r7, #28]
 80014e6:	f009 f915 	bl	800a714 <CDC_Transmit_FS>
		break;
 80014ea:	e148      	b.n	800177e <TransmitData+0x7ae>
		else if (errorFlag == errorAddress)
 80014ec:	4b2e      	ldr	r3, [pc, #184]	; (80015a8 <TransmitData+0x5d8>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b33      	cmp	r3, #51	; 0x33
 80014f2:	d125      	bne.n	8001540 <TransmitData+0x570>
			txBuffer[0] = Send_message.inicio;
 80014f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 80014fc:	4b29      	ldr	r3, [pc, #164]	; (80015a4 <TransmitData+0x5d4>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	b2da      	uxtb	r2, r3
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 8001506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001508:	b2da      	uxtb	r2, r3
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (0x01 | 0xF0);
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	22f1      	movs	r2, #241	; 0xf1
 8001512:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	2201      	movs	r2, #1
 8001518:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x03;
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	2203      	movs	r2, #3
 800151e:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 8001520:	69f8      	ldr	r0, [r7, #28]
 8001522:	f000 f99d 	bl	8001860 <Checksum>
 8001526:	4603      	mov	r3, r0
 8001528:	b2da      	uxtb	r2, r3
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = 0x0F;
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	220f      	movs	r2, #15
 8001532:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 8001534:	b2b3      	uxth	r3, r6
 8001536:	4619      	mov	r1, r3
 8001538:	69f8      	ldr	r0, [r7, #28]
 800153a:	f009 f8eb 	bl	800a714 <CDC_Transmit_FS>
		break;
 800153e:	e11e      	b.n	800177e <TransmitData+0x7ae>
		else if (errorFlag == errorDevice)
 8001540:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <TransmitData+0x5d8>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b34      	cmp	r3, #52	; 0x34
 8001546:	d131      	bne.n	80015ac <TransmitData+0x5dc>
			txBuffer[0] = Send_message.inicio;
 8001548:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800154a:	b2da      	uxtb	r2, r3
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 8001550:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <TransmitData+0x5d4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	b2da      	uxtb	r2, r3
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 800155a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800155c:	b2da      	uxtb	r2, r3
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (Send_message.funcao | 0xF0);
 8001562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001564:	b25b      	sxtb	r3, r3
 8001566:	f063 030f 	orn	r3, r3, #15
 800156a:	b25b      	sxtb	r3, r3
 800156c:	b2da      	uxtb	r2, r3
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	2201      	movs	r2, #1
 8001576:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x04;
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	2204      	movs	r2, #4
 800157c:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 800157e:	69f8      	ldr	r0, [r7, #28]
 8001580:	f000 f96e 	bl	8001860 <Checksum>
 8001584:	4603      	mov	r3, r0
 8001586:	b2da      	uxtb	r2, r3
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 800158c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800158e:	b2da      	uxtb	r2, r3
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 8001594:	b2b3      	uxth	r3, r6
 8001596:	4619      	mov	r1, r3
 8001598:	69f8      	ldr	r0, [r7, #28]
 800159a:	f009 f8bb 	bl	800a714 <CDC_Transmit_FS>
		break;
 800159e:	e0ee      	b.n	800177e <TransmitData+0x7ae>
 80015a0:	200003d4 	.word	0x200003d4
 80015a4:	20000384 	.word	0x20000384
 80015a8:	20000000 	.word	0x20000000
		else if (errorFlag == errorConfig)
 80015ac:	4b79      	ldr	r3, [pc, #484]	; (8001794 <TransmitData+0x7c4>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b35      	cmp	r3, #53	; 0x35
 80015b2:	d126      	bne.n	8001602 <TransmitData+0x632>
			txBuffer[0] = Send_message.inicio;
 80015b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 80015bc:	4b76      	ldr	r3, [pc, #472]	; (8001798 <TransmitData+0x7c8>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 80015c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (0x02 | 0xF0);
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	22f2      	movs	r2, #242	; 0xf2
 80015d2:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	2201      	movs	r2, #1
 80015d8:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x05;
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	2205      	movs	r2, #5
 80015de:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 80015e0:	69f8      	ldr	r0, [r7, #28]
 80015e2:	f000 f93d 	bl	8001860 <Checksum>
 80015e6:	4603      	mov	r3, r0
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 80015ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 80015f6:	b2b3      	uxth	r3, r6
 80015f8:	4619      	mov	r1, r3
 80015fa:	69f8      	ldr	r0, [r7, #28]
 80015fc:	f009 f88a 	bl	800a714 <CDC_Transmit_FS>
		break;
 8001600:	e0bd      	b.n	800177e <TransmitData+0x7ae>
		else if (errorFlag == errorFunction)
 8001602:	4b64      	ldr	r3, [pc, #400]	; (8001794 <TransmitData+0x7c4>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b36      	cmp	r3, #54	; 0x36
 8001608:	d12b      	bne.n	8001662 <TransmitData+0x692>
			txBuffer[0] = Send_message.inicio;
 800160a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800160c:	b2da      	uxtb	r2, r3
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 8001612:	4b61      	ldr	r3, [pc, #388]	; (8001798 <TransmitData+0x7c8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	b2da      	uxtb	r2, r3
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 800161c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800161e:	b2da      	uxtb	r2, r3
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (Send_message.funcao | 0xF0);
 8001624:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001626:	b25b      	sxtb	r3, r3
 8001628:	f063 030f 	orn	r3, r3, #15
 800162c:	b25b      	sxtb	r3, r3
 800162e:	b2da      	uxtb	r2, r3
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	2201      	movs	r2, #1
 8001638:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x06;
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	2206      	movs	r2, #6
 800163e:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 8001640:	69f8      	ldr	r0, [r7, #28]
 8001642:	f000 f90d 	bl	8001860 <Checksum>
 8001646:	4603      	mov	r3, r0
 8001648:	b2da      	uxtb	r2, r3
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 800164e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001650:	b2da      	uxtb	r2, r3
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 8001656:	b2b3      	uxth	r3, r6
 8001658:	4619      	mov	r1, r3
 800165a:	69f8      	ldr	r0, [r7, #28]
 800165c:	f009 f85a 	bl	800a714 <CDC_Transmit_FS>
		break;
 8001660:	e08d      	b.n	800177e <TransmitData+0x7ae>
		else if (errorFlag == errorData)
 8001662:	4b4c      	ldr	r3, [pc, #304]	; (8001794 <TransmitData+0x7c4>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b37      	cmp	r3, #55	; 0x37
 8001668:	d12b      	bne.n	80016c2 <TransmitData+0x6f2>
			txBuffer[0] = Send_message.inicio;
 800166a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800166c:	b2da      	uxtb	r2, r3
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 8001672:	4b49      	ldr	r3, [pc, #292]	; (8001798 <TransmitData+0x7c8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	b2da      	uxtb	r2, r3
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 800167c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800167e:	b2da      	uxtb	r2, r3
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (Send_message.funcao | 0xF0);
 8001684:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001686:	b25b      	sxtb	r3, r3
 8001688:	f063 030f 	orn	r3, r3, #15
 800168c:	b25b      	sxtb	r3, r3
 800168e:	b2da      	uxtb	r2, r3
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	2201      	movs	r2, #1
 8001698:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x07;
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	2207      	movs	r2, #7
 800169e:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 80016a0:	69f8      	ldr	r0, [r7, #28]
 80016a2:	f000 f8dd 	bl	8001860 <Checksum>
 80016a6:	4603      	mov	r3, r0
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 80016ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 80016b6:	b2b3      	uxth	r3, r6
 80016b8:	4619      	mov	r1, r3
 80016ba:	69f8      	ldr	r0, [r7, #28]
 80016bc:	f009 f82a 	bl	800a714 <CDC_Transmit_FS>
		break;
 80016c0:	e05d      	b.n	800177e <TransmitData+0x7ae>
		else if (errorFlag == errorStartHeader)
 80016c2:	4b34      	ldr	r3, [pc, #208]	; (8001794 <TransmitData+0x7c4>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b38      	cmp	r3, #56	; 0x38
 80016c8:	d12a      	bne.n	8001720 <TransmitData+0x750>
			txBuffer[0] = 0x0A;
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	220a      	movs	r2, #10
 80016ce:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 80016d0:	4b31      	ldr	r3, [pc, #196]	; (8001798 <TransmitData+0x7c8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 80016da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (Send_message.funcao | 0xF0);
 80016e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016e4:	b25b      	sxtb	r3, r3
 80016e6:	f063 030f 	orn	r3, r3, #15
 80016ea:	b25b      	sxtb	r3, r3
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	2201      	movs	r2, #1
 80016f6:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x08;
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	2208      	movs	r2, #8
 80016fc:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 80016fe:	69f8      	ldr	r0, [r7, #28]
 8001700:	f000 f8ae 	bl	8001860 <Checksum>
 8001704:	4603      	mov	r3, r0
 8001706:	b2da      	uxtb	r2, r3
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 800170c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800170e:	b2da      	uxtb	r2, r3
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 8001714:	b2b3      	uxth	r3, r6
 8001716:	4619      	mov	r1, r3
 8001718:	69f8      	ldr	r0, [r7, #28]
 800171a:	f008 fffb 	bl	800a714 <CDC_Transmit_FS>
		break;
 800171e:	e02e      	b.n	800177e <TransmitData+0x7ae>
		else if (errorFlag == errorEndHeader)
 8001720:	4b1c      	ldr	r3, [pc, #112]	; (8001794 <TransmitData+0x7c4>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b39      	cmp	r3, #57	; 0x39
 8001726:	d12a      	bne.n	800177e <TransmitData+0x7ae>
			txBuffer[0] = Send_message.inicio;
 8001728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800172a:	b2da      	uxtb	r2, r3
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 8001730:	4b19      	ldr	r3, [pc, #100]	; (8001798 <TransmitData+0x7c8>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	b2da      	uxtb	r2, r3
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 800173a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800173c:	b2da      	uxtb	r2, r3
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (Send_message.funcao | 0xF0);
 8001742:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001744:	b25b      	sxtb	r3, r3
 8001746:	f063 030f 	orn	r3, r3, #15
 800174a:	b25b      	sxtb	r3, r3
 800174c:	b2da      	uxtb	r2, r3
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	2201      	movs	r2, #1
 8001756:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x09;
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	2209      	movs	r2, #9
 800175c:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 800175e:	69f8      	ldr	r0, [r7, #28]
 8001760:	f000 f87e 	bl	8001860 <Checksum>
 8001764:	4603      	mov	r3, r0
 8001766:	b2da      	uxtb	r2, r3
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 800176c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800176e:	b2da      	uxtb	r2, r3
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 8001774:	b2b3      	uxth	r3, r6
 8001776:	4619      	mov	r1, r3
 8001778:	69f8      	ldr	r0, [r7, #28]
 800177a:	f008 ffcb 	bl	800a714 <CDC_Transmit_FS>
		break;
 800177e:	bf00      	nop
 8001780:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
}
 8001784:	bf00      	nop
 8001786:	372c      	adds	r7, #44	; 0x2c
 8001788:	46bd      	mov	sp, r7
 800178a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800178e:	b004      	add	sp, #16
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	20000000 	.word	0x20000000
 8001798:	20000384 	.word	0x20000384

0800179c <StopDevice>:

char StopDevice(char deviceFlag)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	71fb      	strb	r3, [r7, #7]
static char stopEncoder;
char contador = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	73fb      	strb	r3, [r7, #15]
if(deviceFlag == 1)
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d110      	bne.n	80017d2 <StopDevice+0x36>
{
//	stopEncoder = HAL_TIM_Encoder_Stop_IT(&htim2, TIM_CHANNEL_ALL);
	stopEncoder = HAL_TIM_Encoder_Stop_IT(&htim2, TIM_CHANNEL_1);
 80017b0:	2100      	movs	r1, #0
 80017b2:	4821      	ldr	r0, [pc, #132]	; (8001838 <StopDevice+0x9c>)
 80017b4:	f003 fd10 	bl	80051d8 <HAL_TIM_Encoder_Stop_IT>
 80017b8:	4603      	mov	r3, r0
 80017ba:	461a      	mov	r2, r3
 80017bc:	4b1f      	ldr	r3, [pc, #124]	; (800183c <StopDevice+0xa0>)
 80017be:	701a      	strb	r2, [r3, #0]
	timerEnable = HAL_TIM_Base_Stop_IT(&htim3);
 80017c0:	481f      	ldr	r0, [pc, #124]	; (8001840 <StopDevice+0xa4>)
 80017c2:	f003 fb8b 	bl	8004edc <HAL_TIM_Base_Stop_IT>
 80017c6:	4603      	mov	r3, r0
 80017c8:	461a      	mov	r2, r3
 80017ca:	4b1e      	ldr	r3, [pc, #120]	; (8001844 <StopDevice+0xa8>)
 80017cc:	601a      	str	r2, [r3, #0]
	deviceFlag = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	71fb      	strb	r3, [r7, #7]
}


HAL_Delay(10);
 80017d2:	200a      	movs	r0, #10
 80017d4:	f000 fb78 	bl	8001ec8 <HAL_Delay>
if(stopEncoder == HAL_OK && timerEnable == HAL_OK)
 80017d8:	4b18      	ldr	r3, [pc, #96]	; (800183c <StopDevice+0xa0>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d126      	bne.n	800182e <StopDevice+0x92>
 80017e0:	4b18      	ldr	r3, [pc, #96]	; (8001844 <StopDevice+0xa8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d122      	bne.n	800182e <StopDevice+0x92>
{
	for(contador=0;contador<10;contador++)
 80017e8:	2300      	movs	r3, #0
 80017ea:	73fb      	strb	r3, [r7, #15]
 80017ec:	e017      	b.n	800181e <StopDevice+0x82>
	{
		counterPulso[contador] = 0;
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	4a15      	ldr	r2, [pc, #84]	; (8001848 <StopDevice+0xac>)
 80017f2:	2100      	movs	r1, #0
 80017f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		fimPulso[contador] = 0;
 80017f8:	7bfb      	ldrb	r3, [r7, #15]
 80017fa:	4a14      	ldr	r2, [pc, #80]	; (800184c <StopDevice+0xb0>)
 80017fc:	2100      	movs	r1, #0
 80017fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		currentTime[contador] = 0;
 8001802:	7bfb      	ldrb	r3, [r7, #15]
 8001804:	4a12      	ldr	r2, [pc, #72]	; (8001850 <StopDevice+0xb4>)
 8001806:	2100      	movs	r1, #0
 8001808:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		transmitFlag = 0;
 800180c:	4b11      	ldr	r3, [pc, #68]	; (8001854 <StopDevice+0xb8>)
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
		USB_FLAG = 0;
 8001812:	4b11      	ldr	r3, [pc, #68]	; (8001858 <StopDevice+0xbc>)
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]
	for(contador=0;contador<10;contador++)
 8001818:	7bfb      	ldrb	r3, [r7, #15]
 800181a:	3301      	adds	r3, #1
 800181c:	73fb      	strb	r3, [r7, #15]
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	2b09      	cmp	r3, #9
 8001822:	d9e4      	bls.n	80017ee <StopDevice+0x52>
	}
	samples = 0;
 8001824:	4b0d      	ldr	r3, [pc, #52]	; (800185c <StopDevice+0xc0>)
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
	return 0;
 800182a:	2300      	movs	r3, #0
 800182c:	e000      	b.n	8001830 <StopDevice+0x94>
}
else return 1;
 800182e:	2301      	movs	r3, #1
}
 8001830:	4618      	mov	r0, r3
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	2000019c 	.word	0x2000019c
 800183c:	20000417 	.word	0x20000417
 8001840:	200001e4 	.word	0x200001e4
 8001844:	20000398 	.word	0x20000398
 8001848:	20000338 	.word	0x20000338
 800184c:	20000308 	.word	0x20000308
 8001850:	2000039c 	.word	0x2000039c
 8001854:	200002cc 	.word	0x200002cc
 8001858:	200002b6 	.word	0x200002b6
 800185c:	200003c4 	.word	0x200003c4

08001860 <Checksum>:


int Checksum(char *c)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
//if(c[0] == 0x0A)//Verifica Byte Inicio
//{
	if(c[4] == 0)Total=7;//Define tamanho do pacote
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3304      	adds	r3, #4
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d102      	bne.n	8001878 <Checksum+0x18>
 8001872:	4b54      	ldr	r3, [pc, #336]	; (80019c4 <Checksum+0x164>)
 8001874:	2207      	movs	r2, #7
 8001876:	701a      	strb	r2, [r3, #0]
	if(c[4] == 1)Total=8;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3304      	adds	r3, #4
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d102      	bne.n	8001888 <Checksum+0x28>
 8001882:	4b50      	ldr	r3, [pc, #320]	; (80019c4 <Checksum+0x164>)
 8001884:	2208      	movs	r2, #8
 8001886:	701a      	strb	r2, [r3, #0]
	if(c[4] == 2)Total=9;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3304      	adds	r3, #4
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b02      	cmp	r3, #2
 8001890:	d102      	bne.n	8001898 <Checksum+0x38>
 8001892:	4b4c      	ldr	r3, [pc, #304]	; (80019c4 <Checksum+0x164>)
 8001894:	2209      	movs	r2, #9
 8001896:	701a      	strb	r2, [r3, #0]
	if(c[4] == 4)Total=11;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3304      	adds	r3, #4
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b04      	cmp	r3, #4
 80018a0:	d102      	bne.n	80018a8 <Checksum+0x48>
 80018a2:	4b48      	ldr	r3, [pc, #288]	; (80019c4 <Checksum+0x164>)
 80018a4:	220b      	movs	r2, #11
 80018a6:	701a      	strb	r2, [r3, #0]
	if(c[4] == 5) Total = 12;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3304      	adds	r3, #4
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b05      	cmp	r3, #5
 80018b0:	d102      	bne.n	80018b8 <Checksum+0x58>
 80018b2:	4b44      	ldr	r3, [pc, #272]	; (80019c4 <Checksum+0x164>)
 80018b4:	220c      	movs	r2, #12
 80018b6:	701a      	strb	r2, [r3, #0]
	if(c[4] == 6) Total = 13;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3304      	adds	r3, #4
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b06      	cmp	r3, #6
 80018c0:	d102      	bne.n	80018c8 <Checksum+0x68>
 80018c2:	4b40      	ldr	r3, [pc, #256]	; (80019c4 <Checksum+0x164>)
 80018c4:	220d      	movs	r2, #13
 80018c6:	701a      	strb	r2, [r3, #0]
	if(c[4] == 7) Total = 14;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3304      	adds	r3, #4
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b07      	cmp	r3, #7
 80018d0:	d102      	bne.n	80018d8 <Checksum+0x78>
 80018d2:	4b3c      	ldr	r3, [pc, #240]	; (80019c4 <Checksum+0x164>)
 80018d4:	220e      	movs	r2, #14
 80018d6:	701a      	strb	r2, [r3, #0]
	if(c[4] == 8) Total = 15;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3304      	adds	r3, #4
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b08      	cmp	r3, #8
 80018e0:	d102      	bne.n	80018e8 <Checksum+0x88>
 80018e2:	4b38      	ldr	r3, [pc, #224]	; (80019c4 <Checksum+0x164>)
 80018e4:	220f      	movs	r2, #15
 80018e6:	701a      	strb	r2, [r3, #0]
	if(c[4] == 9) Total = 16;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3304      	adds	r3, #4
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b09      	cmp	r3, #9
 80018f0:	d102      	bne.n	80018f8 <Checksum+0x98>
 80018f2:	4b34      	ldr	r3, [pc, #208]	; (80019c4 <Checksum+0x164>)
 80018f4:	2210      	movs	r2, #16
 80018f6:	701a      	strb	r2, [r3, #0]
	if(c[4] == 10) Total = 17;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3304      	adds	r3, #4
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b0a      	cmp	r3, #10
 8001900:	d102      	bne.n	8001908 <Checksum+0xa8>
 8001902:	4b30      	ldr	r3, [pc, #192]	; (80019c4 <Checksum+0x164>)
 8001904:	2211      	movs	r2, #17
 8001906:	701a      	strb	r2, [r3, #0]
	if(c[4] == 12) Total = 19;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3304      	adds	r3, #4
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b0c      	cmp	r3, #12
 8001910:	d102      	bne.n	8001918 <Checksum+0xb8>
 8001912:	4b2c      	ldr	r3, [pc, #176]	; (80019c4 <Checksum+0x164>)
 8001914:	2213      	movs	r2, #19
 8001916:	701a      	strb	r2, [r3, #0]
	if(c[4] == 14) Total = 21;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3304      	adds	r3, #4
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b0e      	cmp	r3, #14
 8001920:	d102      	bne.n	8001928 <Checksum+0xc8>
 8001922:	4b28      	ldr	r3, [pc, #160]	; (80019c4 <Checksum+0x164>)
 8001924:	2215      	movs	r2, #21
 8001926:	701a      	strb	r2, [r3, #0]
	if(c[4] == 23 ) Total = 29;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3304      	adds	r3, #4
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b17      	cmp	r3, #23
 8001930:	d102      	bne.n	8001938 <Checksum+0xd8>
 8001932:	4b24      	ldr	r3, [pc, #144]	; (80019c4 <Checksum+0x164>)
 8001934:	221d      	movs	r2, #29
 8001936:	701a      	strb	r2, [r3, #0]
	if(c[4] == 32 ) Total = 38;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3304      	adds	r3, #4
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b20      	cmp	r3, #32
 8001940:	d102      	bne.n	8001948 <Checksum+0xe8>
 8001942:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <Checksum+0x164>)
 8001944:	2226      	movs	r2, #38	; 0x26
 8001946:	701a      	strb	r2, [r3, #0]
	if(c[4] == 40 ) Total = 47;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3304      	adds	r3, #4
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b28      	cmp	r3, #40	; 0x28
 8001950:	d102      	bne.n	8001958 <Checksum+0xf8>
 8001952:	4b1c      	ldr	r3, [pc, #112]	; (80019c4 <Checksum+0x164>)
 8001954:	222f      	movs	r2, #47	; 0x2f
 8001956:	701a      	strb	r2, [r3, #0]
	if(c[4] == 60 ) Total = 67;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3304      	adds	r3, #4
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b3c      	cmp	r3, #60	; 0x3c
 8001960:	d102      	bne.n	8001968 <Checksum+0x108>
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <Checksum+0x164>)
 8001964:	2243      	movs	r2, #67	; 0x43
 8001966:	701a      	strb	r2, [r3, #0]

	c_sum=0;
 8001968:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <Checksum+0x168>)
 800196a:	2200      	movs	r2, #0
 800196c:	801a      	strh	r2, [r3, #0]
	for(int i=1; i<(Total-2);i++)//Soma os bytes
 800196e:	2301      	movs	r3, #1
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	e00d      	b.n	8001990 <Checksum+0x130>
	{
		c_sum += c[i];
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	b29a      	uxth	r2, r3
 800197e:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <Checksum+0x168>)
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	4413      	add	r3, r2
 8001984:	b29a      	uxth	r2, r3
 8001986:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <Checksum+0x168>)
 8001988:	801a      	strh	r2, [r3, #0]
	for(int i=1; i<(Total-2);i++)//Soma os bytes
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	3301      	adds	r3, #1
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <Checksum+0x164>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	3b02      	subs	r3, #2
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	429a      	cmp	r2, r3
 800199a:	dbeb      	blt.n	8001974 <Checksum+0x114>
	}

	checksum = 0xFF-c_sum;//Faz os calculos seguintes
 800199c:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <Checksum+0x168>)
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	43db      	mvns	r3, r3
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4b09      	ldr	r3, [pc, #36]	; (80019cc <Checksum+0x16c>)
 80019a8:	701a      	strb	r2, [r3, #0]
	checksum += 0x01;
 80019aa:	4b08      	ldr	r3, [pc, #32]	; (80019cc <Checksum+0x16c>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	3301      	adds	r3, #1
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <Checksum+0x16c>)
 80019b4:	701a      	strb	r2, [r3, #0]
//}
return checksum;
 80019b6:	4b05      	ldr	r3, [pc, #20]	; (80019cc <Checksum+0x16c>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	20000395 	.word	0x20000395
 80019c8:	20000392 	.word	0x20000392
 80019cc:	20000394 	.word	0x20000394

080019d0 <HAL_TIM_IC_CaptureCallback>:



//Interrupções
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]

	actualTime = __HAL_TIM_GET_COUNTER(&htim3);
 80019d8:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019de:	b29a      	uxth	r2, r3
 80019e0:	4b2c      	ldr	r3, [pc, #176]	; (8001a94 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80019e2:	801a      	strh	r2, [r3, #0]
	edgeTime += (actualTime - previousTime);
 80019e4:	4b2b      	ldr	r3, [pc, #172]	; (8001a94 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80019e6:	881b      	ldrh	r3, [r3, #0]
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	461a      	mov	r2, r3
 80019ec:	4b2a      	ldr	r3, [pc, #168]	; (8001a98 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	4b29      	ldr	r3, [pc, #164]	; (8001a9c <HAL_TIM_IC_CaptureCallback+0xcc>)
 80019f8:	881b      	ldrh	r3, [r3, #0]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	4413      	add	r3, r2
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	4b26      	ldr	r3, [pc, #152]	; (8001a9c <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001a02:	801a      	strh	r2, [r3, #0]
	previousTime = actualTime;
 8001a04:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001a06:	881b      	ldrh	r3, [r3, #0]
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	4b23      	ldr	r3, [pc, #140]	; (8001a98 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001a0c:	801a      	strh	r2, [r3, #0]
	direction = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 8001a0e:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0310 	and.w	r3, r3, #16
 8001a18:	2b10      	cmp	r3, #16
 8001a1a:	bf0c      	ite	eq
 8001a1c:	2301      	moveq	r3, #1
 8001a1e:	2300      	movne	r3, #0
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	461a      	mov	r2, r3
 8001a24:	4b1f      	ldr	r3, [pc, #124]	; (8001aa4 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001a26:	701a      	strb	r2, [r3, #0]
	if(direction == 0)
 8001a28:	4b1e      	ldr	r3, [pc, #120]	; (8001aa4 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d105      	bne.n	8001a3e <HAL_TIM_IC_CaptureCallback+0x6e>
	{
		pulseCounter++;
 8001a32:	4b1d      	ldr	r3, [pc, #116]	; (8001aa8 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	3301      	adds	r3, #1
 8001a38:	4a1b      	ldr	r2, [pc, #108]	; (8001aa8 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001a3a:	6013      	str	r3, [r2, #0]
 8001a3c:	e009      	b.n	8001a52 <HAL_TIM_IC_CaptureCallback+0x82>
	}
	else if (direction == 1)
 8001a3e:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d104      	bne.n	8001a52 <HAL_TIM_IC_CaptureCallback+0x82>
	{
		pulseCounter--;
 8001a48:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	4a16      	ldr	r2, [pc, #88]	; (8001aa8 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001a50:	6013      	str	r3, [r2, #0]
	}
	fimPulso[samples] = pulseCounter;
 8001a52:	4b16      	ldr	r3, [pc, #88]	; (8001aac <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	4619      	mov	r1, r3
 8001a58:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a14      	ldr	r2, [pc, #80]	; (8001ab0 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8001a5e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	currentTime[samples] = edgeTime;
 8001a62:	4b12      	ldr	r3, [pc, #72]	; (8001aac <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	461a      	mov	r2, r3
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	b299      	uxth	r1, r3
 8001a6e:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8001a70:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
//	currentTime[samples] = actualTime;
	samples++;
 8001a74:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001a7e:	701a      	strb	r2, [r3, #0]
	pulseFlag = TRUE;
 8001a80:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	701a      	strb	r2, [r3, #0]
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr
 8001a90:	200001e4 	.word	0x200001e4
 8001a94:	20000360 	.word	0x20000360
 8001a98:	20000362 	.word	0x20000362
 8001a9c:	20000364 	.word	0x20000364
 8001aa0:	2000019c 	.word	0x2000019c
 8001aa4:	200003cc 	.word	0x200003cc
 8001aa8:	20000334 	.word	0x20000334
 8001aac:	200003c4 	.word	0x200003c4
 8001ab0:	20000308 	.word	0x20000308
 8001ab4:	2000039c 	.word	0x2000039c
 8001ab8:	20000366 	.word	0x20000366

08001abc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
if(EndReception == '\0')
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <HAL_UART_RxCpltCallback+0x2c>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d109      	bne.n	8001ae0 <HAL_UART_RxCpltCallback+0x24>
{
	command(RXBuffer[0]);
 8001acc:	4b07      	ldr	r3, [pc, #28]	; (8001aec <HAL_UART_RxCpltCallback+0x30>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff f8e1 	bl	8000c98 <command>
	HAL_UART_Receive_IT(&huart2, (uint8_t *)RXBuffer, 1);
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	4904      	ldr	r1, [pc, #16]	; (8001aec <HAL_UART_RxCpltCallback+0x30>)
 8001ada:	4805      	ldr	r0, [pc, #20]	; (8001af0 <HAL_UART_RxCpltCallback+0x34>)
 8001adc:	f003 fff1 	bl	8005ac2 <HAL_UART_Receive_IT>
}

}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	200002b7 	.word	0x200002b7
 8001aec:	200002b8 	.word	0x200002b8
 8001af0:	2000022c 	.word	0x2000022c

08001af4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
//	{
//		samples++;
//		newTime = 0;
//	}
//}
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr
	...

08001b08 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	80fb      	strh	r3, [r7, #6]
if(GPIO_Pin == RESET_Pin)
 8001b12:	88fb      	ldrh	r3, [r7, #6]
 8001b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b18:	d105      	bne.n	8001b26 <HAL_GPIO_EXTI_Callback+0x1e>
{
	StateMachine = iddle;
 8001b1a:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_GPIO_EXTI_Callback+0x28>)
 8001b1c:	2249      	movs	r2, #73	; 0x49
 8001b1e:	701a      	strb	r2, [r3, #0]
	EndReception = Reset;
 8001b20:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001b22:	2252      	movs	r2, #82	; 0x52
 8001b24:	701a      	strb	r2, [r3, #0]
}
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr
 8001b30:	20000396 	.word	0x20000396
 8001b34:	200002b7 	.word	0x200002b7

08001b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b3c:	b672      	cpsid	i
}
 8001b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1)
 8001b40:	e7fe      	b.n	8001b40 <Error_Handler+0x8>
	...

08001b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <HAL_MspInit+0x5c>)
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	4a14      	ldr	r2, [pc, #80]	; (8001ba0 <HAL_MspInit+0x5c>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6193      	str	r3, [r2, #24]
 8001b56:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <HAL_MspInit+0x5c>)
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b62:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <HAL_MspInit+0x5c>)
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	4a0e      	ldr	r2, [pc, #56]	; (8001ba0 <HAL_MspInit+0x5c>)
 8001b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	61d3      	str	r3, [r2, #28]
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <HAL_MspInit+0x5c>)
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b76:	607b      	str	r3, [r7, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <HAL_MspInit+0x60>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	4a04      	ldr	r2, [pc, #16]	; (8001ba4 <HAL_MspInit+0x60>)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b96:	bf00      	nop
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40010000 	.word	0x40010000

08001ba8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b088      	sub	sp, #32
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 0310 	add.w	r3, r7, #16
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bc6:	d12b      	bne.n	8001c20 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bc8:	4b17      	ldr	r3, [pc, #92]	; (8001c28 <HAL_TIM_Encoder_MspInit+0x80>)
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	4a16      	ldr	r2, [pc, #88]	; (8001c28 <HAL_TIM_Encoder_MspInit+0x80>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	61d3      	str	r3, [r2, #28]
 8001bd4:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <HAL_TIM_Encoder_MspInit+0x80>)
 8001bd6:	69db      	ldr	r3, [r3, #28]
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be0:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <HAL_TIM_Encoder_MspInit+0x80>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	4a10      	ldr	r2, [pc, #64]	; (8001c28 <HAL_TIM_Encoder_MspInit+0x80>)
 8001be6:	f043 0304 	orr.w	r3, r3, #4
 8001bea:	6193      	str	r3, [r2, #24]
 8001bec:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <HAL_TIM_Encoder_MspInit+0x80>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c04:	f107 0310 	add.w	r3, r7, #16
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4808      	ldr	r0, [pc, #32]	; (8001c2c <HAL_TIM_Encoder_MspInit+0x84>)
 8001c0c:	f000 fd6a 	bl	80026e4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c10:	2200      	movs	r2, #0
 8001c12:	2100      	movs	r1, #0
 8001c14:	201c      	movs	r0, #28
 8001c16:	f000 fa52 	bl	80020be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c1a:	201c      	movs	r0, #28
 8001c1c:	f000 fa6b 	bl	80020f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c20:	bf00      	nop
 8001c22:	3720      	adds	r7, #32
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40010800 	.word	0x40010800

08001c30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a09      	ldr	r2, [pc, #36]	; (8001c64 <HAL_TIM_Base_MspInit+0x34>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d10b      	bne.n	8001c5a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c42:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_TIM_Base_MspInit+0x38>)
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	4a08      	ldr	r2, [pc, #32]	; (8001c68 <HAL_TIM_Base_MspInit+0x38>)
 8001c48:	f043 0302 	orr.w	r3, r3, #2
 8001c4c:	61d3      	str	r3, [r2, #28]
 8001c4e:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_TIM_Base_MspInit+0x38>)
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c5a:	bf00      	nop
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	40000400 	.word	0x40000400
 8001c68:	40021000 	.word	0x40021000

08001c6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b088      	sub	sp, #32
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 0310 	add.w	r3, r7, #16
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a1f      	ldr	r2, [pc, #124]	; (8001d04 <HAL_UART_MspInit+0x98>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d137      	bne.n	8001cfc <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c8c:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <HAL_UART_MspInit+0x9c>)
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	4a1d      	ldr	r2, [pc, #116]	; (8001d08 <HAL_UART_MspInit+0x9c>)
 8001c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c96:	61d3      	str	r3, [r2, #28]
 8001c98:	4b1b      	ldr	r3, [pc, #108]	; (8001d08 <HAL_UART_MspInit+0x9c>)
 8001c9a:	69db      	ldr	r3, [r3, #28]
 8001c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca4:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <HAL_UART_MspInit+0x9c>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	4a17      	ldr	r2, [pc, #92]	; (8001d08 <HAL_UART_MspInit+0x9c>)
 8001caa:	f043 0304 	orr.w	r3, r3, #4
 8001cae:	6193      	str	r3, [r2, #24]
 8001cb0:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <HAL_UART_MspInit+0x9c>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cbc:	2304      	movs	r3, #4
 8001cbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc8:	f107 0310 	add.w	r3, r7, #16
 8001ccc:	4619      	mov	r1, r3
 8001cce:	480f      	ldr	r0, [pc, #60]	; (8001d0c <HAL_UART_MspInit+0xa0>)
 8001cd0:	f000 fd08 	bl	80026e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001cd4:	2308      	movs	r3, #8
 8001cd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce0:	f107 0310 	add.w	r3, r7, #16
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4809      	ldr	r0, [pc, #36]	; (8001d0c <HAL_UART_MspInit+0xa0>)
 8001ce8:	f000 fcfc 	bl	80026e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001cec:	2200      	movs	r2, #0
 8001cee:	2100      	movs	r1, #0
 8001cf0:	2026      	movs	r0, #38	; 0x26
 8001cf2:	f000 f9e4 	bl	80020be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cf6:	2026      	movs	r0, #38	; 0x26
 8001cf8:	f000 f9fd 	bl	80020f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cfc:	bf00      	nop
 8001cfe:	3720      	adds	r7, #32
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40004400 	.word	0x40004400
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40010800 	.word	0x40010800

08001d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d14:	e7fe      	b.n	8001d14 <NMI_Handler+0x4>

08001d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d1a:	e7fe      	b.n	8001d1a <HardFault_Handler+0x4>

08001d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d20:	e7fe      	b.n	8001d20 <MemManage_Handler+0x4>

08001d22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d26:	e7fe      	b.n	8001d26 <BusFault_Handler+0x4>

08001d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d2c:	e7fe      	b.n	8001d2c <UsageFault_Handler+0x4>

08001d2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr

08001d3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr

08001d46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr

08001d52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d56:	f000 f89b 	bl	8001e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001d64:	4802      	ldr	r0, [pc, #8]	; (8001d70 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001d66:	f000 ffbc 	bl	8002ce2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200010d8 	.word	0x200010d8

08001d74 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RESET_Pin);
 8001d78:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d7c:	f000 fe68 	bl	8002a50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d88:	4802      	ldr	r0, [pc, #8]	; (8001d94 <TIM2_IRQHandler+0x10>)
 8001d8a:	f003 fada 	bl	8005342 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	2000019c 	.word	0x2000019c

08001d98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d9c:	4802      	ldr	r0, [pc, #8]	; (8001da8 <USART2_IRQHandler+0x10>)
 8001d9e:	f003 fec1 	bl	8005b24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	2000022c 	.word	0x2000022c

08001dac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr

08001db8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001db8:	480c      	ldr	r0, [pc, #48]	; (8001dec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dba:	490d      	ldr	r1, [pc, #52]	; (8001df0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dbc:	4a0d      	ldr	r2, [pc, #52]	; (8001df4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc0:	e002      	b.n	8001dc8 <LoopCopyDataInit>

08001dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dc6:	3304      	adds	r3, #4

08001dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dcc:	d3f9      	bcc.n	8001dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dce:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dd0:	4c0a      	ldr	r4, [pc, #40]	; (8001dfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd4:	e001      	b.n	8001dda <LoopFillZerobss>

08001dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd8:	3204      	adds	r2, #4

08001dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ddc:	d3fb      	bcc.n	8001dd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001dde:	f7ff ffe5 	bl	8001dac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001de2:	f009 f875 	bl	800aed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001de6:	f7fe fa85 	bl	80002f4 <main>
  bx lr
 8001dea:	4770      	bx	lr
  ldr r0, =_sdata
 8001dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df0:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8001df4:	0800afd4 	.word	0x0800afd4
  ldr r2, =_sbss
 8001df8:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8001dfc:	200015e4 	.word	0x200015e4

08001e00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e00:	e7fe      	b.n	8001e00 <ADC1_2_IRQHandler>
	...

08001e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e08:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <HAL_Init+0x28>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a07      	ldr	r2, [pc, #28]	; (8001e2c <HAL_Init+0x28>)
 8001e0e:	f043 0310 	orr.w	r3, r3, #16
 8001e12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e14:	2003      	movs	r0, #3
 8001e16:	f000 f947 	bl	80020a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e1a:	200f      	movs	r0, #15
 8001e1c:	f000 f808 	bl	8001e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e20:	f7ff fe90 	bl	8001b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40022000 	.word	0x40022000

08001e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e38:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <HAL_InitTick+0x54>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <HAL_InitTick+0x58>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	4619      	mov	r1, r3
 8001e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f000 f95f 	bl	8002112 <HAL_SYSTICK_Config>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00e      	b.n	8001e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b0f      	cmp	r3, #15
 8001e62:	d80a      	bhi.n	8001e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e64:	2200      	movs	r2, #0
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	f000 f927 	bl	80020be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e70:	4a06      	ldr	r2, [pc, #24]	; (8001e8c <HAL_InitTick+0x5c>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	e000      	b.n	8001e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000004 	.word	0x20000004
 8001e88:	2000000c 	.word	0x2000000c
 8001e8c:	20000008 	.word	0x20000008

08001e90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <HAL_IncTick+0x1c>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <HAL_IncTick+0x20>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4a03      	ldr	r2, [pc, #12]	; (8001eb0 <HAL_IncTick+0x20>)
 8001ea2:	6013      	str	r3, [r2, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr
 8001eac:	2000000c 	.word	0x2000000c
 8001eb0:	20000418 	.word	0x20000418

08001eb4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb8:	4b02      	ldr	r3, [pc, #8]	; (8001ec4 <HAL_GetTick+0x10>)
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	20000418 	.word	0x20000418

08001ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed0:	f7ff fff0 	bl	8001eb4 <HAL_GetTick>
 8001ed4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee0:	d005      	beq.n	8001eee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <HAL_Delay+0x44>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4413      	add	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eee:	bf00      	nop
 8001ef0:	f7ff ffe0 	bl	8001eb4 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d8f7      	bhi.n	8001ef0 <HAL_Delay+0x28>
  {
  }
}
 8001f00:	bf00      	nop
 8001f02:	bf00      	nop
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	2000000c 	.word	0x2000000c

08001f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <__NVIC_SetPriorityGrouping+0x44>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f42:	4a04      	ldr	r2, [pc, #16]	; (8001f54 <__NVIC_SetPriorityGrouping+0x44>)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	60d3      	str	r3, [r2, #12]
}
 8001f48:	bf00      	nop
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f5c:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <__NVIC_GetPriorityGrouping+0x18>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	0a1b      	lsrs	r3, r3, #8
 8001f62:	f003 0307 	and.w	r3, r3, #7
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	db0b      	blt.n	8001f9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	f003 021f 	and.w	r2, r3, #31
 8001f8c:	4906      	ldr	r1, [pc, #24]	; (8001fa8 <__NVIC_EnableIRQ+0x34>)
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	095b      	lsrs	r3, r3, #5
 8001f94:	2001      	movs	r0, #1
 8001f96:	fa00 f202 	lsl.w	r2, r0, r2
 8001f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr
 8001fa8:	e000e100 	.word	0xe000e100

08001fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	6039      	str	r1, [r7, #0]
 8001fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	db0a      	blt.n	8001fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	490c      	ldr	r1, [pc, #48]	; (8001ff8 <__NVIC_SetPriority+0x4c>)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	0112      	lsls	r2, r2, #4
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	440b      	add	r3, r1
 8001fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd4:	e00a      	b.n	8001fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	4908      	ldr	r1, [pc, #32]	; (8001ffc <__NVIC_SetPriority+0x50>)
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	3b04      	subs	r3, #4
 8001fe4:	0112      	lsls	r2, r2, #4
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	440b      	add	r3, r1
 8001fea:	761a      	strb	r2, [r3, #24]
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	e000e100 	.word	0xe000e100
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002000:	b480      	push	{r7}
 8002002:	b089      	sub	sp, #36	; 0x24
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f1c3 0307 	rsb	r3, r3, #7
 800201a:	2b04      	cmp	r3, #4
 800201c:	bf28      	it	cs
 800201e:	2304      	movcs	r3, #4
 8002020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3304      	adds	r3, #4
 8002026:	2b06      	cmp	r3, #6
 8002028:	d902      	bls.n	8002030 <NVIC_EncodePriority+0x30>
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3b03      	subs	r3, #3
 800202e:	e000      	b.n	8002032 <NVIC_EncodePriority+0x32>
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002034:	f04f 32ff 	mov.w	r2, #4294967295
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43da      	mvns	r2, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	401a      	ands	r2, r3
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002048:	f04f 31ff 	mov.w	r1, #4294967295
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	fa01 f303 	lsl.w	r3, r1, r3
 8002052:	43d9      	mvns	r1, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	4313      	orrs	r3, r2
         );
}
 800205a:	4618      	mov	r0, r3
 800205c:	3724      	adds	r7, #36	; 0x24
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3b01      	subs	r3, #1
 8002070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002074:	d301      	bcc.n	800207a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002076:	2301      	movs	r3, #1
 8002078:	e00f      	b.n	800209a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800207a:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <SysTick_Config+0x40>)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3b01      	subs	r3, #1
 8002080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002082:	210f      	movs	r1, #15
 8002084:	f04f 30ff 	mov.w	r0, #4294967295
 8002088:	f7ff ff90 	bl	8001fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800208c:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <SysTick_Config+0x40>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002092:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <SysTick_Config+0x40>)
 8002094:	2207      	movs	r2, #7
 8002096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	e000e010 	.word	0xe000e010

080020a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff ff2d 	bl	8001f10 <__NVIC_SetPriorityGrouping>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020be:	b580      	push	{r7, lr}
 80020c0:	b086      	sub	sp, #24
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	4603      	mov	r3, r0
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
 80020ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d0:	f7ff ff42 	bl	8001f58 <__NVIC_GetPriorityGrouping>
 80020d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68b9      	ldr	r1, [r7, #8]
 80020da:	6978      	ldr	r0, [r7, #20]
 80020dc:	f7ff ff90 	bl	8002000 <NVIC_EncodePriority>
 80020e0:	4602      	mov	r2, r0
 80020e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e6:	4611      	mov	r1, r2
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ff5f 	bl	8001fac <__NVIC_SetPriority>
}
 80020ee:	bf00      	nop
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	4603      	mov	r3, r0
 80020fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff35 	bl	8001f74 <__NVIC_EnableIRQ>
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff ffa2 	bl	8002064 <SysTick_Config>
 8002120:	4603      	mov	r3, r0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800212a:	b480      	push	{r7}
 800212c:	b085      	sub	sp, #20
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002132:	2300      	movs	r3, #0
 8002134:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800213c:	2b02      	cmp	r3, #2
 800213e:	d008      	beq.n	8002152 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2204      	movs	r2, #4
 8002144:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e020      	b.n	8002194 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 020e 	bic.w	r2, r2, #14
 8002160:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 0201 	bic.w	r2, r2, #1
 8002170:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217a:	2101      	movs	r1, #1
 800217c:	fa01 f202 	lsl.w	r2, r1, r2
 8002180:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002192:	7bfb      	ldrb	r3, [r7, #15]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr
	...

080021a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d005      	beq.n	80021c2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2204      	movs	r2, #4
 80021ba:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	73fb      	strb	r3, [r7, #15]
 80021c0:	e051      	b.n	8002266 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 020e 	bic.w	r2, r2, #14
 80021d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0201 	bic.w	r2, r2, #1
 80021e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a22      	ldr	r2, [pc, #136]	; (8002270 <HAL_DMA_Abort_IT+0xd0>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d029      	beq.n	8002240 <HAL_DMA_Abort_IT+0xa0>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a20      	ldr	r2, [pc, #128]	; (8002274 <HAL_DMA_Abort_IT+0xd4>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d022      	beq.n	800223c <HAL_DMA_Abort_IT+0x9c>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a1f      	ldr	r2, [pc, #124]	; (8002278 <HAL_DMA_Abort_IT+0xd8>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d01a      	beq.n	8002236 <HAL_DMA_Abort_IT+0x96>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a1d      	ldr	r2, [pc, #116]	; (800227c <HAL_DMA_Abort_IT+0xdc>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d012      	beq.n	8002230 <HAL_DMA_Abort_IT+0x90>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a1c      	ldr	r2, [pc, #112]	; (8002280 <HAL_DMA_Abort_IT+0xe0>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d00a      	beq.n	800222a <HAL_DMA_Abort_IT+0x8a>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a1a      	ldr	r2, [pc, #104]	; (8002284 <HAL_DMA_Abort_IT+0xe4>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d102      	bne.n	8002224 <HAL_DMA_Abort_IT+0x84>
 800221e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002222:	e00e      	b.n	8002242 <HAL_DMA_Abort_IT+0xa2>
 8002224:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002228:	e00b      	b.n	8002242 <HAL_DMA_Abort_IT+0xa2>
 800222a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800222e:	e008      	b.n	8002242 <HAL_DMA_Abort_IT+0xa2>
 8002230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002234:	e005      	b.n	8002242 <HAL_DMA_Abort_IT+0xa2>
 8002236:	f44f 7380 	mov.w	r3, #256	; 0x100
 800223a:	e002      	b.n	8002242 <HAL_DMA_Abort_IT+0xa2>
 800223c:	2310      	movs	r3, #16
 800223e:	e000      	b.n	8002242 <HAL_DMA_Abort_IT+0xa2>
 8002240:	2301      	movs	r3, #1
 8002242:	4a11      	ldr	r2, [pc, #68]	; (8002288 <HAL_DMA_Abort_IT+0xe8>)
 8002244:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	4798      	blx	r3
    } 
  }
  return status;
 8002266:	7bfb      	ldrb	r3, [r7, #15]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40020008 	.word	0x40020008
 8002274:	4002001c 	.word	0x4002001c
 8002278:	40020030 	.word	0x40020030
 800227c:	40020044 	.word	0x40020044
 8002280:	40020058 	.word	0x40020058
 8002284:	4002006c 	.word	0x4002006c
 8002288:	40020000 	.word	0x40020000

0800228c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800228c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800228e:	b087      	sub	sp, #28
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800229e:	2300      	movs	r3, #0
 80022a0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80022a2:	2300      	movs	r3, #0
 80022a4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80022a6:	4b2f      	ldr	r3, [pc, #188]	; (8002364 <HAL_FLASH_Program+0xd8>)
 80022a8:	7e1b      	ldrb	r3, [r3, #24]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d101      	bne.n	80022b2 <HAL_FLASH_Program+0x26>
 80022ae:	2302      	movs	r3, #2
 80022b0:	e054      	b.n	800235c <HAL_FLASH_Program+0xd0>
 80022b2:	4b2c      	ldr	r3, [pc, #176]	; (8002364 <HAL_FLASH_Program+0xd8>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80022b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022bc:	f000 f8d4 	bl	8002468 <FLASH_WaitForLastOperation>
 80022c0:	4603      	mov	r3, r0
 80022c2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80022c4:	7dfb      	ldrb	r3, [r7, #23]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d144      	bne.n	8002354 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d102      	bne.n	80022d6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80022d0:	2301      	movs	r3, #1
 80022d2:	757b      	strb	r3, [r7, #21]
 80022d4:	e007      	b.n	80022e6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d102      	bne.n	80022e2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80022dc:	2302      	movs	r3, #2
 80022de:	757b      	strb	r3, [r7, #21]
 80022e0:	e001      	b.n	80022e6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80022e2:	2304      	movs	r3, #4
 80022e4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80022e6:	2300      	movs	r3, #0
 80022e8:	75bb      	strb	r3, [r7, #22]
 80022ea:	e02d      	b.n	8002348 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80022ec:	7dbb      	ldrb	r3, [r7, #22]
 80022ee:	005a      	lsls	r2, r3, #1
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	eb02 0c03 	add.w	ip, r2, r3
 80022f6:	7dbb      	ldrb	r3, [r7, #22]
 80022f8:	0119      	lsls	r1, r3, #4
 80022fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022fe:	f1c1 0620 	rsb	r6, r1, #32
 8002302:	f1a1 0020 	sub.w	r0, r1, #32
 8002306:	fa22 f401 	lsr.w	r4, r2, r1
 800230a:	fa03 f606 	lsl.w	r6, r3, r6
 800230e:	4334      	orrs	r4, r6
 8002310:	fa23 f000 	lsr.w	r0, r3, r0
 8002314:	4304      	orrs	r4, r0
 8002316:	fa23 f501 	lsr.w	r5, r3, r1
 800231a:	b2a3      	uxth	r3, r4
 800231c:	4619      	mov	r1, r3
 800231e:	4660      	mov	r0, ip
 8002320:	f000 f886 	bl	8002430 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002324:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002328:	f000 f89e 	bl	8002468 <FLASH_WaitForLastOperation>
 800232c:	4603      	mov	r3, r0
 800232e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002330:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <HAL_FLASH_Program+0xdc>)
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	4a0c      	ldr	r2, [pc, #48]	; (8002368 <HAL_FLASH_Program+0xdc>)
 8002336:	f023 0301 	bic.w	r3, r3, #1
 800233a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800233c:	7dfb      	ldrb	r3, [r7, #23]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d107      	bne.n	8002352 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002342:	7dbb      	ldrb	r3, [r7, #22]
 8002344:	3301      	adds	r3, #1
 8002346:	75bb      	strb	r3, [r7, #22]
 8002348:	7dba      	ldrb	r2, [r7, #22]
 800234a:	7d7b      	ldrb	r3, [r7, #21]
 800234c:	429a      	cmp	r2, r3
 800234e:	d3cd      	bcc.n	80022ec <HAL_FLASH_Program+0x60>
 8002350:	e000      	b.n	8002354 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002352:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002354:	4b03      	ldr	r3, [pc, #12]	; (8002364 <HAL_FLASH_Program+0xd8>)
 8002356:	2200      	movs	r2, #0
 8002358:	761a      	strb	r2, [r3, #24]

  return status;
 800235a:	7dfb      	ldrb	r3, [r7, #23]
}
 800235c:	4618      	mov	r0, r3
 800235e:	371c      	adds	r7, #28
 8002360:	46bd      	mov	sp, r7
 8002362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002364:	20000420 	.word	0x20000420
 8002368:	40022000 	.word	0x40022000

0800236c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002372:	2300      	movs	r3, #0
 8002374:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002376:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <HAL_FLASH_Unlock+0x40>)
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00d      	beq.n	800239e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002382:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <HAL_FLASH_Unlock+0x40>)
 8002384:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <HAL_FLASH_Unlock+0x44>)
 8002386:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002388:	4b08      	ldr	r3, [pc, #32]	; (80023ac <HAL_FLASH_Unlock+0x40>)
 800238a:	4a0a      	ldr	r2, [pc, #40]	; (80023b4 <HAL_FLASH_Unlock+0x48>)
 800238c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800238e:	4b07      	ldr	r3, [pc, #28]	; (80023ac <HAL_FLASH_Unlock+0x40>)
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800239e:	79fb      	ldrb	r3, [r7, #7]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40022000 	.word	0x40022000
 80023b0:	45670123 	.word	0x45670123
 80023b4:	cdef89ab 	.word	0xcdef89ab

080023b8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80023bc:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <HAL_FLASH_Lock+0x1c>)
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	4a04      	ldr	r2, [pc, #16]	; (80023d4 <HAL_FLASH_Lock+0x1c>)
 80023c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40022000 	.word	0x40022000

080023d8 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 80023dc:	4b09      	ldr	r3, [pc, #36]	; (8002404 <HAL_FLASH_OB_Unlock+0x2c>)
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d107      	bne.n	80023f8 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <HAL_FLASH_OB_Unlock+0x2c>)
 80023ea:	4a07      	ldr	r2, [pc, #28]	; (8002408 <HAL_FLASH_OB_Unlock+0x30>)
 80023ec:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 80023ee:	4b05      	ldr	r3, [pc, #20]	; (8002404 <HAL_FLASH_OB_Unlock+0x2c>)
 80023f0:	4a06      	ldr	r2, [pc, #24]	; (800240c <HAL_FLASH_OB_Unlock+0x34>)
 80023f2:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 80023f4:	2300      	movs	r3, #0
 80023f6:	e000      	b.n	80023fa <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40022000 	.word	0x40022000
 8002408:	45670123 	.word	0x45670123
 800240c:	cdef89ab 	.word	0xcdef89ab

08002410 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 8002414:	4b05      	ldr	r3, [pc, #20]	; (800242c <HAL_FLASH_OB_Lock+0x1c>)
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	4a04      	ldr	r2, [pc, #16]	; (800242c <HAL_FLASH_OB_Lock+0x1c>)
 800241a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800241e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	46bd      	mov	sp, r7
 8002426:	bc80      	pop	{r7}
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40022000 	.word	0x40022000

08002430 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800243c:	4b08      	ldr	r3, [pc, #32]	; (8002460 <FLASH_Program_HalfWord+0x30>)
 800243e:	2200      	movs	r2, #0
 8002440:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002442:	4b08      	ldr	r3, [pc, #32]	; (8002464 <FLASH_Program_HalfWord+0x34>)
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	4a07      	ldr	r2, [pc, #28]	; (8002464 <FLASH_Program_HalfWord+0x34>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	887a      	ldrh	r2, [r7, #2]
 8002452:	801a      	strh	r2, [r3, #0]
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	20000420 	.word	0x20000420
 8002464:	40022000 	.word	0x40022000

08002468 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002470:	f7ff fd20 	bl	8001eb4 <HAL_GetTick>
 8002474:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002476:	e010      	b.n	800249a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247e:	d00c      	beq.n	800249a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d007      	beq.n	8002496 <FLASH_WaitForLastOperation+0x2e>
 8002486:	f7ff fd15 	bl	8001eb4 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	429a      	cmp	r2, r3
 8002494:	d201      	bcs.n	800249a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e025      	b.n	80024e6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800249a:	4b15      	ldr	r3, [pc, #84]	; (80024f0 <FLASH_WaitForLastOperation+0x88>)
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1e8      	bne.n	8002478 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80024a6:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <FLASH_WaitForLastOperation+0x88>)
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	f003 0320 	and.w	r3, r3, #32
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d002      	beq.n	80024b8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80024b2:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <FLASH_WaitForLastOperation+0x88>)
 80024b4:	2220      	movs	r2, #32
 80024b6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80024b8:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <FLASH_WaitForLastOperation+0x88>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f003 0310 	and.w	r3, r3, #16
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10b      	bne.n	80024dc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80024c4:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <FLASH_WaitForLastOperation+0x88>)
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d105      	bne.n	80024dc <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80024d0:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <FLASH_WaitForLastOperation+0x88>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80024dc:	f000 f80a 	bl	80024f4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e000      	b.n	80024e6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40022000 	.word	0x40022000

080024f4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80024fe:	4b23      	ldr	r3, [pc, #140]	; (800258c <FLASH_SetErrorCode+0x98>)
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f003 0310 	and.w	r3, r3, #16
 8002506:	2b00      	cmp	r3, #0
 8002508:	d009      	beq.n	800251e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800250a:	4b21      	ldr	r3, [pc, #132]	; (8002590 <FLASH_SetErrorCode+0x9c>)
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	f043 0302 	orr.w	r3, r3, #2
 8002512:	4a1f      	ldr	r2, [pc, #124]	; (8002590 <FLASH_SetErrorCode+0x9c>)
 8002514:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f043 0310 	orr.w	r3, r3, #16
 800251c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800251e:	4b1b      	ldr	r3, [pc, #108]	; (800258c <FLASH_SetErrorCode+0x98>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	2b00      	cmp	r3, #0
 8002528:	d009      	beq.n	800253e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800252a:	4b19      	ldr	r3, [pc, #100]	; (8002590 <FLASH_SetErrorCode+0x9c>)
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	4a17      	ldr	r2, [pc, #92]	; (8002590 <FLASH_SetErrorCode+0x9c>)
 8002534:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f043 0304 	orr.w	r3, r3, #4
 800253c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800253e:	4b13      	ldr	r3, [pc, #76]	; (800258c <FLASH_SetErrorCode+0x98>)
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00b      	beq.n	8002562 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800254a:	4b11      	ldr	r3, [pc, #68]	; (8002590 <FLASH_SetErrorCode+0x9c>)
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	f043 0304 	orr.w	r3, r3, #4
 8002552:	4a0f      	ldr	r2, [pc, #60]	; (8002590 <FLASH_SetErrorCode+0x9c>)
 8002554:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002556:	4b0d      	ldr	r3, [pc, #52]	; (800258c <FLASH_SetErrorCode+0x98>)
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	4a0c      	ldr	r2, [pc, #48]	; (800258c <FLASH_SetErrorCode+0x98>)
 800255c:	f023 0301 	bic.w	r3, r3, #1
 8002560:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f240 1201 	movw	r2, #257	; 0x101
 8002568:	4293      	cmp	r3, r2
 800256a:	d106      	bne.n	800257a <FLASH_SetErrorCode+0x86>
 800256c:	4b07      	ldr	r3, [pc, #28]	; (800258c <FLASH_SetErrorCode+0x98>)
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	4a06      	ldr	r2, [pc, #24]	; (800258c <FLASH_SetErrorCode+0x98>)
 8002572:	f023 0301 	bic.w	r3, r3, #1
 8002576:	61d3      	str	r3, [r2, #28]
}  
 8002578:	e002      	b.n	8002580 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800257a:	4a04      	ldr	r2, [pc, #16]	; (800258c <FLASH_SetErrorCode+0x98>)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	60d3      	str	r3, [r2, #12]
}  
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40022000 	.word	0x40022000
 8002590:	20000420 	.word	0x20000420

08002594 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80025a6:	4b2f      	ldr	r3, [pc, #188]	; (8002664 <HAL_FLASHEx_Erase+0xd0>)
 80025a8:	7e1b      	ldrb	r3, [r3, #24]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_FLASHEx_Erase+0x1e>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e053      	b.n	800265a <HAL_FLASHEx_Erase+0xc6>
 80025b2:	4b2c      	ldr	r3, [pc, #176]	; (8002664 <HAL_FLASHEx_Erase+0xd0>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d116      	bne.n	80025ee <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80025c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025c4:	f7ff ff50 	bl	8002468 <FLASH_WaitForLastOperation>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d141      	bne.n	8002652 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80025ce:	2001      	movs	r0, #1
 80025d0:	f000 f84c 	bl	800266c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80025d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025d8:	f7ff ff46 	bl	8002468 <FLASH_WaitForLastOperation>
 80025dc:	4603      	mov	r3, r0
 80025de:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80025e0:	4b21      	ldr	r3, [pc, #132]	; (8002668 <HAL_FLASHEx_Erase+0xd4>)
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	4a20      	ldr	r2, [pc, #128]	; (8002668 <HAL_FLASHEx_Erase+0xd4>)
 80025e6:	f023 0304 	bic.w	r3, r3, #4
 80025ea:	6113      	str	r3, [r2, #16]
 80025ec:	e031      	b.n	8002652 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80025ee:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025f2:	f7ff ff39 	bl	8002468 <FLASH_WaitForLastOperation>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d12a      	bne.n	8002652 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002602:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	60bb      	str	r3, [r7, #8]
 800260a:	e019      	b.n	8002640 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800260c:	68b8      	ldr	r0, [r7, #8]
 800260e:	f000 f849 	bl	80026a4 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002612:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002616:	f7ff ff27 	bl	8002468 <FLASH_WaitForLastOperation>
 800261a:	4603      	mov	r3, r0
 800261c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800261e:	4b12      	ldr	r3, [pc, #72]	; (8002668 <HAL_FLASHEx_Erase+0xd4>)
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	4a11      	ldr	r2, [pc, #68]	; (8002668 <HAL_FLASHEx_Erase+0xd4>)
 8002624:	f023 0302 	bic.w	r3, r3, #2
 8002628:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800262a:	7bfb      	ldrb	r3, [r7, #15]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	601a      	str	r2, [r3, #0]
            break;
 8002636:	e00c      	b.n	8002652 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800263e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	029a      	lsls	r2, r3, #10
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	429a      	cmp	r2, r3
 8002650:	d3dc      	bcc.n	800260c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002652:	4b04      	ldr	r3, [pc, #16]	; (8002664 <HAL_FLASHEx_Erase+0xd0>)
 8002654:	2200      	movs	r2, #0
 8002656:	761a      	strb	r2, [r3, #24]

  return status;
 8002658:	7bfb      	ldrb	r3, [r7, #15]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20000420 	.word	0x20000420
 8002668:	40022000 	.word	0x40022000

0800266c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002674:	4b09      	ldr	r3, [pc, #36]	; (800269c <FLASH_MassErase+0x30>)
 8002676:	2200      	movs	r2, #0
 8002678:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800267a:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <FLASH_MassErase+0x34>)
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	4a08      	ldr	r2, [pc, #32]	; (80026a0 <FLASH_MassErase+0x34>)
 8002680:	f043 0304 	orr.w	r3, r3, #4
 8002684:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002686:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <FLASH_MassErase+0x34>)
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	4a05      	ldr	r2, [pc, #20]	; (80026a0 <FLASH_MassErase+0x34>)
 800268c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002690:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr
 800269c:	20000420 	.word	0x20000420
 80026a0:	40022000 	.word	0x40022000

080026a4 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80026ac:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <FLASH_PageErase+0x38>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80026b2:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <FLASH_PageErase+0x3c>)
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	4a0a      	ldr	r2, [pc, #40]	; (80026e0 <FLASH_PageErase+0x3c>)
 80026b8:	f043 0302 	orr.w	r3, r3, #2
 80026bc:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80026be:	4a08      	ldr	r2, [pc, #32]	; (80026e0 <FLASH_PageErase+0x3c>)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80026c4:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <FLASH_PageErase+0x3c>)
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	4a05      	ldr	r2, [pc, #20]	; (80026e0 <FLASH_PageErase+0x3c>)
 80026ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026ce:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	20000420 	.word	0x20000420
 80026e0:	40022000 	.word	0x40022000

080026e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b08b      	sub	sp, #44	; 0x2c
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026ee:	2300      	movs	r3, #0
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026f2:	2300      	movs	r3, #0
 80026f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026f6:	e169      	b.n	80029cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026f8:	2201      	movs	r2, #1
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	69fa      	ldr	r2, [r7, #28]
 8002708:	4013      	ands	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	429a      	cmp	r2, r3
 8002712:	f040 8158 	bne.w	80029c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	4a9a      	ldr	r2, [pc, #616]	; (8002984 <HAL_GPIO_Init+0x2a0>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d05e      	beq.n	80027de <HAL_GPIO_Init+0xfa>
 8002720:	4a98      	ldr	r2, [pc, #608]	; (8002984 <HAL_GPIO_Init+0x2a0>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d875      	bhi.n	8002812 <HAL_GPIO_Init+0x12e>
 8002726:	4a98      	ldr	r2, [pc, #608]	; (8002988 <HAL_GPIO_Init+0x2a4>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d058      	beq.n	80027de <HAL_GPIO_Init+0xfa>
 800272c:	4a96      	ldr	r2, [pc, #600]	; (8002988 <HAL_GPIO_Init+0x2a4>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d86f      	bhi.n	8002812 <HAL_GPIO_Init+0x12e>
 8002732:	4a96      	ldr	r2, [pc, #600]	; (800298c <HAL_GPIO_Init+0x2a8>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d052      	beq.n	80027de <HAL_GPIO_Init+0xfa>
 8002738:	4a94      	ldr	r2, [pc, #592]	; (800298c <HAL_GPIO_Init+0x2a8>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d869      	bhi.n	8002812 <HAL_GPIO_Init+0x12e>
 800273e:	4a94      	ldr	r2, [pc, #592]	; (8002990 <HAL_GPIO_Init+0x2ac>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d04c      	beq.n	80027de <HAL_GPIO_Init+0xfa>
 8002744:	4a92      	ldr	r2, [pc, #584]	; (8002990 <HAL_GPIO_Init+0x2ac>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d863      	bhi.n	8002812 <HAL_GPIO_Init+0x12e>
 800274a:	4a92      	ldr	r2, [pc, #584]	; (8002994 <HAL_GPIO_Init+0x2b0>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d046      	beq.n	80027de <HAL_GPIO_Init+0xfa>
 8002750:	4a90      	ldr	r2, [pc, #576]	; (8002994 <HAL_GPIO_Init+0x2b0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d85d      	bhi.n	8002812 <HAL_GPIO_Init+0x12e>
 8002756:	2b12      	cmp	r3, #18
 8002758:	d82a      	bhi.n	80027b0 <HAL_GPIO_Init+0xcc>
 800275a:	2b12      	cmp	r3, #18
 800275c:	d859      	bhi.n	8002812 <HAL_GPIO_Init+0x12e>
 800275e:	a201      	add	r2, pc, #4	; (adr r2, 8002764 <HAL_GPIO_Init+0x80>)
 8002760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002764:	080027df 	.word	0x080027df
 8002768:	080027b9 	.word	0x080027b9
 800276c:	080027cb 	.word	0x080027cb
 8002770:	0800280d 	.word	0x0800280d
 8002774:	08002813 	.word	0x08002813
 8002778:	08002813 	.word	0x08002813
 800277c:	08002813 	.word	0x08002813
 8002780:	08002813 	.word	0x08002813
 8002784:	08002813 	.word	0x08002813
 8002788:	08002813 	.word	0x08002813
 800278c:	08002813 	.word	0x08002813
 8002790:	08002813 	.word	0x08002813
 8002794:	08002813 	.word	0x08002813
 8002798:	08002813 	.word	0x08002813
 800279c:	08002813 	.word	0x08002813
 80027a0:	08002813 	.word	0x08002813
 80027a4:	08002813 	.word	0x08002813
 80027a8:	080027c1 	.word	0x080027c1
 80027ac:	080027d5 	.word	0x080027d5
 80027b0:	4a79      	ldr	r2, [pc, #484]	; (8002998 <HAL_GPIO_Init+0x2b4>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d013      	beq.n	80027de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027b6:	e02c      	b.n	8002812 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	623b      	str	r3, [r7, #32]
          break;
 80027be:	e029      	b.n	8002814 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	3304      	adds	r3, #4
 80027c6:	623b      	str	r3, [r7, #32]
          break;
 80027c8:	e024      	b.n	8002814 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	3308      	adds	r3, #8
 80027d0:	623b      	str	r3, [r7, #32]
          break;
 80027d2:	e01f      	b.n	8002814 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	330c      	adds	r3, #12
 80027da:	623b      	str	r3, [r7, #32]
          break;
 80027dc:	e01a      	b.n	8002814 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d102      	bne.n	80027ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027e6:	2304      	movs	r3, #4
 80027e8:	623b      	str	r3, [r7, #32]
          break;
 80027ea:	e013      	b.n	8002814 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d105      	bne.n	8002800 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027f4:	2308      	movs	r3, #8
 80027f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69fa      	ldr	r2, [r7, #28]
 80027fc:	611a      	str	r2, [r3, #16]
          break;
 80027fe:	e009      	b.n	8002814 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002800:	2308      	movs	r3, #8
 8002802:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69fa      	ldr	r2, [r7, #28]
 8002808:	615a      	str	r2, [r3, #20]
          break;
 800280a:	e003      	b.n	8002814 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800280c:	2300      	movs	r3, #0
 800280e:	623b      	str	r3, [r7, #32]
          break;
 8002810:	e000      	b.n	8002814 <HAL_GPIO_Init+0x130>
          break;
 8002812:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	2bff      	cmp	r3, #255	; 0xff
 8002818:	d801      	bhi.n	800281e <HAL_GPIO_Init+0x13a>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	e001      	b.n	8002822 <HAL_GPIO_Init+0x13e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3304      	adds	r3, #4
 8002822:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	2bff      	cmp	r3, #255	; 0xff
 8002828:	d802      	bhi.n	8002830 <HAL_GPIO_Init+0x14c>
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	e002      	b.n	8002836 <HAL_GPIO_Init+0x152>
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	3b08      	subs	r3, #8
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	210f      	movs	r1, #15
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	fa01 f303 	lsl.w	r3, r1, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	401a      	ands	r2, r3
 8002848:	6a39      	ldr	r1, [r7, #32]
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	fa01 f303 	lsl.w	r3, r1, r3
 8002850:	431a      	orrs	r2, r3
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 80b1 	beq.w	80029c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002864:	4b4d      	ldr	r3, [pc, #308]	; (800299c <HAL_GPIO_Init+0x2b8>)
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	4a4c      	ldr	r2, [pc, #304]	; (800299c <HAL_GPIO_Init+0x2b8>)
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	6193      	str	r3, [r2, #24]
 8002870:	4b4a      	ldr	r3, [pc, #296]	; (800299c <HAL_GPIO_Init+0x2b8>)
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800287c:	4a48      	ldr	r2, [pc, #288]	; (80029a0 <HAL_GPIO_Init+0x2bc>)
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	089b      	lsrs	r3, r3, #2
 8002882:	3302      	adds	r3, #2
 8002884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002888:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	f003 0303 	and.w	r3, r3, #3
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	220f      	movs	r2, #15
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	4013      	ands	r3, r2
 800289e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a40      	ldr	r2, [pc, #256]	; (80029a4 <HAL_GPIO_Init+0x2c0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d013      	beq.n	80028d0 <HAL_GPIO_Init+0x1ec>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a3f      	ldr	r2, [pc, #252]	; (80029a8 <HAL_GPIO_Init+0x2c4>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d00d      	beq.n	80028cc <HAL_GPIO_Init+0x1e8>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a3e      	ldr	r2, [pc, #248]	; (80029ac <HAL_GPIO_Init+0x2c8>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d007      	beq.n	80028c8 <HAL_GPIO_Init+0x1e4>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a3d      	ldr	r2, [pc, #244]	; (80029b0 <HAL_GPIO_Init+0x2cc>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d101      	bne.n	80028c4 <HAL_GPIO_Init+0x1e0>
 80028c0:	2303      	movs	r3, #3
 80028c2:	e006      	b.n	80028d2 <HAL_GPIO_Init+0x1ee>
 80028c4:	2304      	movs	r3, #4
 80028c6:	e004      	b.n	80028d2 <HAL_GPIO_Init+0x1ee>
 80028c8:	2302      	movs	r3, #2
 80028ca:	e002      	b.n	80028d2 <HAL_GPIO_Init+0x1ee>
 80028cc:	2301      	movs	r3, #1
 80028ce:	e000      	b.n	80028d2 <HAL_GPIO_Init+0x1ee>
 80028d0:	2300      	movs	r3, #0
 80028d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d4:	f002 0203 	and.w	r2, r2, #3
 80028d8:	0092      	lsls	r2, r2, #2
 80028da:	4093      	lsls	r3, r2
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	4313      	orrs	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028e2:	492f      	ldr	r1, [pc, #188]	; (80029a0 <HAL_GPIO_Init+0x2bc>)
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	089b      	lsrs	r3, r3, #2
 80028e8:	3302      	adds	r3, #2
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d006      	beq.n	800290a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028fc:	4b2d      	ldr	r3, [pc, #180]	; (80029b4 <HAL_GPIO_Init+0x2d0>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	492c      	ldr	r1, [pc, #176]	; (80029b4 <HAL_GPIO_Init+0x2d0>)
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	4313      	orrs	r3, r2
 8002906:	600b      	str	r3, [r1, #0]
 8002908:	e006      	b.n	8002918 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800290a:	4b2a      	ldr	r3, [pc, #168]	; (80029b4 <HAL_GPIO_Init+0x2d0>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	43db      	mvns	r3, r3
 8002912:	4928      	ldr	r1, [pc, #160]	; (80029b4 <HAL_GPIO_Init+0x2d0>)
 8002914:	4013      	ands	r3, r2
 8002916:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d006      	beq.n	8002932 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002924:	4b23      	ldr	r3, [pc, #140]	; (80029b4 <HAL_GPIO_Init+0x2d0>)
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	4922      	ldr	r1, [pc, #136]	; (80029b4 <HAL_GPIO_Init+0x2d0>)
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	4313      	orrs	r3, r2
 800292e:	604b      	str	r3, [r1, #4]
 8002930:	e006      	b.n	8002940 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002932:	4b20      	ldr	r3, [pc, #128]	; (80029b4 <HAL_GPIO_Init+0x2d0>)
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	43db      	mvns	r3, r3
 800293a:	491e      	ldr	r1, [pc, #120]	; (80029b4 <HAL_GPIO_Init+0x2d0>)
 800293c:	4013      	ands	r3, r2
 800293e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d006      	beq.n	800295a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800294c:	4b19      	ldr	r3, [pc, #100]	; (80029b4 <HAL_GPIO_Init+0x2d0>)
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	4918      	ldr	r1, [pc, #96]	; (80029b4 <HAL_GPIO_Init+0x2d0>)
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	4313      	orrs	r3, r2
 8002956:	608b      	str	r3, [r1, #8]
 8002958:	e006      	b.n	8002968 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800295a:	4b16      	ldr	r3, [pc, #88]	; (80029b4 <HAL_GPIO_Init+0x2d0>)
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	43db      	mvns	r3, r3
 8002962:	4914      	ldr	r1, [pc, #80]	; (80029b4 <HAL_GPIO_Init+0x2d0>)
 8002964:	4013      	ands	r3, r2
 8002966:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d021      	beq.n	80029b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002974:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <HAL_GPIO_Init+0x2d0>)
 8002976:	68da      	ldr	r2, [r3, #12]
 8002978:	490e      	ldr	r1, [pc, #56]	; (80029b4 <HAL_GPIO_Init+0x2d0>)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	4313      	orrs	r3, r2
 800297e:	60cb      	str	r3, [r1, #12]
 8002980:	e021      	b.n	80029c6 <HAL_GPIO_Init+0x2e2>
 8002982:	bf00      	nop
 8002984:	10320000 	.word	0x10320000
 8002988:	10310000 	.word	0x10310000
 800298c:	10220000 	.word	0x10220000
 8002990:	10210000 	.word	0x10210000
 8002994:	10120000 	.word	0x10120000
 8002998:	10110000 	.word	0x10110000
 800299c:	40021000 	.word	0x40021000
 80029a0:	40010000 	.word	0x40010000
 80029a4:	40010800 	.word	0x40010800
 80029a8:	40010c00 	.word	0x40010c00
 80029ac:	40011000 	.word	0x40011000
 80029b0:	40011400 	.word	0x40011400
 80029b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029b8:	4b0b      	ldr	r3, [pc, #44]	; (80029e8 <HAL_GPIO_Init+0x304>)
 80029ba:	68da      	ldr	r2, [r3, #12]
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	43db      	mvns	r3, r3
 80029c0:	4909      	ldr	r1, [pc, #36]	; (80029e8 <HAL_GPIO_Init+0x304>)
 80029c2:	4013      	ands	r3, r2
 80029c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	3301      	adds	r3, #1
 80029ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	fa22 f303 	lsr.w	r3, r2, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f47f ae8e 	bne.w	80026f8 <HAL_GPIO_Init+0x14>
  }
}
 80029dc:	bf00      	nop
 80029de:	bf00      	nop
 80029e0:	372c      	adds	r7, #44	; 0x2c
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bc80      	pop	{r7}
 80029e6:	4770      	bx	lr
 80029e8:	40010400 	.word	0x40010400

080029ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	807b      	strh	r3, [r7, #2]
 80029f8:	4613      	mov	r3, r2
 80029fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029fc:	787b      	ldrb	r3, [r7, #1]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a02:	887a      	ldrh	r2, [r7, #2]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a08:	e003      	b.n	8002a12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a0a:	887b      	ldrh	r3, [r7, #2]
 8002a0c:	041a      	lsls	r2, r3, #16
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	611a      	str	r2, [r3, #16]
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr

08002a1c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	460b      	mov	r3, r1
 8002a26:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a2e:	887a      	ldrh	r2, [r7, #2]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4013      	ands	r3, r2
 8002a34:	041a      	lsls	r2, r3, #16
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	43d9      	mvns	r1, r3
 8002a3a:	887b      	ldrh	r3, [r7, #2]
 8002a3c:	400b      	ands	r3, r1
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	611a      	str	r2, [r3, #16]
}
 8002a44:	bf00      	nop
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr
	...

08002a50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a5a:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a5c:	695a      	ldr	r2, [r3, #20]
 8002a5e:	88fb      	ldrh	r3, [r7, #6]
 8002a60:	4013      	ands	r3, r2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d006      	beq.n	8002a74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a66:	4a05      	ldr	r2, [pc, #20]	; (8002a7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a68:	88fb      	ldrh	r3, [r7, #6]
 8002a6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a6c:	88fb      	ldrh	r3, [r7, #6]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff f84a 	bl	8001b08 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a74:	bf00      	nop
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40010400 	.word	0x40010400

08002a80 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a82:	b08b      	sub	sp, #44	; 0x2c
 8002a84:	af06      	add	r7, sp, #24
 8002a86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e0fd      	b.n	8002c8e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d106      	bne.n	8002aac <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f007 ff68 	bl	800a97c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2203      	movs	r2, #3
 8002ab0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f003 fc37 	bl	800632c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	603b      	str	r3, [r7, #0]
 8002ac4:	687e      	ldr	r6, [r7, #4]
 8002ac6:	466d      	mov	r5, sp
 8002ac8:	f106 0410 	add.w	r4, r6, #16
 8002acc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ace:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ad0:	6823      	ldr	r3, [r4, #0]
 8002ad2:	602b      	str	r3, [r5, #0]
 8002ad4:	1d33      	adds	r3, r6, #4
 8002ad6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ad8:	6838      	ldr	r0, [r7, #0]
 8002ada:	f003 fc01 	bl	80062e0 <USB_CoreInit>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e0ce      	b.n	8002c8e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2100      	movs	r1, #0
 8002af6:	4618      	mov	r0, r3
 8002af8:	f003 fc32 	bl	8006360 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002afc:	2300      	movs	r3, #0
 8002afe:	73fb      	strb	r3, [r7, #15]
 8002b00:	e04c      	b.n	8002b9c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b02:	7bfb      	ldrb	r3, [r7, #15]
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	4613      	mov	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	440b      	add	r3, r1
 8002b12:	3301      	adds	r3, #1
 8002b14:	2201      	movs	r2, #1
 8002b16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	4613      	mov	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	440b      	add	r3, r1
 8002b28:	7bfa      	ldrb	r2, [r7, #15]
 8002b2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b2c:	7bfa      	ldrb	r2, [r7, #15]
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
 8002b30:	b298      	uxth	r0, r3
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	440b      	add	r3, r1
 8002b3e:	3336      	adds	r3, #54	; 0x36
 8002b40:	4602      	mov	r2, r0
 8002b42:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	1c5a      	adds	r2, r3, #1
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	440b      	add	r3, r1
 8002b54:	3303      	adds	r3, #3
 8002b56:	2200      	movs	r2, #0
 8002b58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b5a:	7bfa      	ldrb	r2, [r7, #15]
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	440b      	add	r3, r1
 8002b68:	3338      	adds	r3, #56	; 0x38
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b6e:	7bfa      	ldrb	r2, [r7, #15]
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	4613      	mov	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	440b      	add	r3, r1
 8002b7c:	333c      	adds	r3, #60	; 0x3c
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b82:	7bfa      	ldrb	r2, [r7, #15]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	440b      	add	r3, r1
 8002b90:	3340      	adds	r3, #64	; 0x40
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	73fb      	strb	r3, [r7, #15]
 8002b9c:	7bfa      	ldrb	r2, [r7, #15]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d3ad      	bcc.n	8002b02 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	73fb      	strb	r3, [r7, #15]
 8002baa:	e044      	b.n	8002c36 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bac:	7bfa      	ldrb	r2, [r7, #15]
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	440b      	add	r3, r1
 8002bba:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bc2:	7bfa      	ldrb	r2, [r7, #15]
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4413      	add	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	440b      	add	r3, r1
 8002bd0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bd4:	7bfa      	ldrb	r2, [r7, #15]
 8002bd6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bd8:	7bfa      	ldrb	r2, [r7, #15]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	440b      	add	r3, r1
 8002be6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002bea:	2200      	movs	r2, #0
 8002bec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bee:	7bfa      	ldrb	r2, [r7, #15]
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	440b      	add	r3, r1
 8002bfc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c04:	7bfa      	ldrb	r2, [r7, #15]
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	440b      	add	r3, r1
 8002c12:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c1a:	7bfa      	ldrb	r2, [r7, #15]
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	440b      	add	r3, r1
 8002c28:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c30:	7bfb      	ldrb	r3, [r7, #15]
 8002c32:	3301      	adds	r3, #1
 8002c34:	73fb      	strb	r3, [r7, #15]
 8002c36:	7bfa      	ldrb	r2, [r7, #15]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d3b5      	bcc.n	8002bac <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	603b      	str	r3, [r7, #0]
 8002c46:	687e      	ldr	r6, [r7, #4]
 8002c48:	466d      	mov	r5, sp
 8002c4a:	f106 0410 	add.w	r4, r6, #16
 8002c4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c52:	6823      	ldr	r3, [r4, #0]
 8002c54:	602b      	str	r3, [r5, #0]
 8002c56:	1d33      	adds	r3, r6, #4
 8002c58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c5a:	6838      	ldr	r0, [r7, #0]
 8002c5c:	f003 fb8c 	bl	8006378 <USB_DevInit>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d005      	beq.n	8002c72 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2202      	movs	r2, #2
 8002c6a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e00d      	b.n	8002c8e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f006 f83e 	bl	8008d08 <USB_DevDisconnect>

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c96 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b082      	sub	sp, #8
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d101      	bne.n	8002cac <HAL_PCD_Start+0x16>
 8002ca8:	2302      	movs	r3, #2
 8002caa:	e016      	b.n	8002cda <HAL_PCD_Start+0x44>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f003 fb21 	bl	8006300 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f008 f8ce 	bl	800ae62 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f006 f812 	bl	8008cf4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b088      	sub	sp, #32
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f006 f814 	bl	8008d1c <USB_ReadInterrupts>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cfe:	d102      	bne.n	8002d06 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 fb5f 	bl	80033c4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f006 f806 	bl	8008d1c <USB_ReadInterrupts>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d1a:	d112      	bne.n	8002d42 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d2e:	b292      	uxth	r2, r2
 8002d30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f007 fe9c 	bl	800aa72 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f923 	bl	8002f88 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f005 ffe8 	bl	8008d1c <USB_ReadInterrupts>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d56:	d10b      	bne.n	8002d70 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d6a:	b292      	uxth	r2, r2
 8002d6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f005 ffd1 	bl	8008d1c <USB_ReadInterrupts>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d84:	d10b      	bne.n	8002d9e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d98:	b292      	uxth	r2, r2
 8002d9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f005 ffba 	bl	8008d1c <USB_ReadInterrupts>
 8002da8:	4603      	mov	r3, r0
 8002daa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002db2:	d126      	bne.n	8002e02 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0204 	bic.w	r2, r2, #4
 8002dc6:	b292      	uxth	r2, r2
 8002dc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0208 	bic.w	r2, r2, #8
 8002dde:	b292      	uxth	r2, r2
 8002de0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f007 fe7d 	bl	800aae4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002dfc:	b292      	uxth	r2, r2
 8002dfe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f005 ff88 	bl	8008d1c <USB_ReadInterrupts>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e16:	f040 8082 	bne.w	8002f1e <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	77fb      	strb	r3, [r7, #31]
 8002e1e:	e010      	b.n	8002e42 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	461a      	mov	r2, r3
 8002e26:	7ffb      	ldrb	r3, [r7, #31]
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	441a      	add	r2, r3
 8002e2c:	7ffb      	ldrb	r3, [r7, #31]
 8002e2e:	8812      	ldrh	r2, [r2, #0]
 8002e30:	b292      	uxth	r2, r2
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	3320      	adds	r3, #32
 8002e36:	443b      	add	r3, r7
 8002e38:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002e3c:	7ffb      	ldrb	r3, [r7, #31]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	77fb      	strb	r3, [r7, #31]
 8002e42:	7ffb      	ldrb	r3, [r7, #31]
 8002e44:	2b07      	cmp	r3, #7
 8002e46:	d9eb      	bls.n	8002e20 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f042 0201 	orr.w	r2, r2, #1
 8002e5a:	b292      	uxth	r2, r2
 8002e5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0201 	bic.w	r2, r2, #1
 8002e72:	b292      	uxth	r2, r2
 8002e74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002e78:	bf00      	nop
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0f6      	beq.n	8002e7a <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e9e:	b292      	uxth	r2, r2
 8002ea0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	77fb      	strb	r3, [r7, #31]
 8002ea8:	e00f      	b.n	8002eca <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002eaa:	7ffb      	ldrb	r3, [r7, #31]
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	6812      	ldr	r2, [r2, #0]
 8002eb0:	4611      	mov	r1, r2
 8002eb2:	7ffa      	ldrb	r2, [r7, #31]
 8002eb4:	0092      	lsls	r2, r2, #2
 8002eb6:	440a      	add	r2, r1
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	3320      	adds	r3, #32
 8002ebc:	443b      	add	r3, r7
 8002ebe:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002ec2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002ec4:	7ffb      	ldrb	r3, [r7, #31]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	77fb      	strb	r3, [r7, #31]
 8002eca:	7ffb      	ldrb	r3, [r7, #31]
 8002ecc:	2b07      	cmp	r3, #7
 8002ece:	d9ec      	bls.n	8002eaa <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0208 	orr.w	r2, r2, #8
 8002ee2:	b292      	uxth	r2, r2
 8002ee4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002efa:	b292      	uxth	r2, r2
 8002efc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0204 	orr.w	r2, r2, #4
 8002f12:	b292      	uxth	r2, r2
 8002f14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f007 fdc9 	bl	800aab0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f005 fefa 	bl	8008d1c <USB_ReadInterrupts>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f32:	d10e      	bne.n	8002f52 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f46:	b292      	uxth	r2, r2
 8002f48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f007 fd82 	bl	800aa56 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f005 fee0 	bl	8008d1c <USB_ReadInterrupts>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f66:	d10b      	bne.n	8002f80 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f7a:	b292      	uxth	r2, r2
 8002f7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002f80:	bf00      	nop
 8002f82:	3720      	adds	r7, #32
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d101      	bne.n	8002fa2 <HAL_PCD_SetAddress+0x1a>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e013      	b.n	8002fca <HAL_PCD_SetAddress+0x42>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	78fa      	ldrb	r2, [r7, #3]
 8002fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	78fa      	ldrb	r2, [r7, #3]
 8002fb8:	4611      	mov	r1, r2
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f005 fe87 	bl	8008cce <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b084      	sub	sp, #16
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
 8002fda:	4608      	mov	r0, r1
 8002fdc:	4611      	mov	r1, r2
 8002fde:	461a      	mov	r2, r3
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	70fb      	strb	r3, [r7, #3]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	803b      	strh	r3, [r7, #0]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002fec:	2300      	movs	r3, #0
 8002fee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ff0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	da0e      	bge.n	8003016 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ff8:	78fb      	ldrb	r3, [r7, #3]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	1c5a      	adds	r2, r3, #1
 8003000:	4613      	mov	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	4413      	add	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2201      	movs	r2, #1
 8003012:	705a      	strb	r2, [r3, #1]
 8003014:	e00e      	b.n	8003034 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003016:	78fb      	ldrb	r3, [r7, #3]
 8003018:	f003 0207 	and.w	r2, r3, #7
 800301c:	4613      	mov	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	4413      	add	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003034:	78fb      	ldrb	r3, [r7, #3]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	b2da      	uxtb	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003040:	883a      	ldrh	r2, [r7, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	78ba      	ldrb	r2, [r7, #2]
 800304a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	785b      	ldrb	r3, [r3, #1]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d004      	beq.n	800305e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	b29a      	uxth	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800305e:	78bb      	ldrb	r3, [r7, #2]
 8003060:	2b02      	cmp	r3, #2
 8003062:	d102      	bne.n	800306a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003070:	2b01      	cmp	r3, #1
 8003072:	d101      	bne.n	8003078 <HAL_PCD_EP_Open+0xa6>
 8003074:	2302      	movs	r3, #2
 8003076:	e00e      	b.n	8003096 <HAL_PCD_EP_Open+0xc4>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68f9      	ldr	r1, [r7, #12]
 8003086:	4618      	mov	r0, r3
 8003088:	f003 f996 	bl	80063b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003094:	7afb      	ldrb	r3, [r7, #11]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b084      	sub	sp, #16
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	460b      	mov	r3, r1
 80030a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	da0e      	bge.n	80030d0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030b2:	78fb      	ldrb	r3, [r7, #3]
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	4613      	mov	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	4413      	add	r3, r2
 80030c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2201      	movs	r2, #1
 80030cc:	705a      	strb	r2, [r3, #1]
 80030ce:	e00e      	b.n	80030ee <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	f003 0207 	and.w	r2, r3, #7
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	4413      	add	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80030ee:	78fb      	ldrb	r3, [r7, #3]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003100:	2b01      	cmp	r3, #1
 8003102:	d101      	bne.n	8003108 <HAL_PCD_EP_Close+0x6a>
 8003104:	2302      	movs	r3, #2
 8003106:	e00e      	b.n	8003126 <HAL_PCD_EP_Close+0x88>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68f9      	ldr	r1, [r7, #12]
 8003116:	4618      	mov	r0, r3
 8003118:	f003 fcb8 	bl	8006a8c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b086      	sub	sp, #24
 8003132:	af00      	add	r7, sp, #0
 8003134:	60f8      	str	r0, [r7, #12]
 8003136:	607a      	str	r2, [r7, #4]
 8003138:	603b      	str	r3, [r7, #0]
 800313a:	460b      	mov	r3, r1
 800313c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800313e:	7afb      	ldrb	r3, [r7, #11]
 8003140:	f003 0207 	and.w	r2, r3, #7
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4413      	add	r3, r2
 8003154:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	2200      	movs	r2, #0
 8003166:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	2200      	movs	r2, #0
 800316c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800316e:	7afb      	ldrb	r3, [r7, #11]
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	b2da      	uxtb	r2, r3
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800317a:	7afb      	ldrb	r3, [r7, #11]
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	2b00      	cmp	r3, #0
 8003182:	d106      	bne.n	8003192 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6979      	ldr	r1, [r7, #20]
 800318a:	4618      	mov	r0, r3
 800318c:	f003 fe6a 	bl	8006e64 <USB_EPStartXfer>
 8003190:	e005      	b.n	800319e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6979      	ldr	r1, [r7, #20]
 8003198:	4618      	mov	r0, r3
 800319a:	f003 fe63 	bl	8006e64 <USB_EPStartXfer>
  }

  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3718      	adds	r7, #24
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80031b4:	78fb      	ldrb	r3, [r7, #3]
 80031b6:	f003 0207 	and.w	r2, r3, #7
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	440b      	add	r3, r1
 80031c6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80031ca:	681b      	ldr	r3, [r3, #0]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bc80      	pop	{r7}
 80031d4:	4770      	bx	lr

080031d6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b086      	sub	sp, #24
 80031da:	af00      	add	r7, sp, #0
 80031dc:	60f8      	str	r0, [r7, #12]
 80031de:	607a      	str	r2, [r7, #4]
 80031e0:	603b      	str	r3, [r7, #0]
 80031e2:	460b      	mov	r3, r1
 80031e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031e6:	7afb      	ldrb	r3, [r7, #11]
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	1c5a      	adds	r2, r3, #1
 80031ee:	4613      	mov	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	4413      	add	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	2200      	movs	r2, #0
 800321a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	2201      	movs	r2, #1
 8003220:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003222:	7afb      	ldrb	r3, [r7, #11]
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	b2da      	uxtb	r2, r3
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800322e:	7afb      	ldrb	r3, [r7, #11]
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	2b00      	cmp	r3, #0
 8003236:	d106      	bne.n	8003246 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6979      	ldr	r1, [r7, #20]
 800323e:	4618      	mov	r0, r3
 8003240:	f003 fe10 	bl	8006e64 <USB_EPStartXfer>
 8003244:	e005      	b.n	8003252 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6979      	ldr	r1, [r7, #20]
 800324c:	4618      	mov	r0, r3
 800324e:	f003 fe09 	bl	8006e64 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3718      	adds	r7, #24
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003268:	78fb      	ldrb	r3, [r7, #3]
 800326a:	f003 0207 	and.w	r2, r3, #7
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	429a      	cmp	r2, r3
 8003274:	d901      	bls.n	800327a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e04c      	b.n	8003314 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800327a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800327e:	2b00      	cmp	r3, #0
 8003280:	da0e      	bge.n	80032a0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003282:	78fb      	ldrb	r3, [r7, #3]
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	1c5a      	adds	r2, r3, #1
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	4413      	add	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2201      	movs	r2, #1
 800329c:	705a      	strb	r2, [r3, #1]
 800329e:	e00c      	b.n	80032ba <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032a0:	78fa      	ldrb	r2, [r7, #3]
 80032a2:	4613      	mov	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	4413      	add	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2201      	movs	r2, #1
 80032be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032c0:	78fb      	ldrb	r3, [r7, #3]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d101      	bne.n	80032da <HAL_PCD_EP_SetStall+0x7e>
 80032d6:	2302      	movs	r3, #2
 80032d8:	e01c      	b.n	8003314 <HAL_PCD_EP_SetStall+0xb8>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68f9      	ldr	r1, [r7, #12]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f005 fbf3 	bl	8008ad4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032ee:	78fb      	ldrb	r3, [r7, #3]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d108      	bne.n	800330a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003302:	4619      	mov	r1, r3
 8003304:	4610      	mov	r0, r2
 8003306:	f005 fd18 	bl	8008d3a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003328:	78fb      	ldrb	r3, [r7, #3]
 800332a:	f003 020f 	and.w	r2, r3, #15
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	429a      	cmp	r2, r3
 8003334:	d901      	bls.n	800333a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e040      	b.n	80033bc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800333a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800333e:	2b00      	cmp	r3, #0
 8003340:	da0e      	bge.n	8003360 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003342:	78fb      	ldrb	r3, [r7, #3]
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	1c5a      	adds	r2, r3, #1
 800334a:	4613      	mov	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	4413      	add	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2201      	movs	r2, #1
 800335c:	705a      	strb	r2, [r3, #1]
 800335e:	e00e      	b.n	800337e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003360:	78fb      	ldrb	r3, [r7, #3]
 8003362:	f003 0207 	and.w	r2, r3, #7
 8003366:	4613      	mov	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	4413      	add	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003384:	78fb      	ldrb	r3, [r7, #3]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	b2da      	uxtb	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003396:	2b01      	cmp	r3, #1
 8003398:	d101      	bne.n	800339e <HAL_PCD_EP_ClrStall+0x82>
 800339a:	2302      	movs	r3, #2
 800339c:	e00e      	b.n	80033bc <HAL_PCD_EP_ClrStall+0xa0>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68f9      	ldr	r1, [r7, #12]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f005 fbe1 	bl	8008b74 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b08e      	sub	sp, #56	; 0x38
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80033cc:	e2ec      	b.n	80039a8 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033d6:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80033d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	f003 030f 	and.w	r3, r3, #15
 80033e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80033e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f040 8161 	bne.w	80036b0 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80033ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80033f0:	f003 0310 	and.w	r3, r3, #16
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d152      	bne.n	800349e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003408:	81fb      	strh	r3, [r7, #14]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	89fb      	ldrh	r3, [r7, #14]
 8003410:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003414:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003418:	b29b      	uxth	r3, r3
 800341a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3328      	adds	r3, #40	; 0x28
 8003420:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800342a:	b29b      	uxth	r3, r3
 800342c:	461a      	mov	r2, r3
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	4413      	add	r3, r2
 8003436:	3302      	adds	r3, #2
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6812      	ldr	r2, [r2, #0]
 800343e:	4413      	add	r3, r2
 8003440:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003444:	881b      	ldrh	r3, [r3, #0]
 8003446:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	695a      	ldr	r2, [r3, #20]
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	441a      	add	r2, r3
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800345c:	2100      	movs	r1, #0
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f007 fadf 	bl	800aa22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 829b 	beq.w	80039a8 <PCD_EP_ISR_Handler+0x5e4>
 8003472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	2b00      	cmp	r3, #0
 8003478:	f040 8296 	bne.w	80039a8 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003482:	b2db      	uxtb	r3, r3
 8003484:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003488:	b2da      	uxtb	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	b292      	uxth	r2, r2
 8003490:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800349c:	e284      	b.n	80039a8 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	881b      	ldrh	r3, [r3, #0]
 80034ac:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80034ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80034b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d034      	beq.n	8003522 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	461a      	mov	r2, r3
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	4413      	add	r3, r2
 80034cc:	3306      	adds	r3, #6
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6812      	ldr	r2, [r2, #0]
 80034d4:	4413      	add	r3, r2
 80034d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	f005 fc6f 	bl	8008dda <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	b29a      	uxth	r2, r3
 8003504:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003508:	4013      	ands	r3, r2
 800350a:	823b      	strh	r3, [r7, #16]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	8a3a      	ldrh	r2, [r7, #16]
 8003512:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003516:	b292      	uxth	r2, r2
 8003518:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f007 fa54 	bl	800a9c8 <HAL_PCD_SetupStageCallback>
 8003520:	e242      	b.n	80039a8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003522:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003526:	2b00      	cmp	r3, #0
 8003528:	f280 823e 	bge.w	80039a8 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	b29a      	uxth	r2, r3
 8003534:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003538:	4013      	ands	r3, r2
 800353a:	83bb      	strh	r3, [r7, #28]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	8bba      	ldrh	r2, [r7, #28]
 8003542:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003546:	b292      	uxth	r2, r2
 8003548:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003552:	b29b      	uxth	r3, r3
 8003554:	461a      	mov	r2, r3
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	4413      	add	r3, r2
 800355e:	3306      	adds	r3, #6
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6812      	ldr	r2, [r2, #0]
 8003566:	4413      	add	r3, r2
 8003568:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d019      	beq.n	80035b2 <PCD_EP_ISR_Handler+0x1ee>
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d015      	beq.n	80035b2 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6818      	ldr	r0, [r3, #0]
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	6959      	ldr	r1, [r3, #20]
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003596:	b29b      	uxth	r3, r3
 8003598:	f005 fc1f 	bl	8008dda <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	695a      	ldr	r2, [r3, #20]
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	441a      	add	r2, r3
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80035aa:	2100      	movs	r1, #0
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f007 fa1d 	bl	800a9ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f040 81f2 	bne.w	80039a8 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	61bb      	str	r3, [r7, #24]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	461a      	mov	r2, r3
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	4413      	add	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d112      	bne.n	8003612 <PCD_EP_ISR_Handler+0x24e>
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	881b      	ldrh	r3, [r3, #0]
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	801a      	strh	r2, [r3, #0]
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	881b      	ldrh	r3, [r3, #0]
 8003600:	b29b      	uxth	r3, r3
 8003602:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003606:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800360a:	b29a      	uxth	r2, r3
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	801a      	strh	r2, [r3, #0]
 8003610:	e02f      	b.n	8003672 <PCD_EP_ISR_Handler+0x2ae>
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	2b3e      	cmp	r3, #62	; 0x3e
 8003618:	d813      	bhi.n	8003642 <PCD_EP_ISR_Handler+0x27e>
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	085b      	lsrs	r3, r3, #1
 8003620:	633b      	str	r3, [r7, #48]	; 0x30
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <PCD_EP_ISR_Handler+0x270>
 800362e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003630:	3301      	adds	r3, #1
 8003632:	633b      	str	r3, [r7, #48]	; 0x30
 8003634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003636:	b29b      	uxth	r3, r3
 8003638:	029b      	lsls	r3, r3, #10
 800363a:	b29a      	uxth	r2, r3
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	801a      	strh	r2, [r3, #0]
 8003640:	e017      	b.n	8003672 <PCD_EP_ISR_Handler+0x2ae>
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	095b      	lsrs	r3, r3, #5
 8003648:	633b      	str	r3, [r7, #48]	; 0x30
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f003 031f 	and.w	r3, r3, #31
 8003652:	2b00      	cmp	r3, #0
 8003654:	d102      	bne.n	800365c <PCD_EP_ISR_Handler+0x298>
 8003656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003658:	3b01      	subs	r3, #1
 800365a:	633b      	str	r3, [r7, #48]	; 0x30
 800365c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365e:	b29b      	uxth	r3, r3
 8003660:	029b      	lsls	r3, r3, #10
 8003662:	b29b      	uxth	r3, r3
 8003664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800366c:	b29a      	uxth	r2, r3
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	b29b      	uxth	r3, r3
 800367a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800367e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003682:	827b      	strh	r3, [r7, #18]
 8003684:	8a7b      	ldrh	r3, [r7, #18]
 8003686:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800368a:	827b      	strh	r3, [r7, #18]
 800368c:	8a7b      	ldrh	r3, [r7, #18]
 800368e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003692:	827b      	strh	r3, [r7, #18]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	8a7b      	ldrh	r3, [r7, #18]
 800369a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800369e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	8013      	strh	r3, [r2, #0]
 80036ae:	e17b      	b.n	80039a8 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	461a      	mov	r2, r3
 80036b6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80036c2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f280 80ea 	bge.w	80038a0 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	461a      	mov	r2, r3
 80036d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	881b      	ldrh	r3, [r3, #0]
 80036dc:	b29a      	uxth	r2, r3
 80036de:	f640 738f 	movw	r3, #3983	; 0xf8f
 80036e2:	4013      	ands	r3, r2
 80036e4:	853b      	strh	r3, [r7, #40]	; 0x28
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80036f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036fa:	b292      	uxth	r2, r2
 80036fc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80036fe:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003702:	4613      	mov	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	4413      	add	r3, r2
 8003712:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	7b1b      	ldrb	r3, [r3, #12]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d122      	bne.n	8003762 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003724:	b29b      	uxth	r3, r3
 8003726:	461a      	mov	r2, r3
 8003728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	4413      	add	r3, r2
 8003730:	3306      	adds	r3, #6
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6812      	ldr	r2, [r2, #0]
 8003738:	4413      	add	r3, r2
 800373a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003744:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003746:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 8087 	beq.w	800385c <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6818      	ldr	r0, [r3, #0]
 8003752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003754:	6959      	ldr	r1, [r3, #20]
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	88da      	ldrh	r2, [r3, #6]
 800375a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800375c:	f005 fb3d 	bl	8008dda <USB_ReadPMA>
 8003760:	e07c      	b.n	800385c <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	78db      	ldrb	r3, [r3, #3]
 8003766:	2b02      	cmp	r3, #2
 8003768:	d108      	bne.n	800377c <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800376a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800376c:	461a      	mov	r2, r3
 800376e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 f927 	bl	80039c4 <HAL_PCD_EP_DB_Receive>
 8003776:	4603      	mov	r3, r0
 8003778:	86fb      	strh	r3, [r7, #54]	; 0x36
 800377a:	e06f      	b.n	800385c <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	461a      	mov	r2, r3
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	b29b      	uxth	r3, r3
 800378e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003796:	847b      	strh	r3, [r7, #34]	; 0x22
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	461a      	mov	r2, r3
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	441a      	add	r2, r3
 80037a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80037a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	461a      	mov	r2, r3
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	881b      	ldrh	r3, [r3, #0]
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d021      	beq.n	800381a <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037de:	b29b      	uxth	r3, r3
 80037e0:	461a      	mov	r2, r3
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	4413      	add	r3, r2
 80037ea:	3302      	adds	r3, #2
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6812      	ldr	r2, [r2, #0]
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037fe:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003800:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003802:	2b00      	cmp	r3, #0
 8003804:	d02a      	beq.n	800385c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6818      	ldr	r0, [r3, #0]
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	6959      	ldr	r1, [r3, #20]
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	891a      	ldrh	r2, [r3, #8]
 8003812:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003814:	f005 fae1 	bl	8008dda <USB_ReadPMA>
 8003818:	e020      	b.n	800385c <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003822:	b29b      	uxth	r3, r3
 8003824:	461a      	mov	r2, r3
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	4413      	add	r3, r2
 800382e:	3306      	adds	r3, #6
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6812      	ldr	r2, [r2, #0]
 8003836:	4413      	add	r3, r2
 8003838:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003842:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003844:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003846:	2b00      	cmp	r3, #0
 8003848:	d008      	beq.n	800385c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6818      	ldr	r0, [r3, #0]
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	6959      	ldr	r1, [r3, #20]
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	895a      	ldrh	r2, [r3, #10]
 8003856:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003858:	f005 fabf 	bl	8008dda <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	69da      	ldr	r2, [r3, #28]
 8003860:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003862:	441a      	add	r2, r3
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386a:	695a      	ldr	r2, [r3, #20]
 800386c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800386e:	441a      	add	r2, r3
 8003870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003872:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d004      	beq.n	8003886 <PCD_EP_ISR_Handler+0x4c2>
 800387c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	429a      	cmp	r2, r3
 8003884:	d206      	bcs.n	8003894 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	4619      	mov	r1, r3
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f007 f8ad 	bl	800a9ec <HAL_PCD_DataOutStageCallback>
 8003892:	e005      	b.n	80038a0 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800389a:	4618      	mov	r0, r3
 800389c:	f003 fae2 	bl	8006e64 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80038a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80038a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d07e      	beq.n	80039a8 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80038aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	4613      	mov	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	4413      	add	r3, r2
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	461a      	mov	r2, r3
 80038c4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4413      	add	r3, r2
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80038d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038d8:	843b      	strh	r3, [r7, #32]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	461a      	mov	r2, r3
 80038e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	441a      	add	r2, r3
 80038e8:	8c3b      	ldrh	r3, [r7, #32]
 80038ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	78db      	ldrb	r3, [r3, #3]
 80038fa:	2b03      	cmp	r3, #3
 80038fc:	d00c      	beq.n	8003918 <PCD_EP_ISR_Handler+0x554>
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	78db      	ldrb	r3, [r3, #3]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d008      	beq.n	8003918 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800390a:	2b02      	cmp	r3, #2
 800390c:	d146      	bne.n	800399c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800390e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003914:	2b00      	cmp	r3, #0
 8003916:	d141      	bne.n	800399c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003920:	b29b      	uxth	r3, r3
 8003922:	461a      	mov	r2, r3
 8003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	4413      	add	r3, r2
 800392c:	3302      	adds	r3, #2
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6812      	ldr	r2, [r2, #0]
 8003934:	4413      	add	r3, r2
 8003936:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800393a:	881b      	ldrh	r3, [r3, #0]
 800393c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003940:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	699a      	ldr	r2, [r3, #24]
 8003946:	8bfb      	ldrh	r3, [r7, #30]
 8003948:	429a      	cmp	r2, r3
 800394a:	d906      	bls.n	800395a <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	699a      	ldr	r2, [r3, #24]
 8003950:	8bfb      	ldrh	r3, [r7, #30]
 8003952:	1ad2      	subs	r2, r2, r3
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	619a      	str	r2, [r3, #24]
 8003958:	e002      	b.n	8003960 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800395a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395c:	2200      	movs	r2, #0
 800395e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d106      	bne.n	8003976 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	4619      	mov	r1, r3
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f007 f857 	bl	800aa22 <HAL_PCD_DataInStageCallback>
 8003974:	e018      	b.n	80039a8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	695a      	ldr	r2, [r3, #20]
 800397a:	8bfb      	ldrh	r3, [r7, #30]
 800397c:	441a      	add	r2, r3
 800397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003980:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	69da      	ldr	r2, [r3, #28]
 8003986:	8bfb      	ldrh	r3, [r7, #30]
 8003988:	441a      	add	r2, r3
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003994:	4618      	mov	r0, r3
 8003996:	f003 fa65 	bl	8006e64 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800399a:	e005      	b.n	80039a8 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800399c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800399e:	461a      	mov	r2, r3
 80039a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f91b 	bl	8003bde <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	b21b      	sxth	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f6ff ad0a 	blt.w	80033ce <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3738      	adds	r7, #56	; 0x38
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b088      	sub	sp, #32
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	4613      	mov	r3, r2
 80039d0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80039d2:	88fb      	ldrh	r3, [r7, #6]
 80039d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d07e      	beq.n	8003ada <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	461a      	mov	r2, r3
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	4413      	add	r3, r2
 80039f0:	3302      	adds	r3, #2
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	6812      	ldr	r2, [r2, #0]
 80039f8:	4413      	add	r3, r2
 80039fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039fe:	881b      	ldrh	r3, [r3, #0]
 8003a00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a04:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	699a      	ldr	r2, [r3, #24]
 8003a0a:	8b7b      	ldrh	r3, [r7, #26]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d306      	bcc.n	8003a1e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	699a      	ldr	r2, [r3, #24]
 8003a14:	8b7b      	ldrh	r3, [r7, #26]
 8003a16:	1ad2      	subs	r2, r2, r3
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	619a      	str	r2, [r3, #24]
 8003a1c:	e002      	b.n	8003a24 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2200      	movs	r2, #0
 8003a22:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d123      	bne.n	8003a74 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	461a      	mov	r2, r3
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	881b      	ldrh	r3, [r3, #0]
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a46:	833b      	strh	r3, [r7, #24]
 8003a48:	8b3b      	ldrh	r3, [r7, #24]
 8003a4a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003a4e:	833b      	strh	r3, [r7, #24]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	461a      	mov	r2, r3
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	441a      	add	r2, r3
 8003a5e:	8b3b      	ldrh	r3, [r7, #24]
 8003a60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a74:	88fb      	ldrh	r3, [r7, #6]
 8003a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d01f      	beq.n	8003abe <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	461a      	mov	r2, r3
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a98:	82fb      	strh	r3, [r7, #22]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	441a      	add	r2, r3
 8003aa8:	8afb      	ldrh	r3, [r7, #22]
 8003aaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003aae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ab6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003abe:	8b7b      	ldrh	r3, [r7, #26]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 8087 	beq.w	8003bd4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6818      	ldr	r0, [r3, #0]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	6959      	ldr	r1, [r3, #20]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	891a      	ldrh	r2, [r3, #8]
 8003ad2:	8b7b      	ldrh	r3, [r7, #26]
 8003ad4:	f005 f981 	bl	8008dda <USB_ReadPMA>
 8003ad8:	e07c      	b.n	8003bd4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	4413      	add	r3, r2
 8003aee:	3306      	adds	r3, #6
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	6812      	ldr	r2, [r2, #0]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003afc:	881b      	ldrh	r3, [r3, #0]
 8003afe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b02:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	699a      	ldr	r2, [r3, #24]
 8003b08:	8b7b      	ldrh	r3, [r7, #26]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d306      	bcc.n	8003b1c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	699a      	ldr	r2, [r3, #24]
 8003b12:	8b7b      	ldrh	r3, [r7, #26]
 8003b14:	1ad2      	subs	r2, r2, r3
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	619a      	str	r2, [r3, #24]
 8003b1a:	e002      	b.n	8003b22 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d123      	bne.n	8003b72 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	881b      	ldrh	r3, [r3, #0]
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b44:	83fb      	strh	r3, [r7, #30]
 8003b46:	8bfb      	ldrh	r3, [r7, #30]
 8003b48:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003b4c:	83fb      	strh	r3, [r7, #30]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	461a      	mov	r2, r3
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	441a      	add	r2, r3
 8003b5c:	8bfb      	ldrh	r3, [r7, #30]
 8003b5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003b72:	88fb      	ldrh	r3, [r7, #6]
 8003b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d11f      	bne.n	8003bbc <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4413      	add	r3, r2
 8003b8a:	881b      	ldrh	r3, [r3, #0]
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b96:	83bb      	strh	r3, [r7, #28]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	441a      	add	r2, r3
 8003ba6:	8bbb      	ldrh	r3, [r7, #28]
 8003ba8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003bbc:	8b7b      	ldrh	r3, [r7, #26]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d008      	beq.n	8003bd4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6818      	ldr	r0, [r3, #0]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	6959      	ldr	r1, [r3, #20]
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	895a      	ldrh	r2, [r3, #10]
 8003bce:	8b7b      	ldrh	r3, [r7, #26]
 8003bd0:	f005 f903 	bl	8008dda <USB_ReadPMA>
    }
  }

  return count;
 8003bd4:	8b7b      	ldrh	r3, [r7, #26]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3720      	adds	r7, #32
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b0a2      	sub	sp, #136	; 0x88
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	60f8      	str	r0, [r7, #12]
 8003be6:	60b9      	str	r1, [r7, #8]
 8003be8:	4613      	mov	r3, r2
 8003bea:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003bec:	88fb      	ldrh	r3, [r7, #6]
 8003bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 81c7 	beq.w	8003f86 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	461a      	mov	r2, r3
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	4413      	add	r3, r2
 8003c0c:	3302      	adds	r3, #2
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	6812      	ldr	r2, [r2, #0]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c1a:	881b      	ldrh	r3, [r3, #0]
 8003c1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c20:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	699a      	ldr	r2, [r3, #24]
 8003c28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d907      	bls.n	8003c40 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	699a      	ldr	r2, [r3, #24]
 8003c34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c38:	1ad2      	subs	r2, r2, r3
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	619a      	str	r2, [r3, #24]
 8003c3e:	e002      	b.n	8003c46 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2200      	movs	r2, #0
 8003c44:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f040 80b9 	bne.w	8003dc2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	785b      	ldrb	r3, [r3, #1]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d126      	bne.n	8003ca6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	461a      	mov	r2, r3
 8003c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6c:	4413      	add	r3, r2
 8003c6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	011a      	lsls	r2, r3, #4
 8003c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c78:	4413      	add	r3, r2
 8003c7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	801a      	strh	r2, [r3, #0]
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	801a      	strh	r2, [r3, #0]
 8003ca4:	e01a      	b.n	8003cdc <HAL_PCD_EP_DB_Transmit+0xfe>
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	785b      	ldrb	r3, [r3, #1]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d116      	bne.n	8003cdc <HAL_PCD_EP_DB_Transmit+0xfe>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	633b      	str	r3, [r7, #48]	; 0x30
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc2:	4413      	add	r3, r2
 8003cc4:	633b      	str	r3, [r7, #48]	; 0x30
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	011a      	lsls	r2, r3, #4
 8003ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cce:	4413      	add	r3, r2
 8003cd0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd8:	2200      	movs	r2, #0
 8003cda:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	623b      	str	r3, [r7, #32]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	785b      	ldrb	r3, [r3, #1]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d126      	bne.n	8003d38 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	61bb      	str	r3, [r7, #24]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	4413      	add	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	011a      	lsls	r2, r3, #4
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d10:	617b      	str	r3, [r7, #20]
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	801a      	strh	r2, [r3, #0]
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	881b      	ldrh	r3, [r3, #0]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	801a      	strh	r2, [r3, #0]
 8003d36:	e017      	b.n	8003d68 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	785b      	ldrb	r3, [r3, #1]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d113      	bne.n	8003d68 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	4413      	add	r3, r2
 8003d50:	623b      	str	r3, [r7, #32]
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	011a      	lsls	r2, r3, #4
 8003d58:	6a3b      	ldr	r3, [r7, #32]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d60:	61fb      	str	r3, [r7, #28]
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	2200      	movs	r2, #0
 8003d66:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f006 fe57 	bl	800aa22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d74:	88fb      	ldrh	r3, [r7, #6]
 8003d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f000 82d4 	beq.w	8004328 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	461a      	mov	r2, r3
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d9a:	827b      	strh	r3, [r7, #18]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	461a      	mov	r2, r3
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	441a      	add	r2, r3
 8003daa:	8a7b      	ldrh	r3, [r7, #18]
 8003dac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003db0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003db4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	8013      	strh	r3, [r2, #0]
 8003dc0:	e2b2      	b.n	8004328 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003dc2:	88fb      	ldrh	r3, [r7, #6]
 8003dc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d021      	beq.n	8003e10 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	881b      	ldrh	r3, [r3, #0]
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	461a      	mov	r2, r3
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	441a      	add	r2, r3
 8003df8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003dfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	f040 8286 	bne.w	8004328 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	695a      	ldr	r2, [r3, #20]
 8003e20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e24:	441a      	add	r2, r3
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	69da      	ldr	r2, [r3, #28]
 8003e2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e32:	441a      	add	r2, r3
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	6a1a      	ldr	r2, [r3, #32]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d309      	bcc.n	8003e58 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	6a1a      	ldr	r2, [r3, #32]
 8003e4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e50:	1ad2      	subs	r2, r2, r3
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	621a      	str	r2, [r3, #32]
 8003e56:	e015      	b.n	8003e84 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d107      	bne.n	8003e70 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003e60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e64:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003e6e:	e009      	b.n	8003e84 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2200      	movs	r2, #0
 8003e82:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	785b      	ldrb	r3, [r3, #1]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d155      	bne.n	8003f38 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea0:	4413      	add	r3, r2
 8003ea2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	011a      	lsls	r2, r3, #4
 8003eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eac:	4413      	add	r3, r2
 8003eae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003eb2:	637b      	str	r3, [r7, #52]	; 0x34
 8003eb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d112      	bne.n	8003ee0 <HAL_PCD_EP_DB_Transmit+0x302>
 8003eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec8:	801a      	strh	r2, [r3, #0]
 8003eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ecc:	881b      	ldrh	r3, [r3, #0]
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ed4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003edc:	801a      	strh	r2, [r3, #0]
 8003ede:	e047      	b.n	8003f70 <HAL_PCD_EP_DB_Transmit+0x392>
 8003ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ee2:	2b3e      	cmp	r3, #62	; 0x3e
 8003ee4:	d811      	bhi.n	8003f0a <HAL_PCD_EP_DB_Transmit+0x32c>
 8003ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ee8:	085b      	lsrs	r3, r3, #1
 8003eea:	64bb      	str	r3, [r7, #72]	; 0x48
 8003eec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <HAL_PCD_EP_DB_Transmit+0x31e>
 8003ef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ef8:	3301      	adds	r3, #1
 8003efa:	64bb      	str	r3, [r7, #72]	; 0x48
 8003efc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	029b      	lsls	r3, r3, #10
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f06:	801a      	strh	r2, [r3, #0]
 8003f08:	e032      	b.n	8003f70 <HAL_PCD_EP_DB_Transmit+0x392>
 8003f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f0c:	095b      	lsrs	r3, r3, #5
 8003f0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f12:	f003 031f 	and.w	r3, r3, #31
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d102      	bne.n	8003f20 <HAL_PCD_EP_DB_Transmit+0x342>
 8003f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	029b      	lsls	r3, r3, #10
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f34:	801a      	strh	r2, [r3, #0]
 8003f36:	e01b      	b.n	8003f70 <HAL_PCD_EP_DB_Transmit+0x392>
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	785b      	ldrb	r3, [r3, #1]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d117      	bne.n	8003f70 <HAL_PCD_EP_DB_Transmit+0x392>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	643b      	str	r3, [r7, #64]	; 0x40
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	461a      	mov	r2, r3
 8003f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f54:	4413      	add	r3, r2
 8003f56:	643b      	str	r3, [r7, #64]	; 0x40
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	011a      	lsls	r2, r3, #4
 8003f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f60:	4413      	add	r3, r2
 8003f62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f6e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6818      	ldr	r0, [r3, #0]
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	6959      	ldr	r1, [r3, #20]
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	891a      	ldrh	r2, [r3, #8]
 8003f7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	f004 fee6 	bl	8008d50 <USB_WritePMA>
 8003f84:	e1d0      	b.n	8004328 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	461a      	mov	r2, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	4413      	add	r3, r2
 8003f9a:	3306      	adds	r3, #6
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	6812      	ldr	r2, [r2, #0]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fa8:	881b      	ldrh	r3, [r3, #0]
 8003faa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	699a      	ldr	r2, [r3, #24]
 8003fb6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d307      	bcc.n	8003fce <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	699a      	ldr	r2, [r3, #24]
 8003fc2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003fc6:	1ad2      	subs	r2, r2, r3
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	619a      	str	r2, [r3, #24]
 8003fcc:	e002      	b.n	8003fd4 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f040 80c4 	bne.w	8004166 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	785b      	ldrb	r3, [r3, #1]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d126      	bne.n	8004034 <HAL_PCD_EP_DB_Transmit+0x456>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ffa:	4413      	add	r3, r2
 8003ffc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	011a      	lsls	r2, r3, #4
 8004004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004006:	4413      	add	r3, r2
 8004008:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800400c:	66bb      	str	r3, [r7, #104]	; 0x68
 800400e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004010:	881b      	ldrh	r3, [r3, #0]
 8004012:	b29b      	uxth	r3, r3
 8004014:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004018:	b29a      	uxth	r2, r3
 800401a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800401c:	801a      	strh	r2, [r3, #0]
 800401e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	b29b      	uxth	r3, r3
 8004024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800402c:	b29a      	uxth	r2, r3
 800402e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004030:	801a      	strh	r2, [r3, #0]
 8004032:	e01a      	b.n	800406a <HAL_PCD_EP_DB_Transmit+0x48c>
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	785b      	ldrb	r3, [r3, #1]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d116      	bne.n	800406a <HAL_PCD_EP_DB_Transmit+0x48c>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	677b      	str	r3, [r7, #116]	; 0x74
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800404a:	b29b      	uxth	r3, r3
 800404c:	461a      	mov	r2, r3
 800404e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004050:	4413      	add	r3, r2
 8004052:	677b      	str	r3, [r7, #116]	; 0x74
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	011a      	lsls	r2, r3, #4
 800405a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800405c:	4413      	add	r3, r2
 800405e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004062:	673b      	str	r3, [r7, #112]	; 0x70
 8004064:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004066:	2200      	movs	r2, #0
 8004068:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	785b      	ldrb	r3, [r3, #1]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d12f      	bne.n	80040d8 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004088:	b29b      	uxth	r3, r3
 800408a:	461a      	mov	r2, r3
 800408c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004090:	4413      	add	r3, r2
 8004092:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	011a      	lsls	r2, r3, #4
 800409c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040a0:	4413      	add	r3, r2
 80040a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80040a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040bc:	801a      	strh	r2, [r3, #0]
 80040be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040c2:	881b      	ldrh	r3, [r3, #0]
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040d4:	801a      	strh	r2, [r3, #0]
 80040d6:	e017      	b.n	8004108 <HAL_PCD_EP_DB_Transmit+0x52a>
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	785b      	ldrb	r3, [r3, #1]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d113      	bne.n	8004108 <HAL_PCD_EP_DB_Transmit+0x52a>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	461a      	mov	r2, r3
 80040ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040ee:	4413      	add	r3, r2
 80040f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	011a      	lsls	r2, r3, #4
 80040f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040fa:	4413      	add	r3, r2
 80040fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004100:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004102:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004104:	2200      	movs	r2, #0
 8004106:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	4619      	mov	r1, r3
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f006 fc87 	bl	800aa22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004114:	88fb      	ldrh	r3, [r7, #6]
 8004116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800411a:	2b00      	cmp	r3, #0
 800411c:	f040 8104 	bne.w	8004328 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	461a      	mov	r2, r3
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	881b      	ldrh	r3, [r3, #0]
 8004130:	b29b      	uxth	r3, r3
 8004132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800413a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	461a      	mov	r2, r3
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	441a      	add	r2, r3
 800414c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004150:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004154:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004158:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800415c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004160:	b29b      	uxth	r3, r3
 8004162:	8013      	strh	r3, [r2, #0]
 8004164:	e0e0      	b.n	8004328 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004166:	88fb      	ldrh	r3, [r7, #6]
 8004168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d121      	bne.n	80041b4 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	461a      	mov	r2, r3
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	b29b      	uxth	r3, r3
 8004182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	461a      	mov	r2, r3
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	441a      	add	r2, r3
 800419c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80041a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	f040 80b4 	bne.w	8004328 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	695a      	ldr	r2, [r3, #20]
 80041c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80041c8:	441a      	add	r2, r3
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	69da      	ldr	r2, [r3, #28]
 80041d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80041d6:	441a      	add	r2, r3
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	6a1a      	ldr	r2, [r3, #32]
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d309      	bcc.n	80041fc <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	6a1a      	ldr	r2, [r3, #32]
 80041f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041f4:	1ad2      	subs	r2, r2, r3
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	621a      	str	r2, [r3, #32]
 80041fa:	e015      	b.n	8004228 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d107      	bne.n	8004214 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004204:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004208:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004212:	e009      	b.n	8004228 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2200      	movs	r2, #0
 800421e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	667b      	str	r3, [r7, #100]	; 0x64
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	785b      	ldrb	r3, [r3, #1]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d155      	bne.n	80042e2 <HAL_PCD_EP_DB_Transmit+0x704>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004244:	b29b      	uxth	r3, r3
 8004246:	461a      	mov	r2, r3
 8004248:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800424a:	4413      	add	r3, r2
 800424c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	011a      	lsls	r2, r3, #4
 8004254:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004256:	4413      	add	r3, r2
 8004258:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800425c:	65bb      	str	r3, [r7, #88]	; 0x58
 800425e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004260:	2b00      	cmp	r3, #0
 8004262:	d112      	bne.n	800428a <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004264:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004266:	881b      	ldrh	r3, [r3, #0]
 8004268:	b29b      	uxth	r3, r3
 800426a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800426e:	b29a      	uxth	r2, r3
 8004270:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004272:	801a      	strh	r2, [r3, #0]
 8004274:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004276:	881b      	ldrh	r3, [r3, #0]
 8004278:	b29b      	uxth	r3, r3
 800427a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800427e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004282:	b29a      	uxth	r2, r3
 8004284:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004286:	801a      	strh	r2, [r3, #0]
 8004288:	e044      	b.n	8004314 <HAL_PCD_EP_DB_Transmit+0x736>
 800428a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800428c:	2b3e      	cmp	r3, #62	; 0x3e
 800428e:	d811      	bhi.n	80042b4 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004292:	085b      	lsrs	r3, r3, #1
 8004294:	657b      	str	r3, [r7, #84]	; 0x54
 8004296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	d002      	beq.n	80042a6 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80042a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042a2:	3301      	adds	r3, #1
 80042a4:	657b      	str	r3, [r7, #84]	; 0x54
 80042a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	029b      	lsls	r3, r3, #10
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042b0:	801a      	strh	r2, [r3, #0]
 80042b2:	e02f      	b.n	8004314 <HAL_PCD_EP_DB_Transmit+0x736>
 80042b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042b6:	095b      	lsrs	r3, r3, #5
 80042b8:	657b      	str	r3, [r7, #84]	; 0x54
 80042ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042bc:	f003 031f 	and.w	r3, r3, #31
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d102      	bne.n	80042ca <HAL_PCD_EP_DB_Transmit+0x6ec>
 80042c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042c6:	3b01      	subs	r3, #1
 80042c8:	657b      	str	r3, [r7, #84]	; 0x54
 80042ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	029b      	lsls	r3, r3, #10
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042da:	b29a      	uxth	r2, r3
 80042dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042de:	801a      	strh	r2, [r3, #0]
 80042e0:	e018      	b.n	8004314 <HAL_PCD_EP_DB_Transmit+0x736>
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	785b      	ldrb	r3, [r3, #1]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d114      	bne.n	8004314 <HAL_PCD_EP_DB_Transmit+0x736>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	461a      	mov	r2, r3
 80042f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042f8:	4413      	add	r3, r2
 80042fa:	667b      	str	r3, [r7, #100]	; 0x64
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	011a      	lsls	r2, r3, #4
 8004302:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004304:	4413      	add	r3, r2
 8004306:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800430a:	663b      	str	r3, [r7, #96]	; 0x60
 800430c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800430e:	b29a      	uxth	r2, r3
 8004310:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004312:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6818      	ldr	r0, [r3, #0]
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	6959      	ldr	r1, [r3, #20]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	895a      	ldrh	r2, [r3, #10]
 8004320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004322:	b29b      	uxth	r3, r3
 8004324:	f004 fd14 	bl	8008d50 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	461a      	mov	r2, r3
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	b29b      	uxth	r3, r3
 800433a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800433e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004342:	823b      	strh	r3, [r7, #16]
 8004344:	8a3b      	ldrh	r3, [r7, #16]
 8004346:	f083 0310 	eor.w	r3, r3, #16
 800434a:	823b      	strh	r3, [r7, #16]
 800434c:	8a3b      	ldrh	r3, [r7, #16]
 800434e:	f083 0320 	eor.w	r3, r3, #32
 8004352:	823b      	strh	r3, [r7, #16]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	461a      	mov	r2, r3
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	441a      	add	r2, r3
 8004362:	8a3b      	ldrh	r3, [r7, #16]
 8004364:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004368:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800436c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004374:	b29b      	uxth	r3, r3
 8004376:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3788      	adds	r7, #136	; 0x88
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004382:	b480      	push	{r7}
 8004384:	b087      	sub	sp, #28
 8004386:	af00      	add	r7, sp, #0
 8004388:	60f8      	str	r0, [r7, #12]
 800438a:	607b      	str	r3, [r7, #4]
 800438c:	460b      	mov	r3, r1
 800438e:	817b      	strh	r3, [r7, #10]
 8004390:	4613      	mov	r3, r2
 8004392:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004394:	897b      	ldrh	r3, [r7, #10]
 8004396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800439a:	b29b      	uxth	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00b      	beq.n	80043b8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043a0:	897b      	ldrh	r3, [r7, #10]
 80043a2:	f003 0307 	and.w	r3, r3, #7
 80043a6:	1c5a      	adds	r2, r3, #1
 80043a8:	4613      	mov	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	4413      	add	r3, r2
 80043b4:	617b      	str	r3, [r7, #20]
 80043b6:	e009      	b.n	80043cc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043b8:	897a      	ldrh	r2, [r7, #10]
 80043ba:	4613      	mov	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	4413      	add	r3, r2
 80043ca:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80043cc:	893b      	ldrh	r3, [r7, #8]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d107      	bne.n	80043e2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2200      	movs	r2, #0
 80043d6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	b29a      	uxth	r2, r3
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	80da      	strh	r2, [r3, #6]
 80043e0:	e00b      	b.n	80043fa <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	2201      	movs	r2, #1
 80043e6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	0c1b      	lsrs	r3, r3, #16
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	371c      	adds	r7, #28
 8004400:	46bd      	mov	sp, r7
 8004402:	bc80      	pop	{r7}
 8004404:	4770      	bx	lr
	...

08004408 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e272      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 8087 	beq.w	8004536 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004428:	4b92      	ldr	r3, [pc, #584]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f003 030c 	and.w	r3, r3, #12
 8004430:	2b04      	cmp	r3, #4
 8004432:	d00c      	beq.n	800444e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004434:	4b8f      	ldr	r3, [pc, #572]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f003 030c 	and.w	r3, r3, #12
 800443c:	2b08      	cmp	r3, #8
 800443e:	d112      	bne.n	8004466 <HAL_RCC_OscConfig+0x5e>
 8004440:	4b8c      	ldr	r3, [pc, #560]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800444c:	d10b      	bne.n	8004466 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800444e:	4b89      	ldr	r3, [pc, #548]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d06c      	beq.n	8004534 <HAL_RCC_OscConfig+0x12c>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d168      	bne.n	8004534 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e24c      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800446e:	d106      	bne.n	800447e <HAL_RCC_OscConfig+0x76>
 8004470:	4b80      	ldr	r3, [pc, #512]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a7f      	ldr	r2, [pc, #508]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800447a:	6013      	str	r3, [r2, #0]
 800447c:	e02e      	b.n	80044dc <HAL_RCC_OscConfig+0xd4>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10c      	bne.n	80044a0 <HAL_RCC_OscConfig+0x98>
 8004486:	4b7b      	ldr	r3, [pc, #492]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a7a      	ldr	r2, [pc, #488]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 800448c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	4b78      	ldr	r3, [pc, #480]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a77      	ldr	r2, [pc, #476]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004498:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	e01d      	b.n	80044dc <HAL_RCC_OscConfig+0xd4>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044a8:	d10c      	bne.n	80044c4 <HAL_RCC_OscConfig+0xbc>
 80044aa:	4b72      	ldr	r3, [pc, #456]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a71      	ldr	r2, [pc, #452]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 80044b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	4b6f      	ldr	r3, [pc, #444]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a6e      	ldr	r2, [pc, #440]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 80044bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	e00b      	b.n	80044dc <HAL_RCC_OscConfig+0xd4>
 80044c4:	4b6b      	ldr	r3, [pc, #428]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a6a      	ldr	r2, [pc, #424]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 80044ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ce:	6013      	str	r3, [r2, #0]
 80044d0:	4b68      	ldr	r3, [pc, #416]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a67      	ldr	r2, [pc, #412]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 80044d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d013      	beq.n	800450c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e4:	f7fd fce6 	bl	8001eb4 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044ec:	f7fd fce2 	bl	8001eb4 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b64      	cmp	r3, #100	; 0x64
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e200      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fe:	4b5d      	ldr	r3, [pc, #372]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0f0      	beq.n	80044ec <HAL_RCC_OscConfig+0xe4>
 800450a:	e014      	b.n	8004536 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450c:	f7fd fcd2 	bl	8001eb4 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004514:	f7fd fcce 	bl	8001eb4 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b64      	cmp	r3, #100	; 0x64
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e1ec      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004526:	4b53      	ldr	r3, [pc, #332]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f0      	bne.n	8004514 <HAL_RCC_OscConfig+0x10c>
 8004532:	e000      	b.n	8004536 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d063      	beq.n	800460a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004542:	4b4c      	ldr	r3, [pc, #304]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f003 030c 	and.w	r3, r3, #12
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00b      	beq.n	8004566 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800454e:	4b49      	ldr	r3, [pc, #292]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f003 030c 	and.w	r3, r3, #12
 8004556:	2b08      	cmp	r3, #8
 8004558:	d11c      	bne.n	8004594 <HAL_RCC_OscConfig+0x18c>
 800455a:	4b46      	ldr	r3, [pc, #280]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d116      	bne.n	8004594 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004566:	4b43      	ldr	r3, [pc, #268]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <HAL_RCC_OscConfig+0x176>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d001      	beq.n	800457e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e1c0      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457e:	4b3d      	ldr	r3, [pc, #244]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	4939      	ldr	r1, [pc, #228]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 800458e:	4313      	orrs	r3, r2
 8004590:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004592:	e03a      	b.n	800460a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d020      	beq.n	80045de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800459c:	4b36      	ldr	r3, [pc, #216]	; (8004678 <HAL_RCC_OscConfig+0x270>)
 800459e:	2201      	movs	r2, #1
 80045a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a2:	f7fd fc87 	bl	8001eb4 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045aa:	f7fd fc83 	bl	8001eb4 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e1a1      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045bc:	4b2d      	ldr	r3, [pc, #180]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0f0      	beq.n	80045aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c8:	4b2a      	ldr	r3, [pc, #168]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	4927      	ldr	r1, [pc, #156]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	600b      	str	r3, [r1, #0]
 80045dc:	e015      	b.n	800460a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045de:	4b26      	ldr	r3, [pc, #152]	; (8004678 <HAL_RCC_OscConfig+0x270>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e4:	f7fd fc66 	bl	8001eb4 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ec:	f7fd fc62 	bl	8001eb4 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e180      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045fe:	4b1d      	ldr	r3, [pc, #116]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f0      	bne.n	80045ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d03a      	beq.n	800468c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d019      	beq.n	8004652 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800461e:	4b17      	ldr	r3, [pc, #92]	; (800467c <HAL_RCC_OscConfig+0x274>)
 8004620:	2201      	movs	r2, #1
 8004622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004624:	f7fd fc46 	bl	8001eb4 <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800462c:	f7fd fc42 	bl	8001eb4 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e160      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800463e:	4b0d      	ldr	r3, [pc, #52]	; (8004674 <HAL_RCC_OscConfig+0x26c>)
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0f0      	beq.n	800462c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800464a:	2001      	movs	r0, #1
 800464c:	f000 fad8 	bl	8004c00 <RCC_Delay>
 8004650:	e01c      	b.n	800468c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004652:	4b0a      	ldr	r3, [pc, #40]	; (800467c <HAL_RCC_OscConfig+0x274>)
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004658:	f7fd fc2c 	bl	8001eb4 <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800465e:	e00f      	b.n	8004680 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004660:	f7fd fc28 	bl	8001eb4 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d908      	bls.n	8004680 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e146      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
 8004672:	bf00      	nop
 8004674:	40021000 	.word	0x40021000
 8004678:	42420000 	.word	0x42420000
 800467c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004680:	4b92      	ldr	r3, [pc, #584]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1e9      	bne.n	8004660 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0304 	and.w	r3, r3, #4
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 80a6 	beq.w	80047e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800469a:	2300      	movs	r3, #0
 800469c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800469e:	4b8b      	ldr	r3, [pc, #556]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10d      	bne.n	80046c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046aa:	4b88      	ldr	r3, [pc, #544]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	4a87      	ldr	r2, [pc, #540]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 80046b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046b4:	61d3      	str	r3, [r2, #28]
 80046b6:	4b85      	ldr	r3, [pc, #532]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046be:	60bb      	str	r3, [r7, #8]
 80046c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046c2:	2301      	movs	r3, #1
 80046c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c6:	4b82      	ldr	r3, [pc, #520]	; (80048d0 <HAL_RCC_OscConfig+0x4c8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d118      	bne.n	8004704 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046d2:	4b7f      	ldr	r3, [pc, #508]	; (80048d0 <HAL_RCC_OscConfig+0x4c8>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a7e      	ldr	r2, [pc, #504]	; (80048d0 <HAL_RCC_OscConfig+0x4c8>)
 80046d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046de:	f7fd fbe9 	bl	8001eb4 <HAL_GetTick>
 80046e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e4:	e008      	b.n	80046f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046e6:	f7fd fbe5 	bl	8001eb4 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b64      	cmp	r3, #100	; 0x64
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e103      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f8:	4b75      	ldr	r3, [pc, #468]	; (80048d0 <HAL_RCC_OscConfig+0x4c8>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004700:	2b00      	cmp	r3, #0
 8004702:	d0f0      	beq.n	80046e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d106      	bne.n	800471a <HAL_RCC_OscConfig+0x312>
 800470c:	4b6f      	ldr	r3, [pc, #444]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	4a6e      	ldr	r2, [pc, #440]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004712:	f043 0301 	orr.w	r3, r3, #1
 8004716:	6213      	str	r3, [r2, #32]
 8004718:	e02d      	b.n	8004776 <HAL_RCC_OscConfig+0x36e>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10c      	bne.n	800473c <HAL_RCC_OscConfig+0x334>
 8004722:	4b6a      	ldr	r3, [pc, #424]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	4a69      	ldr	r2, [pc, #420]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004728:	f023 0301 	bic.w	r3, r3, #1
 800472c:	6213      	str	r3, [r2, #32]
 800472e:	4b67      	ldr	r3, [pc, #412]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	4a66      	ldr	r2, [pc, #408]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004734:	f023 0304 	bic.w	r3, r3, #4
 8004738:	6213      	str	r3, [r2, #32]
 800473a:	e01c      	b.n	8004776 <HAL_RCC_OscConfig+0x36e>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	2b05      	cmp	r3, #5
 8004742:	d10c      	bne.n	800475e <HAL_RCC_OscConfig+0x356>
 8004744:	4b61      	ldr	r3, [pc, #388]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	4a60      	ldr	r2, [pc, #384]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 800474a:	f043 0304 	orr.w	r3, r3, #4
 800474e:	6213      	str	r3, [r2, #32]
 8004750:	4b5e      	ldr	r3, [pc, #376]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	4a5d      	ldr	r2, [pc, #372]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004756:	f043 0301 	orr.w	r3, r3, #1
 800475a:	6213      	str	r3, [r2, #32]
 800475c:	e00b      	b.n	8004776 <HAL_RCC_OscConfig+0x36e>
 800475e:	4b5b      	ldr	r3, [pc, #364]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	4a5a      	ldr	r2, [pc, #360]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004764:	f023 0301 	bic.w	r3, r3, #1
 8004768:	6213      	str	r3, [r2, #32]
 800476a:	4b58      	ldr	r3, [pc, #352]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	4a57      	ldr	r2, [pc, #348]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004770:	f023 0304 	bic.w	r3, r3, #4
 8004774:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d015      	beq.n	80047aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800477e:	f7fd fb99 	bl	8001eb4 <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004784:	e00a      	b.n	800479c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004786:	f7fd fb95 	bl	8001eb4 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	f241 3288 	movw	r2, #5000	; 0x1388
 8004794:	4293      	cmp	r3, r2
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e0b1      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800479c:	4b4b      	ldr	r3, [pc, #300]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d0ee      	beq.n	8004786 <HAL_RCC_OscConfig+0x37e>
 80047a8:	e014      	b.n	80047d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047aa:	f7fd fb83 	bl	8001eb4 <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047b0:	e00a      	b.n	80047c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b2:	f7fd fb7f 	bl	8001eb4 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e09b      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047c8:	4b40      	ldr	r3, [pc, #256]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1ee      	bne.n	80047b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047d4:	7dfb      	ldrb	r3, [r7, #23]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d105      	bne.n	80047e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047da:	4b3c      	ldr	r3, [pc, #240]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	4a3b      	ldr	r2, [pc, #236]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 80047e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 8087 	beq.w	80048fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047f0:	4b36      	ldr	r3, [pc, #216]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f003 030c 	and.w	r3, r3, #12
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d061      	beq.n	80048c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	69db      	ldr	r3, [r3, #28]
 8004800:	2b02      	cmp	r3, #2
 8004802:	d146      	bne.n	8004892 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004804:	4b33      	ldr	r3, [pc, #204]	; (80048d4 <HAL_RCC_OscConfig+0x4cc>)
 8004806:	2200      	movs	r2, #0
 8004808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480a:	f7fd fb53 	bl	8001eb4 <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004810:	e008      	b.n	8004824 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004812:	f7fd fb4f 	bl	8001eb4 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d901      	bls.n	8004824 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e06d      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004824:	4b29      	ldr	r3, [pc, #164]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1f0      	bne.n	8004812 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004838:	d108      	bne.n	800484c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800483a:	4b24      	ldr	r3, [pc, #144]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	4921      	ldr	r1, [pc, #132]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004848:	4313      	orrs	r3, r2
 800484a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800484c:	4b1f      	ldr	r3, [pc, #124]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a19      	ldr	r1, [r3, #32]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	430b      	orrs	r3, r1
 800485e:	491b      	ldr	r1, [pc, #108]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004860:	4313      	orrs	r3, r2
 8004862:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004864:	4b1b      	ldr	r3, [pc, #108]	; (80048d4 <HAL_RCC_OscConfig+0x4cc>)
 8004866:	2201      	movs	r2, #1
 8004868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486a:	f7fd fb23 	bl	8001eb4 <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004870:	e008      	b.n	8004884 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004872:	f7fd fb1f 	bl	8001eb4 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d901      	bls.n	8004884 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e03d      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004884:	4b11      	ldr	r3, [pc, #68]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d0f0      	beq.n	8004872 <HAL_RCC_OscConfig+0x46a>
 8004890:	e035      	b.n	80048fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004892:	4b10      	ldr	r3, [pc, #64]	; (80048d4 <HAL_RCC_OscConfig+0x4cc>)
 8004894:	2200      	movs	r2, #0
 8004896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004898:	f7fd fb0c 	bl	8001eb4 <HAL_GetTick>
 800489c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a0:	f7fd fb08 	bl	8001eb4 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e026      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048b2:	4b06      	ldr	r3, [pc, #24]	; (80048cc <HAL_RCC_OscConfig+0x4c4>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1f0      	bne.n	80048a0 <HAL_RCC_OscConfig+0x498>
 80048be:	e01e      	b.n	80048fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d107      	bne.n	80048d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e019      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
 80048cc:	40021000 	.word	0x40021000
 80048d0:	40007000 	.word	0x40007000
 80048d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048d8:	4b0b      	ldr	r3, [pc, #44]	; (8004908 <HAL_RCC_OscConfig+0x500>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d106      	bne.n	80048fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d001      	beq.n	80048fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	40021000 	.word	0x40021000

0800490c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e0d0      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004920:	4b6a      	ldr	r3, [pc, #424]	; (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	429a      	cmp	r2, r3
 800492c:	d910      	bls.n	8004950 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800492e:	4b67      	ldr	r3, [pc, #412]	; (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f023 0207 	bic.w	r2, r3, #7
 8004936:	4965      	ldr	r1, [pc, #404]	; (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	4313      	orrs	r3, r2
 800493c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800493e:	4b63      	ldr	r3, [pc, #396]	; (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	429a      	cmp	r2, r3
 800494a:	d001      	beq.n	8004950 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e0b8      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d020      	beq.n	800499e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	d005      	beq.n	8004974 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004968:	4b59      	ldr	r3, [pc, #356]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	4a58      	ldr	r2, [pc, #352]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800496e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004972:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0308 	and.w	r3, r3, #8
 800497c:	2b00      	cmp	r3, #0
 800497e:	d005      	beq.n	800498c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004980:	4b53      	ldr	r3, [pc, #332]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	4a52      	ldr	r2, [pc, #328]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004986:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800498a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800498c:	4b50      	ldr	r3, [pc, #320]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	494d      	ldr	r1, [pc, #308]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 800499a:	4313      	orrs	r3, r2
 800499c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d040      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d107      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049b2:	4b47      	ldr	r3, [pc, #284]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d115      	bne.n	80049ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e07f      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d107      	bne.n	80049da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ca:	4b41      	ldr	r3, [pc, #260]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d109      	bne.n	80049ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e073      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049da:	4b3d      	ldr	r3, [pc, #244]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e06b      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049ea:	4b39      	ldr	r3, [pc, #228]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f023 0203 	bic.w	r2, r3, #3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	4936      	ldr	r1, [pc, #216]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049fc:	f7fd fa5a 	bl	8001eb4 <HAL_GetTick>
 8004a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a02:	e00a      	b.n	8004a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a04:	f7fd fa56 	bl	8001eb4 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e053      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a1a:	4b2d      	ldr	r3, [pc, #180]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f003 020c 	and.w	r2, r3, #12
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d1eb      	bne.n	8004a04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a2c:	4b27      	ldr	r3, [pc, #156]	; (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d210      	bcs.n	8004a5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a3a:	4b24      	ldr	r3, [pc, #144]	; (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f023 0207 	bic.w	r2, r3, #7
 8004a42:	4922      	ldr	r1, [pc, #136]	; (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a4a:	4b20      	ldr	r3, [pc, #128]	; (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0307 	and.w	r3, r3, #7
 8004a52:	683a      	ldr	r2, [r7, #0]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d001      	beq.n	8004a5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e032      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d008      	beq.n	8004a7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a68:	4b19      	ldr	r3, [pc, #100]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	4916      	ldr	r1, [pc, #88]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d009      	beq.n	8004a9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a86:	4b12      	ldr	r3, [pc, #72]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	490e      	ldr	r1, [pc, #56]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a9a:	f000 f821 	bl	8004ae0 <HAL_RCC_GetSysClockFreq>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	4b0b      	ldr	r3, [pc, #44]	; (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	091b      	lsrs	r3, r3, #4
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	490a      	ldr	r1, [pc, #40]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8004aac:	5ccb      	ldrb	r3, [r1, r3]
 8004aae:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab2:	4a09      	ldr	r2, [pc, #36]	; (8004ad8 <HAL_RCC_ClockConfig+0x1cc>)
 8004ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004ab6:	4b09      	ldr	r3, [pc, #36]	; (8004adc <HAL_RCC_ClockConfig+0x1d0>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7fd f9b8 	bl	8001e30 <HAL_InitTick>

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	40022000 	.word	0x40022000
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	0800afb4 	.word	0x0800afb4
 8004ad8:	20000004 	.word	0x20000004
 8004adc:	20000008 	.word	0x20000008

08004ae0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ae0:	b490      	push	{r4, r7}
 8004ae2:	b08a      	sub	sp, #40	; 0x28
 8004ae4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004ae6:	4b29      	ldr	r3, [pc, #164]	; (8004b8c <HAL_RCC_GetSysClockFreq+0xac>)
 8004ae8:	1d3c      	adds	r4, r7, #4
 8004aea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004aec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004af0:	f240 2301 	movw	r3, #513	; 0x201
 8004af4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	61fb      	str	r3, [r7, #28]
 8004afa:	2300      	movs	r3, #0
 8004afc:	61bb      	str	r3, [r7, #24]
 8004afe:	2300      	movs	r3, #0
 8004b00:	627b      	str	r3, [r7, #36]	; 0x24
 8004b02:	2300      	movs	r3, #0
 8004b04:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b0a:	4b21      	ldr	r3, [pc, #132]	; (8004b90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	f003 030c 	and.w	r3, r3, #12
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d002      	beq.n	8004b20 <HAL_RCC_GetSysClockFreq+0x40>
 8004b1a:	2b08      	cmp	r3, #8
 8004b1c:	d003      	beq.n	8004b26 <HAL_RCC_GetSysClockFreq+0x46>
 8004b1e:	e02b      	b.n	8004b78 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b20:	4b1c      	ldr	r3, [pc, #112]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b22:	623b      	str	r3, [r7, #32]
      break;
 8004b24:	e02b      	b.n	8004b7e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	0c9b      	lsrs	r3, r3, #18
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	3328      	adds	r3, #40	; 0x28
 8004b30:	443b      	add	r3, r7
 8004b32:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004b36:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d012      	beq.n	8004b68 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b42:	4b13      	ldr	r3, [pc, #76]	; (8004b90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	0c5b      	lsrs	r3, r3, #17
 8004b48:	f003 0301 	and.w	r3, r3, #1
 8004b4c:	3328      	adds	r3, #40	; 0x28
 8004b4e:	443b      	add	r3, r7
 8004b50:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004b54:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	4a0e      	ldr	r2, [pc, #56]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b5a:	fb03 f202 	mul.w	r2, r3, r2
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24
 8004b66:	e004      	b.n	8004b72 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	4a0b      	ldr	r2, [pc, #44]	; (8004b98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b6c:	fb02 f303 	mul.w	r3, r2, r3
 8004b70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b74:	623b      	str	r3, [r7, #32]
      break;
 8004b76:	e002      	b.n	8004b7e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b78:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b7a:	623b      	str	r3, [r7, #32]
      break;
 8004b7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3728      	adds	r7, #40	; 0x28
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bc90      	pop	{r4, r7}
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	0800af5c 	.word	0x0800af5c
 8004b90:	40021000 	.word	0x40021000
 8004b94:	007a1200 	.word	0x007a1200
 8004b98:	003d0900 	.word	0x003d0900

08004b9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ba0:	4b02      	ldr	r3, [pc, #8]	; (8004bac <HAL_RCC_GetHCLKFreq+0x10>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bc80      	pop	{r7}
 8004baa:	4770      	bx	lr
 8004bac:	20000004 	.word	0x20000004

08004bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bb4:	f7ff fff2 	bl	8004b9c <HAL_RCC_GetHCLKFreq>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	0a1b      	lsrs	r3, r3, #8
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	4903      	ldr	r1, [pc, #12]	; (8004bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bc6:	5ccb      	ldrb	r3, [r1, r3]
 8004bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	40021000 	.word	0x40021000
 8004bd4:	0800afc4 	.word	0x0800afc4

08004bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004bdc:	f7ff ffde 	bl	8004b9c <HAL_RCC_GetHCLKFreq>
 8004be0:	4602      	mov	r2, r0
 8004be2:	4b05      	ldr	r3, [pc, #20]	; (8004bf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	0adb      	lsrs	r3, r3, #11
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	4903      	ldr	r1, [pc, #12]	; (8004bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bee:	5ccb      	ldrb	r3, [r1, r3]
 8004bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	0800afc4 	.word	0x0800afc4

08004c00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c08:	4b0a      	ldr	r3, [pc, #40]	; (8004c34 <RCC_Delay+0x34>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a0a      	ldr	r2, [pc, #40]	; (8004c38 <RCC_Delay+0x38>)
 8004c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c12:	0a5b      	lsrs	r3, r3, #9
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	fb02 f303 	mul.w	r3, r2, r3
 8004c1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c1c:	bf00      	nop
  }
  while (Delay --);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	1e5a      	subs	r2, r3, #1
 8004c22:	60fa      	str	r2, [r7, #12]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1f9      	bne.n	8004c1c <RCC_Delay+0x1c>
}
 8004c28:	bf00      	nop
 8004c2a:	bf00      	nop
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bc80      	pop	{r7}
 8004c32:	4770      	bx	lr
 8004c34:	20000004 	.word	0x20000004
 8004c38:	10624dd3 	.word	0x10624dd3

08004c3c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	613b      	str	r3, [r7, #16]
 8004c48:	2300      	movs	r3, #0
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d07d      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c5c:	4b4f      	ldr	r3, [pc, #316]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10d      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c68:	4b4c      	ldr	r3, [pc, #304]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	4a4b      	ldr	r2, [pc, #300]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c72:	61d3      	str	r3, [r2, #28]
 8004c74:	4b49      	ldr	r3, [pc, #292]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c7c:	60bb      	str	r3, [r7, #8]
 8004c7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c80:	2301      	movs	r3, #1
 8004c82:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c84:	4b46      	ldr	r3, [pc, #280]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d118      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c90:	4b43      	ldr	r3, [pc, #268]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a42      	ldr	r2, [pc, #264]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c9c:	f7fd f90a 	bl	8001eb4 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ca4:	f7fd f906 	bl	8001eb4 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b64      	cmp	r3, #100	; 0x64
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e06d      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb6:	4b3a      	ldr	r3, [pc, #232]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d0f0      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cc2:	4b36      	ldr	r3, [pc, #216]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d02e      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d027      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ce0:	4b2e      	ldr	r3, [pc, #184]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ce8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cea:	4b2e      	ldr	r3, [pc, #184]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cec:	2201      	movs	r2, #1
 8004cee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cf0:	4b2c      	ldr	r3, [pc, #176]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004cf6:	4a29      	ldr	r2, [pc, #164]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d014      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d06:	f7fd f8d5 	bl	8001eb4 <HAL_GetTick>
 8004d0a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d0c:	e00a      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d0e:	f7fd f8d1 	bl	8001eb4 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e036      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d24:	4b1d      	ldr	r3, [pc, #116]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d0ee      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d30:	4b1a      	ldr	r3, [pc, #104]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	4917      	ldr	r1, [pc, #92]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d42:	7dfb      	ldrb	r3, [r7, #23]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d105      	bne.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d48:	4b14      	ldr	r3, [pc, #80]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	4a13      	ldr	r2, [pc, #76]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d008      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d60:	4b0e      	ldr	r3, [pc, #56]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	490b      	ldr	r1, [pc, #44]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0310 	and.w	r3, r3, #16
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d008      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d7e:	4b07      	ldr	r3, [pc, #28]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	4904      	ldr	r1, [pc, #16]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3718      	adds	r7, #24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	40021000 	.word	0x40021000
 8004da0:	40007000 	.word	0x40007000
 8004da4:	42420440 	.word	0x42420440

08004da8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e041      	b.n	8004e3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d106      	bne.n	8004dd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7fc ff2e 	bl	8001c30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	3304      	adds	r3, #4
 8004de4:	4619      	mov	r1, r3
 8004de6:	4610      	mov	r0, r2
 8004de8:	f000 fc92 	bl	8005710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3708      	adds	r7, #8
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
	...

08004e48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d001      	beq.n	8004e60 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e032      	b.n	8004ec6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a18      	ldr	r2, [pc, #96]	; (8004ed0 <HAL_TIM_Base_Start+0x88>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d00e      	beq.n	8004e90 <HAL_TIM_Base_Start+0x48>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e7a:	d009      	beq.n	8004e90 <HAL_TIM_Base_Start+0x48>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a14      	ldr	r2, [pc, #80]	; (8004ed4 <HAL_TIM_Base_Start+0x8c>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d004      	beq.n	8004e90 <HAL_TIM_Base_Start+0x48>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a13      	ldr	r2, [pc, #76]	; (8004ed8 <HAL_TIM_Base_Start+0x90>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d111      	bne.n	8004eb4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f003 0307 	and.w	r3, r3, #7
 8004e9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2b06      	cmp	r3, #6
 8004ea0:	d010      	beq.n	8004ec4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f042 0201 	orr.w	r2, r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb2:	e007      	b.n	8004ec4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f042 0201 	orr.w	r2, r2, #1
 8004ec2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bc80      	pop	{r7}
 8004ece:	4770      	bx	lr
 8004ed0:	40012c00 	.word	0x40012c00
 8004ed4:	40000400 	.word	0x40000400
 8004ed8:	40000800 	.word	0x40000800

08004edc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 0201 	bic.w	r2, r2, #1
 8004ef2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6a1a      	ldr	r2, [r3, #32]
 8004efa:	f241 1311 	movw	r3, #4369	; 0x1111
 8004efe:	4013      	ands	r3, r2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10f      	bne.n	8004f24 <HAL_TIM_Base_Stop_IT+0x48>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6a1a      	ldr	r2, [r3, #32]
 8004f0a:	f240 4344 	movw	r3, #1092	; 0x444
 8004f0e:	4013      	ands	r3, r2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d107      	bne.n	8004f24 <HAL_TIM_Base_Stop_IT+0x48>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 0201 	bic.w	r2, r2, #1
 8004f22:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bc80      	pop	{r7}
 8004f36:	4770      	bx	lr

08004f38 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e093      	b.n	8005074 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d106      	bne.n	8004f66 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f7fc fe21 	bl	8001ba8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2202      	movs	r2, #2
 8004f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	6812      	ldr	r2, [r2, #0]
 8004f78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f7c:	f023 0307 	bic.w	r3, r3, #7
 8004f80:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	3304      	adds	r3, #4
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4610      	mov	r0, r2
 8004f8e:	f000 fbbf 	bl	8005710 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fba:	f023 0303 	bic.w	r3, r3, #3
 8004fbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	689a      	ldr	r2, [r3, #8]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	021b      	lsls	r3, r3, #8
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004fd8:	f023 030c 	bic.w	r3, r3, #12
 8004fdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fe4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fe8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	68da      	ldr	r2, [r3, #12]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	021b      	lsls	r3, r3, #8
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	011a      	lsls	r2, r3, #4
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	031b      	lsls	r3, r3, #12
 8005008:	4313      	orrs	r3, r2
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	4313      	orrs	r3, r2
 800500e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005016:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	695b      	ldr	r3, [r3, #20]
 8005020:	011b      	lsls	r3, r3, #4
 8005022:	4313      	orrs	r3, r2
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	4313      	orrs	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3718      	adds	r7, #24
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800508c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005094:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800509c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80050a4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d110      	bne.n	80050ce <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050ac:	7bfb      	ldrb	r3, [r7, #15]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d102      	bne.n	80050b8 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80050b2:	7b7b      	ldrb	r3, [r7, #13]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d001      	beq.n	80050bc <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e089      	b.n	80051d0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050cc:	e031      	b.n	8005132 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d110      	bne.n	80050f6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80050d4:	7bbb      	ldrb	r3, [r7, #14]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d102      	bne.n	80050e0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80050da:	7b3b      	ldrb	r3, [r7, #12]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d001      	beq.n	80050e4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e075      	b.n	80051d0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050f4:	e01d      	b.n	8005132 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050f6:	7bfb      	ldrb	r3, [r7, #15]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d108      	bne.n	800510e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80050fc:	7bbb      	ldrb	r3, [r7, #14]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d105      	bne.n	800510e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005102:	7b7b      	ldrb	r3, [r7, #13]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d102      	bne.n	800510e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005108:	7b3b      	ldrb	r3, [r7, #12]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d001      	beq.n	8005112 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e05e      	b.n	80051d0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2202      	movs	r2, #2
 8005116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2202      	movs	r2, #2
 800511e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2202      	movs	r2, #2
 8005126:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2202      	movs	r2, #2
 800512e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d003      	beq.n	8005140 <HAL_TIM_Encoder_Start_IT+0xc4>
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	2b04      	cmp	r3, #4
 800513c:	d010      	beq.n	8005160 <HAL_TIM_Encoder_Start_IT+0xe4>
 800513e:	e01f      	b.n	8005180 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2201      	movs	r2, #1
 8005146:	2100      	movs	r1, #0
 8005148:	4618      	mov	r0, r3
 800514a:	f000 fbd9 	bl	8005900 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68da      	ldr	r2, [r3, #12]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f042 0202 	orr.w	r2, r2, #2
 800515c:	60da      	str	r2, [r3, #12]
      break;
 800515e:	e02e      	b.n	80051be <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2201      	movs	r2, #1
 8005166:	2104      	movs	r1, #4
 8005168:	4618      	mov	r0, r3
 800516a:	f000 fbc9 	bl	8005900 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68da      	ldr	r2, [r3, #12]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f042 0204 	orr.w	r2, r2, #4
 800517c:	60da      	str	r2, [r3, #12]
      break;
 800517e:	e01e      	b.n	80051be <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2201      	movs	r2, #1
 8005186:	2100      	movs	r1, #0
 8005188:	4618      	mov	r0, r3
 800518a:	f000 fbb9 	bl	8005900 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2201      	movs	r2, #1
 8005194:	2104      	movs	r1, #4
 8005196:	4618      	mov	r0, r3
 8005198:	f000 fbb2 	bl	8005900 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68da      	ldr	r2, [r3, #12]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f042 0202 	orr.w	r2, r2, #2
 80051aa:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0204 	orr.w	r2, r2, #4
 80051ba:	60da      	str	r2, [r3, #12]
      break;
 80051bc:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f042 0201 	orr.w	r2, r2, #1
 80051cc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3710      	adds	r7, #16
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10f      	bne.n	8005208 <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2200      	movs	r2, #0
 80051ee:	2100      	movs	r1, #0
 80051f0:	4618      	mov	r0, r3
 80051f2:	f000 fb85 	bl	8005900 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68da      	ldr	r2, [r3, #12]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f022 0202 	bic.w	r2, r2, #2
 8005204:	60da      	str	r2, [r3, #12]
 8005206:	e030      	b.n	800526a <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	2b04      	cmp	r3, #4
 800520c:	d10f      	bne.n	800522e <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2200      	movs	r2, #0
 8005214:	2104      	movs	r1, #4
 8005216:	4618      	mov	r0, r3
 8005218:	f000 fb72 	bl	8005900 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 0204 	bic.w	r2, r2, #4
 800522a:	60da      	str	r2, [r3, #12]
 800522c:	e01d      	b.n	800526a <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2200      	movs	r2, #0
 8005234:	2100      	movs	r1, #0
 8005236:	4618      	mov	r0, r3
 8005238:	f000 fb62 	bl	8005900 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2200      	movs	r2, #0
 8005242:	2104      	movs	r1, #4
 8005244:	4618      	mov	r0, r3
 8005246:	f000 fb5b 	bl	8005900 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68da      	ldr	r2, [r3, #12]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 0202 	bic.w	r2, r2, #2
 8005258:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68da      	ldr	r2, [r3, #12]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f022 0204 	bic.w	r2, r2, #4
 8005268:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6a1a      	ldr	r2, [r3, #32]
 8005270:	f241 1311 	movw	r3, #4369	; 0x1111
 8005274:	4013      	ands	r3, r2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10f      	bne.n	800529a <HAL_TIM_Encoder_Stop_IT+0xc2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6a1a      	ldr	r2, [r3, #32]
 8005280:	f240 4344 	movw	r3, #1092	; 0x444
 8005284:	4013      	ands	r3, r2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d107      	bne.n	800529a <HAL_TIM_Encoder_Stop_IT+0xc2>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f022 0201 	bic.w	r2, r2, #1
 8005298:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d002      	beq.n	80052a6 <HAL_TIM_Encoder_Stop_IT+0xce>
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	2b04      	cmp	r3, #4
 80052a4:	d138      	bne.n	8005318 <HAL_TIM_Encoder_Stop_IT+0x140>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d104      	bne.n	80052b6 <HAL_TIM_Encoder_Stop_IT+0xde>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052b4:	e013      	b.n	80052de <HAL_TIM_Encoder_Stop_IT+0x106>
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b04      	cmp	r3, #4
 80052ba:	d104      	bne.n	80052c6 <HAL_TIM_Encoder_Stop_IT+0xee>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052c4:	e00b      	b.n	80052de <HAL_TIM_Encoder_Stop_IT+0x106>
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d104      	bne.n	80052d6 <HAL_TIM_Encoder_Stop_IT+0xfe>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052d4:	e003      	b.n	80052de <HAL_TIM_Encoder_Stop_IT+0x106>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d104      	bne.n	80052ee <HAL_TIM_Encoder_Stop_IT+0x116>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052ec:	e024      	b.n	8005338 <HAL_TIM_Encoder_Stop_IT+0x160>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b04      	cmp	r3, #4
 80052f2:	d104      	bne.n	80052fe <HAL_TIM_Encoder_Stop_IT+0x126>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052fc:	e01c      	b.n	8005338 <HAL_TIM_Encoder_Stop_IT+0x160>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b08      	cmp	r3, #8
 8005302:	d104      	bne.n	800530e <HAL_TIM_Encoder_Stop_IT+0x136>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800530c:	e014      	b.n	8005338 <HAL_TIM_Encoder_Stop_IT+0x160>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005316:	e00f      	b.n	8005338 <HAL_TIM_Encoder_Stop_IT+0x160>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b082      	sub	sp, #8
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b02      	cmp	r3, #2
 8005356:	d122      	bne.n	800539e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b02      	cmp	r3, #2
 8005364:	d11b      	bne.n	800539e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f06f 0202 	mvn.w	r2, #2
 800536e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	f003 0303 	and.w	r3, r3, #3
 8005380:	2b00      	cmp	r3, #0
 8005382:	d003      	beq.n	800538c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f7fc fb23 	bl	80019d0 <HAL_TIM_IC_CaptureCallback>
 800538a:	e005      	b.n	8005398 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 f9a4 	bl	80056da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f9aa 	bl	80056ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b04      	cmp	r3, #4
 80053aa:	d122      	bne.n	80053f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f003 0304 	and.w	r3, r3, #4
 80053b6:	2b04      	cmp	r3, #4
 80053b8:	d11b      	bne.n	80053f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f06f 0204 	mvn.w	r2, #4
 80053c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2202      	movs	r2, #2
 80053c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7fc faf9 	bl	80019d0 <HAL_TIM_IC_CaptureCallback>
 80053de:	e005      	b.n	80053ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f97a 	bl	80056da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f980 	bl	80056ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	f003 0308 	and.w	r3, r3, #8
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d122      	bne.n	8005446 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	f003 0308 	and.w	r3, r3, #8
 800540a:	2b08      	cmp	r3, #8
 800540c:	d11b      	bne.n	8005446 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f06f 0208 	mvn.w	r2, #8
 8005416:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2204      	movs	r2, #4
 800541c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	69db      	ldr	r3, [r3, #28]
 8005424:	f003 0303 	and.w	r3, r3, #3
 8005428:	2b00      	cmp	r3, #0
 800542a:	d003      	beq.n	8005434 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f7fc facf 	bl	80019d0 <HAL_TIM_IC_CaptureCallback>
 8005432:	e005      	b.n	8005440 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f950 	bl	80056da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f956 	bl	80056ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	f003 0310 	and.w	r3, r3, #16
 8005450:	2b10      	cmp	r3, #16
 8005452:	d122      	bne.n	800549a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f003 0310 	and.w	r3, r3, #16
 800545e:	2b10      	cmp	r3, #16
 8005460:	d11b      	bne.n	800549a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f06f 0210 	mvn.w	r2, #16
 800546a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2208      	movs	r2, #8
 8005470:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	69db      	ldr	r3, [r3, #28]
 8005478:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800547c:	2b00      	cmp	r3, #0
 800547e:	d003      	beq.n	8005488 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f7fc faa5 	bl	80019d0 <HAL_TIM_IC_CaptureCallback>
 8005486:	e005      	b.n	8005494 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f926 	bl	80056da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f92c 	bl	80056ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d10e      	bne.n	80054c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d107      	bne.n	80054c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f06f 0201 	mvn.w	r2, #1
 80054be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f7fc fb17 	bl	8001af4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d0:	2b80      	cmp	r3, #128	; 0x80
 80054d2:	d10e      	bne.n	80054f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054de:	2b80      	cmp	r3, #128	; 0x80
 80054e0:	d107      	bne.n	80054f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 fa92 	bl	8005a16 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fc:	2b40      	cmp	r3, #64	; 0x40
 80054fe:	d10e      	bne.n	800551e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550a:	2b40      	cmp	r3, #64	; 0x40
 800550c:	d107      	bne.n	800551e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 f8f0 	bl	80056fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	f003 0320 	and.w	r3, r3, #32
 8005528:	2b20      	cmp	r3, #32
 800552a:	d10e      	bne.n	800554a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	f003 0320 	and.w	r3, r3, #32
 8005536:	2b20      	cmp	r3, #32
 8005538:	d107      	bne.n	800554a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f06f 0220 	mvn.w	r2, #32
 8005542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 fa5d 	bl	8005a04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800554a:	bf00      	nop
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b084      	sub	sp, #16
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
 800555a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005562:	2b01      	cmp	r3, #1
 8005564:	d101      	bne.n	800556a <HAL_TIM_ConfigClockSource+0x18>
 8005566:	2302      	movs	r3, #2
 8005568:	e0b3      	b.n	80056d2 <HAL_TIM_ConfigClockSource+0x180>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2202      	movs	r2, #2
 8005576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005588:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005590:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055a2:	d03e      	beq.n	8005622 <HAL_TIM_ConfigClockSource+0xd0>
 80055a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055a8:	f200 8087 	bhi.w	80056ba <HAL_TIM_ConfigClockSource+0x168>
 80055ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055b0:	f000 8085 	beq.w	80056be <HAL_TIM_ConfigClockSource+0x16c>
 80055b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055b8:	d87f      	bhi.n	80056ba <HAL_TIM_ConfigClockSource+0x168>
 80055ba:	2b70      	cmp	r3, #112	; 0x70
 80055bc:	d01a      	beq.n	80055f4 <HAL_TIM_ConfigClockSource+0xa2>
 80055be:	2b70      	cmp	r3, #112	; 0x70
 80055c0:	d87b      	bhi.n	80056ba <HAL_TIM_ConfigClockSource+0x168>
 80055c2:	2b60      	cmp	r3, #96	; 0x60
 80055c4:	d050      	beq.n	8005668 <HAL_TIM_ConfigClockSource+0x116>
 80055c6:	2b60      	cmp	r3, #96	; 0x60
 80055c8:	d877      	bhi.n	80056ba <HAL_TIM_ConfigClockSource+0x168>
 80055ca:	2b50      	cmp	r3, #80	; 0x50
 80055cc:	d03c      	beq.n	8005648 <HAL_TIM_ConfigClockSource+0xf6>
 80055ce:	2b50      	cmp	r3, #80	; 0x50
 80055d0:	d873      	bhi.n	80056ba <HAL_TIM_ConfigClockSource+0x168>
 80055d2:	2b40      	cmp	r3, #64	; 0x40
 80055d4:	d058      	beq.n	8005688 <HAL_TIM_ConfigClockSource+0x136>
 80055d6:	2b40      	cmp	r3, #64	; 0x40
 80055d8:	d86f      	bhi.n	80056ba <HAL_TIM_ConfigClockSource+0x168>
 80055da:	2b30      	cmp	r3, #48	; 0x30
 80055dc:	d064      	beq.n	80056a8 <HAL_TIM_ConfigClockSource+0x156>
 80055de:	2b30      	cmp	r3, #48	; 0x30
 80055e0:	d86b      	bhi.n	80056ba <HAL_TIM_ConfigClockSource+0x168>
 80055e2:	2b20      	cmp	r3, #32
 80055e4:	d060      	beq.n	80056a8 <HAL_TIM_ConfigClockSource+0x156>
 80055e6:	2b20      	cmp	r3, #32
 80055e8:	d867      	bhi.n	80056ba <HAL_TIM_ConfigClockSource+0x168>
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d05c      	beq.n	80056a8 <HAL_TIM_ConfigClockSource+0x156>
 80055ee:	2b10      	cmp	r3, #16
 80055f0:	d05a      	beq.n	80056a8 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80055f2:	e062      	b.n	80056ba <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6818      	ldr	r0, [r3, #0]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	6899      	ldr	r1, [r3, #8]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685a      	ldr	r2, [r3, #4]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	f000 f95d 	bl	80058c2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005616:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	609a      	str	r2, [r3, #8]
      break;
 8005620:	e04e      	b.n	80056c0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6818      	ldr	r0, [r3, #0]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	6899      	ldr	r1, [r3, #8]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	f000 f946 	bl	80058c2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689a      	ldr	r2, [r3, #8]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005644:	609a      	str	r2, [r3, #8]
      break;
 8005646:	e03b      	b.n	80056c0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6818      	ldr	r0, [r3, #0]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	6859      	ldr	r1, [r3, #4]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	461a      	mov	r2, r3
 8005656:	f000 f8bd 	bl	80057d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2150      	movs	r1, #80	; 0x50
 8005660:	4618      	mov	r0, r3
 8005662:	f000 f914 	bl	800588e <TIM_ITRx_SetConfig>
      break;
 8005666:	e02b      	b.n	80056c0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6818      	ldr	r0, [r3, #0]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	6859      	ldr	r1, [r3, #4]
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	461a      	mov	r2, r3
 8005676:	f000 f8db 	bl	8005830 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2160      	movs	r1, #96	; 0x60
 8005680:	4618      	mov	r0, r3
 8005682:	f000 f904 	bl	800588e <TIM_ITRx_SetConfig>
      break;
 8005686:	e01b      	b.n	80056c0 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6818      	ldr	r0, [r3, #0]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	6859      	ldr	r1, [r3, #4]
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	461a      	mov	r2, r3
 8005696:	f000 f89d 	bl	80057d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2140      	movs	r1, #64	; 0x40
 80056a0:	4618      	mov	r0, r3
 80056a2:	f000 f8f4 	bl	800588e <TIM_ITRx_SetConfig>
      break;
 80056a6:	e00b      	b.n	80056c0 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4619      	mov	r1, r3
 80056b2:	4610      	mov	r0, r2
 80056b4:	f000 f8eb 	bl	800588e <TIM_ITRx_SetConfig>
        break;
 80056b8:	e002      	b.n	80056c0 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80056ba:	bf00      	nop
 80056bc:	e000      	b.n	80056c0 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80056be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056da:	b480      	push	{r7}
 80056dc:	b083      	sub	sp, #12
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056e2:	bf00      	nop
 80056e4:	370c      	adds	r7, #12
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bc80      	pop	{r7}
 80056ea:	4770      	bx	lr

080056ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bc80      	pop	{r7}
 80056fc:	4770      	bx	lr

080056fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056fe:	b480      	push	{r7}
 8005700:	b083      	sub	sp, #12
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005706:	bf00      	nop
 8005708:	370c      	adds	r7, #12
 800570a:	46bd      	mov	sp, r7
 800570c:	bc80      	pop	{r7}
 800570e:	4770      	bx	lr

08005710 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a29      	ldr	r2, [pc, #164]	; (80057c8 <TIM_Base_SetConfig+0xb8>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d00b      	beq.n	8005740 <TIM_Base_SetConfig+0x30>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800572e:	d007      	beq.n	8005740 <TIM_Base_SetConfig+0x30>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a26      	ldr	r2, [pc, #152]	; (80057cc <TIM_Base_SetConfig+0xbc>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d003      	beq.n	8005740 <TIM_Base_SetConfig+0x30>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a25      	ldr	r2, [pc, #148]	; (80057d0 <TIM_Base_SetConfig+0xc0>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d108      	bne.n	8005752 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	4313      	orrs	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a1c      	ldr	r2, [pc, #112]	; (80057c8 <TIM_Base_SetConfig+0xb8>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00b      	beq.n	8005772 <TIM_Base_SetConfig+0x62>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005760:	d007      	beq.n	8005772 <TIM_Base_SetConfig+0x62>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a19      	ldr	r2, [pc, #100]	; (80057cc <TIM_Base_SetConfig+0xbc>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d003      	beq.n	8005772 <TIM_Base_SetConfig+0x62>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a18      	ldr	r2, [pc, #96]	; (80057d0 <TIM_Base_SetConfig+0xc0>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d108      	bne.n	8005784 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	4313      	orrs	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	4313      	orrs	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a07      	ldr	r2, [pc, #28]	; (80057c8 <TIM_Base_SetConfig+0xb8>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d103      	bne.n	80057b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	691a      	ldr	r2, [r3, #16]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	615a      	str	r2, [r3, #20]
}
 80057be:	bf00      	nop
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bc80      	pop	{r7}
 80057c6:	4770      	bx	lr
 80057c8:	40012c00 	.word	0x40012c00
 80057cc:	40000400 	.word	0x40000400
 80057d0:	40000800 	.word	0x40000800

080057d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b087      	sub	sp, #28
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	f023 0201 	bic.w	r2, r3, #1
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	011b      	lsls	r3, r3, #4
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	4313      	orrs	r3, r2
 8005808:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f023 030a 	bic.w	r3, r3, #10
 8005810:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	4313      	orrs	r3, r2
 8005818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	621a      	str	r2, [r3, #32]
}
 8005826:	bf00      	nop
 8005828:	371c      	adds	r7, #28
 800582a:	46bd      	mov	sp, r7
 800582c:	bc80      	pop	{r7}
 800582e:	4770      	bx	lr

08005830 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005830:	b480      	push	{r7}
 8005832:	b087      	sub	sp, #28
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	f023 0210 	bic.w	r2, r3, #16
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800585a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	031b      	lsls	r3, r3, #12
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	4313      	orrs	r3, r2
 8005864:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800586c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	011b      	lsls	r3, r3, #4
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	4313      	orrs	r3, r2
 8005876:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	621a      	str	r2, [r3, #32]
}
 8005884:	bf00      	nop
 8005886:	371c      	adds	r7, #28
 8005888:	46bd      	mov	sp, r7
 800588a:	bc80      	pop	{r7}
 800588c:	4770      	bx	lr

0800588e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800588e:	b480      	push	{r7}
 8005890:	b085      	sub	sp, #20
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
 8005896:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	f043 0307 	orr.w	r3, r3, #7
 80058b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	609a      	str	r2, [r3, #8]
}
 80058b8:	bf00      	nop
 80058ba:	3714      	adds	r7, #20
 80058bc:	46bd      	mov	sp, r7
 80058be:	bc80      	pop	{r7}
 80058c0:	4770      	bx	lr

080058c2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b087      	sub	sp, #28
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	60f8      	str	r0, [r7, #12]
 80058ca:	60b9      	str	r1, [r7, #8]
 80058cc:	607a      	str	r2, [r7, #4]
 80058ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058dc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	021a      	lsls	r2, r3, #8
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	431a      	orrs	r2, r3
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	609a      	str	r2, [r3, #8]
}
 80058f6:	bf00      	nop
 80058f8:	371c      	adds	r7, #28
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bc80      	pop	{r7}
 80058fe:	4770      	bx	lr

08005900 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005900:	b480      	push	{r7}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	f003 031f 	and.w	r3, r3, #31
 8005912:	2201      	movs	r2, #1
 8005914:	fa02 f303 	lsl.w	r3, r2, r3
 8005918:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6a1a      	ldr	r2, [r3, #32]
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	43db      	mvns	r3, r3
 8005922:	401a      	ands	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6a1a      	ldr	r2, [r3, #32]
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f003 031f 	and.w	r3, r3, #31
 8005932:	6879      	ldr	r1, [r7, #4]
 8005934:	fa01 f303 	lsl.w	r3, r1, r3
 8005938:	431a      	orrs	r2, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	621a      	str	r2, [r3, #32]
}
 800593e:	bf00      	nop
 8005940:	371c      	adds	r7, #28
 8005942:	46bd      	mov	sp, r7
 8005944:	bc80      	pop	{r7}
 8005946:	4770      	bx	lr

08005948 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005958:	2b01      	cmp	r3, #1
 800595a:	d101      	bne.n	8005960 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800595c:	2302      	movs	r3, #2
 800595e:	e046      	b.n	80059ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2202      	movs	r2, #2
 800596c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005986:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	4313      	orrs	r3, r2
 8005990:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a16      	ldr	r2, [pc, #88]	; (80059f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00e      	beq.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ac:	d009      	beq.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a12      	ldr	r2, [pc, #72]	; (80059fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d004      	beq.n	80059c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a10      	ldr	r2, [pc, #64]	; (8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d10c      	bne.n	80059dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3714      	adds	r7, #20
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bc80      	pop	{r7}
 80059f6:	4770      	bx	lr
 80059f8:	40012c00 	.word	0x40012c00
 80059fc:	40000400 	.word	0x40000400
 8005a00:	40000800 	.word	0x40000800

08005a04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bc80      	pop	{r7}
 8005a14:	4770      	bx	lr

08005a16 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b083      	sub	sp, #12
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a1e:	bf00      	nop
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bc80      	pop	{r7}
 8005a26:	4770      	bx	lr

08005a28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e03f      	b.n	8005aba <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d106      	bne.n	8005a54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f7fc f90c 	bl	8001c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2224      	movs	r2, #36	; 0x24
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68da      	ldr	r2, [r3, #12]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 fba9 	bl	80061c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	691a      	ldr	r2, [r3, #16]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	695a      	ldr	r2, [r3, #20]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68da      	ldr	r2, [r3, #12]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005aa0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3708      	adds	r7, #8
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b084      	sub	sp, #16
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	60f8      	str	r0, [r7, #12]
 8005aca:	60b9      	str	r1, [r7, #8]
 8005acc:	4613      	mov	r3, r2
 8005ace:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b20      	cmp	r3, #32
 8005ada:	d11d      	bne.n	8005b18 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d002      	beq.n	8005ae8 <HAL_UART_Receive_IT+0x26>
 8005ae2:	88fb      	ldrh	r3, [r7, #6]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d101      	bne.n	8005aec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e016      	b.n	8005b1a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d101      	bne.n	8005afa <HAL_UART_Receive_IT+0x38>
 8005af6:	2302      	movs	r3, #2
 8005af8:	e00f      	b.n	8005b1a <HAL_UART_Receive_IT+0x58>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005b08:	88fb      	ldrh	r3, [r7, #6]
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	68b9      	ldr	r1, [r7, #8]
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f000 f9cf 	bl	8005eb2 <UART_Start_Receive_IT>
 8005b14:	4603      	mov	r3, r0
 8005b16:	e000      	b.n	8005b1a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005b18:	2302      	movs	r3, #2
  }
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
	...

08005b24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b08a      	sub	sp, #40	; 0x28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	f003 030f 	and.w	r3, r3, #15
 8005b52:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d10d      	bne.n	8005b76 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	f003 0320 	and.w	r3, r3, #32
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d008      	beq.n	8005b76 <HAL_UART_IRQHandler+0x52>
 8005b64:	6a3b      	ldr	r3, [r7, #32]
 8005b66:	f003 0320 	and.w	r3, r3, #32
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d003      	beq.n	8005b76 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 fa7f 	bl	8006072 <UART_Receive_IT>
      return;
 8005b74:	e17b      	b.n	8005e6e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 80b1 	beq.w	8005ce0 <HAL_UART_IRQHandler+0x1bc>
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d105      	bne.n	8005b94 <HAL_UART_IRQHandler+0x70>
 8005b88:	6a3b      	ldr	r3, [r7, #32]
 8005b8a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 80a6 	beq.w	8005ce0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	f003 0301 	and.w	r3, r3, #1
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00a      	beq.n	8005bb4 <HAL_UART_IRQHandler+0x90>
 8005b9e:	6a3b      	ldr	r3, [r7, #32]
 8005ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d005      	beq.n	8005bb4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bac:	f043 0201 	orr.w	r2, r3, #1
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	f003 0304 	and.w	r3, r3, #4
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00a      	beq.n	8005bd4 <HAL_UART_IRQHandler+0xb0>
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d005      	beq.n	8005bd4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bcc:	f043 0202 	orr.w	r2, r3, #2
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	f003 0302 	and.w	r3, r3, #2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00a      	beq.n	8005bf4 <HAL_UART_IRQHandler+0xd0>
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	f003 0301 	and.w	r3, r3, #1
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d005      	beq.n	8005bf4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bec:	f043 0204 	orr.w	r2, r3, #4
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	f003 0308 	and.w	r3, r3, #8
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00f      	beq.n	8005c1e <HAL_UART_IRQHandler+0xfa>
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	f003 0320 	and.w	r3, r3, #32
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d104      	bne.n	8005c12 <HAL_UART_IRQHandler+0xee>
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d005      	beq.n	8005c1e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c16:	f043 0208 	orr.w	r2, r3, #8
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 811e 	beq.w	8005e64 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2a:	f003 0320 	and.w	r3, r3, #32
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d007      	beq.n	8005c42 <HAL_UART_IRQHandler+0x11e>
 8005c32:	6a3b      	ldr	r3, [r7, #32]
 8005c34:	f003 0320 	and.w	r3, r3, #32
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d002      	beq.n	8005c42 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 fa18 	bl	8006072 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	bf14      	ite	ne
 8005c50:	2301      	movne	r3, #1
 8005c52:	2300      	moveq	r3, #0
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5c:	f003 0308 	and.w	r3, r3, #8
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d102      	bne.n	8005c6a <HAL_UART_IRQHandler+0x146>
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d031      	beq.n	8005cce <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f95a 	bl	8005f24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d023      	beq.n	8005cc6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	695a      	ldr	r2, [r3, #20]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c8c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d013      	beq.n	8005cbe <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9a:	4a76      	ldr	r2, [pc, #472]	; (8005e74 <HAL_UART_IRQHandler+0x350>)
 8005c9c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7fc fa7c 	bl	80021a0 <HAL_DMA_Abort_IT>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d016      	beq.n	8005cdc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005cb8:	4610      	mov	r0, r2
 8005cba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cbc:	e00e      	b.n	8005cdc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f8e3 	bl	8005e8a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc4:	e00a      	b.n	8005cdc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f8df 	bl	8005e8a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ccc:	e006      	b.n	8005cdc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 f8db 	bl	8005e8a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005cda:	e0c3      	b.n	8005e64 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cdc:	bf00      	nop
    return;
 8005cde:	e0c1      	b.n	8005e64 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	f040 80a1 	bne.w	8005e2c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	f003 0310 	and.w	r3, r3, #16
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f000 809b 	beq.w	8005e2c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005cf6:	6a3b      	ldr	r3, [r7, #32]
 8005cf8:	f003 0310 	and.w	r3, r3, #16
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 8095 	beq.w	8005e2c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d02:	2300      	movs	r3, #0
 8005d04:	60fb      	str	r3, [r7, #12]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	60fb      	str	r3, [r7, #12]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	60fb      	str	r3, [r7, #12]
 8005d16:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d04e      	beq.n	8005dc4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005d30:	8a3b      	ldrh	r3, [r7, #16]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f000 8098 	beq.w	8005e68 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d3c:	8a3a      	ldrh	r2, [r7, #16]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	f080 8092 	bcs.w	8005e68 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	8a3a      	ldrh	r2, [r7, #16]
 8005d48:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	2b20      	cmp	r3, #32
 8005d52:	d02b      	beq.n	8005dac <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68da      	ldr	r2, [r3, #12]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d62:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	695a      	ldr	r2, [r3, #20]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f022 0201 	bic.w	r2, r2, #1
 8005d72:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	695a      	ldr	r2, [r3, #20]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d82:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2220      	movs	r2, #32
 8005d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68da      	ldr	r2, [r3, #12]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f022 0210 	bic.w	r2, r2, #16
 8005da0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7fc f9bf 	bl	800212a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	4619      	mov	r1, r3
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f86d 	bl	8005e9c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005dc2:	e051      	b.n	8005e68 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d047      	beq.n	8005e6c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005ddc:	8a7b      	ldrh	r3, [r7, #18]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d044      	beq.n	8005e6c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68da      	ldr	r2, [r3, #12]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005df0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	695a      	ldr	r2, [r3, #20]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f022 0201 	bic.w	r2, r2, #1
 8005e00:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2220      	movs	r2, #32
 8005e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68da      	ldr	r2, [r3, #12]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f022 0210 	bic.w	r2, r2, #16
 8005e1e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e20:	8a7b      	ldrh	r3, [r7, #18]
 8005e22:	4619      	mov	r1, r3
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f839 	bl	8005e9c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005e2a:	e01f      	b.n	8005e6c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d008      	beq.n	8005e48 <HAL_UART_IRQHandler+0x324>
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 f8af 	bl	8005fa4 <UART_Transmit_IT>
    return;
 8005e46:	e012      	b.n	8005e6e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00d      	beq.n	8005e6e <HAL_UART_IRQHandler+0x34a>
 8005e52:	6a3b      	ldr	r3, [r7, #32]
 8005e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d008      	beq.n	8005e6e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 f8f0 	bl	8006042 <UART_EndTransmit_IT>
    return;
 8005e62:	e004      	b.n	8005e6e <HAL_UART_IRQHandler+0x34a>
    return;
 8005e64:	bf00      	nop
 8005e66:	e002      	b.n	8005e6e <HAL_UART_IRQHandler+0x34a>
      return;
 8005e68:	bf00      	nop
 8005e6a:	e000      	b.n	8005e6e <HAL_UART_IRQHandler+0x34a>
      return;
 8005e6c:	bf00      	nop
  }
}
 8005e6e:	3728      	adds	r7, #40	; 0x28
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	08005f7d 	.word	0x08005f7d

08005e78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bc80      	pop	{r7}
 8005e88:	4770      	bx	lr

08005e8a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b083      	sub	sp, #12
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e92:	bf00      	nop
 8005e94:	370c      	adds	r7, #12
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bc80      	pop	{r7}
 8005e9a:	4770      	bx	lr

08005e9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bc80      	pop	{r7}
 8005eb0:	4770      	bx	lr

08005eb2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b085      	sub	sp, #20
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	60f8      	str	r0, [r7, #12]
 8005eba:	60b9      	str	r1, [r7, #8]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	88fa      	ldrh	r2, [r7, #6]
 8005eca:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	88fa      	ldrh	r2, [r7, #6]
 8005ed0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2222      	movs	r2, #34	; 0x22
 8005edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68da      	ldr	r2, [r3, #12]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ef6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	695a      	ldr	r2, [r3, #20]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f042 0201 	orr.w	r2, r2, #1
 8005f06:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68da      	ldr	r2, [r3, #12]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f042 0220 	orr.w	r2, r2, #32
 8005f16:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3714      	adds	r7, #20
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bc80      	pop	{r7}
 8005f22:	4770      	bx	lr

08005f24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68da      	ldr	r2, [r3, #12]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005f3a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	695a      	ldr	r2, [r3, #20]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f022 0201 	bic.w	r2, r2, #1
 8005f4a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d107      	bne.n	8005f64 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68da      	ldr	r2, [r3, #12]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f022 0210 	bic.w	r2, r2, #16
 8005f62:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2220      	movs	r2, #32
 8005f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f72:	bf00      	nop
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bc80      	pop	{r7}
 8005f7a:	4770      	bx	lr

08005f7c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f7ff ff77 	bl	8005e8a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f9c:	bf00      	nop
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b21      	cmp	r3, #33	; 0x21
 8005fb6:	d13e      	bne.n	8006036 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fc0:	d114      	bne.n	8005fec <UART_Transmit_IT+0x48>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d110      	bne.n	8005fec <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	881b      	ldrh	r3, [r3, #0]
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fde:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a1b      	ldr	r3, [r3, #32]
 8005fe4:	1c9a      	adds	r2, r3, #2
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	621a      	str	r2, [r3, #32]
 8005fea:	e008      	b.n	8005ffe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a1b      	ldr	r3, [r3, #32]
 8005ff0:	1c59      	adds	r1, r3, #1
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	6211      	str	r1, [r2, #32]
 8005ff6:	781a      	ldrb	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006002:	b29b      	uxth	r3, r3
 8006004:	3b01      	subs	r3, #1
 8006006:	b29b      	uxth	r3, r3
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	4619      	mov	r1, r3
 800600c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10f      	bne.n	8006032 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68da      	ldr	r2, [r3, #12]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006020:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68da      	ldr	r2, [r3, #12]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006030:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006032:	2300      	movs	r3, #0
 8006034:	e000      	b.n	8006038 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006036:	2302      	movs	r3, #2
  }
}
 8006038:	4618      	mov	r0, r3
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	bc80      	pop	{r7}
 8006040:	4770      	bx	lr

08006042 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b082      	sub	sp, #8
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006058:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2220      	movs	r2, #32
 800605e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f7ff ff08 	bl	8005e78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b086      	sub	sp, #24
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b22      	cmp	r3, #34	; 0x22
 8006084:	f040 8099 	bne.w	80061ba <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006090:	d117      	bne.n	80060c2 <UART_Receive_IT+0x50>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d113      	bne.n	80060c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800609a:	2300      	movs	r3, #0
 800609c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ba:	1c9a      	adds	r2, r3, #2
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	629a      	str	r2, [r3, #40]	; 0x28
 80060c0:	e026      	b.n	8006110 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80060c8:	2300      	movs	r3, #0
 80060ca:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060d4:	d007      	beq.n	80060e6 <UART_Receive_IT+0x74>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10a      	bne.n	80060f4 <UART_Receive_IT+0x82>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d106      	bne.n	80060f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	b2da      	uxtb	r2, r3
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	701a      	strb	r2, [r3, #0]
 80060f2:	e008      	b.n	8006106 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006100:	b2da      	uxtb	r2, r3
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006114:	b29b      	uxth	r3, r3
 8006116:	3b01      	subs	r3, #1
 8006118:	b29b      	uxth	r3, r3
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	4619      	mov	r1, r3
 800611e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006120:	2b00      	cmp	r3, #0
 8006122:	d148      	bne.n	80061b6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68da      	ldr	r2, [r3, #12]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f022 0220 	bic.w	r2, r2, #32
 8006132:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68da      	ldr	r2, [r3, #12]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006142:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	695a      	ldr	r2, [r3, #20]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f022 0201 	bic.w	r2, r2, #1
 8006152:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2220      	movs	r2, #32
 8006158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006160:	2b01      	cmp	r3, #1
 8006162:	d123      	bne.n	80061ac <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68da      	ldr	r2, [r3, #12]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f022 0210 	bic.w	r2, r2, #16
 8006178:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0310 	and.w	r3, r3, #16
 8006184:	2b10      	cmp	r3, #16
 8006186:	d10a      	bne.n	800619e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006188:	2300      	movs	r3, #0
 800618a:	60fb      	str	r3, [r7, #12]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	60fb      	str	r3, [r7, #12]
 800619c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061a2:	4619      	mov	r1, r3
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f7ff fe79 	bl	8005e9c <HAL_UARTEx_RxEventCallback>
 80061aa:	e002      	b.n	80061b2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f7fb fc85 	bl	8001abc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	e002      	b.n	80061bc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80061b6:	2300      	movs	r3, #0
 80061b8:	e000      	b.n	80061bc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80061ba:	2302      	movs	r3, #2
  }
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3718      	adds	r7, #24
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68da      	ldr	r2, [r3, #12]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	430a      	orrs	r2, r1
 80061e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	689a      	ldr	r2, [r3, #8]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	431a      	orrs	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	695b      	ldr	r3, [r3, #20]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80061fe:	f023 030c 	bic.w	r3, r3, #12
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	6812      	ldr	r2, [r2, #0]
 8006206:	68b9      	ldr	r1, [r7, #8]
 8006208:	430b      	orrs	r3, r1
 800620a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	699a      	ldr	r2, [r3, #24]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	430a      	orrs	r2, r1
 8006220:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a2c      	ldr	r2, [pc, #176]	; (80062d8 <UART_SetConfig+0x114>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d103      	bne.n	8006234 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800622c:	f7fe fcd4 	bl	8004bd8 <HAL_RCC_GetPCLK2Freq>
 8006230:	60f8      	str	r0, [r7, #12]
 8006232:	e002      	b.n	800623a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006234:	f7fe fcbc 	bl	8004bb0 <HAL_RCC_GetPCLK1Freq>
 8006238:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	4613      	mov	r3, r2
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	009a      	lsls	r2, r3, #2
 8006244:	441a      	add	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006250:	4a22      	ldr	r2, [pc, #136]	; (80062dc <UART_SetConfig+0x118>)
 8006252:	fba2 2303 	umull	r2, r3, r2, r3
 8006256:	095b      	lsrs	r3, r3, #5
 8006258:	0119      	lsls	r1, r3, #4
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	4613      	mov	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4413      	add	r3, r2
 8006262:	009a      	lsls	r2, r3, #2
 8006264:	441a      	add	r2, r3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006270:	4b1a      	ldr	r3, [pc, #104]	; (80062dc <UART_SetConfig+0x118>)
 8006272:	fba3 0302 	umull	r0, r3, r3, r2
 8006276:	095b      	lsrs	r3, r3, #5
 8006278:	2064      	movs	r0, #100	; 0x64
 800627a:	fb00 f303 	mul.w	r3, r0, r3
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	011b      	lsls	r3, r3, #4
 8006282:	3332      	adds	r3, #50	; 0x32
 8006284:	4a15      	ldr	r2, [pc, #84]	; (80062dc <UART_SetConfig+0x118>)
 8006286:	fba2 2303 	umull	r2, r3, r2, r3
 800628a:	095b      	lsrs	r3, r3, #5
 800628c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006290:	4419      	add	r1, r3
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	4613      	mov	r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4413      	add	r3, r2
 800629a:	009a      	lsls	r2, r3, #2
 800629c:	441a      	add	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80062a8:	4b0c      	ldr	r3, [pc, #48]	; (80062dc <UART_SetConfig+0x118>)
 80062aa:	fba3 0302 	umull	r0, r3, r3, r2
 80062ae:	095b      	lsrs	r3, r3, #5
 80062b0:	2064      	movs	r0, #100	; 0x64
 80062b2:	fb00 f303 	mul.w	r3, r0, r3
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	011b      	lsls	r3, r3, #4
 80062ba:	3332      	adds	r3, #50	; 0x32
 80062bc:	4a07      	ldr	r2, [pc, #28]	; (80062dc <UART_SetConfig+0x118>)
 80062be:	fba2 2303 	umull	r2, r3, r2, r3
 80062c2:	095b      	lsrs	r3, r3, #5
 80062c4:	f003 020f 	and.w	r2, r3, #15
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	440a      	add	r2, r1
 80062ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80062d0:	bf00      	nop
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	40013800 	.word	0x40013800
 80062dc:	51eb851f 	.word	0x51eb851f

080062e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80062e0:	b084      	sub	sp, #16
 80062e2:	b480      	push	{r7}
 80062e4:	b083      	sub	sp, #12
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
 80062ea:	f107 0014 	add.w	r0, r7, #20
 80062ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bc80      	pop	{r7}
 80062fc:	b004      	add	sp, #16
 80062fe:	4770      	bx	lr

08006300 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006310:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006314:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	b29a      	uxth	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	bc80      	pop	{r7}
 800632a:	4770      	bx	lr

0800632c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006334:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006338:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006340:	b29a      	uxth	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	b29b      	uxth	r3, r3
 8006346:	43db      	mvns	r3, r3
 8006348:	b29b      	uxth	r3, r3
 800634a:	4013      	ands	r3, r2
 800634c:	b29a      	uxth	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	bc80      	pop	{r7}
 800635e:	4770      	bx	lr

08006360 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	460b      	mov	r3, r1
 800636a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	370c      	adds	r7, #12
 8006372:	46bd      	mov	sp, r7
 8006374:	bc80      	pop	{r7}
 8006376:	4770      	bx	lr

08006378 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006378:	b084      	sub	sp, #16
 800637a:	b480      	push	{r7}
 800637c:	b083      	sub	sp, #12
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
 8006382:	f107 0014 	add.w	r0, r7, #20
 8006386:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bc80      	pop	{r7}
 80063b4:	b004      	add	sp, #16
 80063b6:	4770      	bx	lr

080063b8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b09b      	sub	sp, #108	; 0x6c
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80063c2:	2300      	movs	r3, #0
 80063c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4413      	add	r3, r2
 80063d2:	881b      	ldrh	r3, [r3, #0]
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80063da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063de:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	78db      	ldrb	r3, [r3, #3]
 80063e6:	2b03      	cmp	r3, #3
 80063e8:	d81f      	bhi.n	800642a <USB_ActivateEndpoint+0x72>
 80063ea:	a201      	add	r2, pc, #4	; (adr r2, 80063f0 <USB_ActivateEndpoint+0x38>)
 80063ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f0:	08006401 	.word	0x08006401
 80063f4:	0800641d 	.word	0x0800641d
 80063f8:	08006433 	.word	0x08006433
 80063fc:	0800640f 	.word	0x0800640f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006400:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006404:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006408:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800640c:	e012      	b.n	8006434 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800640e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006412:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006416:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800641a:	e00b      	b.n	8006434 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800641c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006420:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006424:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006428:	e004      	b.n	8006434 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006430:	e000      	b.n	8006434 <USB_ActivateEndpoint+0x7c>
      break;
 8006432:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	441a      	add	r2, r3
 800643e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006442:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006446:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800644a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800644e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006452:	b29b      	uxth	r3, r3
 8006454:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	4413      	add	r3, r2
 8006460:	881b      	ldrh	r3, [r3, #0]
 8006462:	b29b      	uxth	r3, r3
 8006464:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800646c:	b29a      	uxth	r2, r3
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	b29b      	uxth	r3, r3
 8006474:	4313      	orrs	r3, r2
 8006476:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	441a      	add	r2, r3
 8006484:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006488:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800648c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006498:	b29b      	uxth	r3, r3
 800649a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	7b1b      	ldrb	r3, [r3, #12]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f040 8149 	bne.w	8006738 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	785b      	ldrb	r3, [r3, #1]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f000 8084 	beq.w	80065b8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	617b      	str	r3, [r7, #20]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	461a      	mov	r2, r3
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	4413      	add	r3, r2
 80064c2:	617b      	str	r3, [r7, #20]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	011a      	lsls	r2, r3, #4
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064d2:	613b      	str	r3, [r7, #16]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	88db      	ldrh	r3, [r3, #6]
 80064d8:	085b      	lsrs	r3, r3, #1
 80064da:	b29b      	uxth	r3, r3
 80064dc:	005b      	lsls	r3, r3, #1
 80064de:	b29a      	uxth	r2, r3
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	881b      	ldrh	r3, [r3, #0]
 80064f0:	81fb      	strh	r3, [r7, #14]
 80064f2:	89fb      	ldrh	r3, [r7, #14]
 80064f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d01b      	beq.n	8006534 <USB_ActivateEndpoint+0x17c>
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4413      	add	r3, r2
 8006506:	881b      	ldrh	r3, [r3, #0]
 8006508:	b29b      	uxth	r3, r3
 800650a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800650e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006512:	81bb      	strh	r3, [r7, #12]
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	441a      	add	r2, r3
 800651e:	89bb      	ldrh	r3, [r7, #12]
 8006520:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006524:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006528:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800652c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006530:	b29b      	uxth	r3, r3
 8006532:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	78db      	ldrb	r3, [r3, #3]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d020      	beq.n	800657e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	881b      	ldrh	r3, [r3, #0]
 8006548:	b29b      	uxth	r3, r3
 800654a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800654e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006552:	813b      	strh	r3, [r7, #8]
 8006554:	893b      	ldrh	r3, [r7, #8]
 8006556:	f083 0320 	eor.w	r3, r3, #32
 800655a:	813b      	strh	r3, [r7, #8]
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	441a      	add	r2, r3
 8006566:	893b      	ldrh	r3, [r7, #8]
 8006568:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800656c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006570:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006578:	b29b      	uxth	r3, r3
 800657a:	8013      	strh	r3, [r2, #0]
 800657c:	e27f      	b.n	8006a7e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4413      	add	r3, r2
 8006588:	881b      	ldrh	r3, [r3, #0]
 800658a:	b29b      	uxth	r3, r3
 800658c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006590:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006594:	817b      	strh	r3, [r7, #10]
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	441a      	add	r2, r3
 80065a0:	897b      	ldrh	r3, [r7, #10]
 80065a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	8013      	strh	r3, [r2, #0]
 80065b6:	e262      	b.n	8006a7e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	461a      	mov	r2, r3
 80065c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c8:	4413      	add	r3, r2
 80065ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	011a      	lsls	r2, r3, #4
 80065d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80065da:	62bb      	str	r3, [r7, #40]	; 0x28
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	88db      	ldrh	r3, [r3, #6]
 80065e0:	085b      	lsrs	r3, r3, #1
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	005b      	lsls	r3, r3, #1
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ea:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	627b      	str	r3, [r7, #36]	; 0x24
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	461a      	mov	r2, r3
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fc:	4413      	add	r3, r2
 80065fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	011a      	lsls	r2, r3, #4
 8006606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006608:	4413      	add	r3, r2
 800660a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800660e:	623b      	str	r3, [r7, #32]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d112      	bne.n	800663e <USB_ActivateEndpoint+0x286>
 8006618:	6a3b      	ldr	r3, [r7, #32]
 800661a:	881b      	ldrh	r3, [r3, #0]
 800661c:	b29b      	uxth	r3, r3
 800661e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006622:	b29a      	uxth	r2, r3
 8006624:	6a3b      	ldr	r3, [r7, #32]
 8006626:	801a      	strh	r2, [r3, #0]
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	881b      	ldrh	r3, [r3, #0]
 800662c:	b29b      	uxth	r3, r3
 800662e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006632:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006636:	b29a      	uxth	r2, r3
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	801a      	strh	r2, [r3, #0]
 800663c:	e02f      	b.n	800669e <USB_ActivateEndpoint+0x2e6>
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	2b3e      	cmp	r3, #62	; 0x3e
 8006644:	d813      	bhi.n	800666e <USB_ActivateEndpoint+0x2b6>
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	085b      	lsrs	r3, r3, #1
 800664c:	663b      	str	r3, [r7, #96]	; 0x60
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b00      	cmp	r3, #0
 8006658:	d002      	beq.n	8006660 <USB_ActivateEndpoint+0x2a8>
 800665a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800665c:	3301      	adds	r3, #1
 800665e:	663b      	str	r3, [r7, #96]	; 0x60
 8006660:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006662:	b29b      	uxth	r3, r3
 8006664:	029b      	lsls	r3, r3, #10
 8006666:	b29a      	uxth	r2, r3
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	801a      	strh	r2, [r3, #0]
 800666c:	e017      	b.n	800669e <USB_ActivateEndpoint+0x2e6>
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	095b      	lsrs	r3, r3, #5
 8006674:	663b      	str	r3, [r7, #96]	; 0x60
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	f003 031f 	and.w	r3, r3, #31
 800667e:	2b00      	cmp	r3, #0
 8006680:	d102      	bne.n	8006688 <USB_ActivateEndpoint+0x2d0>
 8006682:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006684:	3b01      	subs	r3, #1
 8006686:	663b      	str	r3, [r7, #96]	; 0x60
 8006688:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800668a:	b29b      	uxth	r3, r3
 800668c:	029b      	lsls	r3, r3, #10
 800668e:	b29b      	uxth	r3, r3
 8006690:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006694:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006698:	b29a      	uxth	r2, r3
 800669a:	6a3b      	ldr	r3, [r7, #32]
 800669c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	4413      	add	r3, r2
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	83fb      	strh	r3, [r7, #30]
 80066ac:	8bfb      	ldrh	r3, [r7, #30]
 80066ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d01b      	beq.n	80066ee <USB_ActivateEndpoint+0x336>
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	881b      	ldrh	r3, [r3, #0]
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066cc:	83bb      	strh	r3, [r7, #28]
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	441a      	add	r2, r3
 80066d8:	8bbb      	ldrh	r3, [r7, #28]
 80066da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	4413      	add	r3, r2
 80066f8:	881b      	ldrh	r3, [r3, #0]
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006704:	837b      	strh	r3, [r7, #26]
 8006706:	8b7b      	ldrh	r3, [r7, #26]
 8006708:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800670c:	837b      	strh	r3, [r7, #26]
 800670e:	8b7b      	ldrh	r3, [r7, #26]
 8006710:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006714:	837b      	strh	r3, [r7, #26]
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	441a      	add	r2, r3
 8006720:	8b7b      	ldrh	r3, [r7, #26]
 8006722:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006726:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800672a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800672e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006732:	b29b      	uxth	r3, r3
 8006734:	8013      	strh	r3, [r2, #0]
 8006736:	e1a2      	b.n	8006a7e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	881b      	ldrh	r3, [r3, #0]
 8006744:	b29b      	uxth	r3, r3
 8006746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800674a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	441a      	add	r2, r3
 800675c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006760:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006764:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006768:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800676c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006770:	b29b      	uxth	r3, r3
 8006772:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	65bb      	str	r3, [r7, #88]	; 0x58
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800677e:	b29b      	uxth	r3, r3
 8006780:	461a      	mov	r2, r3
 8006782:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006784:	4413      	add	r3, r2
 8006786:	65bb      	str	r3, [r7, #88]	; 0x58
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	011a      	lsls	r2, r3, #4
 800678e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006790:	4413      	add	r3, r2
 8006792:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006796:	657b      	str	r3, [r7, #84]	; 0x54
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	891b      	ldrh	r3, [r3, #8]
 800679c:	085b      	lsrs	r3, r3, #1
 800679e:	b29b      	uxth	r3, r3
 80067a0:	005b      	lsls	r3, r3, #1
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067a6:	801a      	strh	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	653b      	str	r3, [r7, #80]	; 0x50
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	461a      	mov	r2, r3
 80067b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067b8:	4413      	add	r3, r2
 80067ba:	653b      	str	r3, [r7, #80]	; 0x50
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	011a      	lsls	r2, r3, #4
 80067c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067c4:	4413      	add	r3, r2
 80067c6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80067ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	895b      	ldrh	r3, [r3, #10]
 80067d0:	085b      	lsrs	r3, r3, #1
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	005b      	lsls	r3, r3, #1
 80067d6:	b29a      	uxth	r2, r3
 80067d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067da:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	785b      	ldrb	r3, [r3, #1]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f040 8091 	bne.w	8006908 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	4413      	add	r3, r2
 80067f0:	881b      	ldrh	r3, [r3, #0]
 80067f2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80067f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80067f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d01b      	beq.n	8006836 <USB_ActivateEndpoint+0x47e>
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	4413      	add	r3, r2
 8006808:	881b      	ldrh	r3, [r3, #0]
 800680a:	b29b      	uxth	r3, r3
 800680c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006814:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	441a      	add	r2, r3
 8006820:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006822:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006826:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800682a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800682e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006832:	b29b      	uxth	r3, r3
 8006834:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	4413      	add	r3, r2
 8006840:	881b      	ldrh	r3, [r3, #0]
 8006842:	873b      	strh	r3, [r7, #56]	; 0x38
 8006844:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800684a:	2b00      	cmp	r3, #0
 800684c:	d01b      	beq.n	8006886 <USB_ActivateEndpoint+0x4ce>
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	4413      	add	r3, r2
 8006858:	881b      	ldrh	r3, [r3, #0]
 800685a:	b29b      	uxth	r3, r3
 800685c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006864:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	441a      	add	r2, r3
 8006870:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006872:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006876:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800687a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800687e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006882:	b29b      	uxth	r3, r3
 8006884:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	4413      	add	r3, r2
 8006890:	881b      	ldrh	r3, [r3, #0]
 8006892:	b29b      	uxth	r3, r3
 8006894:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800689c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800689e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80068a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068a4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80068a6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80068a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80068ac:	86bb      	strh	r3, [r7, #52]	; 0x34
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	441a      	add	r2, r3
 80068b8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80068ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	881b      	ldrh	r3, [r3, #0]
 80068da:	b29b      	uxth	r3, r3
 80068dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068e4:	867b      	strh	r3, [r7, #50]	; 0x32
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	441a      	add	r2, r3
 80068f0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80068f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006902:	b29b      	uxth	r3, r3
 8006904:	8013      	strh	r3, [r2, #0]
 8006906:	e0ba      	b.n	8006a7e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4413      	add	r3, r2
 8006912:	881b      	ldrh	r3, [r3, #0]
 8006914:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006918:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800691c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006920:	2b00      	cmp	r3, #0
 8006922:	d01d      	beq.n	8006960 <USB_ActivateEndpoint+0x5a8>
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	4413      	add	r3, r2
 800692e:	881b      	ldrh	r3, [r3, #0]
 8006930:	b29b      	uxth	r3, r3
 8006932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800693a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	441a      	add	r2, r3
 8006948:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800694c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006950:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006954:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800695c:	b29b      	uxth	r3, r3
 800695e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	881b      	ldrh	r3, [r3, #0]
 800696c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006970:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006978:	2b00      	cmp	r3, #0
 800697a:	d01d      	beq.n	80069b8 <USB_ActivateEndpoint+0x600>
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4413      	add	r3, r2
 8006986:	881b      	ldrh	r3, [r3, #0]
 8006988:	b29b      	uxth	r3, r3
 800698a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800698e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006992:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	441a      	add	r2, r3
 80069a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80069a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	78db      	ldrb	r3, [r3, #3]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d024      	beq.n	8006a0a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	881b      	ldrh	r3, [r3, #0]
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80069da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80069de:	f083 0320 	eor.w	r3, r3, #32
 80069e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	441a      	add	r2, r3
 80069f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80069f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	8013      	strh	r3, [r2, #0]
 8006a08:	e01d      	b.n	8006a46 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	881b      	ldrh	r3, [r3, #0]
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a20:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	441a      	add	r2, r3
 8006a2e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a5c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	441a      	add	r2, r3
 8006a68:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006a6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006a7e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	376c      	adds	r7, #108	; 0x6c
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bc80      	pop	{r7}
 8006a8a:	4770      	bx	lr

08006a8c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b08d      	sub	sp, #52	; 0x34
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	7b1b      	ldrb	r3, [r3, #12]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f040 808e 	bne.w	8006bbc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	785b      	ldrb	r3, [r3, #1]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d044      	beq.n	8006b32 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	009b      	lsls	r3, r3, #2
 8006ab0:	4413      	add	r3, r2
 8006ab2:	881b      	ldrh	r3, [r3, #0]
 8006ab4:	81bb      	strh	r3, [r7, #12]
 8006ab6:	89bb      	ldrh	r3, [r7, #12]
 8006ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d01b      	beq.n	8006af8 <USB_DeactivateEndpoint+0x6c>
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4413      	add	r3, r2
 8006aca:	881b      	ldrh	r3, [r3, #0]
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad6:	817b      	strh	r3, [r7, #10]
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	441a      	add	r2, r3
 8006ae2:	897b      	ldrh	r3, [r7, #10]
 8006ae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006af0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	881b      	ldrh	r3, [r3, #0]
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b0e:	813b      	strh	r3, [r7, #8]
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	441a      	add	r2, r3
 8006b1a:	893b      	ldrh	r3, [r7, #8]
 8006b1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	8013      	strh	r3, [r2, #0]
 8006b30:	e192      	b.n	8006e58 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4413      	add	r3, r2
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	827b      	strh	r3, [r7, #18]
 8006b40:	8a7b      	ldrh	r3, [r7, #18]
 8006b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d01b      	beq.n	8006b82 <USB_DeactivateEndpoint+0xf6>
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4413      	add	r3, r2
 8006b54:	881b      	ldrh	r3, [r3, #0]
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b60:	823b      	strh	r3, [r7, #16]
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	441a      	add	r2, r3
 8006b6c:	8a3b      	ldrh	r3, [r7, #16]
 8006b6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	881b      	ldrh	r3, [r3, #0]
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b98:	81fb      	strh	r3, [r7, #14]
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	441a      	add	r2, r3
 8006ba4:	89fb      	ldrh	r3, [r7, #14]
 8006ba6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006baa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	8013      	strh	r3, [r2, #0]
 8006bba:	e14d      	b.n	8006e58 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	785b      	ldrb	r3, [r3, #1]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f040 80a5 	bne.w	8006d10 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4413      	add	r3, r2
 8006bd0:	881b      	ldrh	r3, [r3, #0]
 8006bd2:	843b      	strh	r3, [r7, #32]
 8006bd4:	8c3b      	ldrh	r3, [r7, #32]
 8006bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d01b      	beq.n	8006c16 <USB_DeactivateEndpoint+0x18a>
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	881b      	ldrh	r3, [r3, #0]
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bf4:	83fb      	strh	r3, [r7, #30]
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	441a      	add	r2, r3
 8006c00:	8bfb      	ldrh	r3, [r7, #30]
 8006c02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	881b      	ldrh	r3, [r3, #0]
 8006c22:	83bb      	strh	r3, [r7, #28]
 8006c24:	8bbb      	ldrh	r3, [r7, #28]
 8006c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d01b      	beq.n	8006c66 <USB_DeactivateEndpoint+0x1da>
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4413      	add	r3, r2
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c44:	837b      	strh	r3, [r7, #26]
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	441a      	add	r2, r3
 8006c50:	8b7b      	ldrh	r3, [r7, #26]
 8006c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c5e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4413      	add	r3, r2
 8006c70:	881b      	ldrh	r3, [r3, #0]
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c7c:	833b      	strh	r3, [r7, #24]
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	441a      	add	r2, r3
 8006c88:	8b3b      	ldrh	r3, [r7, #24]
 8006c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cb4:	82fb      	strh	r3, [r7, #22]
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	441a      	add	r2, r3
 8006cc0:	8afb      	ldrh	r3, [r7, #22]
 8006cc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	4413      	add	r3, r2
 8006ce0:	881b      	ldrh	r3, [r3, #0]
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cec:	82bb      	strh	r3, [r7, #20]
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	441a      	add	r2, r3
 8006cf8:	8abb      	ldrh	r3, [r7, #20]
 8006cfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	8013      	strh	r3, [r2, #0]
 8006d0e:	e0a3      	b.n	8006e58 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4413      	add	r3, r2
 8006d1a:	881b      	ldrh	r3, [r3, #0]
 8006d1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006d1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d01b      	beq.n	8006d60 <USB_DeactivateEndpoint+0x2d4>
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d3e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	441a      	add	r2, r3
 8006d4a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006d4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	4413      	add	r3, r2
 8006d6a:	881b      	ldrh	r3, [r3, #0]
 8006d6c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006d6e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d01b      	beq.n	8006db0 <USB_DeactivateEndpoint+0x324>
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d8e:	853b      	strh	r3, [r7, #40]	; 0x28
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	441a      	add	r2, r3
 8006d9a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006d9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006da0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006da4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006da8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	4413      	add	r3, r2
 8006dba:	881b      	ldrh	r3, [r3, #0]
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dc6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	441a      	add	r2, r3
 8006dd2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006dd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ddc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	881b      	ldrh	r3, [r3, #0]
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dfe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	441a      	add	r2, r3
 8006e0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	881b      	ldrh	r3, [r3, #0]
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e36:	847b      	strh	r3, [r7, #34]	; 0x22
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	441a      	add	r2, r3
 8006e42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006e44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3734      	adds	r7, #52	; 0x34
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bc80      	pop	{r7}
 8006e62:	4770      	bx	lr

08006e64 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b0cc      	sub	sp, #304	; 0x130
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e72:	6018      	str	r0, [r3, #0]
 8006e74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e7c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	785b      	ldrb	r3, [r3, #1]
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	f041 817d 	bne.w	800818a <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006e90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	699a      	ldr	r2, [r3, #24]
 8006e9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ea0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d908      	bls.n	8006ebe <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006eac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006ebc:	e007      	b.n	8006ece <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006ebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ec2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	699b      	ldr	r3, [r3, #24]
 8006eca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006ece:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	7b1b      	ldrb	r3, [r3, #12]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d152      	bne.n	8006f84 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006ede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ee2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6959      	ldr	r1, [r3, #20]
 8006eea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	88da      	ldrh	r2, [r3, #6]
 8006ef6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006f00:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006f04:	6800      	ldr	r0, [r0, #0]
 8006f06:	f001 ff23 	bl	8008d50 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006f0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f0e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006f12:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f16:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006f1a:	6812      	ldr	r2, [r2, #0]
 8006f1c:	601a      	str	r2, [r3, #0]
 8006f1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	4619      	mov	r1, r3
 8006f30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f34:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006f38:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f3c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006f40:	6812      	ldr	r2, [r2, #0]
 8006f42:	440a      	add	r2, r1
 8006f44:	601a      	str	r2, [r3, #0]
 8006f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	011a      	lsls	r2, r3, #4
 8006f54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f58:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4413      	add	r3, r2
 8006f60:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f68:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006f6c:	601a      	str	r2, [r3, #0]
 8006f6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f78:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	801a      	strh	r2, [r3, #0]
 8006f80:	f001 b8b5 	b.w	80080ee <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006f84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	78db      	ldrb	r3, [r3, #3]
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	f040 84c6 	bne.w	8007922 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006f96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6a1a      	ldr	r2, [r3, #32]
 8006fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	f240 8443 	bls.w	800783a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006fb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	4413      	add	r3, r2
 8006fce:	881b      	ldrh	r3, [r3, #0]
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fda:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fe2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	441a      	add	r2, r3
 8006ff8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006ffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007004:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800700c:	b29b      	uxth	r3, r3
 800700e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007014:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	6a1a      	ldr	r2, [r3, #32]
 800701c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007020:	1ad2      	subs	r2, r2, r3
 8007022:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007026:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800702e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007032:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800703c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	4413      	add	r3, r2
 8007048:	881b      	ldrh	r3, [r3, #0]
 800704a:	b29b      	uxth	r3, r3
 800704c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007050:	2b00      	cmp	r3, #0
 8007052:	f000 823e 	beq.w	80074d2 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800705a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800705e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007062:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007066:	6812      	ldr	r2, [r2, #0]
 8007068:	601a      	str	r2, [r3, #0]
 800706a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800706e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	785b      	ldrb	r3, [r3, #1]
 8007076:	2b00      	cmp	r3, #0
 8007078:	f040 809a 	bne.w	80071b0 <USB_EPStartXfer+0x34c>
 800707c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007080:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007084:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007088:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800708c:	6812      	ldr	r2, [r2, #0]
 800708e:	601a      	str	r2, [r3, #0]
 8007090:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007094:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800709e:	b29b      	uxth	r3, r3
 80070a0:	4619      	mov	r1, r3
 80070a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070ae:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80070b2:	6812      	ldr	r2, [r2, #0]
 80070b4:	440a      	add	r2, r1
 80070b6:	601a      	str	r2, [r3, #0]
 80070b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	011a      	lsls	r2, r3, #4
 80070c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4413      	add	r3, r2
 80070d2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80070d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80070de:	601a      	str	r2, [r3, #0]
 80070e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d122      	bne.n	800712e <USB_EPStartXfer+0x2ca>
 80070e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	881b      	ldrh	r3, [r3, #0]
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007100:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	801a      	strh	r2, [r3, #0]
 8007108:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800710c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	881b      	ldrh	r3, [r3, #0]
 8007114:	b29b      	uxth	r3, r3
 8007116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800711a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800711e:	b29a      	uxth	r2, r3
 8007120:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007124:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	801a      	strh	r2, [r3, #0]
 800712c:	e079      	b.n	8007222 <USB_EPStartXfer+0x3be>
 800712e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007132:	2b3e      	cmp	r3, #62	; 0x3e
 8007134:	d81b      	bhi.n	800716e <USB_EPStartXfer+0x30a>
 8007136:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800713a:	085b      	lsrs	r3, r3, #1
 800713c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007140:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007144:	f003 0301 	and.w	r3, r3, #1
 8007148:	2b00      	cmp	r3, #0
 800714a:	d004      	beq.n	8007156 <USB_EPStartXfer+0x2f2>
 800714c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007150:	3301      	adds	r3, #1
 8007152:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007156:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800715a:	b29b      	uxth	r3, r3
 800715c:	029b      	lsls	r3, r3, #10
 800715e:	b29a      	uxth	r2, r3
 8007160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007164:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	801a      	strh	r2, [r3, #0]
 800716c:	e059      	b.n	8007222 <USB_EPStartXfer+0x3be>
 800716e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007172:	095b      	lsrs	r3, r3, #5
 8007174:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007178:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800717c:	f003 031f 	and.w	r3, r3, #31
 8007180:	2b00      	cmp	r3, #0
 8007182:	d104      	bne.n	800718e <USB_EPStartXfer+0x32a>
 8007184:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007188:	3b01      	subs	r3, #1
 800718a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800718e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007192:	b29b      	uxth	r3, r3
 8007194:	029b      	lsls	r3, r3, #10
 8007196:	b29b      	uxth	r3, r3
 8007198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800719c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	801a      	strh	r2, [r3, #0]
 80071ae:	e038      	b.n	8007222 <USB_EPStartXfer+0x3be>
 80071b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	785b      	ldrb	r3, [r3, #1]
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d130      	bne.n	8007222 <USB_EPStartXfer+0x3be>
 80071c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	4619      	mov	r1, r3
 80071d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80071da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80071de:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80071e2:	6812      	ldr	r2, [r2, #0]
 80071e4:	440a      	add	r2, r1
 80071e6:	601a      	str	r2, [r3, #0]
 80071e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	011a      	lsls	r2, r3, #4
 80071f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071fa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4413      	add	r3, r2
 8007202:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800720a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800720e:	601a      	str	r2, [r3, #0]
 8007210:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007214:	b29a      	uxth	r2, r3
 8007216:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800721a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007226:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	895b      	ldrh	r3, [r3, #10]
 800722e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007236:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	6959      	ldr	r1, [r3, #20]
 800723e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007242:	b29b      	uxth	r3, r3
 8007244:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007248:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800724c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007250:	6800      	ldr	r0, [r0, #0]
 8007252:	f001 fd7d 	bl	8008d50 <USB_WritePMA>
            ep->xfer_buff += len;
 8007256:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800725a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	695a      	ldr	r2, [r3, #20]
 8007262:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007266:	441a      	add	r2, r3
 8007268:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800726c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007274:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007278:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	6a1a      	ldr	r2, [r3, #32]
 8007280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007284:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	429a      	cmp	r2, r3
 800728e:	d90f      	bls.n	80072b0 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8007290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007294:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	6a1a      	ldr	r2, [r3, #32]
 800729c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072a0:	1ad2      	subs	r2, r2, r3
 80072a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	621a      	str	r2, [r3, #32]
 80072ae:	e00e      	b.n	80072ce <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80072b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	6a1b      	ldr	r3, [r3, #32]
 80072bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80072c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2200      	movs	r2, #0
 80072cc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80072ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	785b      	ldrb	r3, [r3, #1]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f040 809a 	bne.w	8007414 <USB_EPStartXfer+0x5b0>
 80072e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072e4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80072e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80072ec:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80072f0:	6812      	ldr	r2, [r2, #0]
 80072f2:	601a      	str	r2, [r3, #0]
 80072f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007302:	b29b      	uxth	r3, r3
 8007304:	4619      	mov	r1, r3
 8007306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800730a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800730e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007312:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8007316:	6812      	ldr	r2, [r2, #0]
 8007318:	440a      	add	r2, r1
 800731a:	601a      	str	r2, [r3, #0]
 800731c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007320:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	011a      	lsls	r2, r3, #4
 800732a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800732e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4413      	add	r3, r2
 8007336:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800733a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800733e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007348:	2b00      	cmp	r3, #0
 800734a:	d122      	bne.n	8007392 <USB_EPStartXfer+0x52e>
 800734c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007350:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	881b      	ldrh	r3, [r3, #0]
 8007358:	b29b      	uxth	r3, r3
 800735a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800735e:	b29a      	uxth	r2, r3
 8007360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007364:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	801a      	strh	r2, [r3, #0]
 800736c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007370:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	881b      	ldrh	r3, [r3, #0]
 8007378:	b29b      	uxth	r3, r3
 800737a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800737e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007382:	b29a      	uxth	r2, r3
 8007384:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007388:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	801a      	strh	r2, [r3, #0]
 8007390:	e083      	b.n	800749a <USB_EPStartXfer+0x636>
 8007392:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007396:	2b3e      	cmp	r3, #62	; 0x3e
 8007398:	d81b      	bhi.n	80073d2 <USB_EPStartXfer+0x56e>
 800739a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800739e:	085b      	lsrs	r3, r3, #1
 80073a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80073a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073a8:	f003 0301 	and.w	r3, r3, #1
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d004      	beq.n	80073ba <USB_EPStartXfer+0x556>
 80073b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80073b4:	3301      	adds	r3, #1
 80073b6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80073ba:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80073be:	b29b      	uxth	r3, r3
 80073c0:	029b      	lsls	r3, r3, #10
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073c8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	801a      	strh	r2, [r3, #0]
 80073d0:	e063      	b.n	800749a <USB_EPStartXfer+0x636>
 80073d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073d6:	095b      	lsrs	r3, r3, #5
 80073d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80073dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073e0:	f003 031f 	and.w	r3, r3, #31
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d104      	bne.n	80073f2 <USB_EPStartXfer+0x58e>
 80073e8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80073ec:	3b01      	subs	r3, #1
 80073ee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80073f2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	029b      	lsls	r3, r3, #10
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007400:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007404:	b29a      	uxth	r2, r3
 8007406:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800740a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	801a      	strh	r2, [r3, #0]
 8007412:	e042      	b.n	800749a <USB_EPStartXfer+0x636>
 8007414:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007418:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	785b      	ldrb	r3, [r3, #1]
 8007420:	2b01      	cmp	r3, #1
 8007422:	d13a      	bne.n	800749a <USB_EPStartXfer+0x636>
 8007424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007428:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800742c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007430:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007434:	6812      	ldr	r2, [r2, #0]
 8007436:	601a      	str	r2, [r3, #0]
 8007438:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800743c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007446:	b29b      	uxth	r3, r3
 8007448:	4619      	mov	r1, r3
 800744a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800744e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007452:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007456:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800745a:	6812      	ldr	r2, [r2, #0]
 800745c:	440a      	add	r2, r1
 800745e:	601a      	str	r2, [r3, #0]
 8007460:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007464:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	011a      	lsls	r2, r3, #4
 800746e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007472:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4413      	add	r3, r2
 800747a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800747e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007482:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007486:	601a      	str	r2, [r3, #0]
 8007488:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800748c:	b29a      	uxth	r2, r3
 800748e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007492:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800749a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800749e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	891b      	ldrh	r3, [r3, #8]
 80074a6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	6959      	ldr	r1, [r3, #20]
 80074b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80074c0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80074c4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80074c8:	6800      	ldr	r0, [r0, #0]
 80074ca:	f001 fc41 	bl	8008d50 <USB_WritePMA>
 80074ce:	f000 be0e 	b.w	80080ee <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80074d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	785b      	ldrb	r3, [r3, #1]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d16d      	bne.n	80075be <USB_EPStartXfer+0x75a>
 80074e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80074ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	461a      	mov	r2, r3
 8007500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007502:	4413      	add	r3, r2
 8007504:	64bb      	str	r3, [r7, #72]	; 0x48
 8007506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800750a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	011a      	lsls	r2, r3, #4
 8007514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007516:	4413      	add	r3, r2
 8007518:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800751c:	647b      	str	r3, [r7, #68]	; 0x44
 800751e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007522:	2b00      	cmp	r3, #0
 8007524:	d112      	bne.n	800754c <USB_EPStartXfer+0x6e8>
 8007526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007528:	881b      	ldrh	r3, [r3, #0]
 800752a:	b29b      	uxth	r3, r3
 800752c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007530:	b29a      	uxth	r2, r3
 8007532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007534:	801a      	strh	r2, [r3, #0]
 8007536:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007538:	881b      	ldrh	r3, [r3, #0]
 800753a:	b29b      	uxth	r3, r3
 800753c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007540:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007544:	b29a      	uxth	r2, r3
 8007546:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007548:	801a      	strh	r2, [r3, #0]
 800754a:	e063      	b.n	8007614 <USB_EPStartXfer+0x7b0>
 800754c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007550:	2b3e      	cmp	r3, #62	; 0x3e
 8007552:	d817      	bhi.n	8007584 <USB_EPStartXfer+0x720>
 8007554:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007558:	085b      	lsrs	r3, r3, #1
 800755a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800755e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	2b00      	cmp	r3, #0
 8007568:	d004      	beq.n	8007574 <USB_EPStartXfer+0x710>
 800756a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800756e:	3301      	adds	r3, #1
 8007570:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007574:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007578:	b29b      	uxth	r3, r3
 800757a:	029b      	lsls	r3, r3, #10
 800757c:	b29a      	uxth	r2, r3
 800757e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007580:	801a      	strh	r2, [r3, #0]
 8007582:	e047      	b.n	8007614 <USB_EPStartXfer+0x7b0>
 8007584:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007588:	095b      	lsrs	r3, r3, #5
 800758a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800758e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007592:	f003 031f 	and.w	r3, r3, #31
 8007596:	2b00      	cmp	r3, #0
 8007598:	d104      	bne.n	80075a4 <USB_EPStartXfer+0x740>
 800759a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800759e:	3b01      	subs	r3, #1
 80075a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80075a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	029b      	lsls	r3, r3, #10
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075ba:	801a      	strh	r2, [r3, #0]
 80075bc:	e02a      	b.n	8007614 <USB_EPStartXfer+0x7b0>
 80075be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	785b      	ldrb	r3, [r3, #1]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d122      	bne.n	8007614 <USB_EPStartXfer+0x7b0>
 80075ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	653b      	str	r3, [r7, #80]	; 0x50
 80075da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	461a      	mov	r2, r3
 80075ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075ee:	4413      	add	r3, r2
 80075f0:	653b      	str	r3, [r7, #80]	; 0x50
 80075f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	011a      	lsls	r2, r3, #4
 8007600:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007602:	4413      	add	r3, r2
 8007604:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007608:	64fb      	str	r3, [r7, #76]	; 0x4c
 800760a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800760e:	b29a      	uxth	r2, r3
 8007610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007612:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007614:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007618:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	891b      	ldrh	r3, [r3, #8]
 8007620:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007624:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007628:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	6959      	ldr	r1, [r3, #20]
 8007630:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007634:	b29b      	uxth	r3, r3
 8007636:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800763a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800763e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007642:	6800      	ldr	r0, [r0, #0]
 8007644:	f001 fb84 	bl	8008d50 <USB_WritePMA>
            ep->xfer_buff += len;
 8007648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800764c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	695a      	ldr	r2, [r3, #20]
 8007654:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007658:	441a      	add	r2, r3
 800765a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800765e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800766a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6a1a      	ldr	r2, [r3, #32]
 8007672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007676:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	429a      	cmp	r2, r3
 8007680:	d90f      	bls.n	80076a2 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8007682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007686:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	6a1a      	ldr	r2, [r3, #32]
 800768e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007692:	1ad2      	subs	r2, r2, r3
 8007694:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007698:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	621a      	str	r2, [r3, #32]
 80076a0:	e00e      	b.n	80076c0 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80076a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	6a1b      	ldr	r3, [r3, #32]
 80076ae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80076b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2200      	movs	r2, #0
 80076be:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	643b      	str	r3, [r7, #64]	; 0x40
 80076cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	785b      	ldrb	r3, [r3, #1]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d16d      	bne.n	80077b8 <USB_EPStartXfer+0x954>
 80076dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80076e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	461a      	mov	r2, r3
 80076fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076fc:	4413      	add	r3, r2
 80076fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8007700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007704:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	011a      	lsls	r2, r3, #4
 800770e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007710:	4413      	add	r3, r2
 8007712:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007716:	637b      	str	r3, [r7, #52]	; 0x34
 8007718:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800771c:	2b00      	cmp	r3, #0
 800771e:	d112      	bne.n	8007746 <USB_EPStartXfer+0x8e2>
 8007720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007722:	881b      	ldrh	r3, [r3, #0]
 8007724:	b29b      	uxth	r3, r3
 8007726:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800772a:	b29a      	uxth	r2, r3
 800772c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800772e:	801a      	strh	r2, [r3, #0]
 8007730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007732:	881b      	ldrh	r3, [r3, #0]
 8007734:	b29b      	uxth	r3, r3
 8007736:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800773a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800773e:	b29a      	uxth	r2, r3
 8007740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007742:	801a      	strh	r2, [r3, #0]
 8007744:	e05d      	b.n	8007802 <USB_EPStartXfer+0x99e>
 8007746:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800774a:	2b3e      	cmp	r3, #62	; 0x3e
 800774c:	d817      	bhi.n	800777e <USB_EPStartXfer+0x91a>
 800774e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007752:	085b      	lsrs	r3, r3, #1
 8007754:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007758:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800775c:	f003 0301 	and.w	r3, r3, #1
 8007760:	2b00      	cmp	r3, #0
 8007762:	d004      	beq.n	800776e <USB_EPStartXfer+0x90a>
 8007764:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007768:	3301      	adds	r3, #1
 800776a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800776e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007772:	b29b      	uxth	r3, r3
 8007774:	029b      	lsls	r3, r3, #10
 8007776:	b29a      	uxth	r2, r3
 8007778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800777a:	801a      	strh	r2, [r3, #0]
 800777c:	e041      	b.n	8007802 <USB_EPStartXfer+0x99e>
 800777e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007782:	095b      	lsrs	r3, r3, #5
 8007784:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007788:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800778c:	f003 031f 	and.w	r3, r3, #31
 8007790:	2b00      	cmp	r3, #0
 8007792:	d104      	bne.n	800779e <USB_EPStartXfer+0x93a>
 8007794:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007798:	3b01      	subs	r3, #1
 800779a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800779e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	029b      	lsls	r3, r3, #10
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077b4:	801a      	strh	r2, [r3, #0]
 80077b6:	e024      	b.n	8007802 <USB_EPStartXfer+0x99e>
 80077b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	785b      	ldrb	r3, [r3, #1]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d11c      	bne.n	8007802 <USB_EPStartXfer+0x99e>
 80077c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	461a      	mov	r2, r3
 80077da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077dc:	4413      	add	r3, r2
 80077de:	643b      	str	r3, [r7, #64]	; 0x40
 80077e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	011a      	lsls	r2, r3, #4
 80077ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077f0:	4413      	add	r3, r2
 80077f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80077f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007800:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007806:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	895b      	ldrh	r3, [r3, #10]
 800780e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007816:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	6959      	ldr	r1, [r3, #20]
 800781e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007822:	b29b      	uxth	r3, r3
 8007824:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007828:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800782c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007830:	6800      	ldr	r0, [r0, #0]
 8007832:	f001 fa8d 	bl	8008d50 <USB_WritePMA>
 8007836:	f000 bc5a 	b.w	80080ee <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800783a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800783e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	6a1b      	ldr	r3, [r3, #32]
 8007846:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800784a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800784e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007858:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	4413      	add	r3, r2
 8007864:	881b      	ldrh	r3, [r3, #0]
 8007866:	b29b      	uxth	r3, r3
 8007868:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800786c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007870:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007874:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007878:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007882:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	441a      	add	r2, r3
 800788e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007892:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007896:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800789a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800789e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80078a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	461a      	mov	r2, r3
 80078c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078c6:	4413      	add	r3, r2
 80078c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	011a      	lsls	r2, r3, #4
 80078d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078da:	4413      	add	r3, r2
 80078dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80078e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80078e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078ea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80078ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	891b      	ldrh	r3, [r3, #8]
 80078f8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007900:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	6959      	ldr	r1, [r3, #20]
 8007908:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800790c:	b29b      	uxth	r3, r3
 800790e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007912:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007916:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800791a:	6800      	ldr	r0, [r0, #0]
 800791c:	f001 fa18 	bl	8008d50 <USB_WritePMA>
 8007920:	e3e5      	b.n	80080ee <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007926:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007930:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	4413      	add	r3, r2
 800793c:	881b      	ldrh	r3, [r3, #0]
 800793e:	b29b      	uxth	r3, r3
 8007940:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007948:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800794c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007950:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800795a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	441a      	add	r2, r3
 8007966:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800796a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800796e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007972:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800797a:	b29b      	uxth	r3, r3
 800797c:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800797e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007982:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	6a1a      	ldr	r2, [r3, #32]
 800798a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800798e:	1ad2      	subs	r2, r2, r3
 8007990:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007994:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800799c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	4413      	add	r3, r2
 80079b6:	881b      	ldrh	r3, [r3, #0]
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079be:	2b00      	cmp	r3, #0
 80079c0:	f000 81bc 	beq.w	8007d3c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80079c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80079d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	785b      	ldrb	r3, [r3, #1]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d16d      	bne.n	8007abe <USB_EPStartXfer+0xc5a>
 80079e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80079ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	461a      	mov	r2, r3
 8007a00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a02:	4413      	add	r3, r2
 8007a04:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	011a      	lsls	r2, r3, #4
 8007a14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a16:	4413      	add	r3, r2
 8007a18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a1c:	677b      	str	r3, [r7, #116]	; 0x74
 8007a1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d112      	bne.n	8007a4c <USB_EPStartXfer+0xbe8>
 8007a26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a28:	881b      	ldrh	r3, [r3, #0]
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a34:	801a      	strh	r2, [r3, #0]
 8007a36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a38:	881b      	ldrh	r3, [r3, #0]
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a44:	b29a      	uxth	r2, r3
 8007a46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a48:	801a      	strh	r2, [r3, #0]
 8007a4a:	e060      	b.n	8007b0e <USB_EPStartXfer+0xcaa>
 8007a4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a50:	2b3e      	cmp	r3, #62	; 0x3e
 8007a52:	d817      	bhi.n	8007a84 <USB_EPStartXfer+0xc20>
 8007a54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a58:	085b      	lsrs	r3, r3, #1
 8007a5a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007a5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a62:	f003 0301 	and.w	r3, r3, #1
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d004      	beq.n	8007a74 <USB_EPStartXfer+0xc10>
 8007a6a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007a6e:	3301      	adds	r3, #1
 8007a70:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007a74:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	029b      	lsls	r3, r3, #10
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a80:	801a      	strh	r2, [r3, #0]
 8007a82:	e044      	b.n	8007b0e <USB_EPStartXfer+0xcaa>
 8007a84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a88:	095b      	lsrs	r3, r3, #5
 8007a8a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007a8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a92:	f003 031f 	and.w	r3, r3, #31
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d104      	bne.n	8007aa4 <USB_EPStartXfer+0xc40>
 8007a9a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007aa4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	029b      	lsls	r3, r3, #10
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ab2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007aba:	801a      	strh	r2, [r3, #0]
 8007abc:	e027      	b.n	8007b0e <USB_EPStartXfer+0xcaa>
 8007abe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ac2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	785b      	ldrb	r3, [r3, #1]
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d11f      	bne.n	8007b0e <USB_EPStartXfer+0xcaa>
 8007ace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ad2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	461a      	mov	r2, r3
 8007ae0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ae4:	4413      	add	r3, r2
 8007ae6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007aea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	011a      	lsls	r2, r3, #4
 8007af8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007afc:	4413      	add	r3, r2
 8007afe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b02:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b0c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007b0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	895b      	ldrh	r3, [r3, #10]
 8007b1a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	6959      	ldr	r1, [r3, #20]
 8007b2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007b34:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007b38:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007b3c:	6800      	ldr	r0, [r0, #0]
 8007b3e:	f001 f907 	bl	8008d50 <USB_WritePMA>
          ep->xfer_buff += len;
 8007b42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	695a      	ldr	r2, [r3, #20]
 8007b4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b52:	441a      	add	r2, r3
 8007b54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007b60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	6a1a      	ldr	r2, [r3, #32]
 8007b6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d90f      	bls.n	8007b9c <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007b7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	6a1a      	ldr	r2, [r3, #32]
 8007b88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b8c:	1ad2      	subs	r2, r2, r3
 8007b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	621a      	str	r2, [r3, #32]
 8007b9a:	e00e      	b.n	8007bba <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007b9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ba0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	6a1b      	ldr	r3, [r3, #32]
 8007ba8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007bac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007bba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	f000 8295 	beq.w	80080ee <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	785b      	ldrb	r3, [r3, #1]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d16d      	bne.n	8007cb0 <USB_EPStartXfer+0xe4c>
 8007bd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	66bb      	str	r3, [r7, #104]	; 0x68
 8007be0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007be4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007bf4:	4413      	add	r3, r2
 8007bf6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	011a      	lsls	r2, r3, #4
 8007c06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c08:	4413      	add	r3, r2
 8007c0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c0e:	667b      	str	r3, [r7, #100]	; 0x64
 8007c10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d112      	bne.n	8007c3e <USB_EPStartXfer+0xdda>
 8007c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c1a:	881b      	ldrh	r3, [r3, #0]
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c22:	b29a      	uxth	r2, r3
 8007c24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c26:	801a      	strh	r2, [r3, #0]
 8007c28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c2a:	881b      	ldrh	r3, [r3, #0]
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c36:	b29a      	uxth	r2, r3
 8007c38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c3a:	801a      	strh	r2, [r3, #0]
 8007c3c:	e063      	b.n	8007d06 <USB_EPStartXfer+0xea2>
 8007c3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c42:	2b3e      	cmp	r3, #62	; 0x3e
 8007c44:	d817      	bhi.n	8007c76 <USB_EPStartXfer+0xe12>
 8007c46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c4a:	085b      	lsrs	r3, r3, #1
 8007c4c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007c50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c54:	f003 0301 	and.w	r3, r3, #1
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d004      	beq.n	8007c66 <USB_EPStartXfer+0xe02>
 8007c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c60:	3301      	adds	r3, #1
 8007c62:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	029b      	lsls	r3, r3, #10
 8007c6e:	b29a      	uxth	r2, r3
 8007c70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c72:	801a      	strh	r2, [r3, #0]
 8007c74:	e047      	b.n	8007d06 <USB_EPStartXfer+0xea2>
 8007c76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c7a:	095b      	lsrs	r3, r3, #5
 8007c7c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007c80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c84:	f003 031f 	and.w	r3, r3, #31
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d104      	bne.n	8007c96 <USB_EPStartXfer+0xe32>
 8007c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c90:	3b01      	subs	r3, #1
 8007c92:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	029b      	lsls	r3, r3, #10
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ca4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ca8:	b29a      	uxth	r2, r3
 8007caa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cac:	801a      	strh	r2, [r3, #0]
 8007cae:	e02a      	b.n	8007d06 <USB_EPStartXfer+0xea2>
 8007cb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	785b      	ldrb	r3, [r3, #1]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d122      	bne.n	8007d06 <USB_EPStartXfer+0xea2>
 8007cc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	673b      	str	r3, [r7, #112]	; 0x70
 8007ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cd0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	461a      	mov	r2, r3
 8007cde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ce0:	4413      	add	r3, r2
 8007ce2:	673b      	str	r3, [r7, #112]	; 0x70
 8007ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ce8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	011a      	lsls	r2, r3, #4
 8007cf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cf4:	4413      	add	r3, r2
 8007cf6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007cfa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007cfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d00:	b29a      	uxth	r2, r3
 8007d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d04:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007d06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	891b      	ldrh	r3, [r3, #8]
 8007d12:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	6959      	ldr	r1, [r3, #20]
 8007d22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007d2c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007d30:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007d34:	6800      	ldr	r0, [r0, #0]
 8007d36:	f001 f80b 	bl	8008d50 <USB_WritePMA>
 8007d3a:	e1d8      	b.n	80080ee <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	785b      	ldrb	r3, [r3, #1]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d178      	bne.n	8007e3e <USB_EPStartXfer+0xfda>
 8007d4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d5e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d70:	4413      	add	r3, r2
 8007d72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	011a      	lsls	r2, r3, #4
 8007d84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d88:	4413      	add	r3, r2
 8007d8a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d8e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d116      	bne.n	8007dc8 <USB_EPStartXfer+0xf64>
 8007d9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d9e:	881b      	ldrh	r3, [r3, #0]
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007da6:	b29a      	uxth	r2, r3
 8007da8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dac:	801a      	strh	r2, [r3, #0]
 8007dae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007db2:	881b      	ldrh	r3, [r3, #0]
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dc4:	801a      	strh	r2, [r3, #0]
 8007dc6:	e06b      	b.n	8007ea0 <USB_EPStartXfer+0x103c>
 8007dc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dcc:	2b3e      	cmp	r3, #62	; 0x3e
 8007dce:	d818      	bhi.n	8007e02 <USB_EPStartXfer+0xf9e>
 8007dd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dd4:	085b      	lsrs	r3, r3, #1
 8007dd6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007dda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dde:	f003 0301 	and.w	r3, r3, #1
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d004      	beq.n	8007df0 <USB_EPStartXfer+0xf8c>
 8007de6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007dea:	3301      	adds	r3, #1
 8007dec:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007df0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	029b      	lsls	r3, r3, #10
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dfe:	801a      	strh	r2, [r3, #0]
 8007e00:	e04e      	b.n	8007ea0 <USB_EPStartXfer+0x103c>
 8007e02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e06:	095b      	lsrs	r3, r3, #5
 8007e08:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007e0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e10:	f003 031f 	and.w	r3, r3, #31
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d104      	bne.n	8007e22 <USB_EPStartXfer+0xfbe>
 8007e18:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007e22:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	029b      	lsls	r3, r3, #10
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e3a:	801a      	strh	r2, [r3, #0]
 8007e3c:	e030      	b.n	8007ea0 <USB_EPStartXfer+0x103c>
 8007e3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	785b      	ldrb	r3, [r3, #1]
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d128      	bne.n	8007ea0 <USB_EPStartXfer+0x103c>
 8007e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007e5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007e72:	4413      	add	r3, r2
 8007e74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007e78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	011a      	lsls	r2, r3, #4
 8007e86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007e8a:	4413      	add	r3, r2
 8007e8c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007e94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e98:	b29a      	uxth	r2, r3
 8007e9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007e9e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007ea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ea4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	891b      	ldrh	r3, [r3, #8]
 8007eac:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007eb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	6959      	ldr	r1, [r3, #20]
 8007ebc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007ec6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007eca:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007ece:	6800      	ldr	r0, [r0, #0]
 8007ed0:	f000 ff3e 	bl	8008d50 <USB_WritePMA>
          ep->xfer_buff += len;
 8007ed4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ed8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	695a      	ldr	r2, [r3, #20]
 8007ee0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ee4:	441a      	add	r2, r3
 8007ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007ef2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ef6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	6a1a      	ldr	r2, [r3, #32]
 8007efe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d90f      	bls.n	8007f2e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8007f0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6a1a      	ldr	r2, [r3, #32]
 8007f1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f1e:	1ad2      	subs	r2, r2, r3
 8007f20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	621a      	str	r2, [r3, #32]
 8007f2c:	e00e      	b.n	8007f4c <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8007f2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	6a1b      	ldr	r3, [r3, #32]
 8007f3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007f4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f000 80cc 	beq.w	80080ee <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	785b      	ldrb	r3, [r3, #1]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d178      	bne.n	8008066 <USB_EPStartXfer+0x1202>
 8007f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	461a      	mov	r2, r3
 8007f94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f98:	4413      	add	r3, r2
 8007f9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	011a      	lsls	r2, r3, #4
 8007fac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007fb0:	4413      	add	r3, r2
 8007fb2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007fb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007fba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d116      	bne.n	8007ff0 <USB_EPStartXfer+0x118c>
 8007fc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007fc6:	881b      	ldrh	r3, [r3, #0]
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007fce:	b29a      	uxth	r2, r3
 8007fd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007fd4:	801a      	strh	r2, [r3, #0]
 8007fd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007fda:	881b      	ldrh	r3, [r3, #0]
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fe2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fe6:	b29a      	uxth	r2, r3
 8007fe8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007fec:	801a      	strh	r2, [r3, #0]
 8007fee:	e064      	b.n	80080ba <USB_EPStartXfer+0x1256>
 8007ff0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ff4:	2b3e      	cmp	r3, #62	; 0x3e
 8007ff6:	d818      	bhi.n	800802a <USB_EPStartXfer+0x11c6>
 8007ff8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ffc:	085b      	lsrs	r3, r3, #1
 8007ffe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008002:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008006:	f003 0301 	and.w	r3, r3, #1
 800800a:	2b00      	cmp	r3, #0
 800800c:	d004      	beq.n	8008018 <USB_EPStartXfer+0x11b4>
 800800e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008012:	3301      	adds	r3, #1
 8008014:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008018:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800801c:	b29b      	uxth	r3, r3
 800801e:	029b      	lsls	r3, r3, #10
 8008020:	b29a      	uxth	r2, r3
 8008022:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008026:	801a      	strh	r2, [r3, #0]
 8008028:	e047      	b.n	80080ba <USB_EPStartXfer+0x1256>
 800802a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800802e:	095b      	lsrs	r3, r3, #5
 8008030:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008034:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008038:	f003 031f 	and.w	r3, r3, #31
 800803c:	2b00      	cmp	r3, #0
 800803e:	d104      	bne.n	800804a <USB_EPStartXfer+0x11e6>
 8008040:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008044:	3b01      	subs	r3, #1
 8008046:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800804a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800804e:	b29b      	uxth	r3, r3
 8008050:	029b      	lsls	r3, r3, #10
 8008052:	b29b      	uxth	r3, r3
 8008054:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008058:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800805c:	b29a      	uxth	r2, r3
 800805e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008062:	801a      	strh	r2, [r3, #0]
 8008064:	e029      	b.n	80080ba <USB_EPStartXfer+0x1256>
 8008066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800806a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	785b      	ldrb	r3, [r3, #1]
 8008072:	2b01      	cmp	r3, #1
 8008074:	d121      	bne.n	80080ba <USB_EPStartXfer+0x1256>
 8008076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800807a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008084:	b29b      	uxth	r3, r3
 8008086:	461a      	mov	r2, r3
 8008088:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800808c:	4413      	add	r3, r2
 800808e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008096:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	011a      	lsls	r2, r3, #4
 80080a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80080a4:	4413      	add	r3, r2
 80080a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80080aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80080ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80080ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	895b      	ldrh	r3, [r3, #10]
 80080c6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	6959      	ldr	r1, [r3, #20]
 80080d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080da:	b29b      	uxth	r3, r3
 80080dc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80080e0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80080e4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80080e8:	6800      	ldr	r0, [r0, #0]
 80080ea:	f000 fe31 	bl	8008d50 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80080ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	4413      	add	r3, r2
 8008108:	881b      	ldrh	r3, [r3, #0]
 800810a:	b29b      	uxth	r3, r3
 800810c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008110:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008114:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800811c:	8013      	strh	r3, [r2, #0]
 800811e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008122:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008126:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800812a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800812e:	8812      	ldrh	r2, [r2, #0]
 8008130:	f082 0210 	eor.w	r2, r2, #16
 8008134:	801a      	strh	r2, [r3, #0]
 8008136:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800813a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800813e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008142:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008146:	8812      	ldrh	r2, [r2, #0]
 8008148:	f082 0220 	eor.w	r2, r2, #32
 800814c:	801a      	strh	r2, [r3, #0]
 800814e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008152:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800815c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	441a      	add	r2, r3
 8008168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800816c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008170:	881b      	ldrh	r3, [r3, #0]
 8008172:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008176:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800817a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800817e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008182:	b29b      	uxth	r3, r3
 8008184:	8013      	strh	r3, [r2, #0]
 8008186:	f000 bc9f 	b.w	8008ac8 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800818a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800818e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	7b1b      	ldrb	r3, [r3, #12]
 8008196:	2b00      	cmp	r3, #0
 8008198:	f040 80ae 	bne.w	80082f8 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800819c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	699a      	ldr	r2, [r3, #24]
 80081a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d917      	bls.n	80081e8 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80081b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	691b      	ldr	r3, [r3, #16]
 80081c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80081c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	699a      	ldr	r2, [r3, #24]
 80081d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081d8:	1ad2      	subs	r2, r2, r3
 80081da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	619a      	str	r2, [r3, #24]
 80081e6:	e00e      	b.n	8008206 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80081e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80081f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2200      	movs	r2, #0
 8008204:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800820a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008214:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008218:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008222:	b29b      	uxth	r3, r3
 8008224:	461a      	mov	r2, r3
 8008226:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800822a:	4413      	add	r3, r2
 800822c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008230:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008234:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	011a      	lsls	r2, r3, #4
 800823e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008242:	4413      	add	r3, r2
 8008244:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008248:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800824c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008250:	2b00      	cmp	r3, #0
 8008252:	d116      	bne.n	8008282 <USB_EPStartXfer+0x141e>
 8008254:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008258:	881b      	ldrh	r3, [r3, #0]
 800825a:	b29b      	uxth	r3, r3
 800825c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008260:	b29a      	uxth	r2, r3
 8008262:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008266:	801a      	strh	r2, [r3, #0]
 8008268:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800826c:	881b      	ldrh	r3, [r3, #0]
 800826e:	b29b      	uxth	r3, r3
 8008270:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008274:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008278:	b29a      	uxth	r2, r3
 800827a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800827e:	801a      	strh	r2, [r3, #0]
 8008280:	e3e8      	b.n	8008a54 <USB_EPStartXfer+0x1bf0>
 8008282:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008286:	2b3e      	cmp	r3, #62	; 0x3e
 8008288:	d818      	bhi.n	80082bc <USB_EPStartXfer+0x1458>
 800828a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800828e:	085b      	lsrs	r3, r3, #1
 8008290:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008294:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008298:	f003 0301 	and.w	r3, r3, #1
 800829c:	2b00      	cmp	r3, #0
 800829e:	d004      	beq.n	80082aa <USB_EPStartXfer+0x1446>
 80082a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80082a4:	3301      	adds	r3, #1
 80082a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80082aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	029b      	lsls	r3, r3, #10
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082b8:	801a      	strh	r2, [r3, #0]
 80082ba:	e3cb      	b.n	8008a54 <USB_EPStartXfer+0x1bf0>
 80082bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082c0:	095b      	lsrs	r3, r3, #5
 80082c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80082c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082ca:	f003 031f 	and.w	r3, r3, #31
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d104      	bne.n	80082dc <USB_EPStartXfer+0x1478>
 80082d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80082d6:	3b01      	subs	r3, #1
 80082d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80082dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	029b      	lsls	r3, r3, #10
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082f4:	801a      	strh	r2, [r3, #0]
 80082f6:	e3ad      	b.n	8008a54 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80082f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	78db      	ldrb	r3, [r3, #3]
 8008304:	2b02      	cmp	r3, #2
 8008306:	f040 8200 	bne.w	800870a <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800830a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800830e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	785b      	ldrb	r3, [r3, #1]
 8008316:	2b00      	cmp	r3, #0
 8008318:	f040 8091 	bne.w	800843e <USB_EPStartXfer+0x15da>
 800831c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008320:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800832a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800832e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008338:	b29b      	uxth	r3, r3
 800833a:	461a      	mov	r2, r3
 800833c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008340:	4413      	add	r3, r2
 8008342:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800834a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	011a      	lsls	r2, r3, #4
 8008354:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008358:	4413      	add	r3, r2
 800835a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800835e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008366:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d116      	bne.n	80083a0 <USB_EPStartXfer+0x153c>
 8008372:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008376:	881b      	ldrh	r3, [r3, #0]
 8008378:	b29b      	uxth	r3, r3
 800837a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800837e:	b29a      	uxth	r2, r3
 8008380:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008384:	801a      	strh	r2, [r3, #0]
 8008386:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800838a:	881b      	ldrh	r3, [r3, #0]
 800838c:	b29b      	uxth	r3, r3
 800838e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008396:	b29a      	uxth	r2, r3
 8008398:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800839c:	801a      	strh	r2, [r3, #0]
 800839e:	e083      	b.n	80084a8 <USB_EPStartXfer+0x1644>
 80083a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	2b3e      	cmp	r3, #62	; 0x3e
 80083ae:	d820      	bhi.n	80083f2 <USB_EPStartXfer+0x158e>
 80083b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	085b      	lsrs	r3, r3, #1
 80083be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80083c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	691b      	ldr	r3, [r3, #16]
 80083ce:	f003 0301 	and.w	r3, r3, #1
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d004      	beq.n	80083e0 <USB_EPStartXfer+0x157c>
 80083d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083da:	3301      	adds	r3, #1
 80083dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80083e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	029b      	lsls	r3, r3, #10
 80083e8:	b29a      	uxth	r2, r3
 80083ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083ee:	801a      	strh	r2, [r3, #0]
 80083f0:	e05a      	b.n	80084a8 <USB_EPStartXfer+0x1644>
 80083f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	095b      	lsrs	r3, r3, #5
 8008400:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008408:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	691b      	ldr	r3, [r3, #16]
 8008410:	f003 031f 	and.w	r3, r3, #31
 8008414:	2b00      	cmp	r3, #0
 8008416:	d104      	bne.n	8008422 <USB_EPStartXfer+0x15be>
 8008418:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800841c:	3b01      	subs	r3, #1
 800841e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008426:	b29b      	uxth	r3, r3
 8008428:	029b      	lsls	r3, r3, #10
 800842a:	b29b      	uxth	r3, r3
 800842c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008430:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008434:	b29a      	uxth	r2, r3
 8008436:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800843a:	801a      	strh	r2, [r3, #0]
 800843c:	e034      	b.n	80084a8 <USB_EPStartXfer+0x1644>
 800843e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008442:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	785b      	ldrb	r3, [r3, #1]
 800844a:	2b01      	cmp	r3, #1
 800844c:	d12c      	bne.n	80084a8 <USB_EPStartXfer+0x1644>
 800844e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008452:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800845c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008460:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800846a:	b29b      	uxth	r3, r3
 800846c:	461a      	mov	r2, r3
 800846e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008472:	4413      	add	r3, r2
 8008474:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800847c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	011a      	lsls	r2, r3, #4
 8008486:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800848a:	4413      	add	r3, r2
 800848c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008490:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008494:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008498:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	691b      	ldr	r3, [r3, #16]
 80084a0:	b29a      	uxth	r2, r3
 80084a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80084a6:	801a      	strh	r2, [r3, #0]
 80084a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80084b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	785b      	ldrb	r3, [r3, #1]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f040 8091 	bne.w	80085ea <USB_EPStartXfer+0x1786>
 80084c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80084d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	461a      	mov	r2, r3
 80084e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80084ec:	4413      	add	r3, r2
 80084ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80084f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	011a      	lsls	r2, r3, #4
 8008500:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008504:	4413      	add	r3, r2
 8008506:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800850a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800850e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008512:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d116      	bne.n	800854c <USB_EPStartXfer+0x16e8>
 800851e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008522:	881b      	ldrh	r3, [r3, #0]
 8008524:	b29b      	uxth	r3, r3
 8008526:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800852a:	b29a      	uxth	r2, r3
 800852c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008530:	801a      	strh	r2, [r3, #0]
 8008532:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008536:	881b      	ldrh	r3, [r3, #0]
 8008538:	b29b      	uxth	r3, r3
 800853a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800853e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008542:	b29a      	uxth	r2, r3
 8008544:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008548:	801a      	strh	r2, [r3, #0]
 800854a:	e07c      	b.n	8008646 <USB_EPStartXfer+0x17e2>
 800854c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008550:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	2b3e      	cmp	r3, #62	; 0x3e
 800855a:	d820      	bhi.n	800859e <USB_EPStartXfer+0x173a>
 800855c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008560:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	085b      	lsrs	r3, r3, #1
 800856a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800856e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008572:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	f003 0301 	and.w	r3, r3, #1
 800857e:	2b00      	cmp	r3, #0
 8008580:	d004      	beq.n	800858c <USB_EPStartXfer+0x1728>
 8008582:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008586:	3301      	adds	r3, #1
 8008588:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800858c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008590:	b29b      	uxth	r3, r3
 8008592:	029b      	lsls	r3, r3, #10
 8008594:	b29a      	uxth	r2, r3
 8008596:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800859a:	801a      	strh	r2, [r3, #0]
 800859c:	e053      	b.n	8008646 <USB_EPStartXfer+0x17e2>
 800859e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	691b      	ldr	r3, [r3, #16]
 80085aa:	095b      	lsrs	r3, r3, #5
 80085ac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80085b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	f003 031f 	and.w	r3, r3, #31
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d104      	bne.n	80085ce <USB_EPStartXfer+0x176a>
 80085c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80085c8:	3b01      	subs	r3, #1
 80085ca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80085ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	029b      	lsls	r3, r3, #10
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085e0:	b29a      	uxth	r2, r3
 80085e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085e6:	801a      	strh	r2, [r3, #0]
 80085e8:	e02d      	b.n	8008646 <USB_EPStartXfer+0x17e2>
 80085ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	785b      	ldrb	r3, [r3, #1]
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d125      	bne.n	8008646 <USB_EPStartXfer+0x17e2>
 80085fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008608:	b29b      	uxth	r3, r3
 800860a:	461a      	mov	r2, r3
 800860c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008610:	4413      	add	r3, r2
 8008612:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008616:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800861a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	011a      	lsls	r2, r3, #4
 8008624:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008628:	4413      	add	r3, r2
 800862a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800862e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008636:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	691b      	ldr	r3, [r3, #16]
 800863e:	b29a      	uxth	r2, r3
 8008640:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008644:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800864a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	69db      	ldr	r3, [r3, #28]
 8008652:	2b00      	cmp	r3, #0
 8008654:	f000 81fe 	beq.w	8008a54 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008658:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800865c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008666:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	4413      	add	r3, r2
 8008672:	881b      	ldrh	r3, [r3, #0]
 8008674:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008678:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800867c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008680:	2b00      	cmp	r3, #0
 8008682:	d005      	beq.n	8008690 <USB_EPStartXfer+0x182c>
 8008684:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800868c:	2b00      	cmp	r3, #0
 800868e:	d10d      	bne.n	80086ac <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008690:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008694:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008698:	2b00      	cmp	r3, #0
 800869a:	f040 81db 	bne.w	8008a54 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800869e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80086a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	f040 81d4 	bne.w	8008a54 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80086ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	4413      	add	r3, r2
 80086c6:	881b      	ldrh	r3, [r3, #0]
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086d2:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80086d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	441a      	add	r2, r3
 80086f0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80086f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008700:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008704:	b29b      	uxth	r3, r3
 8008706:	8013      	strh	r3, [r2, #0]
 8008708:	e1a4      	b.n	8008a54 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800870a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800870e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	78db      	ldrb	r3, [r3, #3]
 8008716:	2b01      	cmp	r3, #1
 8008718:	f040 819a 	bne.w	8008a50 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800871c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008720:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	699a      	ldr	r2, [r3, #24]
 8008728:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800872c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	691b      	ldr	r3, [r3, #16]
 8008734:	429a      	cmp	r2, r3
 8008736:	d917      	bls.n	8008768 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8008738:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800873c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	691b      	ldr	r3, [r3, #16]
 8008744:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8008748:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800874c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	699a      	ldr	r2, [r3, #24]
 8008754:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008758:	1ad2      	subs	r2, r2, r3
 800875a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800875e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	619a      	str	r2, [r3, #24]
 8008766:	e00e      	b.n	8008786 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8008768:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800876c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	699b      	ldr	r3, [r3, #24]
 8008774:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8008778:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800877c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2200      	movs	r2, #0
 8008784:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800878a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	785b      	ldrb	r3, [r3, #1]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d178      	bne.n	8008888 <USB_EPStartXfer+0x1a24>
 8008796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800879a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80087a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	461a      	mov	r2, r3
 80087b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087ba:	4413      	add	r3, r2
 80087bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80087c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	011a      	lsls	r2, r3, #4
 80087ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087d2:	4413      	add	r3, r2
 80087d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80087d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80087dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d116      	bne.n	8008812 <USB_EPStartXfer+0x19ae>
 80087e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80087e8:	881b      	ldrh	r3, [r3, #0]
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80087f6:	801a      	strh	r2, [r3, #0]
 80087f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80087fc:	881b      	ldrh	r3, [r3, #0]
 80087fe:	b29b      	uxth	r3, r3
 8008800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008808:	b29a      	uxth	r2, r3
 800880a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800880e:	801a      	strh	r2, [r3, #0]
 8008810:	e06b      	b.n	80088ea <USB_EPStartXfer+0x1a86>
 8008812:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008816:	2b3e      	cmp	r3, #62	; 0x3e
 8008818:	d818      	bhi.n	800884c <USB_EPStartXfer+0x19e8>
 800881a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800881e:	085b      	lsrs	r3, r3, #1
 8008820:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008824:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008828:	f003 0301 	and.w	r3, r3, #1
 800882c:	2b00      	cmp	r3, #0
 800882e:	d004      	beq.n	800883a <USB_EPStartXfer+0x19d6>
 8008830:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008834:	3301      	adds	r3, #1
 8008836:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800883a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800883e:	b29b      	uxth	r3, r3
 8008840:	029b      	lsls	r3, r3, #10
 8008842:	b29a      	uxth	r2, r3
 8008844:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008848:	801a      	strh	r2, [r3, #0]
 800884a:	e04e      	b.n	80088ea <USB_EPStartXfer+0x1a86>
 800884c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008850:	095b      	lsrs	r3, r3, #5
 8008852:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008856:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800885a:	f003 031f 	and.w	r3, r3, #31
 800885e:	2b00      	cmp	r3, #0
 8008860:	d104      	bne.n	800886c <USB_EPStartXfer+0x1a08>
 8008862:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008866:	3b01      	subs	r3, #1
 8008868:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800886c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008870:	b29b      	uxth	r3, r3
 8008872:	029b      	lsls	r3, r3, #10
 8008874:	b29b      	uxth	r3, r3
 8008876:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800887a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800887e:	b29a      	uxth	r2, r3
 8008880:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008884:	801a      	strh	r2, [r3, #0]
 8008886:	e030      	b.n	80088ea <USB_EPStartXfer+0x1a86>
 8008888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800888c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	785b      	ldrb	r3, [r3, #1]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d128      	bne.n	80088ea <USB_EPStartXfer+0x1a86>
 8008898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800889c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80088a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	461a      	mov	r2, r3
 80088b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088bc:	4413      	add	r3, r2
 80088be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80088c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	011a      	lsls	r2, r3, #4
 80088d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088d4:	4413      	add	r3, r2
 80088d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80088da:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80088de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088e2:	b29a      	uxth	r2, r3
 80088e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80088e8:	801a      	strh	r2, [r3, #0]
 80088ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80088f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	785b      	ldrb	r3, [r3, #1]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d178      	bne.n	80089fa <USB_EPStartXfer+0x1b96>
 8008908:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800890c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008916:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800891a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008924:	b29b      	uxth	r3, r3
 8008926:	461a      	mov	r2, r3
 8008928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800892c:	4413      	add	r3, r2
 800892e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008932:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008936:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	011a      	lsls	r2, r3, #4
 8008940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008944:	4413      	add	r3, r2
 8008946:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800894a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800894e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008952:	2b00      	cmp	r3, #0
 8008954:	d116      	bne.n	8008984 <USB_EPStartXfer+0x1b20>
 8008956:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800895a:	881b      	ldrh	r3, [r3, #0]
 800895c:	b29b      	uxth	r3, r3
 800895e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008962:	b29a      	uxth	r2, r3
 8008964:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008968:	801a      	strh	r2, [r3, #0]
 800896a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800896e:	881b      	ldrh	r3, [r3, #0]
 8008970:	b29b      	uxth	r3, r3
 8008972:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008976:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800897a:	b29a      	uxth	r2, r3
 800897c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008980:	801a      	strh	r2, [r3, #0]
 8008982:	e067      	b.n	8008a54 <USB_EPStartXfer+0x1bf0>
 8008984:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008988:	2b3e      	cmp	r3, #62	; 0x3e
 800898a:	d818      	bhi.n	80089be <USB_EPStartXfer+0x1b5a>
 800898c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008990:	085b      	lsrs	r3, r3, #1
 8008992:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008996:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800899a:	f003 0301 	and.w	r3, r3, #1
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d004      	beq.n	80089ac <USB_EPStartXfer+0x1b48>
 80089a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089a6:	3301      	adds	r3, #1
 80089a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80089ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	029b      	lsls	r3, r3, #10
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089ba:	801a      	strh	r2, [r3, #0]
 80089bc:	e04a      	b.n	8008a54 <USB_EPStartXfer+0x1bf0>
 80089be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089c2:	095b      	lsrs	r3, r3, #5
 80089c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80089c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089cc:	f003 031f 	and.w	r3, r3, #31
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d104      	bne.n	80089de <USB_EPStartXfer+0x1b7a>
 80089d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089d8:	3b01      	subs	r3, #1
 80089da:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80089de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	029b      	lsls	r3, r3, #10
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089f6:	801a      	strh	r2, [r3, #0]
 80089f8:	e02c      	b.n	8008a54 <USB_EPStartXfer+0x1bf0>
 80089fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	785b      	ldrb	r3, [r3, #1]
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d124      	bne.n	8008a54 <USB_EPStartXfer+0x1bf0>
 8008a0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a20:	4413      	add	r3, r2
 8008a22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	011a      	lsls	r2, r3, #4
 8008a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a38:	4413      	add	r3, r2
 8008a3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a3e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008a42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a4c:	801a      	strh	r2, [r3, #0]
 8008a4e:	e001      	b.n	8008a54 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	e03a      	b.n	8008aca <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008a54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	4413      	add	r3, r2
 8008a6e:	881b      	ldrh	r3, [r3, #0]
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a7a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008a7e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008a82:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008a86:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008a8a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008a8e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008a92:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008a96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	441a      	add	r2, r3
 8008ab0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008ab4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ab8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008abc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008ac8:	2300      	movs	r3, #0
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	785b      	ldrb	r3, [r3, #1]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d020      	beq.n	8008b28 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	4413      	add	r3, r2
 8008af0:	881b      	ldrh	r3, [r3, #0]
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008af8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008afc:	81bb      	strh	r3, [r7, #12]
 8008afe:	89bb      	ldrh	r3, [r7, #12]
 8008b00:	f083 0310 	eor.w	r3, r3, #16
 8008b04:	81bb      	strh	r3, [r7, #12]
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	441a      	add	r2, r3
 8008b10:	89bb      	ldrh	r3, [r7, #12]
 8008b12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	8013      	strh	r3, [r2, #0]
 8008b26:	e01f      	b.n	8008b68 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	4413      	add	r3, r2
 8008b32:	881b      	ldrh	r3, [r3, #0]
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b3e:	81fb      	strh	r3, [r7, #14]
 8008b40:	89fb      	ldrh	r3, [r7, #14]
 8008b42:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008b46:	81fb      	strh	r3, [r7, #14]
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	441a      	add	r2, r3
 8008b52:	89fb      	ldrh	r3, [r7, #14]
 8008b54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008b68:	2300      	movs	r3, #0
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3714      	adds	r7, #20
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bc80      	pop	{r7}
 8008b72:	4770      	bx	lr

08008b74 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b087      	sub	sp, #28
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	7b1b      	ldrb	r3, [r3, #12]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	f040 809d 	bne.w	8008cc2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	785b      	ldrb	r3, [r3, #1]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d04c      	beq.n	8008c2a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	4413      	add	r3, r2
 8008b9a:	881b      	ldrh	r3, [r3, #0]
 8008b9c:	823b      	strh	r3, [r7, #16]
 8008b9e:	8a3b      	ldrh	r3, [r7, #16]
 8008ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d01b      	beq.n	8008be0 <USB_EPClearStall+0x6c>
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	4413      	add	r3, r2
 8008bb2:	881b      	ldrh	r3, [r3, #0]
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bbe:	81fb      	strh	r3, [r7, #14]
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	441a      	add	r2, r3
 8008bca:	89fb      	ldrh	r3, [r7, #14]
 8008bcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	78db      	ldrb	r3, [r3, #3]
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d06c      	beq.n	8008cc2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	4413      	add	r3, r2
 8008bf2:	881b      	ldrh	r3, [r3, #0]
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bfe:	81bb      	strh	r3, [r7, #12]
 8008c00:	89bb      	ldrh	r3, [r7, #12]
 8008c02:	f083 0320 	eor.w	r3, r3, #32
 8008c06:	81bb      	strh	r3, [r7, #12]
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	441a      	add	r2, r3
 8008c12:	89bb      	ldrh	r3, [r7, #12]
 8008c14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	8013      	strh	r3, [r2, #0]
 8008c28:	e04b      	b.n	8008cc2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	4413      	add	r3, r2
 8008c34:	881b      	ldrh	r3, [r3, #0]
 8008c36:	82fb      	strh	r3, [r7, #22]
 8008c38:	8afb      	ldrh	r3, [r7, #22]
 8008c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d01b      	beq.n	8008c7a <USB_EPClearStall+0x106>
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	4413      	add	r3, r2
 8008c4c:	881b      	ldrh	r3, [r3, #0]
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c58:	82bb      	strh	r3, [r7, #20]
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	441a      	add	r2, r3
 8008c64:	8abb      	ldrh	r3, [r7, #20]
 8008c66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008c72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	4413      	add	r3, r2
 8008c84:	881b      	ldrh	r3, [r3, #0]
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c90:	827b      	strh	r3, [r7, #18]
 8008c92:	8a7b      	ldrh	r3, [r7, #18]
 8008c94:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008c98:	827b      	strh	r3, [r7, #18]
 8008c9a:	8a7b      	ldrh	r3, [r7, #18]
 8008c9c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008ca0:	827b      	strh	r3, [r7, #18]
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	441a      	add	r2, r3
 8008cac:	8a7b      	ldrh	r3, [r7, #18]
 8008cae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	371c      	adds	r7, #28
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bc80      	pop	{r7}
 8008ccc:	4770      	bx	lr

08008cce <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008cce:	b480      	push	{r7}
 8008cd0:	b083      	sub	sp, #12
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
 8008cd6:	460b      	mov	r3, r1
 8008cd8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008cda:	78fb      	ldrb	r3, [r7, #3]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d103      	bne.n	8008ce8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2280      	movs	r2, #128	; 0x80
 8008ce4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008ce8:	2300      	movs	r3, #0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	370c      	adds	r7, #12
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bc80      	pop	{r7}
 8008cf2:	4770      	bx	lr

08008cf4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	370c      	adds	r7, #12
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bc80      	pop	{r7}
 8008d06:	4770      	bx	lr

08008d08 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	370c      	adds	r7, #12
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bc80      	pop	{r7}
 8008d1a:	4770      	bx	lr

08008d1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b085      	sub	sp, #20
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3714      	adds	r7, #20
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bc80      	pop	{r7}
 8008d38:	4770      	bx	lr

08008d3a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008d3a:	b480      	push	{r7}
 8008d3c:	b083      	sub	sp, #12
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
 8008d42:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	370c      	adds	r7, #12
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bc80      	pop	{r7}
 8008d4e:	4770      	bx	lr

08008d50 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b08d      	sub	sp, #52	; 0x34
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	4611      	mov	r1, r2
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	460b      	mov	r3, r1
 8008d60:	80fb      	strh	r3, [r7, #6]
 8008d62:	4613      	mov	r3, r2
 8008d64:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008d66:	88bb      	ldrh	r3, [r7, #4]
 8008d68:	3301      	adds	r3, #1
 8008d6a:	085b      	lsrs	r3, r3, #1
 8008d6c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008d76:	88fb      	ldrh	r3, [r7, #6]
 8008d78:	005a      	lsls	r2, r3, #1
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d82:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008d84:	6a3b      	ldr	r3, [r7, #32]
 8008d86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d88:	e01e      	b.n	8008dc8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d92:	3301      	adds	r3, #1
 8008d94:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	021b      	lsls	r3, r3, #8
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	461a      	mov	r2, r3
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	b29a      	uxth	r2, r3
 8008dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dae:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db2:	3302      	adds	r3, #2
 8008db4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db8:	3302      	adds	r3, #2
 8008dba:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc4:	3b01      	subs	r3, #1
 8008dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d1dd      	bne.n	8008d8a <USB_WritePMA+0x3a>
  }
}
 8008dce:	bf00      	nop
 8008dd0:	bf00      	nop
 8008dd2:	3734      	adds	r7, #52	; 0x34
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bc80      	pop	{r7}
 8008dd8:	4770      	bx	lr

08008dda <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008dda:	b480      	push	{r7}
 8008ddc:	b08b      	sub	sp, #44	; 0x2c
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	60f8      	str	r0, [r7, #12]
 8008de2:	60b9      	str	r1, [r7, #8]
 8008de4:	4611      	mov	r1, r2
 8008de6:	461a      	mov	r2, r3
 8008de8:	460b      	mov	r3, r1
 8008dea:	80fb      	strh	r3, [r7, #6]
 8008dec:	4613      	mov	r3, r2
 8008dee:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008df0:	88bb      	ldrh	r3, [r7, #4]
 8008df2:	085b      	lsrs	r3, r3, #1
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008e00:	88fb      	ldrh	r3, [r7, #6]
 8008e02:	005a      	lsls	r2, r3, #1
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	4413      	add	r3, r2
 8008e08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e0c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	627b      	str	r3, [r7, #36]	; 0x24
 8008e12:	e01b      	b.n	8008e4c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008e14:	6a3b      	ldr	r3, [r7, #32]
 8008e16:	881b      	ldrh	r3, [r3, #0]
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008e1c:	6a3b      	ldr	r3, [r7, #32]
 8008e1e:	3302      	adds	r3, #2
 8008e20:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	b2da      	uxtb	r2, r3
 8008e26:	69fb      	ldr	r3, [r7, #28]
 8008e28:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	0a1b      	lsrs	r3, r3, #8
 8008e34:	b2da      	uxtb	r2, r3
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008e3a:	69fb      	ldr	r3, [r7, #28]
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008e40:	6a3b      	ldr	r3, [r7, #32]
 8008e42:	3302      	adds	r3, #2
 8008e44:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e48:	3b01      	subs	r3, #1
 8008e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8008e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1e0      	bne.n	8008e14 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008e52:	88bb      	ldrh	r3, [r7, #4]
 8008e54:	f003 0301 	and.w	r3, r3, #1
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d007      	beq.n	8008e6e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008e5e:	6a3b      	ldr	r3, [r7, #32]
 8008e60:	881b      	ldrh	r3, [r3, #0]
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	b2da      	uxtb	r2, r3
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	701a      	strb	r2, [r3, #0]
  }
}
 8008e6e:	bf00      	nop
 8008e70:	372c      	adds	r7, #44	; 0x2c
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bc80      	pop	{r7}
 8008e76:	4770      	bx	lr

08008e78 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	460b      	mov	r3, r1
 8008e82:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008e84:	2300      	movs	r3, #0
 8008e86:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	7c1b      	ldrb	r3, [r3, #16]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d115      	bne.n	8008ebc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008e90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e94:	2202      	movs	r2, #2
 8008e96:	2181      	movs	r1, #129	; 0x81
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f001 fea6 	bl	800abea <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008ea4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ea8:	2202      	movs	r2, #2
 8008eaa:	2101      	movs	r1, #1
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f001 fe9c 	bl	800abea <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008eba:	e012      	b.n	8008ee2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008ebc:	2340      	movs	r3, #64	; 0x40
 8008ebe:	2202      	movs	r2, #2
 8008ec0:	2181      	movs	r1, #129	; 0x81
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f001 fe91 	bl	800abea <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008ece:	2340      	movs	r3, #64	; 0x40
 8008ed0:	2202      	movs	r2, #2
 8008ed2:	2101      	movs	r1, #1
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f001 fe88 	bl	800abea <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2201      	movs	r2, #1
 8008ede:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008ee2:	2308      	movs	r3, #8
 8008ee4:	2203      	movs	r2, #3
 8008ee6:	2182      	movs	r1, #130	; 0x82
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f001 fe7e 	bl	800abea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008ef4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008ef8:	f001 ff9e 	bl	800ae38 <USBD_static_malloc>
 8008efc:	4602      	mov	r2, r0
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d102      	bne.n	8008f14 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	73fb      	strb	r3, [r7, #15]
 8008f12:	e026      	b.n	8008f62 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f1a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	7c1b      	ldrb	r3, [r3, #16]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d109      	bne.n	8008f52 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f48:	2101      	movs	r1, #1
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f001 ff3e 	bl	800adcc <USBD_LL_PrepareReceive>
 8008f50:	e007      	b.n	8008f62 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f58:	2340      	movs	r3, #64	; 0x40
 8008f5a:	2101      	movs	r1, #1
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f001 ff35 	bl	800adcc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3710      	adds	r7, #16
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	460b      	mov	r3, r1
 8008f76:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008f7c:	2181      	movs	r1, #129	; 0x81
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f001 fe59 	bl	800ac36 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008f8a:	2101      	movs	r1, #1
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f001 fe52 	bl	800ac36 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008f9a:	2182      	movs	r1, #130	; 0x82
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f001 fe4a 	bl	800ac36 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d00e      	beq.n	8008fd0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f001 ff44 	bl	800ae50 <USBD_static_free>
    pdev->pClassData = NULL;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b086      	sub	sp, #24
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
 8008fe2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fea:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008fec:	2300      	movs	r3, #0
 8008fee:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009000:	2b00      	cmp	r3, #0
 8009002:	d039      	beq.n	8009078 <USBD_CDC_Setup+0x9e>
 8009004:	2b20      	cmp	r3, #32
 8009006:	d17f      	bne.n	8009108 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	88db      	ldrh	r3, [r3, #6]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d029      	beq.n	8009064 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	b25b      	sxtb	r3, r3
 8009016:	2b00      	cmp	r3, #0
 8009018:	da11      	bge.n	800903e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	683a      	ldr	r2, [r7, #0]
 8009024:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009026:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009028:	683a      	ldr	r2, [r7, #0]
 800902a:	88d2      	ldrh	r2, [r2, #6]
 800902c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800902e:	6939      	ldr	r1, [r7, #16]
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	88db      	ldrh	r3, [r3, #6]
 8009034:	461a      	mov	r2, r3
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f001 fa09 	bl	800a44e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800903c:	e06b      	b.n	8009116 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	785a      	ldrb	r2, [r3, #1]
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	88db      	ldrh	r3, [r3, #6]
 800904c:	b2da      	uxtb	r2, r3
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009054:	6939      	ldr	r1, [r7, #16]
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	88db      	ldrh	r3, [r3, #6]
 800905a:	461a      	mov	r2, r3
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f001 fa24 	bl	800a4aa <USBD_CtlPrepareRx>
      break;
 8009062:	e058      	b.n	8009116 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	683a      	ldr	r2, [r7, #0]
 800906e:	7850      	ldrb	r0, [r2, #1]
 8009070:	2200      	movs	r2, #0
 8009072:	6839      	ldr	r1, [r7, #0]
 8009074:	4798      	blx	r3
      break;
 8009076:	e04e      	b.n	8009116 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	785b      	ldrb	r3, [r3, #1]
 800907c:	2b0b      	cmp	r3, #11
 800907e:	d02e      	beq.n	80090de <USBD_CDC_Setup+0x104>
 8009080:	2b0b      	cmp	r3, #11
 8009082:	dc38      	bgt.n	80090f6 <USBD_CDC_Setup+0x11c>
 8009084:	2b00      	cmp	r3, #0
 8009086:	d002      	beq.n	800908e <USBD_CDC_Setup+0xb4>
 8009088:	2b0a      	cmp	r3, #10
 800908a:	d014      	beq.n	80090b6 <USBD_CDC_Setup+0xdc>
 800908c:	e033      	b.n	80090f6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009094:	2b03      	cmp	r3, #3
 8009096:	d107      	bne.n	80090a8 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009098:	f107 030c 	add.w	r3, r7, #12
 800909c:	2202      	movs	r2, #2
 800909e:	4619      	mov	r1, r3
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f001 f9d4 	bl	800a44e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80090a6:	e02e      	b.n	8009106 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80090a8:	6839      	ldr	r1, [r7, #0]
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f001 f965 	bl	800a37a <USBD_CtlError>
            ret = USBD_FAIL;
 80090b0:	2302      	movs	r3, #2
 80090b2:	75fb      	strb	r3, [r7, #23]
          break;
 80090b4:	e027      	b.n	8009106 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090bc:	2b03      	cmp	r3, #3
 80090be:	d107      	bne.n	80090d0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80090c0:	f107 030f 	add.w	r3, r7, #15
 80090c4:	2201      	movs	r2, #1
 80090c6:	4619      	mov	r1, r3
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f001 f9c0 	bl	800a44e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80090ce:	e01a      	b.n	8009106 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80090d0:	6839      	ldr	r1, [r7, #0]
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f001 f951 	bl	800a37a <USBD_CtlError>
            ret = USBD_FAIL;
 80090d8:	2302      	movs	r3, #2
 80090da:	75fb      	strb	r3, [r7, #23]
          break;
 80090dc:	e013      	b.n	8009106 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090e4:	2b03      	cmp	r3, #3
 80090e6:	d00d      	beq.n	8009104 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f001 f945 	bl	800a37a <USBD_CtlError>
            ret = USBD_FAIL;
 80090f0:	2302      	movs	r3, #2
 80090f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80090f4:	e006      	b.n	8009104 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80090f6:	6839      	ldr	r1, [r7, #0]
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f001 f93e 	bl	800a37a <USBD_CtlError>
          ret = USBD_FAIL;
 80090fe:	2302      	movs	r3, #2
 8009100:	75fb      	strb	r3, [r7, #23]
          break;
 8009102:	e000      	b.n	8009106 <USBD_CDC_Setup+0x12c>
          break;
 8009104:	bf00      	nop
      }
      break;
 8009106:	e006      	b.n	8009116 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009108:	6839      	ldr	r1, [r7, #0]
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f001 f935 	bl	800a37a <USBD_CtlError>
      ret = USBD_FAIL;
 8009110:	2302      	movs	r3, #2
 8009112:	75fb      	strb	r3, [r7, #23]
      break;
 8009114:	bf00      	nop
  }

  return ret;
 8009116:	7dfb      	ldrb	r3, [r7, #23]
}
 8009118:	4618      	mov	r0, r3
 800911a:	3718      	adds	r7, #24
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	460b      	mov	r3, r1
 800912a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009132:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800913a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009142:	2b00      	cmp	r3, #0
 8009144:	d03a      	beq.n	80091bc <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009146:	78fa      	ldrb	r2, [r7, #3]
 8009148:	6879      	ldr	r1, [r7, #4]
 800914a:	4613      	mov	r3, r2
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	4413      	add	r3, r2
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	440b      	add	r3, r1
 8009154:	331c      	adds	r3, #28
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d029      	beq.n	80091b0 <USBD_CDC_DataIn+0x90>
 800915c:	78fa      	ldrb	r2, [r7, #3]
 800915e:	6879      	ldr	r1, [r7, #4]
 8009160:	4613      	mov	r3, r2
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	4413      	add	r3, r2
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	440b      	add	r3, r1
 800916a:	331c      	adds	r3, #28
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	78f9      	ldrb	r1, [r7, #3]
 8009170:	68b8      	ldr	r0, [r7, #8]
 8009172:	460b      	mov	r3, r1
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	440b      	add	r3, r1
 8009178:	00db      	lsls	r3, r3, #3
 800917a:	4403      	add	r3, r0
 800917c:	3338      	adds	r3, #56	; 0x38
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	fbb2 f1f3 	udiv	r1, r2, r3
 8009184:	fb01 f303 	mul.w	r3, r1, r3
 8009188:	1ad3      	subs	r3, r2, r3
 800918a:	2b00      	cmp	r3, #0
 800918c:	d110      	bne.n	80091b0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800918e:	78fa      	ldrb	r2, [r7, #3]
 8009190:	6879      	ldr	r1, [r7, #4]
 8009192:	4613      	mov	r3, r2
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	4413      	add	r3, r2
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	440b      	add	r3, r1
 800919c:	331c      	adds	r3, #28
 800919e:	2200      	movs	r2, #0
 80091a0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80091a2:	78f9      	ldrb	r1, [r7, #3]
 80091a4:	2300      	movs	r3, #0
 80091a6:	2200      	movs	r2, #0
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f001 fdec 	bl	800ad86 <USBD_LL_Transmit>
 80091ae:	e003      	b.n	80091b8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2200      	movs	r2, #0
 80091b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80091b8:	2300      	movs	r3, #0
 80091ba:	e000      	b.n	80091be <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80091bc:	2302      	movs	r3, #2
  }
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3710      	adds	r7, #16
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}

080091c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b084      	sub	sp, #16
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
 80091ce:	460b      	mov	r3, r1
 80091d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091d8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80091da:	78fb      	ldrb	r3, [r7, #3]
 80091dc:	4619      	mov	r1, r3
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f001 fe17 	bl	800ae12 <USBD_LL_GetRxDataSize>
 80091e4:	4602      	mov	r2, r0
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00d      	beq.n	8009212 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	68fa      	ldr	r2, [r7, #12]
 8009200:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009204:	68fa      	ldr	r2, [r7, #12]
 8009206:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800920a:	4611      	mov	r1, r2
 800920c:	4798      	blx	r3

    return USBD_OK;
 800920e:	2300      	movs	r3, #0
 8009210:	e000      	b.n	8009214 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009212:	2302      	movs	r3, #2
  }
}
 8009214:	4618      	mov	r0, r3
 8009216:	3710      	adds	r7, #16
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800922a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009232:	2b00      	cmp	r3, #0
 8009234:	d015      	beq.n	8009262 <USBD_CDC_EP0_RxReady+0x46>
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800923c:	2bff      	cmp	r3, #255	; 0xff
 800923e:	d010      	beq.n	8009262 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	68fa      	ldr	r2, [r7, #12]
 800924a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800924e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009250:	68fa      	ldr	r2, [r7, #12]
 8009252:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009256:	b292      	uxth	r2, r2
 8009258:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	22ff      	movs	r2, #255	; 0xff
 800925e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009262:	2300      	movs	r3, #0
}
 8009264:	4618      	mov	r0, r3
 8009266:	3710      	adds	r7, #16
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2243      	movs	r2, #67	; 0x43
 8009278:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800927a:	4b03      	ldr	r3, [pc, #12]	; (8009288 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800927c:	4618      	mov	r0, r3
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	bc80      	pop	{r7}
 8009284:	4770      	bx	lr
 8009286:	bf00      	nop
 8009288:	20000098 	.word	0x20000098

0800928c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2243      	movs	r2, #67	; 0x43
 8009298:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800929a:	4b03      	ldr	r3, [pc, #12]	; (80092a8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800929c:	4618      	mov	r0, r3
 800929e:	370c      	adds	r7, #12
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bc80      	pop	{r7}
 80092a4:	4770      	bx	lr
 80092a6:	bf00      	nop
 80092a8:	20000054 	.word	0x20000054

080092ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2243      	movs	r2, #67	; 0x43
 80092b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80092ba:	4b03      	ldr	r3, [pc, #12]	; (80092c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80092bc:	4618      	mov	r0, r3
 80092be:	370c      	adds	r7, #12
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bc80      	pop	{r7}
 80092c4:	4770      	bx	lr
 80092c6:	bf00      	nop
 80092c8:	200000dc 	.word	0x200000dc

080092cc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	220a      	movs	r2, #10
 80092d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80092da:	4b03      	ldr	r3, [pc, #12]	; (80092e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80092dc:	4618      	mov	r0, r3
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bc80      	pop	{r7}
 80092e4:	4770      	bx	lr
 80092e6:	bf00      	nop
 80092e8:	20000010 	.word	0x20000010

080092ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b085      	sub	sp, #20
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80092f6:	2302      	movs	r3, #2
 80092f8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d005      	beq.n	800930c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	683a      	ldr	r2, [r7, #0]
 8009304:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009308:	2300      	movs	r3, #0
 800930a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800930c:	7bfb      	ldrb	r3, [r7, #15]
}
 800930e:	4618      	mov	r0, r3
 8009310:	3714      	adds	r7, #20
 8009312:	46bd      	mov	sp, r7
 8009314:	bc80      	pop	{r7}
 8009316:	4770      	bx	lr

08009318 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009318:	b480      	push	{r7}
 800931a:	b087      	sub	sp, #28
 800931c:	af00      	add	r7, sp, #0
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	60b9      	str	r1, [r7, #8]
 8009322:	4613      	mov	r3, r2
 8009324:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800932c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	68ba      	ldr	r2, [r7, #8]
 8009332:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009336:	88fa      	ldrh	r2, [r7, #6]
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	371c      	adds	r7, #28
 8009344:	46bd      	mov	sp, r7
 8009346:	bc80      	pop	{r7}
 8009348:	4770      	bx	lr

0800934a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800934a:	b480      	push	{r7}
 800934c:	b085      	sub	sp, #20
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
 8009352:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800935a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009364:	2300      	movs	r3, #0
}
 8009366:	4618      	mov	r0, r3
 8009368:	3714      	adds	r7, #20
 800936a:	46bd      	mov	sp, r7
 800936c:	bc80      	pop	{r7}
 800936e:	4770      	bx	lr

08009370 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800937e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009386:	2b00      	cmp	r3, #0
 8009388:	d01c      	beq.n	80093c4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009390:	2b00      	cmp	r3, #0
 8009392:	d115      	bne.n	80093c0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2201      	movs	r2, #1
 8009398:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	2181      	movs	r1, #129	; 0x81
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f001 fce5 	bl	800ad86 <USBD_LL_Transmit>

      return USBD_OK;
 80093bc:	2300      	movs	r3, #0
 80093be:	e002      	b.n	80093c6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80093c0:	2301      	movs	r3, #1
 80093c2:	e000      	b.n	80093c6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80093c4:	2302      	movs	r3, #2
  }
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3710      	adds	r7, #16
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b084      	sub	sp, #16
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093dc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d017      	beq.n	8009418 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	7c1b      	ldrb	r3, [r3, #16]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d109      	bne.n	8009404 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093fa:	2101      	movs	r1, #1
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f001 fce5 	bl	800adcc <USBD_LL_PrepareReceive>
 8009402:	e007      	b.n	8009414 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800940a:	2340      	movs	r3, #64	; 0x40
 800940c:	2101      	movs	r1, #1
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f001 fcdc 	bl	800adcc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009414:	2300      	movs	r3, #0
 8009416:	e000      	b.n	800941a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009418:	2302      	movs	r3, #2
  }
}
 800941a:	4618      	mov	r0, r3
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b084      	sub	sp, #16
 8009426:	af00      	add	r7, sp, #0
 8009428:	60f8      	str	r0, [r7, #12]
 800942a:	60b9      	str	r1, [r7, #8]
 800942c:	4613      	mov	r3, r2
 800942e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d101      	bne.n	800943a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009436:	2302      	movs	r3, #2
 8009438:	e01a      	b.n	8009470 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009440:	2b00      	cmp	r3, #0
 8009442:	d003      	beq.n	800944c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2200      	movs	r2, #0
 8009448:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d003      	beq.n	800945a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	68ba      	ldr	r2, [r7, #8]
 8009456:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2201      	movs	r2, #1
 800945e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	79fa      	ldrb	r2, [r7, #7]
 8009466:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009468:	68f8      	ldr	r0, [r7, #12]
 800946a:	f001 fb49 	bl	800ab00 <USBD_LL_Init>

  return USBD_OK;
 800946e:	2300      	movs	r3, #0
}
 8009470:	4618      	mov	r0, r3
 8009472:	3710      	adds	r7, #16
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009478:	b480      	push	{r7}
 800947a:	b085      	sub	sp, #20
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009482:	2300      	movs	r3, #0
 8009484:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d006      	beq.n	800949a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	683a      	ldr	r2, [r7, #0]
 8009490:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009494:	2300      	movs	r3, #0
 8009496:	73fb      	strb	r3, [r7, #15]
 8009498:	e001      	b.n	800949e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800949a:	2302      	movs	r3, #2
 800949c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800949e:	7bfb      	ldrb	r3, [r7, #15]
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3714      	adds	r7, #20
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bc80      	pop	{r7}
 80094a8:	4770      	bx	lr

080094aa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b082      	sub	sp, #8
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f001 fb7e 	bl	800abb4 <USBD_LL_Start>

  return USBD_OK;
 80094b8:	2300      	movs	r3, #0
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3708      	adds	r7, #8
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80094c2:	b480      	push	{r7}
 80094c4:	b083      	sub	sp, #12
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80094ca:	2300      	movs	r3, #0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	370c      	adds	r7, #12
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bc80      	pop	{r7}
 80094d4:	4770      	bx	lr

080094d6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b084      	sub	sp, #16
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
 80094de:	460b      	mov	r3, r1
 80094e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80094e2:	2302      	movs	r3, #2
 80094e4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d00c      	beq.n	800950a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	78fa      	ldrb	r2, [r7, #3]
 80094fa:	4611      	mov	r1, r2
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	4798      	blx	r3
 8009500:	4603      	mov	r3, r0
 8009502:	2b00      	cmp	r3, #0
 8009504:	d101      	bne.n	800950a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009506:	2300      	movs	r3, #0
 8009508:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800950a:	7bfb      	ldrb	r3, [r7, #15]
}
 800950c:	4618      	mov	r0, r3
 800950e:	3710      	adds	r7, #16
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	460b      	mov	r3, r1
 800951e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	78fa      	ldrb	r2, [r7, #3]
 800952a:	4611      	mov	r1, r2
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	4798      	blx	r3

  return USBD_OK;
 8009530:	2300      	movs	r3, #0
}
 8009532:	4618      	mov	r0, r3
 8009534:	3708      	adds	r7, #8
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b082      	sub	sp, #8
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
 8009542:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800954a:	6839      	ldr	r1, [r7, #0]
 800954c:	4618      	mov	r0, r3
 800954e:	f000 fed8 	bl	800a302 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2201      	movs	r2, #1
 8009556:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009560:	461a      	mov	r2, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800956e:	f003 031f 	and.w	r3, r3, #31
 8009572:	2b02      	cmp	r3, #2
 8009574:	d016      	beq.n	80095a4 <USBD_LL_SetupStage+0x6a>
 8009576:	2b02      	cmp	r3, #2
 8009578:	d81c      	bhi.n	80095b4 <USBD_LL_SetupStage+0x7a>
 800957a:	2b00      	cmp	r3, #0
 800957c:	d002      	beq.n	8009584 <USBD_LL_SetupStage+0x4a>
 800957e:	2b01      	cmp	r3, #1
 8009580:	d008      	beq.n	8009594 <USBD_LL_SetupStage+0x5a>
 8009582:	e017      	b.n	80095b4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800958a:	4619      	mov	r1, r3
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 f9cb 	bl	8009928 <USBD_StdDevReq>
      break;
 8009592:	e01a      	b.n	80095ca <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800959a:	4619      	mov	r1, r3
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 fa2d 	bl	80099fc <USBD_StdItfReq>
      break;
 80095a2:	e012      	b.n	80095ca <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80095aa:	4619      	mov	r1, r3
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 fa6d 	bl	8009a8c <USBD_StdEPReq>
      break;
 80095b2:	e00a      	b.n	80095ca <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80095ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	4619      	mov	r1, r3
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f001 fb56 	bl	800ac74 <USBD_LL_StallEP>
      break;
 80095c8:	bf00      	nop
  }

  return USBD_OK;
 80095ca:	2300      	movs	r3, #0
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3708      	adds	r7, #8
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b086      	sub	sp, #24
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	460b      	mov	r3, r1
 80095de:	607a      	str	r2, [r7, #4]
 80095e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80095e2:	7afb      	ldrb	r3, [r7, #11]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d14b      	bne.n	8009680 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80095ee:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80095f6:	2b03      	cmp	r3, #3
 80095f8:	d134      	bne.n	8009664 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	68da      	ldr	r2, [r3, #12]
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	691b      	ldr	r3, [r3, #16]
 8009602:	429a      	cmp	r2, r3
 8009604:	d919      	bls.n	800963a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	68da      	ldr	r2, [r3, #12]
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	691b      	ldr	r3, [r3, #16]
 800960e:	1ad2      	subs	r2, r2, r3
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	68da      	ldr	r2, [r3, #12]
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800961c:	429a      	cmp	r2, r3
 800961e:	d203      	bcs.n	8009628 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009624:	b29b      	uxth	r3, r3
 8009626:	e002      	b.n	800962e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800962c:	b29b      	uxth	r3, r3
 800962e:	461a      	mov	r2, r3
 8009630:	6879      	ldr	r1, [r7, #4]
 8009632:	68f8      	ldr	r0, [r7, #12]
 8009634:	f000 ff57 	bl	800a4e6 <USBD_CtlContinueRx>
 8009638:	e038      	b.n	80096ac <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009640:	691b      	ldr	r3, [r3, #16]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d00a      	beq.n	800965c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800964c:	2b03      	cmp	r3, #3
 800964e:	d105      	bne.n	800965c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009656:	691b      	ldr	r3, [r3, #16]
 8009658:	68f8      	ldr	r0, [r7, #12]
 800965a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800965c:	68f8      	ldr	r0, [r7, #12]
 800965e:	f000 ff54 	bl	800a50a <USBD_CtlSendStatus>
 8009662:	e023      	b.n	80096ac <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800966a:	2b05      	cmp	r3, #5
 800966c:	d11e      	bne.n	80096ac <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2200      	movs	r2, #0
 8009672:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009676:	2100      	movs	r1, #0
 8009678:	68f8      	ldr	r0, [r7, #12]
 800967a:	f001 fafb 	bl	800ac74 <USBD_LL_StallEP>
 800967e:	e015      	b.n	80096ac <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009686:	699b      	ldr	r3, [r3, #24]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d00d      	beq.n	80096a8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009692:	2b03      	cmp	r3, #3
 8009694:	d108      	bne.n	80096a8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800969c:	699b      	ldr	r3, [r3, #24]
 800969e:	7afa      	ldrb	r2, [r7, #11]
 80096a0:	4611      	mov	r1, r2
 80096a2:	68f8      	ldr	r0, [r7, #12]
 80096a4:	4798      	blx	r3
 80096a6:	e001      	b.n	80096ac <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80096a8:	2302      	movs	r3, #2
 80096aa:	e000      	b.n	80096ae <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3718      	adds	r7, #24
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b086      	sub	sp, #24
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	60f8      	str	r0, [r7, #12]
 80096be:	460b      	mov	r3, r1
 80096c0:	607a      	str	r2, [r7, #4]
 80096c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80096c4:	7afb      	ldrb	r3, [r7, #11]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d17f      	bne.n	80097ca <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	3314      	adds	r3, #20
 80096ce:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80096d6:	2b02      	cmp	r3, #2
 80096d8:	d15c      	bne.n	8009794 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	68da      	ldr	r2, [r3, #12]
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	691b      	ldr	r3, [r3, #16]
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d915      	bls.n	8009712 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	68da      	ldr	r2, [r3, #12]
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	691b      	ldr	r3, [r3, #16]
 80096ee:	1ad2      	subs	r2, r2, r3
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	68db      	ldr	r3, [r3, #12]
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	461a      	mov	r2, r3
 80096fc:	6879      	ldr	r1, [r7, #4]
 80096fe:	68f8      	ldr	r0, [r7, #12]
 8009700:	f000 fec1 	bl	800a486 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009704:	2300      	movs	r3, #0
 8009706:	2200      	movs	r2, #0
 8009708:	2100      	movs	r1, #0
 800970a:	68f8      	ldr	r0, [r7, #12]
 800970c:	f001 fb5e 	bl	800adcc <USBD_LL_PrepareReceive>
 8009710:	e04e      	b.n	80097b0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	689b      	ldr	r3, [r3, #8]
 8009716:	697a      	ldr	r2, [r7, #20]
 8009718:	6912      	ldr	r2, [r2, #16]
 800971a:	fbb3 f1f2 	udiv	r1, r3, r2
 800971e:	fb01 f202 	mul.w	r2, r1, r2
 8009722:	1a9b      	subs	r3, r3, r2
 8009724:	2b00      	cmp	r3, #0
 8009726:	d11c      	bne.n	8009762 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	689a      	ldr	r2, [r3, #8]
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009730:	429a      	cmp	r2, r3
 8009732:	d316      	bcc.n	8009762 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	689a      	ldr	r2, [r3, #8]
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800973e:	429a      	cmp	r2, r3
 8009740:	d20f      	bcs.n	8009762 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009742:	2200      	movs	r2, #0
 8009744:	2100      	movs	r1, #0
 8009746:	68f8      	ldr	r0, [r7, #12]
 8009748:	f000 fe9d 	bl	800a486 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2200      	movs	r2, #0
 8009750:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009754:	2300      	movs	r3, #0
 8009756:	2200      	movs	r2, #0
 8009758:	2100      	movs	r1, #0
 800975a:	68f8      	ldr	r0, [r7, #12]
 800975c:	f001 fb36 	bl	800adcc <USBD_LL_PrepareReceive>
 8009760:	e026      	b.n	80097b0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00a      	beq.n	8009784 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009774:	2b03      	cmp	r3, #3
 8009776:	d105      	bne.n	8009784 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	68f8      	ldr	r0, [r7, #12]
 8009782:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009784:	2180      	movs	r1, #128	; 0x80
 8009786:	68f8      	ldr	r0, [r7, #12]
 8009788:	f001 fa74 	bl	800ac74 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800978c:	68f8      	ldr	r0, [r7, #12]
 800978e:	f000 fecf 	bl	800a530 <USBD_CtlReceiveStatus>
 8009792:	e00d      	b.n	80097b0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800979a:	2b04      	cmp	r3, #4
 800979c:	d004      	beq.n	80097a8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d103      	bne.n	80097b0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80097a8:	2180      	movs	r1, #128	; 0x80
 80097aa:	68f8      	ldr	r0, [r7, #12]
 80097ac:	f001 fa62 	bl	800ac74 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d11d      	bne.n	80097f6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80097ba:	68f8      	ldr	r0, [r7, #12]
 80097bc:	f7ff fe81 	bl	80094c2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80097c8:	e015      	b.n	80097f6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097d0:	695b      	ldr	r3, [r3, #20]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d00d      	beq.n	80097f2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80097dc:	2b03      	cmp	r3, #3
 80097de:	d108      	bne.n	80097f2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097e6:	695b      	ldr	r3, [r3, #20]
 80097e8:	7afa      	ldrb	r2, [r7, #11]
 80097ea:	4611      	mov	r1, r2
 80097ec:	68f8      	ldr	r0, [r7, #12]
 80097ee:	4798      	blx	r3
 80097f0:	e001      	b.n	80097f6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80097f2:	2302      	movs	r3, #2
 80097f4:	e000      	b.n	80097f8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80097f6:	2300      	movs	r3, #0
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3718      	adds	r7, #24
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009808:	2340      	movs	r3, #64	; 0x40
 800980a:	2200      	movs	r2, #0
 800980c:	2100      	movs	r1, #0
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f001 f9eb 	bl	800abea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2201      	movs	r2, #1
 8009818:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2240      	movs	r2, #64	; 0x40
 8009820:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009824:	2340      	movs	r3, #64	; 0x40
 8009826:	2200      	movs	r2, #0
 8009828:	2180      	movs	r1, #128	; 0x80
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f001 f9dd 	bl	800abea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2240      	movs	r2, #64	; 0x40
 800983a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2201      	movs	r2, #1
 8009840:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2200      	movs	r2, #0
 8009848:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2200      	movs	r2, #0
 8009850:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2200      	movs	r2, #0
 8009856:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009860:	2b00      	cmp	r3, #0
 8009862:	d009      	beq.n	8009878 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	6852      	ldr	r2, [r2, #4]
 8009870:	b2d2      	uxtb	r2, r2
 8009872:	4611      	mov	r1, r2
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	4798      	blx	r3
  }

  return USBD_OK;
 8009878:	2300      	movs	r3, #0
}
 800987a:	4618      	mov	r0, r3
 800987c:	3708      	adds	r7, #8
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009882:	b480      	push	{r7}
 8009884:	b083      	sub	sp, #12
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
 800988a:	460b      	mov	r3, r1
 800988c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	78fa      	ldrb	r2, [r7, #3]
 8009892:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009894:	2300      	movs	r3, #0
}
 8009896:	4618      	mov	r0, r3
 8009898:	370c      	adds	r7, #12
 800989a:	46bd      	mov	sp, r7
 800989c:	bc80      	pop	{r7}
 800989e:	4770      	bx	lr

080098a0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b083      	sub	sp, #12
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2204      	movs	r2, #4
 80098b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80098bc:	2300      	movs	r3, #0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	370c      	adds	r7, #12
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bc80      	pop	{r7}
 80098c6:	4770      	bx	lr

080098c8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b083      	sub	sp, #12
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098d6:	2b04      	cmp	r3, #4
 80098d8:	d105      	bne.n	80098e6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80098e6:	2300      	movs	r3, #0
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	370c      	adds	r7, #12
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bc80      	pop	{r7}
 80098f0:	4770      	bx	lr

080098f2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80098f2:	b580      	push	{r7, lr}
 80098f4:	b082      	sub	sp, #8
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009900:	2b03      	cmp	r3, #3
 8009902:	d10b      	bne.n	800991c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800990a:	69db      	ldr	r3, [r3, #28]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d005      	beq.n	800991c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009916:	69db      	ldr	r3, [r3, #28]
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800991c:	2300      	movs	r3, #0
}
 800991e:	4618      	mov	r0, r3
 8009920:	3708      	adds	r7, #8
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
	...

08009928 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009932:	2300      	movs	r3, #0
 8009934:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800993e:	2b40      	cmp	r3, #64	; 0x40
 8009940:	d005      	beq.n	800994e <USBD_StdDevReq+0x26>
 8009942:	2b40      	cmp	r3, #64	; 0x40
 8009944:	d84f      	bhi.n	80099e6 <USBD_StdDevReq+0xbe>
 8009946:	2b00      	cmp	r3, #0
 8009948:	d009      	beq.n	800995e <USBD_StdDevReq+0x36>
 800994a:	2b20      	cmp	r3, #32
 800994c:	d14b      	bne.n	80099e6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	6839      	ldr	r1, [r7, #0]
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	4798      	blx	r3
      break;
 800995c:	e048      	b.n	80099f0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	785b      	ldrb	r3, [r3, #1]
 8009962:	2b09      	cmp	r3, #9
 8009964:	d839      	bhi.n	80099da <USBD_StdDevReq+0xb2>
 8009966:	a201      	add	r2, pc, #4	; (adr r2, 800996c <USBD_StdDevReq+0x44>)
 8009968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800996c:	080099bd 	.word	0x080099bd
 8009970:	080099d1 	.word	0x080099d1
 8009974:	080099db 	.word	0x080099db
 8009978:	080099c7 	.word	0x080099c7
 800997c:	080099db 	.word	0x080099db
 8009980:	0800999f 	.word	0x0800999f
 8009984:	08009995 	.word	0x08009995
 8009988:	080099db 	.word	0x080099db
 800998c:	080099b3 	.word	0x080099b3
 8009990:	080099a9 	.word	0x080099a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009994:	6839      	ldr	r1, [r7, #0]
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 f9dc 	bl	8009d54 <USBD_GetDescriptor>
          break;
 800999c:	e022      	b.n	80099e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800999e:	6839      	ldr	r1, [r7, #0]
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 fb3f 	bl	800a024 <USBD_SetAddress>
          break;
 80099a6:	e01d      	b.n	80099e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80099a8:	6839      	ldr	r1, [r7, #0]
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 fb7e 	bl	800a0ac <USBD_SetConfig>
          break;
 80099b0:	e018      	b.n	80099e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80099b2:	6839      	ldr	r1, [r7, #0]
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 fc07 	bl	800a1c8 <USBD_GetConfig>
          break;
 80099ba:	e013      	b.n	80099e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80099bc:	6839      	ldr	r1, [r7, #0]
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 fc37 	bl	800a232 <USBD_GetStatus>
          break;
 80099c4:	e00e      	b.n	80099e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80099c6:	6839      	ldr	r1, [r7, #0]
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 fc65 	bl	800a298 <USBD_SetFeature>
          break;
 80099ce:	e009      	b.n	80099e4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80099d0:	6839      	ldr	r1, [r7, #0]
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 fc74 	bl	800a2c0 <USBD_ClrFeature>
          break;
 80099d8:	e004      	b.n	80099e4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80099da:	6839      	ldr	r1, [r7, #0]
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 fccc 	bl	800a37a <USBD_CtlError>
          break;
 80099e2:	bf00      	nop
      }
      break;
 80099e4:	e004      	b.n	80099f0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80099e6:	6839      	ldr	r1, [r7, #0]
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 fcc6 	bl	800a37a <USBD_CtlError>
      break;
 80099ee:	bf00      	nop
  }

  return ret;
 80099f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
 80099fa:	bf00      	nop

080099fc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a06:	2300      	movs	r3, #0
 8009a08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a12:	2b40      	cmp	r3, #64	; 0x40
 8009a14:	d005      	beq.n	8009a22 <USBD_StdItfReq+0x26>
 8009a16:	2b40      	cmp	r3, #64	; 0x40
 8009a18:	d82e      	bhi.n	8009a78 <USBD_StdItfReq+0x7c>
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d001      	beq.n	8009a22 <USBD_StdItfReq+0x26>
 8009a1e:	2b20      	cmp	r3, #32
 8009a20:	d12a      	bne.n	8009a78 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	2b02      	cmp	r3, #2
 8009a2c:	d81d      	bhi.n	8009a6a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	889b      	ldrh	r3, [r3, #4]
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d813      	bhi.n	8009a60 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	6839      	ldr	r1, [r7, #0]
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	4798      	blx	r3
 8009a46:	4603      	mov	r3, r0
 8009a48:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	88db      	ldrh	r3, [r3, #6]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d110      	bne.n	8009a74 <USBD_StdItfReq+0x78>
 8009a52:	7bfb      	ldrb	r3, [r7, #15]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d10d      	bne.n	8009a74 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 fd56 	bl	800a50a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009a5e:	e009      	b.n	8009a74 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009a60:	6839      	ldr	r1, [r7, #0]
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 fc89 	bl	800a37a <USBD_CtlError>
          break;
 8009a68:	e004      	b.n	8009a74 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009a6a:	6839      	ldr	r1, [r7, #0]
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 fc84 	bl	800a37a <USBD_CtlError>
          break;
 8009a72:	e000      	b.n	8009a76 <USBD_StdItfReq+0x7a>
          break;
 8009a74:	bf00      	nop
      }
      break;
 8009a76:	e004      	b.n	8009a82 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009a78:	6839      	ldr	r1, [r7, #0]
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 fc7d 	bl	800a37a <USBD_CtlError>
      break;
 8009a80:	bf00      	nop
  }

  return USBD_OK;
 8009a82:	2300      	movs	r3, #0
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3710      	adds	r7, #16
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009a96:	2300      	movs	r3, #0
 8009a98:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	889b      	ldrh	r3, [r3, #4]
 8009a9e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009aa8:	2b40      	cmp	r3, #64	; 0x40
 8009aaa:	d007      	beq.n	8009abc <USBD_StdEPReq+0x30>
 8009aac:	2b40      	cmp	r3, #64	; 0x40
 8009aae:	f200 8146 	bhi.w	8009d3e <USBD_StdEPReq+0x2b2>
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d00a      	beq.n	8009acc <USBD_StdEPReq+0x40>
 8009ab6:	2b20      	cmp	r3, #32
 8009ab8:	f040 8141 	bne.w	8009d3e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	6839      	ldr	r1, [r7, #0]
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	4798      	blx	r3
      break;
 8009aca:	e13d      	b.n	8009d48 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ad4:	2b20      	cmp	r3, #32
 8009ad6:	d10a      	bne.n	8009aee <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	6839      	ldr	r1, [r7, #0]
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	4798      	blx	r3
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009aea:	7bfb      	ldrb	r3, [r7, #15]
 8009aec:	e12d      	b.n	8009d4a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	785b      	ldrb	r3, [r3, #1]
 8009af2:	2b03      	cmp	r3, #3
 8009af4:	d007      	beq.n	8009b06 <USBD_StdEPReq+0x7a>
 8009af6:	2b03      	cmp	r3, #3
 8009af8:	f300 811b 	bgt.w	8009d32 <USBD_StdEPReq+0x2a6>
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d072      	beq.n	8009be6 <USBD_StdEPReq+0x15a>
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d03a      	beq.n	8009b7a <USBD_StdEPReq+0xee>
 8009b04:	e115      	b.n	8009d32 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b0c:	2b02      	cmp	r3, #2
 8009b0e:	d002      	beq.n	8009b16 <USBD_StdEPReq+0x8a>
 8009b10:	2b03      	cmp	r3, #3
 8009b12:	d015      	beq.n	8009b40 <USBD_StdEPReq+0xb4>
 8009b14:	e02b      	b.n	8009b6e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b16:	7bbb      	ldrb	r3, [r7, #14]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d00c      	beq.n	8009b36 <USBD_StdEPReq+0xaa>
 8009b1c:	7bbb      	ldrb	r3, [r7, #14]
 8009b1e:	2b80      	cmp	r3, #128	; 0x80
 8009b20:	d009      	beq.n	8009b36 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009b22:	7bbb      	ldrb	r3, [r7, #14]
 8009b24:	4619      	mov	r1, r3
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f001 f8a4 	bl	800ac74 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009b2c:	2180      	movs	r1, #128	; 0x80
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f001 f8a0 	bl	800ac74 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b34:	e020      	b.n	8009b78 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009b36:	6839      	ldr	r1, [r7, #0]
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 fc1e 	bl	800a37a <USBD_CtlError>
              break;
 8009b3e:	e01b      	b.n	8009b78 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	885b      	ldrh	r3, [r3, #2]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d10e      	bne.n	8009b66 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009b48:	7bbb      	ldrb	r3, [r7, #14]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00b      	beq.n	8009b66 <USBD_StdEPReq+0xda>
 8009b4e:	7bbb      	ldrb	r3, [r7, #14]
 8009b50:	2b80      	cmp	r3, #128	; 0x80
 8009b52:	d008      	beq.n	8009b66 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	88db      	ldrh	r3, [r3, #6]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d104      	bne.n	8009b66 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009b5c:	7bbb      	ldrb	r3, [r7, #14]
 8009b5e:	4619      	mov	r1, r3
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f001 f887 	bl	800ac74 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 fccf 	bl	800a50a <USBD_CtlSendStatus>

              break;
 8009b6c:	e004      	b.n	8009b78 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009b6e:	6839      	ldr	r1, [r7, #0]
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 fc02 	bl	800a37a <USBD_CtlError>
              break;
 8009b76:	bf00      	nop
          }
          break;
 8009b78:	e0e0      	b.n	8009d3c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b80:	2b02      	cmp	r3, #2
 8009b82:	d002      	beq.n	8009b8a <USBD_StdEPReq+0xfe>
 8009b84:	2b03      	cmp	r3, #3
 8009b86:	d015      	beq.n	8009bb4 <USBD_StdEPReq+0x128>
 8009b88:	e026      	b.n	8009bd8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b8a:	7bbb      	ldrb	r3, [r7, #14]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00c      	beq.n	8009baa <USBD_StdEPReq+0x11e>
 8009b90:	7bbb      	ldrb	r3, [r7, #14]
 8009b92:	2b80      	cmp	r3, #128	; 0x80
 8009b94:	d009      	beq.n	8009baa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009b96:	7bbb      	ldrb	r3, [r7, #14]
 8009b98:	4619      	mov	r1, r3
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f001 f86a 	bl	800ac74 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009ba0:	2180      	movs	r1, #128	; 0x80
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f001 f866 	bl	800ac74 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ba8:	e01c      	b.n	8009be4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009baa:	6839      	ldr	r1, [r7, #0]
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 fbe4 	bl	800a37a <USBD_CtlError>
              break;
 8009bb2:	e017      	b.n	8009be4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	885b      	ldrh	r3, [r3, #2]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d112      	bne.n	8009be2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009bbc:	7bbb      	ldrb	r3, [r7, #14]
 8009bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d004      	beq.n	8009bd0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009bc6:	7bbb      	ldrb	r3, [r7, #14]
 8009bc8:	4619      	mov	r1, r3
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f001 f871 	bl	800acb2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 fc9a 	bl	800a50a <USBD_CtlSendStatus>
              }
              break;
 8009bd6:	e004      	b.n	8009be2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009bd8:	6839      	ldr	r1, [r7, #0]
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 fbcd 	bl	800a37a <USBD_CtlError>
              break;
 8009be0:	e000      	b.n	8009be4 <USBD_StdEPReq+0x158>
              break;
 8009be2:	bf00      	nop
          }
          break;
 8009be4:	e0aa      	b.n	8009d3c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bec:	2b02      	cmp	r3, #2
 8009bee:	d002      	beq.n	8009bf6 <USBD_StdEPReq+0x16a>
 8009bf0:	2b03      	cmp	r3, #3
 8009bf2:	d032      	beq.n	8009c5a <USBD_StdEPReq+0x1ce>
 8009bf4:	e097      	b.n	8009d26 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009bf6:	7bbb      	ldrb	r3, [r7, #14]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d007      	beq.n	8009c0c <USBD_StdEPReq+0x180>
 8009bfc:	7bbb      	ldrb	r3, [r7, #14]
 8009bfe:	2b80      	cmp	r3, #128	; 0x80
 8009c00:	d004      	beq.n	8009c0c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009c02:	6839      	ldr	r1, [r7, #0]
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 fbb8 	bl	800a37a <USBD_CtlError>
                break;
 8009c0a:	e091      	b.n	8009d30 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	da0b      	bge.n	8009c2c <USBD_StdEPReq+0x1a0>
 8009c14:	7bbb      	ldrb	r3, [r7, #14]
 8009c16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c1a:	4613      	mov	r3, r2
 8009c1c:	009b      	lsls	r3, r3, #2
 8009c1e:	4413      	add	r3, r2
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	3310      	adds	r3, #16
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	4413      	add	r3, r2
 8009c28:	3304      	adds	r3, #4
 8009c2a:	e00b      	b.n	8009c44 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c2c:	7bbb      	ldrb	r3, [r7, #14]
 8009c2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c32:	4613      	mov	r3, r2
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	4413      	add	r3, r2
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	4413      	add	r3, r2
 8009c42:	3304      	adds	r3, #4
 8009c44:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	2202      	movs	r2, #2
 8009c50:	4619      	mov	r1, r3
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 fbfb 	bl	800a44e <USBD_CtlSendData>
              break;
 8009c58:	e06a      	b.n	8009d30 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009c5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	da11      	bge.n	8009c86 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009c62:	7bbb      	ldrb	r3, [r7, #14]
 8009c64:	f003 020f 	and.w	r2, r3, #15
 8009c68:	6879      	ldr	r1, [r7, #4]
 8009c6a:	4613      	mov	r3, r2
 8009c6c:	009b      	lsls	r3, r3, #2
 8009c6e:	4413      	add	r3, r2
 8009c70:	009b      	lsls	r3, r3, #2
 8009c72:	440b      	add	r3, r1
 8009c74:	3318      	adds	r3, #24
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d117      	bne.n	8009cac <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009c7c:	6839      	ldr	r1, [r7, #0]
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 fb7b 	bl	800a37a <USBD_CtlError>
                  break;
 8009c84:	e054      	b.n	8009d30 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009c86:	7bbb      	ldrb	r3, [r7, #14]
 8009c88:	f003 020f 	and.w	r2, r3, #15
 8009c8c:	6879      	ldr	r1, [r7, #4]
 8009c8e:	4613      	mov	r3, r2
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	4413      	add	r3, r2
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	440b      	add	r3, r1
 8009c98:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d104      	bne.n	8009cac <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009ca2:	6839      	ldr	r1, [r7, #0]
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f000 fb68 	bl	800a37a <USBD_CtlError>
                  break;
 8009caa:	e041      	b.n	8009d30 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	da0b      	bge.n	8009ccc <USBD_StdEPReq+0x240>
 8009cb4:	7bbb      	ldrb	r3, [r7, #14]
 8009cb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009cba:	4613      	mov	r3, r2
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	4413      	add	r3, r2
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	3310      	adds	r3, #16
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	3304      	adds	r3, #4
 8009cca:	e00b      	b.n	8009ce4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ccc:	7bbb      	ldrb	r3, [r7, #14]
 8009cce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cd2:	4613      	mov	r3, r2
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	4413      	add	r3, r2
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	4413      	add	r3, r2
 8009ce2:	3304      	adds	r3, #4
 8009ce4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009ce6:	7bbb      	ldrb	r3, [r7, #14]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d002      	beq.n	8009cf2 <USBD_StdEPReq+0x266>
 8009cec:	7bbb      	ldrb	r3, [r7, #14]
 8009cee:	2b80      	cmp	r3, #128	; 0x80
 8009cf0:	d103      	bne.n	8009cfa <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	601a      	str	r2, [r3, #0]
 8009cf8:	e00e      	b.n	8009d18 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009cfa:	7bbb      	ldrb	r3, [r7, #14]
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 fff6 	bl	800acf0 <USBD_LL_IsStallEP>
 8009d04:	4603      	mov	r3, r0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d003      	beq.n	8009d12 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	601a      	str	r2, [r3, #0]
 8009d10:	e002      	b.n	8009d18 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	2200      	movs	r2, #0
 8009d16:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	2202      	movs	r2, #2
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 fb95 	bl	800a44e <USBD_CtlSendData>
              break;
 8009d24:	e004      	b.n	8009d30 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009d26:	6839      	ldr	r1, [r7, #0]
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 fb26 	bl	800a37a <USBD_CtlError>
              break;
 8009d2e:	bf00      	nop
          }
          break;
 8009d30:	e004      	b.n	8009d3c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009d32:	6839      	ldr	r1, [r7, #0]
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 fb20 	bl	800a37a <USBD_CtlError>
          break;
 8009d3a:	bf00      	nop
      }
      break;
 8009d3c:	e004      	b.n	8009d48 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009d3e:	6839      	ldr	r1, [r7, #0]
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 fb1a 	bl	800a37a <USBD_CtlError>
      break;
 8009d46:	bf00      	nop
  }

  return ret;
 8009d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
	...

08009d54 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009d62:	2300      	movs	r3, #0
 8009d64:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009d66:	2300      	movs	r3, #0
 8009d68:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	885b      	ldrh	r3, [r3, #2]
 8009d6e:	0a1b      	lsrs	r3, r3, #8
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	3b01      	subs	r3, #1
 8009d74:	2b06      	cmp	r3, #6
 8009d76:	f200 8128 	bhi.w	8009fca <USBD_GetDescriptor+0x276>
 8009d7a:	a201      	add	r2, pc, #4	; (adr r2, 8009d80 <USBD_GetDescriptor+0x2c>)
 8009d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d80:	08009d9d 	.word	0x08009d9d
 8009d84:	08009db5 	.word	0x08009db5
 8009d88:	08009df5 	.word	0x08009df5
 8009d8c:	08009fcb 	.word	0x08009fcb
 8009d90:	08009fcb 	.word	0x08009fcb
 8009d94:	08009f6b 	.word	0x08009f6b
 8009d98:	08009f97 	.word	0x08009f97
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	7c12      	ldrb	r2, [r2, #16]
 8009da8:	f107 0108 	add.w	r1, r7, #8
 8009dac:	4610      	mov	r0, r2
 8009dae:	4798      	blx	r3
 8009db0:	60f8      	str	r0, [r7, #12]
      break;
 8009db2:	e112      	b.n	8009fda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	7c1b      	ldrb	r3, [r3, #16]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d10d      	bne.n	8009dd8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dc4:	f107 0208 	add.w	r2, r7, #8
 8009dc8:	4610      	mov	r0, r2
 8009dca:	4798      	blx	r3
 8009dcc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	2202      	movs	r2, #2
 8009dd4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009dd6:	e100      	b.n	8009fda <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de0:	f107 0208 	add.w	r2, r7, #8
 8009de4:	4610      	mov	r0, r2
 8009de6:	4798      	blx	r3
 8009de8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	3301      	adds	r3, #1
 8009dee:	2202      	movs	r2, #2
 8009df0:	701a      	strb	r2, [r3, #0]
      break;
 8009df2:	e0f2      	b.n	8009fda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	885b      	ldrh	r3, [r3, #2]
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	2b05      	cmp	r3, #5
 8009dfc:	f200 80ac 	bhi.w	8009f58 <USBD_GetDescriptor+0x204>
 8009e00:	a201      	add	r2, pc, #4	; (adr r2, 8009e08 <USBD_GetDescriptor+0xb4>)
 8009e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e06:	bf00      	nop
 8009e08:	08009e21 	.word	0x08009e21
 8009e0c:	08009e55 	.word	0x08009e55
 8009e10:	08009e89 	.word	0x08009e89
 8009e14:	08009ebd 	.word	0x08009ebd
 8009e18:	08009ef1 	.word	0x08009ef1
 8009e1c:	08009f25 	.word	0x08009f25
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d00b      	beq.n	8009e44 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	7c12      	ldrb	r2, [r2, #16]
 8009e38:	f107 0108 	add.w	r1, r7, #8
 8009e3c:	4610      	mov	r0, r2
 8009e3e:	4798      	blx	r3
 8009e40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e42:	e091      	b.n	8009f68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e44:	6839      	ldr	r1, [r7, #0]
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f000 fa97 	bl	800a37a <USBD_CtlError>
            err++;
 8009e4c:	7afb      	ldrb	r3, [r7, #11]
 8009e4e:	3301      	adds	r3, #1
 8009e50:	72fb      	strb	r3, [r7, #11]
          break;
 8009e52:	e089      	b.n	8009f68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d00b      	beq.n	8009e78 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	7c12      	ldrb	r2, [r2, #16]
 8009e6c:	f107 0108 	add.w	r1, r7, #8
 8009e70:	4610      	mov	r0, r2
 8009e72:	4798      	blx	r3
 8009e74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e76:	e077      	b.n	8009f68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e78:	6839      	ldr	r1, [r7, #0]
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 fa7d 	bl	800a37a <USBD_CtlError>
            err++;
 8009e80:	7afb      	ldrb	r3, [r7, #11]
 8009e82:	3301      	adds	r3, #1
 8009e84:	72fb      	strb	r3, [r7, #11]
          break;
 8009e86:	e06f      	b.n	8009f68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d00b      	beq.n	8009eac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	7c12      	ldrb	r2, [r2, #16]
 8009ea0:	f107 0108 	add.w	r1, r7, #8
 8009ea4:	4610      	mov	r0, r2
 8009ea6:	4798      	blx	r3
 8009ea8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009eaa:	e05d      	b.n	8009f68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009eac:	6839      	ldr	r1, [r7, #0]
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 fa63 	bl	800a37a <USBD_CtlError>
            err++;
 8009eb4:	7afb      	ldrb	r3, [r7, #11]
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	72fb      	strb	r3, [r7, #11]
          break;
 8009eba:	e055      	b.n	8009f68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ec2:	691b      	ldr	r3, [r3, #16]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d00b      	beq.n	8009ee0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ece:	691b      	ldr	r3, [r3, #16]
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	7c12      	ldrb	r2, [r2, #16]
 8009ed4:	f107 0108 	add.w	r1, r7, #8
 8009ed8:	4610      	mov	r0, r2
 8009eda:	4798      	blx	r3
 8009edc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ede:	e043      	b.n	8009f68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ee0:	6839      	ldr	r1, [r7, #0]
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 fa49 	bl	800a37a <USBD_CtlError>
            err++;
 8009ee8:	7afb      	ldrb	r3, [r7, #11]
 8009eea:	3301      	adds	r3, #1
 8009eec:	72fb      	strb	r3, [r7, #11]
          break;
 8009eee:	e03b      	b.n	8009f68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ef6:	695b      	ldr	r3, [r3, #20]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d00b      	beq.n	8009f14 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f02:	695b      	ldr	r3, [r3, #20]
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	7c12      	ldrb	r2, [r2, #16]
 8009f08:	f107 0108 	add.w	r1, r7, #8
 8009f0c:	4610      	mov	r0, r2
 8009f0e:	4798      	blx	r3
 8009f10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f12:	e029      	b.n	8009f68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f14:	6839      	ldr	r1, [r7, #0]
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 fa2f 	bl	800a37a <USBD_CtlError>
            err++;
 8009f1c:	7afb      	ldrb	r3, [r7, #11]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	72fb      	strb	r3, [r7, #11]
          break;
 8009f22:	e021      	b.n	8009f68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f2a:	699b      	ldr	r3, [r3, #24]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d00b      	beq.n	8009f48 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f36:	699b      	ldr	r3, [r3, #24]
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	7c12      	ldrb	r2, [r2, #16]
 8009f3c:	f107 0108 	add.w	r1, r7, #8
 8009f40:	4610      	mov	r0, r2
 8009f42:	4798      	blx	r3
 8009f44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f46:	e00f      	b.n	8009f68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f48:	6839      	ldr	r1, [r7, #0]
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 fa15 	bl	800a37a <USBD_CtlError>
            err++;
 8009f50:	7afb      	ldrb	r3, [r7, #11]
 8009f52:	3301      	adds	r3, #1
 8009f54:	72fb      	strb	r3, [r7, #11]
          break;
 8009f56:	e007      	b.n	8009f68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009f58:	6839      	ldr	r1, [r7, #0]
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 fa0d 	bl	800a37a <USBD_CtlError>
          err++;
 8009f60:	7afb      	ldrb	r3, [r7, #11]
 8009f62:	3301      	adds	r3, #1
 8009f64:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009f66:	e038      	b.n	8009fda <USBD_GetDescriptor+0x286>
 8009f68:	e037      	b.n	8009fda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	7c1b      	ldrb	r3, [r3, #16]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d109      	bne.n	8009f86 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f7a:	f107 0208 	add.w	r2, r7, #8
 8009f7e:	4610      	mov	r0, r2
 8009f80:	4798      	blx	r3
 8009f82:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f84:	e029      	b.n	8009fda <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f86:	6839      	ldr	r1, [r7, #0]
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 f9f6 	bl	800a37a <USBD_CtlError>
        err++;
 8009f8e:	7afb      	ldrb	r3, [r7, #11]
 8009f90:	3301      	adds	r3, #1
 8009f92:	72fb      	strb	r3, [r7, #11]
      break;
 8009f94:	e021      	b.n	8009fda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	7c1b      	ldrb	r3, [r3, #16]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d10d      	bne.n	8009fba <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fa6:	f107 0208 	add.w	r2, r7, #8
 8009faa:	4610      	mov	r0, r2
 8009fac:	4798      	blx	r3
 8009fae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	2207      	movs	r2, #7
 8009fb6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009fb8:	e00f      	b.n	8009fda <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009fba:	6839      	ldr	r1, [r7, #0]
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f000 f9dc 	bl	800a37a <USBD_CtlError>
        err++;
 8009fc2:	7afb      	ldrb	r3, [r7, #11]
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	72fb      	strb	r3, [r7, #11]
      break;
 8009fc8:	e007      	b.n	8009fda <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009fca:	6839      	ldr	r1, [r7, #0]
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f000 f9d4 	bl	800a37a <USBD_CtlError>
      err++;
 8009fd2:	7afb      	ldrb	r3, [r7, #11]
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	72fb      	strb	r3, [r7, #11]
      break;
 8009fd8:	bf00      	nop
  }

  if (err != 0U)
 8009fda:	7afb      	ldrb	r3, [r7, #11]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d11c      	bne.n	800a01a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009fe0:	893b      	ldrh	r3, [r7, #8]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d011      	beq.n	800a00a <USBD_GetDescriptor+0x2b6>
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	88db      	ldrh	r3, [r3, #6]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d00d      	beq.n	800a00a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	88da      	ldrh	r2, [r3, #6]
 8009ff2:	893b      	ldrh	r3, [r7, #8]
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	bf28      	it	cs
 8009ff8:	4613      	movcs	r3, r2
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009ffe:	893b      	ldrh	r3, [r7, #8]
 800a000:	461a      	mov	r2, r3
 800a002:	68f9      	ldr	r1, [r7, #12]
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f000 fa22 	bl	800a44e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	88db      	ldrh	r3, [r3, #6]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d104      	bne.n	800a01c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 fa79 	bl	800a50a <USBD_CtlSendStatus>
 800a018:	e000      	b.n	800a01c <USBD_GetDescriptor+0x2c8>
    return;
 800a01a:	bf00      	nop
    }
  }
}
 800a01c:	3710      	adds	r7, #16
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
 800a022:	bf00      	nop

0800a024 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	889b      	ldrh	r3, [r3, #4]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d130      	bne.n	800a098 <USBD_SetAddress+0x74>
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	88db      	ldrh	r3, [r3, #6]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d12c      	bne.n	800a098 <USBD_SetAddress+0x74>
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	885b      	ldrh	r3, [r3, #2]
 800a042:	2b7f      	cmp	r3, #127	; 0x7f
 800a044:	d828      	bhi.n	800a098 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	885b      	ldrh	r3, [r3, #2]
 800a04a:	b2db      	uxtb	r3, r3
 800a04c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a050:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a058:	2b03      	cmp	r3, #3
 800a05a:	d104      	bne.n	800a066 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a05c:	6839      	ldr	r1, [r7, #0]
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f000 f98b 	bl	800a37a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a064:	e01d      	b.n	800a0a2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	7bfa      	ldrb	r2, [r7, #15]
 800a06a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a06e:	7bfb      	ldrb	r3, [r7, #15]
 800a070:	4619      	mov	r1, r3
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 fe68 	bl	800ad48 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 fa46 	bl	800a50a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a07e:	7bfb      	ldrb	r3, [r7, #15]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d004      	beq.n	800a08e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2202      	movs	r2, #2
 800a088:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a08c:	e009      	b.n	800a0a2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2201      	movs	r2, #1
 800a092:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a096:	e004      	b.n	800a0a2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a098:	6839      	ldr	r1, [r7, #0]
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 f96d 	bl	800a37a <USBD_CtlError>
  }
}
 800a0a0:	bf00      	nop
 800a0a2:	bf00      	nop
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
	...

0800a0ac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	885b      	ldrh	r3, [r3, #2]
 800a0ba:	b2da      	uxtb	r2, r3
 800a0bc:	4b41      	ldr	r3, [pc, #260]	; (800a1c4 <USBD_SetConfig+0x118>)
 800a0be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a0c0:	4b40      	ldr	r3, [pc, #256]	; (800a1c4 <USBD_SetConfig+0x118>)
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d904      	bls.n	800a0d2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a0c8:	6839      	ldr	r1, [r7, #0]
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 f955 	bl	800a37a <USBD_CtlError>
 800a0d0:	e075      	b.n	800a1be <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0d8:	2b02      	cmp	r3, #2
 800a0da:	d002      	beq.n	800a0e2 <USBD_SetConfig+0x36>
 800a0dc:	2b03      	cmp	r3, #3
 800a0de:	d023      	beq.n	800a128 <USBD_SetConfig+0x7c>
 800a0e0:	e062      	b.n	800a1a8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a0e2:	4b38      	ldr	r3, [pc, #224]	; (800a1c4 <USBD_SetConfig+0x118>)
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d01a      	beq.n	800a120 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a0ea:	4b36      	ldr	r3, [pc, #216]	; (800a1c4 <USBD_SetConfig+0x118>)
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2203      	movs	r2, #3
 800a0f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a0fc:	4b31      	ldr	r3, [pc, #196]	; (800a1c4 <USBD_SetConfig+0x118>)
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	4619      	mov	r1, r3
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f7ff f9e7 	bl	80094d6 <USBD_SetClassConfig>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b02      	cmp	r3, #2
 800a10c:	d104      	bne.n	800a118 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a10e:	6839      	ldr	r1, [r7, #0]
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 f932 	bl	800a37a <USBD_CtlError>
            return;
 800a116:	e052      	b.n	800a1be <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 f9f6 	bl	800a50a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a11e:	e04e      	b.n	800a1be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 f9f2 	bl	800a50a <USBD_CtlSendStatus>
        break;
 800a126:	e04a      	b.n	800a1be <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a128:	4b26      	ldr	r3, [pc, #152]	; (800a1c4 <USBD_SetConfig+0x118>)
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d112      	bne.n	800a156 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2202      	movs	r2, #2
 800a134:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a138:	4b22      	ldr	r3, [pc, #136]	; (800a1c4 <USBD_SetConfig+0x118>)
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	461a      	mov	r2, r3
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a142:	4b20      	ldr	r3, [pc, #128]	; (800a1c4 <USBD_SetConfig+0x118>)
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	4619      	mov	r1, r3
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f7ff f9e3 	bl	8009514 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 f9db 	bl	800a50a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a154:	e033      	b.n	800a1be <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a156:	4b1b      	ldr	r3, [pc, #108]	; (800a1c4 <USBD_SetConfig+0x118>)
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	461a      	mov	r2, r3
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	429a      	cmp	r2, r3
 800a162:	d01d      	beq.n	800a1a0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	4619      	mov	r1, r3
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f7ff f9d1 	bl	8009514 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a172:	4b14      	ldr	r3, [pc, #80]	; (800a1c4 <USBD_SetConfig+0x118>)
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	461a      	mov	r2, r3
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a17c:	4b11      	ldr	r3, [pc, #68]	; (800a1c4 <USBD_SetConfig+0x118>)
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	4619      	mov	r1, r3
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f7ff f9a7 	bl	80094d6 <USBD_SetClassConfig>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b02      	cmp	r3, #2
 800a18c:	d104      	bne.n	800a198 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a18e:	6839      	ldr	r1, [r7, #0]
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 f8f2 	bl	800a37a <USBD_CtlError>
            return;
 800a196:	e012      	b.n	800a1be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 f9b6 	bl	800a50a <USBD_CtlSendStatus>
        break;
 800a19e:	e00e      	b.n	800a1be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 f9b2 	bl	800a50a <USBD_CtlSendStatus>
        break;
 800a1a6:	e00a      	b.n	800a1be <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a1a8:	6839      	ldr	r1, [r7, #0]
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 f8e5 	bl	800a37a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a1b0:	4b04      	ldr	r3, [pc, #16]	; (800a1c4 <USBD_SetConfig+0x118>)
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f7ff f9ac 	bl	8009514 <USBD_ClrClassConfig>
        break;
 800a1bc:	bf00      	nop
    }
  }
}
 800a1be:	3708      	adds	r7, #8
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	20000440 	.word	0x20000440

0800a1c8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b082      	sub	sp, #8
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	88db      	ldrh	r3, [r3, #6]
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d004      	beq.n	800a1e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a1da:	6839      	ldr	r1, [r7, #0]
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f000 f8cc 	bl	800a37a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a1e2:	e022      	b.n	800a22a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1ea:	2b02      	cmp	r3, #2
 800a1ec:	dc02      	bgt.n	800a1f4 <USBD_GetConfig+0x2c>
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	dc03      	bgt.n	800a1fa <USBD_GetConfig+0x32>
 800a1f2:	e015      	b.n	800a220 <USBD_GetConfig+0x58>
 800a1f4:	2b03      	cmp	r3, #3
 800a1f6:	d00b      	beq.n	800a210 <USBD_GetConfig+0x48>
 800a1f8:	e012      	b.n	800a220 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	3308      	adds	r3, #8
 800a204:	2201      	movs	r2, #1
 800a206:	4619      	mov	r1, r3
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 f920 	bl	800a44e <USBD_CtlSendData>
        break;
 800a20e:	e00c      	b.n	800a22a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	3304      	adds	r3, #4
 800a214:	2201      	movs	r2, #1
 800a216:	4619      	mov	r1, r3
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f000 f918 	bl	800a44e <USBD_CtlSendData>
        break;
 800a21e:	e004      	b.n	800a22a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a220:	6839      	ldr	r1, [r7, #0]
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 f8a9 	bl	800a37a <USBD_CtlError>
        break;
 800a228:	bf00      	nop
}
 800a22a:	bf00      	nop
 800a22c:	3708      	adds	r7, #8
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a232:	b580      	push	{r7, lr}
 800a234:	b082      	sub	sp, #8
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
 800a23a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a242:	3b01      	subs	r3, #1
 800a244:	2b02      	cmp	r3, #2
 800a246:	d81e      	bhi.n	800a286 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	88db      	ldrh	r3, [r3, #6]
 800a24c:	2b02      	cmp	r3, #2
 800a24e:	d004      	beq.n	800a25a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a250:	6839      	ldr	r1, [r7, #0]
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 f891 	bl	800a37a <USBD_CtlError>
        break;
 800a258:	e01a      	b.n	800a290 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2201      	movs	r2, #1
 800a25e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a266:	2b00      	cmp	r3, #0
 800a268:	d005      	beq.n	800a276 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	68db      	ldr	r3, [r3, #12]
 800a26e:	f043 0202 	orr.w	r2, r3, #2
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	330c      	adds	r3, #12
 800a27a:	2202      	movs	r2, #2
 800a27c:	4619      	mov	r1, r3
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 f8e5 	bl	800a44e <USBD_CtlSendData>
      break;
 800a284:	e004      	b.n	800a290 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a286:	6839      	ldr	r1, [r7, #0]
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 f876 	bl	800a37a <USBD_CtlError>
      break;
 800a28e:	bf00      	nop
  }
}
 800a290:	bf00      	nop
 800a292:	3708      	adds	r7, #8
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	885b      	ldrh	r3, [r3, #2]
 800a2a6:	2b01      	cmp	r3, #1
 800a2a8:	d106      	bne.n	800a2b8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 f929 	bl	800a50a <USBD_CtlSendStatus>
  }
}
 800a2b8:	bf00      	nop
 800a2ba:	3708      	adds	r7, #8
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2d0:	3b01      	subs	r3, #1
 800a2d2:	2b02      	cmp	r3, #2
 800a2d4:	d80b      	bhi.n	800a2ee <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	885b      	ldrh	r3, [r3, #2]
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d10c      	bne.n	800a2f8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 f90f 	bl	800a50a <USBD_CtlSendStatus>
      }
      break;
 800a2ec:	e004      	b.n	800a2f8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a2ee:	6839      	ldr	r1, [r7, #0]
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f000 f842 	bl	800a37a <USBD_CtlError>
      break;
 800a2f6:	e000      	b.n	800a2fa <USBD_ClrFeature+0x3a>
      break;
 800a2f8:	bf00      	nop
  }
}
 800a2fa:	bf00      	nop
 800a2fc:	3708      	adds	r7, #8
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a302:	b480      	push	{r7}
 800a304:	b083      	sub	sp, #12
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
 800a30a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	781a      	ldrb	r2, [r3, #0]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	785a      	ldrb	r2, [r3, #1]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	3302      	adds	r3, #2
 800a320:	781b      	ldrb	r3, [r3, #0]
 800a322:	b29a      	uxth	r2, r3
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	3303      	adds	r3, #3
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	021b      	lsls	r3, r3, #8
 800a32e:	b29b      	uxth	r3, r3
 800a330:	4413      	add	r3, r2
 800a332:	b29a      	uxth	r2, r3
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	3304      	adds	r3, #4
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	b29a      	uxth	r2, r3
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	3305      	adds	r3, #5
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	b29b      	uxth	r3, r3
 800a348:	021b      	lsls	r3, r3, #8
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	4413      	add	r3, r2
 800a34e:	b29a      	uxth	r2, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	3306      	adds	r3, #6
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	b29a      	uxth	r2, r3
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	3307      	adds	r3, #7
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	b29b      	uxth	r3, r3
 800a364:	021b      	lsls	r3, r3, #8
 800a366:	b29b      	uxth	r3, r3
 800a368:	4413      	add	r3, r2
 800a36a:	b29a      	uxth	r2, r3
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	80da      	strh	r2, [r3, #6]

}
 800a370:	bf00      	nop
 800a372:	370c      	adds	r7, #12
 800a374:	46bd      	mov	sp, r7
 800a376:	bc80      	pop	{r7}
 800a378:	4770      	bx	lr

0800a37a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a37a:	b580      	push	{r7, lr}
 800a37c:	b082      	sub	sp, #8
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
 800a382:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a384:	2180      	movs	r1, #128	; 0x80
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 fc74 	bl	800ac74 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a38c:	2100      	movs	r1, #0
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 fc70 	bl	800ac74 <USBD_LL_StallEP>
}
 800a394:	bf00      	nop
 800a396:	3708      	adds	r7, #8
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b086      	sub	sp, #24
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d032      	beq.n	800a418 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a3b2:	68f8      	ldr	r0, [r7, #12]
 800a3b4:	f000 f834 	bl	800a420 <USBD_GetLen>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	005b      	lsls	r3, r3, #1
 800a3c0:	b29a      	uxth	r2, r3
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a3c6:	7dfb      	ldrb	r3, [r7, #23]
 800a3c8:	1c5a      	adds	r2, r3, #1
 800a3ca:	75fa      	strb	r2, [r7, #23]
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	4413      	add	r3, r2
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	7812      	ldrb	r2, [r2, #0]
 800a3d6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a3d8:	7dfb      	ldrb	r3, [r7, #23]
 800a3da:	1c5a      	adds	r2, r3, #1
 800a3dc:	75fa      	strb	r2, [r7, #23]
 800a3de:	461a      	mov	r2, r3
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	4413      	add	r3, r2
 800a3e4:	2203      	movs	r2, #3
 800a3e6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a3e8:	e012      	b.n	800a410 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	1c5a      	adds	r2, r3, #1
 800a3ee:	60fa      	str	r2, [r7, #12]
 800a3f0:	7dfa      	ldrb	r2, [r7, #23]
 800a3f2:	1c51      	adds	r1, r2, #1
 800a3f4:	75f9      	strb	r1, [r7, #23]
 800a3f6:	4611      	mov	r1, r2
 800a3f8:	68ba      	ldr	r2, [r7, #8]
 800a3fa:	440a      	add	r2, r1
 800a3fc:	781b      	ldrb	r3, [r3, #0]
 800a3fe:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a400:	7dfb      	ldrb	r3, [r7, #23]
 800a402:	1c5a      	adds	r2, r3, #1
 800a404:	75fa      	strb	r2, [r7, #23]
 800a406:	461a      	mov	r2, r3
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	4413      	add	r3, r2
 800a40c:	2200      	movs	r2, #0
 800a40e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	781b      	ldrb	r3, [r3, #0]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d1e8      	bne.n	800a3ea <USBD_GetString+0x4e>
    }
  }
}
 800a418:	bf00      	nop
 800a41a:	3718      	adds	r7, #24
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a420:	b480      	push	{r7}
 800a422:	b085      	sub	sp, #20
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a428:	2300      	movs	r3, #0
 800a42a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a42c:	e005      	b.n	800a43a <USBD_GetLen+0x1a>
  {
    len++;
 800a42e:	7bfb      	ldrb	r3, [r7, #15]
 800a430:	3301      	adds	r3, #1
 800a432:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	3301      	adds	r3, #1
 800a438:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d1f5      	bne.n	800a42e <USBD_GetLen+0xe>
  }

  return len;
 800a442:	7bfb      	ldrb	r3, [r7, #15]
}
 800a444:	4618      	mov	r0, r3
 800a446:	3714      	adds	r7, #20
 800a448:	46bd      	mov	sp, r7
 800a44a:	bc80      	pop	{r7}
 800a44c:	4770      	bx	lr

0800a44e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a44e:	b580      	push	{r7, lr}
 800a450:	b084      	sub	sp, #16
 800a452:	af00      	add	r7, sp, #0
 800a454:	60f8      	str	r0, [r7, #12]
 800a456:	60b9      	str	r1, [r7, #8]
 800a458:	4613      	mov	r3, r2
 800a45a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2202      	movs	r2, #2
 800a460:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a464:	88fa      	ldrh	r2, [r7, #6]
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a46a:	88fa      	ldrh	r2, [r7, #6]
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a470:	88fb      	ldrh	r3, [r7, #6]
 800a472:	68ba      	ldr	r2, [r7, #8]
 800a474:	2100      	movs	r1, #0
 800a476:	68f8      	ldr	r0, [r7, #12]
 800a478:	f000 fc85 	bl	800ad86 <USBD_LL_Transmit>

  return USBD_OK;
 800a47c:	2300      	movs	r3, #0
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3710      	adds	r7, #16
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}

0800a486 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a486:	b580      	push	{r7, lr}
 800a488:	b084      	sub	sp, #16
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	60f8      	str	r0, [r7, #12]
 800a48e:	60b9      	str	r1, [r7, #8]
 800a490:	4613      	mov	r3, r2
 800a492:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a494:	88fb      	ldrh	r3, [r7, #6]
 800a496:	68ba      	ldr	r2, [r7, #8]
 800a498:	2100      	movs	r1, #0
 800a49a:	68f8      	ldr	r0, [r7, #12]
 800a49c:	f000 fc73 	bl	800ad86 <USBD_LL_Transmit>

  return USBD_OK;
 800a4a0:	2300      	movs	r3, #0
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3710      	adds	r7, #16
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b084      	sub	sp, #16
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	60f8      	str	r0, [r7, #12]
 800a4b2:	60b9      	str	r1, [r7, #8]
 800a4b4:	4613      	mov	r3, r2
 800a4b6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2203      	movs	r2, #3
 800a4bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a4c0:	88fa      	ldrh	r2, [r7, #6]
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a4c8:	88fa      	ldrh	r2, [r7, #6]
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4d0:	88fb      	ldrh	r3, [r7, #6]
 800a4d2:	68ba      	ldr	r2, [r7, #8]
 800a4d4:	2100      	movs	r1, #0
 800a4d6:	68f8      	ldr	r0, [r7, #12]
 800a4d8:	f000 fc78 	bl	800adcc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4dc:	2300      	movs	r3, #0
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3710      	adds	r7, #16
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	b084      	sub	sp, #16
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	60f8      	str	r0, [r7, #12]
 800a4ee:	60b9      	str	r1, [r7, #8]
 800a4f0:	4613      	mov	r3, r2
 800a4f2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4f4:	88fb      	ldrh	r3, [r7, #6]
 800a4f6:	68ba      	ldr	r2, [r7, #8]
 800a4f8:	2100      	movs	r1, #0
 800a4fa:	68f8      	ldr	r0, [r7, #12]
 800a4fc:	f000 fc66 	bl	800adcc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a500:	2300      	movs	r3, #0
}
 800a502:	4618      	mov	r0, r3
 800a504:	3710      	adds	r7, #16
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}

0800a50a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a50a:	b580      	push	{r7, lr}
 800a50c:	b082      	sub	sp, #8
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2204      	movs	r2, #4
 800a516:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a51a:	2300      	movs	r3, #0
 800a51c:	2200      	movs	r2, #0
 800a51e:	2100      	movs	r1, #0
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 fc30 	bl	800ad86 <USBD_LL_Transmit>

  return USBD_OK;
 800a526:	2300      	movs	r3, #0
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3708      	adds	r7, #8
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b082      	sub	sp, #8
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2205      	movs	r2, #5
 800a53c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a540:	2300      	movs	r3, #0
 800a542:	2200      	movs	r2, #0
 800a544:	2100      	movs	r1, #0
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 fc40 	bl	800adcc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a54c:	2300      	movs	r3, #0
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3708      	adds	r7, #8
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
	...

0800a558 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a55c:	2200      	movs	r2, #0
 800a55e:	4912      	ldr	r1, [pc, #72]	; (800a5a8 <MX_USB_DEVICE_Init+0x50>)
 800a560:	4812      	ldr	r0, [pc, #72]	; (800a5ac <MX_USB_DEVICE_Init+0x54>)
 800a562:	f7fe ff5e 	bl	8009422 <USBD_Init>
 800a566:	4603      	mov	r3, r0
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d001      	beq.n	800a570 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a56c:	f7f7 fae4 	bl	8001b38 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a570:	490f      	ldr	r1, [pc, #60]	; (800a5b0 <MX_USB_DEVICE_Init+0x58>)
 800a572:	480e      	ldr	r0, [pc, #56]	; (800a5ac <MX_USB_DEVICE_Init+0x54>)
 800a574:	f7fe ff80 	bl	8009478 <USBD_RegisterClass>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d001      	beq.n	800a582 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a57e:	f7f7 fadb 	bl	8001b38 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a582:	490c      	ldr	r1, [pc, #48]	; (800a5b4 <MX_USB_DEVICE_Init+0x5c>)
 800a584:	4809      	ldr	r0, [pc, #36]	; (800a5ac <MX_USB_DEVICE_Init+0x54>)
 800a586:	f7fe feb1 	bl	80092ec <USBD_CDC_RegisterInterface>
 800a58a:	4603      	mov	r3, r0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d001      	beq.n	800a594 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a590:	f7f7 fad2 	bl	8001b38 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a594:	4805      	ldr	r0, [pc, #20]	; (800a5ac <MX_USB_DEVICE_Init+0x54>)
 800a596:	f7fe ff88 	bl	80094aa <USBD_Start>
 800a59a:	4603      	mov	r3, r0
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d001      	beq.n	800a5a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a5a0:	f7f7 faca 	bl	8001b38 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a5a4:	bf00      	nop
 800a5a6:	bd80      	pop	{r7, pc}
 800a5a8:	20000130 	.word	0x20000130
 800a5ac:	20000444 	.word	0x20000444
 800a5b0:	2000001c 	.word	0x2000001c
 800a5b4:	20000120 	.word	0x20000120

0800a5b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a5bc:	2200      	movs	r2, #0
 800a5be:	4905      	ldr	r1, [pc, #20]	; (800a5d4 <CDC_Init_FS+0x1c>)
 800a5c0:	4805      	ldr	r0, [pc, #20]	; (800a5d8 <CDC_Init_FS+0x20>)
 800a5c2:	f7fe fea9 	bl	8009318 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a5c6:	4905      	ldr	r1, [pc, #20]	; (800a5dc <CDC_Init_FS+0x24>)
 800a5c8:	4803      	ldr	r0, [pc, #12]	; (800a5d8 <CDC_Init_FS+0x20>)
 800a5ca:	f7fe febe 	bl	800934a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a5ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	bd80      	pop	{r7, pc}
 800a5d4:	20000af0 	.word	0x20000af0
 800a5d8:	20000444 	.word	0x20000444
 800a5dc:	20000708 	.word	0x20000708

0800a5e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a5e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bc80      	pop	{r7}
 800a5ec:	4770      	bx	lr
	...

0800a5f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	6039      	str	r1, [r7, #0]
 800a5fa:	71fb      	strb	r3, [r7, #7]
 800a5fc:	4613      	mov	r3, r2
 800a5fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a600:	79fb      	ldrb	r3, [r7, #7]
 800a602:	2b23      	cmp	r3, #35	; 0x23
 800a604:	d84a      	bhi.n	800a69c <CDC_Control_FS+0xac>
 800a606:	a201      	add	r2, pc, #4	; (adr r2, 800a60c <CDC_Control_FS+0x1c>)
 800a608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a60c:	0800a69d 	.word	0x0800a69d
 800a610:	0800a69d 	.word	0x0800a69d
 800a614:	0800a69d 	.word	0x0800a69d
 800a618:	0800a69d 	.word	0x0800a69d
 800a61c:	0800a69d 	.word	0x0800a69d
 800a620:	0800a69d 	.word	0x0800a69d
 800a624:	0800a69d 	.word	0x0800a69d
 800a628:	0800a69d 	.word	0x0800a69d
 800a62c:	0800a69d 	.word	0x0800a69d
 800a630:	0800a69d 	.word	0x0800a69d
 800a634:	0800a69d 	.word	0x0800a69d
 800a638:	0800a69d 	.word	0x0800a69d
 800a63c:	0800a69d 	.word	0x0800a69d
 800a640:	0800a69d 	.word	0x0800a69d
 800a644:	0800a69d 	.word	0x0800a69d
 800a648:	0800a69d 	.word	0x0800a69d
 800a64c:	0800a69d 	.word	0x0800a69d
 800a650:	0800a69d 	.word	0x0800a69d
 800a654:	0800a69d 	.word	0x0800a69d
 800a658:	0800a69d 	.word	0x0800a69d
 800a65c:	0800a69d 	.word	0x0800a69d
 800a660:	0800a69d 	.word	0x0800a69d
 800a664:	0800a69d 	.word	0x0800a69d
 800a668:	0800a69d 	.word	0x0800a69d
 800a66c:	0800a69d 	.word	0x0800a69d
 800a670:	0800a69d 	.word	0x0800a69d
 800a674:	0800a69d 	.word	0x0800a69d
 800a678:	0800a69d 	.word	0x0800a69d
 800a67c:	0800a69d 	.word	0x0800a69d
 800a680:	0800a69d 	.word	0x0800a69d
 800a684:	0800a69d 	.word	0x0800a69d
 800a688:	0800a69d 	.word	0x0800a69d
 800a68c:	0800a69d 	.word	0x0800a69d
 800a690:	0800a69d 	.word	0x0800a69d
 800a694:	0800a69d 	.word	0x0800a69d
 800a698:	0800a69d 	.word	0x0800a69d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a69c:	bf00      	nop
  }

  return (USBD_OK);
 800a69e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	370c      	adds	r7, #12
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bc80      	pop	{r7}
 800a6a8:	4770      	bx	lr
 800a6aa:	bf00      	nop

0800a6ac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	uint8_t contador = 0;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	73fb      	strb	r3, [r7, #15]
	if(USB_FLAG == 0)
 800a6ba:	4b13      	ldr	r3, [pc, #76]	; (800a708 <CDC_Receive_FS+0x5c>)
 800a6bc:	781b      	ldrb	r3, [r3, #0]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d11d      	bne.n	800a6fe <CDC_Receive_FS+0x52>
	{
	memset (buffer,'\0', 70);
 800a6c2:	2246      	movs	r2, #70	; 0x46
 800a6c4:	2100      	movs	r1, #0
 800a6c6:	4811      	ldr	r0, [pc, #68]	; (800a70c <CDC_Receive_FS+0x60>)
 800a6c8:	f000 fc34 	bl	800af34 <memset>
	 USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a6cc:	6879      	ldr	r1, [r7, #4]
 800a6ce:	4810      	ldr	r0, [pc, #64]	; (800a710 <CDC_Receive_FS+0x64>)
 800a6d0:	f7fe fe3b 	bl	800934a <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a6d4:	480e      	ldr	r0, [pc, #56]	; (800a710 <CDC_Receive_FS+0x64>)
 800a6d6:	f7fe fe7a 	bl	80093ce <USBD_CDC_ReceivePacket>
	  uint8_t len = (uint8_t) *Len;
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	73bb      	strb	r3, [r7, #14]
	  memcpy (buffer,Buf,len);
 800a6e0:	7bbb      	ldrb	r3, [r7, #14]
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	6879      	ldr	r1, [r7, #4]
 800a6e6:	4809      	ldr	r0, [pc, #36]	; (800a70c <CDC_Receive_FS+0x60>)
 800a6e8:	f000 fc16 	bl	800af18 <memcpy>
	  memset (Buf,'\0',len);
 800a6ec:	7bbb      	ldrb	r3, [r7, #14]
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 fc1e 	bl	800af34 <memset>
	/*  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);*/
	  USB_FLAG = 1;
 800a6f8:	4b03      	ldr	r3, [pc, #12]	; (800a708 <CDC_Receive_FS+0x5c>)
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	701a      	strb	r2, [r3, #0]
	}
	return (USBD_OK);
 800a6fe:	2300      	movs	r3, #0


  /* USER CODE END 6 */
}
 800a700:	4618      	mov	r0, r3
 800a702:	3710      	adds	r7, #16
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}
 800a708:	200002b6 	.word	0x200002b6
 800a70c:	20000270 	.word	0x20000270
 800a710:	20000444 	.word	0x20000444

0800a714 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b084      	sub	sp, #16
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	460b      	mov	r3, r1
 800a71e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a720:	2300      	movs	r3, #0
 800a722:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a724:	4b0d      	ldr	r3, [pc, #52]	; (800a75c <CDC_Transmit_FS+0x48>)
 800a726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a72a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a732:	2b00      	cmp	r3, #0
 800a734:	d001      	beq.n	800a73a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a736:	2301      	movs	r3, #1
 800a738:	e00b      	b.n	800a752 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a73a:	887b      	ldrh	r3, [r7, #2]
 800a73c:	461a      	mov	r2, r3
 800a73e:	6879      	ldr	r1, [r7, #4]
 800a740:	4806      	ldr	r0, [pc, #24]	; (800a75c <CDC_Transmit_FS+0x48>)
 800a742:	f7fe fde9 	bl	8009318 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a746:	4805      	ldr	r0, [pc, #20]	; (800a75c <CDC_Transmit_FS+0x48>)
 800a748:	f7fe fe12 	bl	8009370 <USBD_CDC_TransmitPacket>
 800a74c:	4603      	mov	r3, r0
 800a74e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a750:	7bfb      	ldrb	r3, [r7, #15]
}
 800a752:	4618      	mov	r0, r3
 800a754:	3710      	adds	r7, #16
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	20000444 	.word	0x20000444

0800a760 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a760:	b480      	push	{r7}
 800a762:	b083      	sub	sp, #12
 800a764:	af00      	add	r7, sp, #0
 800a766:	4603      	mov	r3, r0
 800a768:	6039      	str	r1, [r7, #0]
 800a76a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	2212      	movs	r2, #18
 800a770:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a772:	4b03      	ldr	r3, [pc, #12]	; (800a780 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a774:	4618      	mov	r0, r3
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	bc80      	pop	{r7}
 800a77c:	4770      	bx	lr
 800a77e:	bf00      	nop
 800a780:	2000014c 	.word	0x2000014c

0800a784 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a784:	b480      	push	{r7}
 800a786:	b083      	sub	sp, #12
 800a788:	af00      	add	r7, sp, #0
 800a78a:	4603      	mov	r3, r0
 800a78c:	6039      	str	r1, [r7, #0]
 800a78e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	2204      	movs	r2, #4
 800a794:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a796:	4b03      	ldr	r3, [pc, #12]	; (800a7a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a798:	4618      	mov	r0, r3
 800a79a:	370c      	adds	r7, #12
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bc80      	pop	{r7}
 800a7a0:	4770      	bx	lr
 800a7a2:	bf00      	nop
 800a7a4:	20000160 	.word	0x20000160

0800a7a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	6039      	str	r1, [r7, #0]
 800a7b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a7b4:	79fb      	ldrb	r3, [r7, #7]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d105      	bne.n	800a7c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a7ba:	683a      	ldr	r2, [r7, #0]
 800a7bc:	4907      	ldr	r1, [pc, #28]	; (800a7dc <USBD_FS_ProductStrDescriptor+0x34>)
 800a7be:	4808      	ldr	r0, [pc, #32]	; (800a7e0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a7c0:	f7ff fdec 	bl	800a39c <USBD_GetString>
 800a7c4:	e004      	b.n	800a7d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a7c6:	683a      	ldr	r2, [r7, #0]
 800a7c8:	4904      	ldr	r1, [pc, #16]	; (800a7dc <USBD_FS_ProductStrDescriptor+0x34>)
 800a7ca:	4805      	ldr	r0, [pc, #20]	; (800a7e0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a7cc:	f7ff fde6 	bl	800a39c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7d0:	4b02      	ldr	r3, [pc, #8]	; (800a7dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3708      	adds	r7, #8
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	20000ed8 	.word	0x20000ed8
 800a7e0:	0800af6c 	.word	0x0800af6c

0800a7e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	6039      	str	r1, [r7, #0]
 800a7ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a7f0:	683a      	ldr	r2, [r7, #0]
 800a7f2:	4904      	ldr	r1, [pc, #16]	; (800a804 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a7f4:	4804      	ldr	r0, [pc, #16]	; (800a808 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a7f6:	f7ff fdd1 	bl	800a39c <USBD_GetString>
  return USBD_StrDesc;
 800a7fa:	4b02      	ldr	r3, [pc, #8]	; (800a804 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3708      	adds	r7, #8
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}
 800a804:	20000ed8 	.word	0x20000ed8
 800a808:	0800af84 	.word	0x0800af84

0800a80c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
 800a812:	4603      	mov	r3, r0
 800a814:	6039      	str	r1, [r7, #0]
 800a816:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	221a      	movs	r2, #26
 800a81c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a81e:	f000 f843 	bl	800a8a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a822:	4b02      	ldr	r3, [pc, #8]	; (800a82c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a824:	4618      	mov	r0, r3
 800a826:	3708      	adds	r7, #8
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}
 800a82c:	20000164 	.word	0x20000164

0800a830 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
 800a836:	4603      	mov	r3, r0
 800a838:	6039      	str	r1, [r7, #0]
 800a83a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a83c:	79fb      	ldrb	r3, [r7, #7]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d105      	bne.n	800a84e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a842:	683a      	ldr	r2, [r7, #0]
 800a844:	4907      	ldr	r1, [pc, #28]	; (800a864 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a846:	4808      	ldr	r0, [pc, #32]	; (800a868 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a848:	f7ff fda8 	bl	800a39c <USBD_GetString>
 800a84c:	e004      	b.n	800a858 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a84e:	683a      	ldr	r2, [r7, #0]
 800a850:	4904      	ldr	r1, [pc, #16]	; (800a864 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a852:	4805      	ldr	r0, [pc, #20]	; (800a868 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a854:	f7ff fda2 	bl	800a39c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a858:	4b02      	ldr	r3, [pc, #8]	; (800a864 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3708      	adds	r7, #8
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	20000ed8 	.word	0x20000ed8
 800a868:	0800af98 	.word	0x0800af98

0800a86c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b082      	sub	sp, #8
 800a870:	af00      	add	r7, sp, #0
 800a872:	4603      	mov	r3, r0
 800a874:	6039      	str	r1, [r7, #0]
 800a876:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a878:	79fb      	ldrb	r3, [r7, #7]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d105      	bne.n	800a88a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a87e:	683a      	ldr	r2, [r7, #0]
 800a880:	4907      	ldr	r1, [pc, #28]	; (800a8a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a882:	4808      	ldr	r0, [pc, #32]	; (800a8a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a884:	f7ff fd8a 	bl	800a39c <USBD_GetString>
 800a888:	e004      	b.n	800a894 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a88a:	683a      	ldr	r2, [r7, #0]
 800a88c:	4904      	ldr	r1, [pc, #16]	; (800a8a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a88e:	4805      	ldr	r0, [pc, #20]	; (800a8a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a890:	f7ff fd84 	bl	800a39c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a894:	4b02      	ldr	r3, [pc, #8]	; (800a8a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a896:	4618      	mov	r0, r3
 800a898:	3708      	adds	r7, #8
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
 800a89e:	bf00      	nop
 800a8a0:	20000ed8 	.word	0x20000ed8
 800a8a4:	0800afa4 	.word	0x0800afa4

0800a8a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a8ae:	4b0f      	ldr	r3, [pc, #60]	; (800a8ec <Get_SerialNum+0x44>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a8b4:	4b0e      	ldr	r3, [pc, #56]	; (800a8f0 <Get_SerialNum+0x48>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a8ba:	4b0e      	ldr	r3, [pc, #56]	; (800a8f4 <Get_SerialNum+0x4c>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a8c0:	68fa      	ldr	r2, [r7, #12]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	4413      	add	r3, r2
 800a8c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d009      	beq.n	800a8e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a8ce:	2208      	movs	r2, #8
 800a8d0:	4909      	ldr	r1, [pc, #36]	; (800a8f8 <Get_SerialNum+0x50>)
 800a8d2:	68f8      	ldr	r0, [r7, #12]
 800a8d4:	f000 f814 	bl	800a900 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a8d8:	2204      	movs	r2, #4
 800a8da:	4908      	ldr	r1, [pc, #32]	; (800a8fc <Get_SerialNum+0x54>)
 800a8dc:	68b8      	ldr	r0, [r7, #8]
 800a8de:	f000 f80f 	bl	800a900 <IntToUnicode>
  }
}
 800a8e2:	bf00      	nop
 800a8e4:	3710      	adds	r7, #16
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	1ffff7e8 	.word	0x1ffff7e8
 800a8f0:	1ffff7ec 	.word	0x1ffff7ec
 800a8f4:	1ffff7f0 	.word	0x1ffff7f0
 800a8f8:	20000166 	.word	0x20000166
 800a8fc:	20000176 	.word	0x20000176

0800a900 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a900:	b480      	push	{r7}
 800a902:	b087      	sub	sp, #28
 800a904:	af00      	add	r7, sp, #0
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	60b9      	str	r1, [r7, #8]
 800a90a:	4613      	mov	r3, r2
 800a90c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a90e:	2300      	movs	r3, #0
 800a910:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a912:	2300      	movs	r3, #0
 800a914:	75fb      	strb	r3, [r7, #23]
 800a916:	e027      	b.n	800a968 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	0f1b      	lsrs	r3, r3, #28
 800a91c:	2b09      	cmp	r3, #9
 800a91e:	d80b      	bhi.n	800a938 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	0f1b      	lsrs	r3, r3, #28
 800a924:	b2da      	uxtb	r2, r3
 800a926:	7dfb      	ldrb	r3, [r7, #23]
 800a928:	005b      	lsls	r3, r3, #1
 800a92a:	4619      	mov	r1, r3
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	440b      	add	r3, r1
 800a930:	3230      	adds	r2, #48	; 0x30
 800a932:	b2d2      	uxtb	r2, r2
 800a934:	701a      	strb	r2, [r3, #0]
 800a936:	e00a      	b.n	800a94e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	0f1b      	lsrs	r3, r3, #28
 800a93c:	b2da      	uxtb	r2, r3
 800a93e:	7dfb      	ldrb	r3, [r7, #23]
 800a940:	005b      	lsls	r3, r3, #1
 800a942:	4619      	mov	r1, r3
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	440b      	add	r3, r1
 800a948:	3237      	adds	r2, #55	; 0x37
 800a94a:	b2d2      	uxtb	r2, r2
 800a94c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	011b      	lsls	r3, r3, #4
 800a952:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a954:	7dfb      	ldrb	r3, [r7, #23]
 800a956:	005b      	lsls	r3, r3, #1
 800a958:	3301      	adds	r3, #1
 800a95a:	68ba      	ldr	r2, [r7, #8]
 800a95c:	4413      	add	r3, r2
 800a95e:	2200      	movs	r2, #0
 800a960:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a962:	7dfb      	ldrb	r3, [r7, #23]
 800a964:	3301      	adds	r3, #1
 800a966:	75fb      	strb	r3, [r7, #23]
 800a968:	7dfa      	ldrb	r2, [r7, #23]
 800a96a:	79fb      	ldrb	r3, [r7, #7]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d3d3      	bcc.n	800a918 <IntToUnicode+0x18>
  }
}
 800a970:	bf00      	nop
 800a972:	bf00      	nop
 800a974:	371c      	adds	r7, #28
 800a976:	46bd      	mov	sp, r7
 800a978:	bc80      	pop	{r7}
 800a97a:	4770      	bx	lr

0800a97c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a0d      	ldr	r2, [pc, #52]	; (800a9c0 <HAL_PCD_MspInit+0x44>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d113      	bne.n	800a9b6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a98e:	4b0d      	ldr	r3, [pc, #52]	; (800a9c4 <HAL_PCD_MspInit+0x48>)
 800a990:	69db      	ldr	r3, [r3, #28]
 800a992:	4a0c      	ldr	r2, [pc, #48]	; (800a9c4 <HAL_PCD_MspInit+0x48>)
 800a994:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a998:	61d3      	str	r3, [r2, #28]
 800a99a:	4b0a      	ldr	r3, [pc, #40]	; (800a9c4 <HAL_PCD_MspInit+0x48>)
 800a99c:	69db      	ldr	r3, [r3, #28]
 800a99e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a9a2:	60fb      	str	r3, [r7, #12]
 800a9a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	2100      	movs	r1, #0
 800a9aa:	2014      	movs	r0, #20
 800a9ac:	f7f7 fb87 	bl	80020be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a9b0:	2014      	movs	r0, #20
 800a9b2:	f7f7 fba0 	bl	80020f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a9b6:	bf00      	nop
 800a9b8:	3710      	adds	r7, #16
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	40005c00 	.word	0x40005c00
 800a9c4:	40021000 	.word	0x40021000

0800a9c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a9dc:	4619      	mov	r1, r3
 800a9de:	4610      	mov	r0, r2
 800a9e0:	f7fe fdab 	bl	800953a <USBD_LL_SetupStage>
}
 800a9e4:	bf00      	nop
 800a9e6:	3708      	adds	r7, #8
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b082      	sub	sp, #8
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a9fe:	78fa      	ldrb	r2, [r7, #3]
 800aa00:	6879      	ldr	r1, [r7, #4]
 800aa02:	4613      	mov	r3, r2
 800aa04:	009b      	lsls	r3, r3, #2
 800aa06:	4413      	add	r3, r2
 800aa08:	00db      	lsls	r3, r3, #3
 800aa0a:	440b      	add	r3, r1
 800aa0c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800aa10:	681a      	ldr	r2, [r3, #0]
 800aa12:	78fb      	ldrb	r3, [r7, #3]
 800aa14:	4619      	mov	r1, r3
 800aa16:	f7fe fddd 	bl	80095d4 <USBD_LL_DataOutStage>
}
 800aa1a:	bf00      	nop
 800aa1c:	3708      	adds	r7, #8
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}

0800aa22 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa22:	b580      	push	{r7, lr}
 800aa24:	b082      	sub	sp, #8
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800aa34:	78fa      	ldrb	r2, [r7, #3]
 800aa36:	6879      	ldr	r1, [r7, #4]
 800aa38:	4613      	mov	r3, r2
 800aa3a:	009b      	lsls	r3, r3, #2
 800aa3c:	4413      	add	r3, r2
 800aa3e:	00db      	lsls	r3, r3, #3
 800aa40:	440b      	add	r3, r1
 800aa42:	333c      	adds	r3, #60	; 0x3c
 800aa44:	681a      	ldr	r2, [r3, #0]
 800aa46:	78fb      	ldrb	r3, [r7, #3]
 800aa48:	4619      	mov	r1, r3
 800aa4a:	f7fe fe34 	bl	80096b6 <USBD_LL_DataInStage>
}
 800aa4e:	bf00      	nop
 800aa50:	3708      	adds	r7, #8
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}

0800aa56 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa56:	b580      	push	{r7, lr}
 800aa58:	b082      	sub	sp, #8
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aa64:	4618      	mov	r0, r3
 800aa66:	f7fe ff44 	bl	80098f2 <USBD_LL_SOF>
}
 800aa6a:	bf00      	nop
 800aa6c:	3708      	adds	r7, #8
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}

0800aa72 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa72:	b580      	push	{r7, lr}
 800aa74:	b084      	sub	sp, #16
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	689b      	ldr	r3, [r3, #8]
 800aa82:	2b02      	cmp	r3, #2
 800aa84:	d001      	beq.n	800aa8a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aa86:	f7f7 f857 	bl	8001b38 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aa90:	7bfa      	ldrb	r2, [r7, #15]
 800aa92:	4611      	mov	r1, r2
 800aa94:	4618      	mov	r0, r3
 800aa96:	f7fe fef4 	bl	8009882 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f7fe fead 	bl	8009800 <USBD_LL_Reset>
}
 800aaa6:	bf00      	nop
 800aaa8:	3710      	adds	r7, #16
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
	...

0800aab0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aabe:	4618      	mov	r0, r3
 800aac0:	f7fe feee 	bl	80098a0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	699b      	ldr	r3, [r3, #24]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d005      	beq.n	800aad8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aacc:	4b04      	ldr	r3, [pc, #16]	; (800aae0 <HAL_PCD_SuspendCallback+0x30>)
 800aace:	691b      	ldr	r3, [r3, #16]
 800aad0:	4a03      	ldr	r2, [pc, #12]	; (800aae0 <HAL_PCD_SuspendCallback+0x30>)
 800aad2:	f043 0306 	orr.w	r3, r3, #6
 800aad6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aad8:	bf00      	nop
 800aada:	3708      	adds	r7, #8
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}
 800aae0:	e000ed00 	.word	0xe000ed00

0800aae4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7fe fee8 	bl	80098c8 <USBD_LL_Resume>
}
 800aaf8:	bf00      	nop
 800aafa:	3708      	adds	r7, #8
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b082      	sub	sp, #8
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ab08:	4a28      	ldr	r2, [pc, #160]	; (800abac <USBD_LL_Init+0xac>)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	4a26      	ldr	r2, [pc, #152]	; (800abac <USBD_LL_Init+0xac>)
 800ab14:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ab18:	4b24      	ldr	r3, [pc, #144]	; (800abac <USBD_LL_Init+0xac>)
 800ab1a:	4a25      	ldr	r2, [pc, #148]	; (800abb0 <USBD_LL_Init+0xb0>)
 800ab1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ab1e:	4b23      	ldr	r3, [pc, #140]	; (800abac <USBD_LL_Init+0xac>)
 800ab20:	2208      	movs	r2, #8
 800ab22:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ab24:	4b21      	ldr	r3, [pc, #132]	; (800abac <USBD_LL_Init+0xac>)
 800ab26:	2202      	movs	r2, #2
 800ab28:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ab2a:	4b20      	ldr	r3, [pc, #128]	; (800abac <USBD_LL_Init+0xac>)
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ab30:	4b1e      	ldr	r3, [pc, #120]	; (800abac <USBD_LL_Init+0xac>)
 800ab32:	2200      	movs	r2, #0
 800ab34:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ab36:	4b1d      	ldr	r3, [pc, #116]	; (800abac <USBD_LL_Init+0xac>)
 800ab38:	2200      	movs	r2, #0
 800ab3a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ab3c:	481b      	ldr	r0, [pc, #108]	; (800abac <USBD_LL_Init+0xac>)
 800ab3e:	f7f7 ff9f 	bl	8002a80 <HAL_PCD_Init>
 800ab42:	4603      	mov	r3, r0
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d001      	beq.n	800ab4c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ab48:	f7f6 fff6 	bl	8001b38 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab52:	2318      	movs	r3, #24
 800ab54:	2200      	movs	r2, #0
 800ab56:	2100      	movs	r1, #0
 800ab58:	f7f9 fc13 	bl	8004382 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab62:	2358      	movs	r3, #88	; 0x58
 800ab64:	2200      	movs	r2, #0
 800ab66:	2180      	movs	r1, #128	; 0x80
 800ab68:	f7f9 fc0b 	bl	8004382 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab72:	23c0      	movs	r3, #192	; 0xc0
 800ab74:	2200      	movs	r2, #0
 800ab76:	2181      	movs	r1, #129	; 0x81
 800ab78:	f7f9 fc03 	bl	8004382 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab82:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ab86:	2200      	movs	r2, #0
 800ab88:	2101      	movs	r1, #1
 800ab8a:	f7f9 fbfa 	bl	8004382 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab94:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab98:	2200      	movs	r2, #0
 800ab9a:	2182      	movs	r1, #130	; 0x82
 800ab9c:	f7f9 fbf1 	bl	8004382 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800aba0:	2300      	movs	r3, #0
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3708      	adds	r7, #8
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
 800abaa:	bf00      	nop
 800abac:	200010d8 	.word	0x200010d8
 800abb0:	40005c00 	.word	0x40005c00

0800abb4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b084      	sub	sp, #16
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abbc:	2300      	movs	r3, #0
 800abbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abc0:	2300      	movs	r3, #0
 800abc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abca:	4618      	mov	r0, r3
 800abcc:	f7f8 f863 	bl	8002c96 <HAL_PCD_Start>
 800abd0:	4603      	mov	r3, r0
 800abd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abd4:	7bfb      	ldrb	r3, [r7, #15]
 800abd6:	4618      	mov	r0, r3
 800abd8:	f000 f94e 	bl	800ae78 <USBD_Get_USB_Status>
 800abdc:	4603      	mov	r3, r0
 800abde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abe0:	7bbb      	ldrb	r3, [r7, #14]
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3710      	adds	r7, #16
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}

0800abea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800abea:	b580      	push	{r7, lr}
 800abec:	b084      	sub	sp, #16
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
 800abf2:	4608      	mov	r0, r1
 800abf4:	4611      	mov	r1, r2
 800abf6:	461a      	mov	r2, r3
 800abf8:	4603      	mov	r3, r0
 800abfa:	70fb      	strb	r3, [r7, #3]
 800abfc:	460b      	mov	r3, r1
 800abfe:	70bb      	strb	r3, [r7, #2]
 800ac00:	4613      	mov	r3, r2
 800ac02:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac04:	2300      	movs	r3, #0
 800ac06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac12:	78bb      	ldrb	r3, [r7, #2]
 800ac14:	883a      	ldrh	r2, [r7, #0]
 800ac16:	78f9      	ldrb	r1, [r7, #3]
 800ac18:	f7f8 f9db 	bl	8002fd2 <HAL_PCD_EP_Open>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac20:	7bfb      	ldrb	r3, [r7, #15]
 800ac22:	4618      	mov	r0, r3
 800ac24:	f000 f928 	bl	800ae78 <USBD_Get_USB_Status>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3710      	adds	r7, #16
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}

0800ac36 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac36:	b580      	push	{r7, lr}
 800ac38:	b084      	sub	sp, #16
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
 800ac3e:	460b      	mov	r3, r1
 800ac40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac42:	2300      	movs	r3, #0
 800ac44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac46:	2300      	movs	r3, #0
 800ac48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac50:	78fa      	ldrb	r2, [r7, #3]
 800ac52:	4611      	mov	r1, r2
 800ac54:	4618      	mov	r0, r3
 800ac56:	f7f8 fa22 	bl	800309e <HAL_PCD_EP_Close>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac5e:	7bfb      	ldrb	r3, [r7, #15]
 800ac60:	4618      	mov	r0, r3
 800ac62:	f000 f909 	bl	800ae78 <USBD_Get_USB_Status>
 800ac66:	4603      	mov	r3, r0
 800ac68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac6a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3710      	adds	r7, #16
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac80:	2300      	movs	r3, #0
 800ac82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac84:	2300      	movs	r3, #0
 800ac86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac8e:	78fa      	ldrb	r2, [r7, #3]
 800ac90:	4611      	mov	r1, r2
 800ac92:	4618      	mov	r0, r3
 800ac94:	f7f8 fae2 	bl	800325c <HAL_PCD_EP_SetStall>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac9c:	7bfb      	ldrb	r3, [r7, #15]
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f000 f8ea 	bl	800ae78 <USBD_Get_USB_Status>
 800aca4:	4603      	mov	r3, r0
 800aca6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aca8:	7bbb      	ldrb	r3, [r7, #14]
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3710      	adds	r7, #16
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}

0800acb2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b084      	sub	sp, #16
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
 800acba:	460b      	mov	r3, r1
 800acbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acbe:	2300      	movs	r3, #0
 800acc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acc2:	2300      	movs	r3, #0
 800acc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800accc:	78fa      	ldrb	r2, [r7, #3]
 800acce:	4611      	mov	r1, r2
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7f8 fb23 	bl	800331c <HAL_PCD_EP_ClrStall>
 800acd6:	4603      	mov	r3, r0
 800acd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acda:	7bfb      	ldrb	r3, [r7, #15]
 800acdc:	4618      	mov	r0, r3
 800acde:	f000 f8cb 	bl	800ae78 <USBD_Get_USB_Status>
 800ace2:	4603      	mov	r3, r0
 800ace4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ace6:	7bbb      	ldrb	r3, [r7, #14]
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3710      	adds	r7, #16
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b085      	sub	sp, #20
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	460b      	mov	r3, r1
 800acfa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad02:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ad04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	da0c      	bge.n	800ad26 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ad0c:	78fb      	ldrb	r3, [r7, #3]
 800ad0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad12:	68f9      	ldr	r1, [r7, #12]
 800ad14:	1c5a      	adds	r2, r3, #1
 800ad16:	4613      	mov	r3, r2
 800ad18:	009b      	lsls	r3, r3, #2
 800ad1a:	4413      	add	r3, r2
 800ad1c:	00db      	lsls	r3, r3, #3
 800ad1e:	440b      	add	r3, r1
 800ad20:	3302      	adds	r3, #2
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	e00b      	b.n	800ad3e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ad26:	78fb      	ldrb	r3, [r7, #3]
 800ad28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad2c:	68f9      	ldr	r1, [r7, #12]
 800ad2e:	4613      	mov	r3, r2
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	4413      	add	r3, r2
 800ad34:	00db      	lsls	r3, r3, #3
 800ad36:	440b      	add	r3, r1
 800ad38:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ad3c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3714      	adds	r7, #20
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bc80      	pop	{r7}
 800ad46:	4770      	bx	lr

0800ad48 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b084      	sub	sp, #16
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	460b      	mov	r3, r1
 800ad52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad54:	2300      	movs	r3, #0
 800ad56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad62:	78fa      	ldrb	r2, [r7, #3]
 800ad64:	4611      	mov	r1, r2
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7f8 f90e 	bl	8002f88 <HAL_PCD_SetAddress>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad70:	7bfb      	ldrb	r3, [r7, #15]
 800ad72:	4618      	mov	r0, r3
 800ad74:	f000 f880 	bl	800ae78 <USBD_Get_USB_Status>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b086      	sub	sp, #24
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	60f8      	str	r0, [r7, #12]
 800ad8e:	607a      	str	r2, [r7, #4]
 800ad90:	461a      	mov	r2, r3
 800ad92:	460b      	mov	r3, r1
 800ad94:	72fb      	strb	r3, [r7, #11]
 800ad96:	4613      	mov	r3, r2
 800ad98:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ada8:	893b      	ldrh	r3, [r7, #8]
 800adaa:	7af9      	ldrb	r1, [r7, #11]
 800adac:	687a      	ldr	r2, [r7, #4]
 800adae:	f7f8 fa12 	bl	80031d6 <HAL_PCD_EP_Transmit>
 800adb2:	4603      	mov	r3, r0
 800adb4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adb6:	7dfb      	ldrb	r3, [r7, #23]
 800adb8:	4618      	mov	r0, r3
 800adba:	f000 f85d 	bl	800ae78 <USBD_Get_USB_Status>
 800adbe:	4603      	mov	r3, r0
 800adc0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800adc2:	7dbb      	ldrb	r3, [r7, #22]
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3718      	adds	r7, #24
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b086      	sub	sp, #24
 800add0:	af00      	add	r7, sp, #0
 800add2:	60f8      	str	r0, [r7, #12]
 800add4:	607a      	str	r2, [r7, #4]
 800add6:	461a      	mov	r2, r3
 800add8:	460b      	mov	r3, r1
 800adda:	72fb      	strb	r3, [r7, #11]
 800addc:	4613      	mov	r3, r2
 800adde:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ade0:	2300      	movs	r3, #0
 800ade2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ade4:	2300      	movs	r3, #0
 800ade6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800adee:	893b      	ldrh	r3, [r7, #8]
 800adf0:	7af9      	ldrb	r1, [r7, #11]
 800adf2:	687a      	ldr	r2, [r7, #4]
 800adf4:	f7f8 f99b 	bl	800312e <HAL_PCD_EP_Receive>
 800adf8:	4603      	mov	r3, r0
 800adfa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adfc:	7dfb      	ldrb	r3, [r7, #23]
 800adfe:	4618      	mov	r0, r3
 800ae00:	f000 f83a 	bl	800ae78 <USBD_Get_USB_Status>
 800ae04:	4603      	mov	r3, r0
 800ae06:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae08:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3718      	adds	r7, #24
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}

0800ae12 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b082      	sub	sp, #8
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	6078      	str	r0, [r7, #4]
 800ae1a:	460b      	mov	r3, r1
 800ae1c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae24:	78fa      	ldrb	r2, [r7, #3]
 800ae26:	4611      	mov	r1, r2
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f7f8 f9bd 	bl	80031a8 <HAL_PCD_EP_GetRxCount>
 800ae2e:	4603      	mov	r3, r0
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3708      	adds	r7, #8
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}

0800ae38 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b083      	sub	sp, #12
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ae40:	4b02      	ldr	r3, [pc, #8]	; (800ae4c <USBD_static_malloc+0x14>)
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	370c      	adds	r7, #12
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bc80      	pop	{r7}
 800ae4a:	4770      	bx	lr
 800ae4c:	200013c4 	.word	0x200013c4

0800ae50 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b083      	sub	sp, #12
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]

}
 800ae58:	bf00      	nop
 800ae5a:	370c      	adds	r7, #12
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bc80      	pop	{r7}
 800ae60:	4770      	bx	lr

0800ae62 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae62:	b480      	push	{r7}
 800ae64:	b083      	sub	sp, #12
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
 800ae6a:	460b      	mov	r3, r1
 800ae6c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ae6e:	bf00      	nop
 800ae70:	370c      	adds	r7, #12
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bc80      	pop	{r7}
 800ae76:	4770      	bx	lr

0800ae78 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b085      	sub	sp, #20
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	4603      	mov	r3, r0
 800ae80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae82:	2300      	movs	r3, #0
 800ae84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ae86:	79fb      	ldrb	r3, [r7, #7]
 800ae88:	2b03      	cmp	r3, #3
 800ae8a:	d817      	bhi.n	800aebc <USBD_Get_USB_Status+0x44>
 800ae8c:	a201      	add	r2, pc, #4	; (adr r2, 800ae94 <USBD_Get_USB_Status+0x1c>)
 800ae8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae92:	bf00      	nop
 800ae94:	0800aea5 	.word	0x0800aea5
 800ae98:	0800aeab 	.word	0x0800aeab
 800ae9c:	0800aeb1 	.word	0x0800aeb1
 800aea0:	0800aeb7 	.word	0x0800aeb7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aea4:	2300      	movs	r3, #0
 800aea6:	73fb      	strb	r3, [r7, #15]
    break;
 800aea8:	e00b      	b.n	800aec2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aeaa:	2302      	movs	r3, #2
 800aeac:	73fb      	strb	r3, [r7, #15]
    break;
 800aeae:	e008      	b.n	800aec2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	73fb      	strb	r3, [r7, #15]
    break;
 800aeb4:	e005      	b.n	800aec2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aeb6:	2302      	movs	r3, #2
 800aeb8:	73fb      	strb	r3, [r7, #15]
    break;
 800aeba:	e002      	b.n	800aec2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aebc:	2302      	movs	r3, #2
 800aebe:	73fb      	strb	r3, [r7, #15]
    break;
 800aec0:	bf00      	nop
  }
  return usb_status;
 800aec2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3714      	adds	r7, #20
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bc80      	pop	{r7}
 800aecc:	4770      	bx	lr
 800aece:	bf00      	nop

0800aed0 <__libc_init_array>:
 800aed0:	b570      	push	{r4, r5, r6, lr}
 800aed2:	2600      	movs	r6, #0
 800aed4:	4d0c      	ldr	r5, [pc, #48]	; (800af08 <__libc_init_array+0x38>)
 800aed6:	4c0d      	ldr	r4, [pc, #52]	; (800af0c <__libc_init_array+0x3c>)
 800aed8:	1b64      	subs	r4, r4, r5
 800aeda:	10a4      	asrs	r4, r4, #2
 800aedc:	42a6      	cmp	r6, r4
 800aede:	d109      	bne.n	800aef4 <__libc_init_array+0x24>
 800aee0:	f000 f830 	bl	800af44 <_init>
 800aee4:	2600      	movs	r6, #0
 800aee6:	4d0a      	ldr	r5, [pc, #40]	; (800af10 <__libc_init_array+0x40>)
 800aee8:	4c0a      	ldr	r4, [pc, #40]	; (800af14 <__libc_init_array+0x44>)
 800aeea:	1b64      	subs	r4, r4, r5
 800aeec:	10a4      	asrs	r4, r4, #2
 800aeee:	42a6      	cmp	r6, r4
 800aef0:	d105      	bne.n	800aefe <__libc_init_array+0x2e>
 800aef2:	bd70      	pop	{r4, r5, r6, pc}
 800aef4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aef8:	4798      	blx	r3
 800aefa:	3601      	adds	r6, #1
 800aefc:	e7ee      	b.n	800aedc <__libc_init_array+0xc>
 800aefe:	f855 3b04 	ldr.w	r3, [r5], #4
 800af02:	4798      	blx	r3
 800af04:	3601      	adds	r6, #1
 800af06:	e7f2      	b.n	800aeee <__libc_init_array+0x1e>
 800af08:	0800afcc 	.word	0x0800afcc
 800af0c:	0800afcc 	.word	0x0800afcc
 800af10:	0800afcc 	.word	0x0800afcc
 800af14:	0800afd0 	.word	0x0800afd0

0800af18 <memcpy>:
 800af18:	440a      	add	r2, r1
 800af1a:	4291      	cmp	r1, r2
 800af1c:	f100 33ff 	add.w	r3, r0, #4294967295
 800af20:	d100      	bne.n	800af24 <memcpy+0xc>
 800af22:	4770      	bx	lr
 800af24:	b510      	push	{r4, lr}
 800af26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af2a:	4291      	cmp	r1, r2
 800af2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af30:	d1f9      	bne.n	800af26 <memcpy+0xe>
 800af32:	bd10      	pop	{r4, pc}

0800af34 <memset>:
 800af34:	4603      	mov	r3, r0
 800af36:	4402      	add	r2, r0
 800af38:	4293      	cmp	r3, r2
 800af3a:	d100      	bne.n	800af3e <memset+0xa>
 800af3c:	4770      	bx	lr
 800af3e:	f803 1b01 	strb.w	r1, [r3], #1
 800af42:	e7f9      	b.n	800af38 <memset+0x4>

0800af44 <_init>:
 800af44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af46:	bf00      	nop
 800af48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af4a:	bc08      	pop	{r3}
 800af4c:	469e      	mov	lr, r3
 800af4e:	4770      	bx	lr

0800af50 <_fini>:
 800af50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af52:	bf00      	nop
 800af54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af56:	bc08      	pop	{r3}
 800af58:	469e      	mov	lr, r3
 800af5a:	4770      	bx	lr
