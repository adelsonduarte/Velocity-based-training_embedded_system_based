
Encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af24  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800b030  0800b030  0001b030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0a0  0800b0a0  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  0800b0a0  0800b0a0  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b0a0  0800b0a0  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0a0  0800b0a0  0001b0a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b0a4  0800b0a4  0001b0a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800b0a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000143c  20000180  0800b228  00020180  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200015bc  0800b228  000215bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e1a  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a9f  00000000  00000000  00035fc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001470  00000000  00000000  00039a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e8  00000000  00000000  0003aed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b376  00000000  00000000  0003c1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001844b  00000000  00000000  00057536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fff7  00000000  00000000  0006f981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ff978  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005490  00000000  00000000  000ff9c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000180 	.word	0x20000180
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b018 	.word	0x0800b018

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000184 	.word	0x20000184
 8000148:	0800b018 	.word	0x0800b018

0800014c <FLASH_apaga>:
  * @param  Endereço:	  Endereço inicial da página que deseja ser apagada
  * @param  Paginas:      Quantidade de páginas que deseja apagar a partir do endereço inicial.
  *
  * @retval Void
  */
void FLASH_apaga(uint32_t endereco, uint8_t paginas){
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	70fb      	strb	r3, [r7, #3]
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8000158:	f002 f96a 	bl	8002430 <HAL_FLASH_Unlock>

	/* Allow Access to option bytes sector */
	HAL_FLASH_OB_Unlock();
 800015c:	f002 f99e 	bl	800249c <HAL_FLASH_OB_Unlock>

	/* Fill EraseInit structure*/
	FLASH_EraseInitTypeDef EraseInitStruct;			    // cria estrutura de dados para armazenar informações de apagamento
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;  // definição padrão da biblioteca HAL
 8000160:	2300      	movs	r3, #0
 8000162:	613b      	str	r3, [r7, #16]
	EraseInitStruct.PageAddress = endereco;				// definição do usuário do endereço da página que deseja apagar
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.NbPages = paginas;					// número de páginas que serão apagadas
 8000168:	78fb      	ldrb	r3, [r7, #3]
 800016a:	61fb      	str	r3, [r7, #28]

	uint32_t PageError;									// Valor do endereço caso ocorra erro no apagamento da função HAL_FLASHEx_Erase
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK){
 800016c:	f107 020c 	add.w	r2, r7, #12
 8000170:	f107 0310 	add.w	r3, r7, #16
 8000174:	4611      	mov	r1, r2
 8000176:	4618      	mov	r0, r3
 8000178:	f002 fa6e 	bl	8002658 <HAL_FLASHEx_Erase>
		// rotina caso ocorra erro no processo de apagar
	}

	HAL_FLASH_OB_Lock();
 800017c:	f002 f9aa 	bl	80024d4 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 8000180:	f002 f97c 	bl	800247c <HAL_FLASH_Lock>
}
 8000184:	bf00      	nop
 8000186:	3720      	adds	r7, #32
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}

0800018c <FLASH_escreve_16bits>:
  * @param  Endereço:	  Endereço da memória em que o dado de 16 bits deverá ser armazenado. Endereço deve ser múltiplo de 2)
  * @param  *dado:        Ponteiro para o valor a ser inserido no endereço de memória especificado
  *
  * @retval Void
  */
void FLASH_escreve_16bits(uint32_t endereco, uint16_t *dado){
 800018c:	b5b0      	push	{r4, r5, r7, lr}
 800018e:	b082      	sub	sp, #8
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
 8000194:	6039      	str	r1, [r7, #0]

	HAL_FLASH_Unlock();
 8000196:	f002 f94b 	bl	8002430 <HAL_FLASH_Unlock>
	HAL_FLASH_OB_Unlock();
 800019a:	f002 f97f 	bl	800249c <HAL_FLASH_OB_Unlock>

	if( HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,(uint64_t)endereco, *dado) != HAL_OK){
 800019e:	683b      	ldr	r3, [r7, #0]
 80001a0:	881b      	ldrh	r3, [r3, #0]
 80001a2:	b29b      	uxth	r3, r3
 80001a4:	2200      	movs	r2, #0
 80001a6:	461c      	mov	r4, r3
 80001a8:	4615      	mov	r5, r2
 80001aa:	4622      	mov	r2, r4
 80001ac:	462b      	mov	r3, r5
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	2001      	movs	r0, #1
 80001b2:	f002 f8cd 	bl	8002350 <HAL_FLASH_Program>
		// rotina caso ocorra erro no processo de apagar
	}

	HAL_FLASH_OB_Lock();
 80001b6:	f002 f98d 	bl	80024d4 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 80001ba:	f002 f95f 	bl	800247c <HAL_FLASH_Lock>
}
 80001be:	bf00      	nop
 80001c0:	3708      	adds	r7, #8
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bdb0      	pop	{r4, r5, r7, pc}

080001c6 <FLASH_le_16bits>:
  * @param  Endereço:	  Endereço da memória em que o dado de 16 bits deverá ser lido. Endereço deve ser múltiplo de 2
  * @param  *dado:        Ponteiro para armazenar o valor a ser lido no endereço de memória especificado
  *
  * @retval Void
  */
void FLASH_le_16bits(uint32_t endereco, uint16_t *dado){
 80001c6:	b480      	push	{r7}
 80001c8:	b083      	sub	sp, #12
 80001ca:	af00      	add	r7, sp, #0
 80001cc:	6078      	str	r0, [r7, #4]
 80001ce:	6039      	str	r1, [r7, #0]

	*dado = *(uint32_t*)(endereco);
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	b29a      	uxth	r2, r3
 80001d6:	683b      	ldr	r3, [r7, #0]
 80001d8:	801a      	strh	r2, [r3, #0]

}
 80001da:	bf00      	nop
 80001dc:	370c      	adds	r7, #12
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr

080001e4 <main>:
/**
* @brief  The application entry point.
* @retval int
*/
int main(void)
{
 80001e4:	b590      	push	{r4, r7, lr}
 80001e6:	b089      	sub	sp, #36	; 0x24
 80001e8:	af06      	add	r7, sp, #24
/* USER CODE END 1 */

/* MCU Configuration--------------------------------------------------------*/

/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
HAL_Init();
 80001ea:	f001 fe6d 	bl	8001ec8 <HAL_Init>
/* USER CODE BEGIN Init */

/* USER CODE END Init */

/* Configure the system clock */
SystemClock_Config();
 80001ee:	f000 faff 	bl	80007f0 <SystemClock_Config>
/* USER CODE BEGIN SysInit */

/* USER CODE END SysInit */

/* Initialize all configured peripherals */
MX_GPIO_Init();
 80001f2:	f000 fc23 	bl	8000a3c <MX_GPIO_Init>
MX_TIM2_Init();
 80001f6:	f000 fb55 	bl	80008a4 <MX_TIM2_Init>
MX_TIM3_Init();
 80001fa:	f000 fba7 	bl	800094c <MX_TIM3_Init>
MX_USART2_UART_Init();
 80001fe:	f000 fbf3 	bl	80009e8 <MX_USART2_UART_Init>
MX_USB_DEVICE_Init();
 8000202:	f00a fa13 	bl	800a62c <MX_USB_DEVICE_Init>
/* USER CODE BEGIN 2 */
HAL_Delay(500);
 8000206:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800020a:	f001 febf 	bl	8001f8c <HAL_Delay>
//HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
HAL_UART_Receive_IT(&huart2, (uint8_t *)RXBuffer, 1);
 800020e:	2201      	movs	r2, #1
 8000210:	49b1      	ldr	r1, [pc, #708]	; (80004d8 <main+0x2f4>)
 8000212:	48b2      	ldr	r0, [pc, #712]	; (80004dc <main+0x2f8>)
 8000214:	f005 fcbf 	bl	8005b96 <HAL_UART_Receive_IT>
StateMachine = iddle;
 8000218:	4bb1      	ldr	r3, [pc, #708]	; (80004e0 <main+0x2fc>)
 800021a:	2249      	movs	r2, #73	; 0x49
 800021c:	701a      	strb	r2, [r3, #0]
char reset_status;
HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,GPIO_PIN_SET);
 800021e:	2201      	movs	r2, #1
 8000220:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000224:	48af      	ldr	r0, [pc, #700]	; (80004e4 <main+0x300>)
 8000226:	f002 fc43 	bl	8002ab0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIOB,STATUS_Pin, GPIO_PIN_SET);
 800022a:	2201      	movs	r2, #1
 800022c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000230:	48ad      	ldr	r0, [pc, #692]	; (80004e8 <main+0x304>)
 8000232:	f002 fc3d 	bl	8002ab0 <HAL_GPIO_WritePin>
char startFlag = 0;
 8000236:	2300      	movs	r3, #0
 8000238:	71bb      	strb	r3, [r7, #6]
char stopFlag = 1;
 800023a:	2301      	movs	r3, #1
 800023c:	717b      	strb	r3, [r7, #5]
char i=0;
 800023e:	2300      	movs	r3, #0
 8000240:	71fb      	strb	r3, [r7, #7]
/* Infinite loop */
/* USER CODE BEGIN WHILE */

while (1)
{
  switch(StateMachine)
 8000242:	4ba7      	ldr	r3, [pc, #668]	; (80004e0 <main+0x2fc>)
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	3b30      	subs	r3, #48	; 0x30
 8000248:	2b19      	cmp	r3, #25
 800024a:	d8fa      	bhi.n	8000242 <main+0x5e>
 800024c:	a201      	add	r2, pc, #4	; (adr r2, 8000254 <main+0x70>)
 800024e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000252:	bf00      	nop
 8000254:	0800038f 	.word	0x0800038f
 8000258:	080003ad 	.word	0x080003ad
 800025c:	0800041d 	.word	0x0800041d
 8000260:	0800046d 	.word	0x0800046d
 8000264:	08000509 	.word	0x08000509
 8000268:	08000683 	.word	0x08000683
 800026c:	080006cb 	.word	0x080006cb
 8000270:	080003e5 	.word	0x080003e5
 8000274:	08000243 	.word	0x08000243
 8000278:	08000243 	.word	0x08000243
 800027c:	08000243 	.word	0x08000243
 8000280:	08000243 	.word	0x08000243
 8000284:	08000243 	.word	0x08000243
 8000288:	08000243 	.word	0x08000243
 800028c:	08000243 	.word	0x08000243
 8000290:	08000243 	.word	0x08000243
 8000294:	08000243 	.word	0x08000243
 8000298:	08000243 	.word	0x08000243
 800029c:	08000243 	.word	0x08000243
 80002a0:	08000243 	.word	0x08000243
 80002a4:	08000243 	.word	0x08000243
 80002a8:	0800074d 	.word	0x0800074d
 80002ac:	08000243 	.word	0x08000243
 80002b0:	08000243 	.word	0x08000243
 80002b4:	08000243 	.word	0x08000243
 80002b8:	080002bd 	.word	0x080002bd
  {
	  case iddle:
		if(USB_FLAG == 1)
 80002bc:	4b8b      	ldr	r3, [pc, #556]	; (80004ec <main+0x308>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	2b01      	cmp	r3, #1
 80002c2:	d10a      	bne.n	80002da <main+0xf6>
		{
			while(EndReception!=Fim) command(buffer);
 80002c4:	e002      	b.n	80002cc <main+0xe8>
 80002c6:	488a      	ldr	r0, [pc, #552]	; (80004f0 <main+0x30c>)
 80002c8:	f000 fd22 	bl	8000d10 <command>
 80002cc:	4b89      	ldr	r3, [pc, #548]	; (80004f4 <main+0x310>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	2b44      	cmp	r3, #68	; 0x44
 80002d2:	d1f8      	bne.n	80002c6 <main+0xe2>
			USB_FLAG = 0;
 80002d4:	4b85      	ldr	r3, [pc, #532]	; (80004ec <main+0x308>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	701a      	strb	r2, [r3, #0]
		}
		if(EndReception == Fim)
 80002da:	4b86      	ldr	r3, [pc, #536]	; (80004f4 <main+0x310>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	2b44      	cmp	r3, #68	; 0x44
 80002e0:	d113      	bne.n	800030a <main+0x126>
		{
			structDados();
 80002e2:	f000 fc7d 	bl	8000be0 <structDados>
			errorFlag = VerificaErro();
 80002e6:	f000 fcc7 	bl	8000c78 <VerificaErro>
 80002ea:	4603      	mov	r3, r0
 80002ec:	b2da      	uxtb	r2, r3
 80002ee:	4b82      	ldr	r3, [pc, #520]	; (80004f8 <main+0x314>)
 80002f0:	701a      	strb	r2, [r3, #0]
			if(errorFlag != OK)
 80002f2:	4b81      	ldr	r3, [pc, #516]	; (80004f8 <main+0x314>)
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b41      	cmp	r3, #65	; 0x41
 80002f8:	d003      	beq.n	8000302 <main+0x11e>
			 {
				StateMachine = error;
 80002fa:	4b79      	ldr	r3, [pc, #484]	; (80004e0 <main+0x2fc>)
 80002fc:	2245      	movs	r2, #69	; 0x45
 80002fe:	701a      	strb	r2, [r3, #0]
				EndReception = Reset;
			}

		}
		else if(USB_FLAG == 0 && EndReception == '\0') StateMachine = iddle;
	  break;
 8000300:	e24e      	b.n	80007a0 <main+0x5bc>
				StateMachine = Inicio;
 8000302:	4b77      	ldr	r3, [pc, #476]	; (80004e0 <main+0x2fc>)
 8000304:	2230      	movs	r2, #48	; 0x30
 8000306:	701a      	strb	r2, [r3, #0]
	  break;
 8000308:	e24a      	b.n	80007a0 <main+0x5bc>
		else if(EndReception == Reset)
 800030a:	4b7a      	ldr	r3, [pc, #488]	; (80004f4 <main+0x310>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	2b52      	cmp	r3, #82	; 0x52
 8000310:	d12f      	bne.n	8000372 <main+0x18e>
			reset_status = deviceReset();
 8000312:	f000 fc2f 	bl	8000b74 <deviceReset>
 8000316:	4603      	mov	r3, r0
 8000318:	713b      	strb	r3, [r7, #4]
			if(reset_status == HAL_OK)
 800031a:	793b      	ldrb	r3, [r7, #4]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d121      	bne.n	8000364 <main+0x180>
				StateMachine = iddle;
 8000320:	4b6f      	ldr	r3, [pc, #444]	; (80004e0 <main+0x2fc>)
 8000322:	2249      	movs	r2, #73	; 0x49
 8000324:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB,ERRO_Pin, GPIO_PIN_RESET);
 8000326:	2200      	movs	r2, #0
 8000328:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800032c:	486e      	ldr	r0, [pc, #440]	; (80004e8 <main+0x304>)
 800032e:	f002 fbbf 	bl	8002ab0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,STOP_Pin, GPIO_PIN_RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000338:	486b      	ldr	r0, [pc, #428]	; (80004e8 <main+0x304>)
 800033a:	f002 fbb9 	bl	8002ab0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,CONFIG_Pin, GPIO_PIN_RESET);
 800033e:	2200      	movs	r2, #0
 8000340:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000344:	4868      	ldr	r0, [pc, #416]	; (80004e8 <main+0x304>)
 8000346:	f002 fbb3 	bl	8002ab0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,ACQUISITION_Pin, GPIO_PIN_RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000350:	4865      	ldr	r0, [pc, #404]	; (80004e8 <main+0x304>)
 8000352:	f002 fbad 	bl	8002ab0 <HAL_GPIO_WritePin>
				EndReception = '\0';
 8000356:	4b67      	ldr	r3, [pc, #412]	; (80004f4 <main+0x310>)
 8000358:	2200      	movs	r2, #0
 800035a:	701a      	strb	r2, [r3, #0]
				USB_FLAG = 0;
 800035c:	4b63      	ldr	r3, [pc, #396]	; (80004ec <main+0x308>)
 800035e:	2200      	movs	r2, #0
 8000360:	701a      	strb	r2, [r3, #0]
	  break;
 8000362:	e21d      	b.n	80007a0 <main+0x5bc>
				StateMachine = iddle;
 8000364:	4b5e      	ldr	r3, [pc, #376]	; (80004e0 <main+0x2fc>)
 8000366:	2249      	movs	r2, #73	; 0x49
 8000368:	701a      	strb	r2, [r3, #0]
				EndReception = Reset;
 800036a:	4b62      	ldr	r3, [pc, #392]	; (80004f4 <main+0x310>)
 800036c:	2252      	movs	r2, #82	; 0x52
 800036e:	701a      	strb	r2, [r3, #0]
	  break;
 8000370:	e216      	b.n	80007a0 <main+0x5bc>
		else if(USB_FLAG == 0 && EndReception == '\0') StateMachine = iddle;
 8000372:	4b5e      	ldr	r3, [pc, #376]	; (80004ec <main+0x308>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	2b00      	cmp	r3, #0
 8000378:	f040 8212 	bne.w	80007a0 <main+0x5bc>
 800037c:	4b5d      	ldr	r3, [pc, #372]	; (80004f4 <main+0x310>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	2b00      	cmp	r3, #0
 8000382:	f040 820d 	bne.w	80007a0 <main+0x5bc>
 8000386:	4b56      	ldr	r3, [pc, #344]	; (80004e0 <main+0x2fc>)
 8000388:	2249      	movs	r2, #73	; 0x49
 800038a:	701a      	strb	r2, [r3, #0]
	  break;
 800038c:	e208      	b.n	80007a0 <main+0x5bc>

	  case Inicio:
				StateMachine = selectCommand(receive_message);
 800038e:	4b5b      	ldr	r3, [pc, #364]	; (80004fc <main+0x318>)
 8000390:	466c      	mov	r4, sp
 8000392:	f103 0210 	add.w	r2, r3, #16
 8000396:	ca07      	ldmia	r2, {r0, r1, r2}
 8000398:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800039c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800039e:	f000 fd8f 	bl	8000ec0 <selectCommand>
 80003a2:	4603      	mov	r3, r0
 80003a4:	b2da      	uxtb	r2, r3
 80003a6:	4b4e      	ldr	r3, [pc, #312]	; (80004e0 <main+0x2fc>)
 80003a8:	701a      	strb	r2, [r3, #0]
	  break;
 80003aa:	e1fc      	b.n	80007a6 <main+0x5c2>

	  case Identification:
			getID();
 80003ac:	f000 fdc8 	bl	8000f40 <getID>
			TransmitData(receive_message,infoDevice.Id,8);
 80003b0:	4b53      	ldr	r3, [pc, #332]	; (8000500 <main+0x31c>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4619      	mov	r1, r3
 80003b6:	4b51      	ldr	r3, [pc, #324]	; (80004fc <main+0x318>)
 80003b8:	2208      	movs	r2, #8
 80003ba:	9204      	str	r2, [sp, #16]
 80003bc:	9103      	str	r1, [sp, #12]
 80003be:	466c      	mov	r4, sp
 80003c0:	f103 0210 	add.w	r2, r3, #16
 80003c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80003c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80003ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003cc:	f000 fe42 	bl	8001054 <TransmitData>
			StateMachine = iddle;
 80003d0:	4b43      	ldr	r3, [pc, #268]	; (80004e0 <main+0x2fc>)
 80003d2:	2249      	movs	r2, #73	; 0x49
 80003d4:	701a      	strb	r2, [r3, #0]
			EndReception = '\0';
 80003d6:	4b47      	ldr	r3, [pc, #284]	; (80004f4 <main+0x310>)
 80003d8:	2200      	movs	r2, #0
 80003da:	701a      	strb	r2, [r3, #0]
			USB_FLAG = 0;
 80003dc:	4b43      	ldr	r3, [pc, #268]	; (80004ec <main+0x308>)
 80003de:	2200      	movs	r2, #0
 80003e0:	701a      	strb	r2, [r3, #0]
	  break;
 80003e2:	e1e0      	b.n	80007a6 <main+0x5c2>

	  case Codification:
			setID();
 80003e4:	f000 fdcc 	bl	8000f80 <setID>
			TransmitData(receive_message,infoDevice.Id,8);
 80003e8:	4b45      	ldr	r3, [pc, #276]	; (8000500 <main+0x31c>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4619      	mov	r1, r3
 80003ee:	4b43      	ldr	r3, [pc, #268]	; (80004fc <main+0x318>)
 80003f0:	2208      	movs	r2, #8
 80003f2:	9204      	str	r2, [sp, #16]
 80003f4:	9103      	str	r1, [sp, #12]
 80003f6:	466c      	mov	r4, sp
 80003f8:	f103 0210 	add.w	r2, r3, #16
 80003fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80003fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000402:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000404:	f000 fe26 	bl	8001054 <TransmitData>
			StateMachine = iddle;
 8000408:	4b35      	ldr	r3, [pc, #212]	; (80004e0 <main+0x2fc>)
 800040a:	2249      	movs	r2, #73	; 0x49
 800040c:	701a      	strb	r2, [r3, #0]
			EndReception = '\0';
 800040e:	4b39      	ldr	r3, [pc, #228]	; (80004f4 <main+0x310>)
 8000410:	2200      	movs	r2, #0
 8000412:	701a      	strb	r2, [r3, #0]
			USB_FLAG = 0;
 8000414:	4b35      	ldr	r3, [pc, #212]	; (80004ec <main+0x308>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	  break;
 800041a:	e1c4      	b.n	80007a6 <main+0x5c2>

	  case Config:
		DeviceParamenter(receive_message);
 800041c:	4b37      	ldr	r3, [pc, #220]	; (80004fc <main+0x318>)
 800041e:	466c      	mov	r4, sp
 8000420:	f103 0210 	add.w	r2, r3, #16
 8000424:	ca07      	ldmia	r2, {r0, r1, r2}
 8000426:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800042a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800042c:	f000 fdce 	bl	8000fcc <DeviceParamenter>
		HAL_GPIO_WritePin(GPIOB,CONFIG_Pin, GPIO_PIN_SET);
 8000430:	2201      	movs	r2, #1
 8000432:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000436:	482c      	ldr	r0, [pc, #176]	; (80004e8 <main+0x304>)
 8000438:	f002 fb3a 	bl	8002ab0 <HAL_GPIO_WritePin>
		TransmitData(receive_message,2,7);
 800043c:	4b2f      	ldr	r3, [pc, #188]	; (80004fc <main+0x318>)
 800043e:	2207      	movs	r2, #7
 8000440:	9204      	str	r2, [sp, #16]
 8000442:	2202      	movs	r2, #2
 8000444:	9203      	str	r2, [sp, #12]
 8000446:	466c      	mov	r4, sp
 8000448:	f103 0210 	add.w	r2, r3, #16
 800044c:	ca07      	ldmia	r2, {r0, r1, r2}
 800044e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000452:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000454:	f000 fdfe 	bl	8001054 <TransmitData>
		StateMachine = iddle;
 8000458:	4b21      	ldr	r3, [pc, #132]	; (80004e0 <main+0x2fc>)
 800045a:	2249      	movs	r2, #73	; 0x49
 800045c:	701a      	strb	r2, [r3, #0]
		EndReception = '\0';
 800045e:	4b25      	ldr	r3, [pc, #148]	; (80004f4 <main+0x310>)
 8000460:	2200      	movs	r2, #0
 8000462:	701a      	strb	r2, [r3, #0]
		USB_FLAG = 0;
 8000464:	4b21      	ldr	r3, [pc, #132]	; (80004ec <main+0x308>)
 8000466:	2200      	movs	r2, #0
 8000468:	701a      	strb	r2, [r3, #0]
	   break;
 800046a:	e19c      	b.n	80007a6 <main+0x5c2>

	   /*Primeiro TransmitData(receive_message,0,7) envia a confirmação da msg de inicio de leitura
		*Segundo TransmitData(receive_message,counterPulso,67) envia os dados
		*/
	  case Start:
		startFlag = StartDevice(deviceFlag);
 800046c:	4b25      	ldr	r3, [pc, #148]	; (8000504 <main+0x320>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	4618      	mov	r0, r3
 8000472:	f000 fdd1 	bl	8001018 <StartDevice>
 8000476:	4603      	mov	r3, r0
 8000478:	71bb      	strb	r3, [r7, #6]
		deviceFlag = startFlag;
 800047a:	4a22      	ldr	r2, [pc, #136]	; (8000504 <main+0x320>)
 800047c:	79bb      	ldrb	r3, [r7, #6]
 800047e:	7013      	strb	r3, [r2, #0]
		if(deviceFlag == 1)
 8000480:	4b20      	ldr	r3, [pc, #128]	; (8000504 <main+0x320>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	2b01      	cmp	r3, #1
 8000486:	d11d      	bne.n	80004c4 <main+0x2e0>
		{
			HAL_GPIO_WritePin(GPIOB,STOP_Pin, GPIO_PIN_RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800048e:	4816      	ldr	r0, [pc, #88]	; (80004e8 <main+0x304>)
 8000490:	f002 fb0e 	bl	8002ab0 <HAL_GPIO_WritePin>
			TransmitData(receive_message,0,7);
 8000494:	4b19      	ldr	r3, [pc, #100]	; (80004fc <main+0x318>)
 8000496:	2207      	movs	r2, #7
 8000498:	9204      	str	r2, [sp, #16]
 800049a:	2200      	movs	r2, #0
 800049c:	9203      	str	r2, [sp, #12]
 800049e:	466c      	mov	r4, sp
 80004a0:	f103 0210 	add.w	r2, r3, #16
 80004a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80004a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80004aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004ac:	f000 fdd2 	bl	8001054 <TransmitData>
			StateMachine = Read;
 80004b0:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <main+0x2fc>)
 80004b2:	2234      	movs	r2, #52	; 0x34
 80004b4:	701a      	strb	r2, [r3, #0]
			EndReception = '\0';
 80004b6:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <main+0x310>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	701a      	strb	r2, [r3, #0]
			USB_FLAG = 0;
 80004bc:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <main+0x308>)
 80004be:	2200      	movs	r2, #0
 80004c0:	701a      	strb	r2, [r3, #0]
			StateMachine = iddle;
			EndReception = '\0';
			USB_FLAG = 0;
		}

	  break;
 80004c2:	e170      	b.n	80007a6 <main+0x5c2>
			StateMachine = iddle;
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <main+0x2fc>)
 80004c6:	2249      	movs	r2, #73	; 0x49
 80004c8:	701a      	strb	r2, [r3, #0]
			EndReception = '\0';
 80004ca:	4b0a      	ldr	r3, [pc, #40]	; (80004f4 <main+0x310>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	701a      	strb	r2, [r3, #0]
			USB_FLAG = 0;
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <main+0x308>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	701a      	strb	r2, [r3, #0]
	  break;
 80004d6:	e166      	b.n	80007a6 <main+0x5c2>
 80004d8:	200002b8 	.word	0x200002b8
 80004dc:	2000022c 	.word	0x2000022c
 80004e0:	2000036e 	.word	0x2000036e
 80004e4:	40011000 	.word	0x40011000
 80004e8:	40010c00 	.word	0x40010c00
 80004ec:	200002b6 	.word	0x200002b6
 80004f0:	20000270 	.word	0x20000270
 80004f4:	200002b7 	.word	0x200002b7
 80004f8:	20000000 	.word	0x20000000
 80004fc:	20000340 	.word	0x20000340
 8000500:	2000035c 	.word	0x2000035c
 8000504:	200003a5 	.word	0x200003a5

	  case Read:
		if(timerEnable == HAL_OK)
 8000508:	4ba7      	ldr	r3, [pc, #668]	; (80007a8 <main+0x5c4>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d117      	bne.n	8000540 <main+0x35c>
		{
			pulseCounter = 0;
 8000510:	4ba6      	ldr	r3, [pc, #664]	; (80007ac <main+0x5c8>)
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
			timerEnable = 1;
 8000516:	4ba4      	ldr	r3, [pc, #656]	; (80007a8 <main+0x5c4>)
 8000518:	2201      	movs	r2, #1
 800051a:	601a      	str	r2, [r3, #0]
			acquiredTime = 0;
 800051c:	4ba4      	ldr	r3, [pc, #656]	; (80007b0 <main+0x5cc>)
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
			newTime = 0;
 8000522:	4ba4      	ldr	r3, [pc, #656]	; (80007b4 <main+0x5d0>)
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim3);
 8000528:	48a3      	ldr	r0, [pc, #652]	; (80007b8 <main+0x5d4>)
 800052a:	f004 fcef 	bl	8004f0c <HAL_TIM_Base_Start_IT>
			readFlag = 1;
 800052e:	4ba3      	ldr	r3, [pc, #652]	; (80007bc <main+0x5d8>)
 8000530:	2201      	movs	r2, #1
 8000532:	701a      	strb	r2, [r3, #0]
			EndReception = '\0';
 8000534:	4ba2      	ldr	r3, [pc, #648]	; (80007c0 <main+0x5dc>)
 8000536:	2200      	movs	r2, #0
 8000538:	701a      	strb	r2, [r3, #0]
			USB_FLAG = 0;
 800053a:	4ba2      	ldr	r3, [pc, #648]	; (80007c4 <main+0x5e0>)
 800053c:	2200      	movs	r2, #0
 800053e:	701a      	strb	r2, [r3, #0]

		}
		if(readStatus == AUTO)
 8000540:	4ba1      	ldr	r3, [pc, #644]	; (80007c8 <main+0x5e4>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b46      	cmp	r3, #70	; 0x46
 8000546:	d153      	bne.n	80005f0 <main+0x40c>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800054e:	489f      	ldr	r0, [pc, #636]	; (80007cc <main+0x5e8>)
 8000550:	f002 faae 	bl	8002ab0 <HAL_GPIO_WritePin>
			if(transmitFlag == 1 && USB_FLAG == 0)
 8000554:	4b9e      	ldr	r3, [pc, #632]	; (80007d0 <main+0x5ec>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2b01      	cmp	r3, #1
 800055a:	d131      	bne.n	80005c0 <main+0x3dc>
 800055c:	4b99      	ldr	r3, [pc, #612]	; (80007c4 <main+0x5e0>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d12d      	bne.n	80005c0 <main+0x3dc>
			{

				for(i=0;i<10;i++) counterPulso[i] = fimPulso[i];
 8000564:	2300      	movs	r3, #0
 8000566:	71fb      	strb	r3, [r7, #7]
 8000568:	e00a      	b.n	8000580 <main+0x39c>
 800056a:	79fa      	ldrb	r2, [r7, #7]
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	4999      	ldr	r1, [pc, #612]	; (80007d4 <main+0x5f0>)
 8000570:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000574:	4998      	ldr	r1, [pc, #608]	; (80007d8 <main+0x5f4>)
 8000576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	3301      	adds	r3, #1
 800057e:	71fb      	strb	r3, [r7, #7]
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	2b09      	cmp	r3, #9
 8000584:	d9f1      	bls.n	800056a <main+0x386>
				TransmitData(receive_message,counterPulso,67);
 8000586:	4b95      	ldr	r3, [pc, #596]	; (80007dc <main+0x5f8>)
 8000588:	2243      	movs	r2, #67	; 0x43
 800058a:	9204      	str	r2, [sp, #16]
 800058c:	4a92      	ldr	r2, [pc, #584]	; (80007d8 <main+0x5f4>)
 800058e:	9203      	str	r2, [sp, #12]
 8000590:	466c      	mov	r4, sp
 8000592:	f103 0210 	add.w	r2, r3, #16
 8000596:	ca07      	ldmia	r2, {r0, r1, r2}
 8000598:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800059c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800059e:	f000 fd59 	bl	8001054 <TransmitData>
				transmitFlag = 0;
 80005a2:	4b8b      	ldr	r3, [pc, #556]	; (80007d0 <main+0x5ec>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOA, ACQUISITION_Pin);
 80005a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ac:	488c      	ldr	r0, [pc, #560]	; (80007e0 <main+0x5fc>)
 80005ae:	f002 fa97 	bl	8002ae0 <HAL_GPIO_TogglePin>
				StateMachine = Read;
 80005b2:	4b8c      	ldr	r3, [pc, #560]	; (80007e4 <main+0x600>)
 80005b4:	2234      	movs	r2, #52	; 0x34
 80005b6:	701a      	strb	r2, [r3, #0]
				EndReception = '\0';
 80005b8:	4b81      	ldr	r3, [pc, #516]	; (80007c0 <main+0x5dc>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	701a      	strb	r2, [r3, #0]
				for(i=0;i<10;i++) counterPulso[i] = 0;
				StateMachine = iddle;
				EndReception = '\0';
				USB_FLAG = 0;
		}
	  break;
 80005be:	e0f1      	b.n	80007a4 <main+0x5c0>
			else if(USB_FLAG == 1)
 80005c0:	4b80      	ldr	r3, [pc, #512]	; (80007c4 <main+0x5e0>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d10f      	bne.n	80005e8 <main+0x404>
				HAL_GPIO_WritePin(GPIOB,CONFIG_Pin, GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ce:	4886      	ldr	r0, [pc, #536]	; (80007e8 <main+0x604>)
 80005d0:	f002 fa6e 	bl	8002ab0 <HAL_GPIO_WritePin>
				HAL_TIM_Base_Stop_IT(&htim3);
 80005d4:	4878      	ldr	r0, [pc, #480]	; (80007b8 <main+0x5d4>)
 80005d6:	f004 fceb 	bl	8004fb0 <HAL_TIM_Base_Stop_IT>
				HAL_Delay(1);
 80005da:	2001      	movs	r0, #1
 80005dc:	f001 fcd6 	bl	8001f8c <HAL_Delay>
				StateMachine = iddle;
 80005e0:	4b80      	ldr	r3, [pc, #512]	; (80007e4 <main+0x600>)
 80005e2:	2249      	movs	r2, #73	; 0x49
 80005e4:	701a      	strb	r2, [r3, #0]
	  break;
 80005e6:	e0dd      	b.n	80007a4 <main+0x5c0>
				StateMachine = Read;
 80005e8:	4b7e      	ldr	r3, [pc, #504]	; (80007e4 <main+0x600>)
 80005ea:	2234      	movs	r2, #52	; 0x34
 80005ec:	701a      	strb	r2, [r3, #0]
	  break;
 80005ee:	e0d9      	b.n	80007a4 <main+0x5c0>
		else if (readStatus == MAN)
 80005f0:	4b75      	ldr	r3, [pc, #468]	; (80007c8 <main+0x5e4>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b4d      	cmp	r3, #77	; 0x4d
 80005f6:	f040 80d5 	bne.w	80007a4 <main+0x5c0>
				while(transmitFlag==0);
 80005fa:	bf00      	nop
 80005fc:	4b74      	ldr	r3, [pc, #464]	; (80007d0 <main+0x5ec>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d0fb      	beq.n	80005fc <main+0x418>
				HAL_GPIO_TogglePin(GPIOA, ACQUISITION_Pin);
 8000604:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000608:	4875      	ldr	r0, [pc, #468]	; (80007e0 <main+0x5fc>)
 800060a:	f002 fa69 	bl	8002ae0 <HAL_GPIO_TogglePin>
				transmitFlag = 0;
 800060e:	4b70      	ldr	r3, [pc, #448]	; (80007d0 <main+0x5ec>)
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
				for(i=0;i<10;i++) counterPulso[i] = fimPulso[i];
 8000614:	2300      	movs	r3, #0
 8000616:	71fb      	strb	r3, [r7, #7]
 8000618:	e00a      	b.n	8000630 <main+0x44c>
 800061a:	79fa      	ldrb	r2, [r7, #7]
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	496d      	ldr	r1, [pc, #436]	; (80007d4 <main+0x5f0>)
 8000620:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000624:	496c      	ldr	r1, [pc, #432]	; (80007d8 <main+0x5f4>)
 8000626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	3301      	adds	r3, #1
 800062e:	71fb      	strb	r3, [r7, #7]
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	2b09      	cmp	r3, #9
 8000634:	d9f1      	bls.n	800061a <main+0x436>
				TransmitData(receive_message,counterPulso,67);
 8000636:	4b69      	ldr	r3, [pc, #420]	; (80007dc <main+0x5f8>)
 8000638:	2243      	movs	r2, #67	; 0x43
 800063a:	9204      	str	r2, [sp, #16]
 800063c:	4a66      	ldr	r2, [pc, #408]	; (80007d8 <main+0x5f4>)
 800063e:	9203      	str	r2, [sp, #12]
 8000640:	466c      	mov	r4, sp
 8000642:	f103 0210 	add.w	r2, r3, #16
 8000646:	ca07      	ldmia	r2, {r0, r1, r2}
 8000648:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800064c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800064e:	f000 fd01 	bl	8001054 <TransmitData>
				for(i=0;i<10;i++) counterPulso[i] = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	71fb      	strb	r3, [r7, #7]
 8000656:	e007      	b.n	8000668 <main+0x484>
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	4a5f      	ldr	r2, [pc, #380]	; (80007d8 <main+0x5f4>)
 800065c:	2100      	movs	r1, #0
 800065e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	3301      	adds	r3, #1
 8000666:	71fb      	strb	r3, [r7, #7]
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	2b09      	cmp	r3, #9
 800066c:	d9f4      	bls.n	8000658 <main+0x474>
				StateMachine = iddle;
 800066e:	4b5d      	ldr	r3, [pc, #372]	; (80007e4 <main+0x600>)
 8000670:	2249      	movs	r2, #73	; 0x49
 8000672:	701a      	strb	r2, [r3, #0]
				EndReception = '\0';
 8000674:	4b52      	ldr	r3, [pc, #328]	; (80007c0 <main+0x5dc>)
 8000676:	2200      	movs	r2, #0
 8000678:	701a      	strb	r2, [r3, #0]
				USB_FLAG = 0;
 800067a:	4b52      	ldr	r3, [pc, #328]	; (80007c4 <main+0x5e0>)
 800067c:	2200      	movs	r2, #0
 800067e:	701a      	strb	r2, [r3, #0]
	  break;
 8000680:	e090      	b.n	80007a4 <main+0x5c0>

	  case ReadError:
		HAL_GPIO_WritePin(GPIOA,ACQUISITION_Pin, GPIO_PIN_SET);
 8000682:	2201      	movs	r2, #1
 8000684:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000688:	4855      	ldr	r0, [pc, #340]	; (80007e0 <main+0x5fc>)
 800068a:	f002 fa11 	bl	8002ab0 <HAL_GPIO_WritePin>
		TransmitData(receive_message,counterPulso,67);
 800068e:	4b53      	ldr	r3, [pc, #332]	; (80007dc <main+0x5f8>)
 8000690:	2243      	movs	r2, #67	; 0x43
 8000692:	9204      	str	r2, [sp, #16]
 8000694:	4a50      	ldr	r2, [pc, #320]	; (80007d8 <main+0x5f4>)
 8000696:	9203      	str	r2, [sp, #12]
 8000698:	466c      	mov	r4, sp
 800069a:	f103 0210 	add.w	r2, r3, #16
 800069e:	ca07      	ldmia	r2, {r0, r1, r2}
 80006a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80006a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006a6:	f000 fcd5 	bl	8001054 <TransmitData>
		HAL_GPIO_WritePin(GPIOA,ACQUISITION_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006b0:	484b      	ldr	r0, [pc, #300]	; (80007e0 <main+0x5fc>)
 80006b2:	f002 f9fd 	bl	8002ab0 <HAL_GPIO_WritePin>
		StateMachine = iddle;
 80006b6:	4b4b      	ldr	r3, [pc, #300]	; (80007e4 <main+0x600>)
 80006b8:	2249      	movs	r2, #73	; 0x49
 80006ba:	701a      	strb	r2, [r3, #0]
		EndReception = '\0';
 80006bc:	4b40      	ldr	r3, [pc, #256]	; (80007c0 <main+0x5dc>)
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]
		USB_FLAG = 0;
 80006c2:	4b40      	ldr	r3, [pc, #256]	; (80007c4 <main+0x5e0>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]
	  break;
 80006c8:	e06d      	b.n	80007a6 <main+0x5c2>

	  case Stop:
		stopFlag = StopDevice(deviceFlag);
 80006ca:	4b48      	ldr	r3, [pc, #288]	; (80007ec <main+0x608>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 f8a6 	bl	8001820 <StopDevice>
 80006d4:	4603      	mov	r3, r0
 80006d6:	717b      	strb	r3, [r7, #5]
		deviceFlag = stopFlag;
 80006d8:	4a44      	ldr	r2, [pc, #272]	; (80007ec <main+0x608>)
 80006da:	797b      	ldrb	r3, [r7, #5]
 80006dc:	7013      	strb	r3, [r2, #0]
		if(stopFlag == 0)
 80006de:	797b      	ldrb	r3, [r7, #5]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d123      	bne.n	800072c <main+0x548>
		{
			HAL_GPIO_WritePin(GPIOB,STOP_Pin, GPIO_PIN_SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ea:	483f      	ldr	r0, [pc, #252]	; (80007e8 <main+0x604>)
 80006ec:	f002 f9e0 	bl	8002ab0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,ACQUISITION_Pin, GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f6:	483a      	ldr	r0, [pc, #232]	; (80007e0 <main+0x5fc>)
 80006f8:	f002 f9da 	bl	8002ab0 <HAL_GPIO_WritePin>
			TransmitData(receive_message,0,7);
 80006fc:	4b37      	ldr	r3, [pc, #220]	; (80007dc <main+0x5f8>)
 80006fe:	2207      	movs	r2, #7
 8000700:	9204      	str	r2, [sp, #16]
 8000702:	2200      	movs	r2, #0
 8000704:	9203      	str	r2, [sp, #12]
 8000706:	466c      	mov	r4, sp
 8000708:	f103 0210 	add.w	r2, r3, #16
 800070c:	ca07      	ldmia	r2, {r0, r1, r2}
 800070e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000712:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000714:	f000 fc9e 	bl	8001054 <TransmitData>
			StateMachine = iddle;
 8000718:	4b32      	ldr	r3, [pc, #200]	; (80007e4 <main+0x600>)
 800071a:	2249      	movs	r2, #73	; 0x49
 800071c:	701a      	strb	r2, [r3, #0]
			EndReception = '\0';
 800071e:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <main+0x5dc>)
 8000720:	2200      	movs	r2, #0
 8000722:	701a      	strb	r2, [r3, #0]
			USB_FLAG = 0;
 8000724:	4b27      	ldr	r3, [pc, #156]	; (80007c4 <main+0x5e0>)
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB,STOP_Pin, GPIO_PIN_RESET);
			StateMachine = iddle;
			EndReception = '\0';
			USB_FLAG = 0;
		}
	   break;
 800072a:	e03c      	b.n	80007a6 <main+0x5c2>
			HAL_GPIO_WritePin(GPIOB,STOP_Pin, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000732:	482d      	ldr	r0, [pc, #180]	; (80007e8 <main+0x604>)
 8000734:	f002 f9bc 	bl	8002ab0 <HAL_GPIO_WritePin>
			StateMachine = iddle;
 8000738:	4b2a      	ldr	r3, [pc, #168]	; (80007e4 <main+0x600>)
 800073a:	2249      	movs	r2, #73	; 0x49
 800073c:	701a      	strb	r2, [r3, #0]
			EndReception = '\0';
 800073e:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <main+0x5dc>)
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
			USB_FLAG = 0;
 8000744:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <main+0x5e0>)
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
	   break;
 800074a:	e02c      	b.n	80007a6 <main+0x5c2>

	  case error:
		HAL_GPIO_WritePin(GPIOB,ERRO_Pin, GPIO_PIN_SET);
 800074c:	2201      	movs	r2, #1
 800074e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000752:	4825      	ldr	r0, [pc, #148]	; (80007e8 <main+0x604>)
 8000754:	f002 f9ac 	bl	8002ab0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,CONFIG_Pin, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800075e:	4822      	ldr	r0, [pc, #136]	; (80007e8 <main+0x604>)
 8000760:	f002 f9a6 	bl	8002ab0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,STOP_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800076a:	481f      	ldr	r0, [pc, #124]	; (80007e8 <main+0x604>)
 800076c:	f002 f9a0 	bl	8002ab0 <HAL_GPIO_WritePin>
		TransmitData(receive_message,0,8);
 8000770:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <main+0x5f8>)
 8000772:	2208      	movs	r2, #8
 8000774:	9204      	str	r2, [sp, #16]
 8000776:	2200      	movs	r2, #0
 8000778:	9203      	str	r2, [sp, #12]
 800077a:	466c      	mov	r4, sp
 800077c:	f103 0210 	add.w	r2, r3, #16
 8000780:	ca07      	ldmia	r2, {r0, r1, r2}
 8000782:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000786:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000788:	f000 fc64 	bl	8001054 <TransmitData>
		StateMachine = iddle;
 800078c:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <main+0x600>)
 800078e:	2249      	movs	r2, #73	; 0x49
 8000790:	701a      	strb	r2, [r3, #0]
		EndReception = '\0';
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <main+0x5dc>)
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
		USB_FLAG = 0;
 8000798:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <main+0x5e0>)
 800079a:	2200      	movs	r2, #0
 800079c:	701a      	strb	r2, [r3, #0]
		break;
 800079e:	e002      	b.n	80007a6 <main+0x5c2>
	  break;
 80007a0:	bf00      	nop
 80007a2:	e54e      	b.n	8000242 <main+0x5e>
	  break;
 80007a4:	bf00      	nop
  switch(StateMachine)
 80007a6:	e54c      	b.n	8000242 <main+0x5e>
 80007a8:	20000370 	.word	0x20000370
 80007ac:	2000033c 	.word	0x2000033c
 80007b0:	200002d4 	.word	0x200002d4
 80007b4:	200002d0 	.word	0x200002d0
 80007b8:	200001e4 	.word	0x200001e4
 80007bc:	20000338 	.word	0x20000338
 80007c0:	200002b7 	.word	0x200002b7
 80007c4:	200002b6 	.word	0x200002b6
 80007c8:	200002c6 	.word	0x200002c6
 80007cc:	40011000 	.word	0x40011000
 80007d0:	200002cc 	.word	0x200002cc
 80007d4:	20000310 	.word	0x20000310
 80007d8:	200002e8 	.word	0x200002e8
 80007dc:	20000340 	.word	0x20000340
 80007e0:	40010800 	.word	0x40010800
 80007e4:	2000036e 	.word	0x2000036e
 80007e8:	40010c00 	.word	0x40010c00
 80007ec:	200003a5 	.word	0x200003a5

080007f0 <SystemClock_Config>:
/**
* @brief System Clock Configuration
* @retval None
*/
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b094      	sub	sp, #80	; 0x50
 80007f4:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007fa:	2228      	movs	r2, #40	; 0x28
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f00a fc02 	bl	800b008 <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]

/** Initializes the RCC Oscillators according to the specified parameters
* in the RCC_OscInitTypeDef structure.
*/
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000820:	2301      	movs	r3, #1
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000824:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000828:	62fb      	str	r3, [r7, #44]	; 0x2c
RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	633b      	str	r3, [r7, #48]	; 0x30
RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800082e:	2301      	movs	r3, #1
 8000830:	63bb      	str	r3, [r7, #56]	; 0x38
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000832:	2302      	movs	r3, #2
 8000834:	647b      	str	r3, [r7, #68]	; 0x44
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000836:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800083a:	64bb      	str	r3, [r7, #72]	; 0x48
RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800083c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000840:	64fb      	str	r3, [r7, #76]	; 0x4c
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000842:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000846:	4618      	mov	r0, r3
 8000848:	f003 fe40 	bl	80044cc <HAL_RCC_OscConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0x66>
{
Error_Handler();
 8000852:	f001 f9c1 	bl	8001bd8 <Error_Handler>
}
/** Initializes the CPU, AHB and APB buses clocks
*/
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000856:	230f      	movs	r3, #15
 8000858:	617b      	str	r3, [r7, #20]
						  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085a:	2302      	movs	r3, #2
 800085c:	61bb      	str	r3, [r7, #24]
RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000866:	623b      	str	r3, [r7, #32]
RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	627b      	str	r3, [r7, #36]	; 0x24

if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	2102      	movs	r1, #2
 8000872:	4618      	mov	r0, r3
 8000874:	f004 f8ac 	bl	80049d0 <HAL_RCC_ClockConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0x92>
{
Error_Handler();
 800087e:	f001 f9ab 	bl	8001bd8 <Error_Handler>
}
PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000882:	2310      	movs	r3, #16
 8000884:	607b      	str	r3, [r7, #4]
PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	4618      	mov	r0, r3
 800088e:	f004 fa37 	bl	8004d00 <HAL_RCCEx_PeriphCLKConfig>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <SystemClock_Config+0xac>
{
Error_Handler();
 8000898:	f001 f99e 	bl	8001bd8 <Error_Handler>
}
}
 800089c:	bf00      	nop
 800089e:	3750      	adds	r7, #80	; 0x50
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <MX_TIM2_Init>:
* @brief TIM2 Initialization Function
* @param None
* @retval None
*/
static void MX_TIM2_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08c      	sub	sp, #48	; 0x30
 80008a8:	af00      	add	r7, sp, #0

/* USER CODE BEGIN TIM2_Init 0 */

/* USER CODE END TIM2_Init 0 */

TIM_Encoder_InitTypeDef sConfig = {0};
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	2224      	movs	r2, #36	; 0x24
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f00a fba8 	bl	800b008 <memset>
TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]

/* USER CODE BEGIN TIM2_Init 1 */

/* USER CODE END TIM2_Init 1 */
htim2.Instance = TIM2;
 80008c0:	4b21      	ldr	r3, [pc, #132]	; (8000948 <MX_TIM2_Init+0xa4>)
 80008c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008c6:	601a      	str	r2, [r3, #0]
htim2.Init.Prescaler = 0;
 80008c8:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <MX_TIM2_Init+0xa4>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	605a      	str	r2, [r3, #4]
htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ce:	4b1e      	ldr	r3, [pc, #120]	; (8000948 <MX_TIM2_Init+0xa4>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
htim2.Init.Period = 65535;
 80008d4:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <MX_TIM2_Init+0xa4>)
 80008d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008da:	60da      	str	r2, [r3, #12]
htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008dc:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <MX_TIM2_Init+0xa4>)
 80008de:	2200      	movs	r2, #0
 80008e0:	611a      	str	r2, [r3, #16]
htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e2:	4b19      	ldr	r3, [pc, #100]	; (8000948 <MX_TIM2_Init+0xa4>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008e8:	2303      	movs	r3, #3
 80008ea:	60fb      	str	r3, [r7, #12]
sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008ec:	2300      	movs	r3, #0
 80008ee:	613b      	str	r3, [r7, #16]
sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008f0:	2301      	movs	r3, #1
 80008f2:	617b      	str	r3, [r7, #20]
sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61bb      	str	r3, [r7, #24]
sConfig.IC1Filter = 15;
 80008f8:	230f      	movs	r3, #15
 80008fa:	61fb      	str	r3, [r7, #28]
sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008fc:	2300      	movs	r3, #0
 80008fe:	623b      	str	r3, [r7, #32]
sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000900:	2301      	movs	r3, #1
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
sConfig.IC2Filter = 15;
 8000908:	230f      	movs	r3, #15
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	4619      	mov	r1, r3
 8000912:	480d      	ldr	r0, [pc, #52]	; (8000948 <MX_TIM2_Init+0xa4>)
 8000914:	f004 fb7a 	bl	800500c <HAL_TIM_Encoder_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM2_Init+0x7e>
{
Error_Handler();
 800091e:	f001 f95b 	bl	8001bd8 <Error_Handler>
}
sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	4619      	mov	r1, r3
 800092e:	4806      	ldr	r0, [pc, #24]	; (8000948 <MX_TIM2_Init+0xa4>)
 8000930:	f005 f874 	bl	8005a1c <HAL_TIMEx_MasterConfigSynchronization>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM2_Init+0x9a>
{
Error_Handler();
 800093a:	f001 f94d 	bl	8001bd8 <Error_Handler>
}
/* USER CODE BEGIN TIM2_Init 2 */

/* USER CODE END TIM2_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	3730      	adds	r7, #48	; 0x30
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	2000019c 	.word	0x2000019c

0800094c <MX_TIM3_Init>:
* @brief TIM3 Initialization Function
* @param None
* @retval None
*/
static void MX_TIM3_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0

/* USER CODE BEGIN TIM3_Init 0 */

/* USER CODE END TIM3_Init 0 */

TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000952:	f107 0308 	add.w	r3, r7, #8
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000960:	463b      	mov	r3, r7
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]

/* USER CODE BEGIN TIM3_Init 1 */

/* USER CODE END TIM3_Init 1 */
htim3.Instance = TIM3;
 8000968:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <MX_TIM3_Init+0x94>)
 800096a:	4a1e      	ldr	r2, [pc, #120]	; (80009e4 <MX_TIM3_Init+0x98>)
 800096c:	601a      	str	r2, [r3, #0]
htim3.Init.Prescaler = 72-1;
 800096e:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <MX_TIM3_Init+0x94>)
 8000970:	2247      	movs	r2, #71	; 0x47
 8000972:	605a      	str	r2, [r3, #4]
htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <MX_TIM3_Init+0x94>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
htim3.Init.Period = 1000-1;
 800097a:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <MX_TIM3_Init+0x94>)
 800097c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000980:	60da      	str	r2, [r3, #12]
htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000982:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_TIM3_Init+0x94>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000988:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <MX_TIM3_Init+0x94>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800098e:	4814      	ldr	r0, [pc, #80]	; (80009e0 <MX_TIM3_Init+0x94>)
 8000990:	f004 fa6c 	bl	8004e6c <HAL_TIM_Base_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM3_Init+0x52>
{
Error_Handler();
 800099a:	f001 f91d 	bl	8001bd8 <Error_Handler>
}
sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800099e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a2:	60bb      	str	r3, [r7, #8]
if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009a4:	f107 0308 	add.w	r3, r7, #8
 80009a8:	4619      	mov	r1, r3
 80009aa:	480d      	ldr	r0, [pc, #52]	; (80009e0 <MX_TIM3_Init+0x94>)
 80009ac:	f004 fe3b 	bl	8005626 <HAL_TIM_ConfigClockSource>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM3_Init+0x6e>
{
Error_Handler();
 80009b6:	f001 f90f 	bl	8001bd8 <Error_Handler>
}
sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ba:	2300      	movs	r3, #0
 80009bc:	603b      	str	r3, [r7, #0]
sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009c2:	463b      	mov	r3, r7
 80009c4:	4619      	mov	r1, r3
 80009c6:	4806      	ldr	r0, [pc, #24]	; (80009e0 <MX_TIM3_Init+0x94>)
 80009c8:	f005 f828 	bl	8005a1c <HAL_TIMEx_MasterConfigSynchronization>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM3_Init+0x8a>
{
Error_Handler();
 80009d2:	f001 f901 	bl	8001bd8 <Error_Handler>
}
/* USER CODE BEGIN TIM3_Init 2 */

/* USER CODE END TIM3_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200001e4 	.word	0x200001e4
 80009e4:	40000400 	.word	0x40000400

080009e8 <MX_USART2_UART_Init>:
* @brief USART2 Initialization Function
* @param None
* @retval None
*/
static void MX_USART2_UART_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
/* USER CODE END USART2_Init 0 */

/* USER CODE BEGIN USART2_Init 1 */

/* USER CODE END USART2_Init 1 */
huart2.Instance = USART2;
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_USART2_UART_Init+0x4c>)
 80009ee:	4a12      	ldr	r2, [pc, #72]	; (8000a38 <MX_USART2_UART_Init+0x50>)
 80009f0:	601a      	str	r2, [r3, #0]
huart2.Init.BaudRate = 115200;
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <MX_USART2_UART_Init+0x4c>)
 80009f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f8:	605a      	str	r2, [r3, #4]
huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_USART2_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
huart2.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
huart2.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
huart2.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a20:	f005 f86c 	bl	8005afc <HAL_UART_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USART2_UART_Init+0x46>
{
Error_Handler();
 8000a2a:	f001 f8d5 	bl	8001bd8 <Error_Handler>
}
/* USER CODE BEGIN USART2_Init 2 */

/* USER CODE END USART2_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2000022c 	.word	0x2000022c
 8000a38:	40004400 	.word	0x40004400

08000a3c <MX_GPIO_Init>:
* @brief GPIO Initialization Function
* @param None
* @retval None
*/
static void MX_GPIO_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af00      	add	r7, sp, #0
GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	f107 0310 	add.w	r3, r7, #16
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]

/* GPIO Ports Clock Enable */
__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a50:	4b43      	ldr	r3, [pc, #268]	; (8000b60 <MX_GPIO_Init+0x124>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	4a42      	ldr	r2, [pc, #264]	; (8000b60 <MX_GPIO_Init+0x124>)
 8000a56:	f043 0310 	orr.w	r3, r3, #16
 8000a5a:	6193      	str	r3, [r2, #24]
 8000a5c:	4b40      	ldr	r3, [pc, #256]	; (8000b60 <MX_GPIO_Init+0x124>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	f003 0310 	and.w	r3, r3, #16
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	68fb      	ldr	r3, [r7, #12]
__HAL_RCC_GPIOD_CLK_ENABLE();
 8000a68:	4b3d      	ldr	r3, [pc, #244]	; (8000b60 <MX_GPIO_Init+0x124>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	4a3c      	ldr	r2, [pc, #240]	; (8000b60 <MX_GPIO_Init+0x124>)
 8000a6e:	f043 0320 	orr.w	r3, r3, #32
 8000a72:	6193      	str	r3, [r2, #24]
 8000a74:	4b3a      	ldr	r3, [pc, #232]	; (8000b60 <MX_GPIO_Init+0x124>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	f003 0320 	and.w	r3, r3, #32
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a80:	4b37      	ldr	r3, [pc, #220]	; (8000b60 <MX_GPIO_Init+0x124>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	4a36      	ldr	r2, [pc, #216]	; (8000b60 <MX_GPIO_Init+0x124>)
 8000a86:	f043 0304 	orr.w	r3, r3, #4
 8000a8a:	6193      	str	r3, [r2, #24]
 8000a8c:	4b34      	ldr	r3, [pc, #208]	; (8000b60 <MX_GPIO_Init+0x124>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	f003 0304 	and.w	r3, r3, #4
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	687b      	ldr	r3, [r7, #4]
__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a98:	4b31      	ldr	r3, [pc, #196]	; (8000b60 <MX_GPIO_Init+0x124>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	4a30      	ldr	r2, [pc, #192]	; (8000b60 <MX_GPIO_Init+0x124>)
 8000a9e:	f043 0308 	orr.w	r3, r3, #8
 8000aa2:	6193      	str	r3, [r2, #24]
 8000aa4:	4b2e      	ldr	r3, [pc, #184]	; (8000b60 <MX_GPIO_Init+0x124>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	f003 0308 	and.w	r3, r3, #8
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	683b      	ldr	r3, [r7, #0]

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ab6:	482b      	ldr	r0, [pc, #172]	; (8000b64 <MX_GPIO_Init+0x128>)
 8000ab8:	f001 fffa 	bl	8002ab0 <HAL_GPIO_WritePin>

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOB, STOP_Pin|ERRO_Pin|STATUS_Pin|CONFIG_Pin, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000ac2:	4829      	ldr	r0, [pc, #164]	; (8000b68 <MX_GPIO_Init+0x12c>)
 8000ac4:	f001 fff4 	bl	8002ab0 <HAL_GPIO_WritePin>

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(ACQUISITION_GPIO_Port, ACQUISITION_Pin, GPIO_PIN_RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ace:	4827      	ldr	r0, [pc, #156]	; (8000b6c <MX_GPIO_Init+0x130>)
 8000ad0:	f001 ffee 	bl	8002ab0 <HAL_GPIO_WritePin>

/*Configure GPIO pin : PC13 */
GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ad4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad8:	613b      	str	r3, [r7, #16]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ada:	2301      	movs	r3, #1
 8000adc:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	61fb      	str	r3, [r7, #28]
HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae6:	f107 0310 	add.w	r3, r7, #16
 8000aea:	4619      	mov	r1, r3
 8000aec:	481d      	ldr	r0, [pc, #116]	; (8000b64 <MX_GPIO_Init+0x128>)
 8000aee:	f001 fe5b 	bl	80027a8 <HAL_GPIO_Init>

/*Configure GPIO pins : STOP_Pin ERRO_Pin STATUS_Pin CONFIG_Pin */
GPIO_InitStruct.Pin = STOP_Pin|ERRO_Pin|STATUS_Pin|CONFIG_Pin;
 8000af2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000af6:	613b      	str	r3, [r7, #16]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2302      	movs	r3, #2
 8000b02:	61fb      	str	r3, [r7, #28]
HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b04:	f107 0310 	add.w	r3, r7, #16
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4817      	ldr	r0, [pc, #92]	; (8000b68 <MX_GPIO_Init+0x12c>)
 8000b0c:	f001 fe4c 	bl	80027a8 <HAL_GPIO_Init>

/*Configure GPIO pin : ACQUISITION_Pin */
GPIO_InitStruct.Pin = ACQUISITION_Pin;
 8000b10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b14:	613b      	str	r3, [r7, #16]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	61fb      	str	r3, [r7, #28]
HAL_GPIO_Init(ACQUISITION_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 0310 	add.w	r3, r7, #16
 8000b26:	4619      	mov	r1, r3
 8000b28:	4810      	ldr	r0, [pc, #64]	; (8000b6c <MX_GPIO_Init+0x130>)
 8000b2a:	f001 fe3d 	bl	80027a8 <HAL_GPIO_Init>

/*Configure GPIO pin : RESET_Pin */
GPIO_InitStruct.Pin = RESET_Pin;
 8000b2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b32:	613b      	str	r3, [r7, #16]
GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b34:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <MX_GPIO_Init+0x134>)
 8000b36:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61bb      	str	r3, [r7, #24]
HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8000b3c:	f107 0310 	add.w	r3, r7, #16
 8000b40:	4619      	mov	r1, r3
 8000b42:	480a      	ldr	r0, [pc, #40]	; (8000b6c <MX_GPIO_Init+0x130>)
 8000b44:	f001 fe30 	bl	80027a8 <HAL_GPIO_Init>

/* EXTI interrupt init*/
HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	2017      	movs	r0, #23
 8000b4e:	f001 fb18 	bl	8002182 <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b52:	2017      	movs	r0, #23
 8000b54:	f001 fb31 	bl	80021ba <HAL_NVIC_EnableIRQ>

}
 8000b58:	bf00      	nop
 8000b5a:	3720      	adds	r7, #32
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40021000 	.word	0x40021000
 8000b64:	40011000 	.word	0x40011000
 8000b68:	40010c00 	.word	0x40010c00
 8000b6c:	40010800 	.word	0x40010800
 8000b70:	10210000 	.word	0x10210000

08000b74 <deviceReset>:

/* USER CODE BEGIN 4 */
char deviceReset()
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
char i=0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	71fb      	strb	r3, [r7, #7]
char reset;
infoDevice.Id =0;
 8000b7e:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <deviceReset+0x58>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
for(i=0;i<10;i++)
 8000b84:	2300      	movs	r3, #0
 8000b86:	71fb      	strb	r3, [r7, #7]
 8000b88:	e012      	b.n	8000bb0 <deviceReset+0x3c>
{
  counterPulso[i] = 0;
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	4a10      	ldr	r2, [pc, #64]	; (8000bd0 <deviceReset+0x5c>)
 8000b8e:	2100      	movs	r1, #0
 8000b90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  currentTime[i] = 0;
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	4a0f      	ldr	r2, [pc, #60]	; (8000bd4 <deviceReset+0x60>)
 8000b98:	2100      	movs	r1, #0
 8000b9a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  fimPulso[contador] = 0;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <deviceReset+0x64>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a0e      	ldr	r2, [pc, #56]	; (8000bdc <deviceReset+0x68>)
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
for(i=0;i<10;i++)
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	3301      	adds	r3, #1
 8000bae:	71fb      	strb	r3, [r7, #7]
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	2b09      	cmp	r3, #9
 8000bb4:	d9e9      	bls.n	8000b8a <deviceReset+0x16>
}
reset = StopDevice(HAL_OK);
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f000 fe32 	bl	8001820 <StopDevice>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	71bb      	strb	r3, [r7, #6]

return reset;
 8000bc0:	79bb      	ldrb	r3, [r7, #6]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	2000035c 	.word	0x2000035c
 8000bd0:	200002e8 	.word	0x200002e8
 8000bd4:	20000374 	.word	0x20000374
 8000bd8:	200003a0 	.word	0x200003a0
 8000bdc:	20000310 	.word	0x20000310

08000be0 <structDados>:

void structDados()
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
uint8_t counter=0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	71fb      	strb	r3, [r7, #7]
receive_message.inicio = RXBufferArray[0];
 8000bea:	4b20      	ldr	r3, [pc, #128]	; (8000c6c <structDados+0x8c>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <structDados+0x90>)
 8000bf2:	601a      	str	r2, [r3, #0]
receive_message.endOrigem = RXBufferArray[1];
 8000bf4:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <structDados+0x8c>)
 8000bf6:	785b      	ldrb	r3, [r3, #1]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <structDados+0x90>)
 8000bfc:	605a      	str	r2, [r3, #4]
receive_message.endDestino = RXBufferArray[2];
 8000bfe:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <structDados+0x8c>)
 8000c00:	789b      	ldrb	r3, [r3, #2]
 8000c02:	461a      	mov	r2, r3
 8000c04:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <structDados+0x90>)
 8000c06:	609a      	str	r2, [r3, #8]
receive_message.funcao = RXBufferArray[3];
 8000c08:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <structDados+0x8c>)
 8000c0a:	78db      	ldrb	r3, [r3, #3]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <structDados+0x90>)
 8000c10:	60da      	str	r2, [r3, #12]
receive_message.dadosCount = RXBufferArray[4];
 8000c12:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <structDados+0x8c>)
 8000c14:	791b      	ldrb	r3, [r3, #4]
 8000c16:	461a      	mov	r2, r3
 8000c18:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <structDados+0x90>)
 8000c1a:	611a      	str	r2, [r3, #16]
while(counter<receive_message.dadosCount)
 8000c1c:	e00b      	b.n	8000c36 <structDados+0x56>
{
	dados[counter] = RXBufferArray[5+counter];
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	3305      	adds	r3, #5
 8000c22:	4a12      	ldr	r2, [pc, #72]	; (8000c6c <structDados+0x8c>)
 8000c24:	5cd2      	ldrb	r2, [r2, r3]
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	4611      	mov	r1, r2
 8000c2a:	4a12      	ldr	r2, [pc, #72]	; (8000c74 <structDados+0x94>)
 8000c2c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	counter++;
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	3301      	adds	r3, #1
 8000c34:	71fb      	strb	r3, [r7, #7]
while(counter<receive_message.dadosCount)
 8000c36:	79fa      	ldrb	r2, [r7, #7]
 8000c38:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <structDados+0x90>)
 8000c3a:	691b      	ldr	r3, [r3, #16]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	dbee      	blt.n	8000c1e <structDados+0x3e>
}
receive_message.checksum = RXBufferArray[5+counter];
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	3305      	adds	r3, #5
 8000c44:	4a09      	ldr	r2, [pc, #36]	; (8000c6c <structDados+0x8c>)
 8000c46:	5cd3      	ldrb	r3, [r2, r3]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <structDados+0x90>)
 8000c4c:	615a      	str	r2, [r3, #20]
receive_message.fim=RXBufferArray[6+counter];
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	3306      	adds	r3, #6
 8000c52:	4a06      	ldr	r2, [pc, #24]	; (8000c6c <structDados+0x8c>)
 8000c54:	5cd3      	ldrb	r3, [r2, r3]
 8000c56:	461a      	mov	r2, r3
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <structDados+0x90>)
 8000c5a:	619a      	str	r2, [r3, #24]
counter=0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	71fb      	strb	r3, [r7, #7]
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	200002bc 	.word	0x200002bc
 8000c70:	20000340 	.word	0x20000340
 8000c74:	200002d8 	.word	0x200002d8

08000c78 <VerificaErro>:

int VerificaErro()
{
 8000c78:	b598      	push	{r3, r4, r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
if(receive_message.checksum != Checksum(RXBufferArray))
 8000c7c:	4b20      	ldr	r3, [pc, #128]	; (8000d00 <VerificaErro+0x88>)
 8000c7e:	695c      	ldr	r4, [r3, #20]
 8000c80:	4820      	ldr	r0, [pc, #128]	; (8000d04 <VerificaErro+0x8c>)
 8000c82:	f000 fe2f 	bl	80018e4 <Checksum>
 8000c86:	4603      	mov	r3, r0
 8000c88:	429c      	cmp	r4, r3
 8000c8a:	d001      	beq.n	8000c90 <VerificaErro+0x18>
{
	return errorChecksum;
 8000c8c:	2330      	movs	r3, #48	; 0x30
 8000c8e:	e035      	b.n	8000cfc <VerificaErro+0x84>
}
if(receive_message.endDestino>255 || receive_message.endDestino<0)
 8000c90:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <VerificaErro+0x88>)
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	2bff      	cmp	r3, #255	; 0xff
 8000c96:	dc03      	bgt.n	8000ca0 <VerificaErro+0x28>
 8000c98:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <VerificaErro+0x88>)
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	da06      	bge.n	8000cae <VerificaErro+0x36>
{
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000ca0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca4:	4818      	ldr	r0, [pc, #96]	; (8000d08 <VerificaErro+0x90>)
 8000ca6:	f001 ff1b 	bl	8002ae0 <HAL_GPIO_TogglePin>
	return errorAddress;
 8000caa:	2333      	movs	r3, #51	; 0x33
 8000cac:	e026      	b.n	8000cfc <VerificaErro+0x84>
}
/*	if(infoDevice.Id != 0x00 && infoDevice.Id != receive_message.endDestino)
{
	return errorAddress;
}*/
if(receive_message.funcao == 2 && receive_message.dadosCount < 0)
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <VerificaErro+0x88>)
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d105      	bne.n	8000cc2 <VerificaErro+0x4a>
 8000cb6:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <VerificaErro+0x88>)
 8000cb8:	691b      	ldr	r3, [r3, #16]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	da01      	bge.n	8000cc2 <VerificaErro+0x4a>
{
	return errorConfig;
 8000cbe:	2335      	movs	r3, #53	; 0x35
 8000cc0:	e01c      	b.n	8000cfc <VerificaErro+0x84>
}
if(receive_message.funcao > 0x08)
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <VerificaErro+0x88>)
 8000cc4:	68db      	ldr	r3, [r3, #12]
 8000cc6:	2b08      	cmp	r3, #8
 8000cc8:	dd01      	ble.n	8000cce <VerificaErro+0x56>
{
	return errorFunction;
 8000cca:	2336      	movs	r3, #54	; 0x36
 8000ccc:	e016      	b.n	8000cfc <VerificaErro+0x84>
}
if(receive_message.funcao == 2 && dados[1]<1)
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <VerificaErro+0x88>)
 8000cd0:	68db      	ldr	r3, [r3, #12]
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	d105      	bne.n	8000ce2 <VerificaErro+0x6a>
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <VerificaErro+0x94>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	dc01      	bgt.n	8000ce2 <VerificaErro+0x6a>
{
	return errorData;
 8000cde:	2337      	movs	r3, #55	; 0x37
 8000ce0:	e00c      	b.n	8000cfc <VerificaErro+0x84>
}
if(receive_message.inicio != 0x0A)
 8000ce2:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <VerificaErro+0x88>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b0a      	cmp	r3, #10
 8000ce8:	d001      	beq.n	8000cee <VerificaErro+0x76>
{
	return errorStartHeader;
 8000cea:	2338      	movs	r3, #56	; 0x38
 8000cec:	e006      	b.n	8000cfc <VerificaErro+0x84>
}
if(receive_message.fim != 0x0f)
 8000cee:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <VerificaErro+0x88>)
 8000cf0:	699b      	ldr	r3, [r3, #24]
 8000cf2:	2b0f      	cmp	r3, #15
 8000cf4:	d001      	beq.n	8000cfa <VerificaErro+0x82>
{
	return errorEndHeader;
 8000cf6:	2339      	movs	r3, #57	; 0x39
 8000cf8:	e000      	b.n	8000cfc <VerificaErro+0x84>
}
return OK;
 8000cfa:	2341      	movs	r3, #65	; 0x41

}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	bd98      	pop	{r3, r4, r7, pc}
 8000d00:	20000340 	.word	0x20000340
 8000d04:	200002bc 	.word	0x200002bc
 8000d08:	40011000 	.word	0x40011000
 8000d0c:	200002d8 	.word	0x200002d8

08000d10 <command>:

void command(char *ReceivedChar)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]

static int FirstData = 0;
/*	int ReceivedInt = *ReceivedChar - '\0';*/
if (FirstData == 0)
 8000d18:	4b63      	ldr	r3, [pc, #396]	; (8000ea8 <command+0x198>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d10a      	bne.n	8000d36 <command+0x26>
{
RXBufferArray[0] = ReceivedChar[0];
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	781a      	ldrb	r2, [r3, #0]
 8000d24:	4b61      	ldr	r3, [pc, #388]	; (8000eac <command+0x19c>)
 8000d26:	701a      	strb	r2, [r3, #0]
FirstData = 1;
 8000d28:	4b5f      	ldr	r3, [pc, #380]	; (8000ea8 <command+0x198>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	601a      	str	r2, [r3, #0]
uart_state = Origem;
 8000d2e:	4b60      	ldr	r3, [pc, #384]	; (8000eb0 <command+0x1a0>)
 8000d30:	2237      	movs	r2, #55	; 0x37
 8000d32:	701a      	strb	r2, [r3, #0]
  default:
	uart_state = iddle;
  }
}
}
}
 8000d34:	e0b3      	b.n	8000e9e <command+0x18e>
if (uart_state != iddle)
 8000d36:	4b5e      	ldr	r3, [pc, #376]	; (8000eb0 <command+0x1a0>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b49      	cmp	r3, #73	; 0x49
 8000d3c:	f000 80ac 	beq.w	8000e98 <command+0x188>
  switch (uart_state) {
 8000d40:	4b5b      	ldr	r3, [pc, #364]	; (8000eb0 <command+0x1a0>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	3b37      	subs	r3, #55	; 0x37
 8000d46:	2b0d      	cmp	r3, #13
 8000d48:	f200 80a2 	bhi.w	8000e90 <command+0x180>
 8000d4c:	a201      	add	r2, pc, #4	; (adr r2, 8000d54 <command+0x44>)
 8000d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d52:	bf00      	nop
 8000d54:	08000d8d 	.word	0x08000d8d
 8000d58:	08000d9d 	.word	0x08000d9d
 8000d5c:	08000dad 	.word	0x08000dad
 8000d60:	08000e91 	.word	0x08000e91
 8000d64:	08000e91 	.word	0x08000e91
 8000d68:	08000e91 	.word	0x08000e91
 8000d6c:	08000e91 	.word	0x08000e91
 8000d70:	08000e91 	.word	0x08000e91
 8000d74:	08000e91 	.word	0x08000e91
 8000d78:	08000e91 	.word	0x08000e91
 8000d7c:	08000dbd 	.word	0x08000dbd
 8000d80:	08000df1 	.word	0x08000df1
 8000d84:	08000e31 	.word	0x08000e31
 8000d88:	08000e5f 	.word	0x08000e5f
		RXBufferArray[1] = ReceivedChar[1];
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	785a      	ldrb	r2, [r3, #1]
 8000d90:	4b46      	ldr	r3, [pc, #280]	; (8000eac <command+0x19c>)
 8000d92:	705a      	strb	r2, [r3, #1]
		uart_state = Destino;
 8000d94:	4b46      	ldr	r3, [pc, #280]	; (8000eb0 <command+0x1a0>)
 8000d96:	2238      	movs	r2, #56	; 0x38
 8000d98:	701a      	strb	r2, [r3, #0]
	break;
 8000d9a:	e080      	b.n	8000e9e <command+0x18e>
		RXBufferArray[2] = ReceivedChar[2];
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	789a      	ldrb	r2, [r3, #2]
 8000da0:	4b42      	ldr	r3, [pc, #264]	; (8000eac <command+0x19c>)
 8000da2:	709a      	strb	r2, [r3, #2]
		uart_state = Funcao;
 8000da4:	4b42      	ldr	r3, [pc, #264]	; (8000eb0 <command+0x1a0>)
 8000da6:	2239      	movs	r2, #57	; 0x39
 8000da8:	701a      	strb	r2, [r3, #0]
	break;
 8000daa:	e078      	b.n	8000e9e <command+0x18e>
		RXBufferArray[3] = ReceivedChar[3];
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	78da      	ldrb	r2, [r3, #3]
 8000db0:	4b3e      	ldr	r3, [pc, #248]	; (8000eac <command+0x19c>)
 8000db2:	70da      	strb	r2, [r3, #3]
		uart_state = DadosCount;
 8000db4:	4b3e      	ldr	r3, [pc, #248]	; (8000eb0 <command+0x1a0>)
 8000db6:	2241      	movs	r2, #65	; 0x41
 8000db8:	701a      	strb	r2, [r3, #0]
	break;
 8000dba:	e070      	b.n	8000e9e <command+0x18e>
	if(ReceivedChar[4]>0)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3304      	adds	r3, #4
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d007      	beq.n	8000dd6 <command+0xc6>
		RXBufferArray[4] = ReceivedChar[4];
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	791a      	ldrb	r2, [r3, #4]
 8000dca:	4b38      	ldr	r3, [pc, #224]	; (8000eac <command+0x19c>)
 8000dcc:	711a      	strb	r2, [r3, #4]
		uart_state = Dados;
 8000dce:	4b38      	ldr	r3, [pc, #224]	; (8000eb0 <command+0x1a0>)
 8000dd0:	2242      	movs	r2, #66	; 0x42
 8000dd2:	701a      	strb	r2, [r3, #0]
	break;
 8000dd4:	e062      	b.n	8000e9c <command+0x18c>
	else if (ReceivedChar[4]==0)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3304      	adds	r3, #4
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d15d      	bne.n	8000e9c <command+0x18c>
		RXBufferArray[4] = ReceivedChar[4];
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	791a      	ldrb	r2, [r3, #4]
 8000de4:	4b31      	ldr	r3, [pc, #196]	; (8000eac <command+0x19c>)
 8000de6:	711a      	strb	r2, [r3, #4]
		uart_state = CheckSum;
 8000de8:	4b31      	ldr	r3, [pc, #196]	; (8000eb0 <command+0x1a0>)
 8000dea:	2243      	movs	r2, #67	; 0x43
 8000dec:	701a      	strb	r2, [r3, #0]
	break;
 8000dee:	e055      	b.n	8000e9c <command+0x18c>
	  RXBufferArray[5+i] = ReceivedChar[5+i];
 8000df0:	4b30      	ldr	r3, [pc, #192]	; (8000eb4 <command+0x1a4>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	3305      	adds	r3, #5
 8000df6:	461a      	mov	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	441a      	add	r2, r3
 8000dfc:	4b2d      	ldr	r3, [pc, #180]	; (8000eb4 <command+0x1a4>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	3305      	adds	r3, #5
 8000e02:	7811      	ldrb	r1, [r2, #0]
 8000e04:	4a29      	ldr	r2, [pc, #164]	; (8000eac <command+0x19c>)
 8000e06:	54d1      	strb	r1, [r2, r3]
	  i++;
 8000e08:	4b2a      	ldr	r3, [pc, #168]	; (8000eb4 <command+0x1a4>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	4a29      	ldr	r2, [pc, #164]	; (8000eb4 <command+0x1a4>)
 8000e10:	6013      	str	r3, [r2, #0]
	  if(i<RXBufferArray[4])
 8000e12:	4b26      	ldr	r3, [pc, #152]	; (8000eac <command+0x19c>)
 8000e14:	791b      	ldrb	r3, [r3, #4]
 8000e16:	461a      	mov	r2, r3
 8000e18:	4b26      	ldr	r3, [pc, #152]	; (8000eb4 <command+0x1a4>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	dd03      	ble.n	8000e28 <command+0x118>
		  uart_state = Dados;
 8000e20:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <command+0x1a0>)
 8000e22:	2242      	movs	r2, #66	; 0x42
 8000e24:	701a      	strb	r2, [r3, #0]
	  break;
 8000e26:	e03a      	b.n	8000e9e <command+0x18e>
		  uart_state = CheckSum;
 8000e28:	4b21      	ldr	r3, [pc, #132]	; (8000eb0 <command+0x1a0>)
 8000e2a:	2243      	movs	r2, #67	; 0x43
 8000e2c:	701a      	strb	r2, [r3, #0]
	  break;
 8000e2e:	e036      	b.n	8000e9e <command+0x18e>
	  RXBufferArray[5+i] = ReceivedChar[5+i];
 8000e30:	4b20      	ldr	r3, [pc, #128]	; (8000eb4 <command+0x1a4>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	3305      	adds	r3, #5
 8000e36:	461a      	mov	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	441a      	add	r2, r3
 8000e3c:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <command+0x1a4>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	3305      	adds	r3, #5
 8000e42:	7811      	ldrb	r1, [r2, #0]
 8000e44:	4a19      	ldr	r2, [pc, #100]	; (8000eac <command+0x19c>)
 8000e46:	54d1      	strb	r1, [r2, r3]
	  checksum = Checksum(RXBufferArray);
 8000e48:	4818      	ldr	r0, [pc, #96]	; (8000eac <command+0x19c>)
 8000e4a:	f000 fd4b 	bl	80018e4 <Checksum>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <command+0x1a8>)
 8000e54:	701a      	strb	r2, [r3, #0]
	  uart_state = Fim;
 8000e56:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <command+0x1a0>)
 8000e58:	2244      	movs	r2, #68	; 0x44
 8000e5a:	701a      	strb	r2, [r3, #0]
  break;
 8000e5c:	e01f      	b.n	8000e9e <command+0x18e>
	  RXBufferArray[6+i] = ReceivedChar[6+i];
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <command+0x1a4>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	3306      	adds	r3, #6
 8000e64:	461a      	mov	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	441a      	add	r2, r3
 8000e6a:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <command+0x1a4>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	3306      	adds	r3, #6
 8000e70:	7811      	ldrb	r1, [r2, #0]
 8000e72:	4a0e      	ldr	r2, [pc, #56]	; (8000eac <command+0x19c>)
 8000e74:	54d1      	strb	r1, [r2, r3]
	  EndReception = Fim;
 8000e76:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <command+0x1ac>)
 8000e78:	2244      	movs	r2, #68	; 0x44
 8000e7a:	701a      	strb	r2, [r3, #0]
	  i=0;
 8000e7c:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <command+0x1a4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
	  FirstData = 0;
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <command+0x198>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
	  uart_state = iddle;
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <command+0x1a0>)
 8000e8a:	2249      	movs	r2, #73	; 0x49
 8000e8c:	701a      	strb	r2, [r3, #0]
	break;
 8000e8e:	e006      	b.n	8000e9e <command+0x18e>
	uart_state = iddle;
 8000e90:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <command+0x1a0>)
 8000e92:	2249      	movs	r2, #73	; 0x49
 8000e94:	701a      	strb	r2, [r3, #0]
}
 8000e96:	e002      	b.n	8000e9e <command+0x18e>
}
 8000e98:	bf00      	nop
 8000e9a:	e000      	b.n	8000e9e <command+0x18e>
	break;
 8000e9c:	bf00      	nop
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200003a8 	.word	0x200003a8
 8000eac:	200002bc 	.word	0x200002bc
 8000eb0:	2000036f 	.word	0x2000036f
 8000eb4:	200002c8 	.word	0x200002c8
 8000eb8:	2000036c 	.word	0x2000036c
 8000ebc:	200002b7 	.word	0x200002b7

08000ec0 <selectCommand>:

int selectCommand(struct Recepcao receive_message)

{
 8000ec0:	b084      	sub	sp, #16
 8000ec2:	b490      	push	{r4, r7}
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	f107 0408 	add.w	r4, r7, #8
 8000eca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
if (receive_message.funcao == 1)
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d103      	bne.n	8000edc <selectCommand+0x1c>
 {
	  StateMachine = Identification;
 8000ed4:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <selectCommand+0x7c>)
 8000ed6:	2231      	movs	r2, #49	; 0x31
 8000ed8:	701a      	strb	r2, [r3, #0]
 8000eda:	e028      	b.n	8000f2e <selectCommand+0x6e>
 }
  else if (receive_message.funcao == 2)
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d103      	bne.n	8000eea <selectCommand+0x2a>
  {
	  StateMachine = Config;
 8000ee2:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <selectCommand+0x7c>)
 8000ee4:	2232      	movs	r2, #50	; 0x32
 8000ee6:	701a      	strb	r2, [r3, #0]
 8000ee8:	e021      	b.n	8000f2e <selectCommand+0x6e>
  }
  else if (receive_message.funcao == 3)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	2b03      	cmp	r3, #3
 8000eee:	d103      	bne.n	8000ef8 <selectCommand+0x38>
  {
	  StateMachine = Start;
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <selectCommand+0x7c>)
 8000ef2:	2233      	movs	r2, #51	; 0x33
 8000ef4:	701a      	strb	r2, [r3, #0]
 8000ef6:	e01a      	b.n	8000f2e <selectCommand+0x6e>
  }
else if (receive_message.funcao == 4)
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	2b04      	cmp	r3, #4
 8000efc:	d103      	bne.n	8000f06 <selectCommand+0x46>
{
	  StateMachine = Read;
 8000efe:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <selectCommand+0x7c>)
 8000f00:	2234      	movs	r2, #52	; 0x34
 8000f02:	701a      	strb	r2, [r3, #0]
 8000f04:	e013      	b.n	8000f2e <selectCommand+0x6e>
}
else if (receive_message.funcao == 5)
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	2b05      	cmp	r3, #5
 8000f0a:	d103      	bne.n	8000f14 <selectCommand+0x54>
{
	  StateMachine = ReadError;
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <selectCommand+0x7c>)
 8000f0e:	2235      	movs	r2, #53	; 0x35
 8000f10:	701a      	strb	r2, [r3, #0]
 8000f12:	e00c      	b.n	8000f2e <selectCommand+0x6e>
}
else if (receive_message.funcao == 6)
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	2b06      	cmp	r3, #6
 8000f18:	d103      	bne.n	8000f22 <selectCommand+0x62>
{
	  StateMachine = Stop;
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <selectCommand+0x7c>)
 8000f1c:	2236      	movs	r2, #54	; 0x36
 8000f1e:	701a      	strb	r2, [r3, #0]
 8000f20:	e005      	b.n	8000f2e <selectCommand+0x6e>
}
else if (receive_message.funcao == 7)
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	2b07      	cmp	r3, #7
 8000f26:	d102      	bne.n	8000f2e <selectCommand+0x6e>
{
	  StateMachine = Codification;
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <selectCommand+0x7c>)
 8000f2a:	2237      	movs	r2, #55	; 0x37
 8000f2c:	701a      	strb	r2, [r3, #0]
}
return StateMachine;
 8000f2e:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <selectCommand+0x7c>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc90      	pop	{r4, r7}
 8000f38:	b004      	add	sp, #16
 8000f3a:	4770      	bx	lr
 8000f3c:	2000036e 	.word	0x2000036e

08000f40 <getID>:

void getID()
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
	uint16_t codCefise=0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	80fb      	strh	r3, [r7, #6]
	receive_message.dadosCount = 1;
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <getID+0x34>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	611a      	str	r2, [r3, #16]
	FLASH_le_16bits(END_INICIAL, &codCefise);
 8000f50:	1dbb      	adds	r3, r7, #6
 8000f52:	4619      	mov	r1, r3
 8000f54:	4808      	ldr	r0, [pc, #32]	; (8000f78 <getID+0x38>)
 8000f56:	f7ff f936 	bl	80001c6 <FLASH_le_16bits>
	if(codCefise != 0xFFFF)
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d003      	beq.n	8000f6c <getID+0x2c>
	{
		infoDevice.Id = codCefise;
 8000f64:	88fb      	ldrh	r3, [r7, #6]
 8000f66:	461a      	mov	r2, r3
 8000f68:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <getID+0x3c>)
 8000f6a:	601a      	str	r2, [r3, #0]
	}
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000340 	.word	0x20000340
 8000f78:	0800f000 	.word	0x0800f000
 8000f7c:	2000035c 	.word	0x2000035c

08000f80 <setID>:

void setID()
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
	uint16_t codCefise=0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	80fb      	strh	r3, [r7, #6]
	receive_message.dadosCount = 1;
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <setID+0x3c>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	611a      	str	r2, [r3, #16]
	FLASH_apaga(END_INICIAL, 1);
 8000f90:	2101      	movs	r1, #1
 8000f92:	480b      	ldr	r0, [pc, #44]	; (8000fc0 <setID+0x40>)
 8000f94:	f7ff f8da 	bl	800014c <FLASH_apaga>
	codCefise = dados[0];
 8000f98:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <setID+0x44>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	80fb      	strh	r3, [r7, #6]
	infoDevice.Id = codCefise;
 8000fa0:	88fb      	ldrh	r3, [r7, #6]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <setID+0x48>)
 8000fa6:	601a      	str	r2, [r3, #0]
	FLASH_escreve_16bits(END_INICIAL, &codCefise);
 8000fa8:	1dbb      	adds	r3, r7, #6
 8000faa:	4619      	mov	r1, r3
 8000fac:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <setID+0x40>)
 8000fae:	f7ff f8ed 	bl	800018c <FLASH_escreve_16bits>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000340 	.word	0x20000340
 8000fc0:	0800f000 	.word	0x0800f000
 8000fc4:	200002d8 	.word	0x200002d8
 8000fc8:	2000035c 	.word	0x2000035c

08000fcc <DeviceParamenter>:

void DeviceParamenter(struct Recepcao message)
{
 8000fcc:	b084      	sub	sp, #16
 8000fce:	b490      	push	{r4, r7}
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	f107 0408 	add.w	r4, r7, #8
 8000fd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
timeTotal = dados[1];
 8000fda:	4b0c      	ldr	r3, [pc, #48]	; (800100c <DeviceParamenter+0x40>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <DeviceParamenter+0x44>)
 8000fe2:	701a      	strb	r2, [r3, #0]
switch(dados[0])
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <DeviceParamenter+0x40>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d002      	beq.n	8000ff2 <DeviceParamenter+0x26>
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d004      	beq.n	8000ffa <DeviceParamenter+0x2e>
	case 0x02:
		readStatus = MAN;
	break;

}
}
 8000ff0:	e007      	b.n	8001002 <DeviceParamenter+0x36>
		readStatus = AUTO;
 8000ff2:	4b08      	ldr	r3, [pc, #32]	; (8001014 <DeviceParamenter+0x48>)
 8000ff4:	2246      	movs	r2, #70	; 0x46
 8000ff6:	701a      	strb	r2, [r3, #0]
	break;
 8000ff8:	e003      	b.n	8001002 <DeviceParamenter+0x36>
		readStatus = MAN;
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <DeviceParamenter+0x48>)
 8000ffc:	224d      	movs	r2, #77	; 0x4d
 8000ffe:	701a      	strb	r2, [r3, #0]
	break;
 8001000:	bf00      	nop
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	bc90      	pop	{r4, r7}
 8001008:	b004      	add	sp, #16
 800100a:	4770      	bx	lr
 800100c:	200002d8 	.word	0x200002d8
 8001010:	20000339 	.word	0x20000339
 8001014:	200002c6 	.word	0x200002c6

08001018 <StartDevice>:

char StartDevice(char deviceFlag)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
char startEncoder;
if(deviceFlag == 0)
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d108      	bne.n	800103a <StartDevice+0x22>
{
	startEncoder = HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8001028:	213c      	movs	r1, #60	; 0x3c
 800102a:	4809      	ldr	r0, [pc, #36]	; (8001050 <StartDevice+0x38>)
 800102c:	f004 f890 	bl	8005150 <HAL_TIM_Encoder_Start_IT>
 8001030:	4603      	mov	r3, r0
 8001032:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8001034:	200a      	movs	r0, #10
 8001036:	f000 ffa9 	bl	8001f8c <HAL_Delay>
	/*startEncoder = HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_1);*/
}
if(startEncoder == HAL_OK)
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d101      	bne.n	8001044 <StartDevice+0x2c>
	return 1;
 8001040:	2301      	movs	r3, #1
 8001042:	e000      	b.n	8001046 <StartDevice+0x2e>
else return 0;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	2000019c 	.word	0x2000019c

08001054 <TransmitData>:

void TransmitData(struct Recepcao Send_message,int32_t *dataToSend, uint8_t dataLenght)
{
 8001054:	b084      	sub	sp, #16
 8001056:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800105a:	b08b      	sub	sp, #44	; 0x2c
 800105c:	af00      	add	r7, sp, #0
 800105e:	f107 0650 	add.w	r6, r7, #80	; 0x50
 8001062:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8001066:	466b      	mov	r3, sp
 8001068:	607b      	str	r3, [r7, #4]
uint8_t txBuffer[dataLenght];
 800106a:	f897 6070 	ldrb.w	r6, [r7, #112]	; 0x70
 800106e:	4633      	mov	r3, r6
 8001070:	3b01      	subs	r3, #1
 8001072:	623b      	str	r3, [r7, #32]
 8001074:	b2f3      	uxtb	r3, r6
 8001076:	2200      	movs	r2, #0
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	60fa      	str	r2, [r7, #12]
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	f04f 0300 	mov.w	r3, #0
 8001084:	68f9      	ldr	r1, [r7, #12]
 8001086:	00cb      	lsls	r3, r1, #3
 8001088:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800108c:	4684      	mov	ip, r0
 800108e:	ea43 735c 	orr.w	r3, r3, ip, lsr #29
 8001092:	4601      	mov	r1, r0
 8001094:	00ca      	lsls	r2, r1, #3
 8001096:	b2f3      	uxtb	r3, r6
 8001098:	2200      	movs	r2, #0
 800109a:	469a      	mov	sl, r3
 800109c:	4693      	mov	fp, r2
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	f04f 0300 	mov.w	r3, #0
 80010a6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80010aa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80010ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80010b2:	4633      	mov	r3, r6
 80010b4:	3307      	adds	r3, #7
 80010b6:	08db      	lsrs	r3, r3, #3
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	ebad 0d03 	sub.w	sp, sp, r3
 80010be:	466b      	mov	r3, sp
 80010c0:	3300      	adds	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]
static uint8_t txBufferRead[67];
uint8_t errorBuffer[dataLenght];
 80010c4:	f897 1070 	ldrb.w	r1, [r7, #112]	; 0x70
 80010c8:	460b      	mov	r3, r1
 80010ca:	3b01      	subs	r3, #1
 80010cc:	61bb      	str	r3, [r7, #24]
 80010ce:	b2cb      	uxtb	r3, r1
 80010d0:	2200      	movs	r2, #0
 80010d2:	4698      	mov	r8, r3
 80010d4:	4691      	mov	r9, r2
 80010d6:	f04f 0200 	mov.w	r2, #0
 80010da:	f04f 0300 	mov.w	r3, #0
 80010de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80010e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80010e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80010ea:	b2cb      	uxtb	r3, r1
 80010ec:	2200      	movs	r2, #0
 80010ee:	461c      	mov	r4, r3
 80010f0:	4615      	mov	r5, r2
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	f04f 0300 	mov.w	r3, #0
 80010fa:	00eb      	lsls	r3, r5, #3
 80010fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001100:	00e2      	lsls	r2, r4, #3
 8001102:	460b      	mov	r3, r1
 8001104:	3307      	adds	r3, #7
 8001106:	08db      	lsrs	r3, r3, #3
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	ebad 0d03 	sub.w	sp, sp, r3
 800110e:	466b      	mov	r3, sp
 8001110:	3300      	adds	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
uint8_t counter = 2;
 8001114:	2302      	movs	r3, #2
 8001116:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
uint8_t countArray = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
uint8_t counterAux = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
switch(StateMachine)
 8001126:	4ba8      	ldr	r3, [pc, #672]	; (80013c8 <TransmitData+0x374>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	3b31      	subs	r3, #49	; 0x31
 800112c:	2b14      	cmp	r3, #20
 800112e:	f200 8369 	bhi.w	8001804 <TransmitData+0x7b0>
 8001132:	a201      	add	r2, pc, #4	; (adr r2, 8001138 <TransmitData+0xe4>)
 8001134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001138:	0800118d 	.word	0x0800118d
 800113c:	0800123f 	.word	0x0800123f
 8001140:	08001289 	.word	0x08001289
 8001144:	080012d3 	.word	0x080012d3
 8001148:	080013e1 	.word	0x080013e1
 800114c:	0800140f 	.word	0x0800140f
 8001150:	080011e7 	.word	0x080011e7
 8001154:	08001805 	.word	0x08001805
 8001158:	08001805 	.word	0x08001805
 800115c:	08001805 	.word	0x08001805
 8001160:	08001805 	.word	0x08001805
 8001164:	08001805 	.word	0x08001805
 8001168:	08001805 	.word	0x08001805
 800116c:	08001805 	.word	0x08001805
 8001170:	08001805 	.word	0x08001805
 8001174:	08001805 	.word	0x08001805
 8001178:	08001805 	.word	0x08001805
 800117c:	08001805 	.word	0x08001805
 8001180:	08001805 	.word	0x08001805
 8001184:	08001805 	.word	0x08001805
 8001188:	0800145b 	.word	0x0800145b
{
	case Identification:
		txBuffer[0] = Send_message.inicio;
 800118c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800118e:	b2da      	uxtb	r2, r3
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	701a      	strb	r2, [r3, #0]
		txBuffer[1] = Send_message.endDestino;
 8001194:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001196:	b2da      	uxtb	r2, r3
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	705a      	strb	r2, [r3, #1]
		txBuffer[2] = Send_message.endOrigem;
 800119c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	709a      	strb	r2, [r3, #2]
		txBuffer[3] = Send_message.funcao;
 80011a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	70da      	strb	r2, [r3, #3]
		txBuffer[4] = Send_message.dadosCount;
 80011ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	711a      	strb	r2, [r3, #4]
		if(Send_message.dadosCount>0)
 80011b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	dd04      	ble.n	80011c4 <TransmitData+0x170>
		{
			txBuffer[5] = infoDevice.Id;
 80011ba:	4b84      	ldr	r3, [pc, #528]	; (80013cc <TransmitData+0x378>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	715a      	strb	r2, [r3, #5]
		}
		txBuffer[6] = Checksum(txBuffer);
 80011c4:	69f8      	ldr	r0, [r7, #28]
 80011c6:	f000 fb8d 	bl	80018e4 <Checksum>
 80011ca:	4603      	mov	r3, r0
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	719a      	strb	r2, [r3, #6]
		txBuffer[7] = Send_message.fim;
 80011d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	71da      	strb	r2, [r3, #7]
		CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 80011da:	b2b3      	uxth	r3, r6
 80011dc:	4619      	mov	r1, r3
 80011de:	69f8      	ldr	r0, [r7, #28]
 80011e0:	f009 fb02 	bl	800a7e8 <CDC_Transmit_FS>

	break;
 80011e4:	e30e      	b.n	8001804 <TransmitData+0x7b0>

	case Codification:
		txBuffer[0] = Send_message.inicio;
 80011e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	701a      	strb	r2, [r3, #0]
		txBuffer[1] = Send_message.endDestino;
 80011ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	705a      	strb	r2, [r3, #1]
		txBuffer[2] = Send_message.endOrigem;
 80011f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	709a      	strb	r2, [r3, #2]
		txBuffer[3] = 0x07;
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	2207      	movs	r2, #7
 8001202:	70da      	strb	r2, [r3, #3]
		txBuffer[4] = Send_message.dadosCount;
 8001204:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001206:	b2da      	uxtb	r2, r3
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	711a      	strb	r2, [r3, #4]
		if(Send_message.dadosCount>0)
 800120c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800120e:	2b00      	cmp	r3, #0
 8001210:	dd04      	ble.n	800121c <TransmitData+0x1c8>
		{
			txBuffer[5] = infoDevice.Id;
 8001212:	4b6e      	ldr	r3, [pc, #440]	; (80013cc <TransmitData+0x378>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	b2da      	uxtb	r2, r3
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	715a      	strb	r2, [r3, #5]
		}
		txBuffer[6] = Checksum(txBuffer);
 800121c:	69f8      	ldr	r0, [r7, #28]
 800121e:	f000 fb61 	bl	80018e4 <Checksum>
 8001222:	4603      	mov	r3, r0
 8001224:	b2da      	uxtb	r2, r3
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	719a      	strb	r2, [r3, #6]
		txBuffer[7] = Send_message.fim;
 800122a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800122c:	b2da      	uxtb	r2, r3
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	71da      	strb	r2, [r3, #7]
		CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 8001232:	b2b3      	uxth	r3, r6
 8001234:	4619      	mov	r1, r3
 8001236:	69f8      	ldr	r0, [r7, #28]
 8001238:	f009 fad6 	bl	800a7e8 <CDC_Transmit_FS>

	break;
 800123c:	e2e2      	b.n	8001804 <TransmitData+0x7b0>
	case Config:
		txBuffer[0] = Send_message.inicio;
 800123e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001240:	b2da      	uxtb	r2, r3
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	701a      	strb	r2, [r3, #0]
		txBuffer[1] = infoDevice.Id;
 8001246:	4b61      	ldr	r3, [pc, #388]	; (80013cc <TransmitData+0x378>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	705a      	strb	r2, [r3, #1]
		txBuffer[2] = Send_message.endOrigem;
 8001250:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001252:	b2da      	uxtb	r2, r3
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	709a      	strb	r2, [r3, #2]
		txBuffer[3] = Send_message.funcao;
 8001258:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800125a:	b2da      	uxtb	r2, r3
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	70da      	strb	r2, [r3, #3]
		txBuffer[4] = 0x00;
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	2200      	movs	r2, #0
 8001264:	711a      	strb	r2, [r3, #4]
		txBuffer[5] = Checksum(txBuffer);
 8001266:	69f8      	ldr	r0, [r7, #28]
 8001268:	f000 fb3c 	bl	80018e4 <Checksum>
 800126c:	4603      	mov	r3, r0
 800126e:	b2da      	uxtb	r2, r3
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	715a      	strb	r2, [r3, #5]
		txBuffer[6] = Send_message.fim;
 8001274:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001276:	b2da      	uxtb	r2, r3
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	719a      	strb	r2, [r3, #6]
		CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 800127c:	b2b3      	uxth	r3, r6
 800127e:	4619      	mov	r1, r3
 8001280:	69f8      	ldr	r0, [r7, #28]
 8001282:	f009 fab1 	bl	800a7e8 <CDC_Transmit_FS>

	break;
 8001286:	e2bd      	b.n	8001804 <TransmitData+0x7b0>
	case Start: // Msg de inicio de dispositivo
		txBuffer[0] = Send_message.inicio;
 8001288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800128a:	b2da      	uxtb	r2, r3
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	701a      	strb	r2, [r3, #0]
		txBuffer[1] = infoDevice.Id;
 8001290:	4b4e      	ldr	r3, [pc, #312]	; (80013cc <TransmitData+0x378>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	b2da      	uxtb	r2, r3
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	705a      	strb	r2, [r3, #1]
		txBuffer[2] = Send_message.endOrigem;
 800129a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800129c:	b2da      	uxtb	r2, r3
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	709a      	strb	r2, [r3, #2]
		txBuffer[3] = 0x03;
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	2203      	movs	r2, #3
 80012a6:	70da      	strb	r2, [r3, #3]
		txBuffer[4] = Send_message.dadosCount;
 80012a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	711a      	strb	r2, [r3, #4]
		txBuffer[5] = Checksum(txBuffer);
 80012b0:	69f8      	ldr	r0, [r7, #28]
 80012b2:	f000 fb17 	bl	80018e4 <Checksum>
 80012b6:	4603      	mov	r3, r0
 80012b8:	b2da      	uxtb	r2, r3
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	715a      	strb	r2, [r3, #5]
		txBuffer[6] = Send_message.fim;
 80012be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	719a      	strb	r2, [r3, #6]
		CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 80012c6:	b2b3      	uxth	r3, r6
 80012c8:	4619      	mov	r1, r3
 80012ca:	69f8      	ldr	r0, [r7, #28]
 80012cc:	f009 fa8c 	bl	800a7e8 <CDC_Transmit_FS>
	break;
 80012d0:	e298      	b.n	8001804 <TransmitData+0x7b0>

	case Read:
		txBufferRead[0] = Send_message.inicio;
 80012d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4b3e      	ldr	r3, [pc, #248]	; (80013d0 <TransmitData+0x37c>)
 80012d8:	701a      	strb	r2, [r3, #0]
		txBufferRead[1] = infoDevice.Id;
 80012da:	4b3c      	ldr	r3, [pc, #240]	; (80013cc <TransmitData+0x378>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	4b3b      	ldr	r3, [pc, #236]	; (80013d0 <TransmitData+0x37c>)
 80012e2:	705a      	strb	r2, [r3, #1]
		txBufferRead[2] = Send_message.endOrigem;
 80012e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	4b39      	ldr	r3, [pc, #228]	; (80013d0 <TransmitData+0x37c>)
 80012ea:	709a      	strb	r2, [r3, #2]
		txBufferRead[3] = 0x04;
 80012ec:	4b38      	ldr	r3, [pc, #224]	; (80013d0 <TransmitData+0x37c>)
 80012ee:	2204      	movs	r2, #4
 80012f0:	70da      	strb	r2, [r3, #3]
		txBufferRead[4] = 0x3C;
 80012f2:	4b37      	ldr	r3, [pc, #220]	; (80013d0 <TransmitData+0x37c>)
 80012f4:	223c      	movs	r2, #60	; 0x3c
 80012f6:	711a      	strb	r2, [r3, #4]
		for(countArray = 0; countArray<10; countArray++)
 80012f8:	2300      	movs	r3, #0
 80012fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80012fe:	e04c      	b.n	800139a <TransmitData+0x346>
		{
			timeEncoder.all = currentTime[countArray];
 8001300:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001304:	4a33      	ldr	r2, [pc, #204]	; (80013d4 <TransmitData+0x380>)
 8001306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800130a:	b29a      	uxth	r2, r3
 800130c:	4b32      	ldr	r3, [pc, #200]	; (80013d8 <TransmitData+0x384>)
 800130e:	801a      	strh	r2, [r3, #0]
			encoderPulso.all = dataToSend[countArray];
 8001310:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001318:	4413      	add	r3, r2
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a2f      	ldr	r2, [pc, #188]	; (80013dc <TransmitData+0x388>)
 800131e:	6013      	str	r3, [r2, #0]
			for(counter = 2; counter>0; counter--)
 8001320:	2302      	movs	r3, #2
 8001322:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001326:	e013      	b.n	8001350 <TransmitData+0x2fc>
			{
				txBufferRead[5+counterAux] = timeEncoder.pt[counter-1];
 8001328:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800132c:	1e5a      	subs	r2, r3, #1
 800132e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001332:	3305      	adds	r3, #5
 8001334:	4928      	ldr	r1, [pc, #160]	; (80013d8 <TransmitData+0x384>)
 8001336:	5c89      	ldrb	r1, [r1, r2]
 8001338:	4a25      	ldr	r2, [pc, #148]	; (80013d0 <TransmitData+0x37c>)
 800133a:	54d1      	strb	r1, [r2, r3]
				counterAux++;
 800133c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001340:	3301      	adds	r3, #1
 8001342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for(counter = 2; counter>0; counter--)
 8001346:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800134a:	3b01      	subs	r3, #1
 800134c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001350:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1e7      	bne.n	8001328 <TransmitData+0x2d4>
			}
			for(counter = 4; counter>0; counter--)
 8001358:	2304      	movs	r3, #4
 800135a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800135e:	e013      	b.n	8001388 <TransmitData+0x334>
			{
				txBufferRead[5+counterAux] = encoderPulso.pt[counter-1];
 8001360:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001364:	1e5a      	subs	r2, r3, #1
 8001366:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800136a:	3305      	adds	r3, #5
 800136c:	491b      	ldr	r1, [pc, #108]	; (80013dc <TransmitData+0x388>)
 800136e:	5c89      	ldrb	r1, [r1, r2]
 8001370:	4a17      	ldr	r2, [pc, #92]	; (80013d0 <TransmitData+0x37c>)
 8001372:	54d1      	strb	r1, [r2, r3]
				counterAux++;
 8001374:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001378:	3301      	adds	r3, #1
 800137a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for(counter = 4; counter>0; counter--)
 800137e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001382:	3b01      	subs	r3, #1
 8001384:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001388:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1e7      	bne.n	8001360 <TransmitData+0x30c>
		for(countArray = 0; countArray<10; countArray++)
 8001390:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001394:	3301      	adds	r3, #1
 8001396:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800139a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800139e:	2b09      	cmp	r3, #9
 80013a0:	d9ae      	bls.n	8001300 <TransmitData+0x2ac>
			}
		}
		txBufferRead[65] = Checksum(txBufferRead);
 80013a2:	480b      	ldr	r0, [pc, #44]	; (80013d0 <TransmitData+0x37c>)
 80013a4:	f000 fa9e 	bl	80018e4 <Checksum>
 80013a8:	4603      	mov	r3, r0
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <TransmitData+0x37c>)
 80013ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		txBufferRead[66] = Send_message.fim;
 80013b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <TransmitData+0x37c>)
 80013b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

		CDC_Transmit_FS((uint8_t*)txBufferRead, sizeof(txBufferRead));
 80013bc:	2143      	movs	r1, #67	; 0x43
 80013be:	4804      	ldr	r0, [pc, #16]	; (80013d0 <TransmitData+0x37c>)
 80013c0:	f009 fa12 	bl	800a7e8 <CDC_Transmit_FS>

	break;
 80013c4:	e21e      	b.n	8001804 <TransmitData+0x7b0>
 80013c6:	bf00      	nop
 80013c8:	2000036e 	.word	0x2000036e
 80013cc:	2000035c 	.word	0x2000035c
 80013d0:	200003ac 	.word	0x200003ac
 80013d4:	20000374 	.word	0x20000374
 80013d8:	20000368 	.word	0x20000368
 80013dc:	20000364 	.word	0x20000364

	case ReadError:
		txBufferRead[0] = 0x0A;
 80013e0:	4b90      	ldr	r3, [pc, #576]	; (8001624 <TransmitData+0x5d0>)
 80013e2:	220a      	movs	r2, #10
 80013e4:	701a      	strb	r2, [r3, #0]
		txBufferRead[3] = 0x05;
 80013e6:	4b8f      	ldr	r3, [pc, #572]	; (8001624 <TransmitData+0x5d0>)
 80013e8:	2205      	movs	r2, #5
 80013ea:	70da      	strb	r2, [r3, #3]
		txBufferRead[65] = Checksum(txBufferRead);
 80013ec:	488d      	ldr	r0, [pc, #564]	; (8001624 <TransmitData+0x5d0>)
 80013ee:	f000 fa79 	bl	80018e4 <Checksum>
 80013f2:	4603      	mov	r3, r0
 80013f4:	b2da      	uxtb	r2, r3
 80013f6:	4b8b      	ldr	r3, [pc, #556]	; (8001624 <TransmitData+0x5d0>)
 80013f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		txBufferRead[66] = 0x0F;
 80013fc:	4b89      	ldr	r3, [pc, #548]	; (8001624 <TransmitData+0x5d0>)
 80013fe:	220f      	movs	r2, #15
 8001400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		CDC_Transmit_FS((uint8_t*)txBufferRead, sizeof(txBufferRead));
 8001404:	2143      	movs	r1, #67	; 0x43
 8001406:	4887      	ldr	r0, [pc, #540]	; (8001624 <TransmitData+0x5d0>)
 8001408:	f009 f9ee 	bl	800a7e8 <CDC_Transmit_FS>
	break;
 800140c:	e1fa      	b.n	8001804 <TransmitData+0x7b0>

	case Stop:
	txBuffer[0] = Send_message.inicio;
 800140e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001410:	b2da      	uxtb	r2, r3
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	701a      	strb	r2, [r3, #0]
	txBuffer[1] = infoDevice.Id;
 8001416:	4b84      	ldr	r3, [pc, #528]	; (8001628 <TransmitData+0x5d4>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	b2da      	uxtb	r2, r3
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	705a      	strb	r2, [r3, #1]
	txBuffer[2] = Send_message.endOrigem;
 8001420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001422:	b2da      	uxtb	r2, r3
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	709a      	strb	r2, [r3, #2]
	txBuffer[3] = Send_message.funcao;
 8001428:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800142a:	b2da      	uxtb	r2, r3
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	70da      	strb	r2, [r3, #3]
	txBuffer[4] = Send_message.dadosCount;
 8001430:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001432:	b2da      	uxtb	r2, r3
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	711a      	strb	r2, [r3, #4]
	txBuffer[5] = Checksum(txBuffer);
 8001438:	69f8      	ldr	r0, [r7, #28]
 800143a:	f000 fa53 	bl	80018e4 <Checksum>
 800143e:	4603      	mov	r3, r0
 8001440:	b2da      	uxtb	r2, r3
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	715a      	strb	r2, [r3, #5]
	txBuffer[6] = Send_message.fim;
 8001446:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001448:	b2da      	uxtb	r2, r3
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	719a      	strb	r2, [r3, #6]
	CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 800144e:	b2b3      	uxth	r3, r6
 8001450:	4619      	mov	r1, r3
 8001452:	69f8      	ldr	r0, [r7, #28]
 8001454:	f009 f9c8 	bl	800a7e8 <CDC_Transmit_FS>
	break;
 8001458:	e1d4      	b.n	8001804 <TransmitData+0x7b0>

	case error:
		if(errorFlag == errorChecksum)
 800145a:	4b74      	ldr	r3, [pc, #464]	; (800162c <TransmitData+0x5d8>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b30      	cmp	r3, #48	; 0x30
 8001460:	d12b      	bne.n	80014ba <TransmitData+0x466>
		{
			txBuffer[0] = Send_message.inicio;
 8001462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001464:	b2da      	uxtb	r2, r3
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 800146a:	4b6f      	ldr	r3, [pc, #444]	; (8001628 <TransmitData+0x5d4>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	b2da      	uxtb	r2, r3
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 8001474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001476:	b2da      	uxtb	r2, r3
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (Send_message.funcao | 0xF0);
 800147c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800147e:	b25b      	sxtb	r3, r3
 8001480:	f063 030f 	orn	r3, r3, #15
 8001484:	b25b      	sxtb	r3, r3
 8001486:	b2da      	uxtb	r2, r3
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	2201      	movs	r2, #1
 8001490:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x00; //codigo de erro
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	2200      	movs	r2, #0
 8001496:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 8001498:	69f8      	ldr	r0, [r7, #28]
 800149a:	f000 fa23 	bl	80018e4 <Checksum>
 800149e:	4603      	mov	r3, r0
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 80014a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 80014ae:	b2b3      	uxth	r3, r6
 80014b0:	4619      	mov	r1, r3
 80014b2:	69f8      	ldr	r0, [r7, #28]
 80014b4:	f009 f998 	bl	800a7e8 <CDC_Transmit_FS>
			txBuffer[5] = 0x09;
			txBuffer[6] = Checksum(txBuffer);
			txBuffer[7] = Send_message.fim;
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
		}
		break;
 80014b8:	e1a3      	b.n	8001802 <TransmitData+0x7ae>
		else if (errorFlag == timeOut)
 80014ba:	4b5c      	ldr	r3, [pc, #368]	; (800162c <TransmitData+0x5d8>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b31      	cmp	r3, #49	; 0x31
 80014c0:	d12b      	bne.n	800151a <TransmitData+0x4c6>
			txBuffer[0] = Send_message.inicio;
 80014c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 80014ca:	4b57      	ldr	r3, [pc, #348]	; (8001628 <TransmitData+0x5d4>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 80014d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (Send_message.funcao | 0xF0);
 80014dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014de:	b25b      	sxtb	r3, r3
 80014e0:	f063 030f 	orn	r3, r3, #15
 80014e4:	b25b      	sxtb	r3, r3
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	2201      	movs	r2, #1
 80014f0:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x01;
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	2201      	movs	r2, #1
 80014f6:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 80014f8:	69f8      	ldr	r0, [r7, #28]
 80014fa:	f000 f9f3 	bl	80018e4 <Checksum>
 80014fe:	4603      	mov	r3, r0
 8001500:	b2da      	uxtb	r2, r3
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 8001506:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001508:	b2da      	uxtb	r2, r3
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 800150e:	b2b3      	uxth	r3, r6
 8001510:	4619      	mov	r1, r3
 8001512:	69f8      	ldr	r0, [r7, #28]
 8001514:	f009 f968 	bl	800a7e8 <CDC_Transmit_FS>
		break;
 8001518:	e173      	b.n	8001802 <TransmitData+0x7ae>
		else if (errorFlag == noAddress)
 800151a:	4b44      	ldr	r3, [pc, #272]	; (800162c <TransmitData+0x5d8>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b32      	cmp	r3, #50	; 0x32
 8001520:	d126      	bne.n	8001570 <TransmitData+0x51c>
			txBuffer[0] = Send_message.inicio;
 8001522:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001524:	b2da      	uxtb	r2, r3
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 800152a:	4b3f      	ldr	r3, [pc, #252]	; (8001628 <TransmitData+0x5d4>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	b2da      	uxtb	r2, r3
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 8001534:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001536:	b2da      	uxtb	r2, r3
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (0x01 | 0xF0);
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	22f1      	movs	r2, #241	; 0xf1
 8001540:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	2201      	movs	r2, #1
 8001546:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x02;
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	2202      	movs	r2, #2
 800154c:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 800154e:	69f8      	ldr	r0, [r7, #28]
 8001550:	f000 f9c8 	bl	80018e4 <Checksum>
 8001554:	4603      	mov	r3, r0
 8001556:	b2da      	uxtb	r2, r3
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 800155c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800155e:	b2da      	uxtb	r2, r3
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 8001564:	b2b3      	uxth	r3, r6
 8001566:	4619      	mov	r1, r3
 8001568:	69f8      	ldr	r0, [r7, #28]
 800156a:	f009 f93d 	bl	800a7e8 <CDC_Transmit_FS>
		break;
 800156e:	e148      	b.n	8001802 <TransmitData+0x7ae>
		else if (errorFlag == errorAddress)
 8001570:	4b2e      	ldr	r3, [pc, #184]	; (800162c <TransmitData+0x5d8>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b33      	cmp	r3, #51	; 0x33
 8001576:	d125      	bne.n	80015c4 <TransmitData+0x570>
			txBuffer[0] = Send_message.inicio;
 8001578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800157a:	b2da      	uxtb	r2, r3
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 8001580:	4b29      	ldr	r3, [pc, #164]	; (8001628 <TransmitData+0x5d4>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	b2da      	uxtb	r2, r3
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 800158a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800158c:	b2da      	uxtb	r2, r3
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (0x01 | 0xF0);
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	22f1      	movs	r2, #241	; 0xf1
 8001596:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	2201      	movs	r2, #1
 800159c:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x03;
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	2203      	movs	r2, #3
 80015a2:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 80015a4:	69f8      	ldr	r0, [r7, #28]
 80015a6:	f000 f99d 	bl	80018e4 <Checksum>
 80015aa:	4603      	mov	r3, r0
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = 0x0F;
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	220f      	movs	r2, #15
 80015b6:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 80015b8:	b2b3      	uxth	r3, r6
 80015ba:	4619      	mov	r1, r3
 80015bc:	69f8      	ldr	r0, [r7, #28]
 80015be:	f009 f913 	bl	800a7e8 <CDC_Transmit_FS>
		break;
 80015c2:	e11e      	b.n	8001802 <TransmitData+0x7ae>
		else if (errorFlag == errorDevice)
 80015c4:	4b19      	ldr	r3, [pc, #100]	; (800162c <TransmitData+0x5d8>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b34      	cmp	r3, #52	; 0x34
 80015ca:	d131      	bne.n	8001630 <TransmitData+0x5dc>
			txBuffer[0] = Send_message.inicio;
 80015cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 80015d4:	4b14      	ldr	r3, [pc, #80]	; (8001628 <TransmitData+0x5d4>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 80015de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (Send_message.funcao | 0xF0);
 80015e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015e8:	b25b      	sxtb	r3, r3
 80015ea:	f063 030f 	orn	r3, r3, #15
 80015ee:	b25b      	sxtb	r3, r3
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	2201      	movs	r2, #1
 80015fa:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x04;
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	2204      	movs	r2, #4
 8001600:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 8001602:	69f8      	ldr	r0, [r7, #28]
 8001604:	f000 f96e 	bl	80018e4 <Checksum>
 8001608:	4603      	mov	r3, r0
 800160a:	b2da      	uxtb	r2, r3
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 8001610:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001612:	b2da      	uxtb	r2, r3
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 8001618:	b2b3      	uxth	r3, r6
 800161a:	4619      	mov	r1, r3
 800161c:	69f8      	ldr	r0, [r7, #28]
 800161e:	f009 f8e3 	bl	800a7e8 <CDC_Transmit_FS>
		break;
 8001622:	e0ee      	b.n	8001802 <TransmitData+0x7ae>
 8001624:	200003ac 	.word	0x200003ac
 8001628:	2000035c 	.word	0x2000035c
 800162c:	20000000 	.word	0x20000000
		else if (errorFlag == errorConfig)
 8001630:	4b79      	ldr	r3, [pc, #484]	; (8001818 <TransmitData+0x7c4>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b35      	cmp	r3, #53	; 0x35
 8001636:	d126      	bne.n	8001686 <TransmitData+0x632>
			txBuffer[0] = Send_message.inicio;
 8001638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800163a:	b2da      	uxtb	r2, r3
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 8001640:	4b76      	ldr	r3, [pc, #472]	; (800181c <TransmitData+0x7c8>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	b2da      	uxtb	r2, r3
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 800164a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800164c:	b2da      	uxtb	r2, r3
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (0x02 | 0xF0);
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	22f2      	movs	r2, #242	; 0xf2
 8001656:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	2201      	movs	r2, #1
 800165c:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x05;
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	2205      	movs	r2, #5
 8001662:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 8001664:	69f8      	ldr	r0, [r7, #28]
 8001666:	f000 f93d 	bl	80018e4 <Checksum>
 800166a:	4603      	mov	r3, r0
 800166c:	b2da      	uxtb	r2, r3
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 8001672:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001674:	b2da      	uxtb	r2, r3
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 800167a:	b2b3      	uxth	r3, r6
 800167c:	4619      	mov	r1, r3
 800167e:	69f8      	ldr	r0, [r7, #28]
 8001680:	f009 f8b2 	bl	800a7e8 <CDC_Transmit_FS>
		break;
 8001684:	e0bd      	b.n	8001802 <TransmitData+0x7ae>
		else if (errorFlag == errorFunction)
 8001686:	4b64      	ldr	r3, [pc, #400]	; (8001818 <TransmitData+0x7c4>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b36      	cmp	r3, #54	; 0x36
 800168c:	d12b      	bne.n	80016e6 <TransmitData+0x692>
			txBuffer[0] = Send_message.inicio;
 800168e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001690:	b2da      	uxtb	r2, r3
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 8001696:	4b61      	ldr	r3, [pc, #388]	; (800181c <TransmitData+0x7c8>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	b2da      	uxtb	r2, r3
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 80016a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (Send_message.funcao | 0xF0);
 80016a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016aa:	b25b      	sxtb	r3, r3
 80016ac:	f063 030f 	orn	r3, r3, #15
 80016b0:	b25b      	sxtb	r3, r3
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	2201      	movs	r2, #1
 80016bc:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x06;
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	2206      	movs	r2, #6
 80016c2:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 80016c4:	69f8      	ldr	r0, [r7, #28]
 80016c6:	f000 f90d 	bl	80018e4 <Checksum>
 80016ca:	4603      	mov	r3, r0
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 80016d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 80016da:	b2b3      	uxth	r3, r6
 80016dc:	4619      	mov	r1, r3
 80016de:	69f8      	ldr	r0, [r7, #28]
 80016e0:	f009 f882 	bl	800a7e8 <CDC_Transmit_FS>
		break;
 80016e4:	e08d      	b.n	8001802 <TransmitData+0x7ae>
		else if (errorFlag == errorData)
 80016e6:	4b4c      	ldr	r3, [pc, #304]	; (8001818 <TransmitData+0x7c4>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b37      	cmp	r3, #55	; 0x37
 80016ec:	d12b      	bne.n	8001746 <TransmitData+0x6f2>
			txBuffer[0] = Send_message.inicio;
 80016ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 80016f6:	4b49      	ldr	r3, [pc, #292]	; (800181c <TransmitData+0x7c8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 8001700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001702:	b2da      	uxtb	r2, r3
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (Send_message.funcao | 0xF0);
 8001708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800170a:	b25b      	sxtb	r3, r3
 800170c:	f063 030f 	orn	r3, r3, #15
 8001710:	b25b      	sxtb	r3, r3
 8001712:	b2da      	uxtb	r2, r3
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	2201      	movs	r2, #1
 800171c:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x07;
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	2207      	movs	r2, #7
 8001722:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 8001724:	69f8      	ldr	r0, [r7, #28]
 8001726:	f000 f8dd 	bl	80018e4 <Checksum>
 800172a:	4603      	mov	r3, r0
 800172c:	b2da      	uxtb	r2, r3
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 8001732:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001734:	b2da      	uxtb	r2, r3
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 800173a:	b2b3      	uxth	r3, r6
 800173c:	4619      	mov	r1, r3
 800173e:	69f8      	ldr	r0, [r7, #28]
 8001740:	f009 f852 	bl	800a7e8 <CDC_Transmit_FS>
		break;
 8001744:	e05d      	b.n	8001802 <TransmitData+0x7ae>
		else if (errorFlag == errorStartHeader)
 8001746:	4b34      	ldr	r3, [pc, #208]	; (8001818 <TransmitData+0x7c4>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b38      	cmp	r3, #56	; 0x38
 800174c:	d12a      	bne.n	80017a4 <TransmitData+0x750>
			txBuffer[0] = 0x0A;
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	220a      	movs	r2, #10
 8001752:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 8001754:	4b31      	ldr	r3, [pc, #196]	; (800181c <TransmitData+0x7c8>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	b2da      	uxtb	r2, r3
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 800175e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001760:	b2da      	uxtb	r2, r3
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (Send_message.funcao | 0xF0);
 8001766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001768:	b25b      	sxtb	r3, r3
 800176a:	f063 030f 	orn	r3, r3, #15
 800176e:	b25b      	sxtb	r3, r3
 8001770:	b2da      	uxtb	r2, r3
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	2201      	movs	r2, #1
 800177a:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x08;
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	2208      	movs	r2, #8
 8001780:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 8001782:	69f8      	ldr	r0, [r7, #28]
 8001784:	f000 f8ae 	bl	80018e4 <Checksum>
 8001788:	4603      	mov	r3, r0
 800178a:	b2da      	uxtb	r2, r3
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 8001790:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001792:	b2da      	uxtb	r2, r3
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 8001798:	b2b3      	uxth	r3, r6
 800179a:	4619      	mov	r1, r3
 800179c:	69f8      	ldr	r0, [r7, #28]
 800179e:	f009 f823 	bl	800a7e8 <CDC_Transmit_FS>
		break;
 80017a2:	e02e      	b.n	8001802 <TransmitData+0x7ae>
		else if (errorFlag == errorEndHeader)
 80017a4:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <TransmitData+0x7c4>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b39      	cmp	r3, #57	; 0x39
 80017aa:	d12a      	bne.n	8001802 <TransmitData+0x7ae>
			txBuffer[0] = Send_message.inicio;
 80017ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 80017b4:	4b19      	ldr	r3, [pc, #100]	; (800181c <TransmitData+0x7c8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 80017be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (Send_message.funcao | 0xF0);
 80017c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017c8:	b25b      	sxtb	r3, r3
 80017ca:	f063 030f 	orn	r3, r3, #15
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	2201      	movs	r2, #1
 80017da:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x09;
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	2209      	movs	r2, #9
 80017e0:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 80017e2:	69f8      	ldr	r0, [r7, #28]
 80017e4:	f000 f87e 	bl	80018e4 <Checksum>
 80017e8:	4603      	mov	r3, r0
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 80017f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 80017f8:	b2b3      	uxth	r3, r6
 80017fa:	4619      	mov	r1, r3
 80017fc:	69f8      	ldr	r0, [r7, #28]
 80017fe:	f008 fff3 	bl	800a7e8 <CDC_Transmit_FS>
		break;
 8001802:	bf00      	nop
 8001804:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
}
 8001808:	bf00      	nop
 800180a:	372c      	adds	r7, #44	; 0x2c
 800180c:	46bd      	mov	sp, r7
 800180e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001812:	b004      	add	sp, #16
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000000 	.word	0x20000000
 800181c:	2000035c 	.word	0x2000035c

08001820 <StopDevice>:

char StopDevice(char deviceFlag)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
static char stopEncoder;
char contador = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	73fb      	strb	r3, [r7, #15]
if(deviceFlag == 1)
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d110      	bne.n	8001856 <StopDevice+0x36>
{
	stopEncoder = HAL_TIM_Encoder_Stop_IT(&htim2, TIM_CHANNEL_ALL);
 8001834:	213c      	movs	r1, #60	; 0x3c
 8001836:	4821      	ldr	r0, [pc, #132]	; (80018bc <StopDevice+0x9c>)
 8001838:	f003 fd38 	bl	80052ac <HAL_TIM_Encoder_Stop_IT>
 800183c:	4603      	mov	r3, r0
 800183e:	461a      	mov	r2, r3
 8001840:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <StopDevice+0xa0>)
 8001842:	701a      	strb	r2, [r3, #0]
	timerEnable = HAL_TIM_Base_Stop_IT(&htim3);
 8001844:	481f      	ldr	r0, [pc, #124]	; (80018c4 <StopDevice+0xa4>)
 8001846:	f003 fbb3 	bl	8004fb0 <HAL_TIM_Base_Stop_IT>
 800184a:	4603      	mov	r3, r0
 800184c:	461a      	mov	r2, r3
 800184e:	4b1e      	ldr	r3, [pc, #120]	; (80018c8 <StopDevice+0xa8>)
 8001850:	601a      	str	r2, [r3, #0]
	deviceFlag = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	71fb      	strb	r3, [r7, #7]
}

/*stopEncoder = HAL_TIM_Encoder_Stop_IT(&htim2, TIM_CHANNEL_1);*/
HAL_Delay(10);
 8001856:	200a      	movs	r0, #10
 8001858:	f000 fb98 	bl	8001f8c <HAL_Delay>
if(stopEncoder == HAL_OK && timerEnable == HAL_OK)
 800185c:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <StopDevice+0xa0>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d126      	bne.n	80018b2 <StopDevice+0x92>
 8001864:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <StopDevice+0xa8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d122      	bne.n	80018b2 <StopDevice+0x92>
{
	for(contador=0;contador<10;contador++)
 800186c:	2300      	movs	r3, #0
 800186e:	73fb      	strb	r3, [r7, #15]
 8001870:	e017      	b.n	80018a2 <StopDevice+0x82>
	{
		counterPulso[contador] = 0;
 8001872:	7bfb      	ldrb	r3, [r7, #15]
 8001874:	4a15      	ldr	r2, [pc, #84]	; (80018cc <StopDevice+0xac>)
 8001876:	2100      	movs	r1, #0
 8001878:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		fimPulso[contador] = 0;
 800187c:	7bfb      	ldrb	r3, [r7, #15]
 800187e:	4a14      	ldr	r2, [pc, #80]	; (80018d0 <StopDevice+0xb0>)
 8001880:	2100      	movs	r1, #0
 8001882:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		currentTime[contador] = 0;
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	4a12      	ldr	r2, [pc, #72]	; (80018d4 <StopDevice+0xb4>)
 800188a:	2100      	movs	r1, #0
 800188c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		transmitFlag = 0;
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <StopDevice+0xb8>)
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
		USB_FLAG = 0;
 8001896:	4b11      	ldr	r3, [pc, #68]	; (80018dc <StopDevice+0xbc>)
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]
	for(contador=0;contador<10;contador++)
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	3301      	adds	r3, #1
 80018a0:	73fb      	strb	r3, [r7, #15]
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	2b09      	cmp	r3, #9
 80018a6:	d9e4      	bls.n	8001872 <StopDevice+0x52>
	}
	samples = 0;
 80018a8:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <StopDevice+0xc0>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]
	return 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	e000      	b.n	80018b4 <StopDevice+0x94>
}
else return 1;
 80018b2:	2301      	movs	r3, #1
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	2000019c 	.word	0x2000019c
 80018c0:	200003ef 	.word	0x200003ef
 80018c4:	200001e4 	.word	0x200001e4
 80018c8:	20000370 	.word	0x20000370
 80018cc:	200002e8 	.word	0x200002e8
 80018d0:	20000310 	.word	0x20000310
 80018d4:	20000374 	.word	0x20000374
 80018d8:	200002cc 	.word	0x200002cc
 80018dc:	200002b6 	.word	0x200002b6
 80018e0:	2000039c 	.word	0x2000039c

080018e4 <Checksum>:


int Checksum(char *c)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
//if(c[0] == 0x0A)//Verifica Byte Inicio
//{
	if(c[4] == 0)Total=7;//Define tamanho do pacote
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3304      	adds	r3, #4
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d102      	bne.n	80018fc <Checksum+0x18>
 80018f6:	4b54      	ldr	r3, [pc, #336]	; (8001a48 <Checksum+0x164>)
 80018f8:	2207      	movs	r2, #7
 80018fa:	701a      	strb	r2, [r3, #0]
	if(c[4] == 1)Total=8;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3304      	adds	r3, #4
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d102      	bne.n	800190c <Checksum+0x28>
 8001906:	4b50      	ldr	r3, [pc, #320]	; (8001a48 <Checksum+0x164>)
 8001908:	2208      	movs	r2, #8
 800190a:	701a      	strb	r2, [r3, #0]
	if(c[4] == 2)Total=9;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3304      	adds	r3, #4
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b02      	cmp	r3, #2
 8001914:	d102      	bne.n	800191c <Checksum+0x38>
 8001916:	4b4c      	ldr	r3, [pc, #304]	; (8001a48 <Checksum+0x164>)
 8001918:	2209      	movs	r2, #9
 800191a:	701a      	strb	r2, [r3, #0]
	if(c[4] == 4)Total=11;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3304      	adds	r3, #4
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b04      	cmp	r3, #4
 8001924:	d102      	bne.n	800192c <Checksum+0x48>
 8001926:	4b48      	ldr	r3, [pc, #288]	; (8001a48 <Checksum+0x164>)
 8001928:	220b      	movs	r2, #11
 800192a:	701a      	strb	r2, [r3, #0]
	if(c[4] == 5) Total = 12;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3304      	adds	r3, #4
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b05      	cmp	r3, #5
 8001934:	d102      	bne.n	800193c <Checksum+0x58>
 8001936:	4b44      	ldr	r3, [pc, #272]	; (8001a48 <Checksum+0x164>)
 8001938:	220c      	movs	r2, #12
 800193a:	701a      	strb	r2, [r3, #0]
	if(c[4] == 6) Total = 13;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3304      	adds	r3, #4
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b06      	cmp	r3, #6
 8001944:	d102      	bne.n	800194c <Checksum+0x68>
 8001946:	4b40      	ldr	r3, [pc, #256]	; (8001a48 <Checksum+0x164>)
 8001948:	220d      	movs	r2, #13
 800194a:	701a      	strb	r2, [r3, #0]
	if(c[4] == 7) Total = 14;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3304      	adds	r3, #4
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b07      	cmp	r3, #7
 8001954:	d102      	bne.n	800195c <Checksum+0x78>
 8001956:	4b3c      	ldr	r3, [pc, #240]	; (8001a48 <Checksum+0x164>)
 8001958:	220e      	movs	r2, #14
 800195a:	701a      	strb	r2, [r3, #0]
	if(c[4] == 8) Total = 15;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3304      	adds	r3, #4
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b08      	cmp	r3, #8
 8001964:	d102      	bne.n	800196c <Checksum+0x88>
 8001966:	4b38      	ldr	r3, [pc, #224]	; (8001a48 <Checksum+0x164>)
 8001968:	220f      	movs	r2, #15
 800196a:	701a      	strb	r2, [r3, #0]
	if(c[4] == 9) Total = 16;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3304      	adds	r3, #4
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b09      	cmp	r3, #9
 8001974:	d102      	bne.n	800197c <Checksum+0x98>
 8001976:	4b34      	ldr	r3, [pc, #208]	; (8001a48 <Checksum+0x164>)
 8001978:	2210      	movs	r2, #16
 800197a:	701a      	strb	r2, [r3, #0]
	if(c[4] == 10) Total = 17;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3304      	adds	r3, #4
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b0a      	cmp	r3, #10
 8001984:	d102      	bne.n	800198c <Checksum+0xa8>
 8001986:	4b30      	ldr	r3, [pc, #192]	; (8001a48 <Checksum+0x164>)
 8001988:	2211      	movs	r2, #17
 800198a:	701a      	strb	r2, [r3, #0]
	if(c[4] == 12) Total = 19;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3304      	adds	r3, #4
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b0c      	cmp	r3, #12
 8001994:	d102      	bne.n	800199c <Checksum+0xb8>
 8001996:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <Checksum+0x164>)
 8001998:	2213      	movs	r2, #19
 800199a:	701a      	strb	r2, [r3, #0]
	if(c[4] == 14) Total = 21;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3304      	adds	r3, #4
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b0e      	cmp	r3, #14
 80019a4:	d102      	bne.n	80019ac <Checksum+0xc8>
 80019a6:	4b28      	ldr	r3, [pc, #160]	; (8001a48 <Checksum+0x164>)
 80019a8:	2215      	movs	r2, #21
 80019aa:	701a      	strb	r2, [r3, #0]
	if(c[4] == 23 ) Total = 29;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3304      	adds	r3, #4
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b17      	cmp	r3, #23
 80019b4:	d102      	bne.n	80019bc <Checksum+0xd8>
 80019b6:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <Checksum+0x164>)
 80019b8:	221d      	movs	r2, #29
 80019ba:	701a      	strb	r2, [r3, #0]
	if(c[4] == 32 ) Total = 38;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3304      	adds	r3, #4
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b20      	cmp	r3, #32
 80019c4:	d102      	bne.n	80019cc <Checksum+0xe8>
 80019c6:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <Checksum+0x164>)
 80019c8:	2226      	movs	r2, #38	; 0x26
 80019ca:	701a      	strb	r2, [r3, #0]
	if(c[4] == 40 ) Total = 47;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3304      	adds	r3, #4
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b28      	cmp	r3, #40	; 0x28
 80019d4:	d102      	bne.n	80019dc <Checksum+0xf8>
 80019d6:	4b1c      	ldr	r3, [pc, #112]	; (8001a48 <Checksum+0x164>)
 80019d8:	222f      	movs	r2, #47	; 0x2f
 80019da:	701a      	strb	r2, [r3, #0]
	if(c[4] == 60 ) Total = 67;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3304      	adds	r3, #4
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b3c      	cmp	r3, #60	; 0x3c
 80019e4:	d102      	bne.n	80019ec <Checksum+0x108>
 80019e6:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <Checksum+0x164>)
 80019e8:	2243      	movs	r2, #67	; 0x43
 80019ea:	701a      	strb	r2, [r3, #0]

	c_sum=0;
 80019ec:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <Checksum+0x168>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	801a      	strh	r2, [r3, #0]
	for(int i=1; i<(Total-2);i++)//Soma os bytes
 80019f2:	2301      	movs	r3, #1
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	e00d      	b.n	8001a14 <Checksum+0x130>
	{
		c_sum += c[i];
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <Checksum+0x168>)
 8001a04:	881b      	ldrh	r3, [r3, #0]
 8001a06:	4413      	add	r3, r2
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <Checksum+0x168>)
 8001a0c:	801a      	strh	r2, [r3, #0]
	for(int i=1; i<(Total-2);i++)//Soma os bytes
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	3301      	adds	r3, #1
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <Checksum+0x164>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	3b02      	subs	r3, #2
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	dbeb      	blt.n	80019f8 <Checksum+0x114>
	}

	checksum = 0xFF-c_sum;//Faz os calculos seguintes
 8001a20:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <Checksum+0x168>)
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	43db      	mvns	r3, r3
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <Checksum+0x16c>)
 8001a2c:	701a      	strb	r2, [r3, #0]
	checksum += 0x01;
 8001a2e:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <Checksum+0x16c>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	3301      	adds	r3, #1
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <Checksum+0x16c>)
 8001a38:	701a      	strb	r2, [r3, #0]
//}
return checksum;
 8001a3a:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <Checksum+0x16c>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr
 8001a48:	2000036d 	.word	0x2000036d
 8001a4c:	2000036a 	.word	0x2000036a
 8001a50:	2000036c 	.word	0x2000036c

08001a54 <HAL_TIM_IC_CaptureCallback>:



//Interrupções
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
if(readFlag == 1)
 8001a5c:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d11f      	bne.n	8001aa4 <HAL_TIM_IC_CaptureCallback+0x50>
{
	/*pulseCounter++;*/
	direction = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 8001a64:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0310 	and.w	r3, r3, #16
 8001a6e:	2b10      	cmp	r3, #16
 8001a70:	bf0c      	ite	eq
 8001a72:	2301      	moveq	r3, #1
 8001a74:	2300      	movne	r3, #0
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001a7c:	701a      	strb	r2, [r3, #0]
	if(direction == 0)
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d105      	bne.n	8001a92 <HAL_TIM_IC_CaptureCallback+0x3e>
	{
		pulseCounter++;
 8001a86:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <HAL_TIM_IC_CaptureCallback+0x68>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	4a0b      	ldr	r2, [pc, #44]	; (8001abc <HAL_TIM_IC_CaptureCallback+0x68>)
 8001a8e:	6013      	str	r3, [r2, #0]
		pulseCounter--;
//			if(pulseCounter<0) pulseCounter = 0;
		/*posAtual = pulseCounter;*/
	}
}
}
 8001a90:	e008      	b.n	8001aa4 <HAL_TIM_IC_CaptureCallback+0x50>
	else if (direction == 1)
 8001a92:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d104      	bne.n	8001aa4 <HAL_TIM_IC_CaptureCallback+0x50>
		pulseCounter--;
 8001a9a:	4b08      	ldr	r3, [pc, #32]	; (8001abc <HAL_TIM_IC_CaptureCallback+0x68>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	4a06      	ldr	r2, [pc, #24]	; (8001abc <HAL_TIM_IC_CaptureCallback+0x68>)
 8001aa2:	6013      	str	r3, [r2, #0]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	20000338 	.word	0x20000338
 8001ab4:	2000019c 	.word	0x2000019c
 8001ab8:	200003a4 	.word	0x200003a4
 8001abc:	2000033c 	.word	0x2000033c

08001ac0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
if(EndReception == '\0')
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <HAL_UART_RxCpltCallback+0x2c>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d109      	bne.n	8001ae4 <HAL_UART_RxCpltCallback+0x24>
{
	command(RXBuffer[0]);
 8001ad0:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <HAL_UART_RxCpltCallback+0x30>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff f91b 	bl	8000d10 <command>
	HAL_UART_Receive_IT(&huart2, (uint8_t *)RXBuffer, 1);
 8001ada:	2201      	movs	r2, #1
 8001adc:	4904      	ldr	r1, [pc, #16]	; (8001af0 <HAL_UART_RxCpltCallback+0x30>)
 8001ade:	4805      	ldr	r0, [pc, #20]	; (8001af4 <HAL_UART_RxCpltCallback+0x34>)
 8001ae0:	f004 f859 	bl	8005b96 <HAL_UART_Receive_IT>
}

}
 8001ae4:	bf00      	nop
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	200002b7 	.word	0x200002b7
 8001af0:	200002b8 	.word	0x200002b8
 8001af4:	2000022c 	.word	0x2000022c

08001af8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
100 hz -> 10
200 hz ->5
500 Hz -> 2
1k -> 1*/

	newTime+=1; //1ms
 8001b00:	4b20      	ldr	r3, [pc, #128]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	3301      	adds	r3, #1
 8001b06:	4a1f      	ldr	r2, [pc, #124]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001b08:	6013      	str	r3, [r2, #0]
	if(newTime == timeTotal)
 8001b0a:	4b1f      	ldr	r3, [pc, #124]	; (8001b88 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4b1c      	ldr	r3, [pc, #112]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d125      	bne.n	8001b64 <HAL_TIM_PeriodElapsedCallback+0x6c>
//	if(newTime == 20)
	{
		readFlag = 0;
 8001b18:	4b1c      	ldr	r3, [pc, #112]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	701a      	strb	r2, [r3, #0]
		fimPulso[samples] = pulseCounter;
 8001b1e:	4b1c      	ldr	r3, [pc, #112]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	4619      	mov	r1, r3
 8001b24:	4b1b      	ldr	r3, [pc, #108]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a1b      	ldr	r2, [pc, #108]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001b2a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		acquiredTime += newTime;
 8001b2e:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4413      	add	r3, r2
 8001b38:	4a18      	ldr	r2, [pc, #96]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001b3a:	6013      	str	r3, [r2, #0]
		currentTime[samples] = acquiredTime;
 8001b3c:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	4619      	mov	r1, r3
 8001b42:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a16      	ldr	r2, [pc, #88]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001b48:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		samples++;
 8001b4c:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	3301      	adds	r3, #1
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001b56:	701a      	strb	r2, [r3, #0]
		newTime = 0;
 8001b58:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
		readFlag = 1;
 8001b5e:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	701a      	strb	r2, [r3, #0]
	}
	if(samples == 10)
 8001b64:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b0a      	cmp	r3, #10
 8001b6a:	d105      	bne.n	8001b78 <HAL_TIM_PeriodElapsedCallback+0x80>
	{
		transmitFlag = 1;
 8001b6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	601a      	str	r2, [r3, #0]
		samples=0;
 8001b72:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]
	}
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	200002d0 	.word	0x200002d0
 8001b88:	20000339 	.word	0x20000339
 8001b8c:	20000338 	.word	0x20000338
 8001b90:	2000039c 	.word	0x2000039c
 8001b94:	2000033c 	.word	0x2000033c
 8001b98:	20000310 	.word	0x20000310
 8001b9c:	200002d4 	.word	0x200002d4
 8001ba0:	20000374 	.word	0x20000374
 8001ba4:	200002cc 	.word	0x200002cc

08001ba8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	80fb      	strh	r3, [r7, #6]
if(GPIO_Pin == RESET_Pin)
 8001bb2:	88fb      	ldrh	r3, [r7, #6]
 8001bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bb8:	d105      	bne.n	8001bc6 <HAL_GPIO_EXTI_Callback+0x1e>
{
	StateMachine = iddle;
 8001bba:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <HAL_GPIO_EXTI_Callback+0x28>)
 8001bbc:	2249      	movs	r2, #73	; 0x49
 8001bbe:	701a      	strb	r2, [r3, #0]
	EndReception = Reset;
 8001bc0:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001bc2:	2252      	movs	r2, #82	; 0x52
 8001bc4:	701a      	strb	r2, [r3, #0]
}
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr
 8001bd0:	2000036e 	.word	0x2000036e
 8001bd4:	200002b7 	.word	0x200002b7

08001bd8 <Error_Handler>:
/**
* @brief  This function is executed in case of error occurrence.
* @retval None
*/
void Error_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bdc:	b672      	cpsid	i
}
 8001bde:	bf00      	nop
/* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1)
 8001be0:	e7fe      	b.n	8001be0 <Error_Handler+0x8>
	...

08001be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <HAL_MspInit+0x5c>)
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	4a14      	ldr	r2, [pc, #80]	; (8001c40 <HAL_MspInit+0x5c>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6193      	str	r3, [r2, #24]
 8001bf6:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_MspInit+0x5c>)
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c02:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <HAL_MspInit+0x5c>)
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	4a0e      	ldr	r2, [pc, #56]	; (8001c40 <HAL_MspInit+0x5c>)
 8001c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	61d3      	str	r3, [r2, #28]
 8001c0e:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <HAL_MspInit+0x5c>)
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	607b      	str	r3, [r7, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <HAL_MspInit+0x60>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	4a04      	ldr	r2, [pc, #16]	; (8001c44 <HAL_MspInit+0x60>)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c36:	bf00      	nop
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40010000 	.word	0x40010000

08001c48 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 0310 	add.w	r3, r7, #16
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c66:	d12b      	bne.n	8001cc0 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c68:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <HAL_TIM_Encoder_MspInit+0x80>)
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	4a16      	ldr	r2, [pc, #88]	; (8001cc8 <HAL_TIM_Encoder_MspInit+0x80>)
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	61d3      	str	r3, [r2, #28]
 8001c74:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <HAL_TIM_Encoder_MspInit+0x80>)
 8001c76:	69db      	ldr	r3, [r3, #28]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c80:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <HAL_TIM_Encoder_MspInit+0x80>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	4a10      	ldr	r2, [pc, #64]	; (8001cc8 <HAL_TIM_Encoder_MspInit+0x80>)
 8001c86:	f043 0304 	orr.w	r3, r3, #4
 8001c8a:	6193      	str	r3, [r2, #24]
 8001c8c:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <HAL_TIM_Encoder_MspInit+0x80>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca4:	f107 0310 	add.w	r3, r7, #16
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4808      	ldr	r0, [pc, #32]	; (8001ccc <HAL_TIM_Encoder_MspInit+0x84>)
 8001cac:	f000 fd7c 	bl	80027a8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	201c      	movs	r0, #28
 8001cb6:	f000 fa64 	bl	8002182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cba:	201c      	movs	r0, #28
 8001cbc:	f000 fa7d 	bl	80021ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001cc0:	bf00      	nop
 8001cc2:	3720      	adds	r7, #32
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40010800 	.word	0x40010800

08001cd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a0d      	ldr	r2, [pc, #52]	; (8001d14 <HAL_TIM_Base_MspInit+0x44>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d113      	bne.n	8001d0a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <HAL_TIM_Base_MspInit+0x48>)
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	4a0c      	ldr	r2, [pc, #48]	; (8001d18 <HAL_TIM_Base_MspInit+0x48>)
 8001ce8:	f043 0302 	orr.w	r3, r3, #2
 8001cec:	61d3      	str	r3, [r2, #28]
 8001cee:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <HAL_TIM_Base_MspInit+0x48>)
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	201d      	movs	r0, #29
 8001d00:	f000 fa3f 	bl	8002182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d04:	201d      	movs	r0, #29
 8001d06:	f000 fa58 	bl	80021ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40000400 	.word	0x40000400
 8001d18:	40021000 	.word	0x40021000

08001d1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 0310 	add.w	r3, r7, #16
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a1f      	ldr	r2, [pc, #124]	; (8001db4 <HAL_UART_MspInit+0x98>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d137      	bne.n	8001dac <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d3c:	4b1e      	ldr	r3, [pc, #120]	; (8001db8 <HAL_UART_MspInit+0x9c>)
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	4a1d      	ldr	r2, [pc, #116]	; (8001db8 <HAL_UART_MspInit+0x9c>)
 8001d42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d46:	61d3      	str	r3, [r2, #28]
 8001d48:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <HAL_UART_MspInit+0x9c>)
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d54:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <HAL_UART_MspInit+0x9c>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	4a17      	ldr	r2, [pc, #92]	; (8001db8 <HAL_UART_MspInit+0x9c>)
 8001d5a:	f043 0304 	orr.w	r3, r3, #4
 8001d5e:	6193      	str	r3, [r2, #24]
 8001d60:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <HAL_UART_MspInit+0x9c>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d6c:	2304      	movs	r3, #4
 8001d6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d70:	2302      	movs	r3, #2
 8001d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d74:	2303      	movs	r3, #3
 8001d76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d78:	f107 0310 	add.w	r3, r7, #16
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	480f      	ldr	r0, [pc, #60]	; (8001dbc <HAL_UART_MspInit+0xa0>)
 8001d80:	f000 fd12 	bl	80027a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d84:	2308      	movs	r3, #8
 8001d86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d90:	f107 0310 	add.w	r3, r7, #16
 8001d94:	4619      	mov	r1, r3
 8001d96:	4809      	ldr	r0, [pc, #36]	; (8001dbc <HAL_UART_MspInit+0xa0>)
 8001d98:	f000 fd06 	bl	80027a8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2100      	movs	r1, #0
 8001da0:	2026      	movs	r0, #38	; 0x26
 8001da2:	f000 f9ee 	bl	8002182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001da6:	2026      	movs	r0, #38	; 0x26
 8001da8:	f000 fa07 	bl	80021ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001dac:	bf00      	nop
 8001dae:	3720      	adds	r7, #32
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40004400 	.word	0x40004400
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40010800 	.word	0x40010800

08001dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dc4:	e7fe      	b.n	8001dc4 <NMI_Handler+0x4>

08001dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dca:	e7fe      	b.n	8001dca <HardFault_Handler+0x4>

08001dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <MemManage_Handler+0x4>

08001dd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dd6:	e7fe      	b.n	8001dd6 <BusFault_Handler+0x4>

08001dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ddc:	e7fe      	b.n	8001ddc <UsageFault_Handler+0x4>

08001dde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr

08001dea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr

08001df6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr

08001e02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e06:	f000 f8a5 	bl	8001f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001e14:	4802      	ldr	r0, [pc, #8]	; (8001e20 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001e16:	f000 ffc6 	bl	8002da6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	200010b0 	.word	0x200010b0

08001e24 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RESET_Pin);
 8001e28:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001e2c:	f000 fe72 	bl	8002b14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e30:	bf00      	nop
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e38:	4802      	ldr	r0, [pc, #8]	; (8001e44 <TIM2_IRQHandler+0x10>)
 8001e3a:	f003 faec 	bl	8005416 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	2000019c 	.word	0x2000019c

08001e48 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e4c:	4802      	ldr	r0, [pc, #8]	; (8001e58 <TIM3_IRQHandler+0x10>)
 8001e4e:	f003 fae2 	bl	8005416 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	200001e4 	.word	0x200001e4

08001e5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e60:	4802      	ldr	r0, [pc, #8]	; (8001e6c <USART2_IRQHandler+0x10>)
 8001e62:	f003 fec9 	bl	8005bf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	2000022c 	.word	0x2000022c

08001e70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e7c:	480c      	ldr	r0, [pc, #48]	; (8001eb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e7e:	490d      	ldr	r1, [pc, #52]	; (8001eb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e80:	4a0d      	ldr	r2, [pc, #52]	; (8001eb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e84:	e002      	b.n	8001e8c <LoopCopyDataInit>

08001e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e8a:	3304      	adds	r3, #4

08001e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e90:	d3f9      	bcc.n	8001e86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e92:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e94:	4c0a      	ldr	r4, [pc, #40]	; (8001ec0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e98:	e001      	b.n	8001e9e <LoopFillZerobss>

08001e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e9c:	3204      	adds	r2, #4

08001e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ea0:	d3fb      	bcc.n	8001e9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ea2:	f7ff ffe5 	bl	8001e70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ea6:	f009 f87d 	bl	800afa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001eaa:	f7fe f99b 	bl	80001e4 <main>
  bx lr
 8001eae:	4770      	bx	lr
  ldr r0, =_sdata
 8001eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eb4:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8001eb8:	0800b0a8 	.word	0x0800b0a8
  ldr r2, =_sbss
 8001ebc:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8001ec0:	200015bc 	.word	0x200015bc

08001ec4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ec4:	e7fe      	b.n	8001ec4 <ADC1_2_IRQHandler>
	...

08001ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ecc:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <HAL_Init+0x28>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a07      	ldr	r2, [pc, #28]	; (8001ef0 <HAL_Init+0x28>)
 8001ed2:	f043 0310 	orr.w	r3, r3, #16
 8001ed6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ed8:	2003      	movs	r0, #3
 8001eda:	f000 f947 	bl	800216c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ede:	200f      	movs	r0, #15
 8001ee0:	f000 f808 	bl	8001ef4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ee4:	f7ff fe7e 	bl	8001be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40022000 	.word	0x40022000

08001ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001efc:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <HAL_InitTick+0x54>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <HAL_InitTick+0x58>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	4619      	mov	r1, r3
 8001f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 f95f 	bl	80021d6 <HAL_SYSTICK_Config>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e00e      	b.n	8001f40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b0f      	cmp	r3, #15
 8001f26:	d80a      	bhi.n	8001f3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f30:	f000 f927 	bl	8002182 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f34:	4a06      	ldr	r2, [pc, #24]	; (8001f50 <HAL_InitTick+0x5c>)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e000      	b.n	8001f40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20000004 	.word	0x20000004
 8001f4c:	2000000c 	.word	0x2000000c
 8001f50:	20000008 	.word	0x20000008

08001f54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f58:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <HAL_IncTick+0x1c>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <HAL_IncTick+0x20>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4413      	add	r3, r2
 8001f64:	4a03      	ldr	r2, [pc, #12]	; (8001f74 <HAL_IncTick+0x20>)
 8001f66:	6013      	str	r3, [r2, #0]
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr
 8001f70:	2000000c 	.word	0x2000000c
 8001f74:	200003f0 	.word	0x200003f0

08001f78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f7c:	4b02      	ldr	r3, [pc, #8]	; (8001f88 <HAL_GetTick+0x10>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr
 8001f88:	200003f0 	.word	0x200003f0

08001f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f94:	f7ff fff0 	bl	8001f78 <HAL_GetTick>
 8001f98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa4:	d005      	beq.n	8001fb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <HAL_Delay+0x44>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4413      	add	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fb2:	bf00      	nop
 8001fb4:	f7ff ffe0 	bl	8001f78 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d8f7      	bhi.n	8001fb4 <HAL_Delay+0x28>
  {
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	bf00      	nop
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	2000000c 	.word	0x2000000c

08001fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ffc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002006:	4a04      	ldr	r2, [pc, #16]	; (8002018 <__NVIC_SetPriorityGrouping+0x44>)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	60d3      	str	r3, [r2, #12]
}
 800200c:	bf00      	nop
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002020:	4b04      	ldr	r3, [pc, #16]	; (8002034 <__NVIC_GetPriorityGrouping+0x18>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	0a1b      	lsrs	r3, r3, #8
 8002026:	f003 0307 	and.w	r3, r3, #7
}
 800202a:	4618      	mov	r0, r3
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	2b00      	cmp	r3, #0
 8002048:	db0b      	blt.n	8002062 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	f003 021f 	and.w	r2, r3, #31
 8002050:	4906      	ldr	r1, [pc, #24]	; (800206c <__NVIC_EnableIRQ+0x34>)
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	095b      	lsrs	r3, r3, #5
 8002058:	2001      	movs	r0, #1
 800205a:	fa00 f202 	lsl.w	r2, r0, r2
 800205e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	e000e100 	.word	0xe000e100

08002070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	6039      	str	r1, [r7, #0]
 800207a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800207c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002080:	2b00      	cmp	r3, #0
 8002082:	db0a      	blt.n	800209a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	b2da      	uxtb	r2, r3
 8002088:	490c      	ldr	r1, [pc, #48]	; (80020bc <__NVIC_SetPriority+0x4c>)
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	0112      	lsls	r2, r2, #4
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	440b      	add	r3, r1
 8002094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002098:	e00a      	b.n	80020b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	b2da      	uxtb	r2, r3
 800209e:	4908      	ldr	r1, [pc, #32]	; (80020c0 <__NVIC_SetPriority+0x50>)
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	3b04      	subs	r3, #4
 80020a8:	0112      	lsls	r2, r2, #4
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	440b      	add	r3, r1
 80020ae:	761a      	strb	r2, [r3, #24]
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	e000e100 	.word	0xe000e100
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b089      	sub	sp, #36	; 0x24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f003 0307 	and.w	r3, r3, #7
 80020d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f1c3 0307 	rsb	r3, r3, #7
 80020de:	2b04      	cmp	r3, #4
 80020e0:	bf28      	it	cs
 80020e2:	2304      	movcs	r3, #4
 80020e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3304      	adds	r3, #4
 80020ea:	2b06      	cmp	r3, #6
 80020ec:	d902      	bls.n	80020f4 <NVIC_EncodePriority+0x30>
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3b03      	subs	r3, #3
 80020f2:	e000      	b.n	80020f6 <NVIC_EncodePriority+0x32>
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f8:	f04f 32ff 	mov.w	r2, #4294967295
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43da      	mvns	r2, r3
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	401a      	ands	r2, r3
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800210c:	f04f 31ff 	mov.w	r1, #4294967295
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	fa01 f303 	lsl.w	r3, r1, r3
 8002116:	43d9      	mvns	r1, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800211c:	4313      	orrs	r3, r2
         );
}
 800211e:	4618      	mov	r0, r3
 8002120:	3724      	adds	r7, #36	; 0x24
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr

08002128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3b01      	subs	r3, #1
 8002134:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002138:	d301      	bcc.n	800213e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800213a:	2301      	movs	r3, #1
 800213c:	e00f      	b.n	800215e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800213e:	4a0a      	ldr	r2, [pc, #40]	; (8002168 <SysTick_Config+0x40>)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3b01      	subs	r3, #1
 8002144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002146:	210f      	movs	r1, #15
 8002148:	f04f 30ff 	mov.w	r0, #4294967295
 800214c:	f7ff ff90 	bl	8002070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002150:	4b05      	ldr	r3, [pc, #20]	; (8002168 <SysTick_Config+0x40>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002156:	4b04      	ldr	r3, [pc, #16]	; (8002168 <SysTick_Config+0x40>)
 8002158:	2207      	movs	r2, #7
 800215a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	e000e010 	.word	0xe000e010

0800216c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7ff ff2d 	bl	8001fd4 <__NVIC_SetPriorityGrouping>
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002182:	b580      	push	{r7, lr}
 8002184:	b086      	sub	sp, #24
 8002186:	af00      	add	r7, sp, #0
 8002188:	4603      	mov	r3, r0
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	607a      	str	r2, [r7, #4]
 800218e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002194:	f7ff ff42 	bl	800201c <__NVIC_GetPriorityGrouping>
 8002198:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	68b9      	ldr	r1, [r7, #8]
 800219e:	6978      	ldr	r0, [r7, #20]
 80021a0:	f7ff ff90 	bl	80020c4 <NVIC_EncodePriority>
 80021a4:	4602      	mov	r2, r0
 80021a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021aa:	4611      	mov	r1, r2
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff ff5f 	bl	8002070 <__NVIC_SetPriority>
}
 80021b2:	bf00      	nop
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	4603      	mov	r3, r0
 80021c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ff35 	bl	8002038 <__NVIC_EnableIRQ>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff ffa2 	bl	8002128 <SysTick_Config>
 80021e4:	4603      	mov	r3, r0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b085      	sub	sp, #20
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002200:	2b02      	cmp	r3, #2
 8002202:	d008      	beq.n	8002216 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2204      	movs	r2, #4
 8002208:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e020      	b.n	8002258 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 020e 	bic.w	r2, r2, #14
 8002224:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0201 	bic.w	r2, r2, #1
 8002234:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223e:	2101      	movs	r1, #1
 8002240:	fa01 f202 	lsl.w	r2, r1, r2
 8002244:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002256:	7bfb      	ldrb	r3, [r7, #15]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr
	...

08002264 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800226c:	2300      	movs	r3, #0
 800226e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002276:	2b02      	cmp	r3, #2
 8002278:	d005      	beq.n	8002286 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2204      	movs	r2, #4
 800227e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	73fb      	strb	r3, [r7, #15]
 8002284:	e051      	b.n	800232a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 020e 	bic.w	r2, r2, #14
 8002294:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0201 	bic.w	r2, r2, #1
 80022a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a22      	ldr	r2, [pc, #136]	; (8002334 <HAL_DMA_Abort_IT+0xd0>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d029      	beq.n	8002304 <HAL_DMA_Abort_IT+0xa0>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a20      	ldr	r2, [pc, #128]	; (8002338 <HAL_DMA_Abort_IT+0xd4>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d022      	beq.n	8002300 <HAL_DMA_Abort_IT+0x9c>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a1f      	ldr	r2, [pc, #124]	; (800233c <HAL_DMA_Abort_IT+0xd8>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d01a      	beq.n	80022fa <HAL_DMA_Abort_IT+0x96>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a1d      	ldr	r2, [pc, #116]	; (8002340 <HAL_DMA_Abort_IT+0xdc>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d012      	beq.n	80022f4 <HAL_DMA_Abort_IT+0x90>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a1c      	ldr	r2, [pc, #112]	; (8002344 <HAL_DMA_Abort_IT+0xe0>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d00a      	beq.n	80022ee <HAL_DMA_Abort_IT+0x8a>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a1a      	ldr	r2, [pc, #104]	; (8002348 <HAL_DMA_Abort_IT+0xe4>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d102      	bne.n	80022e8 <HAL_DMA_Abort_IT+0x84>
 80022e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80022e6:	e00e      	b.n	8002306 <HAL_DMA_Abort_IT+0xa2>
 80022e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022ec:	e00b      	b.n	8002306 <HAL_DMA_Abort_IT+0xa2>
 80022ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022f2:	e008      	b.n	8002306 <HAL_DMA_Abort_IT+0xa2>
 80022f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f8:	e005      	b.n	8002306 <HAL_DMA_Abort_IT+0xa2>
 80022fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022fe:	e002      	b.n	8002306 <HAL_DMA_Abort_IT+0xa2>
 8002300:	2310      	movs	r3, #16
 8002302:	e000      	b.n	8002306 <HAL_DMA_Abort_IT+0xa2>
 8002304:	2301      	movs	r3, #1
 8002306:	4a11      	ldr	r2, [pc, #68]	; (800234c <HAL_DMA_Abort_IT+0xe8>)
 8002308:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	4798      	blx	r3
    } 
  }
  return status;
 800232a:	7bfb      	ldrb	r3, [r7, #15]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40020008 	.word	0x40020008
 8002338:	4002001c 	.word	0x4002001c
 800233c:	40020030 	.word	0x40020030
 8002340:	40020044 	.word	0x40020044
 8002344:	40020058 	.word	0x40020058
 8002348:	4002006c 	.word	0x4002006c
 800234c:	40020000 	.word	0x40020000

08002350 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002352:	b087      	sub	sp, #28
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002362:	2300      	movs	r3, #0
 8002364:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800236a:	4b2f      	ldr	r3, [pc, #188]	; (8002428 <HAL_FLASH_Program+0xd8>)
 800236c:	7e1b      	ldrb	r3, [r3, #24]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d101      	bne.n	8002376 <HAL_FLASH_Program+0x26>
 8002372:	2302      	movs	r3, #2
 8002374:	e054      	b.n	8002420 <HAL_FLASH_Program+0xd0>
 8002376:	4b2c      	ldr	r3, [pc, #176]	; (8002428 <HAL_FLASH_Program+0xd8>)
 8002378:	2201      	movs	r2, #1
 800237a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800237c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002380:	f000 f8d4 	bl	800252c <FLASH_WaitForLastOperation>
 8002384:	4603      	mov	r3, r0
 8002386:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002388:	7dfb      	ldrb	r3, [r7, #23]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d144      	bne.n	8002418 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d102      	bne.n	800239a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002394:	2301      	movs	r3, #1
 8002396:	757b      	strb	r3, [r7, #21]
 8002398:	e007      	b.n	80023aa <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2b02      	cmp	r3, #2
 800239e:	d102      	bne.n	80023a6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80023a0:	2302      	movs	r3, #2
 80023a2:	757b      	strb	r3, [r7, #21]
 80023a4:	e001      	b.n	80023aa <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80023a6:	2304      	movs	r3, #4
 80023a8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80023aa:	2300      	movs	r3, #0
 80023ac:	75bb      	strb	r3, [r7, #22]
 80023ae:	e02d      	b.n	800240c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80023b0:	7dbb      	ldrb	r3, [r7, #22]
 80023b2:	005a      	lsls	r2, r3, #1
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	eb02 0c03 	add.w	ip, r2, r3
 80023ba:	7dbb      	ldrb	r3, [r7, #22]
 80023bc:	0119      	lsls	r1, r3, #4
 80023be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023c2:	f1c1 0620 	rsb	r6, r1, #32
 80023c6:	f1a1 0020 	sub.w	r0, r1, #32
 80023ca:	fa22 f401 	lsr.w	r4, r2, r1
 80023ce:	fa03 f606 	lsl.w	r6, r3, r6
 80023d2:	4334      	orrs	r4, r6
 80023d4:	fa23 f000 	lsr.w	r0, r3, r0
 80023d8:	4304      	orrs	r4, r0
 80023da:	fa23 f501 	lsr.w	r5, r3, r1
 80023de:	b2a3      	uxth	r3, r4
 80023e0:	4619      	mov	r1, r3
 80023e2:	4660      	mov	r0, ip
 80023e4:	f000 f886 	bl	80024f4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80023e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80023ec:	f000 f89e 	bl	800252c <FLASH_WaitForLastOperation>
 80023f0:	4603      	mov	r3, r0
 80023f2:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80023f4:	4b0d      	ldr	r3, [pc, #52]	; (800242c <HAL_FLASH_Program+0xdc>)
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	4a0c      	ldr	r2, [pc, #48]	; (800242c <HAL_FLASH_Program+0xdc>)
 80023fa:	f023 0301 	bic.w	r3, r3, #1
 80023fe:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002400:	7dfb      	ldrb	r3, [r7, #23]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d107      	bne.n	8002416 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002406:	7dbb      	ldrb	r3, [r7, #22]
 8002408:	3301      	adds	r3, #1
 800240a:	75bb      	strb	r3, [r7, #22]
 800240c:	7dba      	ldrb	r2, [r7, #22]
 800240e:	7d7b      	ldrb	r3, [r7, #21]
 8002410:	429a      	cmp	r2, r3
 8002412:	d3cd      	bcc.n	80023b0 <HAL_FLASH_Program+0x60>
 8002414:	e000      	b.n	8002418 <HAL_FLASH_Program+0xc8>
      {
        break;
 8002416:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002418:	4b03      	ldr	r3, [pc, #12]	; (8002428 <HAL_FLASH_Program+0xd8>)
 800241a:	2200      	movs	r2, #0
 800241c:	761a      	strb	r2, [r3, #24]

  return status;
 800241e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002420:	4618      	mov	r0, r3
 8002422:	371c      	adds	r7, #28
 8002424:	46bd      	mov	sp, r7
 8002426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002428:	200003f8 	.word	0x200003f8
 800242c:	40022000 	.word	0x40022000

08002430 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800243a:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <HAL_FLASH_Unlock+0x40>)
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00d      	beq.n	8002462 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002446:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <HAL_FLASH_Unlock+0x40>)
 8002448:	4a0a      	ldr	r2, [pc, #40]	; (8002474 <HAL_FLASH_Unlock+0x44>)
 800244a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800244c:	4b08      	ldr	r3, [pc, #32]	; (8002470 <HAL_FLASH_Unlock+0x40>)
 800244e:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <HAL_FLASH_Unlock+0x48>)
 8002450:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002452:	4b07      	ldr	r3, [pc, #28]	; (8002470 <HAL_FLASH_Unlock+0x40>)
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002462:	79fb      	ldrb	r3, [r7, #7]
}
 8002464:	4618      	mov	r0, r3
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	40022000 	.word	0x40022000
 8002474:	45670123 	.word	0x45670123
 8002478:	cdef89ab 	.word	0xcdef89ab

0800247c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002480:	4b05      	ldr	r3, [pc, #20]	; (8002498 <HAL_FLASH_Lock+0x1c>)
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	4a04      	ldr	r2, [pc, #16]	; (8002498 <HAL_FLASH_Lock+0x1c>)
 8002486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800248a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	40022000 	.word	0x40022000

0800249c <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 80024a0:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <HAL_FLASH_OB_Unlock+0x2c>)
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d107      	bne.n	80024bc <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 80024ac:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <HAL_FLASH_OB_Unlock+0x2c>)
 80024ae:	4a07      	ldr	r2, [pc, #28]	; (80024cc <HAL_FLASH_OB_Unlock+0x30>)
 80024b0:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 80024b2:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <HAL_FLASH_OB_Unlock+0x2c>)
 80024b4:	4a06      	ldr	r2, [pc, #24]	; (80024d0 <HAL_FLASH_OB_Unlock+0x34>)
 80024b6:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 80024b8:	2300      	movs	r3, #0
 80024ba:	e000      	b.n	80024be <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
}
 80024be:	4618      	mov	r0, r3
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	40022000 	.word	0x40022000
 80024cc:	45670123 	.word	0x45670123
 80024d0:	cdef89ab 	.word	0xcdef89ab

080024d4 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 80024d8:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <HAL_FLASH_OB_Lock+0x1c>)
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	4a04      	ldr	r2, [pc, #16]	; (80024f0 <HAL_FLASH_OB_Lock+0x1c>)
 80024de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024e2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	40022000 	.word	0x40022000

080024f4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	460b      	mov	r3, r1
 80024fe:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002500:	4b08      	ldr	r3, [pc, #32]	; (8002524 <FLASH_Program_HalfWord+0x30>)
 8002502:	2200      	movs	r2, #0
 8002504:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002506:	4b08      	ldr	r3, [pc, #32]	; (8002528 <FLASH_Program_HalfWord+0x34>)
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	4a07      	ldr	r2, [pc, #28]	; (8002528 <FLASH_Program_HalfWord+0x34>)
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	887a      	ldrh	r2, [r7, #2]
 8002516:	801a      	strh	r2, [r3, #0]
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	200003f8 	.word	0x200003f8
 8002528:	40022000 	.word	0x40022000

0800252c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002534:	f7ff fd20 	bl	8001f78 <HAL_GetTick>
 8002538:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800253a:	e010      	b.n	800255e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002542:	d00c      	beq.n	800255e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d007      	beq.n	800255a <FLASH_WaitForLastOperation+0x2e>
 800254a:	f7ff fd15 	bl	8001f78 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	429a      	cmp	r2, r3
 8002558:	d201      	bcs.n	800255e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e025      	b.n	80025aa <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800255e:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <FLASH_WaitForLastOperation+0x88>)
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1e8      	bne.n	800253c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800256a:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <FLASH_WaitForLastOperation+0x88>)
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f003 0320 	and.w	r3, r3, #32
 8002572:	2b00      	cmp	r3, #0
 8002574:	d002      	beq.n	800257c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002576:	4b0f      	ldr	r3, [pc, #60]	; (80025b4 <FLASH_WaitForLastOperation+0x88>)
 8002578:	2220      	movs	r2, #32
 800257a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800257c:	4b0d      	ldr	r3, [pc, #52]	; (80025b4 <FLASH_WaitForLastOperation+0x88>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f003 0310 	and.w	r3, r3, #16
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10b      	bne.n	80025a0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002588:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <FLASH_WaitForLastOperation+0x88>)
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002590:	2b00      	cmp	r3, #0
 8002592:	d105      	bne.n	80025a0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002594:	4b07      	ldr	r3, [pc, #28]	; (80025b4 <FLASH_WaitForLastOperation+0x88>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80025a0:	f000 f80a 	bl	80025b8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e000      	b.n	80025aa <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	40022000 	.word	0x40022000

080025b8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80025be:	2300      	movs	r3, #0
 80025c0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80025c2:	4b23      	ldr	r3, [pc, #140]	; (8002650 <FLASH_SetErrorCode+0x98>)
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	f003 0310 	and.w	r3, r3, #16
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d009      	beq.n	80025e2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80025ce:	4b21      	ldr	r3, [pc, #132]	; (8002654 <FLASH_SetErrorCode+0x9c>)
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	f043 0302 	orr.w	r3, r3, #2
 80025d6:	4a1f      	ldr	r2, [pc, #124]	; (8002654 <FLASH_SetErrorCode+0x9c>)
 80025d8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f043 0310 	orr.w	r3, r3, #16
 80025e0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80025e2:	4b1b      	ldr	r3, [pc, #108]	; (8002650 <FLASH_SetErrorCode+0x98>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f003 0304 	and.w	r3, r3, #4
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d009      	beq.n	8002602 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80025ee:	4b19      	ldr	r3, [pc, #100]	; (8002654 <FLASH_SetErrorCode+0x9c>)
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	4a17      	ldr	r2, [pc, #92]	; (8002654 <FLASH_SetErrorCode+0x9c>)
 80025f8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f043 0304 	orr.w	r3, r3, #4
 8002600:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002602:	4b13      	ldr	r3, [pc, #76]	; (8002650 <FLASH_SetErrorCode+0x98>)
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00b      	beq.n	8002626 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800260e:	4b11      	ldr	r3, [pc, #68]	; (8002654 <FLASH_SetErrorCode+0x9c>)
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	f043 0304 	orr.w	r3, r3, #4
 8002616:	4a0f      	ldr	r2, [pc, #60]	; (8002654 <FLASH_SetErrorCode+0x9c>)
 8002618:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800261a:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <FLASH_SetErrorCode+0x98>)
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	4a0c      	ldr	r2, [pc, #48]	; (8002650 <FLASH_SetErrorCode+0x98>)
 8002620:	f023 0301 	bic.w	r3, r3, #1
 8002624:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f240 1201 	movw	r2, #257	; 0x101
 800262c:	4293      	cmp	r3, r2
 800262e:	d106      	bne.n	800263e <FLASH_SetErrorCode+0x86>
 8002630:	4b07      	ldr	r3, [pc, #28]	; (8002650 <FLASH_SetErrorCode+0x98>)
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	4a06      	ldr	r2, [pc, #24]	; (8002650 <FLASH_SetErrorCode+0x98>)
 8002636:	f023 0301 	bic.w	r3, r3, #1
 800263a:	61d3      	str	r3, [r2, #28]
}  
 800263c:	e002      	b.n	8002644 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800263e:	4a04      	ldr	r2, [pc, #16]	; (8002650 <FLASH_SetErrorCode+0x98>)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	60d3      	str	r3, [r2, #12]
}  
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	bc80      	pop	{r7}
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	40022000 	.word	0x40022000
 8002654:	200003f8 	.word	0x200003f8

08002658 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002666:	2300      	movs	r3, #0
 8002668:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800266a:	4b2f      	ldr	r3, [pc, #188]	; (8002728 <HAL_FLASHEx_Erase+0xd0>)
 800266c:	7e1b      	ldrb	r3, [r3, #24]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d101      	bne.n	8002676 <HAL_FLASHEx_Erase+0x1e>
 8002672:	2302      	movs	r3, #2
 8002674:	e053      	b.n	800271e <HAL_FLASHEx_Erase+0xc6>
 8002676:	4b2c      	ldr	r3, [pc, #176]	; (8002728 <HAL_FLASHEx_Erase+0xd0>)
 8002678:	2201      	movs	r2, #1
 800267a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b02      	cmp	r3, #2
 8002682:	d116      	bne.n	80026b2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002684:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002688:	f7ff ff50 	bl	800252c <FLASH_WaitForLastOperation>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d141      	bne.n	8002716 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002692:	2001      	movs	r0, #1
 8002694:	f000 f84c 	bl	8002730 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002698:	f24c 3050 	movw	r0, #50000	; 0xc350
 800269c:	f7ff ff46 	bl	800252c <FLASH_WaitForLastOperation>
 80026a0:	4603      	mov	r3, r0
 80026a2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80026a4:	4b21      	ldr	r3, [pc, #132]	; (800272c <HAL_FLASHEx_Erase+0xd4>)
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	4a20      	ldr	r2, [pc, #128]	; (800272c <HAL_FLASHEx_Erase+0xd4>)
 80026aa:	f023 0304 	bic.w	r3, r3, #4
 80026ae:	6113      	str	r3, [r2, #16]
 80026b0:	e031      	b.n	8002716 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80026b2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026b6:	f7ff ff39 	bl	800252c <FLASH_WaitForLastOperation>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d12a      	bne.n	8002716 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	f04f 32ff 	mov.w	r2, #4294967295
 80026c6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	60bb      	str	r3, [r7, #8]
 80026ce:	e019      	b.n	8002704 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80026d0:	68b8      	ldr	r0, [r7, #8]
 80026d2:	f000 f849 	bl	8002768 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026d6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026da:	f7ff ff27 	bl	800252c <FLASH_WaitForLastOperation>
 80026de:	4603      	mov	r3, r0
 80026e0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80026e2:	4b12      	ldr	r3, [pc, #72]	; (800272c <HAL_FLASHEx_Erase+0xd4>)
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	4a11      	ldr	r2, [pc, #68]	; (800272c <HAL_FLASHEx_Erase+0xd4>)
 80026e8:	f023 0302 	bic.w	r3, r3, #2
 80026ec:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	601a      	str	r2, [r3, #0]
            break;
 80026fa:	e00c      	b.n	8002716 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002702:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	029a      	lsls	r2, r3, #10
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	429a      	cmp	r2, r3
 8002714:	d3dc      	bcc.n	80026d0 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002716:	4b04      	ldr	r3, [pc, #16]	; (8002728 <HAL_FLASHEx_Erase+0xd0>)
 8002718:	2200      	movs	r2, #0
 800271a:	761a      	strb	r2, [r3, #24]

  return status;
 800271c:	7bfb      	ldrb	r3, [r7, #15]
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	200003f8 	.word	0x200003f8
 800272c:	40022000 	.word	0x40022000

08002730 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002738:	4b09      	ldr	r3, [pc, #36]	; (8002760 <FLASH_MassErase+0x30>)
 800273a:	2200      	movs	r2, #0
 800273c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800273e:	4b09      	ldr	r3, [pc, #36]	; (8002764 <FLASH_MassErase+0x34>)
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	4a08      	ldr	r2, [pc, #32]	; (8002764 <FLASH_MassErase+0x34>)
 8002744:	f043 0304 	orr.w	r3, r3, #4
 8002748:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <FLASH_MassErase+0x34>)
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	4a05      	ldr	r2, [pc, #20]	; (8002764 <FLASH_MassErase+0x34>)
 8002750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002754:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr
 8002760:	200003f8 	.word	0x200003f8
 8002764:	40022000 	.word	0x40022000

08002768 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002770:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <FLASH_PageErase+0x38>)
 8002772:	2200      	movs	r2, #0
 8002774:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002776:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <FLASH_PageErase+0x3c>)
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	4a0a      	ldr	r2, [pc, #40]	; (80027a4 <FLASH_PageErase+0x3c>)
 800277c:	f043 0302 	orr.w	r3, r3, #2
 8002780:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002782:	4a08      	ldr	r2, [pc, #32]	; (80027a4 <FLASH_PageErase+0x3c>)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002788:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <FLASH_PageErase+0x3c>)
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	4a05      	ldr	r2, [pc, #20]	; (80027a4 <FLASH_PageErase+0x3c>)
 800278e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002792:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	200003f8 	.word	0x200003f8
 80027a4:	40022000 	.word	0x40022000

080027a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b08b      	sub	sp, #44	; 0x2c
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027b2:	2300      	movs	r3, #0
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027b6:	2300      	movs	r3, #0
 80027b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ba:	e169      	b.n	8002a90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027bc:	2201      	movs	r2, #1
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	69fa      	ldr	r2, [r7, #28]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	f040 8158 	bne.w	8002a8a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	4a9a      	ldr	r2, [pc, #616]	; (8002a48 <HAL_GPIO_Init+0x2a0>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d05e      	beq.n	80028a2 <HAL_GPIO_Init+0xfa>
 80027e4:	4a98      	ldr	r2, [pc, #608]	; (8002a48 <HAL_GPIO_Init+0x2a0>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d875      	bhi.n	80028d6 <HAL_GPIO_Init+0x12e>
 80027ea:	4a98      	ldr	r2, [pc, #608]	; (8002a4c <HAL_GPIO_Init+0x2a4>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d058      	beq.n	80028a2 <HAL_GPIO_Init+0xfa>
 80027f0:	4a96      	ldr	r2, [pc, #600]	; (8002a4c <HAL_GPIO_Init+0x2a4>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d86f      	bhi.n	80028d6 <HAL_GPIO_Init+0x12e>
 80027f6:	4a96      	ldr	r2, [pc, #600]	; (8002a50 <HAL_GPIO_Init+0x2a8>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d052      	beq.n	80028a2 <HAL_GPIO_Init+0xfa>
 80027fc:	4a94      	ldr	r2, [pc, #592]	; (8002a50 <HAL_GPIO_Init+0x2a8>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d869      	bhi.n	80028d6 <HAL_GPIO_Init+0x12e>
 8002802:	4a94      	ldr	r2, [pc, #592]	; (8002a54 <HAL_GPIO_Init+0x2ac>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d04c      	beq.n	80028a2 <HAL_GPIO_Init+0xfa>
 8002808:	4a92      	ldr	r2, [pc, #584]	; (8002a54 <HAL_GPIO_Init+0x2ac>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d863      	bhi.n	80028d6 <HAL_GPIO_Init+0x12e>
 800280e:	4a92      	ldr	r2, [pc, #584]	; (8002a58 <HAL_GPIO_Init+0x2b0>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d046      	beq.n	80028a2 <HAL_GPIO_Init+0xfa>
 8002814:	4a90      	ldr	r2, [pc, #576]	; (8002a58 <HAL_GPIO_Init+0x2b0>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d85d      	bhi.n	80028d6 <HAL_GPIO_Init+0x12e>
 800281a:	2b12      	cmp	r3, #18
 800281c:	d82a      	bhi.n	8002874 <HAL_GPIO_Init+0xcc>
 800281e:	2b12      	cmp	r3, #18
 8002820:	d859      	bhi.n	80028d6 <HAL_GPIO_Init+0x12e>
 8002822:	a201      	add	r2, pc, #4	; (adr r2, 8002828 <HAL_GPIO_Init+0x80>)
 8002824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002828:	080028a3 	.word	0x080028a3
 800282c:	0800287d 	.word	0x0800287d
 8002830:	0800288f 	.word	0x0800288f
 8002834:	080028d1 	.word	0x080028d1
 8002838:	080028d7 	.word	0x080028d7
 800283c:	080028d7 	.word	0x080028d7
 8002840:	080028d7 	.word	0x080028d7
 8002844:	080028d7 	.word	0x080028d7
 8002848:	080028d7 	.word	0x080028d7
 800284c:	080028d7 	.word	0x080028d7
 8002850:	080028d7 	.word	0x080028d7
 8002854:	080028d7 	.word	0x080028d7
 8002858:	080028d7 	.word	0x080028d7
 800285c:	080028d7 	.word	0x080028d7
 8002860:	080028d7 	.word	0x080028d7
 8002864:	080028d7 	.word	0x080028d7
 8002868:	080028d7 	.word	0x080028d7
 800286c:	08002885 	.word	0x08002885
 8002870:	08002899 	.word	0x08002899
 8002874:	4a79      	ldr	r2, [pc, #484]	; (8002a5c <HAL_GPIO_Init+0x2b4>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d013      	beq.n	80028a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800287a:	e02c      	b.n	80028d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	623b      	str	r3, [r7, #32]
          break;
 8002882:	e029      	b.n	80028d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	3304      	adds	r3, #4
 800288a:	623b      	str	r3, [r7, #32]
          break;
 800288c:	e024      	b.n	80028d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	3308      	adds	r3, #8
 8002894:	623b      	str	r3, [r7, #32]
          break;
 8002896:	e01f      	b.n	80028d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	330c      	adds	r3, #12
 800289e:	623b      	str	r3, [r7, #32]
          break;
 80028a0:	e01a      	b.n	80028d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d102      	bne.n	80028b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028aa:	2304      	movs	r3, #4
 80028ac:	623b      	str	r3, [r7, #32]
          break;
 80028ae:	e013      	b.n	80028d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d105      	bne.n	80028c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028b8:	2308      	movs	r3, #8
 80028ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69fa      	ldr	r2, [r7, #28]
 80028c0:	611a      	str	r2, [r3, #16]
          break;
 80028c2:	e009      	b.n	80028d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028c4:	2308      	movs	r3, #8
 80028c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	615a      	str	r2, [r3, #20]
          break;
 80028ce:	e003      	b.n	80028d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028d0:	2300      	movs	r3, #0
 80028d2:	623b      	str	r3, [r7, #32]
          break;
 80028d4:	e000      	b.n	80028d8 <HAL_GPIO_Init+0x130>
          break;
 80028d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	2bff      	cmp	r3, #255	; 0xff
 80028dc:	d801      	bhi.n	80028e2 <HAL_GPIO_Init+0x13a>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	e001      	b.n	80028e6 <HAL_GPIO_Init+0x13e>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3304      	adds	r3, #4
 80028e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	2bff      	cmp	r3, #255	; 0xff
 80028ec:	d802      	bhi.n	80028f4 <HAL_GPIO_Init+0x14c>
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	e002      	b.n	80028fa <HAL_GPIO_Init+0x152>
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	3b08      	subs	r3, #8
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	210f      	movs	r1, #15
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	fa01 f303 	lsl.w	r3, r1, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	401a      	ands	r2, r3
 800290c:	6a39      	ldr	r1, [r7, #32]
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	fa01 f303 	lsl.w	r3, r1, r3
 8002914:	431a      	orrs	r2, r3
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 80b1 	beq.w	8002a8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002928:	4b4d      	ldr	r3, [pc, #308]	; (8002a60 <HAL_GPIO_Init+0x2b8>)
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	4a4c      	ldr	r2, [pc, #304]	; (8002a60 <HAL_GPIO_Init+0x2b8>)
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	6193      	str	r3, [r2, #24]
 8002934:	4b4a      	ldr	r3, [pc, #296]	; (8002a60 <HAL_GPIO_Init+0x2b8>)
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002940:	4a48      	ldr	r2, [pc, #288]	; (8002a64 <HAL_GPIO_Init+0x2bc>)
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	089b      	lsrs	r3, r3, #2
 8002946:	3302      	adds	r3, #2
 8002948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800294c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	f003 0303 	and.w	r3, r3, #3
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	220f      	movs	r2, #15
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	43db      	mvns	r3, r3
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	4013      	ands	r3, r2
 8002962:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a40      	ldr	r2, [pc, #256]	; (8002a68 <HAL_GPIO_Init+0x2c0>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d013      	beq.n	8002994 <HAL_GPIO_Init+0x1ec>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a3f      	ldr	r2, [pc, #252]	; (8002a6c <HAL_GPIO_Init+0x2c4>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d00d      	beq.n	8002990 <HAL_GPIO_Init+0x1e8>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a3e      	ldr	r2, [pc, #248]	; (8002a70 <HAL_GPIO_Init+0x2c8>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d007      	beq.n	800298c <HAL_GPIO_Init+0x1e4>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a3d      	ldr	r2, [pc, #244]	; (8002a74 <HAL_GPIO_Init+0x2cc>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d101      	bne.n	8002988 <HAL_GPIO_Init+0x1e0>
 8002984:	2303      	movs	r3, #3
 8002986:	e006      	b.n	8002996 <HAL_GPIO_Init+0x1ee>
 8002988:	2304      	movs	r3, #4
 800298a:	e004      	b.n	8002996 <HAL_GPIO_Init+0x1ee>
 800298c:	2302      	movs	r3, #2
 800298e:	e002      	b.n	8002996 <HAL_GPIO_Init+0x1ee>
 8002990:	2301      	movs	r3, #1
 8002992:	e000      	b.n	8002996 <HAL_GPIO_Init+0x1ee>
 8002994:	2300      	movs	r3, #0
 8002996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002998:	f002 0203 	and.w	r2, r2, #3
 800299c:	0092      	lsls	r2, r2, #2
 800299e:	4093      	lsls	r3, r2
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029a6:	492f      	ldr	r1, [pc, #188]	; (8002a64 <HAL_GPIO_Init+0x2bc>)
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	089b      	lsrs	r3, r3, #2
 80029ac:	3302      	adds	r3, #2
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d006      	beq.n	80029ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029c0:	4b2d      	ldr	r3, [pc, #180]	; (8002a78 <HAL_GPIO_Init+0x2d0>)
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	492c      	ldr	r1, [pc, #176]	; (8002a78 <HAL_GPIO_Init+0x2d0>)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	600b      	str	r3, [r1, #0]
 80029cc:	e006      	b.n	80029dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029ce:	4b2a      	ldr	r3, [pc, #168]	; (8002a78 <HAL_GPIO_Init+0x2d0>)
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	43db      	mvns	r3, r3
 80029d6:	4928      	ldr	r1, [pc, #160]	; (8002a78 <HAL_GPIO_Init+0x2d0>)
 80029d8:	4013      	ands	r3, r2
 80029da:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d006      	beq.n	80029f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029e8:	4b23      	ldr	r3, [pc, #140]	; (8002a78 <HAL_GPIO_Init+0x2d0>)
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	4922      	ldr	r1, [pc, #136]	; (8002a78 <HAL_GPIO_Init+0x2d0>)
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	604b      	str	r3, [r1, #4]
 80029f4:	e006      	b.n	8002a04 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029f6:	4b20      	ldr	r3, [pc, #128]	; (8002a78 <HAL_GPIO_Init+0x2d0>)
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	491e      	ldr	r1, [pc, #120]	; (8002a78 <HAL_GPIO_Init+0x2d0>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d006      	beq.n	8002a1e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a10:	4b19      	ldr	r3, [pc, #100]	; (8002a78 <HAL_GPIO_Init+0x2d0>)
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	4918      	ldr	r1, [pc, #96]	; (8002a78 <HAL_GPIO_Init+0x2d0>)
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	608b      	str	r3, [r1, #8]
 8002a1c:	e006      	b.n	8002a2c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a1e:	4b16      	ldr	r3, [pc, #88]	; (8002a78 <HAL_GPIO_Init+0x2d0>)
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	43db      	mvns	r3, r3
 8002a26:	4914      	ldr	r1, [pc, #80]	; (8002a78 <HAL_GPIO_Init+0x2d0>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d021      	beq.n	8002a7c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a38:	4b0f      	ldr	r3, [pc, #60]	; (8002a78 <HAL_GPIO_Init+0x2d0>)
 8002a3a:	68da      	ldr	r2, [r3, #12]
 8002a3c:	490e      	ldr	r1, [pc, #56]	; (8002a78 <HAL_GPIO_Init+0x2d0>)
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	60cb      	str	r3, [r1, #12]
 8002a44:	e021      	b.n	8002a8a <HAL_GPIO_Init+0x2e2>
 8002a46:	bf00      	nop
 8002a48:	10320000 	.word	0x10320000
 8002a4c:	10310000 	.word	0x10310000
 8002a50:	10220000 	.word	0x10220000
 8002a54:	10210000 	.word	0x10210000
 8002a58:	10120000 	.word	0x10120000
 8002a5c:	10110000 	.word	0x10110000
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40010000 	.word	0x40010000
 8002a68:	40010800 	.word	0x40010800
 8002a6c:	40010c00 	.word	0x40010c00
 8002a70:	40011000 	.word	0x40011000
 8002a74:	40011400 	.word	0x40011400
 8002a78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <HAL_GPIO_Init+0x304>)
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	43db      	mvns	r3, r3
 8002a84:	4909      	ldr	r1, [pc, #36]	; (8002aac <HAL_GPIO_Init+0x304>)
 8002a86:	4013      	ands	r3, r2
 8002a88:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a96:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f47f ae8e 	bne.w	80027bc <HAL_GPIO_Init+0x14>
  }
}
 8002aa0:	bf00      	nop
 8002aa2:	bf00      	nop
 8002aa4:	372c      	adds	r7, #44	; 0x2c
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr
 8002aac:	40010400 	.word	0x40010400

08002ab0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	807b      	strh	r3, [r7, #2]
 8002abc:	4613      	mov	r3, r2
 8002abe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ac0:	787b      	ldrb	r3, [r7, #1]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ac6:	887a      	ldrh	r2, [r7, #2]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002acc:	e003      	b.n	8002ad6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ace:	887b      	ldrh	r3, [r7, #2]
 8002ad0:	041a      	lsls	r2, r3, #16
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	611a      	str	r2, [r3, #16]
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr

08002ae0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002af2:	887a      	ldrh	r2, [r7, #2]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4013      	ands	r3, r2
 8002af8:	041a      	lsls	r2, r3, #16
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	43d9      	mvns	r1, r3
 8002afe:	887b      	ldrh	r3, [r7, #2]
 8002b00:	400b      	ands	r3, r1
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	611a      	str	r2, [r3, #16]
}
 8002b08:	bf00      	nop
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bc80      	pop	{r7}
 8002b10:	4770      	bx	lr
	...

08002b14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b1e:	4b08      	ldr	r3, [pc, #32]	; (8002b40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b20:	695a      	ldr	r2, [r3, #20]
 8002b22:	88fb      	ldrh	r3, [r7, #6]
 8002b24:	4013      	ands	r3, r2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d006      	beq.n	8002b38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b2a:	4a05      	ldr	r2, [pc, #20]	; (8002b40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b2c:	88fb      	ldrh	r3, [r7, #6]
 8002b2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b30:	88fb      	ldrh	r3, [r7, #6]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff f838 	bl	8001ba8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b38:	bf00      	nop
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40010400 	.word	0x40010400

08002b44 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b46:	b08b      	sub	sp, #44	; 0x2c
 8002b48:	af06      	add	r7, sp, #24
 8002b4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e0fd      	b.n	8002d52 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d106      	bne.n	8002b70 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f007 ff70 	bl	800aa50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2203      	movs	r2, #3
 8002b74:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f003 fc3f 	bl	8006400 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	603b      	str	r3, [r7, #0]
 8002b88:	687e      	ldr	r6, [r7, #4]
 8002b8a:	466d      	mov	r5, sp
 8002b8c:	f106 0410 	add.w	r4, r6, #16
 8002b90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b94:	6823      	ldr	r3, [r4, #0]
 8002b96:	602b      	str	r3, [r5, #0]
 8002b98:	1d33      	adds	r3, r6, #4
 8002b9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b9c:	6838      	ldr	r0, [r7, #0]
 8002b9e:	f003 fc09 	bl	80063b4 <USB_CoreInit>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d005      	beq.n	8002bb4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2202      	movs	r2, #2
 8002bac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e0ce      	b.n	8002d52 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2100      	movs	r1, #0
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f003 fc3a 	bl	8006434 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	73fb      	strb	r3, [r7, #15]
 8002bc4:	e04c      	b.n	8002c60 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	1c5a      	adds	r2, r3, #1
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	440b      	add	r3, r1
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	2201      	movs	r2, #1
 8002bda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	4613      	mov	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	440b      	add	r3, r1
 8002bec:	7bfa      	ldrb	r2, [r7, #15]
 8002bee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bf0:	7bfa      	ldrb	r2, [r7, #15]
 8002bf2:	7bfb      	ldrb	r3, [r7, #15]
 8002bf4:	b298      	uxth	r0, r3
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	440b      	add	r3, r1
 8002c02:	3336      	adds	r3, #54	; 0x36
 8002c04:	4602      	mov	r2, r0
 8002c06:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	4613      	mov	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	440b      	add	r3, r1
 8002c18:	3303      	adds	r3, #3
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c1e:	7bfa      	ldrb	r2, [r7, #15]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	440b      	add	r3, r1
 8002c2c:	3338      	adds	r3, #56	; 0x38
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c32:	7bfa      	ldrb	r2, [r7, #15]
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	440b      	add	r3, r1
 8002c40:	333c      	adds	r3, #60	; 0x3c
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c46:	7bfa      	ldrb	r2, [r7, #15]
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	440b      	add	r3, r1
 8002c54:	3340      	adds	r3, #64	; 0x40
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	73fb      	strb	r3, [r7, #15]
 8002c60:	7bfa      	ldrb	r2, [r7, #15]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d3ad      	bcc.n	8002bc6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	73fb      	strb	r3, [r7, #15]
 8002c6e:	e044      	b.n	8002cfa <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c70:	7bfa      	ldrb	r2, [r7, #15]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	440b      	add	r3, r1
 8002c7e:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002c82:	2200      	movs	r2, #0
 8002c84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c86:	7bfa      	ldrb	r2, [r7, #15]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	440b      	add	r3, r1
 8002c94:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c98:	7bfa      	ldrb	r2, [r7, #15]
 8002c9a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c9c:	7bfa      	ldrb	r2, [r7, #15]
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	440b      	add	r3, r1
 8002caa:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002cae:	2200      	movs	r2, #0
 8002cb0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cb2:	7bfa      	ldrb	r2, [r7, #15]
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4413      	add	r3, r2
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	440b      	add	r3, r1
 8002cc0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cc8:	7bfa      	ldrb	r2, [r7, #15]
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	440b      	add	r3, r1
 8002cd6:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cde:	7bfa      	ldrb	r2, [r7, #15]
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	440b      	add	r3, r1
 8002cec:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	73fb      	strb	r3, [r7, #15]
 8002cfa:	7bfa      	ldrb	r2, [r7, #15]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d3b5      	bcc.n	8002c70 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	603b      	str	r3, [r7, #0]
 8002d0a:	687e      	ldr	r6, [r7, #4]
 8002d0c:	466d      	mov	r5, sp
 8002d0e:	f106 0410 	add.w	r4, r6, #16
 8002d12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d16:	6823      	ldr	r3, [r4, #0]
 8002d18:	602b      	str	r3, [r5, #0]
 8002d1a:	1d33      	adds	r3, r6, #4
 8002d1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d1e:	6838      	ldr	r0, [r7, #0]
 8002d20:	f003 fb94 	bl	800644c <USB_DevInit>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d005      	beq.n	8002d36 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e00d      	b.n	8002d52 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f006 f846 	bl	8008ddc <USB_DevDisconnect>

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d5a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b082      	sub	sp, #8
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d101      	bne.n	8002d70 <HAL_PCD_Start+0x16>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	e016      	b.n	8002d9e <HAL_PCD_Start+0x44>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f003 fb29 	bl	80063d4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002d82:	2101      	movs	r1, #1
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f008 f8d6 	bl	800af36 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f006 f81a 	bl	8008dc8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b088      	sub	sp, #32
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f006 f81c 	bl	8008df0 <USB_ReadInterrupts>
 8002db8:	4603      	mov	r3, r0
 8002dba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dc2:	d102      	bne.n	8002dca <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 fb5f 	bl	8003488 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f006 f80e 	bl	8008df0 <USB_ReadInterrupts>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dde:	d112      	bne.n	8002e06 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002df2:	b292      	uxth	r2, r2
 8002df4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f007 fea4 	bl	800ab46 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002dfe:	2100      	movs	r1, #0
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f923 	bl	800304c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f005 fff0 	bl	8008df0 <USB_ReadInterrupts>
 8002e10:	4603      	mov	r3, r0
 8002e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e1a:	d10b      	bne.n	8002e34 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e2e:	b292      	uxth	r2, r2
 8002e30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f005 ffd9 	bl	8008df0 <USB_ReadInterrupts>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e48:	d10b      	bne.n	8002e62 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e5c:	b292      	uxth	r2, r2
 8002e5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f005 ffc2 	bl	8008df0 <USB_ReadInterrupts>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e76:	d126      	bne.n	8002ec6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0204 	bic.w	r2, r2, #4
 8002e8a:	b292      	uxth	r2, r2
 8002e8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0208 	bic.w	r2, r2, #8
 8002ea2:	b292      	uxth	r2, r2
 8002ea4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f007 fe85 	bl	800abb8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ec0:	b292      	uxth	r2, r2
 8002ec2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f005 ff90 	bl	8008df0 <USB_ReadInterrupts>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ed6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eda:	f040 8082 	bne.w	8002fe2 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002ede:	2300      	movs	r3, #0
 8002ee0:	77fb      	strb	r3, [r7, #31]
 8002ee2:	e010      	b.n	8002f06 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	7ffb      	ldrb	r3, [r7, #31]
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	441a      	add	r2, r3
 8002ef0:	7ffb      	ldrb	r3, [r7, #31]
 8002ef2:	8812      	ldrh	r2, [r2, #0]
 8002ef4:	b292      	uxth	r2, r2
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	3320      	adds	r3, #32
 8002efa:	443b      	add	r3, r7
 8002efc:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002f00:	7ffb      	ldrb	r3, [r7, #31]
 8002f02:	3301      	adds	r3, #1
 8002f04:	77fb      	strb	r3, [r7, #31]
 8002f06:	7ffb      	ldrb	r3, [r7, #31]
 8002f08:	2b07      	cmp	r3, #7
 8002f0a:	d9eb      	bls.n	8002ee4 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0201 	orr.w	r2, r2, #1
 8002f1e:	b292      	uxth	r2, r2
 8002f20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0201 	bic.w	r2, r2, #1
 8002f36:	b292      	uxth	r2, r2
 8002f38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002f3c:	bf00      	nop
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d0f6      	beq.n	8002f3e <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f62:	b292      	uxth	r2, r2
 8002f64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002f68:	2300      	movs	r3, #0
 8002f6a:	77fb      	strb	r3, [r7, #31]
 8002f6c:	e00f      	b.n	8002f8e <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002f6e:	7ffb      	ldrb	r3, [r7, #31]
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6812      	ldr	r2, [r2, #0]
 8002f74:	4611      	mov	r1, r2
 8002f76:	7ffa      	ldrb	r2, [r7, #31]
 8002f78:	0092      	lsls	r2, r2, #2
 8002f7a:	440a      	add	r2, r1
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	3320      	adds	r3, #32
 8002f80:	443b      	add	r3, r7
 8002f82:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002f86:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002f88:	7ffb      	ldrb	r3, [r7, #31]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	77fb      	strb	r3, [r7, #31]
 8002f8e:	7ffb      	ldrb	r3, [r7, #31]
 8002f90:	2b07      	cmp	r3, #7
 8002f92:	d9ec      	bls.n	8002f6e <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0208 	orr.w	r2, r2, #8
 8002fa6:	b292      	uxth	r2, r2
 8002fa8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fbe:	b292      	uxth	r2, r2
 8002fc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0204 	orr.w	r2, r2, #4
 8002fd6:	b292      	uxth	r2, r2
 8002fd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f007 fdd1 	bl	800ab84 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f005 ff02 	bl	8008df0 <USB_ReadInterrupts>
 8002fec:	4603      	mov	r3, r0
 8002fee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ff2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ff6:	d10e      	bne.n	8003016 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003000:	b29a      	uxth	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800300a:	b292      	uxth	r2, r2
 800300c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f007 fd8a 	bl	800ab2a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f005 fee8 	bl	8008df0 <USB_ReadInterrupts>
 8003020:	4603      	mov	r3, r0
 8003022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800302a:	d10b      	bne.n	8003044 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003034:	b29a      	uxth	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800303e:	b292      	uxth	r2, r2
 8003040:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003044:	bf00      	nop
 8003046:	3720      	adds	r7, #32
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	460b      	mov	r3, r1
 8003056:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800305e:	2b01      	cmp	r3, #1
 8003060:	d101      	bne.n	8003066 <HAL_PCD_SetAddress+0x1a>
 8003062:	2302      	movs	r3, #2
 8003064:	e013      	b.n	800308e <HAL_PCD_SetAddress+0x42>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	78fa      	ldrb	r2, [r7, #3]
 8003072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	78fa      	ldrb	r2, [r7, #3]
 800307c:	4611      	mov	r1, r2
 800307e:	4618      	mov	r0, r3
 8003080:	f005 fe8f 	bl	8008da2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b084      	sub	sp, #16
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	4608      	mov	r0, r1
 80030a0:	4611      	mov	r1, r2
 80030a2:	461a      	mov	r2, r3
 80030a4:	4603      	mov	r3, r0
 80030a6:	70fb      	strb	r3, [r7, #3]
 80030a8:	460b      	mov	r3, r1
 80030aa:	803b      	strh	r3, [r7, #0]
 80030ac:	4613      	mov	r3, r2
 80030ae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	da0e      	bge.n	80030da <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030bc:	78fb      	ldrb	r3, [r7, #3]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	1c5a      	adds	r2, r3, #1
 80030c4:	4613      	mov	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	4413      	add	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2201      	movs	r2, #1
 80030d6:	705a      	strb	r2, [r3, #1]
 80030d8:	e00e      	b.n	80030f8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030da:	78fb      	ldrb	r3, [r7, #3]
 80030dc:	f003 0207 	and.w	r2, r3, #7
 80030e0:	4613      	mov	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	4413      	add	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030f8:	78fb      	ldrb	r3, [r7, #3]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003104:	883a      	ldrh	r2, [r7, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	78ba      	ldrb	r2, [r7, #2]
 800310e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	785b      	ldrb	r3, [r3, #1]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d004      	beq.n	8003122 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	b29a      	uxth	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003122:	78bb      	ldrb	r3, [r7, #2]
 8003124:	2b02      	cmp	r3, #2
 8003126:	d102      	bne.n	800312e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_PCD_EP_Open+0xa6>
 8003138:	2302      	movs	r3, #2
 800313a:	e00e      	b.n	800315a <HAL_PCD_EP_Open+0xc4>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68f9      	ldr	r1, [r7, #12]
 800314a:	4618      	mov	r0, r3
 800314c:	f003 f99e 	bl	800648c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003158:	7afb      	ldrb	r3, [r7, #11]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b084      	sub	sp, #16
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
 800316a:	460b      	mov	r3, r1
 800316c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800316e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003172:	2b00      	cmp	r3, #0
 8003174:	da0e      	bge.n	8003194 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003176:	78fb      	ldrb	r3, [r7, #3]
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	4413      	add	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2201      	movs	r2, #1
 8003190:	705a      	strb	r2, [r3, #1]
 8003192:	e00e      	b.n	80031b2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003194:	78fb      	ldrb	r3, [r7, #3]
 8003196:	f003 0207 	and.w	r2, r3, #7
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	4413      	add	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80031b2:	78fb      	ldrb	r3, [r7, #3]
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <HAL_PCD_EP_Close+0x6a>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e00e      	b.n	80031ea <HAL_PCD_EP_Close+0x88>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68f9      	ldr	r1, [r7, #12]
 80031da:	4618      	mov	r0, r3
 80031dc:	f003 fcc0 	bl	8006b60 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b086      	sub	sp, #24
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	60f8      	str	r0, [r7, #12]
 80031fa:	607a      	str	r2, [r7, #4]
 80031fc:	603b      	str	r3, [r7, #0]
 80031fe:	460b      	mov	r3, r1
 8003200:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003202:	7afb      	ldrb	r3, [r7, #11]
 8003204:	f003 0207 	and.w	r2, r3, #7
 8003208:	4613      	mov	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	4413      	add	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4413      	add	r3, r2
 8003218:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	2200      	movs	r2, #0
 800322a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	2200      	movs	r2, #0
 8003230:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003232:	7afb      	ldrb	r3, [r7, #11]
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	b2da      	uxtb	r2, r3
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800323e:	7afb      	ldrb	r3, [r7, #11]
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	2b00      	cmp	r3, #0
 8003246:	d106      	bne.n	8003256 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6979      	ldr	r1, [r7, #20]
 800324e:	4618      	mov	r0, r3
 8003250:	f003 fe72 	bl	8006f38 <USB_EPStartXfer>
 8003254:	e005      	b.n	8003262 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6979      	ldr	r1, [r7, #20]
 800325c:	4618      	mov	r0, r3
 800325e:	f003 fe6b 	bl	8006f38 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3718      	adds	r7, #24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	460b      	mov	r3, r1
 8003276:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003278:	78fb      	ldrb	r3, [r7, #3]
 800327a:	f003 0207 	and.w	r2, r3, #7
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	4613      	mov	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	440b      	add	r3, r1
 800328a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800328e:	681b      	ldr	r3, [r3, #0]
}
 8003290:	4618      	mov	r0, r3
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	bc80      	pop	{r7}
 8003298:	4770      	bx	lr

0800329a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b086      	sub	sp, #24
 800329e:	af00      	add	r7, sp, #0
 80032a0:	60f8      	str	r0, [r7, #12]
 80032a2:	607a      	str	r2, [r7, #4]
 80032a4:	603b      	str	r3, [r7, #0]
 80032a6:	460b      	mov	r3, r1
 80032a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032aa:	7afb      	ldrb	r3, [r7, #11]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	1c5a      	adds	r2, r3, #1
 80032b2:	4613      	mov	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	4413      	add	r3, r2
 80032be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2200      	movs	r2, #0
 80032de:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2201      	movs	r2, #1
 80032e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032e6:	7afb      	ldrb	r3, [r7, #11]
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032f2:	7afb      	ldrb	r3, [r7, #11]
 80032f4:	f003 0307 	and.w	r3, r3, #7
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d106      	bne.n	800330a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6979      	ldr	r1, [r7, #20]
 8003302:	4618      	mov	r0, r3
 8003304:	f003 fe18 	bl	8006f38 <USB_EPStartXfer>
 8003308:	e005      	b.n	8003316 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6979      	ldr	r1, [r7, #20]
 8003310:	4618      	mov	r0, r3
 8003312:	f003 fe11 	bl	8006f38 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3718      	adds	r7, #24
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	460b      	mov	r3, r1
 800332a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800332c:	78fb      	ldrb	r3, [r7, #3]
 800332e:	f003 0207 	and.w	r2, r3, #7
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	429a      	cmp	r2, r3
 8003338:	d901      	bls.n	800333e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e04c      	b.n	80033d8 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800333e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003342:	2b00      	cmp	r3, #0
 8003344:	da0e      	bge.n	8003364 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003346:	78fb      	ldrb	r3, [r7, #3]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	1c5a      	adds	r2, r3, #1
 800334e:	4613      	mov	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	4413      	add	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2201      	movs	r2, #1
 8003360:	705a      	strb	r2, [r3, #1]
 8003362:	e00c      	b.n	800337e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003364:	78fa      	ldrb	r2, [r7, #3]
 8003366:	4613      	mov	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	4413      	add	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2201      	movs	r2, #1
 8003382:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003384:	78fb      	ldrb	r3, [r7, #3]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	b2da      	uxtb	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003396:	2b01      	cmp	r3, #1
 8003398:	d101      	bne.n	800339e <HAL_PCD_EP_SetStall+0x7e>
 800339a:	2302      	movs	r3, #2
 800339c:	e01c      	b.n	80033d8 <HAL_PCD_EP_SetStall+0xb8>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68f9      	ldr	r1, [r7, #12]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f005 fbfb 	bl	8008ba8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033b2:	78fb      	ldrb	r3, [r7, #3]
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d108      	bne.n	80033ce <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80033c6:	4619      	mov	r1, r3
 80033c8:	4610      	mov	r0, r2
 80033ca:	f005 fd20 	bl	8008e0e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033ec:	78fb      	ldrb	r3, [r7, #3]
 80033ee:	f003 020f 	and.w	r2, r3, #15
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d901      	bls.n	80033fe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e040      	b.n	8003480 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003402:	2b00      	cmp	r3, #0
 8003404:	da0e      	bge.n	8003424 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003406:	78fb      	ldrb	r3, [r7, #3]
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	1c5a      	adds	r2, r3, #1
 800340e:	4613      	mov	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	4413      	add	r3, r2
 800341a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2201      	movs	r2, #1
 8003420:	705a      	strb	r2, [r3, #1]
 8003422:	e00e      	b.n	8003442 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003424:	78fb      	ldrb	r3, [r7, #3]
 8003426:	f003 0207 	and.w	r2, r3, #7
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	4413      	add	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003448:	78fb      	ldrb	r3, [r7, #3]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	b2da      	uxtb	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800345a:	2b01      	cmp	r3, #1
 800345c:	d101      	bne.n	8003462 <HAL_PCD_EP_ClrStall+0x82>
 800345e:	2302      	movs	r3, #2
 8003460:	e00e      	b.n	8003480 <HAL_PCD_EP_ClrStall+0xa0>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68f9      	ldr	r1, [r7, #12]
 8003470:	4618      	mov	r0, r3
 8003472:	f005 fbe9 	bl	8008c48 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08e      	sub	sp, #56	; 0x38
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003490:	e2ec      	b.n	8003a6c <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800349a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800349c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	f003 030f 	and.w	r3, r3, #15
 80034a4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80034a8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f040 8161 	bne.w	8003774 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80034b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80034b4:	f003 0310 	and.w	r3, r3, #16
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d152      	bne.n	8003562 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	881b      	ldrh	r3, [r3, #0]
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80034c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034cc:	81fb      	strh	r3, [r7, #14]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	89fb      	ldrh	r3, [r7, #14]
 80034d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034dc:	b29b      	uxth	r3, r3
 80034de:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3328      	adds	r3, #40	; 0x28
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	461a      	mov	r2, r3
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	4413      	add	r3, r2
 80034fa:	3302      	adds	r3, #2
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6812      	ldr	r2, [r2, #0]
 8003502:	4413      	add	r3, r2
 8003504:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003508:	881b      	ldrh	r3, [r3, #0]
 800350a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	695a      	ldr	r2, [r3, #20]
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	441a      	add	r2, r3
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003520:	2100      	movs	r1, #0
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f007 fae7 	bl	800aaf6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 829b 	beq.w	8003a6c <PCD_EP_ISR_Handler+0x5e4>
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	2b00      	cmp	r3, #0
 800353c:	f040 8296 	bne.w	8003a6c <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003546:	b2db      	uxtb	r3, r3
 8003548:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800354c:	b2da      	uxtb	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	b292      	uxth	r2, r2
 8003554:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003560:	e284      	b.n	8003a6c <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003568:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003572:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003578:	2b00      	cmp	r3, #0
 800357a:	d034      	beq.n	80035e6 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003584:	b29b      	uxth	r3, r3
 8003586:	461a      	mov	r2, r3
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	4413      	add	r3, r2
 8003590:	3306      	adds	r3, #6
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6812      	ldr	r2, [r2, #0]
 8003598:	4413      	add	r3, r2
 800359a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6818      	ldr	r0, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	f005 fc77 	bl	8008eae <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80035cc:	4013      	ands	r3, r2
 80035ce:	823b      	strh	r3, [r7, #16]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	8a3a      	ldrh	r2, [r7, #16]
 80035d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035da:	b292      	uxth	r2, r2
 80035dc:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f007 fa5c 	bl	800aa9c <HAL_PCD_SetupStageCallback>
 80035e4:	e242      	b.n	8003a6c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80035e6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f280 823e 	bge.w	8003a6c <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80035fc:	4013      	ands	r3, r2
 80035fe:	83bb      	strh	r3, [r7, #28]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	8bba      	ldrh	r2, [r7, #28]
 8003606:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800360a:	b292      	uxth	r2, r2
 800360c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003616:	b29b      	uxth	r3, r3
 8003618:	461a      	mov	r2, r3
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	4413      	add	r3, r2
 8003622:	3306      	adds	r3, #6
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6812      	ldr	r2, [r2, #0]
 800362a:	4413      	add	r3, r2
 800362c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003630:	881b      	ldrh	r3, [r3, #0]
 8003632:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d019      	beq.n	8003676 <PCD_EP_ISR_Handler+0x1ee>
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d015      	beq.n	8003676 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6818      	ldr	r0, [r3, #0]
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	6959      	ldr	r1, [r3, #20]
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800365a:	b29b      	uxth	r3, r3
 800365c:	f005 fc27 	bl	8008eae <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	695a      	ldr	r2, [r3, #20]
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	441a      	add	r2, r3
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800366e:	2100      	movs	r1, #0
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f007 fa25 	bl	800aac0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	b29b      	uxth	r3, r3
 800367e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003682:	2b00      	cmp	r3, #0
 8003684:	f040 81f2 	bne.w	8003a6c <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	61bb      	str	r3, [r7, #24]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003696:	b29b      	uxth	r3, r3
 8003698:	461a      	mov	r2, r3
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	4413      	add	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d112      	bne.n	80036d6 <PCD_EP_ISR_Handler+0x24e>
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	881b      	ldrh	r3, [r3, #0]
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	801a      	strh	r2, [r3, #0]
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	881b      	ldrh	r3, [r3, #0]
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	801a      	strh	r2, [r3, #0]
 80036d4:	e02f      	b.n	8003736 <PCD_EP_ISR_Handler+0x2ae>
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	2b3e      	cmp	r3, #62	; 0x3e
 80036dc:	d813      	bhi.n	8003706 <PCD_EP_ISR_Handler+0x27e>
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	085b      	lsrs	r3, r3, #1
 80036e4:	633b      	str	r3, [r7, #48]	; 0x30
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <PCD_EP_ISR_Handler+0x270>
 80036f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f4:	3301      	adds	r3, #1
 80036f6:	633b      	str	r3, [r7, #48]	; 0x30
 80036f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	029b      	lsls	r3, r3, #10
 80036fe:	b29a      	uxth	r2, r3
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	801a      	strh	r2, [r3, #0]
 8003704:	e017      	b.n	8003736 <PCD_EP_ISR_Handler+0x2ae>
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	095b      	lsrs	r3, r3, #5
 800370c:	633b      	str	r3, [r7, #48]	; 0x30
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	f003 031f 	and.w	r3, r3, #31
 8003716:	2b00      	cmp	r3, #0
 8003718:	d102      	bne.n	8003720 <PCD_EP_ISR_Handler+0x298>
 800371a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371c:	3b01      	subs	r3, #1
 800371e:	633b      	str	r3, [r7, #48]	; 0x30
 8003720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003722:	b29b      	uxth	r3, r3
 8003724:	029b      	lsls	r3, r3, #10
 8003726:	b29b      	uxth	r3, r3
 8003728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800372c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003730:	b29a      	uxth	r2, r3
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	b29b      	uxth	r3, r3
 800373e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003746:	827b      	strh	r3, [r7, #18]
 8003748:	8a7b      	ldrh	r3, [r7, #18]
 800374a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800374e:	827b      	strh	r3, [r7, #18]
 8003750:	8a7b      	ldrh	r3, [r7, #18]
 8003752:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003756:	827b      	strh	r3, [r7, #18]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	8a7b      	ldrh	r3, [r7, #18]
 800375e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003762:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800376a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800376e:	b29b      	uxth	r3, r3
 8003770:	8013      	strh	r3, [r2, #0]
 8003772:	e17b      	b.n	8003a6c <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	461a      	mov	r2, r3
 800377a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4413      	add	r3, r2
 8003782:	881b      	ldrh	r3, [r3, #0]
 8003784:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003786:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800378a:	2b00      	cmp	r3, #0
 800378c:	f280 80ea 	bge.w	8003964 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	461a      	mov	r2, r3
 8003796:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	881b      	ldrh	r3, [r3, #0]
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80037a6:	4013      	ands	r3, r2
 80037a8:	853b      	strh	r3, [r7, #40]	; 0x28
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	461a      	mov	r2, r3
 80037b0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80037ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037be:	b292      	uxth	r2, r2
 80037c0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80037c2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80037c6:	4613      	mov	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4413      	add	r3, r2
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	4413      	add	r3, r2
 80037d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	7b1b      	ldrb	r3, [r3, #12]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d122      	bne.n	8003826 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	461a      	mov	r2, r3
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	4413      	add	r3, r2
 80037f4:	3306      	adds	r3, #6
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6812      	ldr	r2, [r2, #0]
 80037fc:	4413      	add	r3, r2
 80037fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003802:	881b      	ldrh	r3, [r3, #0]
 8003804:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003808:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800380a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 8087 	beq.w	8003920 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6818      	ldr	r0, [r3, #0]
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	6959      	ldr	r1, [r3, #20]
 800381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381c:	88da      	ldrh	r2, [r3, #6]
 800381e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003820:	f005 fb45 	bl	8008eae <USB_ReadPMA>
 8003824:	e07c      	b.n	8003920 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	78db      	ldrb	r3, [r3, #3]
 800382a:	2b02      	cmp	r3, #2
 800382c:	d108      	bne.n	8003840 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800382e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003830:	461a      	mov	r2, r3
 8003832:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f927 	bl	8003a88 <HAL_PCD_EP_DB_Receive>
 800383a:	4603      	mov	r3, r0
 800383c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800383e:	e06f      	b.n	8003920 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	461a      	mov	r2, r3
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	b29b      	uxth	r3, r3
 8003852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800385a:	847b      	strh	r3, [r7, #34]	; 0x22
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	461a      	mov	r2, r3
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	441a      	add	r2, r3
 800386a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800386c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003870:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003874:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003878:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800387c:	b29b      	uxth	r3, r3
 800387e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	461a      	mov	r2, r3
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	b29b      	uxth	r3, r3
 8003892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d021      	beq.n	80038de <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	461a      	mov	r2, r3
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	00db      	lsls	r3, r3, #3
 80038ac:	4413      	add	r3, r2
 80038ae:	3302      	adds	r3, #2
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	6812      	ldr	r2, [r2, #0]
 80038b6:	4413      	add	r3, r2
 80038b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038c2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80038c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d02a      	beq.n	8003920 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6818      	ldr	r0, [r3, #0]
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	6959      	ldr	r1, [r3, #20]
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	891a      	ldrh	r2, [r3, #8]
 80038d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038d8:	f005 fae9 	bl	8008eae <USB_ReadPMA>
 80038dc:	e020      	b.n	8003920 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	461a      	mov	r2, r3
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	4413      	add	r3, r2
 80038f2:	3306      	adds	r3, #6
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6812      	ldr	r2, [r2, #0]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003906:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003908:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800390a:	2b00      	cmp	r3, #0
 800390c:	d008      	beq.n	8003920 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6818      	ldr	r0, [r3, #0]
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	6959      	ldr	r1, [r3, #20]
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	895a      	ldrh	r2, [r3, #10]
 800391a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800391c:	f005 fac7 	bl	8008eae <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	69da      	ldr	r2, [r3, #28]
 8003924:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003926:	441a      	add	r2, r3
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392e:	695a      	ldr	r2, [r3, #20]
 8003930:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003932:	441a      	add	r2, r3
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d004      	beq.n	800394a <PCD_EP_ISR_Handler+0x4c2>
 8003940:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	429a      	cmp	r2, r3
 8003948:	d206      	bcs.n	8003958 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	4619      	mov	r1, r3
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f007 f8b5 	bl	800aac0 <HAL_PCD_DataOutStageCallback>
 8003956:	e005      	b.n	8003964 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800395e:	4618      	mov	r0, r3
 8003960:	f003 faea 	bl	8006f38 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003964:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396a:	2b00      	cmp	r3, #0
 800396c:	d07e      	beq.n	8003a6c <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800396e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003972:	1c5a      	adds	r2, r3, #1
 8003974:	4613      	mov	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	4413      	add	r3, r2
 8003980:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	461a      	mov	r2, r3
 8003988:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	881b      	ldrh	r3, [r3, #0]
 8003992:	b29b      	uxth	r3, r3
 8003994:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399c:	843b      	strh	r3, [r7, #32]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	461a      	mov	r2, r3
 80039a4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	441a      	add	r2, r3
 80039ac:	8c3b      	ldrh	r3, [r7, #32]
 80039ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	78db      	ldrb	r3, [r3, #3]
 80039be:	2b03      	cmp	r3, #3
 80039c0:	d00c      	beq.n	80039dc <PCD_EP_ISR_Handler+0x554>
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	78db      	ldrb	r3, [r3, #3]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d008      	beq.n	80039dc <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d146      	bne.n	8003a60 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80039d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80039d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d141      	bne.n	8003a60 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	461a      	mov	r2, r3
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	4413      	add	r3, r2
 80039f0:	3302      	adds	r3, #2
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6812      	ldr	r2, [r2, #0]
 80039f8:	4413      	add	r3, r2
 80039fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039fe:	881b      	ldrh	r3, [r3, #0]
 8003a00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a04:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	699a      	ldr	r2, [r3, #24]
 8003a0a:	8bfb      	ldrh	r3, [r7, #30]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d906      	bls.n	8003a1e <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	699a      	ldr	r2, [r3, #24]
 8003a14:	8bfb      	ldrh	r3, [r7, #30]
 8003a16:	1ad2      	subs	r2, r2, r3
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	619a      	str	r2, [r3, #24]
 8003a1c:	e002      	b.n	8003a24 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	2200      	movs	r2, #0
 8003a22:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d106      	bne.n	8003a3a <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	4619      	mov	r1, r3
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f007 f85f 	bl	800aaf6 <HAL_PCD_DataInStageCallback>
 8003a38:	e018      	b.n	8003a6c <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	695a      	ldr	r2, [r3, #20]
 8003a3e:	8bfb      	ldrh	r3, [r7, #30]
 8003a40:	441a      	add	r2, r3
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	69da      	ldr	r2, [r3, #28]
 8003a4a:	8bfb      	ldrh	r3, [r7, #30]
 8003a4c:	441a      	add	r2, r3
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f003 fa6d 	bl	8006f38 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003a5e:	e005      	b.n	8003a6c <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003a60:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003a62:	461a      	mov	r2, r3
 8003a64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 f91b 	bl	8003ca2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	b21b      	sxth	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f6ff ad0a 	blt.w	8003492 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3738      	adds	r7, #56	; 0x38
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	4613      	mov	r3, r2
 8003a94:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a96:	88fb      	ldrh	r3, [r7, #6]
 8003a98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d07e      	beq.n	8003b9e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	461a      	mov	r2, r3
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	3302      	adds	r3, #2
 8003ab6:	005b      	lsls	r3, r3, #1
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	6812      	ldr	r2, [r2, #0]
 8003abc:	4413      	add	r3, r2
 8003abe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ac2:	881b      	ldrh	r3, [r3, #0]
 8003ac4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ac8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	699a      	ldr	r2, [r3, #24]
 8003ace:	8b7b      	ldrh	r3, [r7, #26]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d306      	bcc.n	8003ae2 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	699a      	ldr	r2, [r3, #24]
 8003ad8:	8b7b      	ldrh	r3, [r7, #26]
 8003ada:	1ad2      	subs	r2, r2, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	619a      	str	r2, [r3, #24]
 8003ae0:	e002      	b.n	8003ae8 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d123      	bne.n	8003b38 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	461a      	mov	r2, r3
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	4413      	add	r3, r2
 8003afe:	881b      	ldrh	r3, [r3, #0]
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b0a:	833b      	strh	r3, [r7, #24]
 8003b0c:	8b3b      	ldrh	r3, [r7, #24]
 8003b0e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003b12:	833b      	strh	r3, [r7, #24]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	441a      	add	r2, r3
 8003b22:	8b3b      	ldrh	r3, [r7, #24]
 8003b24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b38:	88fb      	ldrh	r3, [r7, #6]
 8003b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d01f      	beq.n	8003b82 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	461a      	mov	r2, r3
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	881b      	ldrh	r3, [r3, #0]
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b5c:	82fb      	strh	r3, [r7, #22]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	441a      	add	r2, r3
 8003b6c:	8afb      	ldrh	r3, [r7, #22]
 8003b6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003b82:	8b7b      	ldrh	r3, [r7, #26]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 8087 	beq.w	8003c98 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6818      	ldr	r0, [r3, #0]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	6959      	ldr	r1, [r3, #20]
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	891a      	ldrh	r2, [r3, #8]
 8003b96:	8b7b      	ldrh	r3, [r7, #26]
 8003b98:	f005 f989 	bl	8008eae <USB_ReadPMA>
 8003b9c:	e07c      	b.n	8003c98 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	461a      	mov	r2, r3
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	4413      	add	r3, r2
 8003bb2:	3306      	adds	r3, #6
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	6812      	ldr	r2, [r2, #0]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bc0:	881b      	ldrh	r3, [r3, #0]
 8003bc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bc6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	699a      	ldr	r2, [r3, #24]
 8003bcc:	8b7b      	ldrh	r3, [r7, #26]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d306      	bcc.n	8003be0 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	699a      	ldr	r2, [r3, #24]
 8003bd6:	8b7b      	ldrh	r3, [r7, #26]
 8003bd8:	1ad2      	subs	r2, r2, r3
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	619a      	str	r2, [r3, #24]
 8003bde:	e002      	b.n	8003be6 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2200      	movs	r2, #0
 8003be4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d123      	bne.n	8003c36 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	881b      	ldrh	r3, [r3, #0]
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c08:	83fb      	strh	r3, [r7, #30]
 8003c0a:	8bfb      	ldrh	r3, [r7, #30]
 8003c0c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c10:	83fb      	strh	r3, [r7, #30]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	461a      	mov	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	441a      	add	r2, r3
 8003c20:	8bfb      	ldrh	r3, [r7, #30]
 8003c22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003c36:	88fb      	ldrh	r3, [r7, #6]
 8003c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d11f      	bne.n	8003c80 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	461a      	mov	r2, r3
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	881b      	ldrh	r3, [r3, #0]
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c5a:	83bb      	strh	r3, [r7, #28]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	461a      	mov	r2, r3
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	441a      	add	r2, r3
 8003c6a:	8bbb      	ldrh	r3, [r7, #28]
 8003c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c80:	8b7b      	ldrh	r3, [r7, #26]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d008      	beq.n	8003c98 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6818      	ldr	r0, [r3, #0]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	6959      	ldr	r1, [r3, #20]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	895a      	ldrh	r2, [r3, #10]
 8003c92:	8b7b      	ldrh	r3, [r7, #26]
 8003c94:	f005 f90b 	bl	8008eae <USB_ReadPMA>
    }
  }

  return count;
 8003c98:	8b7b      	ldrh	r3, [r7, #26]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3720      	adds	r7, #32
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b0a2      	sub	sp, #136	; 0x88
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	60f8      	str	r0, [r7, #12]
 8003caa:	60b9      	str	r1, [r7, #8]
 8003cac:	4613      	mov	r3, r2
 8003cae:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003cb0:	88fb      	ldrh	r3, [r7, #6]
 8003cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 81c7 	beq.w	800404a <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	4413      	add	r3, r2
 8003cd0:	3302      	adds	r3, #2
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ce4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	699a      	ldr	r2, [r3, #24]
 8003cec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d907      	bls.n	8003d04 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	699a      	ldr	r2, [r3, #24]
 8003cf8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003cfc:	1ad2      	subs	r2, r2, r3
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	619a      	str	r2, [r3, #24]
 8003d02:	e002      	b.n	8003d0a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2200      	movs	r2, #0
 8003d08:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f040 80b9 	bne.w	8003e86 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	785b      	ldrb	r3, [r3, #1]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d126      	bne.n	8003d6a <HAL_PCD_EP_DB_Transmit+0xc8>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d30:	4413      	add	r3, r2
 8003d32:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	011a      	lsls	r2, r3, #4
 8003d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3c:	4413      	add	r3, r2
 8003d3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d42:	627b      	str	r3, [r7, #36]	; 0x24
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	801a      	strh	r2, [r3, #0]
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	881b      	ldrh	r3, [r3, #0]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	801a      	strh	r2, [r3, #0]
 8003d68:	e01a      	b.n	8003da0 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	785b      	ldrb	r3, [r3, #1]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d116      	bne.n	8003da0 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	633b      	str	r3, [r7, #48]	; 0x30
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	461a      	mov	r2, r3
 8003d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d86:	4413      	add	r3, r2
 8003d88:	633b      	str	r3, [r7, #48]	; 0x30
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	011a      	lsls	r2, r3, #4
 8003d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d92:	4413      	add	r3, r2
 8003d94:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	623b      	str	r3, [r7, #32]
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	785b      	ldrb	r3, [r3, #1]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d126      	bne.n	8003dfc <HAL_PCD_EP_DB_Transmit+0x15a>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	61bb      	str	r3, [r7, #24]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	011a      	lsls	r2, r3, #4
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003dd4:	617b      	str	r3, [r7, #20]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	801a      	strh	r2, [r3, #0]
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	881b      	ldrh	r3, [r3, #0]
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003df0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	801a      	strh	r2, [r3, #0]
 8003dfa:	e017      	b.n	8003e2c <HAL_PCD_EP_DB_Transmit+0x18a>
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	785b      	ldrb	r3, [r3, #1]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d113      	bne.n	8003e2c <HAL_PCD_EP_DB_Transmit+0x18a>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	461a      	mov	r2, r3
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	4413      	add	r3, r2
 8003e14:	623b      	str	r3, [r7, #32]
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	011a      	lsls	r2, r3, #4
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e24:	61fb      	str	r3, [r7, #28]
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	4619      	mov	r1, r3
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f006 fe5f 	bl	800aaf6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e38:	88fb      	ldrh	r3, [r7, #6]
 8003e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 82d4 	beq.w	80043ec <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4413      	add	r3, r2
 8003e52:	881b      	ldrh	r3, [r3, #0]
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e5e:	827b      	strh	r3, [r7, #18]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	461a      	mov	r2, r3
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	441a      	add	r2, r3
 8003e6e:	8a7b      	ldrh	r3, [r7, #18]
 8003e70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	8013      	strh	r3, [r2, #0]
 8003e84:	e2b2      	b.n	80043ec <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e86:	88fb      	ldrh	r3, [r7, #6]
 8003e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d021      	beq.n	8003ed4 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	461a      	mov	r2, r3
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eaa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	441a      	add	r2, r3
 8003ebc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003ec0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ec4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ec8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	f040 8286 	bne.w	80043ec <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	695a      	ldr	r2, [r3, #20]
 8003ee4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ee8:	441a      	add	r2, r3
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	69da      	ldr	r2, [r3, #28]
 8003ef2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ef6:	441a      	add	r2, r3
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	6a1a      	ldr	r2, [r3, #32]
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d309      	bcc.n	8003f1c <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	6a1a      	ldr	r2, [r3, #32]
 8003f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f14:	1ad2      	subs	r2, r2, r3
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	621a      	str	r2, [r3, #32]
 8003f1a:	e015      	b.n	8003f48 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d107      	bne.n	8003f34 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003f24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f28:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003f32:	e009      	b.n	8003f48 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2200      	movs	r2, #0
 8003f46:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	785b      	ldrb	r3, [r3, #1]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d155      	bne.n	8003ffc <HAL_PCD_EP_DB_Transmit+0x35a>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	461a      	mov	r2, r3
 8003f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f64:	4413      	add	r3, r2
 8003f66:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	011a      	lsls	r2, r3, #4
 8003f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f70:	4413      	add	r3, r2
 8003f72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f76:	637b      	str	r3, [r7, #52]	; 0x34
 8003f78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d112      	bne.n	8003fa4 <HAL_PCD_EP_DB_Transmit+0x302>
 8003f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f80:	881b      	ldrh	r3, [r3, #0]
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f8c:	801a      	strh	r2, [r3, #0]
 8003f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa0:	801a      	strh	r2, [r3, #0]
 8003fa2:	e047      	b.n	8004034 <HAL_PCD_EP_DB_Transmit+0x392>
 8003fa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fa6:	2b3e      	cmp	r3, #62	; 0x3e
 8003fa8:	d811      	bhi.n	8003fce <HAL_PCD_EP_DB_Transmit+0x32c>
 8003faa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fac:	085b      	lsrs	r3, r3, #1
 8003fae:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d002      	beq.n	8003fc0 <HAL_PCD_EP_DB_Transmit+0x31e>
 8003fba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	029b      	lsls	r3, r3, #10
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fca:	801a      	strh	r2, [r3, #0]
 8003fcc:	e032      	b.n	8004034 <HAL_PCD_EP_DB_Transmit+0x392>
 8003fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fd0:	095b      	lsrs	r3, r3, #5
 8003fd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fd6:	f003 031f 	and.w	r3, r3, #31
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d102      	bne.n	8003fe4 <HAL_PCD_EP_DB_Transmit+0x342>
 8003fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	029b      	lsls	r3, r3, #10
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ff0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff8:	801a      	strh	r2, [r3, #0]
 8003ffa:	e01b      	b.n	8004034 <HAL_PCD_EP_DB_Transmit+0x392>
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	785b      	ldrb	r3, [r3, #1]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d117      	bne.n	8004034 <HAL_PCD_EP_DB_Transmit+0x392>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	643b      	str	r3, [r7, #64]	; 0x40
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004012:	b29b      	uxth	r3, r3
 8004014:	461a      	mov	r2, r3
 8004016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004018:	4413      	add	r3, r2
 800401a:	643b      	str	r3, [r7, #64]	; 0x40
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	011a      	lsls	r2, r3, #4
 8004022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004024:	4413      	add	r3, r2
 8004026:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800402a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800402c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800402e:	b29a      	uxth	r2, r3
 8004030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004032:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6818      	ldr	r0, [r3, #0]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	6959      	ldr	r1, [r3, #20]
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	891a      	ldrh	r2, [r3, #8]
 8004040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004042:	b29b      	uxth	r3, r3
 8004044:	f004 feee 	bl	8008e24 <USB_WritePMA>
 8004048:	e1d0      	b.n	80043ec <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004052:	b29b      	uxth	r3, r3
 8004054:	461a      	mov	r2, r3
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	4413      	add	r3, r2
 800405e:	3306      	adds	r3, #6
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	6812      	ldr	r2, [r2, #0]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004072:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	699a      	ldr	r2, [r3, #24]
 800407a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800407e:	429a      	cmp	r2, r3
 8004080:	d307      	bcc.n	8004092 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	699a      	ldr	r2, [r3, #24]
 8004086:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800408a:	1ad2      	subs	r2, r2, r3
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	619a      	str	r2, [r3, #24]
 8004090:	e002      	b.n	8004098 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2200      	movs	r2, #0
 8004096:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	2b00      	cmp	r3, #0
 800409e:	f040 80c4 	bne.w	800422a <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	785b      	ldrb	r3, [r3, #1]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d126      	bne.n	80040f8 <HAL_PCD_EP_DB_Transmit+0x456>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	461a      	mov	r2, r3
 80040bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040be:	4413      	add	r3, r2
 80040c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	011a      	lsls	r2, r3, #4
 80040c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ca:	4413      	add	r3, r2
 80040cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80040d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040d4:	881b      	ldrh	r3, [r3, #0]
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040dc:	b29a      	uxth	r2, r3
 80040de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040e0:	801a      	strh	r2, [r3, #0]
 80040e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040e4:	881b      	ldrh	r3, [r3, #0]
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040f4:	801a      	strh	r2, [r3, #0]
 80040f6:	e01a      	b.n	800412e <HAL_PCD_EP_DB_Transmit+0x48c>
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	785b      	ldrb	r3, [r3, #1]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d116      	bne.n	800412e <HAL_PCD_EP_DB_Transmit+0x48c>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	677b      	str	r3, [r7, #116]	; 0x74
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800410e:	b29b      	uxth	r3, r3
 8004110:	461a      	mov	r2, r3
 8004112:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004114:	4413      	add	r3, r2
 8004116:	677b      	str	r3, [r7, #116]	; 0x74
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	011a      	lsls	r2, r3, #4
 800411e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004120:	4413      	add	r3, r2
 8004122:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004126:	673b      	str	r3, [r7, #112]	; 0x70
 8004128:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800412a:	2200      	movs	r2, #0
 800412c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	67bb      	str	r3, [r7, #120]	; 0x78
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	785b      	ldrb	r3, [r3, #1]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d12f      	bne.n	800419c <HAL_PCD_EP_DB_Transmit+0x4fa>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800414c:	b29b      	uxth	r3, r3
 800414e:	461a      	mov	r2, r3
 8004150:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004154:	4413      	add	r3, r2
 8004156:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	011a      	lsls	r2, r3, #4
 8004160:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004164:	4413      	add	r3, r2
 8004166:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800416a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800416e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004172:	881b      	ldrh	r3, [r3, #0]
 8004174:	b29b      	uxth	r3, r3
 8004176:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800417a:	b29a      	uxth	r2, r3
 800417c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004180:	801a      	strh	r2, [r3, #0]
 8004182:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004186:	881b      	ldrh	r3, [r3, #0]
 8004188:	b29b      	uxth	r3, r3
 800418a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800418e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004192:	b29a      	uxth	r2, r3
 8004194:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004198:	801a      	strh	r2, [r3, #0]
 800419a:	e017      	b.n	80041cc <HAL_PCD_EP_DB_Transmit+0x52a>
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	785b      	ldrb	r3, [r3, #1]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d113      	bne.n	80041cc <HAL_PCD_EP_DB_Transmit+0x52a>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	461a      	mov	r2, r3
 80041b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041b2:	4413      	add	r3, r2
 80041b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	011a      	lsls	r2, r3, #4
 80041bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041be:	4413      	add	r3, r2
 80041c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80041c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041c8:	2200      	movs	r2, #0
 80041ca:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	4619      	mov	r1, r3
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f006 fc8f 	bl	800aaf6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80041d8:	88fb      	ldrh	r3, [r7, #6]
 80041da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f040 8104 	bne.w	80043ec <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	461a      	mov	r2, r3
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	4413      	add	r3, r2
 80041f2:	881b      	ldrh	r3, [r3, #0]
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	461a      	mov	r2, r3
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	441a      	add	r2, r3
 8004210:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004214:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004218:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800421c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004224:	b29b      	uxth	r3, r3
 8004226:	8013      	strh	r3, [r2, #0]
 8004228:	e0e0      	b.n	80043ec <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800422a:	88fb      	ldrh	r3, [r7, #6]
 800422c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d121      	bne.n	8004278 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	461a      	mov	r2, r3
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	881b      	ldrh	r3, [r3, #0]
 8004244:	b29b      	uxth	r3, r3
 8004246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800424a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	461a      	mov	r2, r3
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	441a      	add	r2, r3
 8004260:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004264:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004268:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800426c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004274:	b29b      	uxth	r3, r3
 8004276:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800427e:	2b01      	cmp	r3, #1
 8004280:	f040 80b4 	bne.w	80043ec <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	695a      	ldr	r2, [r3, #20]
 8004288:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800428c:	441a      	add	r2, r3
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	69da      	ldr	r2, [r3, #28]
 8004296:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800429a:	441a      	add	r2, r3
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	6a1a      	ldr	r2, [r3, #32]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d309      	bcc.n	80042c0 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	6a1a      	ldr	r2, [r3, #32]
 80042b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042b8:	1ad2      	subs	r2, r2, r3
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	621a      	str	r2, [r3, #32]
 80042be:	e015      	b.n	80042ec <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d107      	bne.n	80042d8 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80042c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80042cc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80042d6:	e009      	b.n	80042ec <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	2200      	movs	r2, #0
 80042e2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	667b      	str	r3, [r7, #100]	; 0x64
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	785b      	ldrb	r3, [r3, #1]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d155      	bne.n	80043a6 <HAL_PCD_EP_DB_Transmit+0x704>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004308:	b29b      	uxth	r3, r3
 800430a:	461a      	mov	r2, r3
 800430c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800430e:	4413      	add	r3, r2
 8004310:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	011a      	lsls	r2, r3, #4
 8004318:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800431a:	4413      	add	r3, r2
 800431c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004320:	65bb      	str	r3, [r7, #88]	; 0x58
 8004322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004324:	2b00      	cmp	r3, #0
 8004326:	d112      	bne.n	800434e <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004328:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800432a:	881b      	ldrh	r3, [r3, #0]
 800432c:	b29b      	uxth	r3, r3
 800432e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004332:	b29a      	uxth	r2, r3
 8004334:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004336:	801a      	strh	r2, [r3, #0]
 8004338:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	b29b      	uxth	r3, r3
 800433e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004346:	b29a      	uxth	r2, r3
 8004348:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800434a:	801a      	strh	r2, [r3, #0]
 800434c:	e044      	b.n	80043d8 <HAL_PCD_EP_DB_Transmit+0x736>
 800434e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004350:	2b3e      	cmp	r3, #62	; 0x3e
 8004352:	d811      	bhi.n	8004378 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004356:	085b      	lsrs	r3, r3, #1
 8004358:	657b      	str	r3, [r7, #84]	; 0x54
 800435a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800435c:	f003 0301 	and.w	r3, r3, #1
 8004360:	2b00      	cmp	r3, #0
 8004362:	d002      	beq.n	800436a <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004366:	3301      	adds	r3, #1
 8004368:	657b      	str	r3, [r7, #84]	; 0x54
 800436a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800436c:	b29b      	uxth	r3, r3
 800436e:	029b      	lsls	r3, r3, #10
 8004370:	b29a      	uxth	r2, r3
 8004372:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004374:	801a      	strh	r2, [r3, #0]
 8004376:	e02f      	b.n	80043d8 <HAL_PCD_EP_DB_Transmit+0x736>
 8004378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800437a:	095b      	lsrs	r3, r3, #5
 800437c:	657b      	str	r3, [r7, #84]	; 0x54
 800437e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004380:	f003 031f 	and.w	r3, r3, #31
 8004384:	2b00      	cmp	r3, #0
 8004386:	d102      	bne.n	800438e <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800438a:	3b01      	subs	r3, #1
 800438c:	657b      	str	r3, [r7, #84]	; 0x54
 800438e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004390:	b29b      	uxth	r3, r3
 8004392:	029b      	lsls	r3, r3, #10
 8004394:	b29b      	uxth	r3, r3
 8004396:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800439a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800439e:	b29a      	uxth	r2, r3
 80043a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043a2:	801a      	strh	r2, [r3, #0]
 80043a4:	e018      	b.n	80043d8 <HAL_PCD_EP_DB_Transmit+0x736>
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	785b      	ldrb	r3, [r3, #1]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d114      	bne.n	80043d8 <HAL_PCD_EP_DB_Transmit+0x736>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	461a      	mov	r2, r3
 80043ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043bc:	4413      	add	r3, r2
 80043be:	667b      	str	r3, [r7, #100]	; 0x64
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	011a      	lsls	r2, r3, #4
 80043c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043c8:	4413      	add	r3, r2
 80043ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043ce:	663b      	str	r3, [r7, #96]	; 0x60
 80043d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043d6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6818      	ldr	r0, [r3, #0]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	6959      	ldr	r1, [r3, #20]
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	895a      	ldrh	r2, [r3, #10]
 80043e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	f004 fd1c 	bl	8008e24 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	461a      	mov	r2, r3
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004402:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004406:	823b      	strh	r3, [r7, #16]
 8004408:	8a3b      	ldrh	r3, [r7, #16]
 800440a:	f083 0310 	eor.w	r3, r3, #16
 800440e:	823b      	strh	r3, [r7, #16]
 8004410:	8a3b      	ldrh	r3, [r7, #16]
 8004412:	f083 0320 	eor.w	r3, r3, #32
 8004416:	823b      	strh	r3, [r7, #16]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	461a      	mov	r2, r3
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	441a      	add	r2, r3
 8004426:	8a3b      	ldrh	r3, [r7, #16]
 8004428:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800442c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004430:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004438:	b29b      	uxth	r3, r3
 800443a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3788      	adds	r7, #136	; 0x88
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004446:	b480      	push	{r7}
 8004448:	b087      	sub	sp, #28
 800444a:	af00      	add	r7, sp, #0
 800444c:	60f8      	str	r0, [r7, #12]
 800444e:	607b      	str	r3, [r7, #4]
 8004450:	460b      	mov	r3, r1
 8004452:	817b      	strh	r3, [r7, #10]
 8004454:	4613      	mov	r3, r2
 8004456:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004458:	897b      	ldrh	r3, [r7, #10]
 800445a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800445e:	b29b      	uxth	r3, r3
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00b      	beq.n	800447c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004464:	897b      	ldrh	r3, [r7, #10]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	4613      	mov	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	4413      	add	r3, r2
 8004478:	617b      	str	r3, [r7, #20]
 800447a:	e009      	b.n	8004490 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800447c:	897a      	ldrh	r2, [r7, #10]
 800447e:	4613      	mov	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4413      	add	r3, r2
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	4413      	add	r3, r2
 800448e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004490:	893b      	ldrh	r3, [r7, #8]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d107      	bne.n	80044a6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2200      	movs	r2, #0
 800449a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	b29a      	uxth	r2, r3
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	80da      	strh	r2, [r3, #6]
 80044a4:	e00b      	b.n	80044be <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2201      	movs	r2, #1
 80044aa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	0c1b      	lsrs	r3, r3, #16
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	371c      	adds	r7, #28
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bc80      	pop	{r7}
 80044c8:	4770      	bx	lr
	...

080044cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e272      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 8087 	beq.w	80045fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044ec:	4b92      	ldr	r3, [pc, #584]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f003 030c 	and.w	r3, r3, #12
 80044f4:	2b04      	cmp	r3, #4
 80044f6:	d00c      	beq.n	8004512 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044f8:	4b8f      	ldr	r3, [pc, #572]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f003 030c 	and.w	r3, r3, #12
 8004500:	2b08      	cmp	r3, #8
 8004502:	d112      	bne.n	800452a <HAL_RCC_OscConfig+0x5e>
 8004504:	4b8c      	ldr	r3, [pc, #560]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800450c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004510:	d10b      	bne.n	800452a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004512:	4b89      	ldr	r3, [pc, #548]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d06c      	beq.n	80045f8 <HAL_RCC_OscConfig+0x12c>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d168      	bne.n	80045f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e24c      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004532:	d106      	bne.n	8004542 <HAL_RCC_OscConfig+0x76>
 8004534:	4b80      	ldr	r3, [pc, #512]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a7f      	ldr	r2, [pc, #508]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 800453a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800453e:	6013      	str	r3, [r2, #0]
 8004540:	e02e      	b.n	80045a0 <HAL_RCC_OscConfig+0xd4>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10c      	bne.n	8004564 <HAL_RCC_OscConfig+0x98>
 800454a:	4b7b      	ldr	r3, [pc, #492]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a7a      	ldr	r2, [pc, #488]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	4b78      	ldr	r3, [pc, #480]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a77      	ldr	r2, [pc, #476]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 800455c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004560:	6013      	str	r3, [r2, #0]
 8004562:	e01d      	b.n	80045a0 <HAL_RCC_OscConfig+0xd4>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800456c:	d10c      	bne.n	8004588 <HAL_RCC_OscConfig+0xbc>
 800456e:	4b72      	ldr	r3, [pc, #456]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a71      	ldr	r2, [pc, #452]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004574:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	4b6f      	ldr	r3, [pc, #444]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a6e      	ldr	r2, [pc, #440]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	e00b      	b.n	80045a0 <HAL_RCC_OscConfig+0xd4>
 8004588:	4b6b      	ldr	r3, [pc, #428]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a6a      	ldr	r2, [pc, #424]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 800458e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004592:	6013      	str	r3, [r2, #0]
 8004594:	4b68      	ldr	r3, [pc, #416]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a67      	ldr	r2, [pc, #412]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 800459a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800459e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d013      	beq.n	80045d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a8:	f7fd fce6 	bl	8001f78 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045b0:	f7fd fce2 	bl	8001f78 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b64      	cmp	r3, #100	; 0x64
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e200      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045c2:	4b5d      	ldr	r3, [pc, #372]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0f0      	beq.n	80045b0 <HAL_RCC_OscConfig+0xe4>
 80045ce:	e014      	b.n	80045fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d0:	f7fd fcd2 	bl	8001f78 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045d8:	f7fd fcce 	bl	8001f78 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b64      	cmp	r3, #100	; 0x64
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e1ec      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ea:	4b53      	ldr	r3, [pc, #332]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1f0      	bne.n	80045d8 <HAL_RCC_OscConfig+0x10c>
 80045f6:	e000      	b.n	80045fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d063      	beq.n	80046ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004606:	4b4c      	ldr	r3, [pc, #304]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f003 030c 	and.w	r3, r3, #12
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00b      	beq.n	800462a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004612:	4b49      	ldr	r3, [pc, #292]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f003 030c 	and.w	r3, r3, #12
 800461a:	2b08      	cmp	r3, #8
 800461c:	d11c      	bne.n	8004658 <HAL_RCC_OscConfig+0x18c>
 800461e:	4b46      	ldr	r3, [pc, #280]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d116      	bne.n	8004658 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800462a:	4b43      	ldr	r3, [pc, #268]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d005      	beq.n	8004642 <HAL_RCC_OscConfig+0x176>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d001      	beq.n	8004642 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e1c0      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004642:	4b3d      	ldr	r3, [pc, #244]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	4939      	ldr	r1, [pc, #228]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004652:	4313      	orrs	r3, r2
 8004654:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004656:	e03a      	b.n	80046ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d020      	beq.n	80046a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004660:	4b36      	ldr	r3, [pc, #216]	; (800473c <HAL_RCC_OscConfig+0x270>)
 8004662:	2201      	movs	r2, #1
 8004664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004666:	f7fd fc87 	bl	8001f78 <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800466e:	f7fd fc83 	bl	8001f78 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e1a1      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004680:	4b2d      	ldr	r3, [pc, #180]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0f0      	beq.n	800466e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800468c:	4b2a      	ldr	r3, [pc, #168]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	00db      	lsls	r3, r3, #3
 800469a:	4927      	ldr	r1, [pc, #156]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 800469c:	4313      	orrs	r3, r2
 800469e:	600b      	str	r3, [r1, #0]
 80046a0:	e015      	b.n	80046ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046a2:	4b26      	ldr	r3, [pc, #152]	; (800473c <HAL_RCC_OscConfig+0x270>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a8:	f7fd fc66 	bl	8001f78 <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046b0:	f7fd fc62 	bl	8001f78 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e180      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046c2:	4b1d      	ldr	r3, [pc, #116]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1f0      	bne.n	80046b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d03a      	beq.n	8004750 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d019      	beq.n	8004716 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046e2:	4b17      	ldr	r3, [pc, #92]	; (8004740 <HAL_RCC_OscConfig+0x274>)
 80046e4:	2201      	movs	r2, #1
 80046e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046e8:	f7fd fc46 	bl	8001f78 <HAL_GetTick>
 80046ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ee:	e008      	b.n	8004702 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046f0:	f7fd fc42 	bl	8001f78 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e160      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004702:	4b0d      	ldr	r3, [pc, #52]	; (8004738 <HAL_RCC_OscConfig+0x26c>)
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0f0      	beq.n	80046f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800470e:	2001      	movs	r0, #1
 8004710:	f000 fad8 	bl	8004cc4 <RCC_Delay>
 8004714:	e01c      	b.n	8004750 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004716:	4b0a      	ldr	r3, [pc, #40]	; (8004740 <HAL_RCC_OscConfig+0x274>)
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800471c:	f7fd fc2c 	bl	8001f78 <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004722:	e00f      	b.n	8004744 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004724:	f7fd fc28 	bl	8001f78 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d908      	bls.n	8004744 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e146      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
 8004736:	bf00      	nop
 8004738:	40021000 	.word	0x40021000
 800473c:	42420000 	.word	0x42420000
 8004740:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004744:	4b92      	ldr	r3, [pc, #584]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1e9      	bne.n	8004724 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 80a6 	beq.w	80048aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800475e:	2300      	movs	r3, #0
 8004760:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004762:	4b8b      	ldr	r3, [pc, #556]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10d      	bne.n	800478a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800476e:	4b88      	ldr	r3, [pc, #544]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	4a87      	ldr	r2, [pc, #540]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004778:	61d3      	str	r3, [r2, #28]
 800477a:	4b85      	ldr	r3, [pc, #532]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004782:	60bb      	str	r3, [r7, #8]
 8004784:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004786:	2301      	movs	r3, #1
 8004788:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800478a:	4b82      	ldr	r3, [pc, #520]	; (8004994 <HAL_RCC_OscConfig+0x4c8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004792:	2b00      	cmp	r3, #0
 8004794:	d118      	bne.n	80047c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004796:	4b7f      	ldr	r3, [pc, #508]	; (8004994 <HAL_RCC_OscConfig+0x4c8>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a7e      	ldr	r2, [pc, #504]	; (8004994 <HAL_RCC_OscConfig+0x4c8>)
 800479c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047a2:	f7fd fbe9 	bl	8001f78 <HAL_GetTick>
 80047a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a8:	e008      	b.n	80047bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047aa:	f7fd fbe5 	bl	8001f78 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b64      	cmp	r3, #100	; 0x64
 80047b6:	d901      	bls.n	80047bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e103      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047bc:	4b75      	ldr	r3, [pc, #468]	; (8004994 <HAL_RCC_OscConfig+0x4c8>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0f0      	beq.n	80047aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d106      	bne.n	80047de <HAL_RCC_OscConfig+0x312>
 80047d0:	4b6f      	ldr	r3, [pc, #444]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	4a6e      	ldr	r2, [pc, #440]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 80047d6:	f043 0301 	orr.w	r3, r3, #1
 80047da:	6213      	str	r3, [r2, #32]
 80047dc:	e02d      	b.n	800483a <HAL_RCC_OscConfig+0x36e>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10c      	bne.n	8004800 <HAL_RCC_OscConfig+0x334>
 80047e6:	4b6a      	ldr	r3, [pc, #424]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	4a69      	ldr	r2, [pc, #420]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 80047ec:	f023 0301 	bic.w	r3, r3, #1
 80047f0:	6213      	str	r3, [r2, #32]
 80047f2:	4b67      	ldr	r3, [pc, #412]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	4a66      	ldr	r2, [pc, #408]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 80047f8:	f023 0304 	bic.w	r3, r3, #4
 80047fc:	6213      	str	r3, [r2, #32]
 80047fe:	e01c      	b.n	800483a <HAL_RCC_OscConfig+0x36e>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	2b05      	cmp	r3, #5
 8004806:	d10c      	bne.n	8004822 <HAL_RCC_OscConfig+0x356>
 8004808:	4b61      	ldr	r3, [pc, #388]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	4a60      	ldr	r2, [pc, #384]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 800480e:	f043 0304 	orr.w	r3, r3, #4
 8004812:	6213      	str	r3, [r2, #32]
 8004814:	4b5e      	ldr	r3, [pc, #376]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	4a5d      	ldr	r2, [pc, #372]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 800481a:	f043 0301 	orr.w	r3, r3, #1
 800481e:	6213      	str	r3, [r2, #32]
 8004820:	e00b      	b.n	800483a <HAL_RCC_OscConfig+0x36e>
 8004822:	4b5b      	ldr	r3, [pc, #364]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	4a5a      	ldr	r2, [pc, #360]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004828:	f023 0301 	bic.w	r3, r3, #1
 800482c:	6213      	str	r3, [r2, #32]
 800482e:	4b58      	ldr	r3, [pc, #352]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	4a57      	ldr	r2, [pc, #348]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004834:	f023 0304 	bic.w	r3, r3, #4
 8004838:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d015      	beq.n	800486e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004842:	f7fd fb99 	bl	8001f78 <HAL_GetTick>
 8004846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004848:	e00a      	b.n	8004860 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800484a:	f7fd fb95 	bl	8001f78 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	f241 3288 	movw	r2, #5000	; 0x1388
 8004858:	4293      	cmp	r3, r2
 800485a:	d901      	bls.n	8004860 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e0b1      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004860:	4b4b      	ldr	r3, [pc, #300]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0ee      	beq.n	800484a <HAL_RCC_OscConfig+0x37e>
 800486c:	e014      	b.n	8004898 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800486e:	f7fd fb83 	bl	8001f78 <HAL_GetTick>
 8004872:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004874:	e00a      	b.n	800488c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004876:	f7fd fb7f 	bl	8001f78 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	f241 3288 	movw	r2, #5000	; 0x1388
 8004884:	4293      	cmp	r3, r2
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e09b      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800488c:	4b40      	ldr	r3, [pc, #256]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1ee      	bne.n	8004876 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004898:	7dfb      	ldrb	r3, [r7, #23]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d105      	bne.n	80048aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800489e:	4b3c      	ldr	r3, [pc, #240]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	4a3b      	ldr	r2, [pc, #236]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 80048a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 8087 	beq.w	80049c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048b4:	4b36      	ldr	r3, [pc, #216]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f003 030c 	and.w	r3, r3, #12
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d061      	beq.n	8004984 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d146      	bne.n	8004956 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048c8:	4b33      	ldr	r3, [pc, #204]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ce:	f7fd fb53 	bl	8001f78 <HAL_GetTick>
 80048d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048d4:	e008      	b.n	80048e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d6:	f7fd fb4f 	bl	8001f78 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e06d      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048e8:	4b29      	ldr	r3, [pc, #164]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1f0      	bne.n	80048d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048fc:	d108      	bne.n	8004910 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80048fe:	4b24      	ldr	r3, [pc, #144]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	4921      	ldr	r1, [pc, #132]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 800490c:	4313      	orrs	r3, r2
 800490e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004910:	4b1f      	ldr	r3, [pc, #124]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a19      	ldr	r1, [r3, #32]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	430b      	orrs	r3, r1
 8004922:	491b      	ldr	r1, [pc, #108]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004924:	4313      	orrs	r3, r2
 8004926:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004928:	4b1b      	ldr	r3, [pc, #108]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 800492a:	2201      	movs	r2, #1
 800492c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800492e:	f7fd fb23 	bl	8001f78 <HAL_GetTick>
 8004932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004934:	e008      	b.n	8004948 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004936:	f7fd fb1f 	bl	8001f78 <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e03d      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004948:	4b11      	ldr	r3, [pc, #68]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d0f0      	beq.n	8004936 <HAL_RCC_OscConfig+0x46a>
 8004954:	e035      	b.n	80049c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004956:	4b10      	ldr	r3, [pc, #64]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800495c:	f7fd fb0c 	bl	8001f78 <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004964:	f7fd fb08 	bl	8001f78 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e026      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004976:	4b06      	ldr	r3, [pc, #24]	; (8004990 <HAL_RCC_OscConfig+0x4c4>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1f0      	bne.n	8004964 <HAL_RCC_OscConfig+0x498>
 8004982:	e01e      	b.n	80049c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	69db      	ldr	r3, [r3, #28]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d107      	bne.n	800499c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e019      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
 8004990:	40021000 	.word	0x40021000
 8004994:	40007000 	.word	0x40007000
 8004998:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800499c:	4b0b      	ldr	r3, [pc, #44]	; (80049cc <HAL_RCC_OscConfig+0x500>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d106      	bne.n	80049be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d001      	beq.n	80049c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e000      	b.n	80049c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3718      	adds	r7, #24
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40021000 	.word	0x40021000

080049d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e0d0      	b.n	8004b86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049e4:	4b6a      	ldr	r3, [pc, #424]	; (8004b90 <HAL_RCC_ClockConfig+0x1c0>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d910      	bls.n	8004a14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049f2:	4b67      	ldr	r3, [pc, #412]	; (8004b90 <HAL_RCC_ClockConfig+0x1c0>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f023 0207 	bic.w	r2, r3, #7
 80049fa:	4965      	ldr	r1, [pc, #404]	; (8004b90 <HAL_RCC_ClockConfig+0x1c0>)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a02:	4b63      	ldr	r3, [pc, #396]	; (8004b90 <HAL_RCC_ClockConfig+0x1c0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d001      	beq.n	8004a14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e0b8      	b.n	8004b86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d020      	beq.n	8004a62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d005      	beq.n	8004a38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a2c:	4b59      	ldr	r3, [pc, #356]	; (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	4a58      	ldr	r2, [pc, #352]	; (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004a32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0308 	and.w	r3, r3, #8
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d005      	beq.n	8004a50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a44:	4b53      	ldr	r3, [pc, #332]	; (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	4a52      	ldr	r2, [pc, #328]	; (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004a4a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004a4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a50:	4b50      	ldr	r3, [pc, #320]	; (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	494d      	ldr	r1, [pc, #308]	; (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d040      	beq.n	8004af0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d107      	bne.n	8004a86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a76:	4b47      	ldr	r3, [pc, #284]	; (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d115      	bne.n	8004aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e07f      	b.n	8004b86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d107      	bne.n	8004a9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a8e:	4b41      	ldr	r3, [pc, #260]	; (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d109      	bne.n	8004aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e073      	b.n	8004b86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a9e:	4b3d      	ldr	r3, [pc, #244]	; (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e06b      	b.n	8004b86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aae:	4b39      	ldr	r3, [pc, #228]	; (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f023 0203 	bic.w	r2, r3, #3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	4936      	ldr	r1, [pc, #216]	; (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ac0:	f7fd fa5a 	bl	8001f78 <HAL_GetTick>
 8004ac4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ac6:	e00a      	b.n	8004ade <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ac8:	f7fd fa56 	bl	8001f78 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e053      	b.n	8004b86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ade:	4b2d      	ldr	r3, [pc, #180]	; (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f003 020c 	and.w	r2, r3, #12
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d1eb      	bne.n	8004ac8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004af0:	4b27      	ldr	r3, [pc, #156]	; (8004b90 <HAL_RCC_ClockConfig+0x1c0>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d210      	bcs.n	8004b20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004afe:	4b24      	ldr	r3, [pc, #144]	; (8004b90 <HAL_RCC_ClockConfig+0x1c0>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f023 0207 	bic.w	r2, r3, #7
 8004b06:	4922      	ldr	r1, [pc, #136]	; (8004b90 <HAL_RCC_ClockConfig+0x1c0>)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b0e:	4b20      	ldr	r3, [pc, #128]	; (8004b90 <HAL_RCC_ClockConfig+0x1c0>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d001      	beq.n	8004b20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e032      	b.n	8004b86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d008      	beq.n	8004b3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b2c:	4b19      	ldr	r3, [pc, #100]	; (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	4916      	ldr	r1, [pc, #88]	; (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0308 	and.w	r3, r3, #8
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d009      	beq.n	8004b5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b4a:	4b12      	ldr	r3, [pc, #72]	; (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	490e      	ldr	r1, [pc, #56]	; (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b5e:	f000 f821 	bl	8004ba4 <HAL_RCC_GetSysClockFreq>
 8004b62:	4602      	mov	r2, r0
 8004b64:	4b0b      	ldr	r3, [pc, #44]	; (8004b94 <HAL_RCC_ClockConfig+0x1c4>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	091b      	lsrs	r3, r3, #4
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	490a      	ldr	r1, [pc, #40]	; (8004b98 <HAL_RCC_ClockConfig+0x1c8>)
 8004b70:	5ccb      	ldrb	r3, [r1, r3]
 8004b72:	fa22 f303 	lsr.w	r3, r2, r3
 8004b76:	4a09      	ldr	r2, [pc, #36]	; (8004b9c <HAL_RCC_ClockConfig+0x1cc>)
 8004b78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b7a:	4b09      	ldr	r3, [pc, #36]	; (8004ba0 <HAL_RCC_ClockConfig+0x1d0>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fd f9b8 	bl	8001ef4 <HAL_InitTick>

  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	40022000 	.word	0x40022000
 8004b94:	40021000 	.word	0x40021000
 8004b98:	0800b088 	.word	0x0800b088
 8004b9c:	20000004 	.word	0x20000004
 8004ba0:	20000008 	.word	0x20000008

08004ba4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ba4:	b490      	push	{r4, r7}
 8004ba6:	b08a      	sub	sp, #40	; 0x28
 8004ba8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004baa:	4b29      	ldr	r3, [pc, #164]	; (8004c50 <HAL_RCC_GetSysClockFreq+0xac>)
 8004bac:	1d3c      	adds	r4, r7, #4
 8004bae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004bb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004bb4:	f240 2301 	movw	r3, #513	; 0x201
 8004bb8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	61fb      	str	r3, [r7, #28]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	61bb      	str	r3, [r7, #24]
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004bce:	4b21      	ldr	r3, [pc, #132]	; (8004c54 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	f003 030c 	and.w	r3, r3, #12
 8004bda:	2b04      	cmp	r3, #4
 8004bdc:	d002      	beq.n	8004be4 <HAL_RCC_GetSysClockFreq+0x40>
 8004bde:	2b08      	cmp	r3, #8
 8004be0:	d003      	beq.n	8004bea <HAL_RCC_GetSysClockFreq+0x46>
 8004be2:	e02b      	b.n	8004c3c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004be4:	4b1c      	ldr	r3, [pc, #112]	; (8004c58 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004be6:	623b      	str	r3, [r7, #32]
      break;
 8004be8:	e02b      	b.n	8004c42 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	0c9b      	lsrs	r3, r3, #18
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	3328      	adds	r3, #40	; 0x28
 8004bf4:	443b      	add	r3, r7
 8004bf6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004bfa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d012      	beq.n	8004c2c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c06:	4b13      	ldr	r3, [pc, #76]	; (8004c54 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	0c5b      	lsrs	r3, r3, #17
 8004c0c:	f003 0301 	and.w	r3, r3, #1
 8004c10:	3328      	adds	r3, #40	; 0x28
 8004c12:	443b      	add	r3, r7
 8004c14:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004c18:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	4a0e      	ldr	r2, [pc, #56]	; (8004c58 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004c1e:	fb03 f202 	mul.w	r2, r3, r2
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c28:	627b      	str	r3, [r7, #36]	; 0x24
 8004c2a:	e004      	b.n	8004c36 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	4a0b      	ldr	r2, [pc, #44]	; (8004c5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c30:	fb02 f303 	mul.w	r3, r2, r3
 8004c34:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	623b      	str	r3, [r7, #32]
      break;
 8004c3a:	e002      	b.n	8004c42 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c3c:	4b06      	ldr	r3, [pc, #24]	; (8004c58 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004c3e:	623b      	str	r3, [r7, #32]
      break;
 8004c40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c42:	6a3b      	ldr	r3, [r7, #32]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3728      	adds	r7, #40	; 0x28
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bc90      	pop	{r4, r7}
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	0800b030 	.word	0x0800b030
 8004c54:	40021000 	.word	0x40021000
 8004c58:	007a1200 	.word	0x007a1200
 8004c5c:	003d0900 	.word	0x003d0900

08004c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c64:	4b02      	ldr	r3, [pc, #8]	; (8004c70 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c66:	681b      	ldr	r3, [r3, #0]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bc80      	pop	{r7}
 8004c6e:	4770      	bx	lr
 8004c70:	20000004 	.word	0x20000004

08004c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c78:	f7ff fff2 	bl	8004c60 <HAL_RCC_GetHCLKFreq>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	4b05      	ldr	r3, [pc, #20]	; (8004c94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	0a1b      	lsrs	r3, r3, #8
 8004c84:	f003 0307 	and.w	r3, r3, #7
 8004c88:	4903      	ldr	r1, [pc, #12]	; (8004c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c8a:	5ccb      	ldrb	r3, [r1, r3]
 8004c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	40021000 	.word	0x40021000
 8004c98:	0800b098 	.word	0x0800b098

08004c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ca0:	f7ff ffde 	bl	8004c60 <HAL_RCC_GetHCLKFreq>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	4b05      	ldr	r3, [pc, #20]	; (8004cbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	0adb      	lsrs	r3, r3, #11
 8004cac:	f003 0307 	and.w	r3, r3, #7
 8004cb0:	4903      	ldr	r1, [pc, #12]	; (8004cc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cb2:	5ccb      	ldrb	r3, [r1, r3]
 8004cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	0800b098 	.word	0x0800b098

08004cc4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ccc:	4b0a      	ldr	r3, [pc, #40]	; (8004cf8 <RCC_Delay+0x34>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a0a      	ldr	r2, [pc, #40]	; (8004cfc <RCC_Delay+0x38>)
 8004cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd6:	0a5b      	lsrs	r3, r3, #9
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	fb02 f303 	mul.w	r3, r2, r3
 8004cde:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ce0:	bf00      	nop
  }
  while (Delay --);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	1e5a      	subs	r2, r3, #1
 8004ce6:	60fa      	str	r2, [r7, #12]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1f9      	bne.n	8004ce0 <RCC_Delay+0x1c>
}
 8004cec:	bf00      	nop
 8004cee:	bf00      	nop
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bc80      	pop	{r7}
 8004cf6:	4770      	bx	lr
 8004cf8:	20000004 	.word	0x20000004
 8004cfc:	10624dd3 	.word	0x10624dd3

08004d00 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	613b      	str	r3, [r7, #16]
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d07d      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d20:	4b4f      	ldr	r3, [pc, #316]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10d      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d2c:	4b4c      	ldr	r3, [pc, #304]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	4a4b      	ldr	r2, [pc, #300]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d36:	61d3      	str	r3, [r2, #28]
 8004d38:	4b49      	ldr	r3, [pc, #292]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d3a:	69db      	ldr	r3, [r3, #28]
 8004d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d40:	60bb      	str	r3, [r7, #8]
 8004d42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d44:	2301      	movs	r3, #1
 8004d46:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d48:	4b46      	ldr	r3, [pc, #280]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d118      	bne.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d54:	4b43      	ldr	r3, [pc, #268]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a42      	ldr	r2, [pc, #264]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d60:	f7fd f90a 	bl	8001f78 <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d66:	e008      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d68:	f7fd f906 	bl	8001f78 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b64      	cmp	r3, #100	; 0x64
 8004d74:	d901      	bls.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e06d      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d7a:	4b3a      	ldr	r3, [pc, #232]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d0f0      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d86:	4b36      	ldr	r3, [pc, #216]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d8e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d02e      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d027      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004da4:	4b2e      	ldr	r3, [pc, #184]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dae:	4b2e      	ldr	r3, [pc, #184]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004db0:	2201      	movs	r2, #1
 8004db2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004db4:	4b2c      	ldr	r3, [pc, #176]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004db6:	2200      	movs	r2, #0
 8004db8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004dba:	4a29      	ldr	r2, [pc, #164]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d014      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dca:	f7fd f8d5 	bl	8001f78 <HAL_GetTick>
 8004dce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dd0:	e00a      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dd2:	f7fd f8d1 	bl	8001f78 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d901      	bls.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e036      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de8:	4b1d      	ldr	r3, [pc, #116]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d0ee      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004df4:	4b1a      	ldr	r3, [pc, #104]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	4917      	ldr	r1, [pc, #92]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e06:	7dfb      	ldrb	r3, [r7, #23]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d105      	bne.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e0c:	4b14      	ldr	r3, [pc, #80]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e0e:	69db      	ldr	r3, [r3, #28]
 8004e10:	4a13      	ldr	r2, [pc, #76]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e16:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d008      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e24:	4b0e      	ldr	r3, [pc, #56]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	490b      	ldr	r1, [pc, #44]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0310 	and.w	r3, r3, #16
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d008      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e42:	4b07      	ldr	r3, [pc, #28]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	4904      	ldr	r1, [pc, #16]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3718      	adds	r7, #24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	40021000 	.word	0x40021000
 8004e64:	40007000 	.word	0x40007000
 8004e68:	42420440 	.word	0x42420440

08004e6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e041      	b.n	8004f02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d106      	bne.n	8004e98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7fc ff1c 	bl	8001cd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	3304      	adds	r3, #4
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4610      	mov	r0, r2
 8004eac:	f000 fc9a 	bl	80057e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
	...

08004f0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d001      	beq.n	8004f24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e03a      	b.n	8004f9a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0201 	orr.w	r2, r2, #1
 8004f3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a18      	ldr	r2, [pc, #96]	; (8004fa4 <HAL_TIM_Base_Start_IT+0x98>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d00e      	beq.n	8004f64 <HAL_TIM_Base_Start_IT+0x58>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f4e:	d009      	beq.n	8004f64 <HAL_TIM_Base_Start_IT+0x58>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a14      	ldr	r2, [pc, #80]	; (8004fa8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d004      	beq.n	8004f64 <HAL_TIM_Base_Start_IT+0x58>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a13      	ldr	r2, [pc, #76]	; (8004fac <HAL_TIM_Base_Start_IT+0xa0>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d111      	bne.n	8004f88 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f003 0307 	and.w	r3, r3, #7
 8004f6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2b06      	cmp	r3, #6
 8004f74:	d010      	beq.n	8004f98 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f042 0201 	orr.w	r2, r2, #1
 8004f84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f86:	e007      	b.n	8004f98 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f042 0201 	orr.w	r2, r2, #1
 8004f96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bc80      	pop	{r7}
 8004fa2:	4770      	bx	lr
 8004fa4:	40012c00 	.word	0x40012c00
 8004fa8:	40000400 	.word	0x40000400
 8004fac:	40000800 	.word	0x40000800

08004fb0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f022 0201 	bic.w	r2, r2, #1
 8004fc6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6a1a      	ldr	r2, [r3, #32]
 8004fce:	f241 1311 	movw	r3, #4369	; 0x1111
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10f      	bne.n	8004ff8 <HAL_TIM_Base_Stop_IT+0x48>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6a1a      	ldr	r2, [r3, #32]
 8004fde:	f240 4344 	movw	r3, #1092	; 0x444
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d107      	bne.n	8004ff8 <HAL_TIM_Base_Stop_IT+0x48>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0201 	bic.w	r2, r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	bc80      	pop	{r7}
 800500a:	4770      	bx	lr

0800500c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e093      	b.n	8005148 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	d106      	bne.n	800503a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f7fc fe07 	bl	8001c48 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2202      	movs	r2, #2
 800503e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	6812      	ldr	r2, [r2, #0]
 800504c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005050:	f023 0307 	bic.w	r3, r3, #7
 8005054:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	3304      	adds	r3, #4
 800505e:	4619      	mov	r1, r3
 8005060:	4610      	mov	r0, r2
 8005062:	f000 fbbf 	bl	80057e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	4313      	orrs	r3, r2
 8005086:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800508e:	f023 0303 	bic.w	r3, r3, #3
 8005092:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	021b      	lsls	r3, r3, #8
 800509e:	4313      	orrs	r3, r2
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80050ac:	f023 030c 	bic.w	r3, r3, #12
 80050b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	68da      	ldr	r2, [r3, #12]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	69db      	ldr	r3, [r3, #28]
 80050c6:	021b      	lsls	r3, r3, #8
 80050c8:	4313      	orrs	r3, r2
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	011a      	lsls	r2, r3, #4
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	031b      	lsls	r3, r3, #12
 80050dc:	4313      	orrs	r3, r2
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80050ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685a      	ldr	r2, [r3, #4]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	695b      	ldr	r3, [r3, #20]
 80050f4:	011b      	lsls	r3, r3, #4
 80050f6:	4313      	orrs	r3, r2
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3718      	adds	r7, #24
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005160:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005168:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005170:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005178:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d110      	bne.n	80051a2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005180:	7bfb      	ldrb	r3, [r7, #15]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d102      	bne.n	800518c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005186:	7b7b      	ldrb	r3, [r7, #13]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d001      	beq.n	8005190 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e089      	b.n	80052a4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051a0:	e031      	b.n	8005206 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b04      	cmp	r3, #4
 80051a6:	d110      	bne.n	80051ca <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80051a8:	7bbb      	ldrb	r3, [r7, #14]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d102      	bne.n	80051b4 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80051ae:	7b3b      	ldrb	r3, [r7, #12]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d001      	beq.n	80051b8 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e075      	b.n	80052a4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051c8:	e01d      	b.n	8005206 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80051ca:	7bfb      	ldrb	r3, [r7, #15]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d108      	bne.n	80051e2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80051d0:	7bbb      	ldrb	r3, [r7, #14]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d105      	bne.n	80051e2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80051d6:	7b7b      	ldrb	r3, [r7, #13]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d102      	bne.n	80051e2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80051dc:	7b3b      	ldrb	r3, [r7, #12]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d001      	beq.n	80051e6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e05e      	b.n	80052a4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2202      	movs	r2, #2
 80051ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2202      	movs	r2, #2
 80051f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2202      	movs	r2, #2
 80051fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2202      	movs	r2, #2
 8005202:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <HAL_TIM_Encoder_Start_IT+0xc4>
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	2b04      	cmp	r3, #4
 8005210:	d010      	beq.n	8005234 <HAL_TIM_Encoder_Start_IT+0xe4>
 8005212:	e01f      	b.n	8005254 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2201      	movs	r2, #1
 800521a:	2100      	movs	r1, #0
 800521c:	4618      	mov	r0, r3
 800521e:	f000 fbd9 	bl	80059d4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68da      	ldr	r2, [r3, #12]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f042 0202 	orr.w	r2, r2, #2
 8005230:	60da      	str	r2, [r3, #12]
      break;
 8005232:	e02e      	b.n	8005292 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2201      	movs	r2, #1
 800523a:	2104      	movs	r1, #4
 800523c:	4618      	mov	r0, r3
 800523e:	f000 fbc9 	bl	80059d4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68da      	ldr	r2, [r3, #12]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f042 0204 	orr.w	r2, r2, #4
 8005250:	60da      	str	r2, [r3, #12]
      break;
 8005252:	e01e      	b.n	8005292 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2201      	movs	r2, #1
 800525a:	2100      	movs	r1, #0
 800525c:	4618      	mov	r0, r3
 800525e:	f000 fbb9 	bl	80059d4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2201      	movs	r2, #1
 8005268:	2104      	movs	r1, #4
 800526a:	4618      	mov	r0, r3
 800526c:	f000 fbb2 	bl	80059d4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68da      	ldr	r2, [r3, #12]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0202 	orr.w	r2, r2, #2
 800527e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68da      	ldr	r2, [r3, #12]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 0204 	orr.w	r2, r2, #4
 800528e:	60da      	str	r2, [r3, #12]
      break;
 8005290:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f042 0201 	orr.w	r2, r2, #1
 80052a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d10f      	bne.n	80052dc <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2200      	movs	r2, #0
 80052c2:	2100      	movs	r1, #0
 80052c4:	4618      	mov	r0, r3
 80052c6:	f000 fb85 	bl	80059d4 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68da      	ldr	r2, [r3, #12]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 0202 	bic.w	r2, r2, #2
 80052d8:	60da      	str	r2, [r3, #12]
 80052da:	e030      	b.n	800533e <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	2b04      	cmp	r3, #4
 80052e0:	d10f      	bne.n	8005302 <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2200      	movs	r2, #0
 80052e8:	2104      	movs	r1, #4
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 fb72 	bl	80059d4 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68da      	ldr	r2, [r3, #12]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0204 	bic.w	r2, r2, #4
 80052fe:	60da      	str	r2, [r3, #12]
 8005300:	e01d      	b.n	800533e <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2200      	movs	r2, #0
 8005308:	2100      	movs	r1, #0
 800530a:	4618      	mov	r0, r3
 800530c:	f000 fb62 	bl	80059d4 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2200      	movs	r2, #0
 8005316:	2104      	movs	r1, #4
 8005318:	4618      	mov	r0, r3
 800531a:	f000 fb5b 	bl	80059d4 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68da      	ldr	r2, [r3, #12]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 0202 	bic.w	r2, r2, #2
 800532c:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68da      	ldr	r2, [r3, #12]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f022 0204 	bic.w	r2, r2, #4
 800533c:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6a1a      	ldr	r2, [r3, #32]
 8005344:	f241 1311 	movw	r3, #4369	; 0x1111
 8005348:	4013      	ands	r3, r2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10f      	bne.n	800536e <HAL_TIM_Encoder_Stop_IT+0xc2>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6a1a      	ldr	r2, [r3, #32]
 8005354:	f240 4344 	movw	r3, #1092	; 0x444
 8005358:	4013      	ands	r3, r2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d107      	bne.n	800536e <HAL_TIM_Encoder_Stop_IT+0xc2>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f022 0201 	bic.w	r2, r2, #1
 800536c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d002      	beq.n	800537a <HAL_TIM_Encoder_Stop_IT+0xce>
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	2b04      	cmp	r3, #4
 8005378:	d138      	bne.n	80053ec <HAL_TIM_Encoder_Stop_IT+0x140>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d104      	bne.n	800538a <HAL_TIM_Encoder_Stop_IT+0xde>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005388:	e013      	b.n	80053b2 <HAL_TIM_Encoder_Stop_IT+0x106>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b04      	cmp	r3, #4
 800538e:	d104      	bne.n	800539a <HAL_TIM_Encoder_Stop_IT+0xee>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005398:	e00b      	b.n	80053b2 <HAL_TIM_Encoder_Stop_IT+0x106>
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b08      	cmp	r3, #8
 800539e:	d104      	bne.n	80053aa <HAL_TIM_Encoder_Stop_IT+0xfe>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053a8:	e003      	b.n	80053b2 <HAL_TIM_Encoder_Stop_IT+0x106>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d104      	bne.n	80053c2 <HAL_TIM_Encoder_Stop_IT+0x116>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053c0:	e024      	b.n	800540c <HAL_TIM_Encoder_Stop_IT+0x160>
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2b04      	cmp	r3, #4
 80053c6:	d104      	bne.n	80053d2 <HAL_TIM_Encoder_Stop_IT+0x126>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053d0:	e01c      	b.n	800540c <HAL_TIM_Encoder_Stop_IT+0x160>
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2b08      	cmp	r3, #8
 80053d6:	d104      	bne.n	80053e2 <HAL_TIM_Encoder_Stop_IT+0x136>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053e0:	e014      	b.n	800540c <HAL_TIM_Encoder_Stop_IT+0x160>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053ea:	e00f      	b.n	800540c <HAL_TIM_Encoder_Stop_IT+0x160>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005416:	b580      	push	{r7, lr}
 8005418:	b082      	sub	sp, #8
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b02      	cmp	r3, #2
 800542a:	d122      	bne.n	8005472 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b02      	cmp	r3, #2
 8005438:	d11b      	bne.n	8005472 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f06f 0202 	mvn.w	r2, #2
 8005442:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	f003 0303 	and.w	r3, r3, #3
 8005454:	2b00      	cmp	r3, #0
 8005456:	d003      	beq.n	8005460 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f7fc fafb 	bl	8001a54 <HAL_TIM_IC_CaptureCallback>
 800545e:	e005      	b.n	800546c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f9a4 	bl	80057ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f9aa 	bl	80057c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	f003 0304 	and.w	r3, r3, #4
 800547c:	2b04      	cmp	r3, #4
 800547e:	d122      	bne.n	80054c6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	f003 0304 	and.w	r3, r3, #4
 800548a:	2b04      	cmp	r3, #4
 800548c:	d11b      	bne.n	80054c6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f06f 0204 	mvn.w	r2, #4
 8005496:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d003      	beq.n	80054b4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7fc fad1 	bl	8001a54 <HAL_TIM_IC_CaptureCallback>
 80054b2:	e005      	b.n	80054c0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 f97a 	bl	80057ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f980 	bl	80057c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	f003 0308 	and.w	r3, r3, #8
 80054d0:	2b08      	cmp	r3, #8
 80054d2:	d122      	bne.n	800551a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	2b08      	cmp	r3, #8
 80054e0:	d11b      	bne.n	800551a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f06f 0208 	mvn.w	r2, #8
 80054ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2204      	movs	r2, #4
 80054f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	69db      	ldr	r3, [r3, #28]
 80054f8:	f003 0303 	and.w	r3, r3, #3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d003      	beq.n	8005508 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f7fc faa7 	bl	8001a54 <HAL_TIM_IC_CaptureCallback>
 8005506:	e005      	b.n	8005514 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 f950 	bl	80057ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f956 	bl	80057c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	f003 0310 	and.w	r3, r3, #16
 8005524:	2b10      	cmp	r3, #16
 8005526:	d122      	bne.n	800556e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	f003 0310 	and.w	r3, r3, #16
 8005532:	2b10      	cmp	r3, #16
 8005534:	d11b      	bne.n	800556e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f06f 0210 	mvn.w	r2, #16
 800553e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2208      	movs	r2, #8
 8005544:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	69db      	ldr	r3, [r3, #28]
 800554c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005550:	2b00      	cmp	r3, #0
 8005552:	d003      	beq.n	800555c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f7fc fa7d 	bl	8001a54 <HAL_TIM_IC_CaptureCallback>
 800555a:	e005      	b.n	8005568 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f926 	bl	80057ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f92c 	bl	80057c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	f003 0301 	and.w	r3, r3, #1
 8005578:	2b01      	cmp	r3, #1
 800557a:	d10e      	bne.n	800559a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b01      	cmp	r3, #1
 8005588:	d107      	bne.n	800559a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f06f 0201 	mvn.w	r2, #1
 8005592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f7fc faaf 	bl	8001af8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055a4:	2b80      	cmp	r3, #128	; 0x80
 80055a6:	d10e      	bne.n	80055c6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b2:	2b80      	cmp	r3, #128	; 0x80
 80055b4:	d107      	bne.n	80055c6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 fa92 	bl	8005aea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d0:	2b40      	cmp	r3, #64	; 0x40
 80055d2:	d10e      	bne.n	80055f2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055de:	2b40      	cmp	r3, #64	; 0x40
 80055e0:	d107      	bne.n	80055f2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f8f0 	bl	80057d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	f003 0320 	and.w	r3, r3, #32
 80055fc:	2b20      	cmp	r3, #32
 80055fe:	d10e      	bne.n	800561e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f003 0320 	and.w	r3, r3, #32
 800560a:	2b20      	cmp	r3, #32
 800560c:	d107      	bne.n	800561e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f06f 0220 	mvn.w	r2, #32
 8005616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 fa5d 	bl	8005ad8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800561e:	bf00      	nop
 8005620:	3708      	adds	r7, #8
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b084      	sub	sp, #16
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
 800562e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005636:	2b01      	cmp	r3, #1
 8005638:	d101      	bne.n	800563e <HAL_TIM_ConfigClockSource+0x18>
 800563a:	2302      	movs	r3, #2
 800563c:	e0b3      	b.n	80057a6 <HAL_TIM_ConfigClockSource+0x180>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2202      	movs	r2, #2
 800564a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800565c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005664:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005676:	d03e      	beq.n	80056f6 <HAL_TIM_ConfigClockSource+0xd0>
 8005678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800567c:	f200 8087 	bhi.w	800578e <HAL_TIM_ConfigClockSource+0x168>
 8005680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005684:	f000 8085 	beq.w	8005792 <HAL_TIM_ConfigClockSource+0x16c>
 8005688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800568c:	d87f      	bhi.n	800578e <HAL_TIM_ConfigClockSource+0x168>
 800568e:	2b70      	cmp	r3, #112	; 0x70
 8005690:	d01a      	beq.n	80056c8 <HAL_TIM_ConfigClockSource+0xa2>
 8005692:	2b70      	cmp	r3, #112	; 0x70
 8005694:	d87b      	bhi.n	800578e <HAL_TIM_ConfigClockSource+0x168>
 8005696:	2b60      	cmp	r3, #96	; 0x60
 8005698:	d050      	beq.n	800573c <HAL_TIM_ConfigClockSource+0x116>
 800569a:	2b60      	cmp	r3, #96	; 0x60
 800569c:	d877      	bhi.n	800578e <HAL_TIM_ConfigClockSource+0x168>
 800569e:	2b50      	cmp	r3, #80	; 0x50
 80056a0:	d03c      	beq.n	800571c <HAL_TIM_ConfigClockSource+0xf6>
 80056a2:	2b50      	cmp	r3, #80	; 0x50
 80056a4:	d873      	bhi.n	800578e <HAL_TIM_ConfigClockSource+0x168>
 80056a6:	2b40      	cmp	r3, #64	; 0x40
 80056a8:	d058      	beq.n	800575c <HAL_TIM_ConfigClockSource+0x136>
 80056aa:	2b40      	cmp	r3, #64	; 0x40
 80056ac:	d86f      	bhi.n	800578e <HAL_TIM_ConfigClockSource+0x168>
 80056ae:	2b30      	cmp	r3, #48	; 0x30
 80056b0:	d064      	beq.n	800577c <HAL_TIM_ConfigClockSource+0x156>
 80056b2:	2b30      	cmp	r3, #48	; 0x30
 80056b4:	d86b      	bhi.n	800578e <HAL_TIM_ConfigClockSource+0x168>
 80056b6:	2b20      	cmp	r3, #32
 80056b8:	d060      	beq.n	800577c <HAL_TIM_ConfigClockSource+0x156>
 80056ba:	2b20      	cmp	r3, #32
 80056bc:	d867      	bhi.n	800578e <HAL_TIM_ConfigClockSource+0x168>
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d05c      	beq.n	800577c <HAL_TIM_ConfigClockSource+0x156>
 80056c2:	2b10      	cmp	r3, #16
 80056c4:	d05a      	beq.n	800577c <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80056c6:	e062      	b.n	800578e <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6818      	ldr	r0, [r3, #0]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	6899      	ldr	r1, [r3, #8]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	f000 f95d 	bl	8005996 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056ea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	609a      	str	r2, [r3, #8]
      break;
 80056f4:	e04e      	b.n	8005794 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6818      	ldr	r0, [r3, #0]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	6899      	ldr	r1, [r3, #8]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685a      	ldr	r2, [r3, #4]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f000 f946 	bl	8005996 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005718:	609a      	str	r2, [r3, #8]
      break;
 800571a:	e03b      	b.n	8005794 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6818      	ldr	r0, [r3, #0]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	6859      	ldr	r1, [r3, #4]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	461a      	mov	r2, r3
 800572a:	f000 f8bd 	bl	80058a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2150      	movs	r1, #80	; 0x50
 8005734:	4618      	mov	r0, r3
 8005736:	f000 f914 	bl	8005962 <TIM_ITRx_SetConfig>
      break;
 800573a:	e02b      	b.n	8005794 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6818      	ldr	r0, [r3, #0]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	6859      	ldr	r1, [r3, #4]
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	461a      	mov	r2, r3
 800574a:	f000 f8db 	bl	8005904 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2160      	movs	r1, #96	; 0x60
 8005754:	4618      	mov	r0, r3
 8005756:	f000 f904 	bl	8005962 <TIM_ITRx_SetConfig>
      break;
 800575a:	e01b      	b.n	8005794 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6818      	ldr	r0, [r3, #0]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	6859      	ldr	r1, [r3, #4]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	461a      	mov	r2, r3
 800576a:	f000 f89d 	bl	80058a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2140      	movs	r1, #64	; 0x40
 8005774:	4618      	mov	r0, r3
 8005776:	f000 f8f4 	bl	8005962 <TIM_ITRx_SetConfig>
      break;
 800577a:	e00b      	b.n	8005794 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4619      	mov	r1, r3
 8005786:	4610      	mov	r0, r2
 8005788:	f000 f8eb 	bl	8005962 <TIM_ITRx_SetConfig>
        break;
 800578c:	e002      	b.n	8005794 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800578e:	bf00      	nop
 8005790:	e000      	b.n	8005794 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005792:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b083      	sub	sp, #12
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057b6:	bf00      	nop
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bc80      	pop	{r7}
 80057be:	4770      	bx	lr

080057c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bc80      	pop	{r7}
 80057d0:	4770      	bx	lr

080057d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b083      	sub	sp, #12
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057da:	bf00      	nop
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	bc80      	pop	{r7}
 80057e2:	4770      	bx	lr

080057e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a29      	ldr	r2, [pc, #164]	; (800589c <TIM_Base_SetConfig+0xb8>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d00b      	beq.n	8005814 <TIM_Base_SetConfig+0x30>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005802:	d007      	beq.n	8005814 <TIM_Base_SetConfig+0x30>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a26      	ldr	r2, [pc, #152]	; (80058a0 <TIM_Base_SetConfig+0xbc>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d003      	beq.n	8005814 <TIM_Base_SetConfig+0x30>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a25      	ldr	r2, [pc, #148]	; (80058a4 <TIM_Base_SetConfig+0xc0>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d108      	bne.n	8005826 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	4313      	orrs	r3, r2
 8005824:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a1c      	ldr	r2, [pc, #112]	; (800589c <TIM_Base_SetConfig+0xb8>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d00b      	beq.n	8005846 <TIM_Base_SetConfig+0x62>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005834:	d007      	beq.n	8005846 <TIM_Base_SetConfig+0x62>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a19      	ldr	r2, [pc, #100]	; (80058a0 <TIM_Base_SetConfig+0xbc>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d003      	beq.n	8005846 <TIM_Base_SetConfig+0x62>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a18      	ldr	r2, [pc, #96]	; (80058a4 <TIM_Base_SetConfig+0xc0>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d108      	bne.n	8005858 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800584c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	4313      	orrs	r3, r2
 8005856:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	4313      	orrs	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	689a      	ldr	r2, [r3, #8]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a07      	ldr	r2, [pc, #28]	; (800589c <TIM_Base_SetConfig+0xb8>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d103      	bne.n	800588c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	691a      	ldr	r2, [r3, #16]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	615a      	str	r2, [r3, #20]
}
 8005892:	bf00      	nop
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	bc80      	pop	{r7}
 800589a:	4770      	bx	lr
 800589c:	40012c00 	.word	0x40012c00
 80058a0:	40000400 	.word	0x40000400
 80058a4:	40000800 	.word	0x40000800

080058a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b087      	sub	sp, #28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	f023 0201 	bic.w	r2, r3, #1
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	011b      	lsls	r3, r3, #4
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	4313      	orrs	r3, r2
 80058dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f023 030a 	bic.w	r3, r3, #10
 80058e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	621a      	str	r2, [r3, #32]
}
 80058fa:	bf00      	nop
 80058fc:	371c      	adds	r7, #28
 80058fe:	46bd      	mov	sp, r7
 8005900:	bc80      	pop	{r7}
 8005902:	4770      	bx	lr

08005904 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005904:	b480      	push	{r7}
 8005906:	b087      	sub	sp, #28
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6a1b      	ldr	r3, [r3, #32]
 8005914:	f023 0210 	bic.w	r2, r3, #16
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800592e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	031b      	lsls	r3, r3, #12
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	4313      	orrs	r3, r2
 8005938:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005940:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	011b      	lsls	r3, r3, #4
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	4313      	orrs	r3, r2
 800594a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	621a      	str	r2, [r3, #32]
}
 8005958:	bf00      	nop
 800595a:	371c      	adds	r7, #28
 800595c:	46bd      	mov	sp, r7
 800595e:	bc80      	pop	{r7}
 8005960:	4770      	bx	lr

08005962 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005962:	b480      	push	{r7}
 8005964:	b085      	sub	sp, #20
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
 800596a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005978:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4313      	orrs	r3, r2
 8005980:	f043 0307 	orr.w	r3, r3, #7
 8005984:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	609a      	str	r2, [r3, #8]
}
 800598c:	bf00      	nop
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	bc80      	pop	{r7}
 8005994:	4770      	bx	lr

08005996 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005996:	b480      	push	{r7}
 8005998:	b087      	sub	sp, #28
 800599a:	af00      	add	r7, sp, #0
 800599c:	60f8      	str	r0, [r7, #12]
 800599e:	60b9      	str	r1, [r7, #8]
 80059a0:	607a      	str	r2, [r7, #4]
 80059a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	021a      	lsls	r2, r3, #8
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	431a      	orrs	r2, r3
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	4313      	orrs	r3, r2
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	609a      	str	r2, [r3, #8]
}
 80059ca:	bf00      	nop
 80059cc:	371c      	adds	r7, #28
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bc80      	pop	{r7}
 80059d2:	4770      	bx	lr

080059d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b087      	sub	sp, #28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	f003 031f 	and.w	r3, r3, #31
 80059e6:	2201      	movs	r2, #1
 80059e8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6a1a      	ldr	r2, [r3, #32]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	43db      	mvns	r3, r3
 80059f6:	401a      	ands	r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6a1a      	ldr	r2, [r3, #32]
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	f003 031f 	and.w	r3, r3, #31
 8005a06:	6879      	ldr	r1, [r7, #4]
 8005a08:	fa01 f303 	lsl.w	r3, r1, r3
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	621a      	str	r2, [r3, #32]
}
 8005a12:	bf00      	nop
 8005a14:	371c      	adds	r7, #28
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bc80      	pop	{r7}
 8005a1a:	4770      	bx	lr

08005a1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d101      	bne.n	8005a34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a30:	2302      	movs	r3, #2
 8005a32:	e046      	b.n	8005ac2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2202      	movs	r2, #2
 8005a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a16      	ldr	r2, [pc, #88]	; (8005acc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d00e      	beq.n	8005a96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a80:	d009      	beq.n	8005a96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a12      	ldr	r2, [pc, #72]	; (8005ad0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d004      	beq.n	8005a96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a10      	ldr	r2, [pc, #64]	; (8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d10c      	bne.n	8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	68ba      	ldr	r2, [r7, #8]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bc80      	pop	{r7}
 8005aca:	4770      	bx	lr
 8005acc:	40012c00 	.word	0x40012c00
 8005ad0:	40000400 	.word	0x40000400
 8005ad4:	40000800 	.word	0x40000800

08005ad8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bc80      	pop	{r7}
 8005ae8:	4770      	bx	lr

08005aea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b083      	sub	sp, #12
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005af2:	bf00      	nop
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bc80      	pop	{r7}
 8005afa:	4770      	bx	lr

08005afc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e03f      	b.n	8005b8e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d106      	bne.n	8005b28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f7fc f8fa 	bl	8001d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2224      	movs	r2, #36	; 0x24
 8005b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68da      	ldr	r2, [r3, #12]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 fba9 	bl	8006298 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	691a      	ldr	r2, [r3, #16]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	695a      	ldr	r2, [r3, #20]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68da      	ldr	r2, [r3, #12]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2220      	movs	r2, #32
 8005b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3708      	adds	r7, #8
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b084      	sub	sp, #16
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	60f8      	str	r0, [r7, #12]
 8005b9e:	60b9      	str	r1, [r7, #8]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b20      	cmp	r3, #32
 8005bae:	d11d      	bne.n	8005bec <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d002      	beq.n	8005bbc <HAL_UART_Receive_IT+0x26>
 8005bb6:	88fb      	ldrh	r3, [r7, #6]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d101      	bne.n	8005bc0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e016      	b.n	8005bee <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d101      	bne.n	8005bce <HAL_UART_Receive_IT+0x38>
 8005bca:	2302      	movs	r3, #2
 8005bcc:	e00f      	b.n	8005bee <HAL_UART_Receive_IT+0x58>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005bdc:	88fb      	ldrh	r3, [r7, #6]
 8005bde:	461a      	mov	r2, r3
 8005be0:	68b9      	ldr	r1, [r7, #8]
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f000 f9cf 	bl	8005f86 <UART_Start_Receive_IT>
 8005be8:	4603      	mov	r3, r0
 8005bea:	e000      	b.n	8005bee <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005bec:	2302      	movs	r3, #2
  }
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
	...

08005bf8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b08a      	sub	sp, #40	; 0x28
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	f003 030f 	and.w	r3, r3, #15
 8005c26:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10d      	bne.n	8005c4a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	f003 0320 	and.w	r3, r3, #32
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d008      	beq.n	8005c4a <HAL_UART_IRQHandler+0x52>
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	f003 0320 	and.w	r3, r3, #32
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fa7f 	bl	8006146 <UART_Receive_IT>
      return;
 8005c48:	e17b      	b.n	8005f42 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 80b1 	beq.w	8005db4 <HAL_UART_IRQHandler+0x1bc>
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	f003 0301 	and.w	r3, r3, #1
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d105      	bne.n	8005c68 <HAL_UART_IRQHandler+0x70>
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
 8005c5e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f000 80a6 	beq.w	8005db4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00a      	beq.n	8005c88 <HAL_UART_IRQHandler+0x90>
 8005c72:	6a3b      	ldr	r3, [r7, #32]
 8005c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d005      	beq.n	8005c88 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c80:	f043 0201 	orr.w	r2, r3, #1
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8a:	f003 0304 	and.w	r3, r3, #4
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00a      	beq.n	8005ca8 <HAL_UART_IRQHandler+0xb0>
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	f003 0301 	and.w	r3, r3, #1
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d005      	beq.n	8005ca8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca0:	f043 0202 	orr.w	r2, r3, #2
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005caa:	f003 0302 	and.w	r3, r3, #2
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00a      	beq.n	8005cc8 <HAL_UART_IRQHandler+0xd0>
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d005      	beq.n	8005cc8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc0:	f043 0204 	orr.w	r2, r3, #4
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cca:	f003 0308 	and.w	r3, r3, #8
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00f      	beq.n	8005cf2 <HAL_UART_IRQHandler+0xfa>
 8005cd2:	6a3b      	ldr	r3, [r7, #32]
 8005cd4:	f003 0320 	and.w	r3, r3, #32
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d104      	bne.n	8005ce6 <HAL_UART_IRQHandler+0xee>
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d005      	beq.n	8005cf2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cea:	f043 0208 	orr.w	r2, r3, #8
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f000 811e 	beq.w	8005f38 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	f003 0320 	and.w	r3, r3, #32
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d007      	beq.n	8005d16 <HAL_UART_IRQHandler+0x11e>
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	f003 0320 	and.w	r3, r3, #32
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d002      	beq.n	8005d16 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fa18 	bl	8006146 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	bf14      	ite	ne
 8005d24:	2301      	movne	r3, #1
 8005d26:	2300      	moveq	r3, #0
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d30:	f003 0308 	and.w	r3, r3, #8
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d102      	bne.n	8005d3e <HAL_UART_IRQHandler+0x146>
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d031      	beq.n	8005da2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f95a 	bl	8005ff8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d023      	beq.n	8005d9a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	695a      	ldr	r2, [r3, #20]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d60:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d013      	beq.n	8005d92 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6e:	4a76      	ldr	r2, [pc, #472]	; (8005f48 <HAL_UART_IRQHandler+0x350>)
 8005d70:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fc fa74 	bl	8002264 <HAL_DMA_Abort_IT>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d016      	beq.n	8005db0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d8c:	4610      	mov	r0, r2
 8005d8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d90:	e00e      	b.n	8005db0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f8e3 	bl	8005f5e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d98:	e00a      	b.n	8005db0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f8df 	bl	8005f5e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da0:	e006      	b.n	8005db0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f8db 	bl	8005f5e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005dae:	e0c3      	b.n	8005f38 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005db0:	bf00      	nop
    return;
 8005db2:	e0c1      	b.n	8005f38 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	f040 80a1 	bne.w	8005f00 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	f003 0310 	and.w	r3, r3, #16
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 809b 	beq.w	8005f00 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005dca:	6a3b      	ldr	r3, [r7, #32]
 8005dcc:	f003 0310 	and.w	r3, r3, #16
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 8095 	beq.w	8005f00 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	60fb      	str	r3, [r7, #12]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	60fb      	str	r3, [r7, #12]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	60fb      	str	r3, [r7, #12]
 8005dea:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d04e      	beq.n	8005e98 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005e04:	8a3b      	ldrh	r3, [r7, #16]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f000 8098 	beq.w	8005f3c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e10:	8a3a      	ldrh	r2, [r7, #16]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	f080 8092 	bcs.w	8005f3c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	8a3a      	ldrh	r2, [r7, #16]
 8005e1c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	2b20      	cmp	r3, #32
 8005e26:	d02b      	beq.n	8005e80 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68da      	ldr	r2, [r3, #12]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e36:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	695a      	ldr	r2, [r3, #20]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f022 0201 	bic.w	r2, r2, #1
 8005e46:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	695a      	ldr	r2, [r3, #20]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e56:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2220      	movs	r2, #32
 8005e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68da      	ldr	r2, [r3, #12]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f022 0210 	bic.w	r2, r2, #16
 8005e74:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7fc f9b7 	bl	80021ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	4619      	mov	r1, r3
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 f86d 	bl	8005f70 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005e96:	e051      	b.n	8005f3c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d047      	beq.n	8005f40 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005eb0:	8a7b      	ldrh	r3, [r7, #18]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d044      	beq.n	8005f40 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68da      	ldr	r2, [r3, #12]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ec4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	695a      	ldr	r2, [r3, #20]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 0201 	bic.w	r2, r2, #1
 8005ed4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 0210 	bic.w	r2, r2, #16
 8005ef2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ef4:	8a7b      	ldrh	r3, [r7, #18]
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 f839 	bl	8005f70 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005efe:	e01f      	b.n	8005f40 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d008      	beq.n	8005f1c <HAL_UART_IRQHandler+0x324>
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d003      	beq.n	8005f1c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 f8af 	bl	8006078 <UART_Transmit_IT>
    return;
 8005f1a:	e012      	b.n	8005f42 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00d      	beq.n	8005f42 <HAL_UART_IRQHandler+0x34a>
 8005f26:	6a3b      	ldr	r3, [r7, #32]
 8005f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d008      	beq.n	8005f42 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 f8f0 	bl	8006116 <UART_EndTransmit_IT>
    return;
 8005f36:	e004      	b.n	8005f42 <HAL_UART_IRQHandler+0x34a>
    return;
 8005f38:	bf00      	nop
 8005f3a:	e002      	b.n	8005f42 <HAL_UART_IRQHandler+0x34a>
      return;
 8005f3c:	bf00      	nop
 8005f3e:	e000      	b.n	8005f42 <HAL_UART_IRQHandler+0x34a>
      return;
 8005f40:	bf00      	nop
  }
}
 8005f42:	3728      	adds	r7, #40	; 0x28
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	08006051 	.word	0x08006051

08005f4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bc80      	pop	{r7}
 8005f5c:	4770      	bx	lr

08005f5e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b083      	sub	sp, #12
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f66:	bf00      	nop
 8005f68:	370c      	adds	r7, #12
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bc80      	pop	{r7}
 8005f6e:	4770      	bx	lr

08005f70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	460b      	mov	r3, r1
 8005f7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bc80      	pop	{r7}
 8005f84:	4770      	bx	lr

08005f86 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b085      	sub	sp, #20
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	60f8      	str	r0, [r7, #12]
 8005f8e:	60b9      	str	r1, [r7, #8]
 8005f90:	4613      	mov	r3, r2
 8005f92:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	88fa      	ldrh	r2, [r7, #6]
 8005f9e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	88fa      	ldrh	r2, [r7, #6]
 8005fa4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2222      	movs	r2, #34	; 0x22
 8005fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68da      	ldr	r2, [r3, #12]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fca:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	695a      	ldr	r2, [r3, #20]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f042 0201 	orr.w	r2, r2, #1
 8005fda:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68da      	ldr	r2, [r3, #12]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f042 0220 	orr.w	r2, r2, #32
 8005fea:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bc80      	pop	{r7}
 8005ff6:	4770      	bx	lr

08005ff8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68da      	ldr	r2, [r3, #12]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800600e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	695a      	ldr	r2, [r3, #20]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f022 0201 	bic.w	r2, r2, #1
 800601e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006024:	2b01      	cmp	r3, #1
 8006026:	d107      	bne.n	8006038 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68da      	ldr	r2, [r3, #12]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f022 0210 	bic.w	r2, r2, #16
 8006036:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2220      	movs	r2, #32
 800603c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006046:	bf00      	nop
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	bc80      	pop	{r7}
 800604e:	4770      	bx	lr

08006050 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f7ff ff77 	bl	8005f5e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006070:	bf00      	nop
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006086:	b2db      	uxtb	r3, r3
 8006088:	2b21      	cmp	r3, #33	; 0x21
 800608a:	d13e      	bne.n	800610a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006094:	d114      	bne.n	80060c0 <UART_Transmit_IT+0x48>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d110      	bne.n	80060c0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	881b      	ldrh	r3, [r3, #0]
 80060a8:	461a      	mov	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	1c9a      	adds	r2, r3, #2
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	621a      	str	r2, [r3, #32]
 80060be:	e008      	b.n	80060d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a1b      	ldr	r3, [r3, #32]
 80060c4:	1c59      	adds	r1, r3, #1
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	6211      	str	r1, [r2, #32]
 80060ca:	781a      	ldrb	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	3b01      	subs	r3, #1
 80060da:	b29b      	uxth	r3, r3
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	4619      	mov	r1, r3
 80060e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10f      	bne.n	8006106 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68da      	ldr	r2, [r3, #12]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68da      	ldr	r2, [r3, #12]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006104:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	e000      	b.n	800610c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800610a:	2302      	movs	r3, #2
  }
}
 800610c:	4618      	mov	r0, r3
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	bc80      	pop	{r7}
 8006114:	4770      	bx	lr

08006116 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006116:	b580      	push	{r7, lr}
 8006118:	b082      	sub	sp, #8
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68da      	ldr	r2, [r3, #12]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800612c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2220      	movs	r2, #32
 8006132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f7ff ff08 	bl	8005f4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3708      	adds	r7, #8
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b086      	sub	sp, #24
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b22      	cmp	r3, #34	; 0x22
 8006158:	f040 8099 	bne.w	800628e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006164:	d117      	bne.n	8006196 <UART_Receive_IT+0x50>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d113      	bne.n	8006196 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800616e:	2300      	movs	r3, #0
 8006170:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006176:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	b29b      	uxth	r3, r3
 8006180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006184:	b29a      	uxth	r2, r3
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618e:	1c9a      	adds	r2, r3, #2
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	629a      	str	r2, [r3, #40]	; 0x28
 8006194:	e026      	b.n	80061e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800619c:	2300      	movs	r3, #0
 800619e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061a8:	d007      	beq.n	80061ba <UART_Receive_IT+0x74>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10a      	bne.n	80061c8 <UART_Receive_IT+0x82>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d106      	bne.n	80061c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	b2da      	uxtb	r2, r3
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	701a      	strb	r2, [r3, #0]
 80061c6:	e008      	b.n	80061da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061d4:	b2da      	uxtb	r2, r3
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061de:	1c5a      	adds	r2, r3, #1
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	3b01      	subs	r3, #1
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	4619      	mov	r1, r3
 80061f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d148      	bne.n	800628a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68da      	ldr	r2, [r3, #12]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f022 0220 	bic.w	r2, r2, #32
 8006206:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68da      	ldr	r2, [r3, #12]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006216:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	695a      	ldr	r2, [r3, #20]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 0201 	bic.w	r2, r2, #1
 8006226:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2220      	movs	r2, #32
 800622c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006234:	2b01      	cmp	r3, #1
 8006236:	d123      	bne.n	8006280 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68da      	ldr	r2, [r3, #12]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f022 0210 	bic.w	r2, r2, #16
 800624c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0310 	and.w	r3, r3, #16
 8006258:	2b10      	cmp	r3, #16
 800625a:	d10a      	bne.n	8006272 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800625c:	2300      	movs	r3, #0
 800625e:	60fb      	str	r3, [r7, #12]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	60fb      	str	r3, [r7, #12]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	60fb      	str	r3, [r7, #12]
 8006270:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006276:	4619      	mov	r1, r3
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f7ff fe79 	bl	8005f70 <HAL_UARTEx_RxEventCallback>
 800627e:	e002      	b.n	8006286 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f7fb fc1d 	bl	8001ac0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006286:	2300      	movs	r3, #0
 8006288:	e002      	b.n	8006290 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800628a:	2300      	movs	r3, #0
 800628c:	e000      	b.n	8006290 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800628e:	2302      	movs	r3, #2
  }
}
 8006290:	4618      	mov	r0, r3
 8006292:	3718      	adds	r7, #24
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68da      	ldr	r2, [r3, #12]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	689a      	ldr	r2, [r3, #8]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	431a      	orrs	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80062d2:	f023 030c 	bic.w	r3, r3, #12
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	6812      	ldr	r2, [r2, #0]
 80062da:	68b9      	ldr	r1, [r7, #8]
 80062dc:	430b      	orrs	r3, r1
 80062de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	699a      	ldr	r2, [r3, #24]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a2c      	ldr	r2, [pc, #176]	; (80063ac <UART_SetConfig+0x114>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d103      	bne.n	8006308 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006300:	f7fe fccc 	bl	8004c9c <HAL_RCC_GetPCLK2Freq>
 8006304:	60f8      	str	r0, [r7, #12]
 8006306:	e002      	b.n	800630e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006308:	f7fe fcb4 	bl	8004c74 <HAL_RCC_GetPCLK1Freq>
 800630c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	4613      	mov	r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4413      	add	r3, r2
 8006316:	009a      	lsls	r2, r3, #2
 8006318:	441a      	add	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	fbb2 f3f3 	udiv	r3, r2, r3
 8006324:	4a22      	ldr	r2, [pc, #136]	; (80063b0 <UART_SetConfig+0x118>)
 8006326:	fba2 2303 	umull	r2, r3, r2, r3
 800632a:	095b      	lsrs	r3, r3, #5
 800632c:	0119      	lsls	r1, r3, #4
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	4613      	mov	r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	4413      	add	r3, r2
 8006336:	009a      	lsls	r2, r3, #2
 8006338:	441a      	add	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	fbb2 f2f3 	udiv	r2, r2, r3
 8006344:	4b1a      	ldr	r3, [pc, #104]	; (80063b0 <UART_SetConfig+0x118>)
 8006346:	fba3 0302 	umull	r0, r3, r3, r2
 800634a:	095b      	lsrs	r3, r3, #5
 800634c:	2064      	movs	r0, #100	; 0x64
 800634e:	fb00 f303 	mul.w	r3, r0, r3
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	011b      	lsls	r3, r3, #4
 8006356:	3332      	adds	r3, #50	; 0x32
 8006358:	4a15      	ldr	r2, [pc, #84]	; (80063b0 <UART_SetConfig+0x118>)
 800635a:	fba2 2303 	umull	r2, r3, r2, r3
 800635e:	095b      	lsrs	r3, r3, #5
 8006360:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006364:	4419      	add	r1, r3
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	4613      	mov	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	4413      	add	r3, r2
 800636e:	009a      	lsls	r2, r3, #2
 8006370:	441a      	add	r2, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	fbb2 f2f3 	udiv	r2, r2, r3
 800637c:	4b0c      	ldr	r3, [pc, #48]	; (80063b0 <UART_SetConfig+0x118>)
 800637e:	fba3 0302 	umull	r0, r3, r3, r2
 8006382:	095b      	lsrs	r3, r3, #5
 8006384:	2064      	movs	r0, #100	; 0x64
 8006386:	fb00 f303 	mul.w	r3, r0, r3
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	011b      	lsls	r3, r3, #4
 800638e:	3332      	adds	r3, #50	; 0x32
 8006390:	4a07      	ldr	r2, [pc, #28]	; (80063b0 <UART_SetConfig+0x118>)
 8006392:	fba2 2303 	umull	r2, r3, r2, r3
 8006396:	095b      	lsrs	r3, r3, #5
 8006398:	f003 020f 	and.w	r2, r3, #15
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	440a      	add	r2, r1
 80063a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80063a4:	bf00      	nop
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	40013800 	.word	0x40013800
 80063b0:	51eb851f 	.word	0x51eb851f

080063b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80063b4:	b084      	sub	sp, #16
 80063b6:	b480      	push	{r7}
 80063b8:	b083      	sub	sp, #12
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
 80063be:	f107 0014 	add.w	r0, r7, #20
 80063c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bc80      	pop	{r7}
 80063d0:	b004      	add	sp, #16
 80063d2:	4770      	bx	lr

080063d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80063e4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80063e8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3714      	adds	r7, #20
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bc80      	pop	{r7}
 80063fe:	4770      	bx	lr

08006400 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006408:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800640c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006414:	b29a      	uxth	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	b29b      	uxth	r3, r3
 800641a:	43db      	mvns	r3, r3
 800641c:	b29b      	uxth	r3, r3
 800641e:	4013      	ands	r3, r2
 8006420:	b29a      	uxth	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	bc80      	pop	{r7}
 8006432:	4770      	bx	lr

08006434 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	460b      	mov	r3, r1
 800643e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	370c      	adds	r7, #12
 8006446:	46bd      	mov	sp, r7
 8006448:	bc80      	pop	{r7}
 800644a:	4770      	bx	lr

0800644c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800644c:	b084      	sub	sp, #16
 800644e:	b480      	push	{r7}
 8006450:	b083      	sub	sp, #12
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
 8006456:	f107 0014 	add.w	r0, r7, #20
 800645a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	bc80      	pop	{r7}
 8006488:	b004      	add	sp, #16
 800648a:	4770      	bx	lr

0800648c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800648c:	b480      	push	{r7}
 800648e:	b09b      	sub	sp, #108	; 0x6c
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006496:	2300      	movs	r3, #0
 8006498:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	4413      	add	r3, r2
 80064a6:	881b      	ldrh	r3, [r3, #0]
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80064ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	78db      	ldrb	r3, [r3, #3]
 80064ba:	2b03      	cmp	r3, #3
 80064bc:	d81f      	bhi.n	80064fe <USB_ActivateEndpoint+0x72>
 80064be:	a201      	add	r2, pc, #4	; (adr r2, 80064c4 <USB_ActivateEndpoint+0x38>)
 80064c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c4:	080064d5 	.word	0x080064d5
 80064c8:	080064f1 	.word	0x080064f1
 80064cc:	08006507 	.word	0x08006507
 80064d0:	080064e3 	.word	0x080064e3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80064d4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80064d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80064dc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80064e0:	e012      	b.n	8006508 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80064e2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80064e6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80064ea:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80064ee:	e00b      	b.n	8006508 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80064f0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80064f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80064f8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80064fc:	e004      	b.n	8006508 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006504:	e000      	b.n	8006508 <USB_ActivateEndpoint+0x7c>
      break;
 8006506:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	441a      	add	r2, r3
 8006512:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006516:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800651a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800651e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006526:	b29b      	uxth	r3, r3
 8006528:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4413      	add	r3, r2
 8006534:	881b      	ldrh	r3, [r3, #0]
 8006536:	b29b      	uxth	r3, r3
 8006538:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800653c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006540:	b29a      	uxth	r2, r3
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	b29b      	uxth	r3, r3
 8006548:	4313      	orrs	r3, r2
 800654a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	441a      	add	r2, r3
 8006558:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800655c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006560:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006564:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800656c:	b29b      	uxth	r3, r3
 800656e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	7b1b      	ldrb	r3, [r3, #12]
 8006574:	2b00      	cmp	r3, #0
 8006576:	f040 8149 	bne.w	800680c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	785b      	ldrb	r3, [r3, #1]
 800657e:	2b00      	cmp	r3, #0
 8006580:	f000 8084 	beq.w	800668c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	617b      	str	r3, [r7, #20]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800658e:	b29b      	uxth	r3, r3
 8006590:	461a      	mov	r2, r3
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	4413      	add	r3, r2
 8006596:	617b      	str	r3, [r7, #20]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	011a      	lsls	r2, r3, #4
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065a6:	613b      	str	r3, [r7, #16]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	88db      	ldrh	r3, [r3, #6]
 80065ac:	085b      	lsrs	r3, r3, #1
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	005b      	lsls	r3, r3, #1
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4413      	add	r3, r2
 80065c2:	881b      	ldrh	r3, [r3, #0]
 80065c4:	81fb      	strh	r3, [r7, #14]
 80065c6:	89fb      	ldrh	r3, [r7, #14]
 80065c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d01b      	beq.n	8006608 <USB_ActivateEndpoint+0x17c>
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	4413      	add	r3, r2
 80065da:	881b      	ldrh	r3, [r3, #0]
 80065dc:	b29b      	uxth	r3, r3
 80065de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e6:	81bb      	strh	r3, [r7, #12]
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	441a      	add	r2, r3
 80065f2:	89bb      	ldrh	r3, [r7, #12]
 80065f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006600:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006604:	b29b      	uxth	r3, r3
 8006606:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	78db      	ldrb	r3, [r3, #3]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d020      	beq.n	8006652 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	881b      	ldrh	r3, [r3, #0]
 800661c:	b29b      	uxth	r3, r3
 800661e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006626:	813b      	strh	r3, [r7, #8]
 8006628:	893b      	ldrh	r3, [r7, #8]
 800662a:	f083 0320 	eor.w	r3, r3, #32
 800662e:	813b      	strh	r3, [r7, #8]
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	441a      	add	r2, r3
 800663a:	893b      	ldrh	r3, [r7, #8]
 800663c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006640:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006644:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800664c:	b29b      	uxth	r3, r3
 800664e:	8013      	strh	r3, [r2, #0]
 8006650:	e27f      	b.n	8006b52 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	881b      	ldrh	r3, [r3, #0]
 800665e:	b29b      	uxth	r3, r3
 8006660:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006668:	817b      	strh	r3, [r7, #10]
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	441a      	add	r2, r3
 8006674:	897b      	ldrh	r3, [r7, #10]
 8006676:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800667a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800667e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006686:	b29b      	uxth	r3, r3
 8006688:	8013      	strh	r3, [r2, #0]
 800668a:	e262      	b.n	8006b52 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006696:	b29b      	uxth	r3, r3
 8006698:	461a      	mov	r2, r3
 800669a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669c:	4413      	add	r3, r2
 800669e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	011a      	lsls	r2, r3, #4
 80066a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a8:	4413      	add	r3, r2
 80066aa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80066ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	88db      	ldrh	r3, [r3, #6]
 80066b4:	085b      	lsrs	r3, r3, #1
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	005b      	lsls	r3, r3, #1
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066be:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	627b      	str	r3, [r7, #36]	; 0x24
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	461a      	mov	r2, r3
 80066ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d0:	4413      	add	r3, r2
 80066d2:	627b      	str	r3, [r7, #36]	; 0x24
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	011a      	lsls	r2, r3, #4
 80066da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066dc:	4413      	add	r3, r2
 80066de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066e2:	623b      	str	r3, [r7, #32]
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d112      	bne.n	8006712 <USB_ActivateEndpoint+0x286>
 80066ec:	6a3b      	ldr	r3, [r7, #32]
 80066ee:	881b      	ldrh	r3, [r3, #0]
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	6a3b      	ldr	r3, [r7, #32]
 80066fa:	801a      	strh	r2, [r3, #0]
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	881b      	ldrh	r3, [r3, #0]
 8006700:	b29b      	uxth	r3, r3
 8006702:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006706:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800670a:	b29a      	uxth	r2, r3
 800670c:	6a3b      	ldr	r3, [r7, #32]
 800670e:	801a      	strh	r2, [r3, #0]
 8006710:	e02f      	b.n	8006772 <USB_ActivateEndpoint+0x2e6>
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	2b3e      	cmp	r3, #62	; 0x3e
 8006718:	d813      	bhi.n	8006742 <USB_ActivateEndpoint+0x2b6>
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	085b      	lsrs	r3, r3, #1
 8006720:	663b      	str	r3, [r7, #96]	; 0x60
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d002      	beq.n	8006734 <USB_ActivateEndpoint+0x2a8>
 800672e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006730:	3301      	adds	r3, #1
 8006732:	663b      	str	r3, [r7, #96]	; 0x60
 8006734:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006736:	b29b      	uxth	r3, r3
 8006738:	029b      	lsls	r3, r3, #10
 800673a:	b29a      	uxth	r2, r3
 800673c:	6a3b      	ldr	r3, [r7, #32]
 800673e:	801a      	strh	r2, [r3, #0]
 8006740:	e017      	b.n	8006772 <USB_ActivateEndpoint+0x2e6>
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	095b      	lsrs	r3, r3, #5
 8006748:	663b      	str	r3, [r7, #96]	; 0x60
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	f003 031f 	and.w	r3, r3, #31
 8006752:	2b00      	cmp	r3, #0
 8006754:	d102      	bne.n	800675c <USB_ActivateEndpoint+0x2d0>
 8006756:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006758:	3b01      	subs	r3, #1
 800675a:	663b      	str	r3, [r7, #96]	; 0x60
 800675c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800675e:	b29b      	uxth	r3, r3
 8006760:	029b      	lsls	r3, r3, #10
 8006762:	b29b      	uxth	r3, r3
 8006764:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006768:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800676c:	b29a      	uxth	r2, r3
 800676e:	6a3b      	ldr	r3, [r7, #32]
 8006770:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4413      	add	r3, r2
 800677c:	881b      	ldrh	r3, [r3, #0]
 800677e:	83fb      	strh	r3, [r7, #30]
 8006780:	8bfb      	ldrh	r3, [r7, #30]
 8006782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d01b      	beq.n	80067c2 <USB_ActivateEndpoint+0x336>
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	4413      	add	r3, r2
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	b29b      	uxth	r3, r3
 8006798:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800679c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a0:	83bb      	strh	r3, [r7, #28]
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	441a      	add	r2, r3
 80067ac:	8bbb      	ldrh	r3, [r7, #28]
 80067ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067be:	b29b      	uxth	r3, r3
 80067c0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	4413      	add	r3, r2
 80067cc:	881b      	ldrh	r3, [r3, #0]
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d8:	837b      	strh	r3, [r7, #26]
 80067da:	8b7b      	ldrh	r3, [r7, #26]
 80067dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067e0:	837b      	strh	r3, [r7, #26]
 80067e2:	8b7b      	ldrh	r3, [r7, #26]
 80067e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80067e8:	837b      	strh	r3, [r7, #26]
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	441a      	add	r2, r3
 80067f4:	8b7b      	ldrh	r3, [r7, #26]
 80067f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006806:	b29b      	uxth	r3, r3
 8006808:	8013      	strh	r3, [r2, #0]
 800680a:	e1a2      	b.n	8006b52 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4413      	add	r3, r2
 8006816:	881b      	ldrh	r3, [r3, #0]
 8006818:	b29b      	uxth	r3, r3
 800681a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800681e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006822:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	441a      	add	r2, r3
 8006830:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006834:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006838:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800683c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006844:	b29b      	uxth	r3, r3
 8006846:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	65bb      	str	r3, [r7, #88]	; 0x58
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006852:	b29b      	uxth	r3, r3
 8006854:	461a      	mov	r2, r3
 8006856:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006858:	4413      	add	r3, r2
 800685a:	65bb      	str	r3, [r7, #88]	; 0x58
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	011a      	lsls	r2, r3, #4
 8006862:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006864:	4413      	add	r3, r2
 8006866:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800686a:	657b      	str	r3, [r7, #84]	; 0x54
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	891b      	ldrh	r3, [r3, #8]
 8006870:	085b      	lsrs	r3, r3, #1
 8006872:	b29b      	uxth	r3, r3
 8006874:	005b      	lsls	r3, r3, #1
 8006876:	b29a      	uxth	r2, r3
 8006878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800687a:	801a      	strh	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	653b      	str	r3, [r7, #80]	; 0x50
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006886:	b29b      	uxth	r3, r3
 8006888:	461a      	mov	r2, r3
 800688a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800688c:	4413      	add	r3, r2
 800688e:	653b      	str	r3, [r7, #80]	; 0x50
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	011a      	lsls	r2, r3, #4
 8006896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006898:	4413      	add	r3, r2
 800689a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800689e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	895b      	ldrh	r3, [r3, #10]
 80068a4:	085b      	lsrs	r3, r3, #1
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	005b      	lsls	r3, r3, #1
 80068aa:	b29a      	uxth	r2, r3
 80068ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ae:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	785b      	ldrb	r3, [r3, #1]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f040 8091 	bne.w	80069dc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	881b      	ldrh	r3, [r3, #0]
 80068c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80068c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80068ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d01b      	beq.n	800690a <USB_ActivateEndpoint+0x47e>
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4413      	add	r3, r2
 80068dc:	881b      	ldrh	r3, [r3, #0]
 80068de:	b29b      	uxth	r3, r3
 80068e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	441a      	add	r2, r3
 80068f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80068f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006906:	b29b      	uxth	r3, r3
 8006908:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	4413      	add	r3, r2
 8006914:	881b      	ldrh	r3, [r3, #0]
 8006916:	873b      	strh	r3, [r7, #56]	; 0x38
 8006918:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800691a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800691e:	2b00      	cmp	r3, #0
 8006920:	d01b      	beq.n	800695a <USB_ActivateEndpoint+0x4ce>
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	4413      	add	r3, r2
 800692c:	881b      	ldrh	r3, [r3, #0]
 800692e:	b29b      	uxth	r3, r3
 8006930:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006938:	86fb      	strh	r3, [r7, #54]	; 0x36
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	441a      	add	r2, r3
 8006944:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006946:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800694a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800694e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006952:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006956:	b29b      	uxth	r3, r3
 8006958:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	4413      	add	r3, r2
 8006964:	881b      	ldrh	r3, [r3, #0]
 8006966:	b29b      	uxth	r3, r3
 8006968:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800696c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006970:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006972:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006974:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006978:	86bb      	strh	r3, [r7, #52]	; 0x34
 800697a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800697c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006980:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	441a      	add	r2, r3
 800698c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800698e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006992:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800699a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800699e:	b29b      	uxth	r3, r3
 80069a0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	4413      	add	r3, r2
 80069ac:	881b      	ldrh	r3, [r3, #0]
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069b8:	867b      	strh	r3, [r7, #50]	; 0x32
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	441a      	add	r2, r3
 80069c4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80069c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	8013      	strh	r3, [r2, #0]
 80069da:	e0ba      	b.n	8006b52 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4413      	add	r3, r2
 80069e6:	881b      	ldrh	r3, [r3, #0]
 80069e8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80069ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80069f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d01d      	beq.n	8006a34 <USB_ActivateEndpoint+0x5a8>
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	4413      	add	r3, r2
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a0e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	441a      	add	r2, r3
 8006a1c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006a20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	781b      	ldrb	r3, [r3, #0]
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4413      	add	r3, r2
 8006a3e:	881b      	ldrh	r3, [r3, #0]
 8006a40:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006a44:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d01d      	beq.n	8006a8c <USB_ActivateEndpoint+0x600>
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	4413      	add	r3, r2
 8006a5a:	881b      	ldrh	r3, [r3, #0]
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a66:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	441a      	add	r2, r3
 8006a74:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006a78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	78db      	ldrb	r3, [r3, #3]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d024      	beq.n	8006ade <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4413      	add	r3, r2
 8006a9e:	881b      	ldrh	r3, [r3, #0]
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aaa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006aae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006ab2:	f083 0320 	eor.w	r3, r3, #32
 8006ab6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	441a      	add	r2, r3
 8006ac4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006ac8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006acc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ad0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	8013      	strh	r3, [r2, #0]
 8006adc:	e01d      	b.n	8006b1a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	4413      	add	r3, r2
 8006ae8:	881b      	ldrh	r3, [r3, #0]
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006af0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006af4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	441a      	add	r2, r3
 8006b02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006b06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	881b      	ldrh	r3, [r3, #0]
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b30:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	441a      	add	r2, r3
 8006b3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006b3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006b52:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	376c      	adds	r7, #108	; 0x6c
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bc80      	pop	{r7}
 8006b5e:	4770      	bx	lr

08006b60 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b08d      	sub	sp, #52	; 0x34
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	7b1b      	ldrb	r3, [r3, #12]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f040 808e 	bne.w	8006c90 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	785b      	ldrb	r3, [r3, #1]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d044      	beq.n	8006c06 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	4413      	add	r3, r2
 8006b86:	881b      	ldrh	r3, [r3, #0]
 8006b88:	81bb      	strh	r3, [r7, #12]
 8006b8a:	89bb      	ldrh	r3, [r7, #12]
 8006b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d01b      	beq.n	8006bcc <USB_DeactivateEndpoint+0x6c>
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	881b      	ldrh	r3, [r3, #0]
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006baa:	817b      	strh	r3, [r7, #10]
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	441a      	add	r2, r3
 8006bb6:	897b      	ldrh	r3, [r7, #10]
 8006bb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4413      	add	r3, r2
 8006bd6:	881b      	ldrh	r3, [r3, #0]
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006be2:	813b      	strh	r3, [r7, #8]
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	441a      	add	r2, r3
 8006bee:	893b      	ldrh	r3, [r7, #8]
 8006bf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	8013      	strh	r3, [r2, #0]
 8006c04:	e192      	b.n	8006f2c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	4413      	add	r3, r2
 8006c10:	881b      	ldrh	r3, [r3, #0]
 8006c12:	827b      	strh	r3, [r7, #18]
 8006c14:	8a7b      	ldrh	r3, [r7, #18]
 8006c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d01b      	beq.n	8006c56 <USB_DeactivateEndpoint+0xf6>
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	4413      	add	r3, r2
 8006c28:	881b      	ldrh	r3, [r3, #0]
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c34:	823b      	strh	r3, [r7, #16]
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	441a      	add	r2, r3
 8006c40:	8a3b      	ldrh	r3, [r7, #16]
 8006c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4413      	add	r3, r2
 8006c60:	881b      	ldrh	r3, [r3, #0]
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c6c:	81fb      	strh	r3, [r7, #14]
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	441a      	add	r2, r3
 8006c78:	89fb      	ldrh	r3, [r7, #14]
 8006c7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	8013      	strh	r3, [r2, #0]
 8006c8e:	e14d      	b.n	8006f2c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	785b      	ldrb	r3, [r3, #1]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f040 80a5 	bne.w	8006de4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4413      	add	r3, r2
 8006ca4:	881b      	ldrh	r3, [r3, #0]
 8006ca6:	843b      	strh	r3, [r7, #32]
 8006ca8:	8c3b      	ldrh	r3, [r7, #32]
 8006caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d01b      	beq.n	8006cea <USB_DeactivateEndpoint+0x18a>
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	4413      	add	r3, r2
 8006cbc:	881b      	ldrh	r3, [r3, #0]
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc8:	83fb      	strh	r3, [r7, #30]
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	441a      	add	r2, r3
 8006cd4:	8bfb      	ldrh	r3, [r7, #30]
 8006cd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4413      	add	r3, r2
 8006cf4:	881b      	ldrh	r3, [r3, #0]
 8006cf6:	83bb      	strh	r3, [r7, #28]
 8006cf8:	8bbb      	ldrh	r3, [r7, #28]
 8006cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d01b      	beq.n	8006d3a <USB_DeactivateEndpoint+0x1da>
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	4413      	add	r3, r2
 8006d0c:	881b      	ldrh	r3, [r3, #0]
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d18:	837b      	strh	r3, [r7, #26]
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	441a      	add	r2, r3
 8006d24:	8b7b      	ldrh	r3, [r7, #26]
 8006d26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4413      	add	r3, r2
 8006d44:	881b      	ldrh	r3, [r3, #0]
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d50:	833b      	strh	r3, [r7, #24]
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	441a      	add	r2, r3
 8006d5c:	8b3b      	ldrh	r3, [r7, #24]
 8006d5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	4413      	add	r3, r2
 8006d7c:	881b      	ldrh	r3, [r3, #0]
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d88:	82fb      	strh	r3, [r7, #22]
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	441a      	add	r2, r3
 8006d94:	8afb      	ldrh	r3, [r7, #22]
 8006d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	4413      	add	r3, r2
 8006db4:	881b      	ldrh	r3, [r3, #0]
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dc0:	82bb      	strh	r3, [r7, #20]
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	441a      	add	r2, r3
 8006dcc:	8abb      	ldrh	r3, [r7, #20]
 8006dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	8013      	strh	r3, [r2, #0]
 8006de2:	e0a3      	b.n	8006f2c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4413      	add	r3, r2
 8006dee:	881b      	ldrh	r3, [r3, #0]
 8006df0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006df2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006df4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d01b      	beq.n	8006e34 <USB_DeactivateEndpoint+0x2d4>
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4413      	add	r3, r2
 8006e06:	881b      	ldrh	r3, [r3, #0]
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e12:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	441a      	add	r2, r3
 8006e1e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006e20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	881b      	ldrh	r3, [r3, #0]
 8006e40:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006e42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d01b      	beq.n	8006e84 <USB_DeactivateEndpoint+0x324>
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4413      	add	r3, r2
 8006e56:	881b      	ldrh	r3, [r3, #0]
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e62:	853b      	strh	r3, [r7, #40]	; 0x28
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	441a      	add	r2, r3
 8006e6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006e70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4413      	add	r3, r2
 8006e8e:	881b      	ldrh	r3, [r3, #0]
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e9a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	441a      	add	r2, r3
 8006ea6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4413      	add	r3, r2
 8006ec6:	881b      	ldrh	r3, [r3, #0]
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ed2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	441a      	add	r2, r3
 8006ede:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4413      	add	r3, r2
 8006efe:	881b      	ldrh	r3, [r3, #0]
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f0a:	847b      	strh	r3, [r7, #34]	; 0x22
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	441a      	add	r2, r3
 8006f16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3734      	adds	r7, #52	; 0x34
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bc80      	pop	{r7}
 8006f36:	4770      	bx	lr

08006f38 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b0cc      	sub	sp, #304	; 0x130
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f46:	6018      	str	r0, [r3, #0]
 8006f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f50:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	785b      	ldrb	r3, [r3, #1]
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	f041 817d 	bne.w	800825e <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	699a      	ldr	r2, [r3, #24]
 8006f70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d908      	bls.n	8006f92 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006f90:	e007      	b.n	8006fa2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	7b1b      	ldrb	r3, [r3, #12]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d152      	bne.n	8007058 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	6959      	ldr	r1, [r3, #20]
 8006fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	88da      	ldrh	r2, [r3, #6]
 8006fca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006fd4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006fd8:	6800      	ldr	r0, [r0, #0]
 8006fda:	f001 ff23 	bl	8008e24 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fe2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006fe6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006fea:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006fee:	6812      	ldr	r2, [r2, #0]
 8006ff0:	601a      	str	r2, [r3, #0]
 8006ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007000:	b29b      	uxth	r3, r3
 8007002:	4619      	mov	r1, r3
 8007004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007008:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800700c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007010:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8007014:	6812      	ldr	r2, [r2, #0]
 8007016:	440a      	add	r2, r1
 8007018:	601a      	str	r2, [r3, #0]
 800701a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800701e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	011a      	lsls	r2, r3, #4
 8007028:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800702c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4413      	add	r3, r2
 8007034:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007038:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800703c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007040:	601a      	str	r2, [r3, #0]
 8007042:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007046:	b29a      	uxth	r2, r3
 8007048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800704c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	801a      	strh	r2, [r3, #0]
 8007054:	f001 b8b5 	b.w	80081c2 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800705c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	78db      	ldrb	r3, [r3, #3]
 8007064:	2b02      	cmp	r3, #2
 8007066:	f040 84c6 	bne.w	80079f6 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800706a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800706e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	6a1a      	ldr	r2, [r3, #32]
 8007076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800707a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	429a      	cmp	r2, r3
 8007084:	f240 8443 	bls.w	800790e <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007088:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800708c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007096:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	881b      	ldrh	r3, [r3, #0]
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ae:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80070b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	441a      	add	r2, r3
 80070cc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80070d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070d8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80070dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80070e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	6a1a      	ldr	r2, [r3, #32]
 80070f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070f4:	1ad2      	subs	r2, r2, r3
 80070f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007106:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007110:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	4413      	add	r3, r2
 800711c:	881b      	ldrh	r3, [r3, #0]
 800711e:	b29b      	uxth	r3, r3
 8007120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007124:	2b00      	cmp	r3, #0
 8007126:	f000 823e 	beq.w	80075a6 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800712a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800712e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007132:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007136:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800713a:	6812      	ldr	r2, [r2, #0]
 800713c:	601a      	str	r2, [r3, #0]
 800713e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007142:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	785b      	ldrb	r3, [r3, #1]
 800714a:	2b00      	cmp	r3, #0
 800714c:	f040 809a 	bne.w	8007284 <USB_EPStartXfer+0x34c>
 8007150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007154:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007158:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800715c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007160:	6812      	ldr	r2, [r2, #0]
 8007162:	601a      	str	r2, [r3, #0]
 8007164:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007168:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007172:	b29b      	uxth	r3, r3
 8007174:	4619      	mov	r1, r3
 8007176:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800717a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800717e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007182:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8007186:	6812      	ldr	r2, [r2, #0]
 8007188:	440a      	add	r2, r1
 800718a:	601a      	str	r2, [r3, #0]
 800718c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007190:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	011a      	lsls	r2, r3, #4
 800719a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800719e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4413      	add	r3, r2
 80071a6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80071aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80071b2:	601a      	str	r2, [r3, #0]
 80071b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d122      	bne.n	8007202 <USB_EPStartXfer+0x2ca>
 80071bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	881b      	ldrh	r3, [r3, #0]
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	801a      	strh	r2, [r3, #0]
 80071dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	881b      	ldrh	r3, [r3, #0]
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071f2:	b29a      	uxth	r2, r3
 80071f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	801a      	strh	r2, [r3, #0]
 8007200:	e079      	b.n	80072f6 <USB_EPStartXfer+0x3be>
 8007202:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007206:	2b3e      	cmp	r3, #62	; 0x3e
 8007208:	d81b      	bhi.n	8007242 <USB_EPStartXfer+0x30a>
 800720a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800720e:	085b      	lsrs	r3, r3, #1
 8007210:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007214:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007218:	f003 0301 	and.w	r3, r3, #1
 800721c:	2b00      	cmp	r3, #0
 800721e:	d004      	beq.n	800722a <USB_EPStartXfer+0x2f2>
 8007220:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007224:	3301      	adds	r3, #1
 8007226:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800722a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800722e:	b29b      	uxth	r3, r3
 8007230:	029b      	lsls	r3, r3, #10
 8007232:	b29a      	uxth	r2, r3
 8007234:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007238:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	801a      	strh	r2, [r3, #0]
 8007240:	e059      	b.n	80072f6 <USB_EPStartXfer+0x3be>
 8007242:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007246:	095b      	lsrs	r3, r3, #5
 8007248:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800724c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007250:	f003 031f 	and.w	r3, r3, #31
 8007254:	2b00      	cmp	r3, #0
 8007256:	d104      	bne.n	8007262 <USB_EPStartXfer+0x32a>
 8007258:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800725c:	3b01      	subs	r3, #1
 800725e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007262:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007266:	b29b      	uxth	r3, r3
 8007268:	029b      	lsls	r3, r3, #10
 800726a:	b29b      	uxth	r3, r3
 800726c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007270:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007274:	b29a      	uxth	r2, r3
 8007276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800727a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	801a      	strh	r2, [r3, #0]
 8007282:	e038      	b.n	80072f6 <USB_EPStartXfer+0x3be>
 8007284:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007288:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	785b      	ldrb	r3, [r3, #1]
 8007290:	2b01      	cmp	r3, #1
 8007292:	d130      	bne.n	80072f6 <USB_EPStartXfer+0x3be>
 8007294:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007298:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	4619      	mov	r1, r3
 80072a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072aa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80072ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80072b2:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80072b6:	6812      	ldr	r2, [r2, #0]
 80072b8:	440a      	add	r2, r1
 80072ba:	601a      	str	r2, [r3, #0]
 80072bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	011a      	lsls	r2, r3, #4
 80072ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ce:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4413      	add	r3, r2
 80072d6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80072da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072e2:	601a      	str	r2, [r3, #0]
 80072e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80072f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	895b      	ldrh	r3, [r3, #10]
 8007302:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800730a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6959      	ldr	r1, [r3, #20]
 8007312:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007316:	b29b      	uxth	r3, r3
 8007318:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800731c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007320:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007324:	6800      	ldr	r0, [r0, #0]
 8007326:	f001 fd7d 	bl	8008e24 <USB_WritePMA>
            ep->xfer_buff += len;
 800732a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800732e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	695a      	ldr	r2, [r3, #20]
 8007336:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800733a:	441a      	add	r2, r3
 800733c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007340:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800734c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6a1a      	ldr	r2, [r3, #32]
 8007354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007358:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	429a      	cmp	r2, r3
 8007362:	d90f      	bls.n	8007384 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8007364:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007368:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	6a1a      	ldr	r2, [r3, #32]
 8007370:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007374:	1ad2      	subs	r2, r2, r3
 8007376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800737a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	621a      	str	r2, [r3, #32]
 8007382:	e00e      	b.n	80073a2 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8007384:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007388:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	6a1b      	ldr	r3, [r3, #32]
 8007390:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007398:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2200      	movs	r2, #0
 80073a0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80073a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	785b      	ldrb	r3, [r3, #1]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f040 809a 	bne.w	80074e8 <USB_EPStartXfer+0x5b0>
 80073b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073b8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80073bc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80073c0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80073c4:	6812      	ldr	r2, [r2, #0]
 80073c6:	601a      	str	r2, [r3, #0]
 80073c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	4619      	mov	r1, r3
 80073da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073de:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80073e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80073e6:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80073ea:	6812      	ldr	r2, [r2, #0]
 80073ec:	440a      	add	r2, r1
 80073ee:	601a      	str	r2, [r3, #0]
 80073f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	011a      	lsls	r2, r3, #4
 80073fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007402:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4413      	add	r3, r2
 800740a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800740e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007412:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007416:	601a      	str	r2, [r3, #0]
 8007418:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800741c:	2b00      	cmp	r3, #0
 800741e:	d122      	bne.n	8007466 <USB_EPStartXfer+0x52e>
 8007420:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007424:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	881b      	ldrh	r3, [r3, #0]
 800742c:	b29b      	uxth	r3, r3
 800742e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007432:	b29a      	uxth	r2, r3
 8007434:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007438:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	801a      	strh	r2, [r3, #0]
 8007440:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007444:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	881b      	ldrh	r3, [r3, #0]
 800744c:	b29b      	uxth	r3, r3
 800744e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007452:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007456:	b29a      	uxth	r2, r3
 8007458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800745c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	801a      	strh	r2, [r3, #0]
 8007464:	e083      	b.n	800756e <USB_EPStartXfer+0x636>
 8007466:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800746a:	2b3e      	cmp	r3, #62	; 0x3e
 800746c:	d81b      	bhi.n	80074a6 <USB_EPStartXfer+0x56e>
 800746e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007472:	085b      	lsrs	r3, r3, #1
 8007474:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007478:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800747c:	f003 0301 	and.w	r3, r3, #1
 8007480:	2b00      	cmp	r3, #0
 8007482:	d004      	beq.n	800748e <USB_EPStartXfer+0x556>
 8007484:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007488:	3301      	adds	r3, #1
 800748a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800748e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007492:	b29b      	uxth	r3, r3
 8007494:	029b      	lsls	r3, r3, #10
 8007496:	b29a      	uxth	r2, r3
 8007498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800749c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	801a      	strh	r2, [r3, #0]
 80074a4:	e063      	b.n	800756e <USB_EPStartXfer+0x636>
 80074a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074aa:	095b      	lsrs	r3, r3, #5
 80074ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80074b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074b4:	f003 031f 	and.w	r3, r3, #31
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d104      	bne.n	80074c6 <USB_EPStartXfer+0x58e>
 80074bc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80074c0:	3b01      	subs	r3, #1
 80074c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80074c6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	029b      	lsls	r3, r3, #10
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074d8:	b29a      	uxth	r2, r3
 80074da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074de:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	801a      	strh	r2, [r3, #0]
 80074e6:	e042      	b.n	800756e <USB_EPStartXfer+0x636>
 80074e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	785b      	ldrb	r3, [r3, #1]
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d13a      	bne.n	800756e <USB_EPStartXfer+0x636>
 80074f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074fc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007500:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007504:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007508:	6812      	ldr	r2, [r2, #0]
 800750a:	601a      	str	r2, [r3, #0]
 800750c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007510:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800751a:	b29b      	uxth	r3, r3
 800751c:	4619      	mov	r1, r3
 800751e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007522:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007526:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800752a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800752e:	6812      	ldr	r2, [r2, #0]
 8007530:	440a      	add	r2, r1
 8007532:	601a      	str	r2, [r3, #0]
 8007534:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007538:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	011a      	lsls	r2, r3, #4
 8007542:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007546:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4413      	add	r3, r2
 800754e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007556:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007560:	b29a      	uxth	r2, r3
 8007562:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007566:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800756e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007572:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	891b      	ldrh	r3, [r3, #8]
 800757a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800757e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007582:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	6959      	ldr	r1, [r3, #20]
 800758a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800758e:	b29b      	uxth	r3, r3
 8007590:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007594:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007598:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800759c:	6800      	ldr	r0, [r0, #0]
 800759e:	f001 fc41 	bl	8008e24 <USB_WritePMA>
 80075a2:	f000 be0e 	b.w	80081c2 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80075a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	785b      	ldrb	r3, [r3, #1]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d16d      	bne.n	8007692 <USB_EPStartXfer+0x75a>
 80075b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80075c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	461a      	mov	r2, r3
 80075d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075d6:	4413      	add	r3, r2
 80075d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80075da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	011a      	lsls	r2, r3, #4
 80075e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075ea:	4413      	add	r3, r2
 80075ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80075f0:	647b      	str	r3, [r7, #68]	; 0x44
 80075f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d112      	bne.n	8007620 <USB_EPStartXfer+0x6e8>
 80075fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075fc:	881b      	ldrh	r3, [r3, #0]
 80075fe:	b29b      	uxth	r3, r3
 8007600:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007604:	b29a      	uxth	r2, r3
 8007606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007608:	801a      	strh	r2, [r3, #0]
 800760a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	b29b      	uxth	r3, r3
 8007610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007618:	b29a      	uxth	r2, r3
 800761a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800761c:	801a      	strh	r2, [r3, #0]
 800761e:	e063      	b.n	80076e8 <USB_EPStartXfer+0x7b0>
 8007620:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007624:	2b3e      	cmp	r3, #62	; 0x3e
 8007626:	d817      	bhi.n	8007658 <USB_EPStartXfer+0x720>
 8007628:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800762c:	085b      	lsrs	r3, r3, #1
 800762e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007632:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007636:	f003 0301 	and.w	r3, r3, #1
 800763a:	2b00      	cmp	r3, #0
 800763c:	d004      	beq.n	8007648 <USB_EPStartXfer+0x710>
 800763e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007642:	3301      	adds	r3, #1
 8007644:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007648:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800764c:	b29b      	uxth	r3, r3
 800764e:	029b      	lsls	r3, r3, #10
 8007650:	b29a      	uxth	r2, r3
 8007652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007654:	801a      	strh	r2, [r3, #0]
 8007656:	e047      	b.n	80076e8 <USB_EPStartXfer+0x7b0>
 8007658:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800765c:	095b      	lsrs	r3, r3, #5
 800765e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007662:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007666:	f003 031f 	and.w	r3, r3, #31
 800766a:	2b00      	cmp	r3, #0
 800766c:	d104      	bne.n	8007678 <USB_EPStartXfer+0x740>
 800766e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007672:	3b01      	subs	r3, #1
 8007674:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007678:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800767c:	b29b      	uxth	r3, r3
 800767e:	029b      	lsls	r3, r3, #10
 8007680:	b29b      	uxth	r3, r3
 8007682:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007686:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800768a:	b29a      	uxth	r2, r3
 800768c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800768e:	801a      	strh	r2, [r3, #0]
 8007690:	e02a      	b.n	80076e8 <USB_EPStartXfer+0x7b0>
 8007692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007696:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	785b      	ldrb	r3, [r3, #1]
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d122      	bne.n	80076e8 <USB_EPStartXfer+0x7b0>
 80076a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	653b      	str	r3, [r7, #80]	; 0x50
 80076ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076bc:	b29b      	uxth	r3, r3
 80076be:	461a      	mov	r2, r3
 80076c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076c2:	4413      	add	r3, r2
 80076c4:	653b      	str	r3, [r7, #80]	; 0x50
 80076c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	011a      	lsls	r2, r3, #4
 80076d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076d6:	4413      	add	r3, r2
 80076d8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80076dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80076e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	891b      	ldrh	r3, [r3, #8]
 80076f4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	6959      	ldr	r1, [r3, #20]
 8007704:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007708:	b29b      	uxth	r3, r3
 800770a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800770e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007712:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007716:	6800      	ldr	r0, [r0, #0]
 8007718:	f001 fb84 	bl	8008e24 <USB_WritePMA>
            ep->xfer_buff += len;
 800771c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007720:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	695a      	ldr	r2, [r3, #20]
 8007728:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800772c:	441a      	add	r2, r3
 800772e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007732:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800773a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800773e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	6a1a      	ldr	r2, [r3, #32]
 8007746:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800774a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	429a      	cmp	r2, r3
 8007754:	d90f      	bls.n	8007776 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8007756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800775a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	6a1a      	ldr	r2, [r3, #32]
 8007762:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007766:	1ad2      	subs	r2, r2, r3
 8007768:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800776c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	621a      	str	r2, [r3, #32]
 8007774:	e00e      	b.n	8007794 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8007776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800777a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800778a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2200      	movs	r2, #0
 8007792:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007794:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007798:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	643b      	str	r3, [r7, #64]	; 0x40
 80077a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	785b      	ldrb	r3, [r3, #1]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d16d      	bne.n	800788c <USB_EPStartXfer+0x954>
 80077b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80077bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	461a      	mov	r2, r3
 80077ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d0:	4413      	add	r3, r2
 80077d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80077d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	011a      	lsls	r2, r3, #4
 80077e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e4:	4413      	add	r3, r2
 80077e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80077ea:	637b      	str	r3, [r7, #52]	; 0x34
 80077ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d112      	bne.n	800781a <USB_EPStartXfer+0x8e2>
 80077f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f6:	881b      	ldrh	r3, [r3, #0]
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077fe:	b29a      	uxth	r2, r3
 8007800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007802:	801a      	strh	r2, [r3, #0]
 8007804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007806:	881b      	ldrh	r3, [r3, #0]
 8007808:	b29b      	uxth	r3, r3
 800780a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800780e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007812:	b29a      	uxth	r2, r3
 8007814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007816:	801a      	strh	r2, [r3, #0]
 8007818:	e05d      	b.n	80078d6 <USB_EPStartXfer+0x99e>
 800781a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800781e:	2b3e      	cmp	r3, #62	; 0x3e
 8007820:	d817      	bhi.n	8007852 <USB_EPStartXfer+0x91a>
 8007822:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007826:	085b      	lsrs	r3, r3, #1
 8007828:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800782c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007830:	f003 0301 	and.w	r3, r3, #1
 8007834:	2b00      	cmp	r3, #0
 8007836:	d004      	beq.n	8007842 <USB_EPStartXfer+0x90a>
 8007838:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800783c:	3301      	adds	r3, #1
 800783e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007842:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007846:	b29b      	uxth	r3, r3
 8007848:	029b      	lsls	r3, r3, #10
 800784a:	b29a      	uxth	r2, r3
 800784c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800784e:	801a      	strh	r2, [r3, #0]
 8007850:	e041      	b.n	80078d6 <USB_EPStartXfer+0x99e>
 8007852:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007856:	095b      	lsrs	r3, r3, #5
 8007858:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800785c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007860:	f003 031f 	and.w	r3, r3, #31
 8007864:	2b00      	cmp	r3, #0
 8007866:	d104      	bne.n	8007872 <USB_EPStartXfer+0x93a>
 8007868:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800786c:	3b01      	subs	r3, #1
 800786e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007872:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007876:	b29b      	uxth	r3, r3
 8007878:	029b      	lsls	r3, r3, #10
 800787a:	b29b      	uxth	r3, r3
 800787c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007880:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007884:	b29a      	uxth	r2, r3
 8007886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007888:	801a      	strh	r2, [r3, #0]
 800788a:	e024      	b.n	80078d6 <USB_EPStartXfer+0x99e>
 800788c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007890:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	785b      	ldrb	r3, [r3, #1]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d11c      	bne.n	80078d6 <USB_EPStartXfer+0x99e>
 800789c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	461a      	mov	r2, r3
 80078ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078b0:	4413      	add	r3, r2
 80078b2:	643b      	str	r3, [r7, #64]	; 0x40
 80078b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	011a      	lsls	r2, r3, #4
 80078c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078c4:	4413      	add	r3, r2
 80078c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80078ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078d0:	b29a      	uxth	r2, r3
 80078d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80078d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	895b      	ldrh	r3, [r3, #10]
 80078e2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	6959      	ldr	r1, [r3, #20]
 80078f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80078fc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007900:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007904:	6800      	ldr	r0, [r0, #0]
 8007906:	f001 fa8d 	bl	8008e24 <USB_WritePMA>
 800790a:	f000 bc5a 	b.w	80081c2 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800790e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007912:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6a1b      	ldr	r3, [r3, #32]
 800791a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800791e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007922:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800792c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	4413      	add	r3, r2
 8007938:	881b      	ldrh	r3, [r3, #0]
 800793a:	b29b      	uxth	r3, r3
 800793c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007944:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007948:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800794c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007956:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	441a      	add	r2, r3
 8007962:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007966:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800796a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800796e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007976:	b29b      	uxth	r3, r3
 8007978:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800797a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800797e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800798a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007994:	b29b      	uxth	r3, r3
 8007996:	461a      	mov	r2, r3
 8007998:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800799a:	4413      	add	r3, r2
 800799c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800799e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	011a      	lsls	r2, r3, #4
 80079ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079ae:	4413      	add	r3, r2
 80079b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80079b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80079b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079ba:	b29a      	uxth	r2, r3
 80079bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079be:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80079c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	891b      	ldrh	r3, [r3, #8]
 80079cc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	6959      	ldr	r1, [r3, #20]
 80079dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80079e6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80079ea:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80079ee:	6800      	ldr	r0, [r0, #0]
 80079f0:	f001 fa18 	bl	8008e24 <USB_WritePMA>
 80079f4:	e3e5      	b.n	80081c2 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80079f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	4413      	add	r3, r2
 8007a10:	881b      	ldrh	r3, [r3, #0]
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a1c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007a20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	441a      	add	r2, r3
 8007a3a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a46:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007a52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	6a1a      	ldr	r2, [r3, #32]
 8007a5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a62:	1ad2      	subs	r2, r2, r3
 8007a64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007a70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4413      	add	r3, r2
 8007a8a:	881b      	ldrh	r3, [r3, #0]
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f000 81bc 	beq.w	8007e10 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007a98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007aa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	785b      	ldrb	r3, [r3, #1]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d16d      	bne.n	8007b92 <USB_EPStartXfer+0xc5a>
 8007ab6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ac2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ac6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ad6:	4413      	add	r3, r2
 8007ad8:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ada:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ade:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	011a      	lsls	r2, r3, #4
 8007ae8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007aea:	4413      	add	r3, r2
 8007aec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007af0:	677b      	str	r3, [r7, #116]	; 0x74
 8007af2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d112      	bne.n	8007b20 <USB_EPStartXfer+0xbe8>
 8007afa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007afc:	881b      	ldrh	r3, [r3, #0]
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b04:	b29a      	uxth	r2, r3
 8007b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b08:	801a      	strh	r2, [r3, #0]
 8007b0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b0c:	881b      	ldrh	r3, [r3, #0]
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b1c:	801a      	strh	r2, [r3, #0]
 8007b1e:	e060      	b.n	8007be2 <USB_EPStartXfer+0xcaa>
 8007b20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b24:	2b3e      	cmp	r3, #62	; 0x3e
 8007b26:	d817      	bhi.n	8007b58 <USB_EPStartXfer+0xc20>
 8007b28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b2c:	085b      	lsrs	r3, r3, #1
 8007b2e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007b32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b36:	f003 0301 	and.w	r3, r3, #1
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d004      	beq.n	8007b48 <USB_EPStartXfer+0xc10>
 8007b3e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007b42:	3301      	adds	r3, #1
 8007b44:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007b48:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	029b      	lsls	r3, r3, #10
 8007b50:	b29a      	uxth	r2, r3
 8007b52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b54:	801a      	strh	r2, [r3, #0]
 8007b56:	e044      	b.n	8007be2 <USB_EPStartXfer+0xcaa>
 8007b58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b5c:	095b      	lsrs	r3, r3, #5
 8007b5e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007b62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b66:	f003 031f 	and.w	r3, r3, #31
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d104      	bne.n	8007b78 <USB_EPStartXfer+0xc40>
 8007b6e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007b72:	3b01      	subs	r3, #1
 8007b74:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007b78:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	029b      	lsls	r3, r3, #10
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b8e:	801a      	strh	r2, [r3, #0]
 8007b90:	e027      	b.n	8007be2 <USB_EPStartXfer+0xcaa>
 8007b92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	785b      	ldrb	r3, [r3, #1]
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d11f      	bne.n	8007be2 <USB_EPStartXfer+0xcaa>
 8007ba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ba6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007bb8:	4413      	add	r3, r2
 8007bba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007bbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	011a      	lsls	r2, r3, #4
 8007bcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007bd6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007bd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007be0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007be2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007be6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	895b      	ldrh	r3, [r3, #10]
 8007bee:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007bf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	6959      	ldr	r1, [r3, #20]
 8007bfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007c08:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007c0c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007c10:	6800      	ldr	r0, [r0, #0]
 8007c12:	f001 f907 	bl	8008e24 <USB_WritePMA>
          ep->xfer_buff += len;
 8007c16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	695a      	ldr	r2, [r3, #20]
 8007c22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c26:	441a      	add	r2, r3
 8007c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007c34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	6a1a      	ldr	r2, [r3, #32]
 8007c40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d90f      	bls.n	8007c70 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007c50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	6a1a      	ldr	r2, [r3, #32]
 8007c5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c60:	1ad2      	subs	r2, r2, r3
 8007c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	621a      	str	r2, [r3, #32]
 8007c6e:	e00e      	b.n	8007c8e <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007c70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	6a1b      	ldr	r3, [r3, #32]
 8007c7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007c80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007c8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	f000 8295 	beq.w	80081c2 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007c98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	785b      	ldrb	r3, [r3, #1]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d16d      	bne.n	8007d84 <USB_EPStartXfer+0xe4c>
 8007ca8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	66bb      	str	r3, [r7, #104]	; 0x68
 8007cb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cc2:	b29b      	uxth	r3, r3
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007cc8:	4413      	add	r3, r2
 8007cca:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	011a      	lsls	r2, r3, #4
 8007cda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007cdc:	4413      	add	r3, r2
 8007cde:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ce2:	667b      	str	r3, [r7, #100]	; 0x64
 8007ce4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d112      	bne.n	8007d12 <USB_EPStartXfer+0xdda>
 8007cec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cee:	881b      	ldrh	r3, [r3, #0]
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cfa:	801a      	strh	r2, [r3, #0]
 8007cfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cfe:	881b      	ldrh	r3, [r3, #0]
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d0e:	801a      	strh	r2, [r3, #0]
 8007d10:	e063      	b.n	8007dda <USB_EPStartXfer+0xea2>
 8007d12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d16:	2b3e      	cmp	r3, #62	; 0x3e
 8007d18:	d817      	bhi.n	8007d4a <USB_EPStartXfer+0xe12>
 8007d1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d1e:	085b      	lsrs	r3, r3, #1
 8007d20:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007d24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d28:	f003 0301 	and.w	r3, r3, #1
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d004      	beq.n	8007d3a <USB_EPStartXfer+0xe02>
 8007d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d34:	3301      	adds	r3, #1
 8007d36:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	029b      	lsls	r3, r3, #10
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d46:	801a      	strh	r2, [r3, #0]
 8007d48:	e047      	b.n	8007dda <USB_EPStartXfer+0xea2>
 8007d4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d4e:	095b      	lsrs	r3, r3, #5
 8007d50:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007d54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d58:	f003 031f 	and.w	r3, r3, #31
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d104      	bne.n	8007d6a <USB_EPStartXfer+0xe32>
 8007d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d64:	3b01      	subs	r3, #1
 8007d66:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	029b      	lsls	r3, r3, #10
 8007d72:	b29b      	uxth	r3, r3
 8007d74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d80:	801a      	strh	r2, [r3, #0]
 8007d82:	e02a      	b.n	8007dda <USB_EPStartXfer+0xea2>
 8007d84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	785b      	ldrb	r3, [r3, #1]
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d122      	bne.n	8007dda <USB_EPStartXfer+0xea2>
 8007d94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	673b      	str	r3, [r7, #112]	; 0x70
 8007da0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007da4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	461a      	mov	r2, r3
 8007db2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007db4:	4413      	add	r3, r2
 8007db6:	673b      	str	r3, [r7, #112]	; 0x70
 8007db8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	011a      	lsls	r2, r3, #4
 8007dc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007dc8:	4413      	add	r3, r2
 8007dca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007dce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007dd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dd4:	b29a      	uxth	r2, r3
 8007dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dd8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007dda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	891b      	ldrh	r3, [r3, #8]
 8007de6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007dea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	6959      	ldr	r1, [r3, #20]
 8007df6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007e00:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007e04:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007e08:	6800      	ldr	r0, [r0, #0]
 8007e0a:	f001 f80b 	bl	8008e24 <USB_WritePMA>
 8007e0e:	e1d8      	b.n	80081c2 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007e10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	785b      	ldrb	r3, [r3, #1]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d178      	bne.n	8007f12 <USB_EPStartXfer+0xfda>
 8007e20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	461a      	mov	r2, r3
 8007e40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e44:	4413      	add	r3, r2
 8007e46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	011a      	lsls	r2, r3, #4
 8007e58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e5c:	4413      	add	r3, r2
 8007e5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e62:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007e66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d116      	bne.n	8007e9c <USB_EPStartXfer+0xf64>
 8007e6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e72:	881b      	ldrh	r3, [r3, #0]
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e80:	801a      	strh	r2, [r3, #0]
 8007e82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e86:	881b      	ldrh	r3, [r3, #0]
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e98:	801a      	strh	r2, [r3, #0]
 8007e9a:	e06b      	b.n	8007f74 <USB_EPStartXfer+0x103c>
 8007e9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ea0:	2b3e      	cmp	r3, #62	; 0x3e
 8007ea2:	d818      	bhi.n	8007ed6 <USB_EPStartXfer+0xf9e>
 8007ea4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ea8:	085b      	lsrs	r3, r3, #1
 8007eaa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007eae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eb2:	f003 0301 	and.w	r3, r3, #1
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d004      	beq.n	8007ec4 <USB_EPStartXfer+0xf8c>
 8007eba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007ec4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	029b      	lsls	r3, r3, #10
 8007ecc:	b29a      	uxth	r2, r3
 8007ece:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ed2:	801a      	strh	r2, [r3, #0]
 8007ed4:	e04e      	b.n	8007f74 <USB_EPStartXfer+0x103c>
 8007ed6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eda:	095b      	lsrs	r3, r3, #5
 8007edc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007ee0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ee4:	f003 031f 	and.w	r3, r3, #31
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d104      	bne.n	8007ef6 <USB_EPStartXfer+0xfbe>
 8007eec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007ef6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	029b      	lsls	r3, r3, #10
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f0e:	801a      	strh	r2, [r3, #0]
 8007f10:	e030      	b.n	8007f74 <USB_EPStartXfer+0x103c>
 8007f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	785b      	ldrb	r3, [r3, #1]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d128      	bne.n	8007f74 <USB_EPStartXfer+0x103c>
 8007f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007f30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	461a      	mov	r2, r3
 8007f42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f46:	4413      	add	r3, r2
 8007f48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007f4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	011a      	lsls	r2, r3, #4
 8007f5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f5e:	4413      	add	r3, r2
 8007f60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007f68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f72:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	891b      	ldrh	r3, [r3, #8]
 8007f80:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	6959      	ldr	r1, [r3, #20]
 8007f90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007f9a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007f9e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007fa2:	6800      	ldr	r0, [r0, #0]
 8007fa4:	f000 ff3e 	bl	8008e24 <USB_WritePMA>
          ep->xfer_buff += len;
 8007fa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	695a      	ldr	r2, [r3, #20]
 8007fb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fb8:	441a      	add	r2, r3
 8007fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	6a1a      	ldr	r2, [r3, #32]
 8007fd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d90f      	bls.n	8008002 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8007fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fe6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	6a1a      	ldr	r2, [r3, #32]
 8007fee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ff2:	1ad2      	subs	r2, r2, r3
 8007ff4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ff8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	621a      	str	r2, [r3, #32]
 8008000:	e00e      	b.n	8008020 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8008002:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008006:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	6a1b      	ldr	r3, [r3, #32]
 800800e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8008012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008016:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2200      	movs	r2, #0
 800801e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008020:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008024:	2b00      	cmp	r3, #0
 8008026:	f000 80cc 	beq.w	80081c2 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800802a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800802e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008038:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800803c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	785b      	ldrb	r3, [r3, #1]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d178      	bne.n	800813a <USB_EPStartXfer+0x1202>
 8008048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800804c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800805a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008064:	b29b      	uxth	r3, r3
 8008066:	461a      	mov	r2, r3
 8008068:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800806c:	4413      	add	r3, r2
 800806e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008076:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	011a      	lsls	r2, r3, #4
 8008080:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008084:	4413      	add	r3, r2
 8008086:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800808a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800808e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008092:	2b00      	cmp	r3, #0
 8008094:	d116      	bne.n	80080c4 <USB_EPStartXfer+0x118c>
 8008096:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800809a:	881b      	ldrh	r3, [r3, #0]
 800809c:	b29b      	uxth	r3, r3
 800809e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080a8:	801a      	strh	r2, [r3, #0]
 80080aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080ae:	881b      	ldrh	r3, [r3, #0]
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080ba:	b29a      	uxth	r2, r3
 80080bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080c0:	801a      	strh	r2, [r3, #0]
 80080c2:	e064      	b.n	800818e <USB_EPStartXfer+0x1256>
 80080c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080c8:	2b3e      	cmp	r3, #62	; 0x3e
 80080ca:	d818      	bhi.n	80080fe <USB_EPStartXfer+0x11c6>
 80080cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080d0:	085b      	lsrs	r3, r3, #1
 80080d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80080d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080da:	f003 0301 	and.w	r3, r3, #1
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d004      	beq.n	80080ec <USB_EPStartXfer+0x11b4>
 80080e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080e6:	3301      	adds	r3, #1
 80080e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80080ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	029b      	lsls	r3, r3, #10
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080fa:	801a      	strh	r2, [r3, #0]
 80080fc:	e047      	b.n	800818e <USB_EPStartXfer+0x1256>
 80080fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008102:	095b      	lsrs	r3, r3, #5
 8008104:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800810c:	f003 031f 	and.w	r3, r3, #31
 8008110:	2b00      	cmp	r3, #0
 8008112:	d104      	bne.n	800811e <USB_EPStartXfer+0x11e6>
 8008114:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008118:	3b01      	subs	r3, #1
 800811a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800811e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008122:	b29b      	uxth	r3, r3
 8008124:	029b      	lsls	r3, r3, #10
 8008126:	b29b      	uxth	r3, r3
 8008128:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800812c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008130:	b29a      	uxth	r2, r3
 8008132:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008136:	801a      	strh	r2, [r3, #0]
 8008138:	e029      	b.n	800818e <USB_EPStartXfer+0x1256>
 800813a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800813e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	785b      	ldrb	r3, [r3, #1]
 8008146:	2b01      	cmp	r3, #1
 8008148:	d121      	bne.n	800818e <USB_EPStartXfer+0x1256>
 800814a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800814e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008158:	b29b      	uxth	r3, r3
 800815a:	461a      	mov	r2, r3
 800815c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008160:	4413      	add	r3, r2
 8008162:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800816a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	011a      	lsls	r2, r3, #4
 8008174:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008178:	4413      	add	r3, r2
 800817a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800817e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008182:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008186:	b29a      	uxth	r2, r3
 8008188:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800818c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800818e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008192:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	895b      	ldrh	r3, [r3, #10]
 800819a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800819e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	6959      	ldr	r1, [r3, #20]
 80081aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80081b4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80081b8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80081bc:	6800      	ldr	r0, [r0, #0]
 80081be:	f000 fe31 	bl	8008e24 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80081c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	4413      	add	r3, r2
 80081dc:	881b      	ldrh	r3, [r3, #0]
 80081de:	b29b      	uxth	r3, r3
 80081e0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80081e4:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80081e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081f0:	8013      	strh	r3, [r2, #0]
 80081f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081f6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80081fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80081fe:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008202:	8812      	ldrh	r2, [r2, #0]
 8008204:	f082 0210 	eor.w	r2, r2, #16
 8008208:	801a      	strh	r2, [r3, #0]
 800820a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800820e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008212:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008216:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800821a:	8812      	ldrh	r2, [r2, #0]
 800821c:	f082 0220 	eor.w	r2, r2, #32
 8008220:	801a      	strh	r2, [r3, #0]
 8008222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008226:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008230:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	441a      	add	r2, r3
 800823c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008240:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008244:	881b      	ldrh	r3, [r3, #0]
 8008246:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800824a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800824e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008256:	b29b      	uxth	r3, r3
 8008258:	8013      	strh	r3, [r2, #0]
 800825a:	f000 bc9f 	b.w	8008b9c <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800825e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008262:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	7b1b      	ldrb	r3, [r3, #12]
 800826a:	2b00      	cmp	r3, #0
 800826c:	f040 80ae 	bne.w	80083cc <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008270:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008274:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	699a      	ldr	r2, [r3, #24]
 800827c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008280:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	429a      	cmp	r2, r3
 800828a:	d917      	bls.n	80082bc <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 800828c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008290:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	691b      	ldr	r3, [r3, #16]
 8008298:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800829c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	699a      	ldr	r2, [r3, #24]
 80082a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082ac:	1ad2      	subs	r2, r2, r3
 80082ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	619a      	str	r2, [r3, #24]
 80082ba:	e00e      	b.n	80082da <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80082bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	699b      	ldr	r3, [r3, #24]
 80082c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80082cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2200      	movs	r2, #0
 80082d8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80082da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80082e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	461a      	mov	r2, r3
 80082fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80082fe:	4413      	add	r3, r2
 8008300:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008304:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008308:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	011a      	lsls	r2, r3, #4
 8008312:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008316:	4413      	add	r3, r2
 8008318:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800831c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008320:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008324:	2b00      	cmp	r3, #0
 8008326:	d116      	bne.n	8008356 <USB_EPStartXfer+0x141e>
 8008328:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800832c:	881b      	ldrh	r3, [r3, #0]
 800832e:	b29b      	uxth	r3, r3
 8008330:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008334:	b29a      	uxth	r2, r3
 8008336:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800833a:	801a      	strh	r2, [r3, #0]
 800833c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008340:	881b      	ldrh	r3, [r3, #0]
 8008342:	b29b      	uxth	r3, r3
 8008344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800834c:	b29a      	uxth	r2, r3
 800834e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008352:	801a      	strh	r2, [r3, #0]
 8008354:	e3e8      	b.n	8008b28 <USB_EPStartXfer+0x1bf0>
 8008356:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800835a:	2b3e      	cmp	r3, #62	; 0x3e
 800835c:	d818      	bhi.n	8008390 <USB_EPStartXfer+0x1458>
 800835e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008362:	085b      	lsrs	r3, r3, #1
 8008364:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008368:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800836c:	f003 0301 	and.w	r3, r3, #1
 8008370:	2b00      	cmp	r3, #0
 8008372:	d004      	beq.n	800837e <USB_EPStartXfer+0x1446>
 8008374:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008378:	3301      	adds	r3, #1
 800837a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800837e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008382:	b29b      	uxth	r3, r3
 8008384:	029b      	lsls	r3, r3, #10
 8008386:	b29a      	uxth	r2, r3
 8008388:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800838c:	801a      	strh	r2, [r3, #0]
 800838e:	e3cb      	b.n	8008b28 <USB_EPStartXfer+0x1bf0>
 8008390:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008394:	095b      	lsrs	r3, r3, #5
 8008396:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800839a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800839e:	f003 031f 	and.w	r3, r3, #31
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d104      	bne.n	80083b0 <USB_EPStartXfer+0x1478>
 80083a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80083aa:	3b01      	subs	r3, #1
 80083ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80083b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	029b      	lsls	r3, r3, #10
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083c2:	b29a      	uxth	r2, r3
 80083c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083c8:	801a      	strh	r2, [r3, #0]
 80083ca:	e3ad      	b.n	8008b28 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80083cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	78db      	ldrb	r3, [r3, #3]
 80083d8:	2b02      	cmp	r3, #2
 80083da:	f040 8200 	bne.w	80087de <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80083de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	785b      	ldrb	r3, [r3, #1]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f040 8091 	bne.w	8008512 <USB_EPStartXfer+0x15da>
 80083f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80083fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008402:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800840c:	b29b      	uxth	r3, r3
 800840e:	461a      	mov	r2, r3
 8008410:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008414:	4413      	add	r3, r2
 8008416:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800841a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800841e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	011a      	lsls	r2, r3, #4
 8008428:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800842c:	4413      	add	r3, r2
 800842e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008432:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800843a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	691b      	ldr	r3, [r3, #16]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d116      	bne.n	8008474 <USB_EPStartXfer+0x153c>
 8008446:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800844a:	881b      	ldrh	r3, [r3, #0]
 800844c:	b29b      	uxth	r3, r3
 800844e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008452:	b29a      	uxth	r2, r3
 8008454:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008458:	801a      	strh	r2, [r3, #0]
 800845a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800845e:	881b      	ldrh	r3, [r3, #0]
 8008460:	b29b      	uxth	r3, r3
 8008462:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008466:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800846a:	b29a      	uxth	r2, r3
 800846c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008470:	801a      	strh	r2, [r3, #0]
 8008472:	e083      	b.n	800857c <USB_EPStartXfer+0x1644>
 8008474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008478:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	2b3e      	cmp	r3, #62	; 0x3e
 8008482:	d820      	bhi.n	80084c6 <USB_EPStartXfer+0x158e>
 8008484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008488:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	085b      	lsrs	r3, r3, #1
 8008492:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800849a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	f003 0301 	and.w	r3, r3, #1
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d004      	beq.n	80084b4 <USB_EPStartXfer+0x157c>
 80084aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084ae:	3301      	adds	r3, #1
 80084b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80084b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	029b      	lsls	r3, r3, #10
 80084bc:	b29a      	uxth	r2, r3
 80084be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084c2:	801a      	strh	r2, [r3, #0]
 80084c4:	e05a      	b.n	800857c <USB_EPStartXfer+0x1644>
 80084c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	095b      	lsrs	r3, r3, #5
 80084d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80084d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	f003 031f 	and.w	r3, r3, #31
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d104      	bne.n	80084f6 <USB_EPStartXfer+0x15be>
 80084ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084f0:	3b01      	subs	r3, #1
 80084f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80084f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	029b      	lsls	r3, r3, #10
 80084fe:	b29b      	uxth	r3, r3
 8008500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008508:	b29a      	uxth	r2, r3
 800850a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800850e:	801a      	strh	r2, [r3, #0]
 8008510:	e034      	b.n	800857c <USB_EPStartXfer+0x1644>
 8008512:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008516:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	785b      	ldrb	r3, [r3, #1]
 800851e:	2b01      	cmp	r3, #1
 8008520:	d12c      	bne.n	800857c <USB_EPStartXfer+0x1644>
 8008522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008526:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008530:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008534:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800853e:	b29b      	uxth	r3, r3
 8008540:	461a      	mov	r2, r3
 8008542:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008546:	4413      	add	r3, r2
 8008548:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800854c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008550:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	011a      	lsls	r2, r3, #4
 800855a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800855e:	4413      	add	r3, r2
 8008560:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008564:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008568:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800856c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	691b      	ldr	r3, [r3, #16]
 8008574:	b29a      	uxth	r2, r3
 8008576:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800857a:	801a      	strh	r2, [r3, #0]
 800857c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008580:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800858a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800858e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	785b      	ldrb	r3, [r3, #1]
 8008596:	2b00      	cmp	r3, #0
 8008598:	f040 8091 	bne.w	80086be <USB_EPStartXfer+0x1786>
 800859c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80085aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	461a      	mov	r2, r3
 80085bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80085c0:	4413      	add	r3, r2
 80085c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80085c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	011a      	lsls	r2, r3, #4
 80085d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80085d8:	4413      	add	r3, r2
 80085da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80085de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80085e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d116      	bne.n	8008620 <USB_EPStartXfer+0x16e8>
 80085f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085f6:	881b      	ldrh	r3, [r3, #0]
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80085fe:	b29a      	uxth	r2, r3
 8008600:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008604:	801a      	strh	r2, [r3, #0]
 8008606:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800860a:	881b      	ldrh	r3, [r3, #0]
 800860c:	b29b      	uxth	r3, r3
 800860e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008612:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008616:	b29a      	uxth	r2, r3
 8008618:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800861c:	801a      	strh	r2, [r3, #0]
 800861e:	e07c      	b.n	800871a <USB_EPStartXfer+0x17e2>
 8008620:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008624:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	691b      	ldr	r3, [r3, #16]
 800862c:	2b3e      	cmp	r3, #62	; 0x3e
 800862e:	d820      	bhi.n	8008672 <USB_EPStartXfer+0x173a>
 8008630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008634:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	085b      	lsrs	r3, r3, #1
 800863e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008646:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	f003 0301 	and.w	r3, r3, #1
 8008652:	2b00      	cmp	r3, #0
 8008654:	d004      	beq.n	8008660 <USB_EPStartXfer+0x1728>
 8008656:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800865a:	3301      	adds	r3, #1
 800865c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008660:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008664:	b29b      	uxth	r3, r3
 8008666:	029b      	lsls	r3, r3, #10
 8008668:	b29a      	uxth	r2, r3
 800866a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800866e:	801a      	strh	r2, [r3, #0]
 8008670:	e053      	b.n	800871a <USB_EPStartXfer+0x17e2>
 8008672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008676:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	691b      	ldr	r3, [r3, #16]
 800867e:	095b      	lsrs	r3, r3, #5
 8008680:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008688:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	691b      	ldr	r3, [r3, #16]
 8008690:	f003 031f 	and.w	r3, r3, #31
 8008694:	2b00      	cmp	r3, #0
 8008696:	d104      	bne.n	80086a2 <USB_EPStartXfer+0x176a>
 8008698:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800869c:	3b01      	subs	r3, #1
 800869e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80086a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	029b      	lsls	r3, r3, #10
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086b4:	b29a      	uxth	r2, r3
 80086b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086ba:	801a      	strh	r2, [r3, #0]
 80086bc:	e02d      	b.n	800871a <USB_EPStartXfer+0x17e2>
 80086be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	785b      	ldrb	r3, [r3, #1]
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d125      	bne.n	800871a <USB_EPStartXfer+0x17e2>
 80086ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086dc:	b29b      	uxth	r3, r3
 80086de:	461a      	mov	r2, r3
 80086e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80086e4:	4413      	add	r3, r2
 80086e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80086ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	011a      	lsls	r2, r3, #4
 80086f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80086fc:	4413      	add	r3, r2
 80086fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008702:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008706:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800870a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	b29a      	uxth	r2, r3
 8008714:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008718:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800871a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800871e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	69db      	ldr	r3, [r3, #28]
 8008726:	2b00      	cmp	r3, #0
 8008728:	f000 81fe 	beq.w	8008b28 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800872c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008730:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800873a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	4413      	add	r3, r2
 8008746:	881b      	ldrh	r3, [r3, #0]
 8008748:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800874c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008754:	2b00      	cmp	r3, #0
 8008756:	d005      	beq.n	8008764 <USB_EPStartXfer+0x182c>
 8008758:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800875c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008760:	2b00      	cmp	r3, #0
 8008762:	d10d      	bne.n	8008780 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008764:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800876c:	2b00      	cmp	r3, #0
 800876e:	f040 81db 	bne.w	8008b28 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008772:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800877a:	2b00      	cmp	r3, #0
 800877c:	f040 81d4 	bne.w	8008b28 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008780:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008784:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800878e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	4413      	add	r3, r2
 800879a:	881b      	ldrh	r3, [r3, #0]
 800879c:	b29b      	uxth	r3, r3
 800879e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087a6:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80087aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	441a      	add	r2, r3
 80087c4:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80087c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80087d8:	b29b      	uxth	r3, r3
 80087da:	8013      	strh	r3, [r2, #0]
 80087dc:	e1a4      	b.n	8008b28 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80087de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	78db      	ldrb	r3, [r3, #3]
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	f040 819a 	bne.w	8008b24 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80087f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	699a      	ldr	r2, [r3, #24]
 80087fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008800:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	429a      	cmp	r2, r3
 800880a:	d917      	bls.n	800883c <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800880c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008810:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	691b      	ldr	r3, [r3, #16]
 8008818:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800881c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008820:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	699a      	ldr	r2, [r3, #24]
 8008828:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800882c:	1ad2      	subs	r2, r2, r3
 800882e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008832:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	619a      	str	r2, [r3, #24]
 800883a:	e00e      	b.n	800885a <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800883c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008840:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	699b      	ldr	r3, [r3, #24]
 8008848:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800884c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008850:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	2200      	movs	r2, #0
 8008858:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800885a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800885e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	785b      	ldrb	r3, [r3, #1]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d178      	bne.n	800895c <USB_EPStartXfer+0x1a24>
 800886a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800886e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008878:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800887c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008886:	b29b      	uxth	r3, r3
 8008888:	461a      	mov	r2, r3
 800888a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800888e:	4413      	add	r3, r2
 8008890:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008894:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008898:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	011a      	lsls	r2, r3, #4
 80088a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80088a6:	4413      	add	r3, r2
 80088a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80088ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80088b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d116      	bne.n	80088e6 <USB_EPStartXfer+0x19ae>
 80088b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088bc:	881b      	ldrh	r3, [r3, #0]
 80088be:	b29b      	uxth	r3, r3
 80088c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80088c4:	b29a      	uxth	r2, r3
 80088c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088ca:	801a      	strh	r2, [r3, #0]
 80088cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088d0:	881b      	ldrh	r3, [r3, #0]
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088dc:	b29a      	uxth	r2, r3
 80088de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088e2:	801a      	strh	r2, [r3, #0]
 80088e4:	e06b      	b.n	80089be <USB_EPStartXfer+0x1a86>
 80088e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088ea:	2b3e      	cmp	r3, #62	; 0x3e
 80088ec:	d818      	bhi.n	8008920 <USB_EPStartXfer+0x19e8>
 80088ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088f2:	085b      	lsrs	r3, r3, #1
 80088f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80088f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088fc:	f003 0301 	and.w	r3, r3, #1
 8008900:	2b00      	cmp	r3, #0
 8008902:	d004      	beq.n	800890e <USB_EPStartXfer+0x19d6>
 8008904:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008908:	3301      	adds	r3, #1
 800890a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800890e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008912:	b29b      	uxth	r3, r3
 8008914:	029b      	lsls	r3, r3, #10
 8008916:	b29a      	uxth	r2, r3
 8008918:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800891c:	801a      	strh	r2, [r3, #0]
 800891e:	e04e      	b.n	80089be <USB_EPStartXfer+0x1a86>
 8008920:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008924:	095b      	lsrs	r3, r3, #5
 8008926:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800892a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800892e:	f003 031f 	and.w	r3, r3, #31
 8008932:	2b00      	cmp	r3, #0
 8008934:	d104      	bne.n	8008940 <USB_EPStartXfer+0x1a08>
 8008936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800893a:	3b01      	subs	r3, #1
 800893c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008940:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008944:	b29b      	uxth	r3, r3
 8008946:	029b      	lsls	r3, r3, #10
 8008948:	b29b      	uxth	r3, r3
 800894a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800894e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008952:	b29a      	uxth	r2, r3
 8008954:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008958:	801a      	strh	r2, [r3, #0]
 800895a:	e030      	b.n	80089be <USB_EPStartXfer+0x1a86>
 800895c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008960:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	785b      	ldrb	r3, [r3, #1]
 8008968:	2b01      	cmp	r3, #1
 800896a:	d128      	bne.n	80089be <USB_EPStartXfer+0x1a86>
 800896c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008970:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800897a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800897e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008988:	b29b      	uxth	r3, r3
 800898a:	461a      	mov	r2, r3
 800898c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008990:	4413      	add	r3, r2
 8008992:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800899a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	011a      	lsls	r2, r3, #4
 80089a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089a8:	4413      	add	r3, r2
 80089aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80089ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80089b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80089bc:	801a      	strh	r2, [r3, #0]
 80089be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80089cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	785b      	ldrb	r3, [r3, #1]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d178      	bne.n	8008ace <USB_EPStartXfer+0x1b96>
 80089dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80089ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	461a      	mov	r2, r3
 80089fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a00:	4413      	add	r3, r2
 8008a02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	011a      	lsls	r2, r3, #4
 8008a14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a18:	4413      	add	r3, r2
 8008a1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008a22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d116      	bne.n	8008a58 <USB_EPStartXfer+0x1b20>
 8008a2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a2e:	881b      	ldrh	r3, [r3, #0]
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a36:	b29a      	uxth	r2, r3
 8008a38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a3c:	801a      	strh	r2, [r3, #0]
 8008a3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a42:	881b      	ldrh	r3, [r3, #0]
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a54:	801a      	strh	r2, [r3, #0]
 8008a56:	e067      	b.n	8008b28 <USB_EPStartXfer+0x1bf0>
 8008a58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a5c:	2b3e      	cmp	r3, #62	; 0x3e
 8008a5e:	d818      	bhi.n	8008a92 <USB_EPStartXfer+0x1b5a>
 8008a60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a64:	085b      	lsrs	r3, r3, #1
 8008a66:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a6e:	f003 0301 	and.w	r3, r3, #1
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d004      	beq.n	8008a80 <USB_EPStartXfer+0x1b48>
 8008a76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a80:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	029b      	lsls	r3, r3, #10
 8008a88:	b29a      	uxth	r2, r3
 8008a8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a8e:	801a      	strh	r2, [r3, #0]
 8008a90:	e04a      	b.n	8008b28 <USB_EPStartXfer+0x1bf0>
 8008a92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a96:	095b      	lsrs	r3, r3, #5
 8008a98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aa0:	f003 031f 	and.w	r3, r3, #31
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d104      	bne.n	8008ab2 <USB_EPStartXfer+0x1b7a>
 8008aa8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008aac:	3b01      	subs	r3, #1
 8008aae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008ab2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	029b      	lsls	r3, r3, #10
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ac0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ac4:	b29a      	uxth	r2, r3
 8008ac6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008aca:	801a      	strh	r2, [r3, #0]
 8008acc:	e02c      	b.n	8008b28 <USB_EPStartXfer+0x1bf0>
 8008ace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ad2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	785b      	ldrb	r3, [r3, #1]
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d124      	bne.n	8008b28 <USB_EPStartXfer+0x1bf0>
 8008ade:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ae2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	461a      	mov	r2, r3
 8008af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008af4:	4413      	add	r3, r2
 8008af6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008afa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008afe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	011a      	lsls	r2, r3, #4
 8008b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b0c:	4413      	add	r3, r2
 8008b0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b12:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b1a:	b29a      	uxth	r2, r3
 8008b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b20:	801a      	strh	r2, [r3, #0]
 8008b22:	e001      	b.n	8008b28 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	e03a      	b.n	8008b9e <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008b28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	4413      	add	r3, r2
 8008b42:	881b      	ldrh	r3, [r3, #0]
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b4e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008b52:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008b56:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008b5a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008b5e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008b62:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008b66:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	441a      	add	r2, r3
 8008b84:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008b88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	785b      	ldrb	r3, [r3, #1]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d020      	beq.n	8008bfc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	4413      	add	r3, r2
 8008bc4:	881b      	ldrh	r3, [r3, #0]
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bd0:	81bb      	strh	r3, [r7, #12]
 8008bd2:	89bb      	ldrh	r3, [r7, #12]
 8008bd4:	f083 0310 	eor.w	r3, r3, #16
 8008bd8:	81bb      	strh	r3, [r7, #12]
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	441a      	add	r2, r3
 8008be4:	89bb      	ldrh	r3, [r7, #12]
 8008be6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	8013      	strh	r3, [r2, #0]
 8008bfa:	e01f      	b.n	8008c3c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	4413      	add	r3, r2
 8008c06:	881b      	ldrh	r3, [r3, #0]
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c12:	81fb      	strh	r3, [r7, #14]
 8008c14:	89fb      	ldrh	r3, [r7, #14]
 8008c16:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008c1a:	81fb      	strh	r3, [r7, #14]
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	441a      	add	r2, r3
 8008c26:	89fb      	ldrh	r3, [r7, #14]
 8008c28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3714      	adds	r7, #20
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bc80      	pop	{r7}
 8008c46:	4770      	bx	lr

08008c48 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b087      	sub	sp, #28
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	7b1b      	ldrb	r3, [r3, #12]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	f040 809d 	bne.w	8008d96 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	785b      	ldrb	r3, [r3, #1]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d04c      	beq.n	8008cfe <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	4413      	add	r3, r2
 8008c6e:	881b      	ldrh	r3, [r3, #0]
 8008c70:	823b      	strh	r3, [r7, #16]
 8008c72:	8a3b      	ldrh	r3, [r7, #16]
 8008c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d01b      	beq.n	8008cb4 <USB_EPClearStall+0x6c>
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	4413      	add	r3, r2
 8008c86:	881b      	ldrh	r3, [r3, #0]
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c92:	81fb      	strh	r3, [r7, #14]
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	441a      	add	r2, r3
 8008c9e:	89fb      	ldrh	r3, [r7, #14]
 8008ca0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ca4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ca8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	78db      	ldrb	r3, [r3, #3]
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d06c      	beq.n	8008d96 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	4413      	add	r3, r2
 8008cc6:	881b      	ldrh	r3, [r3, #0]
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cd2:	81bb      	strh	r3, [r7, #12]
 8008cd4:	89bb      	ldrh	r3, [r7, #12]
 8008cd6:	f083 0320 	eor.w	r3, r3, #32
 8008cda:	81bb      	strh	r3, [r7, #12]
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	441a      	add	r2, r3
 8008ce6:	89bb      	ldrh	r3, [r7, #12]
 8008ce8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	8013      	strh	r3, [r2, #0]
 8008cfc:	e04b      	b.n	8008d96 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	4413      	add	r3, r2
 8008d08:	881b      	ldrh	r3, [r3, #0]
 8008d0a:	82fb      	strh	r3, [r7, #22]
 8008d0c:	8afb      	ldrh	r3, [r7, #22]
 8008d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d01b      	beq.n	8008d4e <USB_EPClearStall+0x106>
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	4413      	add	r3, r2
 8008d20:	881b      	ldrh	r3, [r3, #0]
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d2c:	82bb      	strh	r3, [r7, #20]
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	441a      	add	r2, r3
 8008d38:	8abb      	ldrh	r3, [r7, #20]
 8008d3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	4413      	add	r3, r2
 8008d58:	881b      	ldrh	r3, [r3, #0]
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d64:	827b      	strh	r3, [r7, #18]
 8008d66:	8a7b      	ldrh	r3, [r7, #18]
 8008d68:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008d6c:	827b      	strh	r3, [r7, #18]
 8008d6e:	8a7b      	ldrh	r3, [r7, #18]
 8008d70:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008d74:	827b      	strh	r3, [r7, #18]
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	441a      	add	r2, r3
 8008d80:	8a7b      	ldrh	r3, [r7, #18]
 8008d82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	371c      	adds	r7, #28
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bc80      	pop	{r7}
 8008da0:	4770      	bx	lr

08008da2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008da2:	b480      	push	{r7}
 8008da4:	b083      	sub	sp, #12
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
 8008daa:	460b      	mov	r3, r1
 8008dac:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008dae:	78fb      	ldrb	r3, [r7, #3]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d103      	bne.n	8008dbc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2280      	movs	r2, #128	; 0x80
 8008db8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	370c      	adds	r7, #12
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bc80      	pop	{r7}
 8008dc6:	4770      	bx	lr

08008dc8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008dd0:	2300      	movs	r3, #0
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	370c      	adds	r7, #12
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bc80      	pop	{r7}
 8008dda:	4770      	bx	lr

08008ddc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008de4:	2300      	movs	r3, #0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	370c      	adds	r7, #12
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bc80      	pop	{r7}
 8008dee:	4770      	bx	lr

08008df0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008e02:	68fb      	ldr	r3, [r7, #12]
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3714      	adds	r7, #20
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bc80      	pop	{r7}
 8008e0c:	4770      	bx	lr

08008e0e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008e0e:	b480      	push	{r7}
 8008e10:	b083      	sub	sp, #12
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
 8008e16:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	370c      	adds	r7, #12
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bc80      	pop	{r7}
 8008e22:	4770      	bx	lr

08008e24 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b08d      	sub	sp, #52	; 0x34
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	4611      	mov	r1, r2
 8008e30:	461a      	mov	r2, r3
 8008e32:	460b      	mov	r3, r1
 8008e34:	80fb      	strh	r3, [r7, #6]
 8008e36:	4613      	mov	r3, r2
 8008e38:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008e3a:	88bb      	ldrh	r3, [r7, #4]
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	085b      	lsrs	r3, r3, #1
 8008e40:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008e4a:	88fb      	ldrh	r3, [r7, #6]
 8008e4c:	005a      	lsls	r2, r3, #1
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	4413      	add	r3, r2
 8008e52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e56:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008e58:	6a3b      	ldr	r3, [r7, #32]
 8008e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e5c:	e01e      	b.n	8008e9c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e66:	3301      	adds	r3, #1
 8008e68:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	021b      	lsls	r3, r3, #8
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	461a      	mov	r2, r3
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	b29a      	uxth	r2, r3
 8008e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e82:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e86:	3302      	adds	r3, #2
 8008e88:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8c:	3302      	adds	r3, #2
 8008e8e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e92:	3301      	adds	r3, #1
 8008e94:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e98:	3b01      	subs	r3, #1
 8008e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d1dd      	bne.n	8008e5e <USB_WritePMA+0x3a>
  }
}
 8008ea2:	bf00      	nop
 8008ea4:	bf00      	nop
 8008ea6:	3734      	adds	r7, #52	; 0x34
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bc80      	pop	{r7}
 8008eac:	4770      	bx	lr

08008eae <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008eae:	b480      	push	{r7}
 8008eb0:	b08b      	sub	sp, #44	; 0x2c
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	60f8      	str	r0, [r7, #12]
 8008eb6:	60b9      	str	r1, [r7, #8]
 8008eb8:	4611      	mov	r1, r2
 8008eba:	461a      	mov	r2, r3
 8008ebc:	460b      	mov	r3, r1
 8008ebe:	80fb      	strh	r3, [r7, #6]
 8008ec0:	4613      	mov	r3, r2
 8008ec2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008ec4:	88bb      	ldrh	r3, [r7, #4]
 8008ec6:	085b      	lsrs	r3, r3, #1
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008ed4:	88fb      	ldrh	r3, [r7, #6]
 8008ed6:	005a      	lsls	r2, r3, #1
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	4413      	add	r3, r2
 8008edc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ee0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8008ee6:	e01b      	b.n	8008f20 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008ee8:	6a3b      	ldr	r3, [r7, #32]
 8008eea:	881b      	ldrh	r3, [r3, #0]
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008ef0:	6a3b      	ldr	r3, [r7, #32]
 8008ef2:	3302      	adds	r3, #2
 8008ef4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	b2da      	uxtb	r2, r3
 8008efa:	69fb      	ldr	r3, [r7, #28]
 8008efc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008efe:	69fb      	ldr	r3, [r7, #28]
 8008f00:	3301      	adds	r3, #1
 8008f02:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	0a1b      	lsrs	r3, r3, #8
 8008f08:	b2da      	uxtb	r2, r3
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	3301      	adds	r3, #1
 8008f12:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008f14:	6a3b      	ldr	r3, [r7, #32]
 8008f16:	3302      	adds	r3, #2
 8008f18:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1c:	3b01      	subs	r3, #1
 8008f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8008f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d1e0      	bne.n	8008ee8 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008f26:	88bb      	ldrh	r3, [r7, #4]
 8008f28:	f003 0301 	and.w	r3, r3, #1
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d007      	beq.n	8008f42 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008f32:	6a3b      	ldr	r3, [r7, #32]
 8008f34:	881b      	ldrh	r3, [r3, #0]
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	b2da      	uxtb	r2, r3
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	701a      	strb	r2, [r3, #0]
  }
}
 8008f42:	bf00      	nop
 8008f44:	372c      	adds	r7, #44	; 0x2c
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bc80      	pop	{r7}
 8008f4a:	4770      	bx	lr

08008f4c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	460b      	mov	r3, r1
 8008f56:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	7c1b      	ldrb	r3, [r3, #16]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d115      	bne.n	8008f90 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008f64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f68:	2202      	movs	r2, #2
 8008f6a:	2181      	movs	r1, #129	; 0x81
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f001 fea6 	bl	800acbe <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2201      	movs	r2, #1
 8008f76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008f78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f7c:	2202      	movs	r2, #2
 8008f7e:	2101      	movs	r1, #1
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f001 fe9c 	bl	800acbe <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2201      	movs	r2, #1
 8008f8a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008f8e:	e012      	b.n	8008fb6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008f90:	2340      	movs	r3, #64	; 0x40
 8008f92:	2202      	movs	r2, #2
 8008f94:	2181      	movs	r1, #129	; 0x81
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f001 fe91 	bl	800acbe <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008fa2:	2340      	movs	r3, #64	; 0x40
 8008fa4:	2202      	movs	r2, #2
 8008fa6:	2101      	movs	r1, #1
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f001 fe88 	bl	800acbe <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008fb6:	2308      	movs	r3, #8
 8008fb8:	2203      	movs	r2, #3
 8008fba:	2182      	movs	r1, #130	; 0x82
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f001 fe7e 	bl	800acbe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008fc8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008fcc:	f001 ff9e 	bl	800af0c <USBD_static_malloc>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d102      	bne.n	8008fe8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	73fb      	strb	r3, [r7, #15]
 8008fe6:	e026      	b.n	8009036 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fee:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	2200      	movs	r2, #0
 8009006:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	7c1b      	ldrb	r3, [r3, #16]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d109      	bne.n	8009026 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800901c:	2101      	movs	r1, #1
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f001 ff3e 	bl	800aea0 <USBD_LL_PrepareReceive>
 8009024:	e007      	b.n	8009036 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800902c:	2340      	movs	r3, #64	; 0x40
 800902e:	2101      	movs	r1, #1
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f001 ff35 	bl	800aea0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009036:	7bfb      	ldrb	r3, [r7, #15]
}
 8009038:	4618      	mov	r0, r3
 800903a:	3710      	adds	r7, #16
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	460b      	mov	r3, r1
 800904a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800904c:	2300      	movs	r3, #0
 800904e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009050:	2181      	movs	r1, #129	; 0x81
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f001 fe59 	bl	800ad0a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800905e:	2101      	movs	r1, #1
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f001 fe52 	bl	800ad0a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2200      	movs	r2, #0
 800906a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800906e:	2182      	movs	r1, #130	; 0x82
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f001 fe4a 	bl	800ad0a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2200      	movs	r2, #0
 800907a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009082:	2b00      	cmp	r3, #0
 8009084:	d00e      	beq.n	80090a4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009096:	4618      	mov	r0, r3
 8009098:	f001 ff44 	bl	800af24 <USBD_static_free>
    pdev->pClassData = NULL;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80090a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b086      	sub	sp, #24
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
 80090b6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090be:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80090c0:	2300      	movs	r3, #0
 80090c2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80090c4:	2300      	movs	r3, #0
 80090c6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80090c8:	2300      	movs	r3, #0
 80090ca:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d039      	beq.n	800914c <USBD_CDC_Setup+0x9e>
 80090d8:	2b20      	cmp	r3, #32
 80090da:	d17f      	bne.n	80091dc <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	88db      	ldrh	r3, [r3, #6]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d029      	beq.n	8009138 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	b25b      	sxtb	r3, r3
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	da11      	bge.n	8009112 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	683a      	ldr	r2, [r7, #0]
 80090f8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80090fa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80090fc:	683a      	ldr	r2, [r7, #0]
 80090fe:	88d2      	ldrh	r2, [r2, #6]
 8009100:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009102:	6939      	ldr	r1, [r7, #16]
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	88db      	ldrh	r3, [r3, #6]
 8009108:	461a      	mov	r2, r3
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f001 fa09 	bl	800a522 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009110:	e06b      	b.n	80091ea <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	785a      	ldrb	r2, [r3, #1]
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	88db      	ldrh	r3, [r3, #6]
 8009120:	b2da      	uxtb	r2, r3
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009128:	6939      	ldr	r1, [r7, #16]
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	88db      	ldrh	r3, [r3, #6]
 800912e:	461a      	mov	r2, r3
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f001 fa24 	bl	800a57e <USBD_CtlPrepareRx>
      break;
 8009136:	e058      	b.n	80091ea <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	683a      	ldr	r2, [r7, #0]
 8009142:	7850      	ldrb	r0, [r2, #1]
 8009144:	2200      	movs	r2, #0
 8009146:	6839      	ldr	r1, [r7, #0]
 8009148:	4798      	blx	r3
      break;
 800914a:	e04e      	b.n	80091ea <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	785b      	ldrb	r3, [r3, #1]
 8009150:	2b0b      	cmp	r3, #11
 8009152:	d02e      	beq.n	80091b2 <USBD_CDC_Setup+0x104>
 8009154:	2b0b      	cmp	r3, #11
 8009156:	dc38      	bgt.n	80091ca <USBD_CDC_Setup+0x11c>
 8009158:	2b00      	cmp	r3, #0
 800915a:	d002      	beq.n	8009162 <USBD_CDC_Setup+0xb4>
 800915c:	2b0a      	cmp	r3, #10
 800915e:	d014      	beq.n	800918a <USBD_CDC_Setup+0xdc>
 8009160:	e033      	b.n	80091ca <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009168:	2b03      	cmp	r3, #3
 800916a:	d107      	bne.n	800917c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800916c:	f107 030c 	add.w	r3, r7, #12
 8009170:	2202      	movs	r2, #2
 8009172:	4619      	mov	r1, r3
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f001 f9d4 	bl	800a522 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800917a:	e02e      	b.n	80091da <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800917c:	6839      	ldr	r1, [r7, #0]
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f001 f965 	bl	800a44e <USBD_CtlError>
            ret = USBD_FAIL;
 8009184:	2302      	movs	r3, #2
 8009186:	75fb      	strb	r3, [r7, #23]
          break;
 8009188:	e027      	b.n	80091da <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009190:	2b03      	cmp	r3, #3
 8009192:	d107      	bne.n	80091a4 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009194:	f107 030f 	add.w	r3, r7, #15
 8009198:	2201      	movs	r2, #1
 800919a:	4619      	mov	r1, r3
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f001 f9c0 	bl	800a522 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80091a2:	e01a      	b.n	80091da <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80091a4:	6839      	ldr	r1, [r7, #0]
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f001 f951 	bl	800a44e <USBD_CtlError>
            ret = USBD_FAIL;
 80091ac:	2302      	movs	r3, #2
 80091ae:	75fb      	strb	r3, [r7, #23]
          break;
 80091b0:	e013      	b.n	80091da <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091b8:	2b03      	cmp	r3, #3
 80091ba:	d00d      	beq.n	80091d8 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80091bc:	6839      	ldr	r1, [r7, #0]
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f001 f945 	bl	800a44e <USBD_CtlError>
            ret = USBD_FAIL;
 80091c4:	2302      	movs	r3, #2
 80091c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80091c8:	e006      	b.n	80091d8 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80091ca:	6839      	ldr	r1, [r7, #0]
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f001 f93e 	bl	800a44e <USBD_CtlError>
          ret = USBD_FAIL;
 80091d2:	2302      	movs	r3, #2
 80091d4:	75fb      	strb	r3, [r7, #23]
          break;
 80091d6:	e000      	b.n	80091da <USBD_CDC_Setup+0x12c>
          break;
 80091d8:	bf00      	nop
      }
      break;
 80091da:	e006      	b.n	80091ea <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80091dc:	6839      	ldr	r1, [r7, #0]
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f001 f935 	bl	800a44e <USBD_CtlError>
      ret = USBD_FAIL;
 80091e4:	2302      	movs	r3, #2
 80091e6:	75fb      	strb	r3, [r7, #23]
      break;
 80091e8:	bf00      	nop
  }

  return ret;
 80091ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3718      	adds	r7, #24
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	460b      	mov	r3, r1
 80091fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009206:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800920e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009216:	2b00      	cmp	r3, #0
 8009218:	d03a      	beq.n	8009290 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800921a:	78fa      	ldrb	r2, [r7, #3]
 800921c:	6879      	ldr	r1, [r7, #4]
 800921e:	4613      	mov	r3, r2
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	4413      	add	r3, r2
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	440b      	add	r3, r1
 8009228:	331c      	adds	r3, #28
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d029      	beq.n	8009284 <USBD_CDC_DataIn+0x90>
 8009230:	78fa      	ldrb	r2, [r7, #3]
 8009232:	6879      	ldr	r1, [r7, #4]
 8009234:	4613      	mov	r3, r2
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	4413      	add	r3, r2
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	440b      	add	r3, r1
 800923e:	331c      	adds	r3, #28
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	78f9      	ldrb	r1, [r7, #3]
 8009244:	68b8      	ldr	r0, [r7, #8]
 8009246:	460b      	mov	r3, r1
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	440b      	add	r3, r1
 800924c:	00db      	lsls	r3, r3, #3
 800924e:	4403      	add	r3, r0
 8009250:	3338      	adds	r3, #56	; 0x38
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	fbb2 f1f3 	udiv	r1, r2, r3
 8009258:	fb01 f303 	mul.w	r3, r1, r3
 800925c:	1ad3      	subs	r3, r2, r3
 800925e:	2b00      	cmp	r3, #0
 8009260:	d110      	bne.n	8009284 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009262:	78fa      	ldrb	r2, [r7, #3]
 8009264:	6879      	ldr	r1, [r7, #4]
 8009266:	4613      	mov	r3, r2
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	4413      	add	r3, r2
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	440b      	add	r3, r1
 8009270:	331c      	adds	r3, #28
 8009272:	2200      	movs	r2, #0
 8009274:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009276:	78f9      	ldrb	r1, [r7, #3]
 8009278:	2300      	movs	r3, #0
 800927a:	2200      	movs	r2, #0
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f001 fdec 	bl	800ae5a <USBD_LL_Transmit>
 8009282:	e003      	b.n	800928c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2200      	movs	r2, #0
 8009288:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800928c:	2300      	movs	r3, #0
 800928e:	e000      	b.n	8009292 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009290:	2302      	movs	r3, #2
  }
}
 8009292:	4618      	mov	r0, r3
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b084      	sub	sp, #16
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
 80092a2:	460b      	mov	r3, r1
 80092a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092ac:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80092ae:	78fb      	ldrb	r3, [r7, #3]
 80092b0:	4619      	mov	r1, r3
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f001 fe17 	bl	800aee6 <USBD_LL_GetRxDataSize>
 80092b8:	4602      	mov	r2, r0
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00d      	beq.n	80092e6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	68fa      	ldr	r2, [r7, #12]
 80092d4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80092d8:	68fa      	ldr	r2, [r7, #12]
 80092da:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80092de:	4611      	mov	r1, r2
 80092e0:	4798      	blx	r3

    return USBD_OK;
 80092e2:	2300      	movs	r3, #0
 80092e4:	e000      	b.n	80092e8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80092e6:	2302      	movs	r3, #2
  }
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092fe:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009306:	2b00      	cmp	r3, #0
 8009308:	d015      	beq.n	8009336 <USBD_CDC_EP0_RxReady+0x46>
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009310:	2bff      	cmp	r3, #255	; 0xff
 8009312:	d010      	beq.n	8009336 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009322:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009324:	68fa      	ldr	r2, [r7, #12]
 8009326:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800932a:	b292      	uxth	r2, r2
 800932c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	22ff      	movs	r2, #255	; 0xff
 8009332:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009336:	2300      	movs	r3, #0
}
 8009338:	4618      	mov	r0, r3
 800933a:	3710      	adds	r7, #16
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2243      	movs	r2, #67	; 0x43
 800934c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800934e:	4b03      	ldr	r3, [pc, #12]	; (800935c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009350:	4618      	mov	r0, r3
 8009352:	370c      	adds	r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	bc80      	pop	{r7}
 8009358:	4770      	bx	lr
 800935a:	bf00      	nop
 800935c:	20000098 	.word	0x20000098

08009360 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009360:	b480      	push	{r7}
 8009362:	b083      	sub	sp, #12
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2243      	movs	r2, #67	; 0x43
 800936c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800936e:	4b03      	ldr	r3, [pc, #12]	; (800937c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009370:	4618      	mov	r0, r3
 8009372:	370c      	adds	r7, #12
 8009374:	46bd      	mov	sp, r7
 8009376:	bc80      	pop	{r7}
 8009378:	4770      	bx	lr
 800937a:	bf00      	nop
 800937c:	20000054 	.word	0x20000054

08009380 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2243      	movs	r2, #67	; 0x43
 800938c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800938e:	4b03      	ldr	r3, [pc, #12]	; (800939c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009390:	4618      	mov	r0, r3
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	bc80      	pop	{r7}
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	200000dc 	.word	0x200000dc

080093a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	220a      	movs	r2, #10
 80093ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80093ae:	4b03      	ldr	r3, [pc, #12]	; (80093bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	370c      	adds	r7, #12
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bc80      	pop	{r7}
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop
 80093bc:	20000010 	.word	0x20000010

080093c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b085      	sub	sp, #20
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80093ca:	2302      	movs	r3, #2
 80093cc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d005      	beq.n	80093e0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	683a      	ldr	r2, [r7, #0]
 80093d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80093dc:	2300      	movs	r3, #0
 80093de:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80093e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3714      	adds	r7, #20
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bc80      	pop	{r7}
 80093ea:	4770      	bx	lr

080093ec <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b087      	sub	sp, #28
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	60b9      	str	r1, [r7, #8]
 80093f6:	4613      	mov	r3, r2
 80093f8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009400:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	68ba      	ldr	r2, [r7, #8]
 8009406:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800940a:	88fa      	ldrh	r2, [r7, #6]
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009412:	2300      	movs	r3, #0
}
 8009414:	4618      	mov	r0, r3
 8009416:	371c      	adds	r7, #28
 8009418:	46bd      	mov	sp, r7
 800941a:	bc80      	pop	{r7}
 800941c:	4770      	bx	lr

0800941e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800941e:	b480      	push	{r7}
 8009420:	b085      	sub	sp, #20
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
 8009426:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800942e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	683a      	ldr	r2, [r7, #0]
 8009434:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009438:	2300      	movs	r3, #0
}
 800943a:	4618      	mov	r0, r3
 800943c:	3714      	adds	r7, #20
 800943e:	46bd      	mov	sp, r7
 8009440:	bc80      	pop	{r7}
 8009442:	4770      	bx	lr

08009444 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009452:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800945a:	2b00      	cmp	r3, #0
 800945c:	d01c      	beq.n	8009498 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009464:	2b00      	cmp	r3, #0
 8009466:	d115      	bne.n	8009494 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2201      	movs	r2, #1
 800946c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009486:	b29b      	uxth	r3, r3
 8009488:	2181      	movs	r1, #129	; 0x81
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f001 fce5 	bl	800ae5a <USBD_LL_Transmit>

      return USBD_OK;
 8009490:	2300      	movs	r3, #0
 8009492:	e002      	b.n	800949a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009494:	2301      	movs	r3, #1
 8009496:	e000      	b.n	800949a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009498:	2302      	movs	r3, #2
  }
}
 800949a:	4618      	mov	r0, r3
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}

080094a2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80094a2:	b580      	push	{r7, lr}
 80094a4:	b084      	sub	sp, #16
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094b0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d017      	beq.n	80094ec <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	7c1b      	ldrb	r3, [r3, #16]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d109      	bne.n	80094d8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80094ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094ce:	2101      	movs	r1, #1
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f001 fce5 	bl	800aea0 <USBD_LL_PrepareReceive>
 80094d6:	e007      	b.n	80094e8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80094de:	2340      	movs	r3, #64	; 0x40
 80094e0:	2101      	movs	r1, #1
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f001 fcdc 	bl	800aea0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80094e8:	2300      	movs	r3, #0
 80094ea:	e000      	b.n	80094ee <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80094ec:	2302      	movs	r3, #2
  }
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3710      	adds	r7, #16
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b084      	sub	sp, #16
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	60f8      	str	r0, [r7, #12]
 80094fe:	60b9      	str	r1, [r7, #8]
 8009500:	4613      	mov	r3, r2
 8009502:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d101      	bne.n	800950e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800950a:	2302      	movs	r3, #2
 800950c:	e01a      	b.n	8009544 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009514:	2b00      	cmp	r3, #0
 8009516:	d003      	beq.n	8009520 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2200      	movs	r2, #0
 800951c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d003      	beq.n	800952e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	68ba      	ldr	r2, [r7, #8]
 800952a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2201      	movs	r2, #1
 8009532:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	79fa      	ldrb	r2, [r7, #7]
 800953a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800953c:	68f8      	ldr	r0, [r7, #12]
 800953e:	f001 fb49 	bl	800abd4 <USBD_LL_Init>

  return USBD_OK;
 8009542:	2300      	movs	r3, #0
}
 8009544:	4618      	mov	r0, r3
 8009546:	3710      	adds	r7, #16
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800954c:	b480      	push	{r7}
 800954e:	b085      	sub	sp, #20
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009556:	2300      	movs	r3, #0
 8009558:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d006      	beq.n	800956e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	683a      	ldr	r2, [r7, #0]
 8009564:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009568:	2300      	movs	r3, #0
 800956a:	73fb      	strb	r3, [r7, #15]
 800956c:	e001      	b.n	8009572 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800956e:	2302      	movs	r3, #2
 8009570:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009572:	7bfb      	ldrb	r3, [r7, #15]
}
 8009574:	4618      	mov	r0, r3
 8009576:	3714      	adds	r7, #20
 8009578:	46bd      	mov	sp, r7
 800957a:	bc80      	pop	{r7}
 800957c:	4770      	bx	lr

0800957e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800957e:	b580      	push	{r7, lr}
 8009580:	b082      	sub	sp, #8
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f001 fb7e 	bl	800ac88 <USBD_LL_Start>

  return USBD_OK;
 800958c:	2300      	movs	r3, #0
}
 800958e:	4618      	mov	r0, r3
 8009590:	3708      	adds	r7, #8
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009596:	b480      	push	{r7}
 8009598:	b083      	sub	sp, #12
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800959e:	2300      	movs	r3, #0
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bc80      	pop	{r7}
 80095a8:	4770      	bx	lr

080095aa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b084      	sub	sp, #16
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
 80095b2:	460b      	mov	r3, r1
 80095b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80095b6:	2302      	movs	r3, #2
 80095b8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d00c      	beq.n	80095de <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	78fa      	ldrb	r2, [r7, #3]
 80095ce:	4611      	mov	r1, r2
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	4798      	blx	r3
 80095d4:	4603      	mov	r3, r0
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d101      	bne.n	80095de <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80095da:	2300      	movs	r3, #0
 80095dc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80095de:	7bfb      	ldrb	r3, [r7, #15]
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3710      	adds	r7, #16
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	460b      	mov	r3, r1
 80095f2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	78fa      	ldrb	r2, [r7, #3]
 80095fe:	4611      	mov	r1, r2
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	4798      	blx	r3

  return USBD_OK;
 8009604:	2300      	movs	r3, #0
}
 8009606:	4618      	mov	r0, r3
 8009608:	3708      	adds	r7, #8
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}

0800960e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800960e:	b580      	push	{r7, lr}
 8009610:	b082      	sub	sp, #8
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
 8009616:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800961e:	6839      	ldr	r1, [r7, #0]
 8009620:	4618      	mov	r0, r3
 8009622:	f000 fed8 	bl	800a3d6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2201      	movs	r2, #1
 800962a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009634:	461a      	mov	r2, r3
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009642:	f003 031f 	and.w	r3, r3, #31
 8009646:	2b02      	cmp	r3, #2
 8009648:	d016      	beq.n	8009678 <USBD_LL_SetupStage+0x6a>
 800964a:	2b02      	cmp	r3, #2
 800964c:	d81c      	bhi.n	8009688 <USBD_LL_SetupStage+0x7a>
 800964e:	2b00      	cmp	r3, #0
 8009650:	d002      	beq.n	8009658 <USBD_LL_SetupStage+0x4a>
 8009652:	2b01      	cmp	r3, #1
 8009654:	d008      	beq.n	8009668 <USBD_LL_SetupStage+0x5a>
 8009656:	e017      	b.n	8009688 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800965e:	4619      	mov	r1, r3
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 f9cb 	bl	80099fc <USBD_StdDevReq>
      break;
 8009666:	e01a      	b.n	800969e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800966e:	4619      	mov	r1, r3
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 fa2d 	bl	8009ad0 <USBD_StdItfReq>
      break;
 8009676:	e012      	b.n	800969e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800967e:	4619      	mov	r1, r3
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f000 fa6d 	bl	8009b60 <USBD_StdEPReq>
      break;
 8009686:	e00a      	b.n	800969e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800968e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009692:	b2db      	uxtb	r3, r3
 8009694:	4619      	mov	r1, r3
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f001 fb56 	bl	800ad48 <USBD_LL_StallEP>
      break;
 800969c:	bf00      	nop
  }

  return USBD_OK;
 800969e:	2300      	movs	r3, #0
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3708      	adds	r7, #8
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b086      	sub	sp, #24
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	460b      	mov	r3, r1
 80096b2:	607a      	str	r2, [r7, #4]
 80096b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80096b6:	7afb      	ldrb	r3, [r7, #11]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d14b      	bne.n	8009754 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80096c2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80096ca:	2b03      	cmp	r3, #3
 80096cc:	d134      	bne.n	8009738 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	68da      	ldr	r2, [r3, #12]
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	691b      	ldr	r3, [r3, #16]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d919      	bls.n	800970e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	68da      	ldr	r2, [r3, #12]
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	691b      	ldr	r3, [r3, #16]
 80096e2:	1ad2      	subs	r2, r2, r3
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	68da      	ldr	r2, [r3, #12]
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d203      	bcs.n	80096fc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	e002      	b.n	8009702 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009700:	b29b      	uxth	r3, r3
 8009702:	461a      	mov	r2, r3
 8009704:	6879      	ldr	r1, [r7, #4]
 8009706:	68f8      	ldr	r0, [r7, #12]
 8009708:	f000 ff57 	bl	800a5ba <USBD_CtlContinueRx>
 800970c:	e038      	b.n	8009780 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009714:	691b      	ldr	r3, [r3, #16]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d00a      	beq.n	8009730 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009720:	2b03      	cmp	r3, #3
 8009722:	d105      	bne.n	8009730 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800972a:	691b      	ldr	r3, [r3, #16]
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009730:	68f8      	ldr	r0, [r7, #12]
 8009732:	f000 ff54 	bl	800a5de <USBD_CtlSendStatus>
 8009736:	e023      	b.n	8009780 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800973e:	2b05      	cmp	r3, #5
 8009740:	d11e      	bne.n	8009780 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2200      	movs	r2, #0
 8009746:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800974a:	2100      	movs	r1, #0
 800974c:	68f8      	ldr	r0, [r7, #12]
 800974e:	f001 fafb 	bl	800ad48 <USBD_LL_StallEP>
 8009752:	e015      	b.n	8009780 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800975a:	699b      	ldr	r3, [r3, #24]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d00d      	beq.n	800977c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009766:	2b03      	cmp	r3, #3
 8009768:	d108      	bne.n	800977c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009770:	699b      	ldr	r3, [r3, #24]
 8009772:	7afa      	ldrb	r2, [r7, #11]
 8009774:	4611      	mov	r1, r2
 8009776:	68f8      	ldr	r0, [r7, #12]
 8009778:	4798      	blx	r3
 800977a:	e001      	b.n	8009780 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800977c:	2302      	movs	r3, #2
 800977e:	e000      	b.n	8009782 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3718      	adds	r7, #24
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b086      	sub	sp, #24
 800978e:	af00      	add	r7, sp, #0
 8009790:	60f8      	str	r0, [r7, #12]
 8009792:	460b      	mov	r3, r1
 8009794:	607a      	str	r2, [r7, #4]
 8009796:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009798:	7afb      	ldrb	r3, [r7, #11]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d17f      	bne.n	800989e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	3314      	adds	r3, #20
 80097a2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	d15c      	bne.n	8009868 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	68da      	ldr	r2, [r3, #12]
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	691b      	ldr	r3, [r3, #16]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d915      	bls.n	80097e6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	68da      	ldr	r2, [r3, #12]
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	1ad2      	subs	r2, r2, r3
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	461a      	mov	r2, r3
 80097d0:	6879      	ldr	r1, [r7, #4]
 80097d2:	68f8      	ldr	r0, [r7, #12]
 80097d4:	f000 fec1 	bl	800a55a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80097d8:	2300      	movs	r3, #0
 80097da:	2200      	movs	r2, #0
 80097dc:	2100      	movs	r1, #0
 80097de:	68f8      	ldr	r0, [r7, #12]
 80097e0:	f001 fb5e 	bl	800aea0 <USBD_LL_PrepareReceive>
 80097e4:	e04e      	b.n	8009884 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	697a      	ldr	r2, [r7, #20]
 80097ec:	6912      	ldr	r2, [r2, #16]
 80097ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80097f2:	fb01 f202 	mul.w	r2, r1, r2
 80097f6:	1a9b      	subs	r3, r3, r2
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d11c      	bne.n	8009836 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	689a      	ldr	r2, [r3, #8]
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009804:	429a      	cmp	r2, r3
 8009806:	d316      	bcc.n	8009836 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	689a      	ldr	r2, [r3, #8]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009812:	429a      	cmp	r2, r3
 8009814:	d20f      	bcs.n	8009836 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009816:	2200      	movs	r2, #0
 8009818:	2100      	movs	r1, #0
 800981a:	68f8      	ldr	r0, [r7, #12]
 800981c:	f000 fe9d 	bl	800a55a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2200      	movs	r2, #0
 8009824:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009828:	2300      	movs	r3, #0
 800982a:	2200      	movs	r2, #0
 800982c:	2100      	movs	r1, #0
 800982e:	68f8      	ldr	r0, [r7, #12]
 8009830:	f001 fb36 	bl	800aea0 <USBD_LL_PrepareReceive>
 8009834:	e026      	b.n	8009884 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d00a      	beq.n	8009858 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009848:	2b03      	cmp	r3, #3
 800984a:	d105      	bne.n	8009858 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	68f8      	ldr	r0, [r7, #12]
 8009856:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009858:	2180      	movs	r1, #128	; 0x80
 800985a:	68f8      	ldr	r0, [r7, #12]
 800985c:	f001 fa74 	bl	800ad48 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009860:	68f8      	ldr	r0, [r7, #12]
 8009862:	f000 fecf 	bl	800a604 <USBD_CtlReceiveStatus>
 8009866:	e00d      	b.n	8009884 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800986e:	2b04      	cmp	r3, #4
 8009870:	d004      	beq.n	800987c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009878:	2b00      	cmp	r3, #0
 800987a:	d103      	bne.n	8009884 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800987c:	2180      	movs	r1, #128	; 0x80
 800987e:	68f8      	ldr	r0, [r7, #12]
 8009880:	f001 fa62 	bl	800ad48 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800988a:	2b01      	cmp	r3, #1
 800988c:	d11d      	bne.n	80098ca <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800988e:	68f8      	ldr	r0, [r7, #12]
 8009890:	f7ff fe81 	bl	8009596 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2200      	movs	r2, #0
 8009898:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800989c:	e015      	b.n	80098ca <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098a4:	695b      	ldr	r3, [r3, #20]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d00d      	beq.n	80098c6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80098b0:	2b03      	cmp	r3, #3
 80098b2:	d108      	bne.n	80098c6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098ba:	695b      	ldr	r3, [r3, #20]
 80098bc:	7afa      	ldrb	r2, [r7, #11]
 80098be:	4611      	mov	r1, r2
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	4798      	blx	r3
 80098c4:	e001      	b.n	80098ca <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80098c6:	2302      	movs	r3, #2
 80098c8:	e000      	b.n	80098cc <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80098ca:	2300      	movs	r3, #0
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3718      	adds	r7, #24
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80098dc:	2340      	movs	r3, #64	; 0x40
 80098de:	2200      	movs	r2, #0
 80098e0:	2100      	movs	r1, #0
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f001 f9eb 	bl	800acbe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2201      	movs	r2, #1
 80098ec:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2240      	movs	r2, #64	; 0x40
 80098f4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80098f8:	2340      	movs	r3, #64	; 0x40
 80098fa:	2200      	movs	r2, #0
 80098fc:	2180      	movs	r1, #128	; 0x80
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f001 f9dd 	bl	800acbe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2201      	movs	r2, #1
 8009908:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2240      	movs	r2, #64	; 0x40
 800990e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2201      	movs	r2, #1
 8009914:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2200      	movs	r2, #0
 800991c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2200      	movs	r2, #0
 800992a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009934:	2b00      	cmp	r3, #0
 8009936:	d009      	beq.n	800994c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	6852      	ldr	r2, [r2, #4]
 8009944:	b2d2      	uxtb	r2, r2
 8009946:	4611      	mov	r1, r2
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	4798      	blx	r3
  }

  return USBD_OK;
 800994c:	2300      	movs	r3, #0
}
 800994e:	4618      	mov	r0, r3
 8009950:	3708      	adds	r7, #8
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009956:	b480      	push	{r7}
 8009958:	b083      	sub	sp, #12
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
 800995e:	460b      	mov	r3, r1
 8009960:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	78fa      	ldrb	r2, [r7, #3]
 8009966:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	370c      	adds	r7, #12
 800996e:	46bd      	mov	sp, r7
 8009970:	bc80      	pop	{r7}
 8009972:	4770      	bx	lr

08009974 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2204      	movs	r2, #4
 800998c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	370c      	adds	r7, #12
 8009996:	46bd      	mov	sp, r7
 8009998:	bc80      	pop	{r7}
 800999a:	4770      	bx	lr

0800999c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099aa:	2b04      	cmp	r3, #4
 80099ac:	d105      	bne.n	80099ba <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bc80      	pop	{r7}
 80099c4:	4770      	bx	lr

080099c6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80099c6:	b580      	push	{r7, lr}
 80099c8:	b082      	sub	sp, #8
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099d4:	2b03      	cmp	r3, #3
 80099d6:	d10b      	bne.n	80099f0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099de:	69db      	ldr	r3, [r3, #28]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d005      	beq.n	80099f0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ea:	69db      	ldr	r3, [r3, #28]
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3708      	adds	r7, #8
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
	...

080099fc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a06:	2300      	movs	r3, #0
 8009a08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a12:	2b40      	cmp	r3, #64	; 0x40
 8009a14:	d005      	beq.n	8009a22 <USBD_StdDevReq+0x26>
 8009a16:	2b40      	cmp	r3, #64	; 0x40
 8009a18:	d84f      	bhi.n	8009aba <USBD_StdDevReq+0xbe>
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d009      	beq.n	8009a32 <USBD_StdDevReq+0x36>
 8009a1e:	2b20      	cmp	r3, #32
 8009a20:	d14b      	bne.n	8009aba <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a28:	689b      	ldr	r3, [r3, #8]
 8009a2a:	6839      	ldr	r1, [r7, #0]
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	4798      	blx	r3
      break;
 8009a30:	e048      	b.n	8009ac4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	785b      	ldrb	r3, [r3, #1]
 8009a36:	2b09      	cmp	r3, #9
 8009a38:	d839      	bhi.n	8009aae <USBD_StdDevReq+0xb2>
 8009a3a:	a201      	add	r2, pc, #4	; (adr r2, 8009a40 <USBD_StdDevReq+0x44>)
 8009a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a40:	08009a91 	.word	0x08009a91
 8009a44:	08009aa5 	.word	0x08009aa5
 8009a48:	08009aaf 	.word	0x08009aaf
 8009a4c:	08009a9b 	.word	0x08009a9b
 8009a50:	08009aaf 	.word	0x08009aaf
 8009a54:	08009a73 	.word	0x08009a73
 8009a58:	08009a69 	.word	0x08009a69
 8009a5c:	08009aaf 	.word	0x08009aaf
 8009a60:	08009a87 	.word	0x08009a87
 8009a64:	08009a7d 	.word	0x08009a7d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009a68:	6839      	ldr	r1, [r7, #0]
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 f9dc 	bl	8009e28 <USBD_GetDescriptor>
          break;
 8009a70:	e022      	b.n	8009ab8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009a72:	6839      	ldr	r1, [r7, #0]
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 fb3f 	bl	800a0f8 <USBD_SetAddress>
          break;
 8009a7a:	e01d      	b.n	8009ab8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009a7c:	6839      	ldr	r1, [r7, #0]
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 fb7e 	bl	800a180 <USBD_SetConfig>
          break;
 8009a84:	e018      	b.n	8009ab8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009a86:	6839      	ldr	r1, [r7, #0]
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 fc07 	bl	800a29c <USBD_GetConfig>
          break;
 8009a8e:	e013      	b.n	8009ab8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009a90:	6839      	ldr	r1, [r7, #0]
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 fc37 	bl	800a306 <USBD_GetStatus>
          break;
 8009a98:	e00e      	b.n	8009ab8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009a9a:	6839      	ldr	r1, [r7, #0]
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 fc65 	bl	800a36c <USBD_SetFeature>
          break;
 8009aa2:	e009      	b.n	8009ab8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009aa4:	6839      	ldr	r1, [r7, #0]
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 fc74 	bl	800a394 <USBD_ClrFeature>
          break;
 8009aac:	e004      	b.n	8009ab8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009aae:	6839      	ldr	r1, [r7, #0]
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 fccc 	bl	800a44e <USBD_CtlError>
          break;
 8009ab6:	bf00      	nop
      }
      break;
 8009ab8:	e004      	b.n	8009ac4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009aba:	6839      	ldr	r1, [r7, #0]
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 fcc6 	bl	800a44e <USBD_CtlError>
      break;
 8009ac2:	bf00      	nop
  }

  return ret;
 8009ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop

08009ad0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ada:	2300      	movs	r3, #0
 8009adc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ae6:	2b40      	cmp	r3, #64	; 0x40
 8009ae8:	d005      	beq.n	8009af6 <USBD_StdItfReq+0x26>
 8009aea:	2b40      	cmp	r3, #64	; 0x40
 8009aec:	d82e      	bhi.n	8009b4c <USBD_StdItfReq+0x7c>
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d001      	beq.n	8009af6 <USBD_StdItfReq+0x26>
 8009af2:	2b20      	cmp	r3, #32
 8009af4:	d12a      	bne.n	8009b4c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009afc:	3b01      	subs	r3, #1
 8009afe:	2b02      	cmp	r3, #2
 8009b00:	d81d      	bhi.n	8009b3e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	889b      	ldrh	r3, [r3, #4]
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d813      	bhi.n	8009b34 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b12:	689b      	ldr	r3, [r3, #8]
 8009b14:	6839      	ldr	r1, [r7, #0]
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	4798      	blx	r3
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	88db      	ldrh	r3, [r3, #6]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d110      	bne.n	8009b48 <USBD_StdItfReq+0x78>
 8009b26:	7bfb      	ldrb	r3, [r7, #15]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d10d      	bne.n	8009b48 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 fd56 	bl	800a5de <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009b32:	e009      	b.n	8009b48 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009b34:	6839      	ldr	r1, [r7, #0]
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 fc89 	bl	800a44e <USBD_CtlError>
          break;
 8009b3c:	e004      	b.n	8009b48 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009b3e:	6839      	ldr	r1, [r7, #0]
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 fc84 	bl	800a44e <USBD_CtlError>
          break;
 8009b46:	e000      	b.n	8009b4a <USBD_StdItfReq+0x7a>
          break;
 8009b48:	bf00      	nop
      }
      break;
 8009b4a:	e004      	b.n	8009b56 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009b4c:	6839      	ldr	r1, [r7, #0]
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 fc7d 	bl	800a44e <USBD_CtlError>
      break;
 8009b54:	bf00      	nop
  }

  return USBD_OK;
 8009b56:	2300      	movs	r3, #0
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3710      	adds	r7, #16
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	889b      	ldrh	r3, [r3, #4]
 8009b72:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b7c:	2b40      	cmp	r3, #64	; 0x40
 8009b7e:	d007      	beq.n	8009b90 <USBD_StdEPReq+0x30>
 8009b80:	2b40      	cmp	r3, #64	; 0x40
 8009b82:	f200 8146 	bhi.w	8009e12 <USBD_StdEPReq+0x2b2>
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d00a      	beq.n	8009ba0 <USBD_StdEPReq+0x40>
 8009b8a:	2b20      	cmp	r3, #32
 8009b8c:	f040 8141 	bne.w	8009e12 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	6839      	ldr	r1, [r7, #0]
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	4798      	blx	r3
      break;
 8009b9e:	e13d      	b.n	8009e1c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ba8:	2b20      	cmp	r3, #32
 8009baa:	d10a      	bne.n	8009bc2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	6839      	ldr	r1, [r7, #0]
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	4798      	blx	r3
 8009bba:	4603      	mov	r3, r0
 8009bbc:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009bbe:	7bfb      	ldrb	r3, [r7, #15]
 8009bc0:	e12d      	b.n	8009e1e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	785b      	ldrb	r3, [r3, #1]
 8009bc6:	2b03      	cmp	r3, #3
 8009bc8:	d007      	beq.n	8009bda <USBD_StdEPReq+0x7a>
 8009bca:	2b03      	cmp	r3, #3
 8009bcc:	f300 811b 	bgt.w	8009e06 <USBD_StdEPReq+0x2a6>
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d072      	beq.n	8009cba <USBD_StdEPReq+0x15a>
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d03a      	beq.n	8009c4e <USBD_StdEPReq+0xee>
 8009bd8:	e115      	b.n	8009e06 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009be0:	2b02      	cmp	r3, #2
 8009be2:	d002      	beq.n	8009bea <USBD_StdEPReq+0x8a>
 8009be4:	2b03      	cmp	r3, #3
 8009be6:	d015      	beq.n	8009c14 <USBD_StdEPReq+0xb4>
 8009be8:	e02b      	b.n	8009c42 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009bea:	7bbb      	ldrb	r3, [r7, #14]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d00c      	beq.n	8009c0a <USBD_StdEPReq+0xaa>
 8009bf0:	7bbb      	ldrb	r3, [r7, #14]
 8009bf2:	2b80      	cmp	r3, #128	; 0x80
 8009bf4:	d009      	beq.n	8009c0a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009bf6:	7bbb      	ldrb	r3, [r7, #14]
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f001 f8a4 	bl	800ad48 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009c00:	2180      	movs	r1, #128	; 0x80
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f001 f8a0 	bl	800ad48 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c08:	e020      	b.n	8009c4c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009c0a:	6839      	ldr	r1, [r7, #0]
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 fc1e 	bl	800a44e <USBD_CtlError>
              break;
 8009c12:	e01b      	b.n	8009c4c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	885b      	ldrh	r3, [r3, #2]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d10e      	bne.n	8009c3a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009c1c:	7bbb      	ldrb	r3, [r7, #14]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d00b      	beq.n	8009c3a <USBD_StdEPReq+0xda>
 8009c22:	7bbb      	ldrb	r3, [r7, #14]
 8009c24:	2b80      	cmp	r3, #128	; 0x80
 8009c26:	d008      	beq.n	8009c3a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	88db      	ldrh	r3, [r3, #6]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d104      	bne.n	8009c3a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009c30:	7bbb      	ldrb	r3, [r7, #14]
 8009c32:	4619      	mov	r1, r3
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f001 f887 	bl	800ad48 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 fccf 	bl	800a5de <USBD_CtlSendStatus>

              break;
 8009c40:	e004      	b.n	8009c4c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009c42:	6839      	ldr	r1, [r7, #0]
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 fc02 	bl	800a44e <USBD_CtlError>
              break;
 8009c4a:	bf00      	nop
          }
          break;
 8009c4c:	e0e0      	b.n	8009e10 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c54:	2b02      	cmp	r3, #2
 8009c56:	d002      	beq.n	8009c5e <USBD_StdEPReq+0xfe>
 8009c58:	2b03      	cmp	r3, #3
 8009c5a:	d015      	beq.n	8009c88 <USBD_StdEPReq+0x128>
 8009c5c:	e026      	b.n	8009cac <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c5e:	7bbb      	ldrb	r3, [r7, #14]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d00c      	beq.n	8009c7e <USBD_StdEPReq+0x11e>
 8009c64:	7bbb      	ldrb	r3, [r7, #14]
 8009c66:	2b80      	cmp	r3, #128	; 0x80
 8009c68:	d009      	beq.n	8009c7e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009c6a:	7bbb      	ldrb	r3, [r7, #14]
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f001 f86a 	bl	800ad48 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009c74:	2180      	movs	r1, #128	; 0x80
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f001 f866 	bl	800ad48 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c7c:	e01c      	b.n	8009cb8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009c7e:	6839      	ldr	r1, [r7, #0]
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 fbe4 	bl	800a44e <USBD_CtlError>
              break;
 8009c86:	e017      	b.n	8009cb8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	885b      	ldrh	r3, [r3, #2]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d112      	bne.n	8009cb6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009c90:	7bbb      	ldrb	r3, [r7, #14]
 8009c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d004      	beq.n	8009ca4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009c9a:	7bbb      	ldrb	r3, [r7, #14]
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f001 f871 	bl	800ad86 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f000 fc9a 	bl	800a5de <USBD_CtlSendStatus>
              }
              break;
 8009caa:	e004      	b.n	8009cb6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009cac:	6839      	ldr	r1, [r7, #0]
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 fbcd 	bl	800a44e <USBD_CtlError>
              break;
 8009cb4:	e000      	b.n	8009cb8 <USBD_StdEPReq+0x158>
              break;
 8009cb6:	bf00      	nop
          }
          break;
 8009cb8:	e0aa      	b.n	8009e10 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cc0:	2b02      	cmp	r3, #2
 8009cc2:	d002      	beq.n	8009cca <USBD_StdEPReq+0x16a>
 8009cc4:	2b03      	cmp	r3, #3
 8009cc6:	d032      	beq.n	8009d2e <USBD_StdEPReq+0x1ce>
 8009cc8:	e097      	b.n	8009dfa <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009cca:	7bbb      	ldrb	r3, [r7, #14]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d007      	beq.n	8009ce0 <USBD_StdEPReq+0x180>
 8009cd0:	7bbb      	ldrb	r3, [r7, #14]
 8009cd2:	2b80      	cmp	r3, #128	; 0x80
 8009cd4:	d004      	beq.n	8009ce0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009cd6:	6839      	ldr	r1, [r7, #0]
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 fbb8 	bl	800a44e <USBD_CtlError>
                break;
 8009cde:	e091      	b.n	8009e04 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ce0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	da0b      	bge.n	8009d00 <USBD_StdEPReq+0x1a0>
 8009ce8:	7bbb      	ldrb	r3, [r7, #14]
 8009cea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009cee:	4613      	mov	r3, r2
 8009cf0:	009b      	lsls	r3, r3, #2
 8009cf2:	4413      	add	r3, r2
 8009cf4:	009b      	lsls	r3, r3, #2
 8009cf6:	3310      	adds	r3, #16
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	4413      	add	r3, r2
 8009cfc:	3304      	adds	r3, #4
 8009cfe:	e00b      	b.n	8009d18 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009d00:	7bbb      	ldrb	r3, [r7, #14]
 8009d02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d06:	4613      	mov	r3, r2
 8009d08:	009b      	lsls	r3, r3, #2
 8009d0a:	4413      	add	r3, r2
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	4413      	add	r3, r2
 8009d16:	3304      	adds	r3, #4
 8009d18:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	2202      	movs	r2, #2
 8009d24:	4619      	mov	r1, r3
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 fbfb 	bl	800a522 <USBD_CtlSendData>
              break;
 8009d2c:	e06a      	b.n	8009e04 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009d2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	da11      	bge.n	8009d5a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009d36:	7bbb      	ldrb	r3, [r7, #14]
 8009d38:	f003 020f 	and.w	r2, r3, #15
 8009d3c:	6879      	ldr	r1, [r7, #4]
 8009d3e:	4613      	mov	r3, r2
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	4413      	add	r3, r2
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	440b      	add	r3, r1
 8009d48:	3318      	adds	r3, #24
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d117      	bne.n	8009d80 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009d50:	6839      	ldr	r1, [r7, #0]
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 fb7b 	bl	800a44e <USBD_CtlError>
                  break;
 8009d58:	e054      	b.n	8009e04 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009d5a:	7bbb      	ldrb	r3, [r7, #14]
 8009d5c:	f003 020f 	and.w	r2, r3, #15
 8009d60:	6879      	ldr	r1, [r7, #4]
 8009d62:	4613      	mov	r3, r2
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	4413      	add	r3, r2
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	440b      	add	r3, r1
 8009d6c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d104      	bne.n	8009d80 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009d76:	6839      	ldr	r1, [r7, #0]
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 fb68 	bl	800a44e <USBD_CtlError>
                  break;
 8009d7e:	e041      	b.n	8009e04 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	da0b      	bge.n	8009da0 <USBD_StdEPReq+0x240>
 8009d88:	7bbb      	ldrb	r3, [r7, #14]
 8009d8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d8e:	4613      	mov	r3, r2
 8009d90:	009b      	lsls	r3, r3, #2
 8009d92:	4413      	add	r3, r2
 8009d94:	009b      	lsls	r3, r3, #2
 8009d96:	3310      	adds	r3, #16
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	4413      	add	r3, r2
 8009d9c:	3304      	adds	r3, #4
 8009d9e:	e00b      	b.n	8009db8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009da0:	7bbb      	ldrb	r3, [r7, #14]
 8009da2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009da6:	4613      	mov	r3, r2
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	4413      	add	r3, r2
 8009dac:	009b      	lsls	r3, r3, #2
 8009dae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	4413      	add	r3, r2
 8009db6:	3304      	adds	r3, #4
 8009db8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009dba:	7bbb      	ldrb	r3, [r7, #14]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d002      	beq.n	8009dc6 <USBD_StdEPReq+0x266>
 8009dc0:	7bbb      	ldrb	r3, [r7, #14]
 8009dc2:	2b80      	cmp	r3, #128	; 0x80
 8009dc4:	d103      	bne.n	8009dce <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	601a      	str	r2, [r3, #0]
 8009dcc:	e00e      	b.n	8009dec <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009dce:	7bbb      	ldrb	r3, [r7, #14]
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 fff6 	bl	800adc4 <USBD_LL_IsStallEP>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d003      	beq.n	8009de6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	2201      	movs	r2, #1
 8009de2:	601a      	str	r2, [r3, #0]
 8009de4:	e002      	b.n	8009dec <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	2200      	movs	r2, #0
 8009dea:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	2202      	movs	r2, #2
 8009df0:	4619      	mov	r1, r3
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 fb95 	bl	800a522 <USBD_CtlSendData>
              break;
 8009df8:	e004      	b.n	8009e04 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009dfa:	6839      	ldr	r1, [r7, #0]
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 fb26 	bl	800a44e <USBD_CtlError>
              break;
 8009e02:	bf00      	nop
          }
          break;
 8009e04:	e004      	b.n	8009e10 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009e06:	6839      	ldr	r1, [r7, #0]
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f000 fb20 	bl	800a44e <USBD_CtlError>
          break;
 8009e0e:	bf00      	nop
      }
      break;
 8009e10:	e004      	b.n	8009e1c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009e12:	6839      	ldr	r1, [r7, #0]
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 fb1a 	bl	800a44e <USBD_CtlError>
      break;
 8009e1a:	bf00      	nop
  }

  return ret;
 8009e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
	...

08009e28 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009e32:	2300      	movs	r3, #0
 8009e34:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009e36:	2300      	movs	r3, #0
 8009e38:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	885b      	ldrh	r3, [r3, #2]
 8009e42:	0a1b      	lsrs	r3, r3, #8
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	3b01      	subs	r3, #1
 8009e48:	2b06      	cmp	r3, #6
 8009e4a:	f200 8128 	bhi.w	800a09e <USBD_GetDescriptor+0x276>
 8009e4e:	a201      	add	r2, pc, #4	; (adr r2, 8009e54 <USBD_GetDescriptor+0x2c>)
 8009e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e54:	08009e71 	.word	0x08009e71
 8009e58:	08009e89 	.word	0x08009e89
 8009e5c:	08009ec9 	.word	0x08009ec9
 8009e60:	0800a09f 	.word	0x0800a09f
 8009e64:	0800a09f 	.word	0x0800a09f
 8009e68:	0800a03f 	.word	0x0800a03f
 8009e6c:	0800a06b 	.word	0x0800a06b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	7c12      	ldrb	r2, [r2, #16]
 8009e7c:	f107 0108 	add.w	r1, r7, #8
 8009e80:	4610      	mov	r0, r2
 8009e82:	4798      	blx	r3
 8009e84:	60f8      	str	r0, [r7, #12]
      break;
 8009e86:	e112      	b.n	800a0ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	7c1b      	ldrb	r3, [r3, #16]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d10d      	bne.n	8009eac <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e98:	f107 0208 	add.w	r2, r7, #8
 8009e9c:	4610      	mov	r0, r2
 8009e9e:	4798      	blx	r3
 8009ea0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	2202      	movs	r2, #2
 8009ea8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009eaa:	e100      	b.n	800a0ae <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb4:	f107 0208 	add.w	r2, r7, #8
 8009eb8:	4610      	mov	r0, r2
 8009eba:	4798      	blx	r3
 8009ebc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	2202      	movs	r2, #2
 8009ec4:	701a      	strb	r2, [r3, #0]
      break;
 8009ec6:	e0f2      	b.n	800a0ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	885b      	ldrh	r3, [r3, #2]
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	2b05      	cmp	r3, #5
 8009ed0:	f200 80ac 	bhi.w	800a02c <USBD_GetDescriptor+0x204>
 8009ed4:	a201      	add	r2, pc, #4	; (adr r2, 8009edc <USBD_GetDescriptor+0xb4>)
 8009ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eda:	bf00      	nop
 8009edc:	08009ef5 	.word	0x08009ef5
 8009ee0:	08009f29 	.word	0x08009f29
 8009ee4:	08009f5d 	.word	0x08009f5d
 8009ee8:	08009f91 	.word	0x08009f91
 8009eec:	08009fc5 	.word	0x08009fc5
 8009ef0:	08009ff9 	.word	0x08009ff9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d00b      	beq.n	8009f18 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	7c12      	ldrb	r2, [r2, #16]
 8009f0c:	f107 0108 	add.w	r1, r7, #8
 8009f10:	4610      	mov	r0, r2
 8009f12:	4798      	blx	r3
 8009f14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f16:	e091      	b.n	800a03c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f18:	6839      	ldr	r1, [r7, #0]
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 fa97 	bl	800a44e <USBD_CtlError>
            err++;
 8009f20:	7afb      	ldrb	r3, [r7, #11]
 8009f22:	3301      	adds	r3, #1
 8009f24:	72fb      	strb	r3, [r7, #11]
          break;
 8009f26:	e089      	b.n	800a03c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00b      	beq.n	8009f4c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f3a:	689b      	ldr	r3, [r3, #8]
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	7c12      	ldrb	r2, [r2, #16]
 8009f40:	f107 0108 	add.w	r1, r7, #8
 8009f44:	4610      	mov	r0, r2
 8009f46:	4798      	blx	r3
 8009f48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f4a:	e077      	b.n	800a03c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f4c:	6839      	ldr	r1, [r7, #0]
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 fa7d 	bl	800a44e <USBD_CtlError>
            err++;
 8009f54:	7afb      	ldrb	r3, [r7, #11]
 8009f56:	3301      	adds	r3, #1
 8009f58:	72fb      	strb	r3, [r7, #11]
          break;
 8009f5a:	e06f      	b.n	800a03c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f62:	68db      	ldr	r3, [r3, #12]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d00b      	beq.n	8009f80 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f6e:	68db      	ldr	r3, [r3, #12]
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	7c12      	ldrb	r2, [r2, #16]
 8009f74:	f107 0108 	add.w	r1, r7, #8
 8009f78:	4610      	mov	r0, r2
 8009f7a:	4798      	blx	r3
 8009f7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f7e:	e05d      	b.n	800a03c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f80:	6839      	ldr	r1, [r7, #0]
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 fa63 	bl	800a44e <USBD_CtlError>
            err++;
 8009f88:	7afb      	ldrb	r3, [r7, #11]
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	72fb      	strb	r3, [r7, #11]
          break;
 8009f8e:	e055      	b.n	800a03c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f96:	691b      	ldr	r3, [r3, #16]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d00b      	beq.n	8009fb4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fa2:	691b      	ldr	r3, [r3, #16]
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	7c12      	ldrb	r2, [r2, #16]
 8009fa8:	f107 0108 	add.w	r1, r7, #8
 8009fac:	4610      	mov	r0, r2
 8009fae:	4798      	blx	r3
 8009fb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fb2:	e043      	b.n	800a03c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fb4:	6839      	ldr	r1, [r7, #0]
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 fa49 	bl	800a44e <USBD_CtlError>
            err++;
 8009fbc:	7afb      	ldrb	r3, [r7, #11]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	72fb      	strb	r3, [r7, #11]
          break;
 8009fc2:	e03b      	b.n	800a03c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fca:	695b      	ldr	r3, [r3, #20]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d00b      	beq.n	8009fe8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fd6:	695b      	ldr	r3, [r3, #20]
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	7c12      	ldrb	r2, [r2, #16]
 8009fdc:	f107 0108 	add.w	r1, r7, #8
 8009fe0:	4610      	mov	r0, r2
 8009fe2:	4798      	blx	r3
 8009fe4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fe6:	e029      	b.n	800a03c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fe8:	6839      	ldr	r1, [r7, #0]
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 fa2f 	bl	800a44e <USBD_CtlError>
            err++;
 8009ff0:	7afb      	ldrb	r3, [r7, #11]
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	72fb      	strb	r3, [r7, #11]
          break;
 8009ff6:	e021      	b.n	800a03c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ffe:	699b      	ldr	r3, [r3, #24]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d00b      	beq.n	800a01c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a00a:	699b      	ldr	r3, [r3, #24]
 800a00c:	687a      	ldr	r2, [r7, #4]
 800a00e:	7c12      	ldrb	r2, [r2, #16]
 800a010:	f107 0108 	add.w	r1, r7, #8
 800a014:	4610      	mov	r0, r2
 800a016:	4798      	blx	r3
 800a018:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a01a:	e00f      	b.n	800a03c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a01c:	6839      	ldr	r1, [r7, #0]
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 fa15 	bl	800a44e <USBD_CtlError>
            err++;
 800a024:	7afb      	ldrb	r3, [r7, #11]
 800a026:	3301      	adds	r3, #1
 800a028:	72fb      	strb	r3, [r7, #11]
          break;
 800a02a:	e007      	b.n	800a03c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a02c:	6839      	ldr	r1, [r7, #0]
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 fa0d 	bl	800a44e <USBD_CtlError>
          err++;
 800a034:	7afb      	ldrb	r3, [r7, #11]
 800a036:	3301      	adds	r3, #1
 800a038:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a03a:	e038      	b.n	800a0ae <USBD_GetDescriptor+0x286>
 800a03c:	e037      	b.n	800a0ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	7c1b      	ldrb	r3, [r3, #16]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d109      	bne.n	800a05a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a04c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a04e:	f107 0208 	add.w	r2, r7, #8
 800a052:	4610      	mov	r0, r2
 800a054:	4798      	blx	r3
 800a056:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a058:	e029      	b.n	800a0ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a05a:	6839      	ldr	r1, [r7, #0]
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 f9f6 	bl	800a44e <USBD_CtlError>
        err++;
 800a062:	7afb      	ldrb	r3, [r7, #11]
 800a064:	3301      	adds	r3, #1
 800a066:	72fb      	strb	r3, [r7, #11]
      break;
 800a068:	e021      	b.n	800a0ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	7c1b      	ldrb	r3, [r3, #16]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d10d      	bne.n	800a08e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a07a:	f107 0208 	add.w	r2, r7, #8
 800a07e:	4610      	mov	r0, r2
 800a080:	4798      	blx	r3
 800a082:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	3301      	adds	r3, #1
 800a088:	2207      	movs	r2, #7
 800a08a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a08c:	e00f      	b.n	800a0ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a08e:	6839      	ldr	r1, [r7, #0]
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 f9dc 	bl	800a44e <USBD_CtlError>
        err++;
 800a096:	7afb      	ldrb	r3, [r7, #11]
 800a098:	3301      	adds	r3, #1
 800a09a:	72fb      	strb	r3, [r7, #11]
      break;
 800a09c:	e007      	b.n	800a0ae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a09e:	6839      	ldr	r1, [r7, #0]
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 f9d4 	bl	800a44e <USBD_CtlError>
      err++;
 800a0a6:	7afb      	ldrb	r3, [r7, #11]
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	72fb      	strb	r3, [r7, #11]
      break;
 800a0ac:	bf00      	nop
  }

  if (err != 0U)
 800a0ae:	7afb      	ldrb	r3, [r7, #11]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d11c      	bne.n	800a0ee <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a0b4:	893b      	ldrh	r3, [r7, #8]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d011      	beq.n	800a0de <USBD_GetDescriptor+0x2b6>
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	88db      	ldrh	r3, [r3, #6]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d00d      	beq.n	800a0de <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	88da      	ldrh	r2, [r3, #6]
 800a0c6:	893b      	ldrh	r3, [r7, #8]
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	bf28      	it	cs
 800a0cc:	4613      	movcs	r3, r2
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a0d2:	893b      	ldrh	r3, [r7, #8]
 800a0d4:	461a      	mov	r2, r3
 800a0d6:	68f9      	ldr	r1, [r7, #12]
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 fa22 	bl	800a522 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	88db      	ldrh	r3, [r3, #6]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d104      	bne.n	800a0f0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f000 fa79 	bl	800a5de <USBD_CtlSendStatus>
 800a0ec:	e000      	b.n	800a0f0 <USBD_GetDescriptor+0x2c8>
    return;
 800a0ee:	bf00      	nop
    }
  }
}
 800a0f0:	3710      	adds	r7, #16
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop

0800a0f8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	889b      	ldrh	r3, [r3, #4]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d130      	bne.n	800a16c <USBD_SetAddress+0x74>
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	88db      	ldrh	r3, [r3, #6]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d12c      	bne.n	800a16c <USBD_SetAddress+0x74>
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	885b      	ldrh	r3, [r3, #2]
 800a116:	2b7f      	cmp	r3, #127	; 0x7f
 800a118:	d828      	bhi.n	800a16c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	885b      	ldrh	r3, [r3, #2]
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a124:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a12c:	2b03      	cmp	r3, #3
 800a12e:	d104      	bne.n	800a13a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a130:	6839      	ldr	r1, [r7, #0]
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 f98b 	bl	800a44e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a138:	e01d      	b.n	800a176 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	7bfa      	ldrb	r2, [r7, #15]
 800a13e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a142:	7bfb      	ldrb	r3, [r7, #15]
 800a144:	4619      	mov	r1, r3
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f000 fe68 	bl	800ae1c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f000 fa46 	bl	800a5de <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a152:	7bfb      	ldrb	r3, [r7, #15]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d004      	beq.n	800a162 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2202      	movs	r2, #2
 800a15c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a160:	e009      	b.n	800a176 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2201      	movs	r2, #1
 800a166:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a16a:	e004      	b.n	800a176 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a16c:	6839      	ldr	r1, [r7, #0]
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 f96d 	bl	800a44e <USBD_CtlError>
  }
}
 800a174:	bf00      	nop
 800a176:	bf00      	nop
 800a178:	3710      	adds	r7, #16
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
	...

0800a180 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b082      	sub	sp, #8
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	885b      	ldrh	r3, [r3, #2]
 800a18e:	b2da      	uxtb	r2, r3
 800a190:	4b41      	ldr	r3, [pc, #260]	; (800a298 <USBD_SetConfig+0x118>)
 800a192:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a194:	4b40      	ldr	r3, [pc, #256]	; (800a298 <USBD_SetConfig+0x118>)
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d904      	bls.n	800a1a6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a19c:	6839      	ldr	r1, [r7, #0]
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 f955 	bl	800a44e <USBD_CtlError>
 800a1a4:	e075      	b.n	800a292 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1ac:	2b02      	cmp	r3, #2
 800a1ae:	d002      	beq.n	800a1b6 <USBD_SetConfig+0x36>
 800a1b0:	2b03      	cmp	r3, #3
 800a1b2:	d023      	beq.n	800a1fc <USBD_SetConfig+0x7c>
 800a1b4:	e062      	b.n	800a27c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a1b6:	4b38      	ldr	r3, [pc, #224]	; (800a298 <USBD_SetConfig+0x118>)
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d01a      	beq.n	800a1f4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a1be:	4b36      	ldr	r3, [pc, #216]	; (800a298 <USBD_SetConfig+0x118>)
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2203      	movs	r2, #3
 800a1cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a1d0:	4b31      	ldr	r3, [pc, #196]	; (800a298 <USBD_SetConfig+0x118>)
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f7ff f9e7 	bl	80095aa <USBD_SetClassConfig>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	2b02      	cmp	r3, #2
 800a1e0:	d104      	bne.n	800a1ec <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a1e2:	6839      	ldr	r1, [r7, #0]
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f000 f932 	bl	800a44e <USBD_CtlError>
            return;
 800a1ea:	e052      	b.n	800a292 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 f9f6 	bl	800a5de <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a1f2:	e04e      	b.n	800a292 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 f9f2 	bl	800a5de <USBD_CtlSendStatus>
        break;
 800a1fa:	e04a      	b.n	800a292 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a1fc:	4b26      	ldr	r3, [pc, #152]	; (800a298 <USBD_SetConfig+0x118>)
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d112      	bne.n	800a22a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2202      	movs	r2, #2
 800a208:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a20c:	4b22      	ldr	r3, [pc, #136]	; (800a298 <USBD_SetConfig+0x118>)
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	461a      	mov	r2, r3
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a216:	4b20      	ldr	r3, [pc, #128]	; (800a298 <USBD_SetConfig+0x118>)
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	4619      	mov	r1, r3
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f7ff f9e3 	bl	80095e8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 f9db 	bl	800a5de <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a228:	e033      	b.n	800a292 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a22a:	4b1b      	ldr	r3, [pc, #108]	; (800a298 <USBD_SetConfig+0x118>)
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	461a      	mov	r2, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	429a      	cmp	r2, r3
 800a236:	d01d      	beq.n	800a274 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	4619      	mov	r1, r3
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f7ff f9d1 	bl	80095e8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a246:	4b14      	ldr	r3, [pc, #80]	; (800a298 <USBD_SetConfig+0x118>)
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	461a      	mov	r2, r3
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a250:	4b11      	ldr	r3, [pc, #68]	; (800a298 <USBD_SetConfig+0x118>)
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	4619      	mov	r1, r3
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f7ff f9a7 	bl	80095aa <USBD_SetClassConfig>
 800a25c:	4603      	mov	r3, r0
 800a25e:	2b02      	cmp	r3, #2
 800a260:	d104      	bne.n	800a26c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a262:	6839      	ldr	r1, [r7, #0]
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 f8f2 	bl	800a44e <USBD_CtlError>
            return;
 800a26a:	e012      	b.n	800a292 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 f9b6 	bl	800a5de <USBD_CtlSendStatus>
        break;
 800a272:	e00e      	b.n	800a292 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 f9b2 	bl	800a5de <USBD_CtlSendStatus>
        break;
 800a27a:	e00a      	b.n	800a292 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a27c:	6839      	ldr	r1, [r7, #0]
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 f8e5 	bl	800a44e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a284:	4b04      	ldr	r3, [pc, #16]	; (800a298 <USBD_SetConfig+0x118>)
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	4619      	mov	r1, r3
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f7ff f9ac 	bl	80095e8 <USBD_ClrClassConfig>
        break;
 800a290:	bf00      	nop
    }
  }
}
 800a292:	3708      	adds	r7, #8
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}
 800a298:	20000418 	.word	0x20000418

0800a29c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	88db      	ldrh	r3, [r3, #6]
 800a2aa:	2b01      	cmp	r3, #1
 800a2ac:	d004      	beq.n	800a2b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a2ae:	6839      	ldr	r1, [r7, #0]
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 f8cc 	bl	800a44e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a2b6:	e022      	b.n	800a2fe <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2be:	2b02      	cmp	r3, #2
 800a2c0:	dc02      	bgt.n	800a2c8 <USBD_GetConfig+0x2c>
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	dc03      	bgt.n	800a2ce <USBD_GetConfig+0x32>
 800a2c6:	e015      	b.n	800a2f4 <USBD_GetConfig+0x58>
 800a2c8:	2b03      	cmp	r3, #3
 800a2ca:	d00b      	beq.n	800a2e4 <USBD_GetConfig+0x48>
 800a2cc:	e012      	b.n	800a2f4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	3308      	adds	r3, #8
 800a2d8:	2201      	movs	r2, #1
 800a2da:	4619      	mov	r1, r3
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f000 f920 	bl	800a522 <USBD_CtlSendData>
        break;
 800a2e2:	e00c      	b.n	800a2fe <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	3304      	adds	r3, #4
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 f918 	bl	800a522 <USBD_CtlSendData>
        break;
 800a2f2:	e004      	b.n	800a2fe <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a2f4:	6839      	ldr	r1, [r7, #0]
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 f8a9 	bl	800a44e <USBD_CtlError>
        break;
 800a2fc:	bf00      	nop
}
 800a2fe:	bf00      	nop
 800a300:	3708      	adds	r7, #8
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}

0800a306 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a306:	b580      	push	{r7, lr}
 800a308:	b082      	sub	sp, #8
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	6078      	str	r0, [r7, #4]
 800a30e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a316:	3b01      	subs	r3, #1
 800a318:	2b02      	cmp	r3, #2
 800a31a:	d81e      	bhi.n	800a35a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	88db      	ldrh	r3, [r3, #6]
 800a320:	2b02      	cmp	r3, #2
 800a322:	d004      	beq.n	800a32e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a324:	6839      	ldr	r1, [r7, #0]
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 f891 	bl	800a44e <USBD_CtlError>
        break;
 800a32c:	e01a      	b.n	800a364 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2201      	movs	r2, #1
 800a332:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d005      	beq.n	800a34a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	68db      	ldr	r3, [r3, #12]
 800a342:	f043 0202 	orr.w	r2, r3, #2
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	330c      	adds	r3, #12
 800a34e:	2202      	movs	r2, #2
 800a350:	4619      	mov	r1, r3
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f000 f8e5 	bl	800a522 <USBD_CtlSendData>
      break;
 800a358:	e004      	b.n	800a364 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a35a:	6839      	ldr	r1, [r7, #0]
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 f876 	bl	800a44e <USBD_CtlError>
      break;
 800a362:	bf00      	nop
  }
}
 800a364:	bf00      	nop
 800a366:	3708      	adds	r7, #8
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	885b      	ldrh	r3, [r3, #2]
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d106      	bne.n	800a38c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2201      	movs	r2, #1
 800a382:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 f929 	bl	800a5de <USBD_CtlSendStatus>
  }
}
 800a38c:	bf00      	nop
 800a38e:	3708      	adds	r7, #8
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}

0800a394 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3a4:	3b01      	subs	r3, #1
 800a3a6:	2b02      	cmp	r3, #2
 800a3a8:	d80b      	bhi.n	800a3c2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	885b      	ldrh	r3, [r3, #2]
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d10c      	bne.n	800a3cc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 f90f 	bl	800a5de <USBD_CtlSendStatus>
      }
      break;
 800a3c0:	e004      	b.n	800a3cc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a3c2:	6839      	ldr	r1, [r7, #0]
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 f842 	bl	800a44e <USBD_CtlError>
      break;
 800a3ca:	e000      	b.n	800a3ce <USBD_ClrFeature+0x3a>
      break;
 800a3cc:	bf00      	nop
  }
}
 800a3ce:	bf00      	nop
 800a3d0:	3708      	adds	r7, #8
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}

0800a3d6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a3d6:	b480      	push	{r7}
 800a3d8:	b083      	sub	sp, #12
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	6078      	str	r0, [r7, #4]
 800a3de:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	781a      	ldrb	r2, [r3, #0]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	785a      	ldrb	r2, [r3, #1]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	3302      	adds	r3, #2
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	b29a      	uxth	r2, r3
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	3303      	adds	r3, #3
 800a3fc:	781b      	ldrb	r3, [r3, #0]
 800a3fe:	b29b      	uxth	r3, r3
 800a400:	021b      	lsls	r3, r3, #8
 800a402:	b29b      	uxth	r3, r3
 800a404:	4413      	add	r3, r2
 800a406:	b29a      	uxth	r2, r3
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	3304      	adds	r3, #4
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	b29a      	uxth	r2, r3
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	3305      	adds	r3, #5
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	021b      	lsls	r3, r3, #8
 800a41e:	b29b      	uxth	r3, r3
 800a420:	4413      	add	r3, r2
 800a422:	b29a      	uxth	r2, r3
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	3306      	adds	r3, #6
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	b29a      	uxth	r2, r3
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	3307      	adds	r3, #7
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	b29b      	uxth	r3, r3
 800a438:	021b      	lsls	r3, r3, #8
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	4413      	add	r3, r2
 800a43e:	b29a      	uxth	r2, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	80da      	strh	r2, [r3, #6]

}
 800a444:	bf00      	nop
 800a446:	370c      	adds	r7, #12
 800a448:	46bd      	mov	sp, r7
 800a44a:	bc80      	pop	{r7}
 800a44c:	4770      	bx	lr

0800a44e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a44e:	b580      	push	{r7, lr}
 800a450:	b082      	sub	sp, #8
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
 800a456:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a458:	2180      	movs	r1, #128	; 0x80
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 fc74 	bl	800ad48 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a460:	2100      	movs	r1, #0
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 fc70 	bl	800ad48 <USBD_LL_StallEP>
}
 800a468:	bf00      	nop
 800a46a:	3708      	adds	r7, #8
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b086      	sub	sp, #24
 800a474:	af00      	add	r7, sp, #0
 800a476:	60f8      	str	r0, [r7, #12]
 800a478:	60b9      	str	r1, [r7, #8]
 800a47a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a47c:	2300      	movs	r3, #0
 800a47e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d032      	beq.n	800a4ec <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a486:	68f8      	ldr	r0, [r7, #12]
 800a488:	f000 f834 	bl	800a4f4 <USBD_GetLen>
 800a48c:	4603      	mov	r3, r0
 800a48e:	3301      	adds	r3, #1
 800a490:	b29b      	uxth	r3, r3
 800a492:	005b      	lsls	r3, r3, #1
 800a494:	b29a      	uxth	r2, r3
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a49a:	7dfb      	ldrb	r3, [r7, #23]
 800a49c:	1c5a      	adds	r2, r3, #1
 800a49e:	75fa      	strb	r2, [r7, #23]
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	687a      	ldr	r2, [r7, #4]
 800a4a8:	7812      	ldrb	r2, [r2, #0]
 800a4aa:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a4ac:	7dfb      	ldrb	r3, [r7, #23]
 800a4ae:	1c5a      	adds	r2, r3, #1
 800a4b0:	75fa      	strb	r2, [r7, #23]
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	4413      	add	r3, r2
 800a4b8:	2203      	movs	r2, #3
 800a4ba:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a4bc:	e012      	b.n	800a4e4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	1c5a      	adds	r2, r3, #1
 800a4c2:	60fa      	str	r2, [r7, #12]
 800a4c4:	7dfa      	ldrb	r2, [r7, #23]
 800a4c6:	1c51      	adds	r1, r2, #1
 800a4c8:	75f9      	strb	r1, [r7, #23]
 800a4ca:	4611      	mov	r1, r2
 800a4cc:	68ba      	ldr	r2, [r7, #8]
 800a4ce:	440a      	add	r2, r1
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a4d4:	7dfb      	ldrb	r3, [r7, #23]
 800a4d6:	1c5a      	adds	r2, r3, #1
 800a4d8:	75fa      	strb	r2, [r7, #23]
 800a4da:	461a      	mov	r2, r3
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	4413      	add	r3, r2
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d1e8      	bne.n	800a4be <USBD_GetString+0x4e>
    }
  }
}
 800a4ec:	bf00      	nop
 800a4ee:	3718      	adds	r7, #24
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b085      	sub	sp, #20
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a500:	e005      	b.n	800a50e <USBD_GetLen+0x1a>
  {
    len++;
 800a502:	7bfb      	ldrb	r3, [r7, #15]
 800a504:	3301      	adds	r3, #1
 800a506:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	3301      	adds	r3, #1
 800a50c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d1f5      	bne.n	800a502 <USBD_GetLen+0xe>
  }

  return len;
 800a516:	7bfb      	ldrb	r3, [r7, #15]
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3714      	adds	r7, #20
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bc80      	pop	{r7}
 800a520:	4770      	bx	lr

0800a522 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a522:	b580      	push	{r7, lr}
 800a524:	b084      	sub	sp, #16
 800a526:	af00      	add	r7, sp, #0
 800a528:	60f8      	str	r0, [r7, #12]
 800a52a:	60b9      	str	r1, [r7, #8]
 800a52c:	4613      	mov	r3, r2
 800a52e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	2202      	movs	r2, #2
 800a534:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a538:	88fa      	ldrh	r2, [r7, #6]
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a53e:	88fa      	ldrh	r2, [r7, #6]
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a544:	88fb      	ldrh	r3, [r7, #6]
 800a546:	68ba      	ldr	r2, [r7, #8]
 800a548:	2100      	movs	r1, #0
 800a54a:	68f8      	ldr	r0, [r7, #12]
 800a54c:	f000 fc85 	bl	800ae5a <USBD_LL_Transmit>

  return USBD_OK;
 800a550:	2300      	movs	r3, #0
}
 800a552:	4618      	mov	r0, r3
 800a554:	3710      	adds	r7, #16
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}

0800a55a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a55a:	b580      	push	{r7, lr}
 800a55c:	b084      	sub	sp, #16
 800a55e:	af00      	add	r7, sp, #0
 800a560:	60f8      	str	r0, [r7, #12]
 800a562:	60b9      	str	r1, [r7, #8]
 800a564:	4613      	mov	r3, r2
 800a566:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a568:	88fb      	ldrh	r3, [r7, #6]
 800a56a:	68ba      	ldr	r2, [r7, #8]
 800a56c:	2100      	movs	r1, #0
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	f000 fc73 	bl	800ae5a <USBD_LL_Transmit>

  return USBD_OK;
 800a574:	2300      	movs	r3, #0
}
 800a576:	4618      	mov	r0, r3
 800a578:	3710      	adds	r7, #16
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}

0800a57e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a57e:	b580      	push	{r7, lr}
 800a580:	b084      	sub	sp, #16
 800a582:	af00      	add	r7, sp, #0
 800a584:	60f8      	str	r0, [r7, #12]
 800a586:	60b9      	str	r1, [r7, #8]
 800a588:	4613      	mov	r3, r2
 800a58a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2203      	movs	r2, #3
 800a590:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a594:	88fa      	ldrh	r2, [r7, #6]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a59c:	88fa      	ldrh	r2, [r7, #6]
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a5a4:	88fb      	ldrh	r3, [r7, #6]
 800a5a6:	68ba      	ldr	r2, [r7, #8]
 800a5a8:	2100      	movs	r1, #0
 800a5aa:	68f8      	ldr	r0, [r7, #12]
 800a5ac:	f000 fc78 	bl	800aea0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5b0:	2300      	movs	r3, #0
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3710      	adds	r7, #16
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b084      	sub	sp, #16
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	60f8      	str	r0, [r7, #12]
 800a5c2:	60b9      	str	r1, [r7, #8]
 800a5c4:	4613      	mov	r3, r2
 800a5c6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a5c8:	88fb      	ldrh	r3, [r7, #6]
 800a5ca:	68ba      	ldr	r2, [r7, #8]
 800a5cc:	2100      	movs	r1, #0
 800a5ce:	68f8      	ldr	r0, [r7, #12]
 800a5d0:	f000 fc66 	bl	800aea0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3710      	adds	r7, #16
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}

0800a5de <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a5de:	b580      	push	{r7, lr}
 800a5e0:	b082      	sub	sp, #8
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2204      	movs	r2, #4
 800a5ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	2100      	movs	r1, #0
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f000 fc30 	bl	800ae5a <USBD_LL_Transmit>

  return USBD_OK;
 800a5fa:	2300      	movs	r3, #0
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3708      	adds	r7, #8
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2205      	movs	r2, #5
 800a610:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a614:	2300      	movs	r3, #0
 800a616:	2200      	movs	r2, #0
 800a618:	2100      	movs	r1, #0
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f000 fc40 	bl	800aea0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a620:	2300      	movs	r3, #0
}
 800a622:	4618      	mov	r0, r3
 800a624:	3708      	adds	r7, #8
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
	...

0800a62c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a630:	2200      	movs	r2, #0
 800a632:	4912      	ldr	r1, [pc, #72]	; (800a67c <MX_USB_DEVICE_Init+0x50>)
 800a634:	4812      	ldr	r0, [pc, #72]	; (800a680 <MX_USB_DEVICE_Init+0x54>)
 800a636:	f7fe ff5e 	bl	80094f6 <USBD_Init>
 800a63a:	4603      	mov	r3, r0
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d001      	beq.n	800a644 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a640:	f7f7 faca 	bl	8001bd8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a644:	490f      	ldr	r1, [pc, #60]	; (800a684 <MX_USB_DEVICE_Init+0x58>)
 800a646:	480e      	ldr	r0, [pc, #56]	; (800a680 <MX_USB_DEVICE_Init+0x54>)
 800a648:	f7fe ff80 	bl	800954c <USBD_RegisterClass>
 800a64c:	4603      	mov	r3, r0
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d001      	beq.n	800a656 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a652:	f7f7 fac1 	bl	8001bd8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a656:	490c      	ldr	r1, [pc, #48]	; (800a688 <MX_USB_DEVICE_Init+0x5c>)
 800a658:	4809      	ldr	r0, [pc, #36]	; (800a680 <MX_USB_DEVICE_Init+0x54>)
 800a65a:	f7fe feb1 	bl	80093c0 <USBD_CDC_RegisterInterface>
 800a65e:	4603      	mov	r3, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d001      	beq.n	800a668 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a664:	f7f7 fab8 	bl	8001bd8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a668:	4805      	ldr	r0, [pc, #20]	; (800a680 <MX_USB_DEVICE_Init+0x54>)
 800a66a:	f7fe ff88 	bl	800957e <USBD_Start>
 800a66e:	4603      	mov	r3, r0
 800a670:	2b00      	cmp	r3, #0
 800a672:	d001      	beq.n	800a678 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a674:	f7f7 fab0 	bl	8001bd8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a678:	bf00      	nop
 800a67a:	bd80      	pop	{r7, pc}
 800a67c:	20000130 	.word	0x20000130
 800a680:	2000041c 	.word	0x2000041c
 800a684:	2000001c 	.word	0x2000001c
 800a688:	20000120 	.word	0x20000120

0800a68c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a690:	2200      	movs	r2, #0
 800a692:	4905      	ldr	r1, [pc, #20]	; (800a6a8 <CDC_Init_FS+0x1c>)
 800a694:	4805      	ldr	r0, [pc, #20]	; (800a6ac <CDC_Init_FS+0x20>)
 800a696:	f7fe fea9 	bl	80093ec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a69a:	4905      	ldr	r1, [pc, #20]	; (800a6b0 <CDC_Init_FS+0x24>)
 800a69c:	4803      	ldr	r0, [pc, #12]	; (800a6ac <CDC_Init_FS+0x20>)
 800a69e:	f7fe febe 	bl	800941e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a6a2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	bd80      	pop	{r7, pc}
 800a6a8:	20000ac8 	.word	0x20000ac8
 800a6ac:	2000041c 	.word	0x2000041c
 800a6b0:	200006e0 	.word	0x200006e0

0800a6b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a6b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bc80      	pop	{r7}
 800a6c0:	4770      	bx	lr
	...

0800a6c4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b083      	sub	sp, #12
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	6039      	str	r1, [r7, #0]
 800a6ce:	71fb      	strb	r3, [r7, #7]
 800a6d0:	4613      	mov	r3, r2
 800a6d2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a6d4:	79fb      	ldrb	r3, [r7, #7]
 800a6d6:	2b23      	cmp	r3, #35	; 0x23
 800a6d8:	d84a      	bhi.n	800a770 <CDC_Control_FS+0xac>
 800a6da:	a201      	add	r2, pc, #4	; (adr r2, 800a6e0 <CDC_Control_FS+0x1c>)
 800a6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6e0:	0800a771 	.word	0x0800a771
 800a6e4:	0800a771 	.word	0x0800a771
 800a6e8:	0800a771 	.word	0x0800a771
 800a6ec:	0800a771 	.word	0x0800a771
 800a6f0:	0800a771 	.word	0x0800a771
 800a6f4:	0800a771 	.word	0x0800a771
 800a6f8:	0800a771 	.word	0x0800a771
 800a6fc:	0800a771 	.word	0x0800a771
 800a700:	0800a771 	.word	0x0800a771
 800a704:	0800a771 	.word	0x0800a771
 800a708:	0800a771 	.word	0x0800a771
 800a70c:	0800a771 	.word	0x0800a771
 800a710:	0800a771 	.word	0x0800a771
 800a714:	0800a771 	.word	0x0800a771
 800a718:	0800a771 	.word	0x0800a771
 800a71c:	0800a771 	.word	0x0800a771
 800a720:	0800a771 	.word	0x0800a771
 800a724:	0800a771 	.word	0x0800a771
 800a728:	0800a771 	.word	0x0800a771
 800a72c:	0800a771 	.word	0x0800a771
 800a730:	0800a771 	.word	0x0800a771
 800a734:	0800a771 	.word	0x0800a771
 800a738:	0800a771 	.word	0x0800a771
 800a73c:	0800a771 	.word	0x0800a771
 800a740:	0800a771 	.word	0x0800a771
 800a744:	0800a771 	.word	0x0800a771
 800a748:	0800a771 	.word	0x0800a771
 800a74c:	0800a771 	.word	0x0800a771
 800a750:	0800a771 	.word	0x0800a771
 800a754:	0800a771 	.word	0x0800a771
 800a758:	0800a771 	.word	0x0800a771
 800a75c:	0800a771 	.word	0x0800a771
 800a760:	0800a771 	.word	0x0800a771
 800a764:	0800a771 	.word	0x0800a771
 800a768:	0800a771 	.word	0x0800a771
 800a76c:	0800a771 	.word	0x0800a771
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a770:	bf00      	nop
  }

  return (USBD_OK);
 800a772:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a774:	4618      	mov	r0, r3
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	bc80      	pop	{r7}
 800a77c:	4770      	bx	lr
 800a77e:	bf00      	nop

0800a780 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	uint8_t contador = 0;
 800a78a:	2300      	movs	r3, #0
 800a78c:	73fb      	strb	r3, [r7, #15]
	if(USB_FLAG == 0)
 800a78e:	4b13      	ldr	r3, [pc, #76]	; (800a7dc <CDC_Receive_FS+0x5c>)
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d11d      	bne.n	800a7d2 <CDC_Receive_FS+0x52>
	{
		 memset (buffer,'\0', 70);
 800a796:	2246      	movs	r2, #70	; 0x46
 800a798:	2100      	movs	r1, #0
 800a79a:	4811      	ldr	r0, [pc, #68]	; (800a7e0 <CDC_Receive_FS+0x60>)
 800a79c:	f000 fc34 	bl	800b008 <memset>
	 USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a7a0:	6879      	ldr	r1, [r7, #4]
 800a7a2:	4810      	ldr	r0, [pc, #64]	; (800a7e4 <CDC_Receive_FS+0x64>)
 800a7a4:	f7fe fe3b 	bl	800941e <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a7a8:	480e      	ldr	r0, [pc, #56]	; (800a7e4 <CDC_Receive_FS+0x64>)
 800a7aa:	f7fe fe7a 	bl	80094a2 <USBD_CDC_ReceivePacket>
	  uint8_t len = (uint8_t) *Len;
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	73bb      	strb	r3, [r7, #14]
	  memcpy (buffer,Buf,len);
 800a7b4:	7bbb      	ldrb	r3, [r7, #14]
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	6879      	ldr	r1, [r7, #4]
 800a7ba:	4809      	ldr	r0, [pc, #36]	; (800a7e0 <CDC_Receive_FS+0x60>)
 800a7bc:	f000 fc16 	bl	800afec <memcpy>
	  memset (Buf,'\0',len);
 800a7c0:	7bbb      	ldrb	r3, [r7, #14]
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	2100      	movs	r1, #0
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 fc1e 	bl	800b008 <memset>
	/*  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);*/
	  USB_FLAG = 1;
 800a7cc:	4b03      	ldr	r3, [pc, #12]	; (800a7dc <CDC_Receive_FS+0x5c>)
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	701a      	strb	r2, [r3, #0]
	}
	return (USBD_OK);
 800a7d2:	2300      	movs	r3, #0


  /* USER CODE END 6 */
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3710      	adds	r7, #16
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}
 800a7dc:	200002b6 	.word	0x200002b6
 800a7e0:	20000270 	.word	0x20000270
 800a7e4:	2000041c 	.word	0x2000041c

0800a7e8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a7f8:	4b0d      	ldr	r3, [pc, #52]	; (800a830 <CDC_Transmit_FS+0x48>)
 800a7fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7fe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a806:	2b00      	cmp	r3, #0
 800a808:	d001      	beq.n	800a80e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a80a:	2301      	movs	r3, #1
 800a80c:	e00b      	b.n	800a826 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a80e:	887b      	ldrh	r3, [r7, #2]
 800a810:	461a      	mov	r2, r3
 800a812:	6879      	ldr	r1, [r7, #4]
 800a814:	4806      	ldr	r0, [pc, #24]	; (800a830 <CDC_Transmit_FS+0x48>)
 800a816:	f7fe fde9 	bl	80093ec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a81a:	4805      	ldr	r0, [pc, #20]	; (800a830 <CDC_Transmit_FS+0x48>)
 800a81c:	f7fe fe12 	bl	8009444 <USBD_CDC_TransmitPacket>
 800a820:	4603      	mov	r3, r0
 800a822:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a824:	7bfb      	ldrb	r3, [r7, #15]
}
 800a826:	4618      	mov	r0, r3
 800a828:	3710      	adds	r7, #16
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop
 800a830:	2000041c 	.word	0x2000041c

0800a834 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a834:	b480      	push	{r7}
 800a836:	b083      	sub	sp, #12
 800a838:	af00      	add	r7, sp, #0
 800a83a:	4603      	mov	r3, r0
 800a83c:	6039      	str	r1, [r7, #0]
 800a83e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	2212      	movs	r2, #18
 800a844:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a846:	4b03      	ldr	r3, [pc, #12]	; (800a854 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a848:	4618      	mov	r0, r3
 800a84a:	370c      	adds	r7, #12
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bc80      	pop	{r7}
 800a850:	4770      	bx	lr
 800a852:	bf00      	nop
 800a854:	2000014c 	.word	0x2000014c

0800a858 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a858:	b480      	push	{r7}
 800a85a:	b083      	sub	sp, #12
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	4603      	mov	r3, r0
 800a860:	6039      	str	r1, [r7, #0]
 800a862:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	2204      	movs	r2, #4
 800a868:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a86a:	4b03      	ldr	r3, [pc, #12]	; (800a878 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	370c      	adds	r7, #12
 800a870:	46bd      	mov	sp, r7
 800a872:	bc80      	pop	{r7}
 800a874:	4770      	bx	lr
 800a876:	bf00      	nop
 800a878:	20000160 	.word	0x20000160

0800a87c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b082      	sub	sp, #8
 800a880:	af00      	add	r7, sp, #0
 800a882:	4603      	mov	r3, r0
 800a884:	6039      	str	r1, [r7, #0]
 800a886:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a888:	79fb      	ldrb	r3, [r7, #7]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d105      	bne.n	800a89a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a88e:	683a      	ldr	r2, [r7, #0]
 800a890:	4907      	ldr	r1, [pc, #28]	; (800a8b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a892:	4808      	ldr	r0, [pc, #32]	; (800a8b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a894:	f7ff fdec 	bl	800a470 <USBD_GetString>
 800a898:	e004      	b.n	800a8a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a89a:	683a      	ldr	r2, [r7, #0]
 800a89c:	4904      	ldr	r1, [pc, #16]	; (800a8b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a89e:	4805      	ldr	r0, [pc, #20]	; (800a8b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a8a0:	f7ff fde6 	bl	800a470 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8a4:	4b02      	ldr	r3, [pc, #8]	; (800a8b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3708      	adds	r7, #8
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	20000eb0 	.word	0x20000eb0
 800a8b4:	0800b040 	.word	0x0800b040

0800a8b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	4603      	mov	r3, r0
 800a8c0:	6039      	str	r1, [r7, #0]
 800a8c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a8c4:	683a      	ldr	r2, [r7, #0]
 800a8c6:	4904      	ldr	r1, [pc, #16]	; (800a8d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a8c8:	4804      	ldr	r0, [pc, #16]	; (800a8dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a8ca:	f7ff fdd1 	bl	800a470 <USBD_GetString>
  return USBD_StrDesc;
 800a8ce:	4b02      	ldr	r3, [pc, #8]	; (800a8d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3708      	adds	r7, #8
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}
 800a8d8:	20000eb0 	.word	0x20000eb0
 800a8dc:	0800b058 	.word	0x0800b058

0800a8e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	6039      	str	r1, [r7, #0]
 800a8ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	221a      	movs	r2, #26
 800a8f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a8f2:	f000 f843 	bl	800a97c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a8f6:	4b02      	ldr	r3, [pc, #8]	; (800a900 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3708      	adds	r7, #8
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	20000164 	.word	0x20000164

0800a904 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b082      	sub	sp, #8
 800a908:	af00      	add	r7, sp, #0
 800a90a:	4603      	mov	r3, r0
 800a90c:	6039      	str	r1, [r7, #0]
 800a90e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a910:	79fb      	ldrb	r3, [r7, #7]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d105      	bne.n	800a922 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a916:	683a      	ldr	r2, [r7, #0]
 800a918:	4907      	ldr	r1, [pc, #28]	; (800a938 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a91a:	4808      	ldr	r0, [pc, #32]	; (800a93c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a91c:	f7ff fda8 	bl	800a470 <USBD_GetString>
 800a920:	e004      	b.n	800a92c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a922:	683a      	ldr	r2, [r7, #0]
 800a924:	4904      	ldr	r1, [pc, #16]	; (800a938 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a926:	4805      	ldr	r0, [pc, #20]	; (800a93c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a928:	f7ff fda2 	bl	800a470 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a92c:	4b02      	ldr	r3, [pc, #8]	; (800a938 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3708      	adds	r7, #8
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	20000eb0 	.word	0x20000eb0
 800a93c:	0800b06c 	.word	0x0800b06c

0800a940 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b082      	sub	sp, #8
 800a944:	af00      	add	r7, sp, #0
 800a946:	4603      	mov	r3, r0
 800a948:	6039      	str	r1, [r7, #0]
 800a94a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a94c:	79fb      	ldrb	r3, [r7, #7]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d105      	bne.n	800a95e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a952:	683a      	ldr	r2, [r7, #0]
 800a954:	4907      	ldr	r1, [pc, #28]	; (800a974 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a956:	4808      	ldr	r0, [pc, #32]	; (800a978 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a958:	f7ff fd8a 	bl	800a470 <USBD_GetString>
 800a95c:	e004      	b.n	800a968 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a95e:	683a      	ldr	r2, [r7, #0]
 800a960:	4904      	ldr	r1, [pc, #16]	; (800a974 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a962:	4805      	ldr	r0, [pc, #20]	; (800a978 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a964:	f7ff fd84 	bl	800a470 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a968:	4b02      	ldr	r3, [pc, #8]	; (800a974 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3708      	adds	r7, #8
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
 800a972:	bf00      	nop
 800a974:	20000eb0 	.word	0x20000eb0
 800a978:	0800b078 	.word	0x0800b078

0800a97c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a982:	4b0f      	ldr	r3, [pc, #60]	; (800a9c0 <Get_SerialNum+0x44>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a988:	4b0e      	ldr	r3, [pc, #56]	; (800a9c4 <Get_SerialNum+0x48>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a98e:	4b0e      	ldr	r3, [pc, #56]	; (800a9c8 <Get_SerialNum+0x4c>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a994:	68fa      	ldr	r2, [r7, #12]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	4413      	add	r3, r2
 800a99a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d009      	beq.n	800a9b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a9a2:	2208      	movs	r2, #8
 800a9a4:	4909      	ldr	r1, [pc, #36]	; (800a9cc <Get_SerialNum+0x50>)
 800a9a6:	68f8      	ldr	r0, [r7, #12]
 800a9a8:	f000 f814 	bl	800a9d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a9ac:	2204      	movs	r2, #4
 800a9ae:	4908      	ldr	r1, [pc, #32]	; (800a9d0 <Get_SerialNum+0x54>)
 800a9b0:	68b8      	ldr	r0, [r7, #8]
 800a9b2:	f000 f80f 	bl	800a9d4 <IntToUnicode>
  }
}
 800a9b6:	bf00      	nop
 800a9b8:	3710      	adds	r7, #16
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	1ffff7e8 	.word	0x1ffff7e8
 800a9c4:	1ffff7ec 	.word	0x1ffff7ec
 800a9c8:	1ffff7f0 	.word	0x1ffff7f0
 800a9cc:	20000166 	.word	0x20000166
 800a9d0:	20000176 	.word	0x20000176

0800a9d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b087      	sub	sp, #28
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	4613      	mov	r3, r2
 800a9e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	75fb      	strb	r3, [r7, #23]
 800a9ea:	e027      	b.n	800aa3c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	0f1b      	lsrs	r3, r3, #28
 800a9f0:	2b09      	cmp	r3, #9
 800a9f2:	d80b      	bhi.n	800aa0c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	0f1b      	lsrs	r3, r3, #28
 800a9f8:	b2da      	uxtb	r2, r3
 800a9fa:	7dfb      	ldrb	r3, [r7, #23]
 800a9fc:	005b      	lsls	r3, r3, #1
 800a9fe:	4619      	mov	r1, r3
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	440b      	add	r3, r1
 800aa04:	3230      	adds	r2, #48	; 0x30
 800aa06:	b2d2      	uxtb	r2, r2
 800aa08:	701a      	strb	r2, [r3, #0]
 800aa0a:	e00a      	b.n	800aa22 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	0f1b      	lsrs	r3, r3, #28
 800aa10:	b2da      	uxtb	r2, r3
 800aa12:	7dfb      	ldrb	r3, [r7, #23]
 800aa14:	005b      	lsls	r3, r3, #1
 800aa16:	4619      	mov	r1, r3
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	440b      	add	r3, r1
 800aa1c:	3237      	adds	r2, #55	; 0x37
 800aa1e:	b2d2      	uxtb	r2, r2
 800aa20:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	011b      	lsls	r3, r3, #4
 800aa26:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aa28:	7dfb      	ldrb	r3, [r7, #23]
 800aa2a:	005b      	lsls	r3, r3, #1
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	68ba      	ldr	r2, [r7, #8]
 800aa30:	4413      	add	r3, r2
 800aa32:	2200      	movs	r2, #0
 800aa34:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aa36:	7dfb      	ldrb	r3, [r7, #23]
 800aa38:	3301      	adds	r3, #1
 800aa3a:	75fb      	strb	r3, [r7, #23]
 800aa3c:	7dfa      	ldrb	r2, [r7, #23]
 800aa3e:	79fb      	ldrb	r3, [r7, #7]
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d3d3      	bcc.n	800a9ec <IntToUnicode+0x18>
  }
}
 800aa44:	bf00      	nop
 800aa46:	bf00      	nop
 800aa48:	371c      	adds	r7, #28
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bc80      	pop	{r7}
 800aa4e:	4770      	bx	lr

0800aa50 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a0d      	ldr	r2, [pc, #52]	; (800aa94 <HAL_PCD_MspInit+0x44>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d113      	bne.n	800aa8a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800aa62:	4b0d      	ldr	r3, [pc, #52]	; (800aa98 <HAL_PCD_MspInit+0x48>)
 800aa64:	69db      	ldr	r3, [r3, #28]
 800aa66:	4a0c      	ldr	r2, [pc, #48]	; (800aa98 <HAL_PCD_MspInit+0x48>)
 800aa68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800aa6c:	61d3      	str	r3, [r2, #28]
 800aa6e:	4b0a      	ldr	r3, [pc, #40]	; (800aa98 <HAL_PCD_MspInit+0x48>)
 800aa70:	69db      	ldr	r3, [r3, #28]
 800aa72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa76:	60fb      	str	r3, [r7, #12]
 800aa78:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	2100      	movs	r1, #0
 800aa7e:	2014      	movs	r0, #20
 800aa80:	f7f7 fb7f 	bl	8002182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800aa84:	2014      	movs	r0, #20
 800aa86:	f7f7 fb98 	bl	80021ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800aa8a:	bf00      	nop
 800aa8c:	3710      	adds	r7, #16
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop
 800aa94:	40005c00 	.word	0x40005c00
 800aa98:	40021000 	.word	0x40021000

0800aa9c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800aab0:	4619      	mov	r1, r3
 800aab2:	4610      	mov	r0, r2
 800aab4:	f7fe fdab 	bl	800960e <USBD_LL_SetupStage>
}
 800aab8:	bf00      	nop
 800aaba:	3708      	adds	r7, #8
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b082      	sub	sp, #8
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	460b      	mov	r3, r1
 800aaca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800aad2:	78fa      	ldrb	r2, [r7, #3]
 800aad4:	6879      	ldr	r1, [r7, #4]
 800aad6:	4613      	mov	r3, r2
 800aad8:	009b      	lsls	r3, r3, #2
 800aada:	4413      	add	r3, r2
 800aadc:	00db      	lsls	r3, r3, #3
 800aade:	440b      	add	r3, r1
 800aae0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800aae4:	681a      	ldr	r2, [r3, #0]
 800aae6:	78fb      	ldrb	r3, [r7, #3]
 800aae8:	4619      	mov	r1, r3
 800aaea:	f7fe fddd 	bl	80096a8 <USBD_LL_DataOutStage>
}
 800aaee:	bf00      	nop
 800aaf0:	3708      	adds	r7, #8
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}

0800aaf6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaf6:	b580      	push	{r7, lr}
 800aaf8:	b082      	sub	sp, #8
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]
 800aafe:	460b      	mov	r3, r1
 800ab00:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ab08:	78fa      	ldrb	r2, [r7, #3]
 800ab0a:	6879      	ldr	r1, [r7, #4]
 800ab0c:	4613      	mov	r3, r2
 800ab0e:	009b      	lsls	r3, r3, #2
 800ab10:	4413      	add	r3, r2
 800ab12:	00db      	lsls	r3, r3, #3
 800ab14:	440b      	add	r3, r1
 800ab16:	333c      	adds	r3, #60	; 0x3c
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	78fb      	ldrb	r3, [r7, #3]
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	f7fe fe34 	bl	800978a <USBD_LL_DataInStage>
}
 800ab22:	bf00      	nop
 800ab24:	3708      	adds	r7, #8
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}

0800ab2a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab2a:	b580      	push	{r7, lr}
 800ab2c:	b082      	sub	sp, #8
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f7fe ff44 	bl	80099c6 <USBD_LL_SOF>
}
 800ab3e:	bf00      	nop
 800ab40:	3708      	adds	r7, #8
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}

0800ab46 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab46:	b580      	push	{r7, lr}
 800ab48:	b084      	sub	sp, #16
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	2b02      	cmp	r3, #2
 800ab58:	d001      	beq.n	800ab5e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ab5a:	f7f7 f83d 	bl	8001bd8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ab64:	7bfa      	ldrb	r2, [r7, #15]
 800ab66:	4611      	mov	r1, r2
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f7fe fef4 	bl	8009956 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ab74:	4618      	mov	r0, r3
 800ab76:	f7fe fead 	bl	80098d4 <USBD_LL_Reset>
}
 800ab7a:	bf00      	nop
 800ab7c:	3710      	adds	r7, #16
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
	...

0800ab84 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b082      	sub	sp, #8
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ab92:	4618      	mov	r0, r3
 800ab94:	f7fe feee 	bl	8009974 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	699b      	ldr	r3, [r3, #24]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d005      	beq.n	800abac <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aba0:	4b04      	ldr	r3, [pc, #16]	; (800abb4 <HAL_PCD_SuspendCallback+0x30>)
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	4a03      	ldr	r2, [pc, #12]	; (800abb4 <HAL_PCD_SuspendCallback+0x30>)
 800aba6:	f043 0306 	orr.w	r3, r3, #6
 800abaa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800abac:	bf00      	nop
 800abae:	3708      	adds	r7, #8
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}
 800abb4:	e000ed00 	.word	0xe000ed00

0800abb8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7fe fee8 	bl	800999c <USBD_LL_Resume>
}
 800abcc:	bf00      	nop
 800abce:	3708      	adds	r7, #8
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800abdc:	4a28      	ldr	r2, [pc, #160]	; (800ac80 <USBD_LL_Init+0xac>)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	4a26      	ldr	r2, [pc, #152]	; (800ac80 <USBD_LL_Init+0xac>)
 800abe8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800abec:	4b24      	ldr	r3, [pc, #144]	; (800ac80 <USBD_LL_Init+0xac>)
 800abee:	4a25      	ldr	r2, [pc, #148]	; (800ac84 <USBD_LL_Init+0xb0>)
 800abf0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800abf2:	4b23      	ldr	r3, [pc, #140]	; (800ac80 <USBD_LL_Init+0xac>)
 800abf4:	2208      	movs	r2, #8
 800abf6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800abf8:	4b21      	ldr	r3, [pc, #132]	; (800ac80 <USBD_LL_Init+0xac>)
 800abfa:	2202      	movs	r2, #2
 800abfc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800abfe:	4b20      	ldr	r3, [pc, #128]	; (800ac80 <USBD_LL_Init+0xac>)
 800ac00:	2200      	movs	r2, #0
 800ac02:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ac04:	4b1e      	ldr	r3, [pc, #120]	; (800ac80 <USBD_LL_Init+0xac>)
 800ac06:	2200      	movs	r2, #0
 800ac08:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ac0a:	4b1d      	ldr	r3, [pc, #116]	; (800ac80 <USBD_LL_Init+0xac>)
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ac10:	481b      	ldr	r0, [pc, #108]	; (800ac80 <USBD_LL_Init+0xac>)
 800ac12:	f7f7 ff97 	bl	8002b44 <HAL_PCD_Init>
 800ac16:	4603      	mov	r3, r0
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d001      	beq.n	800ac20 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ac1c:	f7f6 ffdc 	bl	8001bd8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac26:	2318      	movs	r3, #24
 800ac28:	2200      	movs	r2, #0
 800ac2a:	2100      	movs	r1, #0
 800ac2c:	f7f9 fc0b 	bl	8004446 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac36:	2358      	movs	r3, #88	; 0x58
 800ac38:	2200      	movs	r2, #0
 800ac3a:	2180      	movs	r1, #128	; 0x80
 800ac3c:	f7f9 fc03 	bl	8004446 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac46:	23c0      	movs	r3, #192	; 0xc0
 800ac48:	2200      	movs	r2, #0
 800ac4a:	2181      	movs	r1, #129	; 0x81
 800ac4c:	f7f9 fbfb 	bl	8004446 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac56:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	2101      	movs	r1, #1
 800ac5e:	f7f9 fbf2 	bl	8004446 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac68:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	2182      	movs	r1, #130	; 0x82
 800ac70:	f7f9 fbe9 	bl	8004446 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ac74:	2300      	movs	r3, #0
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3708      	adds	r7, #8
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	200010b0 	.word	0x200010b0
 800ac84:	40005c00 	.word	0x40005c00

0800ac88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac90:	2300      	movs	r3, #0
 800ac92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac94:	2300      	movs	r3, #0
 800ac96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7f8 f85b 	bl	8002d5a <HAL_PCD_Start>
 800aca4:	4603      	mov	r3, r0
 800aca6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aca8:	7bfb      	ldrb	r3, [r7, #15]
 800acaa:	4618      	mov	r0, r3
 800acac:	f000 f94e 	bl	800af4c <USBD_Get_USB_Status>
 800acb0:	4603      	mov	r3, r0
 800acb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acb4:	7bbb      	ldrb	r3, [r7, #14]
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3710      	adds	r7, #16
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}

0800acbe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800acbe:	b580      	push	{r7, lr}
 800acc0:	b084      	sub	sp, #16
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
 800acc6:	4608      	mov	r0, r1
 800acc8:	4611      	mov	r1, r2
 800acca:	461a      	mov	r2, r3
 800accc:	4603      	mov	r3, r0
 800acce:	70fb      	strb	r3, [r7, #3]
 800acd0:	460b      	mov	r3, r1
 800acd2:	70bb      	strb	r3, [r7, #2]
 800acd4:	4613      	mov	r3, r2
 800acd6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acd8:	2300      	movs	r3, #0
 800acda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acdc:	2300      	movs	r3, #0
 800acde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ace6:	78bb      	ldrb	r3, [r7, #2]
 800ace8:	883a      	ldrh	r2, [r7, #0]
 800acea:	78f9      	ldrb	r1, [r7, #3]
 800acec:	f7f8 f9d3 	bl	8003096 <HAL_PCD_EP_Open>
 800acf0:	4603      	mov	r3, r0
 800acf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acf4:	7bfb      	ldrb	r3, [r7, #15]
 800acf6:	4618      	mov	r0, r3
 800acf8:	f000 f928 	bl	800af4c <USBD_Get_USB_Status>
 800acfc:	4603      	mov	r3, r0
 800acfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad00:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3710      	adds	r7, #16
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}

0800ad0a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad0a:	b580      	push	{r7, lr}
 800ad0c:	b084      	sub	sp, #16
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
 800ad12:	460b      	mov	r3, r1
 800ad14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad16:	2300      	movs	r3, #0
 800ad18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad24:	78fa      	ldrb	r2, [r7, #3]
 800ad26:	4611      	mov	r1, r2
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f7f8 fa1a 	bl	8003162 <HAL_PCD_EP_Close>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad32:	7bfb      	ldrb	r3, [r7, #15]
 800ad34:	4618      	mov	r0, r3
 800ad36:	f000 f909 	bl	800af4c <USBD_Get_USB_Status>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3710      	adds	r7, #16
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b084      	sub	sp, #16
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	460b      	mov	r3, r1
 800ad52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad54:	2300      	movs	r3, #0
 800ad56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad62:	78fa      	ldrb	r2, [r7, #3]
 800ad64:	4611      	mov	r1, r2
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7f8 fada 	bl	8003320 <HAL_PCD_EP_SetStall>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad70:	7bfb      	ldrb	r3, [r7, #15]
 800ad72:	4618      	mov	r0, r3
 800ad74:	f000 f8ea 	bl	800af4c <USBD_Get_USB_Status>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b084      	sub	sp, #16
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	6078      	str	r0, [r7, #4]
 800ad8e:	460b      	mov	r3, r1
 800ad90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad92:	2300      	movs	r3, #0
 800ad94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad96:	2300      	movs	r3, #0
 800ad98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ada0:	78fa      	ldrb	r2, [r7, #3]
 800ada2:	4611      	mov	r1, r2
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7f8 fb1b 	bl	80033e0 <HAL_PCD_EP_ClrStall>
 800adaa:	4603      	mov	r3, r0
 800adac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adae:	7bfb      	ldrb	r3, [r7, #15]
 800adb0:	4618      	mov	r0, r3
 800adb2:	f000 f8cb 	bl	800af4c <USBD_Get_USB_Status>
 800adb6:	4603      	mov	r3, r0
 800adb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adba:	7bbb      	ldrb	r3, [r7, #14]
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3710      	adds	r7, #16
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}

0800adc4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b085      	sub	sp, #20
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
 800adcc:	460b      	mov	r3, r1
 800adce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800add6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800add8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800addc:	2b00      	cmp	r3, #0
 800adde:	da0c      	bge.n	800adfa <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ade0:	78fb      	ldrb	r3, [r7, #3]
 800ade2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ade6:	68f9      	ldr	r1, [r7, #12]
 800ade8:	1c5a      	adds	r2, r3, #1
 800adea:	4613      	mov	r3, r2
 800adec:	009b      	lsls	r3, r3, #2
 800adee:	4413      	add	r3, r2
 800adf0:	00db      	lsls	r3, r3, #3
 800adf2:	440b      	add	r3, r1
 800adf4:	3302      	adds	r3, #2
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	e00b      	b.n	800ae12 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800adfa:	78fb      	ldrb	r3, [r7, #3]
 800adfc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae00:	68f9      	ldr	r1, [r7, #12]
 800ae02:	4613      	mov	r3, r2
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	4413      	add	r3, r2
 800ae08:	00db      	lsls	r3, r3, #3
 800ae0a:	440b      	add	r3, r1
 800ae0c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ae10:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3714      	adds	r7, #20
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bc80      	pop	{r7}
 800ae1a:	4770      	bx	lr

0800ae1c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b084      	sub	sp, #16
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	460b      	mov	r3, r1
 800ae26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae36:	78fa      	ldrb	r2, [r7, #3]
 800ae38:	4611      	mov	r1, r2
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7f8 f906 	bl	800304c <HAL_PCD_SetAddress>
 800ae40:	4603      	mov	r3, r0
 800ae42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae44:	7bfb      	ldrb	r3, [r7, #15]
 800ae46:	4618      	mov	r0, r3
 800ae48:	f000 f880 	bl	800af4c <USBD_Get_USB_Status>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae50:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3710      	adds	r7, #16
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}

0800ae5a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ae5a:	b580      	push	{r7, lr}
 800ae5c:	b086      	sub	sp, #24
 800ae5e:	af00      	add	r7, sp, #0
 800ae60:	60f8      	str	r0, [r7, #12]
 800ae62:	607a      	str	r2, [r7, #4]
 800ae64:	461a      	mov	r2, r3
 800ae66:	460b      	mov	r3, r1
 800ae68:	72fb      	strb	r3, [r7, #11]
 800ae6a:	4613      	mov	r3, r2
 800ae6c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae72:	2300      	movs	r3, #0
 800ae74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ae7c:	893b      	ldrh	r3, [r7, #8]
 800ae7e:	7af9      	ldrb	r1, [r7, #11]
 800ae80:	687a      	ldr	r2, [r7, #4]
 800ae82:	f7f8 fa0a 	bl	800329a <HAL_PCD_EP_Transmit>
 800ae86:	4603      	mov	r3, r0
 800ae88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae8a:	7dfb      	ldrb	r3, [r7, #23]
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f000 f85d 	bl	800af4c <USBD_Get_USB_Status>
 800ae92:	4603      	mov	r3, r0
 800ae94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae96:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3718      	adds	r7, #24
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b086      	sub	sp, #24
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	607a      	str	r2, [r7, #4]
 800aeaa:	461a      	mov	r2, r3
 800aeac:	460b      	mov	r3, r1
 800aeae:	72fb      	strb	r3, [r7, #11]
 800aeb0:	4613      	mov	r3, r2
 800aeb2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aec2:	893b      	ldrh	r3, [r7, #8]
 800aec4:	7af9      	ldrb	r1, [r7, #11]
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	f7f8 f993 	bl	80031f2 <HAL_PCD_EP_Receive>
 800aecc:	4603      	mov	r3, r0
 800aece:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aed0:	7dfb      	ldrb	r3, [r7, #23]
 800aed2:	4618      	mov	r0, r3
 800aed4:	f000 f83a 	bl	800af4c <USBD_Get_USB_Status>
 800aed8:	4603      	mov	r3, r0
 800aeda:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aedc:	7dbb      	ldrb	r3, [r7, #22]
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3718      	adds	r7, #24
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aee6:	b580      	push	{r7, lr}
 800aee8:	b082      	sub	sp, #8
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
 800aeee:	460b      	mov	r3, r1
 800aef0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aef8:	78fa      	ldrb	r2, [r7, #3]
 800aefa:	4611      	mov	r1, r2
 800aefc:	4618      	mov	r0, r3
 800aefe:	f7f8 f9b5 	bl	800326c <HAL_PCD_EP_GetRxCount>
 800af02:	4603      	mov	r3, r0
}
 800af04:	4618      	mov	r0, r3
 800af06:	3708      	adds	r7, #8
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b083      	sub	sp, #12
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800af14:	4b02      	ldr	r3, [pc, #8]	; (800af20 <USBD_static_malloc+0x14>)
}
 800af16:	4618      	mov	r0, r3
 800af18:	370c      	adds	r7, #12
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bc80      	pop	{r7}
 800af1e:	4770      	bx	lr
 800af20:	2000139c 	.word	0x2000139c

0800af24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800af24:	b480      	push	{r7}
 800af26:	b083      	sub	sp, #12
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]

}
 800af2c:	bf00      	nop
 800af2e:	370c      	adds	r7, #12
 800af30:	46bd      	mov	sp, r7
 800af32:	bc80      	pop	{r7}
 800af34:	4770      	bx	lr

0800af36 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af36:	b480      	push	{r7}
 800af38:	b083      	sub	sp, #12
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	6078      	str	r0, [r7, #4]
 800af3e:	460b      	mov	r3, r1
 800af40:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800af42:	bf00      	nop
 800af44:	370c      	adds	r7, #12
 800af46:	46bd      	mov	sp, r7
 800af48:	bc80      	pop	{r7}
 800af4a:	4770      	bx	lr

0800af4c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b085      	sub	sp, #20
 800af50:	af00      	add	r7, sp, #0
 800af52:	4603      	mov	r3, r0
 800af54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af56:	2300      	movs	r3, #0
 800af58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800af5a:	79fb      	ldrb	r3, [r7, #7]
 800af5c:	2b03      	cmp	r3, #3
 800af5e:	d817      	bhi.n	800af90 <USBD_Get_USB_Status+0x44>
 800af60:	a201      	add	r2, pc, #4	; (adr r2, 800af68 <USBD_Get_USB_Status+0x1c>)
 800af62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af66:	bf00      	nop
 800af68:	0800af79 	.word	0x0800af79
 800af6c:	0800af7f 	.word	0x0800af7f
 800af70:	0800af85 	.word	0x0800af85
 800af74:	0800af8b 	.word	0x0800af8b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800af78:	2300      	movs	r3, #0
 800af7a:	73fb      	strb	r3, [r7, #15]
    break;
 800af7c:	e00b      	b.n	800af96 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800af7e:	2302      	movs	r3, #2
 800af80:	73fb      	strb	r3, [r7, #15]
    break;
 800af82:	e008      	b.n	800af96 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800af84:	2301      	movs	r3, #1
 800af86:	73fb      	strb	r3, [r7, #15]
    break;
 800af88:	e005      	b.n	800af96 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800af8a:	2302      	movs	r3, #2
 800af8c:	73fb      	strb	r3, [r7, #15]
    break;
 800af8e:	e002      	b.n	800af96 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800af90:	2302      	movs	r3, #2
 800af92:	73fb      	strb	r3, [r7, #15]
    break;
 800af94:	bf00      	nop
  }
  return usb_status;
 800af96:	7bfb      	ldrb	r3, [r7, #15]
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3714      	adds	r7, #20
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bc80      	pop	{r7}
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop

0800afa4 <__libc_init_array>:
 800afa4:	b570      	push	{r4, r5, r6, lr}
 800afa6:	2600      	movs	r6, #0
 800afa8:	4d0c      	ldr	r5, [pc, #48]	; (800afdc <__libc_init_array+0x38>)
 800afaa:	4c0d      	ldr	r4, [pc, #52]	; (800afe0 <__libc_init_array+0x3c>)
 800afac:	1b64      	subs	r4, r4, r5
 800afae:	10a4      	asrs	r4, r4, #2
 800afb0:	42a6      	cmp	r6, r4
 800afb2:	d109      	bne.n	800afc8 <__libc_init_array+0x24>
 800afb4:	f000 f830 	bl	800b018 <_init>
 800afb8:	2600      	movs	r6, #0
 800afba:	4d0a      	ldr	r5, [pc, #40]	; (800afe4 <__libc_init_array+0x40>)
 800afbc:	4c0a      	ldr	r4, [pc, #40]	; (800afe8 <__libc_init_array+0x44>)
 800afbe:	1b64      	subs	r4, r4, r5
 800afc0:	10a4      	asrs	r4, r4, #2
 800afc2:	42a6      	cmp	r6, r4
 800afc4:	d105      	bne.n	800afd2 <__libc_init_array+0x2e>
 800afc6:	bd70      	pop	{r4, r5, r6, pc}
 800afc8:	f855 3b04 	ldr.w	r3, [r5], #4
 800afcc:	4798      	blx	r3
 800afce:	3601      	adds	r6, #1
 800afd0:	e7ee      	b.n	800afb0 <__libc_init_array+0xc>
 800afd2:	f855 3b04 	ldr.w	r3, [r5], #4
 800afd6:	4798      	blx	r3
 800afd8:	3601      	adds	r6, #1
 800afda:	e7f2      	b.n	800afc2 <__libc_init_array+0x1e>
 800afdc:	0800b0a0 	.word	0x0800b0a0
 800afe0:	0800b0a0 	.word	0x0800b0a0
 800afe4:	0800b0a0 	.word	0x0800b0a0
 800afe8:	0800b0a4 	.word	0x0800b0a4

0800afec <memcpy>:
 800afec:	440a      	add	r2, r1
 800afee:	4291      	cmp	r1, r2
 800aff0:	f100 33ff 	add.w	r3, r0, #4294967295
 800aff4:	d100      	bne.n	800aff8 <memcpy+0xc>
 800aff6:	4770      	bx	lr
 800aff8:	b510      	push	{r4, lr}
 800affa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800affe:	4291      	cmp	r1, r2
 800b000:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b004:	d1f9      	bne.n	800affa <memcpy+0xe>
 800b006:	bd10      	pop	{r4, pc}

0800b008 <memset>:
 800b008:	4603      	mov	r3, r0
 800b00a:	4402      	add	r2, r0
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d100      	bne.n	800b012 <memset+0xa>
 800b010:	4770      	bx	lr
 800b012:	f803 1b01 	strb.w	r1, [r3], #1
 800b016:	e7f9      	b.n	800b00c <memset+0x4>

0800b018 <_init>:
 800b018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b01a:	bf00      	nop
 800b01c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b01e:	bc08      	pop	{r3}
 800b020:	469e      	mov	lr, r3
 800b022:	4770      	bx	lr

0800b024 <_fini>:
 800b024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b026:	bf00      	nop
 800b028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b02a:	bc08      	pop	{r3}
 800b02c:	469e      	mov	lr, r3
 800b02e:	4770      	bx	lr
