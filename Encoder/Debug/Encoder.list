
Encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae68  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800af74  0800af74  0001af74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afe4  0800afe4  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  0800afe4  0800afe4  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800afe4  0800afe4  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afe4  0800afe4  0001afe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800afe8  0800afe8  0001afe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  0800afec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000143c  20000180  0800b16c  00020180  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200015bc  0800b16c  000215bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015dd9  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a87  00000000  00000000  00035f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001468  00000000  00000000  00039a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e0  00000000  00000000  0003ae78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b36a  00000000  00000000  0003c158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000183ec  00000000  00000000  000574c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ffe0  00000000  00000000  0006f8ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ff88e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000546c  00000000  00000000  000ff8e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000180 	.word	0x20000180
 8000128:	00000000 	.word	0x00000000
 800012c:	0800af5c 	.word	0x0800af5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000184 	.word	0x20000184
 8000148:	0800af5c 	.word	0x0800af5c

0800014c <FLASH_apaga>:
  * @param  Endereço:	  Endereço inicial da página que deseja ser apagada
  * @param  Paginas:      Quantidade de páginas que deseja apagar a partir do endereço inicial.
  *
  * @retval Void
  */
void FLASH_apaga(uint32_t endereco, uint8_t paginas){
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	70fb      	strb	r3, [r7, #3]
	/* Unlock the Flash to enable the flash control register access *************/
	HAL_FLASH_Unlock();
 8000158:	f002 f90c 	bl	8002374 <HAL_FLASH_Unlock>

	/* Allow Access to option bytes sector */
	HAL_FLASH_OB_Unlock();
 800015c:	f002 f940 	bl	80023e0 <HAL_FLASH_OB_Unlock>

	/* Fill EraseInit structure*/
	FLASH_EraseInitTypeDef EraseInitStruct;			    // cria estrutura de dados para armazenar informações de apagamento
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;  // definição padrão da biblioteca HAL
 8000160:	2300      	movs	r3, #0
 8000162:	613b      	str	r3, [r7, #16]
	EraseInitStruct.PageAddress = endereco;				// definição do usuário do endereço da página que deseja apagar
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.NbPages = paginas;					// número de páginas que serão apagadas
 8000168:	78fb      	ldrb	r3, [r7, #3]
 800016a:	61fb      	str	r3, [r7, #28]

	uint32_t PageError;									// Valor do endereço caso ocorra erro no apagamento da função HAL_FLASHEx_Erase
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK){
 800016c:	f107 020c 	add.w	r2, r7, #12
 8000170:	f107 0310 	add.w	r3, r7, #16
 8000174:	4611      	mov	r1, r2
 8000176:	4618      	mov	r0, r3
 8000178:	f002 fa10 	bl	800259c <HAL_FLASHEx_Erase>
		// rotina caso ocorra erro no processo de apagar
	}

	HAL_FLASH_OB_Lock();
 800017c:	f002 f94c 	bl	8002418 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 8000180:	f002 f91e 	bl	80023c0 <HAL_FLASH_Lock>
}
 8000184:	bf00      	nop
 8000186:	3720      	adds	r7, #32
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}

0800018c <FLASH_escreve_16bits>:
  * @param  Endereço:	  Endereço da memória em que o dado de 16 bits deverá ser armazenado. Endereço deve ser múltiplo de 2)
  * @param  *dado:        Ponteiro para o valor a ser inserido no endereço de memória especificado
  *
  * @retval Void
  */
void FLASH_escreve_16bits(uint32_t endereco, uint16_t *dado){
 800018c:	b5b0      	push	{r4, r5, r7, lr}
 800018e:	b082      	sub	sp, #8
 8000190:	af00      	add	r7, sp, #0
 8000192:	6078      	str	r0, [r7, #4]
 8000194:	6039      	str	r1, [r7, #0]

	HAL_FLASH_Unlock();
 8000196:	f002 f8ed 	bl	8002374 <HAL_FLASH_Unlock>
	HAL_FLASH_OB_Unlock();
 800019a:	f002 f921 	bl	80023e0 <HAL_FLASH_OB_Unlock>

	if( HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,(uint64_t)endereco, *dado) != HAL_OK){
 800019e:	683b      	ldr	r3, [r7, #0]
 80001a0:	881b      	ldrh	r3, [r3, #0]
 80001a2:	b29b      	uxth	r3, r3
 80001a4:	2200      	movs	r2, #0
 80001a6:	461c      	mov	r4, r3
 80001a8:	4615      	mov	r5, r2
 80001aa:	4622      	mov	r2, r4
 80001ac:	462b      	mov	r3, r5
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	2001      	movs	r0, #1
 80001b2:	f002 f86f 	bl	8002294 <HAL_FLASH_Program>
		// rotina caso ocorra erro no processo de apagar
	}

	HAL_FLASH_OB_Lock();
 80001b6:	f002 f92f 	bl	8002418 <HAL_FLASH_OB_Lock>
	HAL_FLASH_Lock();
 80001ba:	f002 f901 	bl	80023c0 <HAL_FLASH_Lock>
}
 80001be:	bf00      	nop
 80001c0:	3708      	adds	r7, #8
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bdb0      	pop	{r4, r5, r7, pc}

080001c6 <FLASH_le_16bits>:
  * @param  Endereço:	  Endereço da memória em que o dado de 16 bits deverá ser lido. Endereço deve ser múltiplo de 2
  * @param  *dado:        Ponteiro para armazenar o valor a ser lido no endereço de memória especificado
  *
  * @retval Void
  */
void FLASH_le_16bits(uint32_t endereco, uint16_t *dado){
 80001c6:	b480      	push	{r7}
 80001c8:	b083      	sub	sp, #12
 80001ca:	af00      	add	r7, sp, #0
 80001cc:	6078      	str	r0, [r7, #4]
 80001ce:	6039      	str	r1, [r7, #0]

	*dado = *(uint32_t*)(endereco);
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	b29a      	uxth	r2, r3
 80001d6:	683b      	ldr	r3, [r7, #0]
 80001d8:	801a      	strh	r2, [r3, #0]

}
 80001da:	bf00      	nop
 80001dc:	370c      	adds	r7, #12
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr

080001e4 <main>:
/**
* @brief  The application entry point.
* @retval int
*/
int main(void)
{
 80001e4:	b590      	push	{r4, r7, lr}
 80001e6:	b089      	sub	sp, #36	; 0x24
 80001e8:	af06      	add	r7, sp, #24
/* USER CODE END 1 */

/* MCU Configuration--------------------------------------------------------*/

/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
HAL_Init();
 80001ea:	f001 fe0f 	bl	8001e0c <HAL_Init>
/* USER CODE BEGIN Init */

/* USER CODE END Init */

/* Configure the system clock */
SystemClock_Config();
 80001ee:	f000 fae3 	bl	80007b8 <SystemClock_Config>
/* USER CODE BEGIN SysInit */

/* USER CODE END SysInit */

/* Initialize all configured peripherals */
MX_GPIO_Init();
 80001f2:	f000 fc07 	bl	8000a04 <MX_GPIO_Init>
MX_TIM2_Init();
 80001f6:	f000 fb39 	bl	800086c <MX_TIM2_Init>
MX_TIM3_Init();
 80001fa:	f000 fb8b 	bl	8000914 <MX_TIM3_Init>
MX_USART2_UART_Init();
 80001fe:	f000 fbd7 	bl	80009b0 <MX_USART2_UART_Init>
MX_USB_DEVICE_Init();
 8000202:	f00a f9b5 	bl	800a570 <MX_USB_DEVICE_Init>
/* USER CODE BEGIN 2 */
HAL_Delay(500);
 8000206:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800020a:	f001 fe61 	bl	8001ed0 <HAL_Delay>
//HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
HAL_UART_Receive_IT(&huart2, (uint8_t *)RXBuffer, 1);
 800020e:	2201      	movs	r2, #1
 8000210:	49a3      	ldr	r1, [pc, #652]	; (80004a0 <main+0x2bc>)
 8000212:	48a4      	ldr	r0, [pc, #656]	; (80004a4 <main+0x2c0>)
 8000214:	f005 fc61 	bl	8005ada <HAL_UART_Receive_IT>
StateMachine = iddle;
 8000218:	4ba3      	ldr	r3, [pc, #652]	; (80004a8 <main+0x2c4>)
 800021a:	2249      	movs	r2, #73	; 0x49
 800021c:	701a      	strb	r2, [r3, #0]
char reset_status;
HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,GPIO_PIN_SET);
 800021e:	2201      	movs	r2, #1
 8000220:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000224:	48a1      	ldr	r0, [pc, #644]	; (80004ac <main+0x2c8>)
 8000226:	f002 fbe5 	bl	80029f4 <HAL_GPIO_WritePin>
//   reset_status = deviceReset();
HAL_GPIO_WritePin(GPIOB,STATUS_Pin, GPIO_PIN_SET);
 800022a:	2201      	movs	r2, #1
 800022c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000230:	489f      	ldr	r0, [pc, #636]	; (80004b0 <main+0x2cc>)
 8000232:	f002 fbdf 	bl	80029f4 <HAL_GPIO_WritePin>
char startFlag = 0;
 8000236:	2300      	movs	r3, #0
 8000238:	71bb      	strb	r3, [r7, #6]
char stopFlag = 1;
 800023a:	2301      	movs	r3, #1
 800023c:	717b      	strb	r3, [r7, #5]
char i=0;
 800023e:	2300      	movs	r3, #0
 8000240:	71fb      	strb	r3, [r7, #7]
/* Infinite loop */
/* USER CODE BEGIN WHILE */

while (1)
{
  switch(StateMachine)
 8000242:	4b99      	ldr	r3, [pc, #612]	; (80004a8 <main+0x2c4>)
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	3b30      	subs	r3, #48	; 0x30
 8000248:	2b19      	cmp	r3, #25
 800024a:	d8fa      	bhi.n	8000242 <main+0x5e>
 800024c:	a201      	add	r2, pc, #4	; (adr r2, 8000254 <main+0x70>)
 800024e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000252:	bf00      	nop
 8000254:	0800038f 	.word	0x0800038f
 8000258:	080003ad 	.word	0x080003ad
 800025c:	080003e5 	.word	0x080003e5
 8000260:	08000435 	.word	0x08000435
 8000264:	080004d1 	.word	0x080004d1
 8000268:	0800064b 	.word	0x0800064b
 800026c:	08000693 	.word	0x08000693
 8000270:	08000243 	.word	0x08000243
 8000274:	08000243 	.word	0x08000243
 8000278:	08000243 	.word	0x08000243
 800027c:	08000243 	.word	0x08000243
 8000280:	08000243 	.word	0x08000243
 8000284:	08000243 	.word	0x08000243
 8000288:	08000243 	.word	0x08000243
 800028c:	08000243 	.word	0x08000243
 8000290:	08000243 	.word	0x08000243
 8000294:	08000243 	.word	0x08000243
 8000298:	08000243 	.word	0x08000243
 800029c:	08000243 	.word	0x08000243
 80002a0:	08000243 	.word	0x08000243
 80002a4:	08000243 	.word	0x08000243
 80002a8:	08000715 	.word	0x08000715
 80002ac:	08000243 	.word	0x08000243
 80002b0:	08000243 	.word	0x08000243
 80002b4:	08000243 	.word	0x08000243
 80002b8:	080002bd 	.word	0x080002bd
  {
	  case iddle:
//	  		while(EndReception!=Fim);
		if(USB_FLAG == 1)
 80002bc:	4b7d      	ldr	r3, [pc, #500]	; (80004b4 <main+0x2d0>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	2b01      	cmp	r3, #1
 80002c2:	d10a      	bne.n	80002da <main+0xf6>
		{
			while(EndReception!=Fim) command(buffer);
 80002c4:	e002      	b.n	80002cc <main+0xe8>
 80002c6:	487c      	ldr	r0, [pc, #496]	; (80004b8 <main+0x2d4>)
 80002c8:	f000 fd06 	bl	8000cd8 <command>
 80002cc:	4b7b      	ldr	r3, [pc, #492]	; (80004bc <main+0x2d8>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	2b44      	cmp	r3, #68	; 0x44
 80002d2:	d1f8      	bne.n	80002c6 <main+0xe2>
			USB_FLAG = 0;
 80002d4:	4b77      	ldr	r3, [pc, #476]	; (80004b4 <main+0x2d0>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	701a      	strb	r2, [r3, #0]
		}
		if(EndReception == Fim)
 80002da:	4b78      	ldr	r3, [pc, #480]	; (80004bc <main+0x2d8>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	2b44      	cmp	r3, #68	; 0x44
 80002e0:	d113      	bne.n	800030a <main+0x126>
		{
			structDados();
 80002e2:	f000 fc61 	bl	8000ba8 <structDados>
			errorFlag = VerificaErro();
 80002e6:	f000 fcab 	bl	8000c40 <VerificaErro>
 80002ea:	4603      	mov	r3, r0
 80002ec:	b2da      	uxtb	r2, r3
 80002ee:	4b74      	ldr	r3, [pc, #464]	; (80004c0 <main+0x2dc>)
 80002f0:	701a      	strb	r2, [r3, #0]
			if(errorFlag != OK)
 80002f2:	4b73      	ldr	r3, [pc, #460]	; (80004c0 <main+0x2dc>)
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b41      	cmp	r3, #65	; 0x41
 80002f8:	d003      	beq.n	8000302 <main+0x11e>
			 {
				StateMachine = error;
 80002fa:	4b6b      	ldr	r3, [pc, #428]	; (80004a8 <main+0x2c4>)
 80002fc:	2245      	movs	r2, #69	; 0x45
 80002fe:	701a      	strb	r2, [r3, #0]
				EndReception = Reset;
			}

		}
		else if(USB_FLAG == 0 && EndReception == '\0') StateMachine = iddle;
	  break;
 8000300:	e232      	b.n	8000768 <main+0x584>
				StateMachine = Inicio;
 8000302:	4b69      	ldr	r3, [pc, #420]	; (80004a8 <main+0x2c4>)
 8000304:	2230      	movs	r2, #48	; 0x30
 8000306:	701a      	strb	r2, [r3, #0]
	  break;
 8000308:	e22e      	b.n	8000768 <main+0x584>
		else if(EndReception == Reset)
 800030a:	4b6c      	ldr	r3, [pc, #432]	; (80004bc <main+0x2d8>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	2b52      	cmp	r3, #82	; 0x52
 8000310:	d12f      	bne.n	8000372 <main+0x18e>
			reset_status = deviceReset();
 8000312:	f000 fc13 	bl	8000b3c <deviceReset>
 8000316:	4603      	mov	r3, r0
 8000318:	713b      	strb	r3, [r7, #4]
			if(reset_status == HAL_OK)
 800031a:	793b      	ldrb	r3, [r7, #4]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d121      	bne.n	8000364 <main+0x180>
				StateMachine = iddle;
 8000320:	4b61      	ldr	r3, [pc, #388]	; (80004a8 <main+0x2c4>)
 8000322:	2249      	movs	r2, #73	; 0x49
 8000324:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB,ERRO_Pin, GPIO_PIN_RESET);
 8000326:	2200      	movs	r2, #0
 8000328:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800032c:	4860      	ldr	r0, [pc, #384]	; (80004b0 <main+0x2cc>)
 800032e:	f002 fb61 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,STOP_Pin, GPIO_PIN_RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000338:	485d      	ldr	r0, [pc, #372]	; (80004b0 <main+0x2cc>)
 800033a:	f002 fb5b 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,CONFIG_Pin, GPIO_PIN_RESET);
 800033e:	2200      	movs	r2, #0
 8000340:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000344:	485a      	ldr	r0, [pc, #360]	; (80004b0 <main+0x2cc>)
 8000346:	f002 fb55 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB,ACQUISITION_Pin, GPIO_PIN_RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000350:	4857      	ldr	r0, [pc, #348]	; (80004b0 <main+0x2cc>)
 8000352:	f002 fb4f 	bl	80029f4 <HAL_GPIO_WritePin>
				EndReception = '\0';
 8000356:	4b59      	ldr	r3, [pc, #356]	; (80004bc <main+0x2d8>)
 8000358:	2200      	movs	r2, #0
 800035a:	701a      	strb	r2, [r3, #0]
				USB_FLAG = 0;
 800035c:	4b55      	ldr	r3, [pc, #340]	; (80004b4 <main+0x2d0>)
 800035e:	2200      	movs	r2, #0
 8000360:	701a      	strb	r2, [r3, #0]
	  break;
 8000362:	e201      	b.n	8000768 <main+0x584>
				StateMachine = iddle;
 8000364:	4b50      	ldr	r3, [pc, #320]	; (80004a8 <main+0x2c4>)
 8000366:	2249      	movs	r2, #73	; 0x49
 8000368:	701a      	strb	r2, [r3, #0]
				EndReception = Reset;
 800036a:	4b54      	ldr	r3, [pc, #336]	; (80004bc <main+0x2d8>)
 800036c:	2252      	movs	r2, #82	; 0x52
 800036e:	701a      	strb	r2, [r3, #0]
	  break;
 8000370:	e1fa      	b.n	8000768 <main+0x584>
		else if(USB_FLAG == 0 && EndReception == '\0') StateMachine = iddle;
 8000372:	4b50      	ldr	r3, [pc, #320]	; (80004b4 <main+0x2d0>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	2b00      	cmp	r3, #0
 8000378:	f040 81f6 	bne.w	8000768 <main+0x584>
 800037c:	4b4f      	ldr	r3, [pc, #316]	; (80004bc <main+0x2d8>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	2b00      	cmp	r3, #0
 8000382:	f040 81f1 	bne.w	8000768 <main+0x584>
 8000386:	4b48      	ldr	r3, [pc, #288]	; (80004a8 <main+0x2c4>)
 8000388:	2249      	movs	r2, #73	; 0x49
 800038a:	701a      	strb	r2, [r3, #0]
	  break;
 800038c:	e1ec      	b.n	8000768 <main+0x584>

	  case Inicio:
				StateMachine = selectCommand(receive_message);
 800038e:	4b4d      	ldr	r3, [pc, #308]	; (80004c4 <main+0x2e0>)
 8000390:	466c      	mov	r4, sp
 8000392:	f103 0210 	add.w	r2, r3, #16
 8000396:	ca07      	ldmia	r2, {r0, r1, r2}
 8000398:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800039c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800039e:	f000 fd73 	bl	8000e88 <selectCommand>
 80003a2:	4603      	mov	r3, r0
 80003a4:	b2da      	uxtb	r2, r3
 80003a6:	4b40      	ldr	r3, [pc, #256]	; (80004a8 <main+0x2c4>)
 80003a8:	701a      	strb	r2, [r3, #0]
	  break;
 80003aa:	e1e0      	b.n	800076e <main+0x58a>

	  case Identification:
			getID();
 80003ac:	f000 fda6 	bl	8000efc <getID>
			TransmitData(receive_message,infoDevice.Id,8);
 80003b0:	4b45      	ldr	r3, [pc, #276]	; (80004c8 <main+0x2e4>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4619      	mov	r1, r3
 80003b6:	4b43      	ldr	r3, [pc, #268]	; (80004c4 <main+0x2e0>)
 80003b8:	2208      	movs	r2, #8
 80003ba:	9204      	str	r2, [sp, #16]
 80003bc:	9103      	str	r1, [sp, #12]
 80003be:	466c      	mov	r4, sp
 80003c0:	f103 0210 	add.w	r2, r3, #16
 80003c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80003c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80003ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003cc:	f000 fe12 	bl	8000ff4 <TransmitData>
			StateMachine = iddle;
 80003d0:	4b35      	ldr	r3, [pc, #212]	; (80004a8 <main+0x2c4>)
 80003d2:	2249      	movs	r2, #73	; 0x49
 80003d4:	701a      	strb	r2, [r3, #0]
			EndReception = '\0';
 80003d6:	4b39      	ldr	r3, [pc, #228]	; (80004bc <main+0x2d8>)
 80003d8:	2200      	movs	r2, #0
 80003da:	701a      	strb	r2, [r3, #0]
			USB_FLAG = 0;
 80003dc:	4b35      	ldr	r3, [pc, #212]	; (80004b4 <main+0x2d0>)
 80003de:	2200      	movs	r2, #0
 80003e0:	701a      	strb	r2, [r3, #0]
	  break;
 80003e2:	e1c4      	b.n	800076e <main+0x58a>

	  case Config:
		DeviceParamenter(receive_message);
 80003e4:	4b37      	ldr	r3, [pc, #220]	; (80004c4 <main+0x2e0>)
 80003e6:	466c      	mov	r4, sp
 80003e8:	f103 0210 	add.w	r2, r3, #16
 80003ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80003ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80003f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80003f4:	f000 fdba 	bl	8000f6c <DeviceParamenter>
		HAL_GPIO_WritePin(GPIOB,CONFIG_Pin, GPIO_PIN_SET);
 80003f8:	2201      	movs	r2, #1
 80003fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003fe:	482c      	ldr	r0, [pc, #176]	; (80004b0 <main+0x2cc>)
 8000400:	f002 faf8 	bl	80029f4 <HAL_GPIO_WritePin>
		TransmitData(receive_message,2,7);
 8000404:	4b2f      	ldr	r3, [pc, #188]	; (80004c4 <main+0x2e0>)
 8000406:	2207      	movs	r2, #7
 8000408:	9204      	str	r2, [sp, #16]
 800040a:	2202      	movs	r2, #2
 800040c:	9203      	str	r2, [sp, #12]
 800040e:	466c      	mov	r4, sp
 8000410:	f103 0210 	add.w	r2, r3, #16
 8000414:	ca07      	ldmia	r2, {r0, r1, r2}
 8000416:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800041a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800041c:	f000 fdea 	bl	8000ff4 <TransmitData>
		StateMachine = iddle;
 8000420:	4b21      	ldr	r3, [pc, #132]	; (80004a8 <main+0x2c4>)
 8000422:	2249      	movs	r2, #73	; 0x49
 8000424:	701a      	strb	r2, [r3, #0]
		EndReception = '\0';
 8000426:	4b25      	ldr	r3, [pc, #148]	; (80004bc <main+0x2d8>)
 8000428:	2200      	movs	r2, #0
 800042a:	701a      	strb	r2, [r3, #0]
		USB_FLAG = 0;
 800042c:	4b21      	ldr	r3, [pc, #132]	; (80004b4 <main+0x2d0>)
 800042e:	2200      	movs	r2, #0
 8000430:	701a      	strb	r2, [r3, #0]
	   break;
 8000432:	e19c      	b.n	800076e <main+0x58a>

	   /*Primeiro TransmitData(receive_message,0,7) envia a confirmação da msg de inicio de leitura
		*Segundo TransmitData(receive_message,counterPulso,67) envia os dados
		*/
	  case Start:
		startFlag = StartDevice(deviceFlag);
 8000434:	4b25      	ldr	r3, [pc, #148]	; (80004cc <main+0x2e8>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	4618      	mov	r0, r3
 800043a:	f000 fdbd 	bl	8000fb8 <StartDevice>
 800043e:	4603      	mov	r3, r0
 8000440:	71bb      	strb	r3, [r7, #6]
		deviceFlag = startFlag;
 8000442:	4a22      	ldr	r2, [pc, #136]	; (80004cc <main+0x2e8>)
 8000444:	79bb      	ldrb	r3, [r7, #6]
 8000446:	7013      	strb	r3, [r2, #0]
		if(deviceFlag == 1)
 8000448:	4b20      	ldr	r3, [pc, #128]	; (80004cc <main+0x2e8>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	2b01      	cmp	r3, #1
 800044e:	d11d      	bne.n	800048c <main+0x2a8>
		{
			HAL_GPIO_WritePin(GPIOB,STOP_Pin, GPIO_PIN_RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000456:	4816      	ldr	r0, [pc, #88]	; (80004b0 <main+0x2cc>)
 8000458:	f002 facc 	bl	80029f4 <HAL_GPIO_WritePin>
			TransmitData(receive_message,0,7);
 800045c:	4b19      	ldr	r3, [pc, #100]	; (80004c4 <main+0x2e0>)
 800045e:	2207      	movs	r2, #7
 8000460:	9204      	str	r2, [sp, #16]
 8000462:	2200      	movs	r2, #0
 8000464:	9203      	str	r2, [sp, #12]
 8000466:	466c      	mov	r4, sp
 8000468:	f103 0210 	add.w	r2, r3, #16
 800046c:	ca07      	ldmia	r2, {r0, r1, r2}
 800046e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000472:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000474:	f000 fdbe 	bl	8000ff4 <TransmitData>
			StateMachine = Read;
 8000478:	4b0b      	ldr	r3, [pc, #44]	; (80004a8 <main+0x2c4>)
 800047a:	2234      	movs	r2, #52	; 0x34
 800047c:	701a      	strb	r2, [r3, #0]
			EndReception = '\0';
 800047e:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <main+0x2d8>)
 8000480:	2200      	movs	r2, #0
 8000482:	701a      	strb	r2, [r3, #0]
			USB_FLAG = 0;
 8000484:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <main+0x2d0>)
 8000486:	2200      	movs	r2, #0
 8000488:	701a      	strb	r2, [r3, #0]
			StateMachine = iddle;
			EndReception = '\0';
			USB_FLAG = 0;
		}

	  break;
 800048a:	e170      	b.n	800076e <main+0x58a>
			StateMachine = iddle;
 800048c:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <main+0x2c4>)
 800048e:	2249      	movs	r2, #73	; 0x49
 8000490:	701a      	strb	r2, [r3, #0]
			EndReception = '\0';
 8000492:	4b0a      	ldr	r3, [pc, #40]	; (80004bc <main+0x2d8>)
 8000494:	2200      	movs	r2, #0
 8000496:	701a      	strb	r2, [r3, #0]
			USB_FLAG = 0;
 8000498:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <main+0x2d0>)
 800049a:	2200      	movs	r2, #0
 800049c:	701a      	strb	r2, [r3, #0]
	  break;
 800049e:	e166      	b.n	800076e <main+0x58a>
 80004a0:	200002b8 	.word	0x200002b8
 80004a4:	2000022c 	.word	0x2000022c
 80004a8:	2000036e 	.word	0x2000036e
 80004ac:	40011000 	.word	0x40011000
 80004b0:	40010c00 	.word	0x40010c00
 80004b4:	200002b6 	.word	0x200002b6
 80004b8:	20000270 	.word	0x20000270
 80004bc:	200002b7 	.word	0x200002b7
 80004c0:	20000000 	.word	0x20000000
 80004c4:	20000340 	.word	0x20000340
 80004c8:	2000035c 	.word	0x2000035c
 80004cc:	200003a5 	.word	0x200003a5

	  case Read:
		if(timerEnable == HAL_OK)
 80004d0:	4ba7      	ldr	r3, [pc, #668]	; (8000770 <main+0x58c>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d117      	bne.n	8000508 <main+0x324>
		{
			pulseCounter = 0;
 80004d8:	4ba6      	ldr	r3, [pc, #664]	; (8000774 <main+0x590>)
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
			timerEnable = 1;
 80004de:	4ba4      	ldr	r3, [pc, #656]	; (8000770 <main+0x58c>)
 80004e0:	2201      	movs	r2, #1
 80004e2:	601a      	str	r2, [r3, #0]
			acquiredTime = 0;
 80004e4:	4ba4      	ldr	r3, [pc, #656]	; (8000778 <main+0x594>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
			newTime = 0;
 80004ea:	4ba4      	ldr	r3, [pc, #656]	; (800077c <main+0x598>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim3);
 80004f0:	48a3      	ldr	r0, [pc, #652]	; (8000780 <main+0x59c>)
 80004f2:	f004 fcad 	bl	8004e50 <HAL_TIM_Base_Start_IT>
			readFlag = 1;
 80004f6:	4ba3      	ldr	r3, [pc, #652]	; (8000784 <main+0x5a0>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	701a      	strb	r2, [r3, #0]
			EndReception = '\0';
 80004fc:	4ba2      	ldr	r3, [pc, #648]	; (8000788 <main+0x5a4>)
 80004fe:	2200      	movs	r2, #0
 8000500:	701a      	strb	r2, [r3, #0]
			USB_FLAG = 0;
 8000502:	4ba2      	ldr	r3, [pc, #648]	; (800078c <main+0x5a8>)
 8000504:	2200      	movs	r2, #0
 8000506:	701a      	strb	r2, [r3, #0]

		}
		if(readStatus == AUTO)
 8000508:	4ba1      	ldr	r3, [pc, #644]	; (8000790 <main+0x5ac>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2b46      	cmp	r3, #70	; 0x46
 800050e:	d153      	bne.n	80005b8 <main+0x3d4>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000516:	489f      	ldr	r0, [pc, #636]	; (8000794 <main+0x5b0>)
 8000518:	f002 fa6c 	bl	80029f4 <HAL_GPIO_WritePin>
			if(transmitFlag == 1 && USB_FLAG == 0)
 800051c:	4b9e      	ldr	r3, [pc, #632]	; (8000798 <main+0x5b4>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d131      	bne.n	8000588 <main+0x3a4>
 8000524:	4b99      	ldr	r3, [pc, #612]	; (800078c <main+0x5a8>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d12d      	bne.n	8000588 <main+0x3a4>
			{

				for(i=0;i<10;i++) counterPulso[i] = fimPulso[i];
 800052c:	2300      	movs	r3, #0
 800052e:	71fb      	strb	r3, [r7, #7]
 8000530:	e00a      	b.n	8000548 <main+0x364>
 8000532:	79fa      	ldrb	r2, [r7, #7]
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	4999      	ldr	r1, [pc, #612]	; (800079c <main+0x5b8>)
 8000538:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800053c:	4998      	ldr	r1, [pc, #608]	; (80007a0 <main+0x5bc>)
 800053e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	3301      	adds	r3, #1
 8000546:	71fb      	strb	r3, [r7, #7]
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	2b09      	cmp	r3, #9
 800054c:	d9f1      	bls.n	8000532 <main+0x34e>
				TransmitData(receive_message,counterPulso,67);
 800054e:	4b95      	ldr	r3, [pc, #596]	; (80007a4 <main+0x5c0>)
 8000550:	2243      	movs	r2, #67	; 0x43
 8000552:	9204      	str	r2, [sp, #16]
 8000554:	4a92      	ldr	r2, [pc, #584]	; (80007a0 <main+0x5bc>)
 8000556:	9203      	str	r2, [sp, #12]
 8000558:	466c      	mov	r4, sp
 800055a:	f103 0210 	add.w	r2, r3, #16
 800055e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000560:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000564:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000566:	f000 fd45 	bl	8000ff4 <TransmitData>
				transmitFlag = 0;
 800056a:	4b8b      	ldr	r3, [pc, #556]	; (8000798 <main+0x5b4>)
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOA, ACQUISITION_Pin);
 8000570:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000574:	488c      	ldr	r0, [pc, #560]	; (80007a8 <main+0x5c4>)
 8000576:	f002 fa55 	bl	8002a24 <HAL_GPIO_TogglePin>
				StateMachine = Read;
 800057a:	4b8c      	ldr	r3, [pc, #560]	; (80007ac <main+0x5c8>)
 800057c:	2234      	movs	r2, #52	; 0x34
 800057e:	701a      	strb	r2, [r3, #0]
				EndReception = '\0';
 8000580:	4b81      	ldr	r3, [pc, #516]	; (8000788 <main+0x5a4>)
 8000582:	2200      	movs	r2, #0
 8000584:	701a      	strb	r2, [r3, #0]
				for(i=0;i<10;i++) counterPulso[i] = 0;
				StateMachine = iddle;
				EndReception = '\0';
				USB_FLAG = 0;
		}
	  break;
 8000586:	e0f1      	b.n	800076c <main+0x588>
			else if(USB_FLAG == 1)
 8000588:	4b80      	ldr	r3, [pc, #512]	; (800078c <main+0x5a8>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b01      	cmp	r3, #1
 800058e:	d10f      	bne.n	80005b0 <main+0x3cc>
				HAL_GPIO_WritePin(GPIOB,CONFIG_Pin, GPIO_PIN_RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000596:	4886      	ldr	r0, [pc, #536]	; (80007b0 <main+0x5cc>)
 8000598:	f002 fa2c 	bl	80029f4 <HAL_GPIO_WritePin>
				HAL_TIM_Base_Stop_IT(&htim3);
 800059c:	4878      	ldr	r0, [pc, #480]	; (8000780 <main+0x59c>)
 800059e:	f004 fca9 	bl	8004ef4 <HAL_TIM_Base_Stop_IT>
				HAL_Delay(1);
 80005a2:	2001      	movs	r0, #1
 80005a4:	f001 fc94 	bl	8001ed0 <HAL_Delay>
				StateMachine = iddle;
 80005a8:	4b80      	ldr	r3, [pc, #512]	; (80007ac <main+0x5c8>)
 80005aa:	2249      	movs	r2, #73	; 0x49
 80005ac:	701a      	strb	r2, [r3, #0]
	  break;
 80005ae:	e0dd      	b.n	800076c <main+0x588>
				StateMachine = Read;
 80005b0:	4b7e      	ldr	r3, [pc, #504]	; (80007ac <main+0x5c8>)
 80005b2:	2234      	movs	r2, #52	; 0x34
 80005b4:	701a      	strb	r2, [r3, #0]
	  break;
 80005b6:	e0d9      	b.n	800076c <main+0x588>
		else if (readStatus == MAN)
 80005b8:	4b75      	ldr	r3, [pc, #468]	; (8000790 <main+0x5ac>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b4d      	cmp	r3, #77	; 0x4d
 80005be:	f040 80d5 	bne.w	800076c <main+0x588>
				while(transmitFlag==0);
 80005c2:	bf00      	nop
 80005c4:	4b74      	ldr	r3, [pc, #464]	; (8000798 <main+0x5b4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d0fb      	beq.n	80005c4 <main+0x3e0>
				HAL_GPIO_TogglePin(GPIOA, ACQUISITION_Pin);
 80005cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d0:	4875      	ldr	r0, [pc, #468]	; (80007a8 <main+0x5c4>)
 80005d2:	f002 fa27 	bl	8002a24 <HAL_GPIO_TogglePin>
				transmitFlag = 0;
 80005d6:	4b70      	ldr	r3, [pc, #448]	; (8000798 <main+0x5b4>)
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
				for(i=0;i<10;i++) counterPulso[i] = fimPulso[i];
 80005dc:	2300      	movs	r3, #0
 80005de:	71fb      	strb	r3, [r7, #7]
 80005e0:	e00a      	b.n	80005f8 <main+0x414>
 80005e2:	79fa      	ldrb	r2, [r7, #7]
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	496d      	ldr	r1, [pc, #436]	; (800079c <main+0x5b8>)
 80005e8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80005ec:	496c      	ldr	r1, [pc, #432]	; (80007a0 <main+0x5bc>)
 80005ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	3301      	adds	r3, #1
 80005f6:	71fb      	strb	r3, [r7, #7]
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	2b09      	cmp	r3, #9
 80005fc:	d9f1      	bls.n	80005e2 <main+0x3fe>
				TransmitData(receive_message,counterPulso,67);
 80005fe:	4b69      	ldr	r3, [pc, #420]	; (80007a4 <main+0x5c0>)
 8000600:	2243      	movs	r2, #67	; 0x43
 8000602:	9204      	str	r2, [sp, #16]
 8000604:	4a66      	ldr	r2, [pc, #408]	; (80007a0 <main+0x5bc>)
 8000606:	9203      	str	r2, [sp, #12]
 8000608:	466c      	mov	r4, sp
 800060a:	f103 0210 	add.w	r2, r3, #16
 800060e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000610:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000614:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000616:	f000 fced 	bl	8000ff4 <TransmitData>
				for(i=0;i<10;i++) counterPulso[i] = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	71fb      	strb	r3, [r7, #7]
 800061e:	e007      	b.n	8000630 <main+0x44c>
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	4a5f      	ldr	r2, [pc, #380]	; (80007a0 <main+0x5bc>)
 8000624:	2100      	movs	r1, #0
 8000626:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	3301      	adds	r3, #1
 800062e:	71fb      	strb	r3, [r7, #7]
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	2b09      	cmp	r3, #9
 8000634:	d9f4      	bls.n	8000620 <main+0x43c>
				StateMachine = iddle;
 8000636:	4b5d      	ldr	r3, [pc, #372]	; (80007ac <main+0x5c8>)
 8000638:	2249      	movs	r2, #73	; 0x49
 800063a:	701a      	strb	r2, [r3, #0]
				EndReception = '\0';
 800063c:	4b52      	ldr	r3, [pc, #328]	; (8000788 <main+0x5a4>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
				USB_FLAG = 0;
 8000642:	4b52      	ldr	r3, [pc, #328]	; (800078c <main+0x5a8>)
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
	  break;
 8000648:	e090      	b.n	800076c <main+0x588>

	  case ReadError:
		HAL_GPIO_WritePin(GPIOA,ACQUISITION_Pin, GPIO_PIN_SET);
 800064a:	2201      	movs	r2, #1
 800064c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000650:	4855      	ldr	r0, [pc, #340]	; (80007a8 <main+0x5c4>)
 8000652:	f002 f9cf 	bl	80029f4 <HAL_GPIO_WritePin>
		TransmitData(receive_message,counterPulso,67);
 8000656:	4b53      	ldr	r3, [pc, #332]	; (80007a4 <main+0x5c0>)
 8000658:	2243      	movs	r2, #67	; 0x43
 800065a:	9204      	str	r2, [sp, #16]
 800065c:	4a50      	ldr	r2, [pc, #320]	; (80007a0 <main+0x5bc>)
 800065e:	9203      	str	r2, [sp, #12]
 8000660:	466c      	mov	r4, sp
 8000662:	f103 0210 	add.w	r2, r3, #16
 8000666:	ca07      	ldmia	r2, {r0, r1, r2}
 8000668:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800066c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800066e:	f000 fcc1 	bl	8000ff4 <TransmitData>
		HAL_GPIO_WritePin(GPIOA,ACQUISITION_Pin, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000678:	484b      	ldr	r0, [pc, #300]	; (80007a8 <main+0x5c4>)
 800067a:	f002 f9bb 	bl	80029f4 <HAL_GPIO_WritePin>
		StateMachine = iddle;
 800067e:	4b4b      	ldr	r3, [pc, #300]	; (80007ac <main+0x5c8>)
 8000680:	2249      	movs	r2, #73	; 0x49
 8000682:	701a      	strb	r2, [r3, #0]
		EndReception = '\0';
 8000684:	4b40      	ldr	r3, [pc, #256]	; (8000788 <main+0x5a4>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
		USB_FLAG = 0;
 800068a:	4b40      	ldr	r3, [pc, #256]	; (800078c <main+0x5a8>)
 800068c:	2200      	movs	r2, #0
 800068e:	701a      	strb	r2, [r3, #0]
	  break;
 8000690:	e06d      	b.n	800076e <main+0x58a>

	  case Stop:
		stopFlag = StopDevice(deviceFlag);
 8000692:	4b48      	ldr	r3, [pc, #288]	; (80007b4 <main+0x5d0>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	4618      	mov	r0, r3
 8000698:	f001 f864 	bl	8001764 <StopDevice>
 800069c:	4603      	mov	r3, r0
 800069e:	717b      	strb	r3, [r7, #5]
		deviceFlag = stopFlag;
 80006a0:	4a44      	ldr	r2, [pc, #272]	; (80007b4 <main+0x5d0>)
 80006a2:	797b      	ldrb	r3, [r7, #5]
 80006a4:	7013      	strb	r3, [r2, #0]
		if(stopFlag == 0)
 80006a6:	797b      	ldrb	r3, [r7, #5]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d123      	bne.n	80006f4 <main+0x510>
		{
			HAL_GPIO_WritePin(GPIOB,STOP_Pin, GPIO_PIN_SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006b2:	483f      	ldr	r0, [pc, #252]	; (80007b0 <main+0x5cc>)
 80006b4:	f002 f99e 	bl	80029f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA,ACQUISITION_Pin, GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006be:	483a      	ldr	r0, [pc, #232]	; (80007a8 <main+0x5c4>)
 80006c0:	f002 f998 	bl	80029f4 <HAL_GPIO_WritePin>
			TransmitData(receive_message,0,7);
 80006c4:	4b37      	ldr	r3, [pc, #220]	; (80007a4 <main+0x5c0>)
 80006c6:	2207      	movs	r2, #7
 80006c8:	9204      	str	r2, [sp, #16]
 80006ca:	2200      	movs	r2, #0
 80006cc:	9203      	str	r2, [sp, #12]
 80006ce:	466c      	mov	r4, sp
 80006d0:	f103 0210 	add.w	r2, r3, #16
 80006d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80006d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80006da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006dc:	f000 fc8a 	bl	8000ff4 <TransmitData>
			StateMachine = iddle;
 80006e0:	4b32      	ldr	r3, [pc, #200]	; (80007ac <main+0x5c8>)
 80006e2:	2249      	movs	r2, #73	; 0x49
 80006e4:	701a      	strb	r2, [r3, #0]
			EndReception = '\0';
 80006e6:	4b28      	ldr	r3, [pc, #160]	; (8000788 <main+0x5a4>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	701a      	strb	r2, [r3, #0]
			USB_FLAG = 0;
 80006ec:	4b27      	ldr	r3, [pc, #156]	; (800078c <main+0x5a8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB,STOP_Pin, GPIO_PIN_RESET);
			StateMachine = iddle;
			EndReception = '\0';
			USB_FLAG = 0;
		}
	   break;
 80006f2:	e03c      	b.n	800076e <main+0x58a>
			HAL_GPIO_WritePin(GPIOB,STOP_Pin, GPIO_PIN_RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006fa:	482d      	ldr	r0, [pc, #180]	; (80007b0 <main+0x5cc>)
 80006fc:	f002 f97a 	bl	80029f4 <HAL_GPIO_WritePin>
			StateMachine = iddle;
 8000700:	4b2a      	ldr	r3, [pc, #168]	; (80007ac <main+0x5c8>)
 8000702:	2249      	movs	r2, #73	; 0x49
 8000704:	701a      	strb	r2, [r3, #0]
			EndReception = '\0';
 8000706:	4b20      	ldr	r3, [pc, #128]	; (8000788 <main+0x5a4>)
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]
			USB_FLAG = 0;
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <main+0x5a8>)
 800070e:	2200      	movs	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]
	   break;
 8000712:	e02c      	b.n	800076e <main+0x58a>

	  case error:
		HAL_GPIO_WritePin(GPIOB,ERRO_Pin, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800071a:	4825      	ldr	r0, [pc, #148]	; (80007b0 <main+0x5cc>)
 800071c:	f002 f96a 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,CONFIG_Pin, GPIO_PIN_RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000726:	4822      	ldr	r0, [pc, #136]	; (80007b0 <main+0x5cc>)
 8000728:	f002 f964 	bl	80029f4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,STOP_Pin, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000732:	481f      	ldr	r0, [pc, #124]	; (80007b0 <main+0x5cc>)
 8000734:	f002 f95e 	bl	80029f4 <HAL_GPIO_WritePin>
		TransmitData(receive_message,0,8);
 8000738:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <main+0x5c0>)
 800073a:	2208      	movs	r2, #8
 800073c:	9204      	str	r2, [sp, #16]
 800073e:	2200      	movs	r2, #0
 8000740:	9203      	str	r2, [sp, #12]
 8000742:	466c      	mov	r4, sp
 8000744:	f103 0210 	add.w	r2, r3, #16
 8000748:	ca07      	ldmia	r2, {r0, r1, r2}
 800074a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800074e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000750:	f000 fc50 	bl	8000ff4 <TransmitData>
		StateMachine = iddle;
 8000754:	4b15      	ldr	r3, [pc, #84]	; (80007ac <main+0x5c8>)
 8000756:	2249      	movs	r2, #73	; 0x49
 8000758:	701a      	strb	r2, [r3, #0]
		EndReception = '\0';
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <main+0x5a4>)
 800075c:	2200      	movs	r2, #0
 800075e:	701a      	strb	r2, [r3, #0]
		USB_FLAG = 0;
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <main+0x5a8>)
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]
		break;
 8000766:	e002      	b.n	800076e <main+0x58a>
	  break;
 8000768:	bf00      	nop
 800076a:	e56a      	b.n	8000242 <main+0x5e>
	  break;
 800076c:	bf00      	nop
  switch(StateMachine)
 800076e:	e568      	b.n	8000242 <main+0x5e>
 8000770:	20000370 	.word	0x20000370
 8000774:	2000033c 	.word	0x2000033c
 8000778:	200002d4 	.word	0x200002d4
 800077c:	200002d0 	.word	0x200002d0
 8000780:	200001e4 	.word	0x200001e4
 8000784:	20000338 	.word	0x20000338
 8000788:	200002b7 	.word	0x200002b7
 800078c:	200002b6 	.word	0x200002b6
 8000790:	200002c6 	.word	0x200002c6
 8000794:	40011000 	.word	0x40011000
 8000798:	200002cc 	.word	0x200002cc
 800079c:	20000310 	.word	0x20000310
 80007a0:	200002e8 	.word	0x200002e8
 80007a4:	20000340 	.word	0x20000340
 80007a8:	40010800 	.word	0x40010800
 80007ac:	2000036e 	.word	0x2000036e
 80007b0:	40010c00 	.word	0x40010c00
 80007b4:	200003a5 	.word	0x200003a5

080007b8 <SystemClock_Config>:
/**
* @brief System Clock Configuration
* @retval None
*/
void SystemClock_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b094      	sub	sp, #80	; 0x50
 80007bc:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007c2:	2228      	movs	r2, #40	; 0x28
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f00a fbc0 	bl	800af4c <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007cc:	f107 0314 	add.w	r3, r7, #20
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]

/** Initializes the RCC Oscillators according to the specified parameters
* in the RCC_OscInitTypeDef structure.
*/
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e8:	2301      	movs	r3, #1
 80007ea:	62bb      	str	r3, [r7, #40]	; 0x28
RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007f0:	62fb      	str	r3, [r7, #44]	; 0x2c
RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	633b      	str	r3, [r7, #48]	; 0x30
RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f6:	2301      	movs	r3, #1
 80007f8:	63bb      	str	r3, [r7, #56]	; 0x38
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fa:	2302      	movs	r3, #2
 80007fc:	647b      	str	r3, [r7, #68]	; 0x44
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000802:	64bb      	str	r3, [r7, #72]	; 0x48
RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000804:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000808:	64fb      	str	r3, [r7, #76]	; 0x4c
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800080e:	4618      	mov	r0, r3
 8000810:	f003 fdfe 	bl	8004410 <HAL_RCC_OscConfig>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0x66>
{
Error_Handler();
 800081a:	f001 f97f 	bl	8001b1c <Error_Handler>
}
/** Initializes the CPU, AHB and APB buses clocks
*/
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081e:	230f      	movs	r3, #15
 8000820:	617b      	str	r3, [r7, #20]
						  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000822:	2302      	movs	r3, #2
 8000824:	61bb      	str	r3, [r7, #24]
RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800082a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800082e:	623b      	str	r3, [r7, #32]
RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	627b      	str	r3, [r7, #36]	; 0x24

if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	2102      	movs	r1, #2
 800083a:	4618      	mov	r0, r3
 800083c:	f004 f86a 	bl	8004914 <HAL_RCC_ClockConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0x92>
{
Error_Handler();
 8000846:	f001 f969 	bl	8001b1c <Error_Handler>
}
PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800084a:	2310      	movs	r3, #16
 800084c:	607b      	str	r3, [r7, #4]
PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	4618      	mov	r0, r3
 8000856:	f004 f9f5 	bl	8004c44 <HAL_RCCEx_PeriphCLKConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0xac>
{
Error_Handler();
 8000860:	f001 f95c 	bl	8001b1c <Error_Handler>
}
}
 8000864:	bf00      	nop
 8000866:	3750      	adds	r7, #80	; 0x50
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <MX_TIM2_Init>:
* @brief TIM2 Initialization Function
* @param None
* @retval None
*/
static void MX_TIM2_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08c      	sub	sp, #48	; 0x30
 8000870:	af00      	add	r7, sp, #0

/* USER CODE BEGIN TIM2_Init 0 */

/* USER CODE END TIM2_Init 0 */

TIM_Encoder_InitTypeDef sConfig = {0};
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	2224      	movs	r2, #36	; 0x24
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f00a fb66 	bl	800af4c <memset>
TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]

/* USER CODE BEGIN TIM2_Init 1 */

/* USER CODE END TIM2_Init 1 */
htim2.Instance = TIM2;
 8000888:	4b21      	ldr	r3, [pc, #132]	; (8000910 <MX_TIM2_Init+0xa4>)
 800088a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800088e:	601a      	str	r2, [r3, #0]
htim2.Init.Prescaler = 0;
 8000890:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <MX_TIM2_Init+0xa4>)
 8000892:	2200      	movs	r2, #0
 8000894:	605a      	str	r2, [r3, #4]
htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000896:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <MX_TIM2_Init+0xa4>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
htim2.Init.Period = 65535;
 800089c:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <MX_TIM2_Init+0xa4>)
 800089e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008a2:	60da      	str	r2, [r3, #12]
htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a4:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <MX_TIM2_Init+0xa4>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008aa:	4b19      	ldr	r3, [pc, #100]	; (8000910 <MX_TIM2_Init+0xa4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008b0:	2303      	movs	r3, #3
 80008b2:	60fb      	str	r3, [r7, #12]
sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008b4:	2300      	movs	r3, #0
 80008b6:	613b      	str	r3, [r7, #16]
sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008b8:	2301      	movs	r3, #1
 80008ba:	617b      	str	r3, [r7, #20]
sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	61bb      	str	r3, [r7, #24]
sConfig.IC1Filter = 15;
 80008c0:	230f      	movs	r3, #15
 80008c2:	61fb      	str	r3, [r7, #28]
sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008c8:	2301      	movs	r3, #1
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
sConfig.IC2Filter = 15;
 80008d0:	230f      	movs	r3, #15
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	4619      	mov	r1, r3
 80008da:	480d      	ldr	r0, [pc, #52]	; (8000910 <MX_TIM2_Init+0xa4>)
 80008dc:	f004 fb38 	bl	8004f50 <HAL_TIM_Encoder_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM2_Init+0x7e>
{
Error_Handler();
 80008e6:	f001 f919 	bl	8001b1c <Error_Handler>
}
sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	4619      	mov	r1, r3
 80008f6:	4806      	ldr	r0, [pc, #24]	; (8000910 <MX_TIM2_Init+0xa4>)
 80008f8:	f005 f832 	bl	8005960 <HAL_TIMEx_MasterConfigSynchronization>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM2_Init+0x9a>
{
Error_Handler();
 8000902:	f001 f90b 	bl	8001b1c <Error_Handler>
}
/* USER CODE BEGIN TIM2_Init 2 */

/* USER CODE END TIM2_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	3730      	adds	r7, #48	; 0x30
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	2000019c 	.word	0x2000019c

08000914 <MX_TIM3_Init>:
* @brief TIM3 Initialization Function
* @param None
* @retval None
*/
static void MX_TIM3_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0

/* USER CODE BEGIN TIM3_Init 0 */

/* USER CODE END TIM3_Init 0 */

TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800091a:	f107 0308 	add.w	r3, r7, #8
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000928:	463b      	mov	r3, r7
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]

/* USER CODE BEGIN TIM3_Init 1 */

/* USER CODE END TIM3_Init 1 */
htim3.Instance = TIM3;
 8000930:	4b1d      	ldr	r3, [pc, #116]	; (80009a8 <MX_TIM3_Init+0x94>)
 8000932:	4a1e      	ldr	r2, [pc, #120]	; (80009ac <MX_TIM3_Init+0x98>)
 8000934:	601a      	str	r2, [r3, #0]
htim3.Init.Prescaler = 72-1;
 8000936:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <MX_TIM3_Init+0x94>)
 8000938:	2247      	movs	r2, #71	; 0x47
 800093a:	605a      	str	r2, [r3, #4]
htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093c:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <MX_TIM3_Init+0x94>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
htim3.Init.Period = 1000-1;
 8000942:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <MX_TIM3_Init+0x94>)
 8000944:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000948:	60da      	str	r2, [r3, #12]
htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800094a:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <MX_TIM3_Init+0x94>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000950:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <MX_TIM3_Init+0x94>)
 8000952:	2200      	movs	r2, #0
 8000954:	619a      	str	r2, [r3, #24]
if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000956:	4814      	ldr	r0, [pc, #80]	; (80009a8 <MX_TIM3_Init+0x94>)
 8000958:	f004 fa2a 	bl	8004db0 <HAL_TIM_Base_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM3_Init+0x52>
{
Error_Handler();
 8000962:	f001 f8db 	bl	8001b1c <Error_Handler>
}
sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096a:	60bb      	str	r3, [r7, #8]
if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800096c:	f107 0308 	add.w	r3, r7, #8
 8000970:	4619      	mov	r1, r3
 8000972:	480d      	ldr	r0, [pc, #52]	; (80009a8 <MX_TIM3_Init+0x94>)
 8000974:	f004 fdf9 	bl	800556a <HAL_TIM_ConfigClockSource>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM3_Init+0x6e>
{
Error_Handler();
 800097e:	f001 f8cd 	bl	8001b1c <Error_Handler>
}
sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000982:	2300      	movs	r3, #0
 8000984:	603b      	str	r3, [r7, #0]
sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800098a:	463b      	mov	r3, r7
 800098c:	4619      	mov	r1, r3
 800098e:	4806      	ldr	r0, [pc, #24]	; (80009a8 <MX_TIM3_Init+0x94>)
 8000990:	f004 ffe6 	bl	8005960 <HAL_TIMEx_MasterConfigSynchronization>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM3_Init+0x8a>
{
Error_Handler();
 800099a:	f001 f8bf 	bl	8001b1c <Error_Handler>
}
/* USER CODE BEGIN TIM3_Init 2 */

/* USER CODE END TIM3_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200001e4 	.word	0x200001e4
 80009ac:	40000400 	.word	0x40000400

080009b0 <MX_USART2_UART_Init>:
* @brief USART2 Initialization Function
* @param None
* @retval None
*/
static void MX_USART2_UART_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
/* USER CODE END USART2_Init 0 */

/* USER CODE BEGIN USART2_Init 1 */

/* USER CODE END USART2_Init 1 */
huart2.Instance = USART2;
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009b6:	4a12      	ldr	r2, [pc, #72]	; (8000a00 <MX_USART2_UART_Init+0x50>)
 80009b8:	601a      	str	r2, [r3, #0]
huart2.Init.BaudRate = 115200;
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c0:	605a      	str	r2, [r3, #4]
huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
huart2.Init.StopBits = UART_STOPBITS_1;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
huart2.Init.Parity = UART_PARITY_NONE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
huart2.Init.Mode = UART_MODE_TX_RX;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009d6:	220c      	movs	r2, #12
 80009d8:	615a      	str	r2, [r3, #20]
huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]
if (HAL_UART_Init(&huart2) != HAL_OK)
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009e8:	f005 f82a 	bl	8005a40 <HAL_UART_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_USART2_UART_Init+0x46>
{
Error_Handler();
 80009f2:	f001 f893 	bl	8001b1c <Error_Handler>
}
/* USER CODE BEGIN USART2_Init 2 */

/* USER CODE END USART2_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	2000022c 	.word	0x2000022c
 8000a00:	40004400 	.word	0x40004400

08000a04 <MX_GPIO_Init>:
* @brief GPIO Initialization Function
* @param None
* @retval None
*/
static void MX_GPIO_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0
GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0a:	f107 0310 	add.w	r3, r7, #16
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]

/* GPIO Ports Clock Enable */
__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a18:	4b43      	ldr	r3, [pc, #268]	; (8000b28 <MX_GPIO_Init+0x124>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	4a42      	ldr	r2, [pc, #264]	; (8000b28 <MX_GPIO_Init+0x124>)
 8000a1e:	f043 0310 	orr.w	r3, r3, #16
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b40      	ldr	r3, [pc, #256]	; (8000b28 <MX_GPIO_Init+0x124>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f003 0310 	and.w	r3, r3, #16
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]
__HAL_RCC_GPIOD_CLK_ENABLE();
 8000a30:	4b3d      	ldr	r3, [pc, #244]	; (8000b28 <MX_GPIO_Init+0x124>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4a3c      	ldr	r2, [pc, #240]	; (8000b28 <MX_GPIO_Init+0x124>)
 8000a36:	f043 0320 	orr.w	r3, r3, #32
 8000a3a:	6193      	str	r3, [r2, #24]
 8000a3c:	4b3a      	ldr	r3, [pc, #232]	; (8000b28 <MX_GPIO_Init+0x124>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f003 0320 	and.w	r3, r3, #32
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a48:	4b37      	ldr	r3, [pc, #220]	; (8000b28 <MX_GPIO_Init+0x124>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	4a36      	ldr	r2, [pc, #216]	; (8000b28 <MX_GPIO_Init+0x124>)
 8000a4e:	f043 0304 	orr.w	r3, r3, #4
 8000a52:	6193      	str	r3, [r2, #24]
 8000a54:	4b34      	ldr	r3, [pc, #208]	; (8000b28 <MX_GPIO_Init+0x124>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	f003 0304 	and.w	r3, r3, #4
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	687b      	ldr	r3, [r7, #4]
__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a60:	4b31      	ldr	r3, [pc, #196]	; (8000b28 <MX_GPIO_Init+0x124>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4a30      	ldr	r2, [pc, #192]	; (8000b28 <MX_GPIO_Init+0x124>)
 8000a66:	f043 0308 	orr.w	r3, r3, #8
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b2e      	ldr	r3, [pc, #184]	; (8000b28 <MX_GPIO_Init+0x124>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f003 0308 	and.w	r3, r3, #8
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	683b      	ldr	r3, [r7, #0]

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7e:	482b      	ldr	r0, [pc, #172]	; (8000b2c <MX_GPIO_Init+0x128>)
 8000a80:	f001 ffb8 	bl	80029f4 <HAL_GPIO_WritePin>

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(GPIOB, STOP_Pin|ERRO_Pin|STATUS_Pin|CONFIG_Pin, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000a8a:	4829      	ldr	r0, [pc, #164]	; (8000b30 <MX_GPIO_Init+0x12c>)
 8000a8c:	f001 ffb2 	bl	80029f4 <HAL_GPIO_WritePin>

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(ACQUISITION_GPIO_Port, ACQUISITION_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a96:	4827      	ldr	r0, [pc, #156]	; (8000b34 <MX_GPIO_Init+0x130>)
 8000a98:	f001 ffac 	bl	80029f4 <HAL_GPIO_WritePin>

/*Configure GPIO pin : PC13 */
GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa0:	613b      	str	r3, [r7, #16]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	61fb      	str	r3, [r7, #28]
HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aae:	f107 0310 	add.w	r3, r7, #16
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	481d      	ldr	r0, [pc, #116]	; (8000b2c <MX_GPIO_Init+0x128>)
 8000ab6:	f001 fe19 	bl	80026ec <HAL_GPIO_Init>

/*Configure GPIO pins : STOP_Pin ERRO_Pin STATUS_Pin CONFIG_Pin */
GPIO_InitStruct.Pin = STOP_Pin|ERRO_Pin|STATUS_Pin|CONFIG_Pin;
 8000aba:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000abe:	613b      	str	r3, [r7, #16]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	61fb      	str	r3, [r7, #28]
HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4817      	ldr	r0, [pc, #92]	; (8000b30 <MX_GPIO_Init+0x12c>)
 8000ad4:	f001 fe0a 	bl	80026ec <HAL_GPIO_Init>

/*Configure GPIO pin : ACQUISITION_Pin */
GPIO_InitStruct.Pin = ACQUISITION_Pin;
 8000ad8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000adc:	613b      	str	r3, [r7, #16]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61bb      	str	r3, [r7, #24]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	61fb      	str	r3, [r7, #28]
HAL_GPIO_Init(ACQUISITION_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 0310 	add.w	r3, r7, #16
 8000aee:	4619      	mov	r1, r3
 8000af0:	4810      	ldr	r0, [pc, #64]	; (8000b34 <MX_GPIO_Init+0x130>)
 8000af2:	f001 fdfb 	bl	80026ec <HAL_GPIO_Init>

/*Configure GPIO pin : RESET_Pin */
GPIO_InitStruct.Pin = RESET_Pin;
 8000af6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000afa:	613b      	str	r3, [r7, #16]
GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000afc:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <MX_GPIO_Init+0x134>)
 8000afe:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61bb      	str	r3, [r7, #24]
HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 0310 	add.w	r3, r7, #16
 8000b08:	4619      	mov	r1, r3
 8000b0a:	480a      	ldr	r0, [pc, #40]	; (8000b34 <MX_GPIO_Init+0x130>)
 8000b0c:	f001 fdee 	bl	80026ec <HAL_GPIO_Init>

/* EXTI interrupt init*/
HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2100      	movs	r1, #0
 8000b14:	2017      	movs	r0, #23
 8000b16:	f001 fad6 	bl	80020c6 <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b1a:	2017      	movs	r0, #23
 8000b1c:	f001 faef 	bl	80020fe <HAL_NVIC_EnableIRQ>

}
 8000b20:	bf00      	nop
 8000b22:	3720      	adds	r7, #32
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	40011000 	.word	0x40011000
 8000b30:	40010c00 	.word	0x40010c00
 8000b34:	40010800 	.word	0x40010800
 8000b38:	10210000 	.word	0x10210000

08000b3c <deviceReset>:

/* USER CODE BEGIN 4 */
char deviceReset()
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
char i=0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	71fb      	strb	r3, [r7, #7]
char reset;
infoDevice.Id =0;
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <deviceReset+0x58>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
for(i=0;i<10;i++)
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	71fb      	strb	r3, [r7, #7]
 8000b50:	e012      	b.n	8000b78 <deviceReset+0x3c>
{
  counterPulso[i] = 0;
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	4a10      	ldr	r2, [pc, #64]	; (8000b98 <deviceReset+0x5c>)
 8000b56:	2100      	movs	r1, #0
 8000b58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  currentTime[i] = 0;
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	4a0f      	ldr	r2, [pc, #60]	; (8000b9c <deviceReset+0x60>)
 8000b60:	2100      	movs	r1, #0
 8000b62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  fimPulso[contador] = 0;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <deviceReset+0x64>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ba4 <deviceReset+0x68>)
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
for(i=0;i<10;i++)
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	3301      	adds	r3, #1
 8000b76:	71fb      	strb	r3, [r7, #7]
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	2b09      	cmp	r3, #9
 8000b7c:	d9e9      	bls.n	8000b52 <deviceReset+0x16>
}
reset = StopDevice(HAL_OK);
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f000 fdf0 	bl	8001764 <StopDevice>
 8000b84:	4603      	mov	r3, r0
 8000b86:	71bb      	strb	r3, [r7, #6]

return reset;
 8000b88:	79bb      	ldrb	r3, [r7, #6]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	2000035c 	.word	0x2000035c
 8000b98:	200002e8 	.word	0x200002e8
 8000b9c:	20000374 	.word	0x20000374
 8000ba0:	200003a0 	.word	0x200003a0
 8000ba4:	20000310 	.word	0x20000310

08000ba8 <structDados>:

void structDados()
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
uint8_t counter=0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	71fb      	strb	r3, [r7, #7]
receive_message.inicio = RXBufferArray[0];
 8000bb2:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <structDados+0x8c>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <structDados+0x90>)
 8000bba:	601a      	str	r2, [r3, #0]
receive_message.endOrigem = RXBufferArray[1];
 8000bbc:	4b1d      	ldr	r3, [pc, #116]	; (8000c34 <structDados+0x8c>)
 8000bbe:	785b      	ldrb	r3, [r3, #1]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b1d      	ldr	r3, [pc, #116]	; (8000c38 <structDados+0x90>)
 8000bc4:	605a      	str	r2, [r3, #4]
receive_message.endDestino = RXBufferArray[2];
 8000bc6:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <structDados+0x8c>)
 8000bc8:	789b      	ldrb	r3, [r3, #2]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <structDados+0x90>)
 8000bce:	609a      	str	r2, [r3, #8]
receive_message.funcao = RXBufferArray[3];
 8000bd0:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <structDados+0x8c>)
 8000bd2:	78db      	ldrb	r3, [r3, #3]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <structDados+0x90>)
 8000bd8:	60da      	str	r2, [r3, #12]
receive_message.dadosCount = RXBufferArray[4];
 8000bda:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <structDados+0x8c>)
 8000bdc:	791b      	ldrb	r3, [r3, #4]
 8000bde:	461a      	mov	r2, r3
 8000be0:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <structDados+0x90>)
 8000be2:	611a      	str	r2, [r3, #16]
while(counter<receive_message.dadosCount)
 8000be4:	e00b      	b.n	8000bfe <structDados+0x56>
{
	dados[counter] = RXBufferArray[5+counter];
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	3305      	adds	r3, #5
 8000bea:	4a12      	ldr	r2, [pc, #72]	; (8000c34 <structDados+0x8c>)
 8000bec:	5cd2      	ldrb	r2, [r2, r3]
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	4611      	mov	r1, r2
 8000bf2:	4a12      	ldr	r2, [pc, #72]	; (8000c3c <structDados+0x94>)
 8000bf4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	counter++;
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	71fb      	strb	r3, [r7, #7]
while(counter<receive_message.dadosCount)
 8000bfe:	79fa      	ldrb	r2, [r7, #7]
 8000c00:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <structDados+0x90>)
 8000c02:	691b      	ldr	r3, [r3, #16]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	dbee      	blt.n	8000be6 <structDados+0x3e>
}
receive_message.checksum = RXBufferArray[5+counter];
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	3305      	adds	r3, #5
 8000c0c:	4a09      	ldr	r2, [pc, #36]	; (8000c34 <structDados+0x8c>)
 8000c0e:	5cd3      	ldrb	r3, [r2, r3]
 8000c10:	461a      	mov	r2, r3
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <structDados+0x90>)
 8000c14:	615a      	str	r2, [r3, #20]
receive_message.fim=RXBufferArray[6+counter];
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	3306      	adds	r3, #6
 8000c1a:	4a06      	ldr	r2, [pc, #24]	; (8000c34 <structDados+0x8c>)
 8000c1c:	5cd3      	ldrb	r3, [r2, r3]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <structDados+0x90>)
 8000c22:	619a      	str	r2, [r3, #24]
counter=0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	71fb      	strb	r3, [r7, #7]
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	200002bc 	.word	0x200002bc
 8000c38:	20000340 	.word	0x20000340
 8000c3c:	200002d8 	.word	0x200002d8

08000c40 <VerificaErro>:

int VerificaErro()
{
 8000c40:	b598      	push	{r3, r4, r7, lr}
 8000c42:	af00      	add	r7, sp, #0
if(receive_message.checksum != Checksum(RXBufferArray))
 8000c44:	4b20      	ldr	r3, [pc, #128]	; (8000cc8 <VerificaErro+0x88>)
 8000c46:	695c      	ldr	r4, [r3, #20]
 8000c48:	4820      	ldr	r0, [pc, #128]	; (8000ccc <VerificaErro+0x8c>)
 8000c4a:	f000 fded 	bl	8001828 <Checksum>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	429c      	cmp	r4, r3
 8000c52:	d001      	beq.n	8000c58 <VerificaErro+0x18>
{
	return errorChecksum;
 8000c54:	2330      	movs	r3, #48	; 0x30
 8000c56:	e035      	b.n	8000cc4 <VerificaErro+0x84>
}
if(receive_message.endDestino>255 || receive_message.endDestino<0)
 8000c58:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <VerificaErro+0x88>)
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	2bff      	cmp	r3, #255	; 0xff
 8000c5e:	dc03      	bgt.n	8000c68 <VerificaErro+0x28>
 8000c60:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <VerificaErro+0x88>)
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	da06      	bge.n	8000c76 <VerificaErro+0x36>
{
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000c68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c6c:	4818      	ldr	r0, [pc, #96]	; (8000cd0 <VerificaErro+0x90>)
 8000c6e:	f001 fed9 	bl	8002a24 <HAL_GPIO_TogglePin>
	return errorAddress;
 8000c72:	2333      	movs	r3, #51	; 0x33
 8000c74:	e026      	b.n	8000cc4 <VerificaErro+0x84>
}
/*	if(infoDevice.Id != 0x00 && infoDevice.Id != receive_message.endDestino)
{
	return errorAddress;
}*/
if(receive_message.funcao == 2 && receive_message.dadosCount < 0)
 8000c76:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <VerificaErro+0x88>)
 8000c78:	68db      	ldr	r3, [r3, #12]
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	d105      	bne.n	8000c8a <VerificaErro+0x4a>
 8000c7e:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <VerificaErro+0x88>)
 8000c80:	691b      	ldr	r3, [r3, #16]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	da01      	bge.n	8000c8a <VerificaErro+0x4a>
{
	return errorConfig;
 8000c86:	2335      	movs	r3, #53	; 0x35
 8000c88:	e01c      	b.n	8000cc4 <VerificaErro+0x84>
}
if(receive_message.funcao > 0x06)
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <VerificaErro+0x88>)
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	2b06      	cmp	r3, #6
 8000c90:	dd01      	ble.n	8000c96 <VerificaErro+0x56>
{
	return errorFunction;
 8000c92:	2336      	movs	r3, #54	; 0x36
 8000c94:	e016      	b.n	8000cc4 <VerificaErro+0x84>
}
if(receive_message.funcao == 2 && dados[1]<1)
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <VerificaErro+0x88>)
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d105      	bne.n	8000caa <VerificaErro+0x6a>
 8000c9e:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <VerificaErro+0x94>)
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	dc01      	bgt.n	8000caa <VerificaErro+0x6a>
{
	return errorData;
 8000ca6:	2337      	movs	r3, #55	; 0x37
 8000ca8:	e00c      	b.n	8000cc4 <VerificaErro+0x84>
}
if(receive_message.inicio != 0x0A)
 8000caa:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <VerificaErro+0x88>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b0a      	cmp	r3, #10
 8000cb0:	d001      	beq.n	8000cb6 <VerificaErro+0x76>
{
	return errorStartHeader;
 8000cb2:	2338      	movs	r3, #56	; 0x38
 8000cb4:	e006      	b.n	8000cc4 <VerificaErro+0x84>
}
if(receive_message.fim != 0x0f)
 8000cb6:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <VerificaErro+0x88>)
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	2b0f      	cmp	r3, #15
 8000cbc:	d001      	beq.n	8000cc2 <VerificaErro+0x82>
{
	return errorEndHeader;
 8000cbe:	2339      	movs	r3, #57	; 0x39
 8000cc0:	e000      	b.n	8000cc4 <VerificaErro+0x84>
}
return OK;
 8000cc2:	2341      	movs	r3, #65	; 0x41

}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	bd98      	pop	{r3, r4, r7, pc}
 8000cc8:	20000340 	.word	0x20000340
 8000ccc:	200002bc 	.word	0x200002bc
 8000cd0:	40011000 	.word	0x40011000
 8000cd4:	200002d8 	.word	0x200002d8

08000cd8 <command>:

void command(char *ReceivedChar)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]

static int FirstData = 0;
/*	int ReceivedInt = *ReceivedChar - '\0';*/
if (FirstData == 0)
 8000ce0:	4b63      	ldr	r3, [pc, #396]	; (8000e70 <command+0x198>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d10a      	bne.n	8000cfe <command+0x26>
{
RXBufferArray[0] = ReceivedChar[0];
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	781a      	ldrb	r2, [r3, #0]
 8000cec:	4b61      	ldr	r3, [pc, #388]	; (8000e74 <command+0x19c>)
 8000cee:	701a      	strb	r2, [r3, #0]
FirstData = 1;
 8000cf0:	4b5f      	ldr	r3, [pc, #380]	; (8000e70 <command+0x198>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	601a      	str	r2, [r3, #0]
uart_state = Origem;
 8000cf6:	4b60      	ldr	r3, [pc, #384]	; (8000e78 <command+0x1a0>)
 8000cf8:	2237      	movs	r2, #55	; 0x37
 8000cfa:	701a      	strb	r2, [r3, #0]
  default:
	uart_state = iddle;
  }
}
}
}
 8000cfc:	e0b3      	b.n	8000e66 <command+0x18e>
if (uart_state != iddle)
 8000cfe:	4b5e      	ldr	r3, [pc, #376]	; (8000e78 <command+0x1a0>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	2b49      	cmp	r3, #73	; 0x49
 8000d04:	f000 80ac 	beq.w	8000e60 <command+0x188>
  switch (uart_state) {
 8000d08:	4b5b      	ldr	r3, [pc, #364]	; (8000e78 <command+0x1a0>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	3b37      	subs	r3, #55	; 0x37
 8000d0e:	2b0d      	cmp	r3, #13
 8000d10:	f200 80a2 	bhi.w	8000e58 <command+0x180>
 8000d14:	a201      	add	r2, pc, #4	; (adr r2, 8000d1c <command+0x44>)
 8000d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d1a:	bf00      	nop
 8000d1c:	08000d55 	.word	0x08000d55
 8000d20:	08000d65 	.word	0x08000d65
 8000d24:	08000d75 	.word	0x08000d75
 8000d28:	08000e59 	.word	0x08000e59
 8000d2c:	08000e59 	.word	0x08000e59
 8000d30:	08000e59 	.word	0x08000e59
 8000d34:	08000e59 	.word	0x08000e59
 8000d38:	08000e59 	.word	0x08000e59
 8000d3c:	08000e59 	.word	0x08000e59
 8000d40:	08000e59 	.word	0x08000e59
 8000d44:	08000d85 	.word	0x08000d85
 8000d48:	08000db9 	.word	0x08000db9
 8000d4c:	08000df9 	.word	0x08000df9
 8000d50:	08000e27 	.word	0x08000e27
		RXBufferArray[1] = ReceivedChar[1];
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	785a      	ldrb	r2, [r3, #1]
 8000d58:	4b46      	ldr	r3, [pc, #280]	; (8000e74 <command+0x19c>)
 8000d5a:	705a      	strb	r2, [r3, #1]
		uart_state = Destino;
 8000d5c:	4b46      	ldr	r3, [pc, #280]	; (8000e78 <command+0x1a0>)
 8000d5e:	2238      	movs	r2, #56	; 0x38
 8000d60:	701a      	strb	r2, [r3, #0]
	break;
 8000d62:	e080      	b.n	8000e66 <command+0x18e>
		RXBufferArray[2] = ReceivedChar[2];
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	789a      	ldrb	r2, [r3, #2]
 8000d68:	4b42      	ldr	r3, [pc, #264]	; (8000e74 <command+0x19c>)
 8000d6a:	709a      	strb	r2, [r3, #2]
		uart_state = Funcao;
 8000d6c:	4b42      	ldr	r3, [pc, #264]	; (8000e78 <command+0x1a0>)
 8000d6e:	2239      	movs	r2, #57	; 0x39
 8000d70:	701a      	strb	r2, [r3, #0]
	break;
 8000d72:	e078      	b.n	8000e66 <command+0x18e>
		RXBufferArray[3] = ReceivedChar[3];
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	78da      	ldrb	r2, [r3, #3]
 8000d78:	4b3e      	ldr	r3, [pc, #248]	; (8000e74 <command+0x19c>)
 8000d7a:	70da      	strb	r2, [r3, #3]
		uart_state = DadosCount;
 8000d7c:	4b3e      	ldr	r3, [pc, #248]	; (8000e78 <command+0x1a0>)
 8000d7e:	2241      	movs	r2, #65	; 0x41
 8000d80:	701a      	strb	r2, [r3, #0]
	break;
 8000d82:	e070      	b.n	8000e66 <command+0x18e>
	if(ReceivedChar[4]>0)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3304      	adds	r3, #4
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d007      	beq.n	8000d9e <command+0xc6>
		RXBufferArray[4] = ReceivedChar[4];
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	791a      	ldrb	r2, [r3, #4]
 8000d92:	4b38      	ldr	r3, [pc, #224]	; (8000e74 <command+0x19c>)
 8000d94:	711a      	strb	r2, [r3, #4]
		uart_state = Dados;
 8000d96:	4b38      	ldr	r3, [pc, #224]	; (8000e78 <command+0x1a0>)
 8000d98:	2242      	movs	r2, #66	; 0x42
 8000d9a:	701a      	strb	r2, [r3, #0]
	break;
 8000d9c:	e062      	b.n	8000e64 <command+0x18c>
	else if (ReceivedChar[4]==0)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3304      	adds	r3, #4
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d15d      	bne.n	8000e64 <command+0x18c>
		RXBufferArray[4] = ReceivedChar[4];
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	791a      	ldrb	r2, [r3, #4]
 8000dac:	4b31      	ldr	r3, [pc, #196]	; (8000e74 <command+0x19c>)
 8000dae:	711a      	strb	r2, [r3, #4]
		uart_state = CheckSum;
 8000db0:	4b31      	ldr	r3, [pc, #196]	; (8000e78 <command+0x1a0>)
 8000db2:	2243      	movs	r2, #67	; 0x43
 8000db4:	701a      	strb	r2, [r3, #0]
	break;
 8000db6:	e055      	b.n	8000e64 <command+0x18c>
	  RXBufferArray[5+i] = ReceivedChar[5+i];
 8000db8:	4b30      	ldr	r3, [pc, #192]	; (8000e7c <command+0x1a4>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	3305      	adds	r3, #5
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	441a      	add	r2, r3
 8000dc4:	4b2d      	ldr	r3, [pc, #180]	; (8000e7c <command+0x1a4>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	3305      	adds	r3, #5
 8000dca:	7811      	ldrb	r1, [r2, #0]
 8000dcc:	4a29      	ldr	r2, [pc, #164]	; (8000e74 <command+0x19c>)
 8000dce:	54d1      	strb	r1, [r2, r3]
	  i++;
 8000dd0:	4b2a      	ldr	r3, [pc, #168]	; (8000e7c <command+0x1a4>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	4a29      	ldr	r2, [pc, #164]	; (8000e7c <command+0x1a4>)
 8000dd8:	6013      	str	r3, [r2, #0]
	  if(i<RXBufferArray[4])
 8000dda:	4b26      	ldr	r3, [pc, #152]	; (8000e74 <command+0x19c>)
 8000ddc:	791b      	ldrb	r3, [r3, #4]
 8000dde:	461a      	mov	r2, r3
 8000de0:	4b26      	ldr	r3, [pc, #152]	; (8000e7c <command+0x1a4>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	dd03      	ble.n	8000df0 <command+0x118>
		  uart_state = Dados;
 8000de8:	4b23      	ldr	r3, [pc, #140]	; (8000e78 <command+0x1a0>)
 8000dea:	2242      	movs	r2, #66	; 0x42
 8000dec:	701a      	strb	r2, [r3, #0]
	  break;
 8000dee:	e03a      	b.n	8000e66 <command+0x18e>
		  uart_state = CheckSum;
 8000df0:	4b21      	ldr	r3, [pc, #132]	; (8000e78 <command+0x1a0>)
 8000df2:	2243      	movs	r2, #67	; 0x43
 8000df4:	701a      	strb	r2, [r3, #0]
	  break;
 8000df6:	e036      	b.n	8000e66 <command+0x18e>
	  RXBufferArray[5+i] = ReceivedChar[5+i];
 8000df8:	4b20      	ldr	r3, [pc, #128]	; (8000e7c <command+0x1a4>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	3305      	adds	r3, #5
 8000dfe:	461a      	mov	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	441a      	add	r2, r3
 8000e04:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <command+0x1a4>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	3305      	adds	r3, #5
 8000e0a:	7811      	ldrb	r1, [r2, #0]
 8000e0c:	4a19      	ldr	r2, [pc, #100]	; (8000e74 <command+0x19c>)
 8000e0e:	54d1      	strb	r1, [r2, r3]
	  checksum = Checksum(RXBufferArray);
 8000e10:	4818      	ldr	r0, [pc, #96]	; (8000e74 <command+0x19c>)
 8000e12:	f000 fd09 	bl	8001828 <Checksum>
 8000e16:	4603      	mov	r3, r0
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <command+0x1a8>)
 8000e1c:	701a      	strb	r2, [r3, #0]
	  uart_state = Fim;
 8000e1e:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <command+0x1a0>)
 8000e20:	2244      	movs	r2, #68	; 0x44
 8000e22:	701a      	strb	r2, [r3, #0]
  break;
 8000e24:	e01f      	b.n	8000e66 <command+0x18e>
	  RXBufferArray[6+i] = ReceivedChar[6+i];
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <command+0x1a4>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	3306      	adds	r3, #6
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	441a      	add	r2, r3
 8000e32:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <command+0x1a4>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	3306      	adds	r3, #6
 8000e38:	7811      	ldrb	r1, [r2, #0]
 8000e3a:	4a0e      	ldr	r2, [pc, #56]	; (8000e74 <command+0x19c>)
 8000e3c:	54d1      	strb	r1, [r2, r3]
	  EndReception = Fim;
 8000e3e:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <command+0x1ac>)
 8000e40:	2244      	movs	r2, #68	; 0x44
 8000e42:	701a      	strb	r2, [r3, #0]
	  i=0;
 8000e44:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <command+0x1a4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
	  FirstData = 0;
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <command+0x198>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
	  uart_state = iddle;
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <command+0x1a0>)
 8000e52:	2249      	movs	r2, #73	; 0x49
 8000e54:	701a      	strb	r2, [r3, #0]
	break;
 8000e56:	e006      	b.n	8000e66 <command+0x18e>
	uart_state = iddle;
 8000e58:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <command+0x1a0>)
 8000e5a:	2249      	movs	r2, #73	; 0x49
 8000e5c:	701a      	strb	r2, [r3, #0]
}
 8000e5e:	e002      	b.n	8000e66 <command+0x18e>
}
 8000e60:	bf00      	nop
 8000e62:	e000      	b.n	8000e66 <command+0x18e>
	break;
 8000e64:	bf00      	nop
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200003a8 	.word	0x200003a8
 8000e74:	200002bc 	.word	0x200002bc
 8000e78:	2000036f 	.word	0x2000036f
 8000e7c:	200002c8 	.word	0x200002c8
 8000e80:	2000036c 	.word	0x2000036c
 8000e84:	200002b7 	.word	0x200002b7

08000e88 <selectCommand>:

int selectCommand(struct Recepcao receive_message)

{
 8000e88:	b084      	sub	sp, #16
 8000e8a:	b490      	push	{r4, r7}
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	f107 0408 	add.w	r4, r7, #8
 8000e92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
if (receive_message.funcao == 1)
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d103      	bne.n	8000ea4 <selectCommand+0x1c>
 {
	  StateMachine = Identification;
 8000e9c:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <selectCommand+0x70>)
 8000e9e:	2231      	movs	r2, #49	; 0x31
 8000ea0:	701a      	strb	r2, [r3, #0]
 8000ea2:	e021      	b.n	8000ee8 <selectCommand+0x60>
 }
  else if (receive_message.funcao == 2)
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d103      	bne.n	8000eb2 <selectCommand+0x2a>
  {
	  StateMachine = Config;
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <selectCommand+0x70>)
 8000eac:	2232      	movs	r2, #50	; 0x32
 8000eae:	701a      	strb	r2, [r3, #0]
 8000eb0:	e01a      	b.n	8000ee8 <selectCommand+0x60>
  }
  else if (receive_message.funcao == 3)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	2b03      	cmp	r3, #3
 8000eb6:	d103      	bne.n	8000ec0 <selectCommand+0x38>
  {
	  StateMachine = Start;
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <selectCommand+0x70>)
 8000eba:	2233      	movs	r2, #51	; 0x33
 8000ebc:	701a      	strb	r2, [r3, #0]
 8000ebe:	e013      	b.n	8000ee8 <selectCommand+0x60>
  }
else if (receive_message.funcao == 4)
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	2b04      	cmp	r3, #4
 8000ec4:	d103      	bne.n	8000ece <selectCommand+0x46>
{
	  StateMachine = Read;
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <selectCommand+0x70>)
 8000ec8:	2234      	movs	r2, #52	; 0x34
 8000eca:	701a      	strb	r2, [r3, #0]
 8000ecc:	e00c      	b.n	8000ee8 <selectCommand+0x60>
}
else if (receive_message.funcao == 5)
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	2b05      	cmp	r3, #5
 8000ed2:	d103      	bne.n	8000edc <selectCommand+0x54>
{
	  StateMachine = ReadError;
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <selectCommand+0x70>)
 8000ed6:	2235      	movs	r2, #53	; 0x35
 8000ed8:	701a      	strb	r2, [r3, #0]
 8000eda:	e005      	b.n	8000ee8 <selectCommand+0x60>
}
else if (receive_message.funcao == 6)
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	2b06      	cmp	r3, #6
 8000ee0:	d102      	bne.n	8000ee8 <selectCommand+0x60>
{
	  StateMachine = Stop;
 8000ee2:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <selectCommand+0x70>)
 8000ee4:	2236      	movs	r2, #54	; 0x36
 8000ee6:	701a      	strb	r2, [r3, #0]
}
return StateMachine;
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <selectCommand+0x70>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc90      	pop	{r4, r7}
 8000ef2:	b004      	add	sp, #16
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	2000036e 	.word	0x2000036e

08000efc <getID>:

void getID()
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
	uint16_t codCefise=0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	80fb      	strh	r3, [r7, #6]
	if(receive_message.dadosCount == 1) // Codificação
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <getID+0x60>)
 8000f08:	691b      	ldr	r3, [r3, #16]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d111      	bne.n	8000f32 <getID+0x36>
	{
		FLASH_apaga(END_INICIAL, 1);
 8000f0e:	2101      	movs	r1, #1
 8000f10:	4813      	ldr	r0, [pc, #76]	; (8000f60 <getID+0x64>)
 8000f12:	f7ff f91b 	bl	800014c <FLASH_apaga>
		codCefise = dados[0];
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <getID+0x68>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	80fb      	strh	r3, [r7, #6]
		infoDevice.Id = codCefise;
 8000f1e:	88fb      	ldrh	r3, [r7, #6]
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <getID+0x6c>)
 8000f24:	601a      	str	r2, [r3, #0]
		FLASH_escreve_16bits(END_INICIAL, &codCefise);
 8000f26:	1dbb      	adds	r3, r7, #6
 8000f28:	4619      	mov	r1, r3
 8000f2a:	480d      	ldr	r0, [pc, #52]	; (8000f60 <getID+0x64>)
 8000f2c:	f7ff f92e 	bl	800018c <FLASH_escreve_16bits>
		if(codCefise != 0xFFFF)
		{
			infoDevice.Id = codCefise;
		}
	}
}
 8000f30:	e010      	b.n	8000f54 <getID+0x58>
		receive_message.dadosCount = 1;
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <getID+0x60>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	611a      	str	r2, [r3, #16]
		FLASH_le_16bits(END_INICIAL, &codCefise);
 8000f38:	1dbb      	adds	r3, r7, #6
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4808      	ldr	r0, [pc, #32]	; (8000f60 <getID+0x64>)
 8000f3e:	f7ff f942 	bl	80001c6 <FLASH_le_16bits>
		if(codCefise != 0xFFFF)
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d003      	beq.n	8000f54 <getID+0x58>
			infoDevice.Id = codCefise;
 8000f4c:	88fb      	ldrh	r3, [r7, #6]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <getID+0x6c>)
 8000f52:	601a      	str	r2, [r3, #0]
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000340 	.word	0x20000340
 8000f60:	0800f000 	.word	0x0800f000
 8000f64:	200002d8 	.word	0x200002d8
 8000f68:	2000035c 	.word	0x2000035c

08000f6c <DeviceParamenter>:

void DeviceParamenter(struct Recepcao message)
{
 8000f6c:	b084      	sub	sp, #16
 8000f6e:	b490      	push	{r4, r7}
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	f107 0408 	add.w	r4, r7, #8
 8000f76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
timeTotal = dados[1];
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <DeviceParamenter+0x40>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <DeviceParamenter+0x44>)
 8000f82:	701a      	strb	r2, [r3, #0]
switch(dados[0])
 8000f84:	4b09      	ldr	r3, [pc, #36]	; (8000fac <DeviceParamenter+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d002      	beq.n	8000f92 <DeviceParamenter+0x26>
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d004      	beq.n	8000f9a <DeviceParamenter+0x2e>
	case 0x02:
		readStatus = MAN;
	break;

}
}
 8000f90:	e007      	b.n	8000fa2 <DeviceParamenter+0x36>
		readStatus = AUTO;
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <DeviceParamenter+0x48>)
 8000f94:	2246      	movs	r2, #70	; 0x46
 8000f96:	701a      	strb	r2, [r3, #0]
	break;
 8000f98:	e003      	b.n	8000fa2 <DeviceParamenter+0x36>
		readStatus = MAN;
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <DeviceParamenter+0x48>)
 8000f9c:	224d      	movs	r2, #77	; 0x4d
 8000f9e:	701a      	strb	r2, [r3, #0]
	break;
 8000fa0:	bf00      	nop
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc90      	pop	{r4, r7}
 8000fa8:	b004      	add	sp, #16
 8000faa:	4770      	bx	lr
 8000fac:	200002d8 	.word	0x200002d8
 8000fb0:	20000339 	.word	0x20000339
 8000fb4:	200002c6 	.word	0x200002c6

08000fb8 <StartDevice>:

char StartDevice(char deviceFlag)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
char startEncoder;
if(deviceFlag == 0)
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d108      	bne.n	8000fda <StartDevice+0x22>
{
	startEncoder = HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000fc8:	213c      	movs	r1, #60	; 0x3c
 8000fca:	4809      	ldr	r0, [pc, #36]	; (8000ff0 <StartDevice+0x38>)
 8000fcc:	f004 f862 	bl	8005094 <HAL_TIM_Encoder_Start_IT>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000fd4:	200a      	movs	r0, #10
 8000fd6:	f000 ff7b 	bl	8001ed0 <HAL_Delay>
	/*startEncoder = HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_1);*/
}
if(startEncoder == HAL_OK)
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d101      	bne.n	8000fe4 <StartDevice+0x2c>
	return 1;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e000      	b.n	8000fe6 <StartDevice+0x2e>
else return 0;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	2000019c 	.word	0x2000019c

08000ff4 <TransmitData>:

void TransmitData(struct Recepcao Send_message,int32_t *dataToSend, uint8_t dataLenght)
{
 8000ff4:	b084      	sub	sp, #16
 8000ff6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ffa:	b08b      	sub	sp, #44	; 0x2c
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	f107 0650 	add.w	r6, r7, #80	; 0x50
 8001002:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8001006:	466b      	mov	r3, sp
 8001008:	607b      	str	r3, [r7, #4]
uint8_t txBuffer[dataLenght];
 800100a:	f897 6070 	ldrb.w	r6, [r7, #112]	; 0x70
 800100e:	4633      	mov	r3, r6
 8001010:	3b01      	subs	r3, #1
 8001012:	623b      	str	r3, [r7, #32]
 8001014:	b2f3      	uxtb	r3, r6
 8001016:	2200      	movs	r2, #0
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	60fa      	str	r2, [r7, #12]
 800101c:	f04f 0200 	mov.w	r2, #0
 8001020:	f04f 0300 	mov.w	r3, #0
 8001024:	68f9      	ldr	r1, [r7, #12]
 8001026:	00cb      	lsls	r3, r1, #3
 8001028:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800102c:	4684      	mov	ip, r0
 800102e:	ea43 735c 	orr.w	r3, r3, ip, lsr #29
 8001032:	4601      	mov	r1, r0
 8001034:	00ca      	lsls	r2, r1, #3
 8001036:	b2f3      	uxtb	r3, r6
 8001038:	2200      	movs	r2, #0
 800103a:	469a      	mov	sl, r3
 800103c:	4693      	mov	fp, r2
 800103e:	f04f 0200 	mov.w	r2, #0
 8001042:	f04f 0300 	mov.w	r3, #0
 8001046:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800104a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800104e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001052:	4633      	mov	r3, r6
 8001054:	3307      	adds	r3, #7
 8001056:	08db      	lsrs	r3, r3, #3
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	ebad 0d03 	sub.w	sp, sp, r3
 800105e:	466b      	mov	r3, sp
 8001060:	3300      	adds	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
static uint8_t txBufferRead[67];
uint8_t errorBuffer[dataLenght];
 8001064:	f897 1070 	ldrb.w	r1, [r7, #112]	; 0x70
 8001068:	460b      	mov	r3, r1
 800106a:	3b01      	subs	r3, #1
 800106c:	61bb      	str	r3, [r7, #24]
 800106e:	b2cb      	uxtb	r3, r1
 8001070:	2200      	movs	r2, #0
 8001072:	4698      	mov	r8, r3
 8001074:	4691      	mov	r9, r2
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001082:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001086:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800108a:	b2cb      	uxtb	r3, r1
 800108c:	2200      	movs	r2, #0
 800108e:	461c      	mov	r4, r3
 8001090:	4615      	mov	r5, r2
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	f04f 0300 	mov.w	r3, #0
 800109a:	00eb      	lsls	r3, r5, #3
 800109c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80010a0:	00e2      	lsls	r2, r4, #3
 80010a2:	460b      	mov	r3, r1
 80010a4:	3307      	adds	r3, #7
 80010a6:	08db      	lsrs	r3, r3, #3
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	ebad 0d03 	sub.w	sp, sp, r3
 80010ae:	466b      	mov	r3, sp
 80010b0:	3300      	adds	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
uint8_t counter = 2;
 80010b4:	2302      	movs	r3, #2
 80010b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
uint8_t countArray = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
uint8_t counterAux = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
switch(StateMachine)
 80010c6:	4b9e      	ldr	r3, [pc, #632]	; (8001340 <TransmitData+0x34c>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	3b31      	subs	r3, #49	; 0x31
 80010cc:	2b14      	cmp	r3, #20
 80010ce:	f200 833c 	bhi.w	800174a <TransmitData+0x756>
 80010d2:	a201      	add	r2, pc, #4	; (adr r2, 80010d8 <TransmitData+0xe4>)
 80010d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d8:	0800112d 	.word	0x0800112d
 80010dc:	08001189 	.word	0x08001189
 80010e0:	080011d3 	.word	0x080011d3
 80010e4:	0800121d 	.word	0x0800121d
 80010e8:	08001311 	.word	0x08001311
 80010ec:	08001359 	.word	0x08001359
 80010f0:	0800174b 	.word	0x0800174b
 80010f4:	0800174b 	.word	0x0800174b
 80010f8:	0800174b 	.word	0x0800174b
 80010fc:	0800174b 	.word	0x0800174b
 8001100:	0800174b 	.word	0x0800174b
 8001104:	0800174b 	.word	0x0800174b
 8001108:	0800174b 	.word	0x0800174b
 800110c:	0800174b 	.word	0x0800174b
 8001110:	0800174b 	.word	0x0800174b
 8001114:	0800174b 	.word	0x0800174b
 8001118:	0800174b 	.word	0x0800174b
 800111c:	0800174b 	.word	0x0800174b
 8001120:	0800174b 	.word	0x0800174b
 8001124:	0800174b 	.word	0x0800174b
 8001128:	080013a5 	.word	0x080013a5
{
	case Identification:
		txBuffer[0] = Send_message.inicio;
 800112c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800112e:	b2da      	uxtb	r2, r3
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	701a      	strb	r2, [r3, #0]
		txBuffer[1] = infoDevice.Id;
 8001134:	4b83      	ldr	r3, [pc, #524]	; (8001344 <TransmitData+0x350>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	b2da      	uxtb	r2, r3
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	705a      	strb	r2, [r3, #1]
		txBuffer[2] = Send_message.endOrigem;
 800113e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001140:	b2da      	uxtb	r2, r3
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	709a      	strb	r2, [r3, #2]
		txBuffer[3] = Send_message.funcao;
 8001146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001148:	b2da      	uxtb	r2, r3
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	70da      	strb	r2, [r3, #3]
		txBuffer[4] = Send_message.dadosCount;
 800114e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001150:	b2da      	uxtb	r2, r3
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	711a      	strb	r2, [r3, #4]
		if(Send_message.dadosCount>0)
 8001156:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001158:	2b00      	cmp	r3, #0
 800115a:	dd04      	ble.n	8001166 <TransmitData+0x172>
		{
			txBuffer[5] = infoDevice.Id;
 800115c:	4b79      	ldr	r3, [pc, #484]	; (8001344 <TransmitData+0x350>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	715a      	strb	r2, [r3, #5]
		}
		txBuffer[6] = Checksum(txBuffer);
 8001166:	69f8      	ldr	r0, [r7, #28]
 8001168:	f000 fb5e 	bl	8001828 <Checksum>
 800116c:	4603      	mov	r3, r0
 800116e:	b2da      	uxtb	r2, r3
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	719a      	strb	r2, [r3, #6]
		txBuffer[7] = Send_message.fim;
 8001174:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001176:	b2da      	uxtb	r2, r3
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	71da      	strb	r2, [r3, #7]
		CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 800117c:	b2b3      	uxth	r3, r6
 800117e:	4619      	mov	r1, r3
 8001180:	69f8      	ldr	r0, [r7, #28]
 8001182:	f009 fad3 	bl	800a72c <CDC_Transmit_FS>

	break;
 8001186:	e2e0      	b.n	800174a <TransmitData+0x756>
	case Config:
		txBuffer[0] = Send_message.inicio;
 8001188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800118a:	b2da      	uxtb	r2, r3
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	701a      	strb	r2, [r3, #0]
		txBuffer[1] = infoDevice.Id;
 8001190:	4b6c      	ldr	r3, [pc, #432]	; (8001344 <TransmitData+0x350>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	b2da      	uxtb	r2, r3
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	705a      	strb	r2, [r3, #1]
		txBuffer[2] = Send_message.endOrigem;
 800119a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800119c:	b2da      	uxtb	r2, r3
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	709a      	strb	r2, [r3, #2]
		txBuffer[3] = Send_message.funcao;
 80011a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	70da      	strb	r2, [r3, #3]
		txBuffer[4] = 0x00;
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	2200      	movs	r2, #0
 80011ae:	711a      	strb	r2, [r3, #4]
		txBuffer[5] = Checksum(txBuffer);
 80011b0:	69f8      	ldr	r0, [r7, #28]
 80011b2:	f000 fb39 	bl	8001828 <Checksum>
 80011b6:	4603      	mov	r3, r0
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	715a      	strb	r2, [r3, #5]
		txBuffer[6] = Send_message.fim;
 80011be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	719a      	strb	r2, [r3, #6]
		CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 80011c6:	b2b3      	uxth	r3, r6
 80011c8:	4619      	mov	r1, r3
 80011ca:	69f8      	ldr	r0, [r7, #28]
 80011cc:	f009 faae 	bl	800a72c <CDC_Transmit_FS>

	break;
 80011d0:	e2bb      	b.n	800174a <TransmitData+0x756>
	case Start: // Msg de inicio de dispositivo
		txBuffer[0] = Send_message.inicio;
 80011d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	701a      	strb	r2, [r3, #0]
		txBuffer[1] = infoDevice.Id;
 80011da:	4b5a      	ldr	r3, [pc, #360]	; (8001344 <TransmitData+0x350>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	705a      	strb	r2, [r3, #1]
		txBuffer[2] = Send_message.endOrigem;
 80011e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	709a      	strb	r2, [r3, #2]
		txBuffer[3] = 0x03;
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	2203      	movs	r2, #3
 80011f0:	70da      	strb	r2, [r3, #3]
		txBuffer[4] = Send_message.dadosCount;
 80011f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	711a      	strb	r2, [r3, #4]
		txBuffer[5] = Checksum(txBuffer);
 80011fa:	69f8      	ldr	r0, [r7, #28]
 80011fc:	f000 fb14 	bl	8001828 <Checksum>
 8001200:	4603      	mov	r3, r0
 8001202:	b2da      	uxtb	r2, r3
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	715a      	strb	r2, [r3, #5]
		txBuffer[6] = Send_message.fim;
 8001208:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800120a:	b2da      	uxtb	r2, r3
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	719a      	strb	r2, [r3, #6]
		CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 8001210:	b2b3      	uxth	r3, r6
 8001212:	4619      	mov	r1, r3
 8001214:	69f8      	ldr	r0, [r7, #28]
 8001216:	f009 fa89 	bl	800a72c <CDC_Transmit_FS>
	break;
 800121a:	e296      	b.n	800174a <TransmitData+0x756>

	case Read: //BOTAO LER -> LER MANUAL
		txBufferRead[0] = Send_message.inicio;
 800121c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800121e:	b2da      	uxtb	r2, r3
 8001220:	4b49      	ldr	r3, [pc, #292]	; (8001348 <TransmitData+0x354>)
 8001222:	701a      	strb	r2, [r3, #0]
		txBufferRead[1] = infoDevice.Id;
 8001224:	4b47      	ldr	r3, [pc, #284]	; (8001344 <TransmitData+0x350>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4b47      	ldr	r3, [pc, #284]	; (8001348 <TransmitData+0x354>)
 800122c:	705a      	strb	r2, [r3, #1]
		txBufferRead[2] = Send_message.endOrigem;
 800122e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001230:	b2da      	uxtb	r2, r3
 8001232:	4b45      	ldr	r3, [pc, #276]	; (8001348 <TransmitData+0x354>)
 8001234:	709a      	strb	r2, [r3, #2]
		txBufferRead[3] = 0x04;
 8001236:	4b44      	ldr	r3, [pc, #272]	; (8001348 <TransmitData+0x354>)
 8001238:	2204      	movs	r2, #4
 800123a:	70da      	strb	r2, [r3, #3]
		txBufferRead[4] = 0x3C;
 800123c:	4b42      	ldr	r3, [pc, #264]	; (8001348 <TransmitData+0x354>)
 800123e:	223c      	movs	r2, #60	; 0x3c
 8001240:	711a      	strb	r2, [r3, #4]
		for(countArray = 0; countArray<10; countArray++)
 8001242:	2300      	movs	r3, #0
 8001244:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001248:	e04c      	b.n	80012e4 <TransmitData+0x2f0>
		{
			timeEncoder.all = currentTime[countArray];
 800124a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800124e:	4a3f      	ldr	r2, [pc, #252]	; (800134c <TransmitData+0x358>)
 8001250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001254:	b29a      	uxth	r2, r3
 8001256:	4b3e      	ldr	r3, [pc, #248]	; (8001350 <TransmitData+0x35c>)
 8001258:	801a      	strh	r2, [r3, #0]
			encoderPulso.all = dataToSend[countArray];
 800125a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001262:	4413      	add	r3, r2
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a3b      	ldr	r2, [pc, #236]	; (8001354 <TransmitData+0x360>)
 8001268:	6013      	str	r3, [r2, #0]
			for(counter = 2; counter>0; counter--)
 800126a:	2302      	movs	r3, #2
 800126c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001270:	e013      	b.n	800129a <TransmitData+0x2a6>
			{
				txBufferRead[5+counterAux] = timeEncoder.pt[counter-1];
 8001272:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001276:	1e5a      	subs	r2, r3, #1
 8001278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800127c:	3305      	adds	r3, #5
 800127e:	4934      	ldr	r1, [pc, #208]	; (8001350 <TransmitData+0x35c>)
 8001280:	5c89      	ldrb	r1, [r1, r2]
 8001282:	4a31      	ldr	r2, [pc, #196]	; (8001348 <TransmitData+0x354>)
 8001284:	54d1      	strb	r1, [r2, r3]
				counterAux++;
 8001286:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800128a:	3301      	adds	r3, #1
 800128c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for(counter = 2; counter>0; counter--)
 8001290:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001294:	3b01      	subs	r3, #1
 8001296:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800129a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1e7      	bne.n	8001272 <TransmitData+0x27e>
			}
			for(counter = 4; counter>0; counter--)
 80012a2:	2304      	movs	r3, #4
 80012a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80012a8:	e013      	b.n	80012d2 <TransmitData+0x2de>
			{
				txBufferRead[5+counterAux] = encoderPulso.pt[counter-1];
 80012aa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012ae:	1e5a      	subs	r2, r3, #1
 80012b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012b4:	3305      	adds	r3, #5
 80012b6:	4927      	ldr	r1, [pc, #156]	; (8001354 <TransmitData+0x360>)
 80012b8:	5c89      	ldrb	r1, [r1, r2]
 80012ba:	4a23      	ldr	r2, [pc, #140]	; (8001348 <TransmitData+0x354>)
 80012bc:	54d1      	strb	r1, [r2, r3]
				counterAux++;
 80012be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012c2:	3301      	adds	r3, #1
 80012c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			for(counter = 4; counter>0; counter--)
 80012c8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012cc:	3b01      	subs	r3, #1
 80012ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80012d2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1e7      	bne.n	80012aa <TransmitData+0x2b6>
		for(countArray = 0; countArray<10; countArray++)
 80012da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012de:	3301      	adds	r3, #1
 80012e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80012e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012e8:	2b09      	cmp	r3, #9
 80012ea:	d9ae      	bls.n	800124a <TransmitData+0x256>
			}
		}
		txBufferRead[65] = Checksum(txBufferRead);
 80012ec:	4816      	ldr	r0, [pc, #88]	; (8001348 <TransmitData+0x354>)
 80012ee:	f000 fa9b 	bl	8001828 <Checksum>
 80012f2:	4603      	mov	r3, r0
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4b14      	ldr	r3, [pc, #80]	; (8001348 <TransmitData+0x354>)
 80012f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		txBufferRead[66] = Send_message.fim;
 80012fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	4b11      	ldr	r3, [pc, #68]	; (8001348 <TransmitData+0x354>)
 8001302:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

		CDC_Transmit_FS((uint8_t*)txBufferRead, sizeof(txBufferRead));
 8001306:	2143      	movs	r1, #67	; 0x43
 8001308:	480f      	ldr	r0, [pc, #60]	; (8001348 <TransmitData+0x354>)
 800130a:	f009 fa0f 	bl	800a72c <CDC_Transmit_FS>

	break;
 800130e:	e21c      	b.n	800174a <TransmitData+0x756>

	case ReadError:
		txBufferRead[0] = 0x0A;
 8001310:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <TransmitData+0x354>)
 8001312:	220a      	movs	r2, #10
 8001314:	701a      	strb	r2, [r3, #0]
		txBufferRead[3] = 0x05;
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <TransmitData+0x354>)
 8001318:	2205      	movs	r2, #5
 800131a:	70da      	strb	r2, [r3, #3]
		txBufferRead[65] = Checksum(txBufferRead);
 800131c:	480a      	ldr	r0, [pc, #40]	; (8001348 <TransmitData+0x354>)
 800131e:	f000 fa83 	bl	8001828 <Checksum>
 8001322:	4603      	mov	r3, r0
 8001324:	b2da      	uxtb	r2, r3
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <TransmitData+0x354>)
 8001328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		txBufferRead[66] = 0x0F;
 800132c:	4b06      	ldr	r3, [pc, #24]	; (8001348 <TransmitData+0x354>)
 800132e:	220f      	movs	r2, #15
 8001330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		CDC_Transmit_FS((uint8_t*)txBufferRead, sizeof(txBufferRead));
 8001334:	2143      	movs	r1, #67	; 0x43
 8001336:	4804      	ldr	r0, [pc, #16]	; (8001348 <TransmitData+0x354>)
 8001338:	f009 f9f8 	bl	800a72c <CDC_Transmit_FS>
	break;
 800133c:	e205      	b.n	800174a <TransmitData+0x756>
 800133e:	bf00      	nop
 8001340:	2000036e 	.word	0x2000036e
 8001344:	2000035c 	.word	0x2000035c
 8001348:	200003ac 	.word	0x200003ac
 800134c:	20000374 	.word	0x20000374
 8001350:	20000368 	.word	0x20000368
 8001354:	20000364 	.word	0x20000364

	case Stop:
	txBuffer[0] = Send_message.inicio;
 8001358:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800135a:	b2da      	uxtb	r2, r3
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	701a      	strb	r2, [r3, #0]
	txBuffer[1] = infoDevice.Id;
 8001360:	4b98      	ldr	r3, [pc, #608]	; (80015c4 <TransmitData+0x5d0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	b2da      	uxtb	r2, r3
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	705a      	strb	r2, [r3, #1]
	txBuffer[2] = Send_message.endOrigem;
 800136a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800136c:	b2da      	uxtb	r2, r3
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	709a      	strb	r2, [r3, #2]
	txBuffer[3] = Send_message.funcao;
 8001372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001374:	b2da      	uxtb	r2, r3
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	70da      	strb	r2, [r3, #3]
	txBuffer[4] = Send_message.dadosCount;
 800137a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800137c:	b2da      	uxtb	r2, r3
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	711a      	strb	r2, [r3, #4]
	txBuffer[5] = Checksum(txBuffer);
 8001382:	69f8      	ldr	r0, [r7, #28]
 8001384:	f000 fa50 	bl	8001828 <Checksum>
 8001388:	4603      	mov	r3, r0
 800138a:	b2da      	uxtb	r2, r3
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	715a      	strb	r2, [r3, #5]
	txBuffer[6] = Send_message.fim;
 8001390:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001392:	b2da      	uxtb	r2, r3
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	719a      	strb	r2, [r3, #6]
	CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 8001398:	b2b3      	uxth	r3, r6
 800139a:	4619      	mov	r1, r3
 800139c:	69f8      	ldr	r0, [r7, #28]
 800139e:	f009 f9c5 	bl	800a72c <CDC_Transmit_FS>
	break;
 80013a2:	e1d2      	b.n	800174a <TransmitData+0x756>

	case error:
		if(errorFlag == errorChecksum)
 80013a4:	4b88      	ldr	r3, [pc, #544]	; (80015c8 <TransmitData+0x5d4>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b30      	cmp	r3, #48	; 0x30
 80013aa:	d12b      	bne.n	8001404 <TransmitData+0x410>
		{
			txBuffer[0] = Send_message.inicio;
 80013ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 80013b4:	4b83      	ldr	r3, [pc, #524]	; (80015c4 <TransmitData+0x5d0>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 80013be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (Send_message.funcao | 0xF0);
 80013c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013c8:	b25b      	sxtb	r3, r3
 80013ca:	f063 030f 	orn	r3, r3, #15
 80013ce:	b25b      	sxtb	r3, r3
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	2201      	movs	r2, #1
 80013da:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x00; //codigo de erro
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	2200      	movs	r2, #0
 80013e0:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 80013e2:	69f8      	ldr	r0, [r7, #28]
 80013e4:	f000 fa20 	bl	8001828 <Checksum>
 80013e8:	4603      	mov	r3, r0
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 80013f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 80013f8:	b2b3      	uxth	r3, r6
 80013fa:	4619      	mov	r1, r3
 80013fc:	69f8      	ldr	r0, [r7, #28]
 80013fe:	f009 f995 	bl	800a72c <CDC_Transmit_FS>
			txBuffer[5] = 0x09;
			txBuffer[6] = Checksum(txBuffer);
			txBuffer[7] = Send_message.fim;
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
		}
		break;
 8001402:	e1a1      	b.n	8001748 <TransmitData+0x754>
		else if (errorFlag == timeOut)
 8001404:	4b70      	ldr	r3, [pc, #448]	; (80015c8 <TransmitData+0x5d4>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b31      	cmp	r3, #49	; 0x31
 800140a:	d12b      	bne.n	8001464 <TransmitData+0x470>
			txBuffer[0] = Send_message.inicio;
 800140c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800140e:	b2da      	uxtb	r2, r3
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 8001414:	4b6b      	ldr	r3, [pc, #428]	; (80015c4 <TransmitData+0x5d0>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	b2da      	uxtb	r2, r3
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 800141e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001420:	b2da      	uxtb	r2, r3
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (Send_message.funcao | 0xF0);
 8001426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001428:	b25b      	sxtb	r3, r3
 800142a:	f063 030f 	orn	r3, r3, #15
 800142e:	b25b      	sxtb	r3, r3
 8001430:	b2da      	uxtb	r2, r3
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	2201      	movs	r2, #1
 800143a:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x01;
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	2201      	movs	r2, #1
 8001440:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 8001442:	69f8      	ldr	r0, [r7, #28]
 8001444:	f000 f9f0 	bl	8001828 <Checksum>
 8001448:	4603      	mov	r3, r0
 800144a:	b2da      	uxtb	r2, r3
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 8001450:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001452:	b2da      	uxtb	r2, r3
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 8001458:	b2b3      	uxth	r3, r6
 800145a:	4619      	mov	r1, r3
 800145c:	69f8      	ldr	r0, [r7, #28]
 800145e:	f009 f965 	bl	800a72c <CDC_Transmit_FS>
		break;
 8001462:	e171      	b.n	8001748 <TransmitData+0x754>
		else if (errorFlag == noAddress)
 8001464:	4b58      	ldr	r3, [pc, #352]	; (80015c8 <TransmitData+0x5d4>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b32      	cmp	r3, #50	; 0x32
 800146a:	d126      	bne.n	80014ba <TransmitData+0x4c6>
			txBuffer[0] = Send_message.inicio;
 800146c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800146e:	b2da      	uxtb	r2, r3
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 8001474:	4b53      	ldr	r3, [pc, #332]	; (80015c4 <TransmitData+0x5d0>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	b2da      	uxtb	r2, r3
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 800147e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001480:	b2da      	uxtb	r2, r3
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (0x01 | 0xF0);
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	22f1      	movs	r2, #241	; 0xf1
 800148a:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	2201      	movs	r2, #1
 8001490:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x02;
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	2202      	movs	r2, #2
 8001496:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 8001498:	69f8      	ldr	r0, [r7, #28]
 800149a:	f000 f9c5 	bl	8001828 <Checksum>
 800149e:	4603      	mov	r3, r0
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 80014a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 80014ae:	b2b3      	uxth	r3, r6
 80014b0:	4619      	mov	r1, r3
 80014b2:	69f8      	ldr	r0, [r7, #28]
 80014b4:	f009 f93a 	bl	800a72c <CDC_Transmit_FS>
		break;
 80014b8:	e146      	b.n	8001748 <TransmitData+0x754>
		else if (errorFlag == errorAddress)
 80014ba:	4b43      	ldr	r3, [pc, #268]	; (80015c8 <TransmitData+0x5d4>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b33      	cmp	r3, #51	; 0x33
 80014c0:	d125      	bne.n	800150e <TransmitData+0x51a>
			txBuffer[0] = Send_message.inicio;
 80014c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 80014ca:	4b3e      	ldr	r3, [pc, #248]	; (80015c4 <TransmitData+0x5d0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 80014d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (0x01 | 0xF0);
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	22f1      	movs	r2, #241	; 0xf1
 80014e0:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	2201      	movs	r2, #1
 80014e6:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x03;
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	2203      	movs	r2, #3
 80014ec:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 80014ee:	69f8      	ldr	r0, [r7, #28]
 80014f0:	f000 f99a 	bl	8001828 <Checksum>
 80014f4:	4603      	mov	r3, r0
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = 0x0F;
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	220f      	movs	r2, #15
 8001500:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 8001502:	b2b3      	uxth	r3, r6
 8001504:	4619      	mov	r1, r3
 8001506:	69f8      	ldr	r0, [r7, #28]
 8001508:	f009 f910 	bl	800a72c <CDC_Transmit_FS>
		break;
 800150c:	e11c      	b.n	8001748 <TransmitData+0x754>
		else if (errorFlag == errorDevice)
 800150e:	4b2e      	ldr	r3, [pc, #184]	; (80015c8 <TransmitData+0x5d4>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b34      	cmp	r3, #52	; 0x34
 8001514:	d12b      	bne.n	800156e <TransmitData+0x57a>
			txBuffer[0] = Send_message.inicio;
 8001516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001518:	b2da      	uxtb	r2, r3
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 800151e:	4b29      	ldr	r3, [pc, #164]	; (80015c4 <TransmitData+0x5d0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	b2da      	uxtb	r2, r3
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 8001528:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800152a:	b2da      	uxtb	r2, r3
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (Send_message.funcao | 0xF0);
 8001530:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001532:	b25b      	sxtb	r3, r3
 8001534:	f063 030f 	orn	r3, r3, #15
 8001538:	b25b      	sxtb	r3, r3
 800153a:	b2da      	uxtb	r2, r3
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	2201      	movs	r2, #1
 8001544:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x04;
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	2204      	movs	r2, #4
 800154a:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 800154c:	69f8      	ldr	r0, [r7, #28]
 800154e:	f000 f96b 	bl	8001828 <Checksum>
 8001552:	4603      	mov	r3, r0
 8001554:	b2da      	uxtb	r2, r3
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 800155a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800155c:	b2da      	uxtb	r2, r3
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 8001562:	b2b3      	uxth	r3, r6
 8001564:	4619      	mov	r1, r3
 8001566:	69f8      	ldr	r0, [r7, #28]
 8001568:	f009 f8e0 	bl	800a72c <CDC_Transmit_FS>
		break;
 800156c:	e0ec      	b.n	8001748 <TransmitData+0x754>
		else if (errorFlag == errorConfig)
 800156e:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <TransmitData+0x5d4>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b35      	cmp	r3, #53	; 0x35
 8001574:	d12a      	bne.n	80015cc <TransmitData+0x5d8>
			txBuffer[0] = Send_message.inicio;
 8001576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001578:	b2da      	uxtb	r2, r3
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 800157e:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <TransmitData+0x5d0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	b2da      	uxtb	r2, r3
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 8001588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800158a:	b2da      	uxtb	r2, r3
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (0x02 | 0xF0);
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	22f2      	movs	r2, #242	; 0xf2
 8001594:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	2201      	movs	r2, #1
 800159a:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x05;
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	2205      	movs	r2, #5
 80015a0:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 80015a2:	69f8      	ldr	r0, [r7, #28]
 80015a4:	f000 f940 	bl	8001828 <Checksum>
 80015a8:	4603      	mov	r3, r0
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 80015b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 80015b8:	b2b3      	uxth	r3, r6
 80015ba:	4619      	mov	r1, r3
 80015bc:	69f8      	ldr	r0, [r7, #28]
 80015be:	f009 f8b5 	bl	800a72c <CDC_Transmit_FS>
		break;
 80015c2:	e0c1      	b.n	8001748 <TransmitData+0x754>
 80015c4:	2000035c 	.word	0x2000035c
 80015c8:	20000000 	.word	0x20000000
		else if (errorFlag == errorFunction)
 80015cc:	4b63      	ldr	r3, [pc, #396]	; (800175c <TransmitData+0x768>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b36      	cmp	r3, #54	; 0x36
 80015d2:	d12b      	bne.n	800162c <TransmitData+0x638>
			txBuffer[0] = Send_message.inicio;
 80015d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 80015dc:	4b60      	ldr	r3, [pc, #384]	; (8001760 <TransmitData+0x76c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 80015e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (Send_message.funcao | 0xF0);
 80015ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	f063 030f 	orn	r3, r3, #15
 80015f6:	b25b      	sxtb	r3, r3
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	2201      	movs	r2, #1
 8001602:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x06;
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	2206      	movs	r2, #6
 8001608:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 800160a:	69f8      	ldr	r0, [r7, #28]
 800160c:	f000 f90c 	bl	8001828 <Checksum>
 8001610:	4603      	mov	r3, r0
 8001612:	b2da      	uxtb	r2, r3
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 8001618:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800161a:	b2da      	uxtb	r2, r3
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 8001620:	b2b3      	uxth	r3, r6
 8001622:	4619      	mov	r1, r3
 8001624:	69f8      	ldr	r0, [r7, #28]
 8001626:	f009 f881 	bl	800a72c <CDC_Transmit_FS>
		break;
 800162a:	e08d      	b.n	8001748 <TransmitData+0x754>
		else if (errorFlag == errorData)
 800162c:	4b4b      	ldr	r3, [pc, #300]	; (800175c <TransmitData+0x768>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b37      	cmp	r3, #55	; 0x37
 8001632:	d12b      	bne.n	800168c <TransmitData+0x698>
			txBuffer[0] = Send_message.inicio;
 8001634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001636:	b2da      	uxtb	r2, r3
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 800163c:	4b48      	ldr	r3, [pc, #288]	; (8001760 <TransmitData+0x76c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	b2da      	uxtb	r2, r3
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 8001646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001648:	b2da      	uxtb	r2, r3
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (Send_message.funcao | 0xF0);
 800164e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001650:	b25b      	sxtb	r3, r3
 8001652:	f063 030f 	orn	r3, r3, #15
 8001656:	b25b      	sxtb	r3, r3
 8001658:	b2da      	uxtb	r2, r3
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	2201      	movs	r2, #1
 8001662:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x07;
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	2207      	movs	r2, #7
 8001668:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 800166a:	69f8      	ldr	r0, [r7, #28]
 800166c:	f000 f8dc 	bl	8001828 <Checksum>
 8001670:	4603      	mov	r3, r0
 8001672:	b2da      	uxtb	r2, r3
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 8001678:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800167a:	b2da      	uxtb	r2, r3
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 8001680:	b2b3      	uxth	r3, r6
 8001682:	4619      	mov	r1, r3
 8001684:	69f8      	ldr	r0, [r7, #28]
 8001686:	f009 f851 	bl	800a72c <CDC_Transmit_FS>
		break;
 800168a:	e05d      	b.n	8001748 <TransmitData+0x754>
		else if (errorFlag == errorStartHeader)
 800168c:	4b33      	ldr	r3, [pc, #204]	; (800175c <TransmitData+0x768>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b38      	cmp	r3, #56	; 0x38
 8001692:	d12a      	bne.n	80016ea <TransmitData+0x6f6>
			txBuffer[0] = 0x0A;
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	220a      	movs	r2, #10
 8001698:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 800169a:	4b31      	ldr	r3, [pc, #196]	; (8001760 <TransmitData+0x76c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 80016a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (Send_message.funcao | 0xF0);
 80016ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016ae:	b25b      	sxtb	r3, r3
 80016b0:	f063 030f 	orn	r3, r3, #15
 80016b4:	b25b      	sxtb	r3, r3
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	2201      	movs	r2, #1
 80016c0:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x08;
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	2208      	movs	r2, #8
 80016c6:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 80016c8:	69f8      	ldr	r0, [r7, #28]
 80016ca:	f000 f8ad 	bl	8001828 <Checksum>
 80016ce:	4603      	mov	r3, r0
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 80016d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 80016de:	b2b3      	uxth	r3, r6
 80016e0:	4619      	mov	r1, r3
 80016e2:	69f8      	ldr	r0, [r7, #28]
 80016e4:	f009 f822 	bl	800a72c <CDC_Transmit_FS>
		break;
 80016e8:	e02e      	b.n	8001748 <TransmitData+0x754>
		else if (errorFlag == errorEndHeader)
 80016ea:	4b1c      	ldr	r3, [pc, #112]	; (800175c <TransmitData+0x768>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b39      	cmp	r3, #57	; 0x39
 80016f0:	d12a      	bne.n	8001748 <TransmitData+0x754>
			txBuffer[0] = Send_message.inicio;
 80016f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	701a      	strb	r2, [r3, #0]
			txBuffer[1] = infoDevice.Id;
 80016fa:	4b19      	ldr	r3, [pc, #100]	; (8001760 <TransmitData+0x76c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	705a      	strb	r2, [r3, #1]
			txBuffer[2] = Send_message.endOrigem;
 8001704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001706:	b2da      	uxtb	r2, r3
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	709a      	strb	r2, [r3, #2]
			txBuffer[3] = (Send_message.funcao | 0xF0);
 800170c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800170e:	b25b      	sxtb	r3, r3
 8001710:	f063 030f 	orn	r3, r3, #15
 8001714:	b25b      	sxtb	r3, r3
 8001716:	b2da      	uxtb	r2, r3
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	70da      	strb	r2, [r3, #3]
			txBuffer[4] = 0x01;
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	2201      	movs	r2, #1
 8001720:	711a      	strb	r2, [r3, #4]
			txBuffer[5] = 0x09;
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	2209      	movs	r2, #9
 8001726:	715a      	strb	r2, [r3, #5]
			txBuffer[6] = Checksum(txBuffer);
 8001728:	69f8      	ldr	r0, [r7, #28]
 800172a:	f000 f87d 	bl	8001828 <Checksum>
 800172e:	4603      	mov	r3, r0
 8001730:	b2da      	uxtb	r2, r3
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	719a      	strb	r2, [r3, #6]
			txBuffer[7] = Send_message.fim;
 8001736:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001738:	b2da      	uxtb	r2, r3
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	71da      	strb	r2, [r3, #7]
			CDC_Transmit_FS((uint8_t*)txBuffer, sizeof(txBuffer));
 800173e:	b2b3      	uxth	r3, r6
 8001740:	4619      	mov	r1, r3
 8001742:	69f8      	ldr	r0, [r7, #28]
 8001744:	f008 fff2 	bl	800a72c <CDC_Transmit_FS>
		break;
 8001748:	bf00      	nop
 800174a:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
}
 800174e:	bf00      	nop
 8001750:	372c      	adds	r7, #44	; 0x2c
 8001752:	46bd      	mov	sp, r7
 8001754:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001758:	b004      	add	sp, #16
 800175a:	4770      	bx	lr
 800175c:	20000000 	.word	0x20000000
 8001760:	2000035c 	.word	0x2000035c

08001764 <StopDevice>:

char StopDevice(char deviceFlag)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
static char stopEncoder;
char contador = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	73fb      	strb	r3, [r7, #15]
if(deviceFlag == 1)
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d110      	bne.n	800179a <StopDevice+0x36>
{
	stopEncoder = HAL_TIM_Encoder_Stop_IT(&htim2, TIM_CHANNEL_ALL);
 8001778:	213c      	movs	r1, #60	; 0x3c
 800177a:	4821      	ldr	r0, [pc, #132]	; (8001800 <StopDevice+0x9c>)
 800177c:	f003 fd38 	bl	80051f0 <HAL_TIM_Encoder_Stop_IT>
 8001780:	4603      	mov	r3, r0
 8001782:	461a      	mov	r2, r3
 8001784:	4b1f      	ldr	r3, [pc, #124]	; (8001804 <StopDevice+0xa0>)
 8001786:	701a      	strb	r2, [r3, #0]
	timerEnable = HAL_TIM_Base_Stop_IT(&htim3);
 8001788:	481f      	ldr	r0, [pc, #124]	; (8001808 <StopDevice+0xa4>)
 800178a:	f003 fbb3 	bl	8004ef4 <HAL_TIM_Base_Stop_IT>
 800178e:	4603      	mov	r3, r0
 8001790:	461a      	mov	r2, r3
 8001792:	4b1e      	ldr	r3, [pc, #120]	; (800180c <StopDevice+0xa8>)
 8001794:	601a      	str	r2, [r3, #0]
	deviceFlag = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	71fb      	strb	r3, [r7, #7]
}

/*stopEncoder = HAL_TIM_Encoder_Stop_IT(&htim2, TIM_CHANNEL_1);*/
HAL_Delay(10);
 800179a:	200a      	movs	r0, #10
 800179c:	f000 fb98 	bl	8001ed0 <HAL_Delay>
if(stopEncoder == HAL_OK && timerEnable == HAL_OK)
 80017a0:	4b18      	ldr	r3, [pc, #96]	; (8001804 <StopDevice+0xa0>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d126      	bne.n	80017f6 <StopDevice+0x92>
 80017a8:	4b18      	ldr	r3, [pc, #96]	; (800180c <StopDevice+0xa8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d122      	bne.n	80017f6 <StopDevice+0x92>
{
	for(contador=0;contador<10;contador++)
 80017b0:	2300      	movs	r3, #0
 80017b2:	73fb      	strb	r3, [r7, #15]
 80017b4:	e017      	b.n	80017e6 <StopDevice+0x82>
	{
		counterPulso[contador] = 0;
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
 80017b8:	4a15      	ldr	r2, [pc, #84]	; (8001810 <StopDevice+0xac>)
 80017ba:	2100      	movs	r1, #0
 80017bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		fimPulso[contador] = 0;
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
 80017c2:	4a14      	ldr	r2, [pc, #80]	; (8001814 <StopDevice+0xb0>)
 80017c4:	2100      	movs	r1, #0
 80017c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		currentTime[contador] = 0;
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	4a12      	ldr	r2, [pc, #72]	; (8001818 <StopDevice+0xb4>)
 80017ce:	2100      	movs	r1, #0
 80017d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		transmitFlag = 0;
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <StopDevice+0xb8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
		USB_FLAG = 0;
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <StopDevice+0xbc>)
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
	for(contador=0;contador<10;contador++)
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
 80017e2:	3301      	adds	r3, #1
 80017e4:	73fb      	strb	r3, [r7, #15]
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
 80017e8:	2b09      	cmp	r3, #9
 80017ea:	d9e4      	bls.n	80017b6 <StopDevice+0x52>
	}
	samples = 0;
 80017ec:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <StopDevice+0xc0>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
	return 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	e000      	b.n	80017f8 <StopDevice+0x94>
}
else return 1;
 80017f6:	2301      	movs	r3, #1
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	2000019c 	.word	0x2000019c
 8001804:	200003ef 	.word	0x200003ef
 8001808:	200001e4 	.word	0x200001e4
 800180c:	20000370 	.word	0x20000370
 8001810:	200002e8 	.word	0x200002e8
 8001814:	20000310 	.word	0x20000310
 8001818:	20000374 	.word	0x20000374
 800181c:	200002cc 	.word	0x200002cc
 8001820:	200002b6 	.word	0x200002b6
 8001824:	2000039c 	.word	0x2000039c

08001828 <Checksum>:


int Checksum(char *c)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
//if(c[0] == 0x0A)//Verifica Byte Inicio
//{
	if(c[4] == 0)Total=7;//Define tamanho do pacote
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3304      	adds	r3, #4
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d102      	bne.n	8001840 <Checksum+0x18>
 800183a:	4b54      	ldr	r3, [pc, #336]	; (800198c <Checksum+0x164>)
 800183c:	2207      	movs	r2, #7
 800183e:	701a      	strb	r2, [r3, #0]
	if(c[4] == 1)Total=8;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3304      	adds	r3, #4
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d102      	bne.n	8001850 <Checksum+0x28>
 800184a:	4b50      	ldr	r3, [pc, #320]	; (800198c <Checksum+0x164>)
 800184c:	2208      	movs	r2, #8
 800184e:	701a      	strb	r2, [r3, #0]
	if(c[4] == 2)Total=9;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3304      	adds	r3, #4
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b02      	cmp	r3, #2
 8001858:	d102      	bne.n	8001860 <Checksum+0x38>
 800185a:	4b4c      	ldr	r3, [pc, #304]	; (800198c <Checksum+0x164>)
 800185c:	2209      	movs	r2, #9
 800185e:	701a      	strb	r2, [r3, #0]
	if(c[4] == 4)Total=11;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3304      	adds	r3, #4
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b04      	cmp	r3, #4
 8001868:	d102      	bne.n	8001870 <Checksum+0x48>
 800186a:	4b48      	ldr	r3, [pc, #288]	; (800198c <Checksum+0x164>)
 800186c:	220b      	movs	r2, #11
 800186e:	701a      	strb	r2, [r3, #0]
	if(c[4] == 5) Total = 12;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3304      	adds	r3, #4
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b05      	cmp	r3, #5
 8001878:	d102      	bne.n	8001880 <Checksum+0x58>
 800187a:	4b44      	ldr	r3, [pc, #272]	; (800198c <Checksum+0x164>)
 800187c:	220c      	movs	r2, #12
 800187e:	701a      	strb	r2, [r3, #0]
	if(c[4] == 6) Total = 13;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3304      	adds	r3, #4
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b06      	cmp	r3, #6
 8001888:	d102      	bne.n	8001890 <Checksum+0x68>
 800188a:	4b40      	ldr	r3, [pc, #256]	; (800198c <Checksum+0x164>)
 800188c:	220d      	movs	r2, #13
 800188e:	701a      	strb	r2, [r3, #0]
	if(c[4] == 7) Total = 14;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3304      	adds	r3, #4
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b07      	cmp	r3, #7
 8001898:	d102      	bne.n	80018a0 <Checksum+0x78>
 800189a:	4b3c      	ldr	r3, [pc, #240]	; (800198c <Checksum+0x164>)
 800189c:	220e      	movs	r2, #14
 800189e:	701a      	strb	r2, [r3, #0]
	if(c[4] == 8) Total = 15;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3304      	adds	r3, #4
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	2b08      	cmp	r3, #8
 80018a8:	d102      	bne.n	80018b0 <Checksum+0x88>
 80018aa:	4b38      	ldr	r3, [pc, #224]	; (800198c <Checksum+0x164>)
 80018ac:	220f      	movs	r2, #15
 80018ae:	701a      	strb	r2, [r3, #0]
	if(c[4] == 9) Total = 16;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3304      	adds	r3, #4
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b09      	cmp	r3, #9
 80018b8:	d102      	bne.n	80018c0 <Checksum+0x98>
 80018ba:	4b34      	ldr	r3, [pc, #208]	; (800198c <Checksum+0x164>)
 80018bc:	2210      	movs	r2, #16
 80018be:	701a      	strb	r2, [r3, #0]
	if(c[4] == 10) Total = 17;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3304      	adds	r3, #4
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b0a      	cmp	r3, #10
 80018c8:	d102      	bne.n	80018d0 <Checksum+0xa8>
 80018ca:	4b30      	ldr	r3, [pc, #192]	; (800198c <Checksum+0x164>)
 80018cc:	2211      	movs	r2, #17
 80018ce:	701a      	strb	r2, [r3, #0]
	if(c[4] == 12) Total = 19;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3304      	adds	r3, #4
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b0c      	cmp	r3, #12
 80018d8:	d102      	bne.n	80018e0 <Checksum+0xb8>
 80018da:	4b2c      	ldr	r3, [pc, #176]	; (800198c <Checksum+0x164>)
 80018dc:	2213      	movs	r2, #19
 80018de:	701a      	strb	r2, [r3, #0]
	if(c[4] == 14) Total = 21;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3304      	adds	r3, #4
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b0e      	cmp	r3, #14
 80018e8:	d102      	bne.n	80018f0 <Checksum+0xc8>
 80018ea:	4b28      	ldr	r3, [pc, #160]	; (800198c <Checksum+0x164>)
 80018ec:	2215      	movs	r2, #21
 80018ee:	701a      	strb	r2, [r3, #0]
	if(c[4] == 23 ) Total = 29;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3304      	adds	r3, #4
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b17      	cmp	r3, #23
 80018f8:	d102      	bne.n	8001900 <Checksum+0xd8>
 80018fa:	4b24      	ldr	r3, [pc, #144]	; (800198c <Checksum+0x164>)
 80018fc:	221d      	movs	r2, #29
 80018fe:	701a      	strb	r2, [r3, #0]
	if(c[4] == 32 ) Total = 38;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3304      	adds	r3, #4
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b20      	cmp	r3, #32
 8001908:	d102      	bne.n	8001910 <Checksum+0xe8>
 800190a:	4b20      	ldr	r3, [pc, #128]	; (800198c <Checksum+0x164>)
 800190c:	2226      	movs	r2, #38	; 0x26
 800190e:	701a      	strb	r2, [r3, #0]
	if(c[4] == 40 ) Total = 47;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3304      	adds	r3, #4
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b28      	cmp	r3, #40	; 0x28
 8001918:	d102      	bne.n	8001920 <Checksum+0xf8>
 800191a:	4b1c      	ldr	r3, [pc, #112]	; (800198c <Checksum+0x164>)
 800191c:	222f      	movs	r2, #47	; 0x2f
 800191e:	701a      	strb	r2, [r3, #0]
	if(c[4] == 60 ) Total = 67;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3304      	adds	r3, #4
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b3c      	cmp	r3, #60	; 0x3c
 8001928:	d102      	bne.n	8001930 <Checksum+0x108>
 800192a:	4b18      	ldr	r3, [pc, #96]	; (800198c <Checksum+0x164>)
 800192c:	2243      	movs	r2, #67	; 0x43
 800192e:	701a      	strb	r2, [r3, #0]

	c_sum=0;
 8001930:	4b17      	ldr	r3, [pc, #92]	; (8001990 <Checksum+0x168>)
 8001932:	2200      	movs	r2, #0
 8001934:	801a      	strh	r2, [r3, #0]
	for(int i=1; i<(Total-2);i++)//Soma os bytes
 8001936:	2301      	movs	r3, #1
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	e00d      	b.n	8001958 <Checksum+0x130>
	{
		c_sum += c[i];
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	b29a      	uxth	r2, r3
 8001946:	4b12      	ldr	r3, [pc, #72]	; (8001990 <Checksum+0x168>)
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	4413      	add	r3, r2
 800194c:	b29a      	uxth	r2, r3
 800194e:	4b10      	ldr	r3, [pc, #64]	; (8001990 <Checksum+0x168>)
 8001950:	801a      	strh	r2, [r3, #0]
	for(int i=1; i<(Total-2);i++)//Soma os bytes
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	3301      	adds	r3, #1
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <Checksum+0x164>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	3b02      	subs	r3, #2
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	429a      	cmp	r2, r3
 8001962:	dbeb      	blt.n	800193c <Checksum+0x114>
	}

	checksum = 0xFF-c_sum;//Faz os calculos seguintes
 8001964:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <Checksum+0x168>)
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	b2db      	uxtb	r3, r3
 800196a:	43db      	mvns	r3, r3
 800196c:	b2da      	uxtb	r2, r3
 800196e:	4b09      	ldr	r3, [pc, #36]	; (8001994 <Checksum+0x16c>)
 8001970:	701a      	strb	r2, [r3, #0]
	checksum += 0x01;
 8001972:	4b08      	ldr	r3, [pc, #32]	; (8001994 <Checksum+0x16c>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	3301      	adds	r3, #1
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <Checksum+0x16c>)
 800197c:	701a      	strb	r2, [r3, #0]
//}
return checksum;
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <Checksum+0x16c>)
 8001980:	781b      	ldrb	r3, [r3, #0]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr
 800198c:	2000036d 	.word	0x2000036d
 8001990:	2000036a 	.word	0x2000036a
 8001994:	2000036c 	.word	0x2000036c

08001998 <HAL_TIM_IC_CaptureCallback>:



//Interrupções
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
if(readFlag == 1)
 80019a0:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <HAL_TIM_IC_CaptureCallback+0x5c>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d11f      	bne.n	80019e8 <HAL_TIM_IC_CaptureCallback+0x50>
{
	/*pulseCounter++;*/
	direction = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 80019a8:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <HAL_TIM_IC_CaptureCallback+0x60>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0310 	and.w	r3, r3, #16
 80019b2:	2b10      	cmp	r3, #16
 80019b4:	bf0c      	ite	eq
 80019b6:	2301      	moveq	r3, #1
 80019b8:	2300      	movne	r3, #0
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	461a      	mov	r2, r3
 80019be:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <HAL_TIM_IC_CaptureCallback+0x64>)
 80019c0:	701a      	strb	r2, [r3, #0]
	if(direction == 0)
 80019c2:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <HAL_TIM_IC_CaptureCallback+0x64>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d105      	bne.n	80019d6 <HAL_TIM_IC_CaptureCallback+0x3e>
	{
		pulseCounter++;
 80019ca:	4b0d      	ldr	r3, [pc, #52]	; (8001a00 <HAL_TIM_IC_CaptureCallback+0x68>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	3301      	adds	r3, #1
 80019d0:	4a0b      	ldr	r2, [pc, #44]	; (8001a00 <HAL_TIM_IC_CaptureCallback+0x68>)
 80019d2:	6013      	str	r3, [r2, #0]
		pulseCounter--;
//			if(pulseCounter<0) pulseCounter = 0;
		/*posAtual = pulseCounter;*/
	}
}
}
 80019d4:	e008      	b.n	80019e8 <HAL_TIM_IC_CaptureCallback+0x50>
	else if (direction == 1)
 80019d6:	4b09      	ldr	r3, [pc, #36]	; (80019fc <HAL_TIM_IC_CaptureCallback+0x64>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d104      	bne.n	80019e8 <HAL_TIM_IC_CaptureCallback+0x50>
		pulseCounter--;
 80019de:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <HAL_TIM_IC_CaptureCallback+0x68>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	4a06      	ldr	r2, [pc, #24]	; (8001a00 <HAL_TIM_IC_CaptureCallback+0x68>)
 80019e6:	6013      	str	r3, [r2, #0]
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	20000338 	.word	0x20000338
 80019f8:	2000019c 	.word	0x2000019c
 80019fc:	200003a4 	.word	0x200003a4
 8001a00:	2000033c 	.word	0x2000033c

08001a04 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
if(EndReception == '\0')
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <HAL_UART_RxCpltCallback+0x2c>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d109      	bne.n	8001a28 <HAL_UART_RxCpltCallback+0x24>
{
	command(RXBuffer[0]);
 8001a14:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <HAL_UART_RxCpltCallback+0x30>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff f95d 	bl	8000cd8 <command>
	HAL_UART_Receive_IT(&huart2, (uint8_t *)RXBuffer, 1);
 8001a1e:	2201      	movs	r2, #1
 8001a20:	4904      	ldr	r1, [pc, #16]	; (8001a34 <HAL_UART_RxCpltCallback+0x30>)
 8001a22:	4805      	ldr	r0, [pc, #20]	; (8001a38 <HAL_UART_RxCpltCallback+0x34>)
 8001a24:	f004 f859 	bl	8005ada <HAL_UART_Receive_IT>
}

}
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	200002b7 	.word	0x200002b7
 8001a34:	200002b8 	.word	0x200002b8
 8001a38:	2000022c 	.word	0x2000022c

08001a3c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
100 hz -> 10
200 hz ->5
500 Hz -> 2
1k -> 1*/

	newTime+=1; //1ms
 8001a44:	4b20      	ldr	r3, [pc, #128]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	4a1f      	ldr	r2, [pc, #124]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001a4c:	6013      	str	r3, [r2, #0]
	if(newTime == timeTotal)
 8001a4e:	4b1f      	ldr	r3, [pc, #124]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	4b1c      	ldr	r3, [pc, #112]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d125      	bne.n	8001aa8 <HAL_TIM_PeriodElapsedCallback+0x6c>
//	if(newTime == 20)
	{
		readFlag = 0;
 8001a5c:	4b1c      	ldr	r3, [pc, #112]	; (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]
		fimPulso[samples] = pulseCounter;
 8001a62:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	4619      	mov	r1, r3
 8001a68:	4b1b      	ldr	r3, [pc, #108]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a1b      	ldr	r2, [pc, #108]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001a6e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		acquiredTime += newTime;
 8001a72:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	4a18      	ldr	r2, [pc, #96]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001a7e:	6013      	str	r3, [r2, #0]
		currentTime[samples] = acquiredTime;
 8001a80:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	4619      	mov	r1, r3
 8001a86:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a16      	ldr	r2, [pc, #88]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001a8c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		samples++;
 8001a90:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	3301      	adds	r3, #1
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001a9a:	701a      	strb	r2, [r3, #0]
		newTime = 0;
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
		readFlag = 1;
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	701a      	strb	r2, [r3, #0]
	}
	if(samples == 10)
 8001aa8:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b0a      	cmp	r3, #10
 8001aae:	d105      	bne.n	8001abc <HAL_TIM_PeriodElapsedCallback+0x80>
	{
		transmitFlag = 1;
 8001ab0:	4b0d      	ldr	r3, [pc, #52]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	601a      	str	r2, [r3, #0]
		samples=0;
 8001ab6:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
	}
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	200002d0 	.word	0x200002d0
 8001acc:	20000339 	.word	0x20000339
 8001ad0:	20000338 	.word	0x20000338
 8001ad4:	2000039c 	.word	0x2000039c
 8001ad8:	2000033c 	.word	0x2000033c
 8001adc:	20000310 	.word	0x20000310
 8001ae0:	200002d4 	.word	0x200002d4
 8001ae4:	20000374 	.word	0x20000374
 8001ae8:	200002cc 	.word	0x200002cc

08001aec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	80fb      	strh	r3, [r7, #6]
if(GPIO_Pin == RESET_Pin)
 8001af6:	88fb      	ldrh	r3, [r7, #6]
 8001af8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001afc:	d105      	bne.n	8001b0a <HAL_GPIO_EXTI_Callback+0x1e>
{
	StateMachine = iddle;
 8001afe:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <HAL_GPIO_EXTI_Callback+0x28>)
 8001b00:	2249      	movs	r2, #73	; 0x49
 8001b02:	701a      	strb	r2, [r3, #0]
	EndReception = Reset;
 8001b04:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001b06:	2252      	movs	r2, #82	; 0x52
 8001b08:	701a      	strb	r2, [r3, #0]
}
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr
 8001b14:	2000036e 	.word	0x2000036e
 8001b18:	200002b7 	.word	0x200002b7

08001b1c <Error_Handler>:
/**
* @brief  This function is executed in case of error occurrence.
* @retval None
*/
void Error_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b20:	b672      	cpsid	i
}
 8001b22:	bf00      	nop
/* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1)
 8001b24:	e7fe      	b.n	8001b24 <Error_Handler+0x8>
	...

08001b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b2e:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <HAL_MspInit+0x5c>)
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	4a14      	ldr	r2, [pc, #80]	; (8001b84 <HAL_MspInit+0x5c>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6193      	str	r3, [r2, #24]
 8001b3a:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <HAL_MspInit+0x5c>)
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b46:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <HAL_MspInit+0x5c>)
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	4a0e      	ldr	r2, [pc, #56]	; (8001b84 <HAL_MspInit+0x5c>)
 8001b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b50:	61d3      	str	r3, [r2, #28]
 8001b52:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <HAL_MspInit+0x5c>)
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	607b      	str	r3, [r7, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <HAL_MspInit+0x60>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	4a04      	ldr	r2, [pc, #16]	; (8001b88 <HAL_MspInit+0x60>)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40010000 	.word	0x40010000

08001b8c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 0310 	add.w	r3, r7, #16
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001baa:	d12b      	bne.n	8001c04 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bac:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <HAL_TIM_Encoder_MspInit+0x80>)
 8001bae:	69db      	ldr	r3, [r3, #28]
 8001bb0:	4a16      	ldr	r2, [pc, #88]	; (8001c0c <HAL_TIM_Encoder_MspInit+0x80>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	61d3      	str	r3, [r2, #28]
 8001bb8:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <HAL_TIM_Encoder_MspInit+0x80>)
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc4:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <HAL_TIM_Encoder_MspInit+0x80>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	4a10      	ldr	r2, [pc, #64]	; (8001c0c <HAL_TIM_Encoder_MspInit+0x80>)
 8001bca:	f043 0304 	orr.w	r3, r3, #4
 8001bce:	6193      	str	r3, [r2, #24]
 8001bd0:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <HAL_TIM_Encoder_MspInit+0x80>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be8:	f107 0310 	add.w	r3, r7, #16
 8001bec:	4619      	mov	r1, r3
 8001bee:	4808      	ldr	r0, [pc, #32]	; (8001c10 <HAL_TIM_Encoder_MspInit+0x84>)
 8001bf0:	f000 fd7c 	bl	80026ec <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	201c      	movs	r0, #28
 8001bfa:	f000 fa64 	bl	80020c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001bfe:	201c      	movs	r0, #28
 8001c00:	f000 fa7d 	bl	80020fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c04:	bf00      	nop
 8001c06:	3720      	adds	r7, #32
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40010800 	.word	0x40010800

08001c14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a0d      	ldr	r2, [pc, #52]	; (8001c58 <HAL_TIM_Base_MspInit+0x44>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d113      	bne.n	8001c4e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c26:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <HAL_TIM_Base_MspInit+0x48>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	4a0c      	ldr	r2, [pc, #48]	; (8001c5c <HAL_TIM_Base_MspInit+0x48>)
 8001c2c:	f043 0302 	orr.w	r3, r3, #2
 8001c30:	61d3      	str	r3, [r2, #28]
 8001c32:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <HAL_TIM_Base_MspInit+0x48>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2100      	movs	r1, #0
 8001c42:	201d      	movs	r0, #29
 8001c44:	f000 fa3f 	bl	80020c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c48:	201d      	movs	r0, #29
 8001c4a:	f000 fa58 	bl	80020fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c4e:	bf00      	nop
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40000400 	.word	0x40000400
 8001c5c:	40021000 	.word	0x40021000

08001c60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	f107 0310 	add.w	r3, r7, #16
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a1f      	ldr	r2, [pc, #124]	; (8001cf8 <HAL_UART_MspInit+0x98>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d137      	bne.n	8001cf0 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c80:	4b1e      	ldr	r3, [pc, #120]	; (8001cfc <HAL_UART_MspInit+0x9c>)
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	4a1d      	ldr	r2, [pc, #116]	; (8001cfc <HAL_UART_MspInit+0x9c>)
 8001c86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c8a:	61d3      	str	r3, [r2, #28]
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <HAL_UART_MspInit+0x9c>)
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c98:	4b18      	ldr	r3, [pc, #96]	; (8001cfc <HAL_UART_MspInit+0x9c>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	4a17      	ldr	r2, [pc, #92]	; (8001cfc <HAL_UART_MspInit+0x9c>)
 8001c9e:	f043 0304 	orr.w	r3, r3, #4
 8001ca2:	6193      	str	r3, [r2, #24]
 8001ca4:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <HAL_UART_MspInit+0x9c>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cb0:	2304      	movs	r3, #4
 8001cb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbc:	f107 0310 	add.w	r3, r7, #16
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	480f      	ldr	r0, [pc, #60]	; (8001d00 <HAL_UART_MspInit+0xa0>)
 8001cc4:	f000 fd12 	bl	80026ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001cc8:	2308      	movs	r3, #8
 8001cca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd4:	f107 0310 	add.w	r3, r7, #16
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4809      	ldr	r0, [pc, #36]	; (8001d00 <HAL_UART_MspInit+0xa0>)
 8001cdc:	f000 fd06 	bl	80026ec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	2026      	movs	r0, #38	; 0x26
 8001ce6:	f000 f9ee 	bl	80020c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cea:	2026      	movs	r0, #38	; 0x26
 8001cec:	f000 fa07 	bl	80020fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cf0:	bf00      	nop
 8001cf2:	3720      	adds	r7, #32
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40004400 	.word	0x40004400
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40010800 	.word	0x40010800

08001d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d08:	e7fe      	b.n	8001d08 <NMI_Handler+0x4>

08001d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d0e:	e7fe      	b.n	8001d0e <HardFault_Handler+0x4>

08001d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d14:	e7fe      	b.n	8001d14 <MemManage_Handler+0x4>

08001d16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d1a:	e7fe      	b.n	8001d1a <BusFault_Handler+0x4>

08001d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d20:	e7fe      	b.n	8001d20 <UsageFault_Handler+0x4>

08001d22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr

08001d2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr

08001d3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr

08001d46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d4a:	f000 f8a5 	bl	8001e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001d58:	4802      	ldr	r0, [pc, #8]	; (8001d64 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001d5a:	f000 ffc6 	bl	8002cea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	200010b0 	.word	0x200010b0

08001d68 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RESET_Pin);
 8001d6c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d70:	f000 fe72 	bl	8002a58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d74:	bf00      	nop
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d7c:	4802      	ldr	r0, [pc, #8]	; (8001d88 <TIM2_IRQHandler+0x10>)
 8001d7e:	f003 faec 	bl	800535a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	2000019c 	.word	0x2000019c

08001d8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d90:	4802      	ldr	r0, [pc, #8]	; (8001d9c <TIM3_IRQHandler+0x10>)
 8001d92:	f003 fae2 	bl	800535a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	200001e4 	.word	0x200001e4

08001da0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001da4:	4802      	ldr	r0, [pc, #8]	; (8001db0 <USART2_IRQHandler+0x10>)
 8001da6:	f003 fec9 	bl	8005b3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	2000022c 	.word	0x2000022c

08001db4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr

08001dc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dc0:	480c      	ldr	r0, [pc, #48]	; (8001df4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dc2:	490d      	ldr	r1, [pc, #52]	; (8001df8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dc4:	4a0d      	ldr	r2, [pc, #52]	; (8001dfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc8:	e002      	b.n	8001dd0 <LoopCopyDataInit>

08001dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dce:	3304      	adds	r3, #4

08001dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd4:	d3f9      	bcc.n	8001dca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dd6:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dd8:	4c0a      	ldr	r4, [pc, #40]	; (8001e04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ddc:	e001      	b.n	8001de2 <LoopFillZerobss>

08001dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001de0:	3204      	adds	r2, #4

08001de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de4:	d3fb      	bcc.n	8001dde <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001de6:	f7ff ffe5 	bl	8001db4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dea:	f009 f87d 	bl	800aee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dee:	f7fe f9f9 	bl	80001e4 <main>
  bx lr
 8001df2:	4770      	bx	lr
  ldr r0, =_sdata
 8001df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df8:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8001dfc:	0800afec 	.word	0x0800afec
  ldr r2, =_sbss
 8001e00:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8001e04:	200015bc 	.word	0x200015bc

08001e08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e08:	e7fe      	b.n	8001e08 <ADC1_2_IRQHandler>
	...

08001e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <HAL_Init+0x28>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a07      	ldr	r2, [pc, #28]	; (8001e34 <HAL_Init+0x28>)
 8001e16:	f043 0310 	orr.w	r3, r3, #16
 8001e1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e1c:	2003      	movs	r0, #3
 8001e1e:	f000 f947 	bl	80020b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e22:	200f      	movs	r0, #15
 8001e24:	f000 f808 	bl	8001e38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e28:	f7ff fe7e 	bl	8001b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40022000 	.word	0x40022000

08001e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e40:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <HAL_InitTick+0x54>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <HAL_InitTick+0x58>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 f95f 	bl	800211a <HAL_SYSTICK_Config>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e00e      	b.n	8001e84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b0f      	cmp	r3, #15
 8001e6a:	d80a      	bhi.n	8001e82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	f04f 30ff 	mov.w	r0, #4294967295
 8001e74:	f000 f927 	bl	80020c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e78:	4a06      	ldr	r2, [pc, #24]	; (8001e94 <HAL_InitTick+0x5c>)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	e000      	b.n	8001e84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20000004 	.word	0x20000004
 8001e90:	2000000c 	.word	0x2000000c
 8001e94:	20000008 	.word	0x20000008

08001e98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <HAL_IncTick+0x1c>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <HAL_IncTick+0x20>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	4a03      	ldr	r2, [pc, #12]	; (8001eb8 <HAL_IncTick+0x20>)
 8001eaa:	6013      	str	r3, [r2, #0]
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr
 8001eb4:	2000000c 	.word	0x2000000c
 8001eb8:	200003f0 	.word	0x200003f0

08001ebc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec0:	4b02      	ldr	r3, [pc, #8]	; (8001ecc <HAL_GetTick+0x10>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	200003f0 	.word	0x200003f0

08001ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed8:	f7ff fff0 	bl	8001ebc <HAL_GetTick>
 8001edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee8:	d005      	beq.n	8001ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eea:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <HAL_Delay+0x44>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ef6:	bf00      	nop
 8001ef8:	f7ff ffe0 	bl	8001ebc <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d8f7      	bhi.n	8001ef8 <HAL_Delay+0x28>
  {
  }
}
 8001f08:	bf00      	nop
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	2000000c 	.word	0x2000000c

08001f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <__NVIC_SetPriorityGrouping+0x44>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f34:	4013      	ands	r3, r2
 8001f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f4a:	4a04      	ldr	r2, [pc, #16]	; (8001f5c <__NVIC_SetPriorityGrouping+0x44>)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	60d3      	str	r3, [r2, #12]
}
 8001f50:	bf00      	nop
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f64:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <__NVIC_GetPriorityGrouping+0x18>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	0a1b      	lsrs	r3, r3, #8
 8001f6a:	f003 0307 	and.w	r3, r3, #7
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	db0b      	blt.n	8001fa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	f003 021f 	and.w	r2, r3, #31
 8001f94:	4906      	ldr	r1, [pc, #24]	; (8001fb0 <__NVIC_EnableIRQ+0x34>)
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	095b      	lsrs	r3, r3, #5
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr
 8001fb0:	e000e100 	.word	0xe000e100

08001fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	6039      	str	r1, [r7, #0]
 8001fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	db0a      	blt.n	8001fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	490c      	ldr	r1, [pc, #48]	; (8002000 <__NVIC_SetPriority+0x4c>)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	0112      	lsls	r2, r2, #4
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fdc:	e00a      	b.n	8001ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4908      	ldr	r1, [pc, #32]	; (8002004 <__NVIC_SetPriority+0x50>)
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	3b04      	subs	r3, #4
 8001fec:	0112      	lsls	r2, r2, #4
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	761a      	strb	r2, [r3, #24]
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bc80      	pop	{r7}
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	e000e100 	.word	0xe000e100
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002008:	b480      	push	{r7}
 800200a:	b089      	sub	sp, #36	; 0x24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f1c3 0307 	rsb	r3, r3, #7
 8002022:	2b04      	cmp	r3, #4
 8002024:	bf28      	it	cs
 8002026:	2304      	movcs	r3, #4
 8002028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3304      	adds	r3, #4
 800202e:	2b06      	cmp	r3, #6
 8002030:	d902      	bls.n	8002038 <NVIC_EncodePriority+0x30>
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3b03      	subs	r3, #3
 8002036:	e000      	b.n	800203a <NVIC_EncodePriority+0x32>
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800203c:	f04f 32ff 	mov.w	r2, #4294967295
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43da      	mvns	r2, r3
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	401a      	ands	r2, r3
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002050:	f04f 31ff 	mov.w	r1, #4294967295
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	fa01 f303 	lsl.w	r3, r1, r3
 800205a:	43d9      	mvns	r1, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002060:	4313      	orrs	r3, r2
         );
}
 8002062:	4618      	mov	r0, r3
 8002064:	3724      	adds	r7, #36	; 0x24
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3b01      	subs	r3, #1
 8002078:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800207c:	d301      	bcc.n	8002082 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800207e:	2301      	movs	r3, #1
 8002080:	e00f      	b.n	80020a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002082:	4a0a      	ldr	r2, [pc, #40]	; (80020ac <SysTick_Config+0x40>)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3b01      	subs	r3, #1
 8002088:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800208a:	210f      	movs	r1, #15
 800208c:	f04f 30ff 	mov.w	r0, #4294967295
 8002090:	f7ff ff90 	bl	8001fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002094:	4b05      	ldr	r3, [pc, #20]	; (80020ac <SysTick_Config+0x40>)
 8002096:	2200      	movs	r2, #0
 8002098:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800209a:	4b04      	ldr	r3, [pc, #16]	; (80020ac <SysTick_Config+0x40>)
 800209c:	2207      	movs	r2, #7
 800209e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	e000e010 	.word	0xe000e010

080020b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff ff2d 	bl	8001f18 <__NVIC_SetPriorityGrouping>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b086      	sub	sp, #24
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	4603      	mov	r3, r0
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	607a      	str	r2, [r7, #4]
 80020d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d8:	f7ff ff42 	bl	8001f60 <__NVIC_GetPriorityGrouping>
 80020dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	68b9      	ldr	r1, [r7, #8]
 80020e2:	6978      	ldr	r0, [r7, #20]
 80020e4:	f7ff ff90 	bl	8002008 <NVIC_EncodePriority>
 80020e8:	4602      	mov	r2, r0
 80020ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ee:	4611      	mov	r1, r2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff ff5f 	bl	8001fb4 <__NVIC_SetPriority>
}
 80020f6:	bf00      	nop
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	4603      	mov	r3, r0
 8002106:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff35 	bl	8001f7c <__NVIC_EnableIRQ>
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff ffa2 	bl	800206c <SysTick_Config>
 8002128:	4603      	mov	r3, r0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002132:	b480      	push	{r7}
 8002134:	b085      	sub	sp, #20
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800213a:	2300      	movs	r3, #0
 800213c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002144:	2b02      	cmp	r3, #2
 8002146:	d008      	beq.n	800215a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2204      	movs	r2, #4
 800214c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e020      	b.n	800219c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 020e 	bic.w	r2, r2, #14
 8002168:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0201 	bic.w	r2, r2, #1
 8002178:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002182:	2101      	movs	r1, #1
 8002184:	fa01 f202 	lsl.w	r2, r1, r2
 8002188:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800219a:	7bfb      	ldrb	r3, [r7, #15]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr
	...

080021a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d005      	beq.n	80021ca <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2204      	movs	r2, #4
 80021c2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	73fb      	strb	r3, [r7, #15]
 80021c8:	e051      	b.n	800226e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 020e 	bic.w	r2, r2, #14
 80021d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0201 	bic.w	r2, r2, #1
 80021e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a22      	ldr	r2, [pc, #136]	; (8002278 <HAL_DMA_Abort_IT+0xd0>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d029      	beq.n	8002248 <HAL_DMA_Abort_IT+0xa0>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a20      	ldr	r2, [pc, #128]	; (800227c <HAL_DMA_Abort_IT+0xd4>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d022      	beq.n	8002244 <HAL_DMA_Abort_IT+0x9c>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a1f      	ldr	r2, [pc, #124]	; (8002280 <HAL_DMA_Abort_IT+0xd8>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d01a      	beq.n	800223e <HAL_DMA_Abort_IT+0x96>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a1d      	ldr	r2, [pc, #116]	; (8002284 <HAL_DMA_Abort_IT+0xdc>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d012      	beq.n	8002238 <HAL_DMA_Abort_IT+0x90>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a1c      	ldr	r2, [pc, #112]	; (8002288 <HAL_DMA_Abort_IT+0xe0>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d00a      	beq.n	8002232 <HAL_DMA_Abort_IT+0x8a>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a1a      	ldr	r2, [pc, #104]	; (800228c <HAL_DMA_Abort_IT+0xe4>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d102      	bne.n	800222c <HAL_DMA_Abort_IT+0x84>
 8002226:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800222a:	e00e      	b.n	800224a <HAL_DMA_Abort_IT+0xa2>
 800222c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002230:	e00b      	b.n	800224a <HAL_DMA_Abort_IT+0xa2>
 8002232:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002236:	e008      	b.n	800224a <HAL_DMA_Abort_IT+0xa2>
 8002238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800223c:	e005      	b.n	800224a <HAL_DMA_Abort_IT+0xa2>
 800223e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002242:	e002      	b.n	800224a <HAL_DMA_Abort_IT+0xa2>
 8002244:	2310      	movs	r3, #16
 8002246:	e000      	b.n	800224a <HAL_DMA_Abort_IT+0xa2>
 8002248:	2301      	movs	r3, #1
 800224a:	4a11      	ldr	r2, [pc, #68]	; (8002290 <HAL_DMA_Abort_IT+0xe8>)
 800224c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	4798      	blx	r3
    } 
  }
  return status;
 800226e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40020008 	.word	0x40020008
 800227c:	4002001c 	.word	0x4002001c
 8002280:	40020030 	.word	0x40020030
 8002284:	40020044 	.word	0x40020044
 8002288:	40020058 	.word	0x40020058
 800228c:	4002006c 	.word	0x4002006c
 8002290:	40020000 	.word	0x40020000

08002294 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002296:	b087      	sub	sp, #28
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80022ae:	4b2f      	ldr	r3, [pc, #188]	; (800236c <HAL_FLASH_Program+0xd8>)
 80022b0:	7e1b      	ldrb	r3, [r3, #24]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d101      	bne.n	80022ba <HAL_FLASH_Program+0x26>
 80022b6:	2302      	movs	r3, #2
 80022b8:	e054      	b.n	8002364 <HAL_FLASH_Program+0xd0>
 80022ba:	4b2c      	ldr	r3, [pc, #176]	; (800236c <HAL_FLASH_Program+0xd8>)
 80022bc:	2201      	movs	r2, #1
 80022be:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80022c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022c4:	f000 f8d4 	bl	8002470 <FLASH_WaitForLastOperation>
 80022c8:	4603      	mov	r3, r0
 80022ca:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80022cc:	7dfb      	ldrb	r3, [r7, #23]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d144      	bne.n	800235c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d102      	bne.n	80022de <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80022d8:	2301      	movs	r3, #1
 80022da:	757b      	strb	r3, [r7, #21]
 80022dc:	e007      	b.n	80022ee <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d102      	bne.n	80022ea <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80022e4:	2302      	movs	r3, #2
 80022e6:	757b      	strb	r3, [r7, #21]
 80022e8:	e001      	b.n	80022ee <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80022ea:	2304      	movs	r3, #4
 80022ec:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80022ee:	2300      	movs	r3, #0
 80022f0:	75bb      	strb	r3, [r7, #22]
 80022f2:	e02d      	b.n	8002350 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80022f4:	7dbb      	ldrb	r3, [r7, #22]
 80022f6:	005a      	lsls	r2, r3, #1
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	eb02 0c03 	add.w	ip, r2, r3
 80022fe:	7dbb      	ldrb	r3, [r7, #22]
 8002300:	0119      	lsls	r1, r3, #4
 8002302:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002306:	f1c1 0620 	rsb	r6, r1, #32
 800230a:	f1a1 0020 	sub.w	r0, r1, #32
 800230e:	fa22 f401 	lsr.w	r4, r2, r1
 8002312:	fa03 f606 	lsl.w	r6, r3, r6
 8002316:	4334      	orrs	r4, r6
 8002318:	fa23 f000 	lsr.w	r0, r3, r0
 800231c:	4304      	orrs	r4, r0
 800231e:	fa23 f501 	lsr.w	r5, r3, r1
 8002322:	b2a3      	uxth	r3, r4
 8002324:	4619      	mov	r1, r3
 8002326:	4660      	mov	r0, ip
 8002328:	f000 f886 	bl	8002438 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800232c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002330:	f000 f89e 	bl	8002470 <FLASH_WaitForLastOperation>
 8002334:	4603      	mov	r3, r0
 8002336:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002338:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <HAL_FLASH_Program+0xdc>)
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	4a0c      	ldr	r2, [pc, #48]	; (8002370 <HAL_FLASH_Program+0xdc>)
 800233e:	f023 0301 	bic.w	r3, r3, #1
 8002342:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002344:	7dfb      	ldrb	r3, [r7, #23]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d107      	bne.n	800235a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800234a:	7dbb      	ldrb	r3, [r7, #22]
 800234c:	3301      	adds	r3, #1
 800234e:	75bb      	strb	r3, [r7, #22]
 8002350:	7dba      	ldrb	r2, [r7, #22]
 8002352:	7d7b      	ldrb	r3, [r7, #21]
 8002354:	429a      	cmp	r2, r3
 8002356:	d3cd      	bcc.n	80022f4 <HAL_FLASH_Program+0x60>
 8002358:	e000      	b.n	800235c <HAL_FLASH_Program+0xc8>
      {
        break;
 800235a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <HAL_FLASH_Program+0xd8>)
 800235e:	2200      	movs	r2, #0
 8002360:	761a      	strb	r2, [r3, #24]

  return status;
 8002362:	7dfb      	ldrb	r3, [r7, #23]
}
 8002364:	4618      	mov	r0, r3
 8002366:	371c      	adds	r7, #28
 8002368:	46bd      	mov	sp, r7
 800236a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800236c:	200003f8 	.word	0x200003f8
 8002370:	40022000 	.word	0x40022000

08002374 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800237a:	2300      	movs	r3, #0
 800237c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800237e:	4b0d      	ldr	r3, [pc, #52]	; (80023b4 <HAL_FLASH_Unlock+0x40>)
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00d      	beq.n	80023a6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800238a:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <HAL_FLASH_Unlock+0x40>)
 800238c:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <HAL_FLASH_Unlock+0x44>)
 800238e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002390:	4b08      	ldr	r3, [pc, #32]	; (80023b4 <HAL_FLASH_Unlock+0x40>)
 8002392:	4a0a      	ldr	r2, [pc, #40]	; (80023bc <HAL_FLASH_Unlock+0x48>)
 8002394:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002396:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <HAL_FLASH_Unlock+0x40>)
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80023a6:	79fb      	ldrb	r3, [r7, #7]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40022000 	.word	0x40022000
 80023b8:	45670123 	.word	0x45670123
 80023bc:	cdef89ab 	.word	0xcdef89ab

080023c0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <HAL_FLASH_Lock+0x1c>)
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	4a04      	ldr	r2, [pc, #16]	; (80023dc <HAL_FLASH_Lock+0x1c>)
 80023ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023ce:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40022000 	.word	0x40022000

080023e0 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 80023e4:	4b09      	ldr	r3, [pc, #36]	; (800240c <HAL_FLASH_OB_Unlock+0x2c>)
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d107      	bne.n	8002400 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <HAL_FLASH_OB_Unlock+0x2c>)
 80023f2:	4a07      	ldr	r2, [pc, #28]	; (8002410 <HAL_FLASH_OB_Unlock+0x30>)
 80023f4:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 80023f6:	4b05      	ldr	r3, [pc, #20]	; (800240c <HAL_FLASH_OB_Unlock+0x2c>)
 80023f8:	4a06      	ldr	r2, [pc, #24]	; (8002414 <HAL_FLASH_OB_Unlock+0x34>)
 80023fa:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 80023fc:	2300      	movs	r3, #0
 80023fe:	e000      	b.n	8002402 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
}
 8002402:	4618      	mov	r0, r3
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40022000 	.word	0x40022000
 8002410:	45670123 	.word	0x45670123
 8002414:	cdef89ab 	.word	0xcdef89ab

08002418 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 800241c:	4b05      	ldr	r3, [pc, #20]	; (8002434 <HAL_FLASH_OB_Lock+0x1c>)
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	4a04      	ldr	r2, [pc, #16]	; (8002434 <HAL_FLASH_OB_Lock+0x1c>)
 8002422:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002426:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40022000 	.word	0x40022000

08002438 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002444:	4b08      	ldr	r3, [pc, #32]	; (8002468 <FLASH_Program_HalfWord+0x30>)
 8002446:	2200      	movs	r2, #0
 8002448:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800244a:	4b08      	ldr	r3, [pc, #32]	; (800246c <FLASH_Program_HalfWord+0x34>)
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	4a07      	ldr	r2, [pc, #28]	; (800246c <FLASH_Program_HalfWord+0x34>)
 8002450:	f043 0301 	orr.w	r3, r3, #1
 8002454:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	887a      	ldrh	r2, [r7, #2]
 800245a:	801a      	strh	r2, [r3, #0]
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	200003f8 	.word	0x200003f8
 800246c:	40022000 	.word	0x40022000

08002470 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002478:	f7ff fd20 	bl	8001ebc <HAL_GetTick>
 800247c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800247e:	e010      	b.n	80024a2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002486:	d00c      	beq.n	80024a2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d007      	beq.n	800249e <FLASH_WaitForLastOperation+0x2e>
 800248e:	f7ff fd15 	bl	8001ebc <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	429a      	cmp	r2, r3
 800249c:	d201      	bcs.n	80024a2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e025      	b.n	80024ee <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80024a2:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <FLASH_WaitForLastOperation+0x88>)
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1e8      	bne.n	8002480 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80024ae:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <FLASH_WaitForLastOperation+0x88>)
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f003 0320 	and.w	r3, r3, #32
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d002      	beq.n	80024c0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80024ba:	4b0f      	ldr	r3, [pc, #60]	; (80024f8 <FLASH_WaitForLastOperation+0x88>)
 80024bc:	2220      	movs	r2, #32
 80024be:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80024c0:	4b0d      	ldr	r3, [pc, #52]	; (80024f8 <FLASH_WaitForLastOperation+0x88>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	f003 0310 	and.w	r3, r3, #16
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10b      	bne.n	80024e4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80024cc:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <FLASH_WaitForLastOperation+0x88>)
 80024ce:	69db      	ldr	r3, [r3, #28]
 80024d0:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d105      	bne.n	80024e4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80024d8:	4b07      	ldr	r3, [pc, #28]	; (80024f8 <FLASH_WaitForLastOperation+0x88>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80024e4:	f000 f80a 	bl	80024fc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e000      	b.n	80024ee <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40022000 	.word	0x40022000

080024fc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002506:	4b23      	ldr	r3, [pc, #140]	; (8002594 <FLASH_SetErrorCode+0x98>)
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	f003 0310 	and.w	r3, r3, #16
 800250e:	2b00      	cmp	r3, #0
 8002510:	d009      	beq.n	8002526 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002512:	4b21      	ldr	r3, [pc, #132]	; (8002598 <FLASH_SetErrorCode+0x9c>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	f043 0302 	orr.w	r3, r3, #2
 800251a:	4a1f      	ldr	r2, [pc, #124]	; (8002598 <FLASH_SetErrorCode+0x9c>)
 800251c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f043 0310 	orr.w	r3, r3, #16
 8002524:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002526:	4b1b      	ldr	r3, [pc, #108]	; (8002594 <FLASH_SetErrorCode+0x98>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	f003 0304 	and.w	r3, r3, #4
 800252e:	2b00      	cmp	r3, #0
 8002530:	d009      	beq.n	8002546 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002532:	4b19      	ldr	r3, [pc, #100]	; (8002598 <FLASH_SetErrorCode+0x9c>)
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	f043 0301 	orr.w	r3, r3, #1
 800253a:	4a17      	ldr	r2, [pc, #92]	; (8002598 <FLASH_SetErrorCode+0x9c>)
 800253c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f043 0304 	orr.w	r3, r3, #4
 8002544:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002546:	4b13      	ldr	r3, [pc, #76]	; (8002594 <FLASH_SetErrorCode+0x98>)
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00b      	beq.n	800256a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002552:	4b11      	ldr	r3, [pc, #68]	; (8002598 <FLASH_SetErrorCode+0x9c>)
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	f043 0304 	orr.w	r3, r3, #4
 800255a:	4a0f      	ldr	r2, [pc, #60]	; (8002598 <FLASH_SetErrorCode+0x9c>)
 800255c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800255e:	4b0d      	ldr	r3, [pc, #52]	; (8002594 <FLASH_SetErrorCode+0x98>)
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	4a0c      	ldr	r2, [pc, #48]	; (8002594 <FLASH_SetErrorCode+0x98>)
 8002564:	f023 0301 	bic.w	r3, r3, #1
 8002568:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f240 1201 	movw	r2, #257	; 0x101
 8002570:	4293      	cmp	r3, r2
 8002572:	d106      	bne.n	8002582 <FLASH_SetErrorCode+0x86>
 8002574:	4b07      	ldr	r3, [pc, #28]	; (8002594 <FLASH_SetErrorCode+0x98>)
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	4a06      	ldr	r2, [pc, #24]	; (8002594 <FLASH_SetErrorCode+0x98>)
 800257a:	f023 0301 	bic.w	r3, r3, #1
 800257e:	61d3      	str	r3, [r2, #28]
}  
 8002580:	e002      	b.n	8002588 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002582:	4a04      	ldr	r2, [pc, #16]	; (8002594 <FLASH_SetErrorCode+0x98>)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	60d3      	str	r3, [r2, #12]
}  
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	40022000 	.word	0x40022000
 8002598:	200003f8 	.word	0x200003f8

0800259c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80025ae:	4b2f      	ldr	r3, [pc, #188]	; (800266c <HAL_FLASHEx_Erase+0xd0>)
 80025b0:	7e1b      	ldrb	r3, [r3, #24]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d101      	bne.n	80025ba <HAL_FLASHEx_Erase+0x1e>
 80025b6:	2302      	movs	r3, #2
 80025b8:	e053      	b.n	8002662 <HAL_FLASHEx_Erase+0xc6>
 80025ba:	4b2c      	ldr	r3, [pc, #176]	; (800266c <HAL_FLASHEx_Erase+0xd0>)
 80025bc:	2201      	movs	r2, #1
 80025be:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d116      	bne.n	80025f6 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80025c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025cc:	f7ff ff50 	bl	8002470 <FLASH_WaitForLastOperation>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d141      	bne.n	800265a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80025d6:	2001      	movs	r0, #1
 80025d8:	f000 f84c 	bl	8002674 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80025dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025e0:	f7ff ff46 	bl	8002470 <FLASH_WaitForLastOperation>
 80025e4:	4603      	mov	r3, r0
 80025e6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80025e8:	4b21      	ldr	r3, [pc, #132]	; (8002670 <HAL_FLASHEx_Erase+0xd4>)
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	4a20      	ldr	r2, [pc, #128]	; (8002670 <HAL_FLASHEx_Erase+0xd4>)
 80025ee:	f023 0304 	bic.w	r3, r3, #4
 80025f2:	6113      	str	r3, [r2, #16]
 80025f4:	e031      	b.n	800265a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80025f6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80025fa:	f7ff ff39 	bl	8002470 <FLASH_WaitForLastOperation>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d12a      	bne.n	800265a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	f04f 32ff 	mov.w	r2, #4294967295
 800260a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	e019      	b.n	8002648 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002614:	68b8      	ldr	r0, [r7, #8]
 8002616:	f000 f849 	bl	80026ac <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800261a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800261e:	f7ff ff27 	bl	8002470 <FLASH_WaitForLastOperation>
 8002622:	4603      	mov	r3, r0
 8002624:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002626:	4b12      	ldr	r3, [pc, #72]	; (8002670 <HAL_FLASHEx_Erase+0xd4>)
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	4a11      	ldr	r2, [pc, #68]	; (8002670 <HAL_FLASHEx_Erase+0xd4>)
 800262c:	f023 0302 	bic.w	r3, r3, #2
 8002630:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002632:	7bfb      	ldrb	r3, [r7, #15]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	68ba      	ldr	r2, [r7, #8]
 800263c:	601a      	str	r2, [r3, #0]
            break;
 800263e:	e00c      	b.n	800265a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002646:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	029a      	lsls	r2, r3, #10
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	429a      	cmp	r2, r3
 8002658:	d3dc      	bcc.n	8002614 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800265a:	4b04      	ldr	r3, [pc, #16]	; (800266c <HAL_FLASHEx_Erase+0xd0>)
 800265c:	2200      	movs	r2, #0
 800265e:	761a      	strb	r2, [r3, #24]

  return status;
 8002660:	7bfb      	ldrb	r3, [r7, #15]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	200003f8 	.word	0x200003f8
 8002670:	40022000 	.word	0x40022000

08002674 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800267c:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <FLASH_MassErase+0x30>)
 800267e:	2200      	movs	r2, #0
 8002680:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002682:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <FLASH_MassErase+0x34>)
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	4a08      	ldr	r2, [pc, #32]	; (80026a8 <FLASH_MassErase+0x34>)
 8002688:	f043 0304 	orr.w	r3, r3, #4
 800268c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800268e:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <FLASH_MassErase+0x34>)
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	4a05      	ldr	r2, [pc, #20]	; (80026a8 <FLASH_MassErase+0x34>)
 8002694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002698:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr
 80026a4:	200003f8 	.word	0x200003f8
 80026a8:	40022000 	.word	0x40022000

080026ac <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80026b4:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <FLASH_PageErase+0x38>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80026ba:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <FLASH_PageErase+0x3c>)
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	4a0a      	ldr	r2, [pc, #40]	; (80026e8 <FLASH_PageErase+0x3c>)
 80026c0:	f043 0302 	orr.w	r3, r3, #2
 80026c4:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80026c6:	4a08      	ldr	r2, [pc, #32]	; (80026e8 <FLASH_PageErase+0x3c>)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80026cc:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <FLASH_PageErase+0x3c>)
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	4a05      	ldr	r2, [pc, #20]	; (80026e8 <FLASH_PageErase+0x3c>)
 80026d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026d6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	200003f8 	.word	0x200003f8
 80026e8:	40022000 	.word	0x40022000

080026ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b08b      	sub	sp, #44	; 0x2c
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026f6:	2300      	movs	r3, #0
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026fa:	2300      	movs	r3, #0
 80026fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026fe:	e169      	b.n	80029d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002700:	2201      	movs	r2, #1
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	69fa      	ldr	r2, [r7, #28]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	429a      	cmp	r2, r3
 800271a:	f040 8158 	bne.w	80029ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	4a9a      	ldr	r2, [pc, #616]	; (800298c <HAL_GPIO_Init+0x2a0>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d05e      	beq.n	80027e6 <HAL_GPIO_Init+0xfa>
 8002728:	4a98      	ldr	r2, [pc, #608]	; (800298c <HAL_GPIO_Init+0x2a0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d875      	bhi.n	800281a <HAL_GPIO_Init+0x12e>
 800272e:	4a98      	ldr	r2, [pc, #608]	; (8002990 <HAL_GPIO_Init+0x2a4>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d058      	beq.n	80027e6 <HAL_GPIO_Init+0xfa>
 8002734:	4a96      	ldr	r2, [pc, #600]	; (8002990 <HAL_GPIO_Init+0x2a4>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d86f      	bhi.n	800281a <HAL_GPIO_Init+0x12e>
 800273a:	4a96      	ldr	r2, [pc, #600]	; (8002994 <HAL_GPIO_Init+0x2a8>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d052      	beq.n	80027e6 <HAL_GPIO_Init+0xfa>
 8002740:	4a94      	ldr	r2, [pc, #592]	; (8002994 <HAL_GPIO_Init+0x2a8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d869      	bhi.n	800281a <HAL_GPIO_Init+0x12e>
 8002746:	4a94      	ldr	r2, [pc, #592]	; (8002998 <HAL_GPIO_Init+0x2ac>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d04c      	beq.n	80027e6 <HAL_GPIO_Init+0xfa>
 800274c:	4a92      	ldr	r2, [pc, #584]	; (8002998 <HAL_GPIO_Init+0x2ac>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d863      	bhi.n	800281a <HAL_GPIO_Init+0x12e>
 8002752:	4a92      	ldr	r2, [pc, #584]	; (800299c <HAL_GPIO_Init+0x2b0>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d046      	beq.n	80027e6 <HAL_GPIO_Init+0xfa>
 8002758:	4a90      	ldr	r2, [pc, #576]	; (800299c <HAL_GPIO_Init+0x2b0>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d85d      	bhi.n	800281a <HAL_GPIO_Init+0x12e>
 800275e:	2b12      	cmp	r3, #18
 8002760:	d82a      	bhi.n	80027b8 <HAL_GPIO_Init+0xcc>
 8002762:	2b12      	cmp	r3, #18
 8002764:	d859      	bhi.n	800281a <HAL_GPIO_Init+0x12e>
 8002766:	a201      	add	r2, pc, #4	; (adr r2, 800276c <HAL_GPIO_Init+0x80>)
 8002768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800276c:	080027e7 	.word	0x080027e7
 8002770:	080027c1 	.word	0x080027c1
 8002774:	080027d3 	.word	0x080027d3
 8002778:	08002815 	.word	0x08002815
 800277c:	0800281b 	.word	0x0800281b
 8002780:	0800281b 	.word	0x0800281b
 8002784:	0800281b 	.word	0x0800281b
 8002788:	0800281b 	.word	0x0800281b
 800278c:	0800281b 	.word	0x0800281b
 8002790:	0800281b 	.word	0x0800281b
 8002794:	0800281b 	.word	0x0800281b
 8002798:	0800281b 	.word	0x0800281b
 800279c:	0800281b 	.word	0x0800281b
 80027a0:	0800281b 	.word	0x0800281b
 80027a4:	0800281b 	.word	0x0800281b
 80027a8:	0800281b 	.word	0x0800281b
 80027ac:	0800281b 	.word	0x0800281b
 80027b0:	080027c9 	.word	0x080027c9
 80027b4:	080027dd 	.word	0x080027dd
 80027b8:	4a79      	ldr	r2, [pc, #484]	; (80029a0 <HAL_GPIO_Init+0x2b4>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d013      	beq.n	80027e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027be:	e02c      	b.n	800281a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	623b      	str	r3, [r7, #32]
          break;
 80027c6:	e029      	b.n	800281c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	3304      	adds	r3, #4
 80027ce:	623b      	str	r3, [r7, #32]
          break;
 80027d0:	e024      	b.n	800281c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	3308      	adds	r3, #8
 80027d8:	623b      	str	r3, [r7, #32]
          break;
 80027da:	e01f      	b.n	800281c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	330c      	adds	r3, #12
 80027e2:	623b      	str	r3, [r7, #32]
          break;
 80027e4:	e01a      	b.n	800281c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d102      	bne.n	80027f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027ee:	2304      	movs	r3, #4
 80027f0:	623b      	str	r3, [r7, #32]
          break;
 80027f2:	e013      	b.n	800281c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d105      	bne.n	8002808 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027fc:	2308      	movs	r3, #8
 80027fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69fa      	ldr	r2, [r7, #28]
 8002804:	611a      	str	r2, [r3, #16]
          break;
 8002806:	e009      	b.n	800281c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002808:	2308      	movs	r3, #8
 800280a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	615a      	str	r2, [r3, #20]
          break;
 8002812:	e003      	b.n	800281c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002814:	2300      	movs	r3, #0
 8002816:	623b      	str	r3, [r7, #32]
          break;
 8002818:	e000      	b.n	800281c <HAL_GPIO_Init+0x130>
          break;
 800281a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	2bff      	cmp	r3, #255	; 0xff
 8002820:	d801      	bhi.n	8002826 <HAL_GPIO_Init+0x13a>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	e001      	b.n	800282a <HAL_GPIO_Init+0x13e>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3304      	adds	r3, #4
 800282a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	2bff      	cmp	r3, #255	; 0xff
 8002830:	d802      	bhi.n	8002838 <HAL_GPIO_Init+0x14c>
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	e002      	b.n	800283e <HAL_GPIO_Init+0x152>
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	3b08      	subs	r3, #8
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	210f      	movs	r1, #15
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	fa01 f303 	lsl.w	r3, r1, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	401a      	ands	r2, r3
 8002850:	6a39      	ldr	r1, [r7, #32]
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	fa01 f303 	lsl.w	r3, r1, r3
 8002858:	431a      	orrs	r2, r3
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 80b1 	beq.w	80029ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800286c:	4b4d      	ldr	r3, [pc, #308]	; (80029a4 <HAL_GPIO_Init+0x2b8>)
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	4a4c      	ldr	r2, [pc, #304]	; (80029a4 <HAL_GPIO_Init+0x2b8>)
 8002872:	f043 0301 	orr.w	r3, r3, #1
 8002876:	6193      	str	r3, [r2, #24]
 8002878:	4b4a      	ldr	r3, [pc, #296]	; (80029a4 <HAL_GPIO_Init+0x2b8>)
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002884:	4a48      	ldr	r2, [pc, #288]	; (80029a8 <HAL_GPIO_Init+0x2bc>)
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	089b      	lsrs	r3, r3, #2
 800288a:	3302      	adds	r3, #2
 800288c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002890:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	f003 0303 	and.w	r3, r3, #3
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	220f      	movs	r2, #15
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	43db      	mvns	r3, r3
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	4013      	ands	r3, r2
 80028a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a40      	ldr	r2, [pc, #256]	; (80029ac <HAL_GPIO_Init+0x2c0>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d013      	beq.n	80028d8 <HAL_GPIO_Init+0x1ec>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a3f      	ldr	r2, [pc, #252]	; (80029b0 <HAL_GPIO_Init+0x2c4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d00d      	beq.n	80028d4 <HAL_GPIO_Init+0x1e8>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a3e      	ldr	r2, [pc, #248]	; (80029b4 <HAL_GPIO_Init+0x2c8>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d007      	beq.n	80028d0 <HAL_GPIO_Init+0x1e4>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a3d      	ldr	r2, [pc, #244]	; (80029b8 <HAL_GPIO_Init+0x2cc>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d101      	bne.n	80028cc <HAL_GPIO_Init+0x1e0>
 80028c8:	2303      	movs	r3, #3
 80028ca:	e006      	b.n	80028da <HAL_GPIO_Init+0x1ee>
 80028cc:	2304      	movs	r3, #4
 80028ce:	e004      	b.n	80028da <HAL_GPIO_Init+0x1ee>
 80028d0:	2302      	movs	r3, #2
 80028d2:	e002      	b.n	80028da <HAL_GPIO_Init+0x1ee>
 80028d4:	2301      	movs	r3, #1
 80028d6:	e000      	b.n	80028da <HAL_GPIO_Init+0x1ee>
 80028d8:	2300      	movs	r3, #0
 80028da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028dc:	f002 0203 	and.w	r2, r2, #3
 80028e0:	0092      	lsls	r2, r2, #2
 80028e2:	4093      	lsls	r3, r2
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028ea:	492f      	ldr	r1, [pc, #188]	; (80029a8 <HAL_GPIO_Init+0x2bc>)
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	089b      	lsrs	r3, r3, #2
 80028f0:	3302      	adds	r3, #2
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d006      	beq.n	8002912 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002904:	4b2d      	ldr	r3, [pc, #180]	; (80029bc <HAL_GPIO_Init+0x2d0>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	492c      	ldr	r1, [pc, #176]	; (80029bc <HAL_GPIO_Init+0x2d0>)
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	4313      	orrs	r3, r2
 800290e:	600b      	str	r3, [r1, #0]
 8002910:	e006      	b.n	8002920 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002912:	4b2a      	ldr	r3, [pc, #168]	; (80029bc <HAL_GPIO_Init+0x2d0>)
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	43db      	mvns	r3, r3
 800291a:	4928      	ldr	r1, [pc, #160]	; (80029bc <HAL_GPIO_Init+0x2d0>)
 800291c:	4013      	ands	r3, r2
 800291e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d006      	beq.n	800293a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800292c:	4b23      	ldr	r3, [pc, #140]	; (80029bc <HAL_GPIO_Init+0x2d0>)
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	4922      	ldr	r1, [pc, #136]	; (80029bc <HAL_GPIO_Init+0x2d0>)
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	4313      	orrs	r3, r2
 8002936:	604b      	str	r3, [r1, #4]
 8002938:	e006      	b.n	8002948 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800293a:	4b20      	ldr	r3, [pc, #128]	; (80029bc <HAL_GPIO_Init+0x2d0>)
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	43db      	mvns	r3, r3
 8002942:	491e      	ldr	r1, [pc, #120]	; (80029bc <HAL_GPIO_Init+0x2d0>)
 8002944:	4013      	ands	r3, r2
 8002946:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d006      	beq.n	8002962 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002954:	4b19      	ldr	r3, [pc, #100]	; (80029bc <HAL_GPIO_Init+0x2d0>)
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	4918      	ldr	r1, [pc, #96]	; (80029bc <HAL_GPIO_Init+0x2d0>)
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	4313      	orrs	r3, r2
 800295e:	608b      	str	r3, [r1, #8]
 8002960:	e006      	b.n	8002970 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002962:	4b16      	ldr	r3, [pc, #88]	; (80029bc <HAL_GPIO_Init+0x2d0>)
 8002964:	689a      	ldr	r2, [r3, #8]
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	43db      	mvns	r3, r3
 800296a:	4914      	ldr	r1, [pc, #80]	; (80029bc <HAL_GPIO_Init+0x2d0>)
 800296c:	4013      	ands	r3, r2
 800296e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d021      	beq.n	80029c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800297c:	4b0f      	ldr	r3, [pc, #60]	; (80029bc <HAL_GPIO_Init+0x2d0>)
 800297e:	68da      	ldr	r2, [r3, #12]
 8002980:	490e      	ldr	r1, [pc, #56]	; (80029bc <HAL_GPIO_Init+0x2d0>)
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	4313      	orrs	r3, r2
 8002986:	60cb      	str	r3, [r1, #12]
 8002988:	e021      	b.n	80029ce <HAL_GPIO_Init+0x2e2>
 800298a:	bf00      	nop
 800298c:	10320000 	.word	0x10320000
 8002990:	10310000 	.word	0x10310000
 8002994:	10220000 	.word	0x10220000
 8002998:	10210000 	.word	0x10210000
 800299c:	10120000 	.word	0x10120000
 80029a0:	10110000 	.word	0x10110000
 80029a4:	40021000 	.word	0x40021000
 80029a8:	40010000 	.word	0x40010000
 80029ac:	40010800 	.word	0x40010800
 80029b0:	40010c00 	.word	0x40010c00
 80029b4:	40011000 	.word	0x40011000
 80029b8:	40011400 	.word	0x40011400
 80029bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029c0:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <HAL_GPIO_Init+0x304>)
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	43db      	mvns	r3, r3
 80029c8:	4909      	ldr	r1, [pc, #36]	; (80029f0 <HAL_GPIO_Init+0x304>)
 80029ca:	4013      	ands	r3, r2
 80029cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	3301      	adds	r3, #1
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	fa22 f303 	lsr.w	r3, r2, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f47f ae8e 	bne.w	8002700 <HAL_GPIO_Init+0x14>
  }
}
 80029e4:	bf00      	nop
 80029e6:	bf00      	nop
 80029e8:	372c      	adds	r7, #44	; 0x2c
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr
 80029f0:	40010400 	.word	0x40010400

080029f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	807b      	strh	r3, [r7, #2]
 8002a00:	4613      	mov	r3, r2
 8002a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a04:	787b      	ldrb	r3, [r7, #1]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a0a:	887a      	ldrh	r2, [r7, #2]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a10:	e003      	b.n	8002a1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a12:	887b      	ldrh	r3, [r7, #2]
 8002a14:	041a      	lsls	r2, r3, #16
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	611a      	str	r2, [r3, #16]
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr

08002a24 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a36:	887a      	ldrh	r2, [r7, #2]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	041a      	lsls	r2, r3, #16
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	43d9      	mvns	r1, r3
 8002a42:	887b      	ldrh	r3, [r7, #2]
 8002a44:	400b      	ands	r3, r1
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	611a      	str	r2, [r3, #16]
}
 8002a4c:	bf00      	nop
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr
	...

08002a58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a62:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a64:	695a      	ldr	r2, [r3, #20]
 8002a66:	88fb      	ldrh	r3, [r7, #6]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d006      	beq.n	8002a7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a6e:	4a05      	ldr	r2, [pc, #20]	; (8002a84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a70:	88fb      	ldrh	r3, [r7, #6]
 8002a72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a74:	88fb      	ldrh	r3, [r7, #6]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff f838 	bl	8001aec <HAL_GPIO_EXTI_Callback>
  }
}
 8002a7c:	bf00      	nop
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40010400 	.word	0x40010400

08002a88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a8a:	b08b      	sub	sp, #44	; 0x2c
 8002a8c:	af06      	add	r7, sp, #24
 8002a8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e0fd      	b.n	8002c96 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d106      	bne.n	8002ab4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f007 ff70 	bl	800a994 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f003 fc3f 	bl	8006344 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	603b      	str	r3, [r7, #0]
 8002acc:	687e      	ldr	r6, [r7, #4]
 8002ace:	466d      	mov	r5, sp
 8002ad0:	f106 0410 	add.w	r4, r6, #16
 8002ad4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ad6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ad8:	6823      	ldr	r3, [r4, #0]
 8002ada:	602b      	str	r3, [r5, #0]
 8002adc:	1d33      	adds	r3, r6, #4
 8002ade:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ae0:	6838      	ldr	r0, [r7, #0]
 8002ae2:	f003 fc09 	bl	80062f8 <USB_CoreInit>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d005      	beq.n	8002af8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2202      	movs	r2, #2
 8002af0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e0ce      	b.n	8002c96 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2100      	movs	r1, #0
 8002afe:	4618      	mov	r0, r3
 8002b00:	f003 fc3a 	bl	8006378 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b04:	2300      	movs	r3, #0
 8002b06:	73fb      	strb	r3, [r7, #15]
 8002b08:	e04c      	b.n	8002ba4 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	440b      	add	r3, r1
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	1c5a      	adds	r2, r3, #1
 8002b26:	4613      	mov	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	440b      	add	r3, r1
 8002b30:	7bfa      	ldrb	r2, [r7, #15]
 8002b32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b34:	7bfa      	ldrb	r2, [r7, #15]
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
 8002b38:	b298      	uxth	r0, r3
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	440b      	add	r3, r1
 8002b46:	3336      	adds	r3, #54	; 0x36
 8002b48:	4602      	mov	r2, r0
 8002b4a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	1c5a      	adds	r2, r3, #1
 8002b52:	4613      	mov	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	440b      	add	r3, r1
 8002b5c:	3303      	adds	r3, #3
 8002b5e:	2200      	movs	r2, #0
 8002b60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b62:	7bfa      	ldrb	r2, [r7, #15]
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	440b      	add	r3, r1
 8002b70:	3338      	adds	r3, #56	; 0x38
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b76:	7bfa      	ldrb	r2, [r7, #15]
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	440b      	add	r3, r1
 8002b84:	333c      	adds	r3, #60	; 0x3c
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b8a:	7bfa      	ldrb	r2, [r7, #15]
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	440b      	add	r3, r1
 8002b98:	3340      	adds	r3, #64	; 0x40
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	73fb      	strb	r3, [r7, #15]
 8002ba4:	7bfa      	ldrb	r2, [r7, #15]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d3ad      	bcc.n	8002b0a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bae:	2300      	movs	r3, #0
 8002bb0:	73fb      	strb	r3, [r7, #15]
 8002bb2:	e044      	b.n	8002c3e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bb4:	7bfa      	ldrb	r2, [r7, #15]
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	440b      	add	r3, r1
 8002bc2:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bca:	7bfa      	ldrb	r2, [r7, #15]
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	440b      	add	r3, r1
 8002bd8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bdc:	7bfa      	ldrb	r2, [r7, #15]
 8002bde:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002be0:	7bfa      	ldrb	r2, [r7, #15]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	440b      	add	r3, r1
 8002bee:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bf6:	7bfa      	ldrb	r2, [r7, #15]
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	440b      	add	r3, r1
 8002c04:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c0c:	7bfa      	ldrb	r2, [r7, #15]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	440b      	add	r3, r1
 8002c1a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c22:	7bfa      	ldrb	r2, [r7, #15]
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	440b      	add	r3, r1
 8002c30:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	73fb      	strb	r3, [r7, #15]
 8002c3e:	7bfa      	ldrb	r2, [r7, #15]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d3b5      	bcc.n	8002bb4 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	603b      	str	r3, [r7, #0]
 8002c4e:	687e      	ldr	r6, [r7, #4]
 8002c50:	466d      	mov	r5, sp
 8002c52:	f106 0410 	add.w	r4, r6, #16
 8002c56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c5a:	6823      	ldr	r3, [r4, #0]
 8002c5c:	602b      	str	r3, [r5, #0]
 8002c5e:	1d33      	adds	r3, r6, #4
 8002c60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c62:	6838      	ldr	r0, [r7, #0]
 8002c64:	f003 fb94 	bl	8006390 <USB_DevInit>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d005      	beq.n	8002c7a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2202      	movs	r2, #2
 8002c72:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e00d      	b.n	8002c96 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f006 f846 	bl	8008d20 <USB_DevDisconnect>

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c9e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_PCD_Start+0x16>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e016      	b.n	8002ce2 <HAL_PCD_Start+0x44>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f003 fb29 	bl	8006318 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f008 f8d6 	bl	800ae7a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f006 f81a 	bl	8008d0c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b088      	sub	sp, #32
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f006 f81c 	bl	8008d34 <USB_ReadInterrupts>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d06:	d102      	bne.n	8002d0e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 fb5f 	bl	80033cc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f006 f80e 	bl	8008d34 <USB_ReadInterrupts>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d22:	d112      	bne.n	8002d4a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d36:	b292      	uxth	r2, r2
 8002d38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f007 fea4 	bl	800aa8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002d42:	2100      	movs	r1, #0
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f923 	bl	8002f90 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f005 fff0 	bl	8008d34 <USB_ReadInterrupts>
 8002d54:	4603      	mov	r3, r0
 8002d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d5e:	d10b      	bne.n	8002d78 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d72:	b292      	uxth	r2, r2
 8002d74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f005 ffd9 	bl	8008d34 <USB_ReadInterrupts>
 8002d82:	4603      	mov	r3, r0
 8002d84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d8c:	d10b      	bne.n	8002da6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002da0:	b292      	uxth	r2, r2
 8002da2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f005 ffc2 	bl	8008d34 <USB_ReadInterrupts>
 8002db0:	4603      	mov	r3, r0
 8002db2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dba:	d126      	bne.n	8002e0a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0204 	bic.w	r2, r2, #4
 8002dce:	b292      	uxth	r2, r2
 8002dd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0208 	bic.w	r2, r2, #8
 8002de6:	b292      	uxth	r2, r2
 8002de8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f007 fe85 	bl	800aafc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e04:	b292      	uxth	r2, r2
 8002e06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f005 ff90 	bl	8008d34 <USB_ReadInterrupts>
 8002e14:	4603      	mov	r3, r0
 8002e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e1e:	f040 8082 	bne.w	8002f26 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002e22:	2300      	movs	r3, #0
 8002e24:	77fb      	strb	r3, [r7, #31]
 8002e26:	e010      	b.n	8002e4a <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	7ffb      	ldrb	r3, [r7, #31]
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	441a      	add	r2, r3
 8002e34:	7ffb      	ldrb	r3, [r7, #31]
 8002e36:	8812      	ldrh	r2, [r2, #0]
 8002e38:	b292      	uxth	r2, r2
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	3320      	adds	r3, #32
 8002e3e:	443b      	add	r3, r7
 8002e40:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002e44:	7ffb      	ldrb	r3, [r7, #31]
 8002e46:	3301      	adds	r3, #1
 8002e48:	77fb      	strb	r3, [r7, #31]
 8002e4a:	7ffb      	ldrb	r3, [r7, #31]
 8002e4c:	2b07      	cmp	r3, #7
 8002e4e:	d9eb      	bls.n	8002e28 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0201 	orr.w	r2, r2, #1
 8002e62:	b292      	uxth	r2, r2
 8002e64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0201 	bic.w	r2, r2, #1
 8002e7a:	b292      	uxth	r2, r2
 8002e7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002e80:	bf00      	nop
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0f6      	beq.n	8002e82 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ea6:	b292      	uxth	r2, r2
 8002ea8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002eac:	2300      	movs	r3, #0
 8002eae:	77fb      	strb	r3, [r7, #31]
 8002eb0:	e00f      	b.n	8002ed2 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002eb2:	7ffb      	ldrb	r3, [r7, #31]
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6812      	ldr	r2, [r2, #0]
 8002eb8:	4611      	mov	r1, r2
 8002eba:	7ffa      	ldrb	r2, [r7, #31]
 8002ebc:	0092      	lsls	r2, r2, #2
 8002ebe:	440a      	add	r2, r1
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	3320      	adds	r3, #32
 8002ec4:	443b      	add	r3, r7
 8002ec6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002eca:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002ecc:	7ffb      	ldrb	r3, [r7, #31]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	77fb      	strb	r3, [r7, #31]
 8002ed2:	7ffb      	ldrb	r3, [r7, #31]
 8002ed4:	2b07      	cmp	r3, #7
 8002ed6:	d9ec      	bls.n	8002eb2 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0208 	orr.w	r2, r2, #8
 8002eea:	b292      	uxth	r2, r2
 8002eec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f02:	b292      	uxth	r2, r2
 8002f04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 0204 	orr.w	r2, r2, #4
 8002f1a:	b292      	uxth	r2, r2
 8002f1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f007 fdd1 	bl	800aac8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f005 ff02 	bl	8008d34 <USB_ReadInterrupts>
 8002f30:	4603      	mov	r3, r0
 8002f32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f3a:	d10e      	bne.n	8002f5a <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f4e:	b292      	uxth	r2, r2
 8002f50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f007 fd8a 	bl	800aa6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f005 fee8 	bl	8008d34 <USB_ReadInterrupts>
 8002f64:	4603      	mov	r3, r0
 8002f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f6e:	d10b      	bne.n	8002f88 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f82:	b292      	uxth	r2, r2
 8002f84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002f88:	bf00      	nop
 8002f8a:	3720      	adds	r7, #32
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d101      	bne.n	8002faa <HAL_PCD_SetAddress+0x1a>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e013      	b.n	8002fd2 <HAL_PCD_SetAddress+0x42>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	78fa      	ldrb	r2, [r7, #3]
 8002fb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	78fa      	ldrb	r2, [r7, #3]
 8002fc0:	4611      	mov	r1, r2
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f005 fe8f 	bl	8008ce6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b084      	sub	sp, #16
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	4608      	mov	r0, r1
 8002fe4:	4611      	mov	r1, r2
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	4603      	mov	r3, r0
 8002fea:	70fb      	strb	r3, [r7, #3]
 8002fec:	460b      	mov	r3, r1
 8002fee:	803b      	strh	r3, [r7, #0]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ff8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	da0e      	bge.n	800301e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	1c5a      	adds	r2, r3, #1
 8003008:	4613      	mov	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	4413      	add	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2201      	movs	r2, #1
 800301a:	705a      	strb	r2, [r3, #1]
 800301c:	e00e      	b.n	800303c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800301e:	78fb      	ldrb	r3, [r7, #3]
 8003020:	f003 0207 	and.w	r2, r3, #7
 8003024:	4613      	mov	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	4413      	add	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800303c:	78fb      	ldrb	r3, [r7, #3]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	b2da      	uxtb	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003048:	883a      	ldrh	r2, [r7, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	78ba      	ldrb	r2, [r7, #2]
 8003052:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	785b      	ldrb	r3, [r3, #1]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d004      	beq.n	8003066 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	b29a      	uxth	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003066:	78bb      	ldrb	r3, [r7, #2]
 8003068:	2b02      	cmp	r3, #2
 800306a:	d102      	bne.n	8003072 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_PCD_EP_Open+0xa6>
 800307c:	2302      	movs	r3, #2
 800307e:	e00e      	b.n	800309e <HAL_PCD_EP_Open+0xc4>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68f9      	ldr	r1, [r7, #12]
 800308e:	4618      	mov	r0, r3
 8003090:	f003 f99e 	bl	80063d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800309c:	7afb      	ldrb	r3, [r7, #11]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b084      	sub	sp, #16
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
 80030ae:	460b      	mov	r3, r1
 80030b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	da0e      	bge.n	80030d8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ba:	78fb      	ldrb	r3, [r7, #3]
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	4613      	mov	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	4413      	add	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2201      	movs	r2, #1
 80030d4:	705a      	strb	r2, [r3, #1]
 80030d6:	e00e      	b.n	80030f6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030d8:	78fb      	ldrb	r3, [r7, #3]
 80030da:	f003 0207 	and.w	r2, r3, #7
 80030de:	4613      	mov	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	4413      	add	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80030f6:	78fb      	ldrb	r3, [r7, #3]
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_PCD_EP_Close+0x6a>
 800310c:	2302      	movs	r3, #2
 800310e:	e00e      	b.n	800312e <HAL_PCD_EP_Close+0x88>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68f9      	ldr	r1, [r7, #12]
 800311e:	4618      	mov	r0, r3
 8003120:	f003 fcc0 	bl	8006aa4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b086      	sub	sp, #24
 800313a:	af00      	add	r7, sp, #0
 800313c:	60f8      	str	r0, [r7, #12]
 800313e:	607a      	str	r2, [r7, #4]
 8003140:	603b      	str	r3, [r7, #0]
 8003142:	460b      	mov	r3, r1
 8003144:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003146:	7afb      	ldrb	r3, [r7, #11]
 8003148:	f003 0207 	and.w	r2, r3, #7
 800314c:	4613      	mov	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	4413      	add	r3, r2
 800315c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	2200      	movs	r2, #0
 800316e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	2200      	movs	r2, #0
 8003174:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003176:	7afb      	ldrb	r3, [r7, #11]
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	b2da      	uxtb	r2, r3
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003182:	7afb      	ldrb	r3, [r7, #11]
 8003184:	f003 0307 	and.w	r3, r3, #7
 8003188:	2b00      	cmp	r3, #0
 800318a:	d106      	bne.n	800319a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6979      	ldr	r1, [r7, #20]
 8003192:	4618      	mov	r0, r3
 8003194:	f003 fe72 	bl	8006e7c <USB_EPStartXfer>
 8003198:	e005      	b.n	80031a6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6979      	ldr	r1, [r7, #20]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f003 fe6b 	bl	8006e7c <USB_EPStartXfer>
  }

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	460b      	mov	r3, r1
 80031ba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80031bc:	78fb      	ldrb	r3, [r7, #3]
 80031be:	f003 0207 	and.w	r2, r3, #7
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	440b      	add	r3, r1
 80031ce:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80031d2:	681b      	ldr	r3, [r3, #0]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr

080031de <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b086      	sub	sp, #24
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	60f8      	str	r0, [r7, #12]
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	603b      	str	r3, [r7, #0]
 80031ea:	460b      	mov	r3, r1
 80031ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031ee:	7afb      	ldrb	r3, [r7, #11]
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	1c5a      	adds	r2, r3, #1
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	4413      	add	r3, r2
 8003202:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2200      	movs	r2, #0
 8003222:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	2201      	movs	r2, #1
 8003228:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800322a:	7afb      	ldrb	r3, [r7, #11]
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	b2da      	uxtb	r2, r3
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003236:	7afb      	ldrb	r3, [r7, #11]
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	2b00      	cmp	r3, #0
 800323e:	d106      	bne.n	800324e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6979      	ldr	r1, [r7, #20]
 8003246:	4618      	mov	r0, r3
 8003248:	f003 fe18 	bl	8006e7c <USB_EPStartXfer>
 800324c:	e005      	b.n	800325a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6979      	ldr	r1, [r7, #20]
 8003254:	4618      	mov	r0, r3
 8003256:	f003 fe11 	bl	8006e7c <USB_EPStartXfer>
  }

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003270:	78fb      	ldrb	r3, [r7, #3]
 8003272:	f003 0207 	and.w	r2, r3, #7
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	429a      	cmp	r2, r3
 800327c:	d901      	bls.n	8003282 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e04c      	b.n	800331c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003282:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003286:	2b00      	cmp	r3, #0
 8003288:	da0e      	bge.n	80032a8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800328a:	78fb      	ldrb	r3, [r7, #3]
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	4613      	mov	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	4413      	add	r3, r2
 800329e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2201      	movs	r2, #1
 80032a4:	705a      	strb	r2, [r3, #1]
 80032a6:	e00c      	b.n	80032c2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032a8:	78fa      	ldrb	r2, [r7, #3]
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	4413      	add	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2201      	movs	r2, #1
 80032c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032c8:	78fb      	ldrb	r3, [r7, #3]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	b2da      	uxtb	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_PCD_EP_SetStall+0x7e>
 80032de:	2302      	movs	r3, #2
 80032e0:	e01c      	b.n	800331c <HAL_PCD_EP_SetStall+0xb8>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68f9      	ldr	r1, [r7, #12]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f005 fbfb 	bl	8008aec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032f6:	78fb      	ldrb	r3, [r7, #3]
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d108      	bne.n	8003312 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800330a:	4619      	mov	r1, r3
 800330c:	4610      	mov	r0, r2
 800330e:	f005 fd20 	bl	8008d52 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	460b      	mov	r3, r1
 800332e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003330:	78fb      	ldrb	r3, [r7, #3]
 8003332:	f003 020f 	and.w	r2, r3, #15
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	429a      	cmp	r2, r3
 800333c:	d901      	bls.n	8003342 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e040      	b.n	80033c4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003342:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003346:	2b00      	cmp	r3, #0
 8003348:	da0e      	bge.n	8003368 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800334a:	78fb      	ldrb	r3, [r7, #3]
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	1c5a      	adds	r2, r3, #1
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	4413      	add	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2201      	movs	r2, #1
 8003364:	705a      	strb	r2, [r3, #1]
 8003366:	e00e      	b.n	8003386 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003368:	78fb      	ldrb	r3, [r7, #3]
 800336a:	f003 0207 	and.w	r2, r3, #7
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	4413      	add	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800338c:	78fb      	ldrb	r3, [r7, #3]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	b2da      	uxtb	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d101      	bne.n	80033a6 <HAL_PCD_EP_ClrStall+0x82>
 80033a2:	2302      	movs	r3, #2
 80033a4:	e00e      	b.n	80033c4 <HAL_PCD_EP_ClrStall+0xa0>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68f9      	ldr	r1, [r7, #12]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f005 fbe9 	bl	8008b8c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b08e      	sub	sp, #56	; 0x38
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80033d4:	e2ec      	b.n	80039b0 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80033de:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80033e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	f003 030f 	and.w	r3, r3, #15
 80033e8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80033ec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f040 8161 	bne.w	80036b8 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80033f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80033f8:	f003 0310 	and.w	r3, r3, #16
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d152      	bne.n	80034a6 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	881b      	ldrh	r3, [r3, #0]
 8003406:	b29b      	uxth	r3, r3
 8003408:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800340c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003410:	81fb      	strh	r3, [r7, #14]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	89fb      	ldrh	r3, [r7, #14]
 8003418:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800341c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003420:	b29b      	uxth	r3, r3
 8003422:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3328      	adds	r3, #40	; 0x28
 8003428:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003432:	b29b      	uxth	r3, r3
 8003434:	461a      	mov	r2, r3
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	4413      	add	r3, r2
 800343e:	3302      	adds	r3, #2
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6812      	ldr	r2, [r2, #0]
 8003446:	4413      	add	r3, r2
 8003448:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800344c:	881b      	ldrh	r3, [r3, #0]
 800344e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	695a      	ldr	r2, [r3, #20]
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	441a      	add	r2, r3
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003464:	2100      	movs	r1, #0
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f007 fae7 	bl	800aa3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 829b 	beq.w	80039b0 <PCD_EP_ISR_Handler+0x5e4>
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	2b00      	cmp	r3, #0
 8003480:	f040 8296 	bne.w	80039b0 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800348a:	b2db      	uxtb	r3, r3
 800348c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003490:	b2da      	uxtb	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	b292      	uxth	r2, r2
 8003498:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80034a4:	e284      	b.n	80039b0 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034ac:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	881b      	ldrh	r3, [r3, #0]
 80034b4:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80034b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80034b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d034      	beq.n	800352a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	461a      	mov	r2, r3
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	4413      	add	r3, r2
 80034d4:	3306      	adds	r3, #6
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6812      	ldr	r2, [r2, #0]
 80034dc:	4413      	add	r3, r2
 80034de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6818      	ldr	r0, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80034fe:	b29b      	uxth	r3, r3
 8003500:	f005 fc77 	bl	8008df2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	881b      	ldrh	r3, [r3, #0]
 800350a:	b29a      	uxth	r2, r3
 800350c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003510:	4013      	ands	r3, r2
 8003512:	823b      	strh	r3, [r7, #16]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	8a3a      	ldrh	r2, [r7, #16]
 800351a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800351e:	b292      	uxth	r2, r2
 8003520:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f007 fa5c 	bl	800a9e0 <HAL_PCD_SetupStageCallback>
 8003528:	e242      	b.n	80039b0 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800352a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800352e:	2b00      	cmp	r3, #0
 8003530:	f280 823e 	bge.w	80039b0 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	b29a      	uxth	r2, r3
 800353c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003540:	4013      	ands	r3, r2
 8003542:	83bb      	strh	r3, [r7, #28]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	8bba      	ldrh	r2, [r7, #28]
 800354a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800354e:	b292      	uxth	r2, r2
 8003550:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800355a:	b29b      	uxth	r3, r3
 800355c:	461a      	mov	r2, r3
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	4413      	add	r3, r2
 8003566:	3306      	adds	r3, #6
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6812      	ldr	r2, [r2, #0]
 800356e:	4413      	add	r3, r2
 8003570:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003574:	881b      	ldrh	r3, [r3, #0]
 8003576:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d019      	beq.n	80035ba <PCD_EP_ISR_Handler+0x1ee>
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d015      	beq.n	80035ba <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6818      	ldr	r0, [r3, #0]
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	6959      	ldr	r1, [r3, #20]
 8003596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003598:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800359e:	b29b      	uxth	r3, r3
 80035a0:	f005 fc27 	bl	8008df2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	695a      	ldr	r2, [r3, #20]
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	441a      	add	r2, r3
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80035b2:	2100      	movs	r1, #0
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f007 fa25 	bl	800aa04 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	881b      	ldrh	r3, [r3, #0]
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f040 81f2 	bne.w	80039b0 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	61bb      	str	r3, [r7, #24]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035da:	b29b      	uxth	r3, r3
 80035dc:	461a      	mov	r2, r3
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	4413      	add	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d112      	bne.n	800361a <PCD_EP_ISR_Handler+0x24e>
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	881b      	ldrh	r3, [r3, #0]
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035fe:	b29a      	uxth	r2, r3
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	801a      	strh	r2, [r3, #0]
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	881b      	ldrh	r3, [r3, #0]
 8003608:	b29b      	uxth	r3, r3
 800360a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800360e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003612:	b29a      	uxth	r2, r3
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	801a      	strh	r2, [r3, #0]
 8003618:	e02f      	b.n	800367a <PCD_EP_ISR_Handler+0x2ae>
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	2b3e      	cmp	r3, #62	; 0x3e
 8003620:	d813      	bhi.n	800364a <PCD_EP_ISR_Handler+0x27e>
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	085b      	lsrs	r3, r3, #1
 8003628:	633b      	str	r3, [r7, #48]	; 0x30
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d002      	beq.n	800363c <PCD_EP_ISR_Handler+0x270>
 8003636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003638:	3301      	adds	r3, #1
 800363a:	633b      	str	r3, [r7, #48]	; 0x30
 800363c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363e:	b29b      	uxth	r3, r3
 8003640:	029b      	lsls	r3, r3, #10
 8003642:	b29a      	uxth	r2, r3
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	801a      	strh	r2, [r3, #0]
 8003648:	e017      	b.n	800367a <PCD_EP_ISR_Handler+0x2ae>
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	095b      	lsrs	r3, r3, #5
 8003650:	633b      	str	r3, [r7, #48]	; 0x30
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	f003 031f 	and.w	r3, r3, #31
 800365a:	2b00      	cmp	r3, #0
 800365c:	d102      	bne.n	8003664 <PCD_EP_ISR_Handler+0x298>
 800365e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003660:	3b01      	subs	r3, #1
 8003662:	633b      	str	r3, [r7, #48]	; 0x30
 8003664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003666:	b29b      	uxth	r3, r3
 8003668:	029b      	lsls	r3, r3, #10
 800366a:	b29b      	uxth	r3, r3
 800366c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003674:	b29a      	uxth	r2, r3
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	881b      	ldrh	r3, [r3, #0]
 8003680:	b29b      	uxth	r3, r3
 8003682:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800368a:	827b      	strh	r3, [r7, #18]
 800368c:	8a7b      	ldrh	r3, [r7, #18]
 800368e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003692:	827b      	strh	r3, [r7, #18]
 8003694:	8a7b      	ldrh	r3, [r7, #18]
 8003696:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800369a:	827b      	strh	r3, [r7, #18]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	8a7b      	ldrh	r3, [r7, #18]
 80036a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	8013      	strh	r3, [r2, #0]
 80036b6:	e17b      	b.n	80039b0 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	461a      	mov	r2, r3
 80036be:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	881b      	ldrh	r3, [r3, #0]
 80036c8:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80036ca:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f280 80ea 	bge.w	80038a8 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	461a      	mov	r2, r3
 80036da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80036ea:	4013      	ands	r3, r2
 80036ec:	853b      	strh	r3, [r7, #40]	; 0x28
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	461a      	mov	r2, r3
 80036f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80036fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003702:	b292      	uxth	r2, r2
 8003704:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003706:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800370a:	4613      	mov	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	4413      	add	r3, r2
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	4413      	add	r3, r2
 800371a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	7b1b      	ldrb	r3, [r3, #12]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d122      	bne.n	800376a <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800372c:	b29b      	uxth	r3, r3
 800372e:	461a      	mov	r2, r3
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	4413      	add	r3, r2
 8003738:	3306      	adds	r3, #6
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6812      	ldr	r2, [r2, #0]
 8003740:	4413      	add	r3, r2
 8003742:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800374c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800374e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 8087 	beq.w	8003864 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6818      	ldr	r0, [r3, #0]
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	6959      	ldr	r1, [r3, #20]
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	88da      	ldrh	r2, [r3, #6]
 8003762:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003764:	f005 fb45 	bl	8008df2 <USB_ReadPMA>
 8003768:	e07c      	b.n	8003864 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	78db      	ldrb	r3, [r3, #3]
 800376e:	2b02      	cmp	r3, #2
 8003770:	d108      	bne.n	8003784 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003772:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003774:	461a      	mov	r2, r3
 8003776:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f927 	bl	80039cc <HAL_PCD_EP_DB_Receive>
 800377e:	4603      	mov	r3, r0
 8003780:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003782:	e06f      	b.n	8003864 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	461a      	mov	r2, r3
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	881b      	ldrh	r3, [r3, #0]
 8003794:	b29b      	uxth	r3, r3
 8003796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800379a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800379e:	847b      	strh	r3, [r7, #34]	; 0x22
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	461a      	mov	r2, r3
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	441a      	add	r2, r3
 80037ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80037b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	461a      	mov	r2, r3
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d021      	beq.n	8003822 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	461a      	mov	r2, r3
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	4413      	add	r3, r2
 80037f2:	3302      	adds	r3, #2
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6812      	ldr	r2, [r2, #0]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003806:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003808:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800380a:	2b00      	cmp	r3, #0
 800380c:	d02a      	beq.n	8003864 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	6959      	ldr	r1, [r3, #20]
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	891a      	ldrh	r2, [r3, #8]
 800381a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800381c:	f005 fae9 	bl	8008df2 <USB_ReadPMA>
 8003820:	e020      	b.n	8003864 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800382a:	b29b      	uxth	r3, r3
 800382c:	461a      	mov	r2, r3
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	4413      	add	r3, r2
 8003836:	3306      	adds	r3, #6
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6812      	ldr	r2, [r2, #0]
 800383e:	4413      	add	r3, r2
 8003840:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003844:	881b      	ldrh	r3, [r3, #0]
 8003846:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800384a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800384c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800384e:	2b00      	cmp	r3, #0
 8003850:	d008      	beq.n	8003864 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6818      	ldr	r0, [r3, #0]
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	6959      	ldr	r1, [r3, #20]
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	895a      	ldrh	r2, [r3, #10]
 800385e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003860:	f005 fac7 	bl	8008df2 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	69da      	ldr	r2, [r3, #28]
 8003868:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800386a:	441a      	add	r2, r3
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003872:	695a      	ldr	r2, [r3, #20]
 8003874:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003876:	441a      	add	r2, r3
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d004      	beq.n	800388e <PCD_EP_ISR_Handler+0x4c2>
 8003884:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	429a      	cmp	r2, r3
 800388c:	d206      	bcs.n	800389c <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	4619      	mov	r1, r3
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f007 f8b5 	bl	800aa04 <HAL_PCD_DataOutStageCallback>
 800389a:	e005      	b.n	80038a8 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038a2:	4618      	mov	r0, r3
 80038a4:	f003 faea 	bl	8006e7c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80038a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80038aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d07e      	beq.n	80039b0 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80038b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80038b6:	1c5a      	adds	r2, r3, #1
 80038b8:	4613      	mov	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	4413      	add	r3, r2
 80038c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80038dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e0:	843b      	strh	r3, [r7, #32]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	461a      	mov	r2, r3
 80038e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	441a      	add	r2, r3
 80038f0:	8c3b      	ldrh	r3, [r7, #32]
 80038f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	78db      	ldrb	r3, [r3, #3]
 8003902:	2b03      	cmp	r3, #3
 8003904:	d00c      	beq.n	8003920 <PCD_EP_ISR_Handler+0x554>
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	78db      	ldrb	r3, [r3, #3]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d008      	beq.n	8003920 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003912:	2b02      	cmp	r3, #2
 8003914:	d146      	bne.n	80039a4 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003916:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391c:	2b00      	cmp	r3, #0
 800391e:	d141      	bne.n	80039a4 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003928:	b29b      	uxth	r3, r3
 800392a:	461a      	mov	r2, r3
 800392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	4413      	add	r3, r2
 8003934:	3302      	adds	r3, #2
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6812      	ldr	r2, [r2, #0]
 800393c:	4413      	add	r3, r2
 800393e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003942:	881b      	ldrh	r3, [r3, #0]
 8003944:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003948:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	699a      	ldr	r2, [r3, #24]
 800394e:	8bfb      	ldrh	r3, [r7, #30]
 8003950:	429a      	cmp	r2, r3
 8003952:	d906      	bls.n	8003962 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	699a      	ldr	r2, [r3, #24]
 8003958:	8bfb      	ldrh	r3, [r7, #30]
 800395a:	1ad2      	subs	r2, r2, r3
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	619a      	str	r2, [r3, #24]
 8003960:	e002      	b.n	8003968 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	2200      	movs	r2, #0
 8003966:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d106      	bne.n	800397e <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	4619      	mov	r1, r3
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f007 f85f 	bl	800aa3a <HAL_PCD_DataInStageCallback>
 800397c:	e018      	b.n	80039b0 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800397e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003980:	695a      	ldr	r2, [r3, #20]
 8003982:	8bfb      	ldrh	r3, [r7, #30]
 8003984:	441a      	add	r2, r3
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800398a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398c:	69da      	ldr	r2, [r3, #28]
 800398e:	8bfb      	ldrh	r3, [r7, #30]
 8003990:	441a      	add	r2, r3
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800399c:	4618      	mov	r0, r3
 800399e:	f003 fa6d 	bl	8006e7c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80039a2:	e005      	b.n	80039b0 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80039a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80039a6:	461a      	mov	r2, r3
 80039a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f91b 	bl	8003be6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	b21b      	sxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f6ff ad0a 	blt.w	80033d6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3738      	adds	r7, #56	; 0x38
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	4613      	mov	r3, r2
 80039d8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80039da:	88fb      	ldrh	r3, [r7, #6]
 80039dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d07e      	beq.n	8003ae2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	461a      	mov	r2, r3
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	4413      	add	r3, r2
 80039f8:	3302      	adds	r3, #2
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	4413      	add	r3, r2
 8003a02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a06:	881b      	ldrh	r3, [r3, #0]
 8003a08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a0c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	699a      	ldr	r2, [r3, #24]
 8003a12:	8b7b      	ldrh	r3, [r7, #26]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d306      	bcc.n	8003a26 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	699a      	ldr	r2, [r3, #24]
 8003a1c:	8b7b      	ldrh	r3, [r7, #26]
 8003a1e:	1ad2      	subs	r2, r2, r3
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	619a      	str	r2, [r3, #24]
 8003a24:	e002      	b.n	8003a2c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d123      	bne.n	8003a7c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	881b      	ldrh	r3, [r3, #0]
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a4e:	833b      	strh	r3, [r7, #24]
 8003a50:	8b3b      	ldrh	r3, [r7, #24]
 8003a52:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003a56:	833b      	strh	r3, [r7, #24]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	441a      	add	r2, r3
 8003a66:	8b3b      	ldrh	r3, [r7, #24]
 8003a68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a7c:	88fb      	ldrh	r3, [r7, #6]
 8003a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d01f      	beq.n	8003ac6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4413      	add	r3, r2
 8003a94:	881b      	ldrh	r3, [r3, #0]
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa0:	82fb      	strh	r3, [r7, #22]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	441a      	add	r2, r3
 8003ab0:	8afb      	ldrh	r3, [r7, #22]
 8003ab2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ab6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003abe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003ac6:	8b7b      	ldrh	r3, [r7, #26]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 8087 	beq.w	8003bdc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6818      	ldr	r0, [r3, #0]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	6959      	ldr	r1, [r3, #20]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	891a      	ldrh	r2, [r3, #8]
 8003ada:	8b7b      	ldrh	r3, [r7, #26]
 8003adc:	f005 f989 	bl	8008df2 <USB_ReadPMA>
 8003ae0:	e07c      	b.n	8003bdc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	461a      	mov	r2, r3
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	4413      	add	r3, r2
 8003af6:	3306      	adds	r3, #6
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	6812      	ldr	r2, [r2, #0]
 8003afe:	4413      	add	r3, r2
 8003b00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b04:	881b      	ldrh	r3, [r3, #0]
 8003b06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b0a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	699a      	ldr	r2, [r3, #24]
 8003b10:	8b7b      	ldrh	r3, [r7, #26]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d306      	bcc.n	8003b24 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	699a      	ldr	r2, [r3, #24]
 8003b1a:	8b7b      	ldrh	r3, [r7, #26]
 8003b1c:	1ad2      	subs	r2, r2, r3
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	619a      	str	r2, [r3, #24]
 8003b22:	e002      	b.n	8003b2a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	2200      	movs	r2, #0
 8003b28:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d123      	bne.n	8003b7a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	461a      	mov	r2, r3
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4413      	add	r3, r2
 8003b40:	881b      	ldrh	r3, [r3, #0]
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b4c:	83fb      	strh	r3, [r7, #30]
 8003b4e:	8bfb      	ldrh	r3, [r7, #30]
 8003b50:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003b54:	83fb      	strh	r3, [r7, #30]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	441a      	add	r2, r3
 8003b64:	8bfb      	ldrh	r3, [r7, #30]
 8003b66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003b7a:	88fb      	ldrh	r3, [r7, #6]
 8003b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d11f      	bne.n	8003bc4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	461a      	mov	r2, r3
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4413      	add	r3, r2
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b9e:	83bb      	strh	r3, [r7, #28]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	441a      	add	r2, r3
 8003bae:	8bbb      	ldrh	r3, [r7, #28]
 8003bb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bbc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003bc4:	8b7b      	ldrh	r3, [r7, #26]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d008      	beq.n	8003bdc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6818      	ldr	r0, [r3, #0]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	6959      	ldr	r1, [r3, #20]
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	895a      	ldrh	r2, [r3, #10]
 8003bd6:	8b7b      	ldrh	r3, [r7, #26]
 8003bd8:	f005 f90b 	bl	8008df2 <USB_ReadPMA>
    }
  }

  return count;
 8003bdc:	8b7b      	ldrh	r3, [r7, #26]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3720      	adds	r7, #32
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b0a2      	sub	sp, #136	; 0x88
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	60f8      	str	r0, [r7, #12]
 8003bee:	60b9      	str	r1, [r7, #8]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003bf4:	88fb      	ldrh	r3, [r7, #6]
 8003bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 81c7 	beq.w	8003f8e <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	4413      	add	r3, r2
 8003c14:	3302      	adds	r3, #2
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	6812      	ldr	r2, [r2, #0]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c28:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	699a      	ldr	r2, [r3, #24]
 8003c30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d907      	bls.n	8003c48 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	699a      	ldr	r2, [r3, #24]
 8003c3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c40:	1ad2      	subs	r2, r2, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	619a      	str	r2, [r3, #24]
 8003c46:	e002      	b.n	8003c4e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f040 80b9 	bne.w	8003dca <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	785b      	ldrb	r3, [r3, #1]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d126      	bne.n	8003cae <HAL_PCD_EP_DB_Transmit+0xc8>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	461a      	mov	r2, r3
 8003c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c74:	4413      	add	r3, r2
 8003c76:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	011a      	lsls	r2, r3, #4
 8003c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c80:	4413      	add	r3, r2
 8003c82:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c86:	627b      	str	r3, [r7, #36]	; 0x24
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c96:	801a      	strh	r2, [r3, #0]
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	801a      	strh	r2, [r3, #0]
 8003cac:	e01a      	b.n	8003ce4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	785b      	ldrb	r3, [r3, #1]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d116      	bne.n	8003ce4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	633b      	str	r3, [r7, #48]	; 0x30
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cca:	4413      	add	r3, r2
 8003ccc:	633b      	str	r3, [r7, #48]	; 0x30
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	011a      	lsls	r2, r3, #4
 8003cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	623b      	str	r3, [r7, #32]
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	785b      	ldrb	r3, [r3, #1]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d126      	bne.n	8003d40 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	61bb      	str	r3, [r7, #24]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	461a      	mov	r2, r3
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	4413      	add	r3, r2
 8003d08:	61bb      	str	r3, [r7, #24]
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	011a      	lsls	r2, r3, #4
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	4413      	add	r3, r2
 8003d14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d18:	617b      	str	r3, [r7, #20]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	881b      	ldrh	r3, [r3, #0]
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	801a      	strh	r2, [r3, #0]
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	801a      	strh	r2, [r3, #0]
 8003d3e:	e017      	b.n	8003d70 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	785b      	ldrb	r3, [r3, #1]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d113      	bne.n	8003d70 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	461a      	mov	r2, r3
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	4413      	add	r3, r2
 8003d58:	623b      	str	r3, [r7, #32]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	011a      	lsls	r2, r3, #4
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	4413      	add	r3, r2
 8003d64:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d68:	61fb      	str	r3, [r7, #28]
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	4619      	mov	r1, r3
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f006 fe5f 	bl	800aa3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003d7c:	88fb      	ldrh	r3, [r7, #6]
 8003d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 82d4 	beq.w	8004330 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4413      	add	r3, r2
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da2:	827b      	strh	r3, [r7, #18]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	461a      	mov	r2, r3
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	441a      	add	r2, r3
 8003db2:	8a7b      	ldrh	r3, [r7, #18]
 8003db4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003db8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	8013      	strh	r3, [r2, #0]
 8003dc8:	e2b2      	b.n	8004330 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003dca:	88fb      	ldrh	r3, [r7, #6]
 8003dcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d021      	beq.n	8003e18 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	461a      	mov	r2, r3
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	461a      	mov	r2, r3
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	441a      	add	r2, r3
 8003e00:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003e04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	f040 8286 	bne.w	8004330 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	695a      	ldr	r2, [r3, #20]
 8003e28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e2c:	441a      	add	r2, r3
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	69da      	ldr	r2, [r3, #28]
 8003e36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e3a:	441a      	add	r2, r3
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	6a1a      	ldr	r2, [r3, #32]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d309      	bcc.n	8003e60 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	6a1a      	ldr	r2, [r3, #32]
 8003e56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e58:	1ad2      	subs	r2, r2, r3
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	621a      	str	r2, [r3, #32]
 8003e5e:	e015      	b.n	8003e8c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d107      	bne.n	8003e78 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003e68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e6c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003e76:	e009      	b.n	8003e8c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	785b      	ldrb	r3, [r3, #1]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d155      	bne.n	8003f40 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea8:	4413      	add	r3, r2
 8003eaa:	63bb      	str	r3, [r7, #56]	; 0x38
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	011a      	lsls	r2, r3, #4
 8003eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003eba:	637b      	str	r3, [r7, #52]	; 0x34
 8003ebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d112      	bne.n	8003ee8 <HAL_PCD_EP_DB_Transmit+0x302>
 8003ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec4:	881b      	ldrh	r3, [r3, #0]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed0:	801a      	strh	r2, [r3, #0]
 8003ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003edc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ee4:	801a      	strh	r2, [r3, #0]
 8003ee6:	e047      	b.n	8003f78 <HAL_PCD_EP_DB_Transmit+0x392>
 8003ee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eea:	2b3e      	cmp	r3, #62	; 0x3e
 8003eec:	d811      	bhi.n	8003f12 <HAL_PCD_EP_DB_Transmit+0x32c>
 8003eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ef0:	085b      	lsrs	r3, r3, #1
 8003ef2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d002      	beq.n	8003f04 <HAL_PCD_EP_DB_Transmit+0x31e>
 8003efe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f00:	3301      	adds	r3, #1
 8003f02:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	029b      	lsls	r3, r3, #10
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f0e:	801a      	strh	r2, [r3, #0]
 8003f10:	e032      	b.n	8003f78 <HAL_PCD_EP_DB_Transmit+0x392>
 8003f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f14:	095b      	lsrs	r3, r3, #5
 8003f16:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f1a:	f003 031f 	and.w	r3, r3, #31
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d102      	bne.n	8003f28 <HAL_PCD_EP_DB_Transmit+0x342>
 8003f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f24:	3b01      	subs	r3, #1
 8003f26:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	029b      	lsls	r3, r3, #10
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f3c:	801a      	strh	r2, [r3, #0]
 8003f3e:	e01b      	b.n	8003f78 <HAL_PCD_EP_DB_Transmit+0x392>
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	785b      	ldrb	r3, [r3, #1]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d117      	bne.n	8003f78 <HAL_PCD_EP_DB_Transmit+0x392>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	643b      	str	r3, [r7, #64]	; 0x40
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	461a      	mov	r2, r3
 8003f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f5c:	4413      	add	r3, r2
 8003f5e:	643b      	str	r3, [r7, #64]	; 0x40
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	011a      	lsls	r2, r3, #4
 8003f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f68:	4413      	add	r3, r2
 8003f6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f76:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6818      	ldr	r0, [r3, #0]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	6959      	ldr	r1, [r3, #20]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	891a      	ldrh	r2, [r3, #8]
 8003f84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	f004 feee 	bl	8008d68 <USB_WritePMA>
 8003f8c:	e1d0      	b.n	8004330 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	461a      	mov	r2, r3
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	4413      	add	r3, r2
 8003fa2:	3306      	adds	r3, #6
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	6812      	ldr	r2, [r2, #0]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fb0:	881b      	ldrh	r3, [r3, #0]
 8003fb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fb6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	699a      	ldr	r2, [r3, #24]
 8003fbe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d307      	bcc.n	8003fd6 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	699a      	ldr	r2, [r3, #24]
 8003fca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003fce:	1ad2      	subs	r2, r2, r3
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	619a      	str	r2, [r3, #24]
 8003fd4:	e002      	b.n	8003fdc <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f040 80c4 	bne.w	800416e <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	785b      	ldrb	r3, [r3, #1]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d126      	bne.n	800403c <HAL_PCD_EP_DB_Transmit+0x456>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	461a      	mov	r2, r3
 8004000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004002:	4413      	add	r3, r2
 8004004:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	011a      	lsls	r2, r3, #4
 800400c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800400e:	4413      	add	r3, r2
 8004010:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004014:	66bb      	str	r3, [r7, #104]	; 0x68
 8004016:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004018:	881b      	ldrh	r3, [r3, #0]
 800401a:	b29b      	uxth	r3, r3
 800401c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004020:	b29a      	uxth	r2, r3
 8004022:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004024:	801a      	strh	r2, [r3, #0]
 8004026:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004028:	881b      	ldrh	r3, [r3, #0]
 800402a:	b29b      	uxth	r3, r3
 800402c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004030:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004034:	b29a      	uxth	r2, r3
 8004036:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004038:	801a      	strh	r2, [r3, #0]
 800403a:	e01a      	b.n	8004072 <HAL_PCD_EP_DB_Transmit+0x48c>
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	785b      	ldrb	r3, [r3, #1]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d116      	bne.n	8004072 <HAL_PCD_EP_DB_Transmit+0x48c>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	677b      	str	r3, [r7, #116]	; 0x74
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004052:	b29b      	uxth	r3, r3
 8004054:	461a      	mov	r2, r3
 8004056:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004058:	4413      	add	r3, r2
 800405a:	677b      	str	r3, [r7, #116]	; 0x74
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	011a      	lsls	r2, r3, #4
 8004062:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004064:	4413      	add	r3, r2
 8004066:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800406a:	673b      	str	r3, [r7, #112]	; 0x70
 800406c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800406e:	2200      	movs	r2, #0
 8004070:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	67bb      	str	r3, [r7, #120]	; 0x78
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	785b      	ldrb	r3, [r3, #1]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d12f      	bne.n	80040e0 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004090:	b29b      	uxth	r3, r3
 8004092:	461a      	mov	r2, r3
 8004094:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004098:	4413      	add	r3, r2
 800409a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	011a      	lsls	r2, r3, #4
 80040a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040a8:	4413      	add	r3, r2
 80040aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80040ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040b6:	881b      	ldrh	r3, [r3, #0]
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040be:	b29a      	uxth	r2, r3
 80040c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040c4:	801a      	strh	r2, [r3, #0]
 80040c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040ca:	881b      	ldrh	r3, [r3, #0]
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040dc:	801a      	strh	r2, [r3, #0]
 80040de:	e017      	b.n	8004110 <HAL_PCD_EP_DB_Transmit+0x52a>
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	785b      	ldrb	r3, [r3, #1]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d113      	bne.n	8004110 <HAL_PCD_EP_DB_Transmit+0x52a>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	461a      	mov	r2, r3
 80040f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040f6:	4413      	add	r3, r2
 80040f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	011a      	lsls	r2, r3, #4
 8004100:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004102:	4413      	add	r3, r2
 8004104:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004108:	67fb      	str	r3, [r7, #124]	; 0x7c
 800410a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800410c:	2200      	movs	r2, #0
 800410e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	4619      	mov	r1, r3
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f006 fc8f 	bl	800aa3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800411c:	88fb      	ldrh	r3, [r7, #6]
 800411e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004122:	2b00      	cmp	r3, #0
 8004124:	f040 8104 	bne.w	8004330 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	461a      	mov	r2, r3
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	b29b      	uxth	r3, r3
 800413a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800413e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004142:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	461a      	mov	r2, r3
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	441a      	add	r2, r3
 8004154:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004158:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800415c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004160:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004168:	b29b      	uxth	r3, r3
 800416a:	8013      	strh	r3, [r2, #0]
 800416c:	e0e0      	b.n	8004330 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800416e:	88fb      	ldrh	r3, [r7, #6]
 8004170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d121      	bne.n	80041bc <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	461a      	mov	r2, r3
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	881b      	ldrh	r3, [r3, #0]
 8004188:	b29b      	uxth	r3, r3
 800418a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800418e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004192:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	461a      	mov	r2, r3
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	441a      	add	r2, r3
 80041a4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80041a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	f040 80b4 	bne.w	8004330 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	695a      	ldr	r2, [r3, #20]
 80041cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80041d0:	441a      	add	r2, r3
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	69da      	ldr	r2, [r3, #28]
 80041da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80041de:	441a      	add	r2, r3
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	6a1a      	ldr	r2, [r3, #32]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d309      	bcc.n	8004204 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	6a1a      	ldr	r2, [r3, #32]
 80041fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041fc:	1ad2      	subs	r2, r2, r3
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	621a      	str	r2, [r3, #32]
 8004202:	e015      	b.n	8004230 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d107      	bne.n	800421c <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800420c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004210:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800421a:	e009      	b.n	8004230 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	2200      	movs	r2, #0
 8004226:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	667b      	str	r3, [r7, #100]	; 0x64
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	785b      	ldrb	r3, [r3, #1]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d155      	bne.n	80042ea <HAL_PCD_EP_DB_Transmit+0x704>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800424c:	b29b      	uxth	r3, r3
 800424e:	461a      	mov	r2, r3
 8004250:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004252:	4413      	add	r3, r2
 8004254:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	011a      	lsls	r2, r3, #4
 800425c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800425e:	4413      	add	r3, r2
 8004260:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004264:	65bb      	str	r3, [r7, #88]	; 0x58
 8004266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004268:	2b00      	cmp	r3, #0
 800426a:	d112      	bne.n	8004292 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800426c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800426e:	881b      	ldrh	r3, [r3, #0]
 8004270:	b29b      	uxth	r3, r3
 8004272:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004276:	b29a      	uxth	r2, r3
 8004278:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800427a:	801a      	strh	r2, [r3, #0]
 800427c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800427e:	881b      	ldrh	r3, [r3, #0]
 8004280:	b29b      	uxth	r3, r3
 8004282:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004286:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800428a:	b29a      	uxth	r2, r3
 800428c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800428e:	801a      	strh	r2, [r3, #0]
 8004290:	e044      	b.n	800431c <HAL_PCD_EP_DB_Transmit+0x736>
 8004292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004294:	2b3e      	cmp	r3, #62	; 0x3e
 8004296:	d811      	bhi.n	80042bc <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800429a:	085b      	lsrs	r3, r3, #1
 800429c:	657b      	str	r3, [r7, #84]	; 0x54
 800429e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d002      	beq.n	80042ae <HAL_PCD_EP_DB_Transmit+0x6c8>
 80042a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042aa:	3301      	adds	r3, #1
 80042ac:	657b      	str	r3, [r7, #84]	; 0x54
 80042ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	029b      	lsls	r3, r3, #10
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042b8:	801a      	strh	r2, [r3, #0]
 80042ba:	e02f      	b.n	800431c <HAL_PCD_EP_DB_Transmit+0x736>
 80042bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042be:	095b      	lsrs	r3, r3, #5
 80042c0:	657b      	str	r3, [r7, #84]	; 0x54
 80042c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042c4:	f003 031f 	and.w	r3, r3, #31
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d102      	bne.n	80042d2 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80042cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ce:	3b01      	subs	r3, #1
 80042d0:	657b      	str	r3, [r7, #84]	; 0x54
 80042d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	029b      	lsls	r3, r3, #10
 80042d8:	b29b      	uxth	r3, r3
 80042da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042e6:	801a      	strh	r2, [r3, #0]
 80042e8:	e018      	b.n	800431c <HAL_PCD_EP_DB_Transmit+0x736>
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	785b      	ldrb	r3, [r3, #1]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d114      	bne.n	800431c <HAL_PCD_EP_DB_Transmit+0x736>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	461a      	mov	r2, r3
 80042fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004300:	4413      	add	r3, r2
 8004302:	667b      	str	r3, [r7, #100]	; 0x64
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	011a      	lsls	r2, r3, #4
 800430a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800430c:	4413      	add	r3, r2
 800430e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004312:	663b      	str	r3, [r7, #96]	; 0x60
 8004314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004316:	b29a      	uxth	r2, r3
 8004318:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800431a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6818      	ldr	r0, [r3, #0]
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	6959      	ldr	r1, [r3, #20]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	895a      	ldrh	r2, [r3, #10]
 8004328:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800432a:	b29b      	uxth	r3, r3
 800432c:	f004 fd1c 	bl	8008d68 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	461a      	mov	r2, r3
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	b29b      	uxth	r3, r3
 8004342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004346:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800434a:	823b      	strh	r3, [r7, #16]
 800434c:	8a3b      	ldrh	r3, [r7, #16]
 800434e:	f083 0310 	eor.w	r3, r3, #16
 8004352:	823b      	strh	r3, [r7, #16]
 8004354:	8a3b      	ldrh	r3, [r7, #16]
 8004356:	f083 0320 	eor.w	r3, r3, #32
 800435a:	823b      	strh	r3, [r7, #16]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	461a      	mov	r2, r3
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	441a      	add	r2, r3
 800436a:	8a3b      	ldrh	r3, [r7, #16]
 800436c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004370:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004374:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800437c:	b29b      	uxth	r3, r3
 800437e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3788      	adds	r7, #136	; 0x88
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800438a:	b480      	push	{r7}
 800438c:	b087      	sub	sp, #28
 800438e:	af00      	add	r7, sp, #0
 8004390:	60f8      	str	r0, [r7, #12]
 8004392:	607b      	str	r3, [r7, #4]
 8004394:	460b      	mov	r3, r1
 8004396:	817b      	strh	r3, [r7, #10]
 8004398:	4613      	mov	r3, r2
 800439a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800439c:	897b      	ldrh	r3, [r7, #10]
 800439e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00b      	beq.n	80043c0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043a8:	897b      	ldrh	r3, [r7, #10]
 80043aa:	f003 0307 	and.w	r3, r3, #7
 80043ae:	1c5a      	adds	r2, r3, #1
 80043b0:	4613      	mov	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	4413      	add	r3, r2
 80043bc:	617b      	str	r3, [r7, #20]
 80043be:	e009      	b.n	80043d4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043c0:	897a      	ldrh	r2, [r7, #10]
 80043c2:	4613      	mov	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4413      	add	r3, r2
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	4413      	add	r3, r2
 80043d2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80043d4:	893b      	ldrh	r3, [r7, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d107      	bne.n	80043ea <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2200      	movs	r2, #0
 80043de:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	80da      	strh	r2, [r3, #6]
 80043e8:	e00b      	b.n	8004402 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2201      	movs	r2, #1
 80043ee:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	0c1b      	lsrs	r3, r3, #16
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	371c      	adds	r7, #28
 8004408:	46bd      	mov	sp, r7
 800440a:	bc80      	pop	{r7}
 800440c:	4770      	bx	lr
	...

08004410 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e272      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 8087 	beq.w	800453e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004430:	4b92      	ldr	r3, [pc, #584]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f003 030c 	and.w	r3, r3, #12
 8004438:	2b04      	cmp	r3, #4
 800443a:	d00c      	beq.n	8004456 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800443c:	4b8f      	ldr	r3, [pc, #572]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f003 030c 	and.w	r3, r3, #12
 8004444:	2b08      	cmp	r3, #8
 8004446:	d112      	bne.n	800446e <HAL_RCC_OscConfig+0x5e>
 8004448:	4b8c      	ldr	r3, [pc, #560]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004454:	d10b      	bne.n	800446e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004456:	4b89      	ldr	r3, [pc, #548]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d06c      	beq.n	800453c <HAL_RCC_OscConfig+0x12c>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d168      	bne.n	800453c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e24c      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004476:	d106      	bne.n	8004486 <HAL_RCC_OscConfig+0x76>
 8004478:	4b80      	ldr	r3, [pc, #512]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a7f      	ldr	r2, [pc, #508]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 800447e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004482:	6013      	str	r3, [r2, #0]
 8004484:	e02e      	b.n	80044e4 <HAL_RCC_OscConfig+0xd4>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10c      	bne.n	80044a8 <HAL_RCC_OscConfig+0x98>
 800448e:	4b7b      	ldr	r3, [pc, #492]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a7a      	ldr	r2, [pc, #488]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	4b78      	ldr	r3, [pc, #480]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a77      	ldr	r2, [pc, #476]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 80044a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	e01d      	b.n	80044e4 <HAL_RCC_OscConfig+0xd4>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044b0:	d10c      	bne.n	80044cc <HAL_RCC_OscConfig+0xbc>
 80044b2:	4b72      	ldr	r3, [pc, #456]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a71      	ldr	r2, [pc, #452]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 80044b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	4b6f      	ldr	r3, [pc, #444]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a6e      	ldr	r2, [pc, #440]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 80044c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c8:	6013      	str	r3, [r2, #0]
 80044ca:	e00b      	b.n	80044e4 <HAL_RCC_OscConfig+0xd4>
 80044cc:	4b6b      	ldr	r3, [pc, #428]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a6a      	ldr	r2, [pc, #424]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 80044d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	4b68      	ldr	r3, [pc, #416]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a67      	ldr	r2, [pc, #412]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 80044de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d013      	beq.n	8004514 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ec:	f7fd fce6 	bl	8001ebc <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044f4:	f7fd fce2 	bl	8001ebc <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b64      	cmp	r3, #100	; 0x64
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e200      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004506:	4b5d      	ldr	r3, [pc, #372]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0f0      	beq.n	80044f4 <HAL_RCC_OscConfig+0xe4>
 8004512:	e014      	b.n	800453e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004514:	f7fd fcd2 	bl	8001ebc <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800451c:	f7fd fcce 	bl	8001ebc <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b64      	cmp	r3, #100	; 0x64
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e1ec      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800452e:	4b53      	ldr	r3, [pc, #332]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1f0      	bne.n	800451c <HAL_RCC_OscConfig+0x10c>
 800453a:	e000      	b.n	800453e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800453c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d063      	beq.n	8004612 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800454a:	4b4c      	ldr	r3, [pc, #304]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f003 030c 	and.w	r3, r3, #12
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00b      	beq.n	800456e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004556:	4b49      	ldr	r3, [pc, #292]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f003 030c 	and.w	r3, r3, #12
 800455e:	2b08      	cmp	r3, #8
 8004560:	d11c      	bne.n	800459c <HAL_RCC_OscConfig+0x18c>
 8004562:	4b46      	ldr	r3, [pc, #280]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d116      	bne.n	800459c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800456e:	4b43      	ldr	r3, [pc, #268]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d005      	beq.n	8004586 <HAL_RCC_OscConfig+0x176>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d001      	beq.n	8004586 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e1c0      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004586:	4b3d      	ldr	r3, [pc, #244]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	4939      	ldr	r1, [pc, #228]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004596:	4313      	orrs	r3, r2
 8004598:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800459a:	e03a      	b.n	8004612 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d020      	beq.n	80045e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045a4:	4b36      	ldr	r3, [pc, #216]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 80045a6:	2201      	movs	r2, #1
 80045a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045aa:	f7fd fc87 	bl	8001ebc <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b0:	e008      	b.n	80045c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045b2:	f7fd fc83 	bl	8001ebc <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e1a1      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045c4:	4b2d      	ldr	r3, [pc, #180]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0f0      	beq.n	80045b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d0:	4b2a      	ldr	r3, [pc, #168]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	4927      	ldr	r1, [pc, #156]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	600b      	str	r3, [r1, #0]
 80045e4:	e015      	b.n	8004612 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045e6:	4b26      	ldr	r3, [pc, #152]	; (8004680 <HAL_RCC_OscConfig+0x270>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ec:	f7fd fc66 	bl	8001ebc <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045f4:	f7fd fc62 	bl	8001ebc <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e180      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004606:	4b1d      	ldr	r3, [pc, #116]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1f0      	bne.n	80045f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	2b00      	cmp	r3, #0
 800461c:	d03a      	beq.n	8004694 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d019      	beq.n	800465a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004626:	4b17      	ldr	r3, [pc, #92]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 8004628:	2201      	movs	r2, #1
 800462a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800462c:	f7fd fc46 	bl	8001ebc <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004634:	f7fd fc42 	bl	8001ebc <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e160      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004646:	4b0d      	ldr	r3, [pc, #52]	; (800467c <HAL_RCC_OscConfig+0x26c>)
 8004648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0f0      	beq.n	8004634 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004652:	2001      	movs	r0, #1
 8004654:	f000 fad8 	bl	8004c08 <RCC_Delay>
 8004658:	e01c      	b.n	8004694 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800465a:	4b0a      	ldr	r3, [pc, #40]	; (8004684 <HAL_RCC_OscConfig+0x274>)
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004660:	f7fd fc2c 	bl	8001ebc <HAL_GetTick>
 8004664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004666:	e00f      	b.n	8004688 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004668:	f7fd fc28 	bl	8001ebc <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	2b02      	cmp	r3, #2
 8004674:	d908      	bls.n	8004688 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e146      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
 800467a:	bf00      	nop
 800467c:	40021000 	.word	0x40021000
 8004680:	42420000 	.word	0x42420000
 8004684:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004688:	4b92      	ldr	r3, [pc, #584]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1e9      	bne.n	8004668 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 80a6 	beq.w	80047ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046a2:	2300      	movs	r3, #0
 80046a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046a6:	4b8b      	ldr	r3, [pc, #556]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80046a8:	69db      	ldr	r3, [r3, #28]
 80046aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10d      	bne.n	80046ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046b2:	4b88      	ldr	r3, [pc, #544]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	4a87      	ldr	r2, [pc, #540]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80046b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046bc:	61d3      	str	r3, [r2, #28]
 80046be:	4b85      	ldr	r3, [pc, #532]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c6:	60bb      	str	r3, [r7, #8]
 80046c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ca:	2301      	movs	r3, #1
 80046cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ce:	4b82      	ldr	r3, [pc, #520]	; (80048d8 <HAL_RCC_OscConfig+0x4c8>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d118      	bne.n	800470c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046da:	4b7f      	ldr	r3, [pc, #508]	; (80048d8 <HAL_RCC_OscConfig+0x4c8>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a7e      	ldr	r2, [pc, #504]	; (80048d8 <HAL_RCC_OscConfig+0x4c8>)
 80046e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046e6:	f7fd fbe9 	bl	8001ebc <HAL_GetTick>
 80046ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ee:	f7fd fbe5 	bl	8001ebc <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b64      	cmp	r3, #100	; 0x64
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e103      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004700:	4b75      	ldr	r3, [pc, #468]	; (80048d8 <HAL_RCC_OscConfig+0x4c8>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0f0      	beq.n	80046ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d106      	bne.n	8004722 <HAL_RCC_OscConfig+0x312>
 8004714:	4b6f      	ldr	r3, [pc, #444]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	4a6e      	ldr	r2, [pc, #440]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800471a:	f043 0301 	orr.w	r3, r3, #1
 800471e:	6213      	str	r3, [r2, #32]
 8004720:	e02d      	b.n	800477e <HAL_RCC_OscConfig+0x36e>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10c      	bne.n	8004744 <HAL_RCC_OscConfig+0x334>
 800472a:	4b6a      	ldr	r3, [pc, #424]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	4a69      	ldr	r2, [pc, #420]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004730:	f023 0301 	bic.w	r3, r3, #1
 8004734:	6213      	str	r3, [r2, #32]
 8004736:	4b67      	ldr	r3, [pc, #412]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	4a66      	ldr	r2, [pc, #408]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800473c:	f023 0304 	bic.w	r3, r3, #4
 8004740:	6213      	str	r3, [r2, #32]
 8004742:	e01c      	b.n	800477e <HAL_RCC_OscConfig+0x36e>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	2b05      	cmp	r3, #5
 800474a:	d10c      	bne.n	8004766 <HAL_RCC_OscConfig+0x356>
 800474c:	4b61      	ldr	r3, [pc, #388]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	4a60      	ldr	r2, [pc, #384]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004752:	f043 0304 	orr.w	r3, r3, #4
 8004756:	6213      	str	r3, [r2, #32]
 8004758:	4b5e      	ldr	r3, [pc, #376]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	4a5d      	ldr	r2, [pc, #372]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800475e:	f043 0301 	orr.w	r3, r3, #1
 8004762:	6213      	str	r3, [r2, #32]
 8004764:	e00b      	b.n	800477e <HAL_RCC_OscConfig+0x36e>
 8004766:	4b5b      	ldr	r3, [pc, #364]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	4a5a      	ldr	r2, [pc, #360]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800476c:	f023 0301 	bic.w	r3, r3, #1
 8004770:	6213      	str	r3, [r2, #32]
 8004772:	4b58      	ldr	r3, [pc, #352]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	4a57      	ldr	r2, [pc, #348]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004778:	f023 0304 	bic.w	r3, r3, #4
 800477c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d015      	beq.n	80047b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004786:	f7fd fb99 	bl	8001ebc <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800478c:	e00a      	b.n	80047a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800478e:	f7fd fb95 	bl	8001ebc <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	f241 3288 	movw	r2, #5000	; 0x1388
 800479c:	4293      	cmp	r3, r2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e0b1      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a4:	4b4b      	ldr	r3, [pc, #300]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d0ee      	beq.n	800478e <HAL_RCC_OscConfig+0x37e>
 80047b0:	e014      	b.n	80047dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047b2:	f7fd fb83 	bl	8001ebc <HAL_GetTick>
 80047b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047b8:	e00a      	b.n	80047d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ba:	f7fd fb7f 	bl	8001ebc <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e09b      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047d0:	4b40      	ldr	r3, [pc, #256]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1ee      	bne.n	80047ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047dc:	7dfb      	ldrb	r3, [r7, #23]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d105      	bne.n	80047ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047e2:	4b3c      	ldr	r3, [pc, #240]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	4a3b      	ldr	r2, [pc, #236]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80047e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f000 8087 	beq.w	8004906 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047f8:	4b36      	ldr	r3, [pc, #216]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f003 030c 	and.w	r3, r3, #12
 8004800:	2b08      	cmp	r3, #8
 8004802:	d061      	beq.n	80048c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	2b02      	cmp	r3, #2
 800480a:	d146      	bne.n	800489a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800480c:	4b33      	ldr	r3, [pc, #204]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 800480e:	2200      	movs	r2, #0
 8004810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004812:	f7fd fb53 	bl	8001ebc <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004818:	e008      	b.n	800482c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800481a:	f7fd fb4f 	bl	8001ebc <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e06d      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800482c:	4b29      	ldr	r3, [pc, #164]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1f0      	bne.n	800481a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a1b      	ldr	r3, [r3, #32]
 800483c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004840:	d108      	bne.n	8004854 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004842:	4b24      	ldr	r3, [pc, #144]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	4921      	ldr	r1, [pc, #132]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004850:	4313      	orrs	r3, r2
 8004852:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004854:	4b1f      	ldr	r3, [pc, #124]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a19      	ldr	r1, [r3, #32]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	430b      	orrs	r3, r1
 8004866:	491b      	ldr	r1, [pc, #108]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 8004868:	4313      	orrs	r3, r2
 800486a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800486c:	4b1b      	ldr	r3, [pc, #108]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 800486e:	2201      	movs	r2, #1
 8004870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004872:	f7fd fb23 	bl	8001ebc <HAL_GetTick>
 8004876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004878:	e008      	b.n	800488c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800487a:	f7fd fb1f 	bl	8001ebc <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e03d      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800488c:	4b11      	ldr	r3, [pc, #68]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d0f0      	beq.n	800487a <HAL_RCC_OscConfig+0x46a>
 8004898:	e035      	b.n	8004906 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800489a:	4b10      	ldr	r3, [pc, #64]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 800489c:	2200      	movs	r2, #0
 800489e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a0:	f7fd fb0c 	bl	8001ebc <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a8:	f7fd fb08 	bl	8001ebc <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e026      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048ba:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <HAL_RCC_OscConfig+0x4c4>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1f0      	bne.n	80048a8 <HAL_RCC_OscConfig+0x498>
 80048c6:	e01e      	b.n	8004906 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	69db      	ldr	r3, [r3, #28]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d107      	bne.n	80048e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e019      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
 80048d4:	40021000 	.word	0x40021000
 80048d8:	40007000 	.word	0x40007000
 80048dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048e0:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <HAL_RCC_OscConfig+0x500>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d106      	bne.n	8004902 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048fe:	429a      	cmp	r2, r3
 8004900:	d001      	beq.n	8004906 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e000      	b.n	8004908 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3718      	adds	r7, #24
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	40021000 	.word	0x40021000

08004914 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e0d0      	b.n	8004aca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004928:	4b6a      	ldr	r3, [pc, #424]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c0>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0307 	and.w	r3, r3, #7
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	429a      	cmp	r2, r3
 8004934:	d910      	bls.n	8004958 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004936:	4b67      	ldr	r3, [pc, #412]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f023 0207 	bic.w	r2, r3, #7
 800493e:	4965      	ldr	r1, [pc, #404]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	4313      	orrs	r3, r2
 8004944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004946:	4b63      	ldr	r3, [pc, #396]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	429a      	cmp	r2, r3
 8004952:	d001      	beq.n	8004958 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e0b8      	b.n	8004aca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d020      	beq.n	80049a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b00      	cmp	r3, #0
 800496e:	d005      	beq.n	800497c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004970:	4b59      	ldr	r3, [pc, #356]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	4a58      	ldr	r2, [pc, #352]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004976:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800497a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0308 	and.w	r3, r3, #8
 8004984:	2b00      	cmp	r3, #0
 8004986:	d005      	beq.n	8004994 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004988:	4b53      	ldr	r3, [pc, #332]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	4a52      	ldr	r2, [pc, #328]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800498e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004992:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004994:	4b50      	ldr	r3, [pc, #320]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	494d      	ldr	r1, [pc, #308]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d040      	beq.n	8004a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d107      	bne.n	80049ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ba:	4b47      	ldr	r3, [pc, #284]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d115      	bne.n	80049f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e07f      	b.n	8004aca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d107      	bne.n	80049e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049d2:	4b41      	ldr	r3, [pc, #260]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d109      	bne.n	80049f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e073      	b.n	8004aca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e2:	4b3d      	ldr	r3, [pc, #244]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e06b      	b.n	8004aca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049f2:	4b39      	ldr	r3, [pc, #228]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f023 0203 	bic.w	r2, r3, #3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	4936      	ldr	r1, [pc, #216]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a04:	f7fd fa5a 	bl	8001ebc <HAL_GetTick>
 8004a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a0a:	e00a      	b.n	8004a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a0c:	f7fd fa56 	bl	8001ebc <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e053      	b.n	8004aca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a22:	4b2d      	ldr	r3, [pc, #180]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f003 020c 	and.w	r2, r3, #12
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d1eb      	bne.n	8004a0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a34:	4b27      	ldr	r3, [pc, #156]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d210      	bcs.n	8004a64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a42:	4b24      	ldr	r3, [pc, #144]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f023 0207 	bic.w	r2, r3, #7
 8004a4a:	4922      	ldr	r1, [pc, #136]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a52:	4b20      	ldr	r3, [pc, #128]	; (8004ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d001      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e032      	b.n	8004aca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d008      	beq.n	8004a82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a70:	4b19      	ldr	r3, [pc, #100]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	4916      	ldr	r1, [pc, #88]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0308 	and.w	r3, r3, #8
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d009      	beq.n	8004aa2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a8e:	4b12      	ldr	r3, [pc, #72]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	490e      	ldr	r1, [pc, #56]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004aa2:	f000 f821 	bl	8004ae8 <HAL_RCC_GetSysClockFreq>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	4b0b      	ldr	r3, [pc, #44]	; (8004ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	091b      	lsrs	r3, r3, #4
 8004aae:	f003 030f 	and.w	r3, r3, #15
 8004ab2:	490a      	ldr	r1, [pc, #40]	; (8004adc <HAL_RCC_ClockConfig+0x1c8>)
 8004ab4:	5ccb      	ldrb	r3, [r1, r3]
 8004ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aba:	4a09      	ldr	r2, [pc, #36]	; (8004ae0 <HAL_RCC_ClockConfig+0x1cc>)
 8004abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004abe:	4b09      	ldr	r3, [pc, #36]	; (8004ae4 <HAL_RCC_ClockConfig+0x1d0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7fd f9b8 	bl	8001e38 <HAL_InitTick>

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	40022000 	.word	0x40022000
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	0800afcc 	.word	0x0800afcc
 8004ae0:	20000004 	.word	0x20000004
 8004ae4:	20000008 	.word	0x20000008

08004ae8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ae8:	b490      	push	{r4, r7}
 8004aea:	b08a      	sub	sp, #40	; 0x28
 8004aec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004aee:	4b29      	ldr	r3, [pc, #164]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xac>)
 8004af0:	1d3c      	adds	r4, r7, #4
 8004af2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004af4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004af8:	f240 2301 	movw	r3, #513	; 0x201
 8004afc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004afe:	2300      	movs	r3, #0
 8004b00:	61fb      	str	r3, [r7, #28]
 8004b02:	2300      	movs	r3, #0
 8004b04:	61bb      	str	r3, [r7, #24]
 8004b06:	2300      	movs	r3, #0
 8004b08:	627b      	str	r3, [r7, #36]	; 0x24
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b12:	4b21      	ldr	r3, [pc, #132]	; (8004b98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	f003 030c 	and.w	r3, r3, #12
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	d002      	beq.n	8004b28 <HAL_RCC_GetSysClockFreq+0x40>
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	d003      	beq.n	8004b2e <HAL_RCC_GetSysClockFreq+0x46>
 8004b26:	e02b      	b.n	8004b80 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b28:	4b1c      	ldr	r3, [pc, #112]	; (8004b9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b2a:	623b      	str	r3, [r7, #32]
      break;
 8004b2c:	e02b      	b.n	8004b86 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	0c9b      	lsrs	r3, r3, #18
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	3328      	adds	r3, #40	; 0x28
 8004b38:	443b      	add	r3, r7
 8004b3a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004b3e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d012      	beq.n	8004b70 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b4a:	4b13      	ldr	r3, [pc, #76]	; (8004b98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	0c5b      	lsrs	r3, r3, #17
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	3328      	adds	r3, #40	; 0x28
 8004b56:	443b      	add	r3, r7
 8004b58:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004b5c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	4a0e      	ldr	r2, [pc, #56]	; (8004b9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b62:	fb03 f202 	mul.w	r2, r3, r2
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b6e:	e004      	b.n	8004b7a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	4a0b      	ldr	r2, [pc, #44]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b74:	fb02 f303 	mul.w	r3, r2, r3
 8004b78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	623b      	str	r3, [r7, #32]
      break;
 8004b7e:	e002      	b.n	8004b86 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b80:	4b06      	ldr	r3, [pc, #24]	; (8004b9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b82:	623b      	str	r3, [r7, #32]
      break;
 8004b84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b86:	6a3b      	ldr	r3, [r7, #32]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3728      	adds	r7, #40	; 0x28
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bc90      	pop	{r4, r7}
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	0800af74 	.word	0x0800af74
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	007a1200 	.word	0x007a1200
 8004ba0:	003d0900 	.word	0x003d0900

08004ba4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ba8:	4b02      	ldr	r3, [pc, #8]	; (8004bb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004baa:	681b      	ldr	r3, [r3, #0]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bc80      	pop	{r7}
 8004bb2:	4770      	bx	lr
 8004bb4:	20000004 	.word	0x20000004

08004bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bbc:	f7ff fff2 	bl	8004ba4 <HAL_RCC_GetHCLKFreq>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	0a1b      	lsrs	r3, r3, #8
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	4903      	ldr	r1, [pc, #12]	; (8004bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bce:	5ccb      	ldrb	r3, [r1, r3]
 8004bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	40021000 	.word	0x40021000
 8004bdc:	0800afdc 	.word	0x0800afdc

08004be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004be4:	f7ff ffde 	bl	8004ba4 <HAL_RCC_GetHCLKFreq>
 8004be8:	4602      	mov	r2, r0
 8004bea:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	0adb      	lsrs	r3, r3, #11
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	4903      	ldr	r1, [pc, #12]	; (8004c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bf6:	5ccb      	ldrb	r3, [r1, r3]
 8004bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	40021000 	.word	0x40021000
 8004c04:	0800afdc 	.word	0x0800afdc

08004c08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c10:	4b0a      	ldr	r3, [pc, #40]	; (8004c3c <RCC_Delay+0x34>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a0a      	ldr	r2, [pc, #40]	; (8004c40 <RCC_Delay+0x38>)
 8004c16:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1a:	0a5b      	lsrs	r3, r3, #9
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	fb02 f303 	mul.w	r3, r2, r3
 8004c22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c24:	bf00      	nop
  }
  while (Delay --);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	1e5a      	subs	r2, r3, #1
 8004c2a:	60fa      	str	r2, [r7, #12]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1f9      	bne.n	8004c24 <RCC_Delay+0x1c>
}
 8004c30:	bf00      	nop
 8004c32:	bf00      	nop
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bc80      	pop	{r7}
 8004c3a:	4770      	bx	lr
 8004c3c:	20000004 	.word	0x20000004
 8004c40:	10624dd3 	.word	0x10624dd3

08004c44 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	613b      	str	r3, [r7, #16]
 8004c50:	2300      	movs	r3, #0
 8004c52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d07d      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004c60:	2300      	movs	r3, #0
 8004c62:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c64:	4b4f      	ldr	r3, [pc, #316]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c66:	69db      	ldr	r3, [r3, #28]
 8004c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10d      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c70:	4b4c      	ldr	r3, [pc, #304]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	4a4b      	ldr	r2, [pc, #300]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c7a:	61d3      	str	r3, [r2, #28]
 8004c7c:	4b49      	ldr	r3, [pc, #292]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c84:	60bb      	str	r3, [r7, #8]
 8004c86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c8c:	4b46      	ldr	r3, [pc, #280]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d118      	bne.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c98:	4b43      	ldr	r3, [pc, #268]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a42      	ldr	r2, [pc, #264]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ca2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ca4:	f7fd f90a 	bl	8001ebc <HAL_GetTick>
 8004ca8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004caa:	e008      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cac:	f7fd f906 	bl	8001ebc <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b64      	cmp	r3, #100	; 0x64
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e06d      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cbe:	4b3a      	ldr	r3, [pc, #232]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0f0      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cca:	4b36      	ldr	r3, [pc, #216]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d02e      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d027      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ce8:	4b2e      	ldr	r3, [pc, #184]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cf0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cf2:	4b2e      	ldr	r3, [pc, #184]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cf8:	4b2c      	ldr	r3, [pc, #176]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004cfe:	4a29      	ldr	r2, [pc, #164]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d014      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d0e:	f7fd f8d5 	bl	8001ebc <HAL_GetTick>
 8004d12:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d14:	e00a      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d16:	f7fd f8d1 	bl	8001ebc <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e036      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d2c:	4b1d      	ldr	r3, [pc, #116]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d0ee      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d38:	4b1a      	ldr	r3, [pc, #104]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	4917      	ldr	r1, [pc, #92]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d4a:	7dfb      	ldrb	r3, [r7, #23]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d105      	bne.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d50:	4b14      	ldr	r3, [pc, #80]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	4a13      	ldr	r2, [pc, #76]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d5a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d008      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d68:	4b0e      	ldr	r3, [pc, #56]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	490b      	ldr	r1, [pc, #44]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0310 	and.w	r3, r3, #16
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d008      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d86:	4b07      	ldr	r3, [pc, #28]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	4904      	ldr	r1, [pc, #16]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3718      	adds	r7, #24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	40021000 	.word	0x40021000
 8004da8:	40007000 	.word	0x40007000
 8004dac:	42420440 	.word	0x42420440

08004db0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e041      	b.n	8004e46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d106      	bne.n	8004ddc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7fc ff1c 	bl	8001c14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3304      	adds	r3, #4
 8004dec:	4619      	mov	r1, r3
 8004dee:	4610      	mov	r0, r2
 8004df0:	f000 fc9a 	bl	8005728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3708      	adds	r7, #8
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
	...

08004e50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d001      	beq.n	8004e68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e03a      	b.n	8004ede <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f042 0201 	orr.w	r2, r2, #1
 8004e7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a18      	ldr	r2, [pc, #96]	; (8004ee8 <HAL_TIM_Base_Start_IT+0x98>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d00e      	beq.n	8004ea8 <HAL_TIM_Base_Start_IT+0x58>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e92:	d009      	beq.n	8004ea8 <HAL_TIM_Base_Start_IT+0x58>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a14      	ldr	r2, [pc, #80]	; (8004eec <HAL_TIM_Base_Start_IT+0x9c>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d004      	beq.n	8004ea8 <HAL_TIM_Base_Start_IT+0x58>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a13      	ldr	r2, [pc, #76]	; (8004ef0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d111      	bne.n	8004ecc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 0307 	and.w	r3, r3, #7
 8004eb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2b06      	cmp	r3, #6
 8004eb8:	d010      	beq.n	8004edc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f042 0201 	orr.w	r2, r2, #1
 8004ec8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eca:	e007      	b.n	8004edc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f042 0201 	orr.w	r2, r2, #1
 8004eda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bc80      	pop	{r7}
 8004ee6:	4770      	bx	lr
 8004ee8:	40012c00 	.word	0x40012c00
 8004eec:	40000400 	.word	0x40000400
 8004ef0:	40000800 	.word	0x40000800

08004ef4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 0201 	bic.w	r2, r2, #1
 8004f0a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6a1a      	ldr	r2, [r3, #32]
 8004f12:	f241 1311 	movw	r3, #4369	; 0x1111
 8004f16:	4013      	ands	r3, r2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10f      	bne.n	8004f3c <HAL_TIM_Base_Stop_IT+0x48>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6a1a      	ldr	r2, [r3, #32]
 8004f22:	f240 4344 	movw	r3, #1092	; 0x444
 8004f26:	4013      	ands	r3, r2
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d107      	bne.n	8004f3c <HAL_TIM_Base_Stop_IT+0x48>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 0201 	bic.w	r2, r2, #1
 8004f3a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bc80      	pop	{r7}
 8004f4e:	4770      	bx	lr

08004f50 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e093      	b.n	800508c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d106      	bne.n	8004f7e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f7fc fe07 	bl	8001b8c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2202      	movs	r2, #2
 8004f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	6812      	ldr	r2, [r2, #0]
 8004f90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f94:	f023 0307 	bic.w	r3, r3, #7
 8004f98:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	3304      	adds	r3, #4
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	4610      	mov	r0, r2
 8004fa6:	f000 fbbf 	bl	8005728 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fd2:	f023 0303 	bic.w	r3, r3, #3
 8004fd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	689a      	ldr	r2, [r3, #8]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	021b      	lsls	r3, r3, #8
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004ff0:	f023 030c 	bic.w	r3, r3, #12
 8004ff4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ffc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005000:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	68da      	ldr	r2, [r3, #12]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	021b      	lsls	r3, r3, #8
 800500c:	4313      	orrs	r3, r2
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	4313      	orrs	r3, r2
 8005012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	011a      	lsls	r2, r3, #4
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	031b      	lsls	r3, r3, #12
 8005020:	4313      	orrs	r3, r2
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	4313      	orrs	r3, r2
 8005026:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800502e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685a      	ldr	r2, [r3, #4]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	011b      	lsls	r3, r3, #4
 800503a:	4313      	orrs	r3, r2
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3718      	adds	r7, #24
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050a4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050ac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050b4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80050bc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d110      	bne.n	80050e6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d102      	bne.n	80050d0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80050ca:	7b7b      	ldrb	r3, [r7, #13]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d001      	beq.n	80050d4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e089      	b.n	80051e8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2202      	movs	r2, #2
 80050e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050e4:	e031      	b.n	800514a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b04      	cmp	r3, #4
 80050ea:	d110      	bne.n	800510e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80050ec:	7bbb      	ldrb	r3, [r7, #14]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d102      	bne.n	80050f8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80050f2:	7b3b      	ldrb	r3, [r7, #12]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d001      	beq.n	80050fc <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e075      	b.n	80051e8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800510c:	e01d      	b.n	800514a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800510e:	7bfb      	ldrb	r3, [r7, #15]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d108      	bne.n	8005126 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005114:	7bbb      	ldrb	r3, [r7, #14]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d105      	bne.n	8005126 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800511a:	7b7b      	ldrb	r3, [r7, #13]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d102      	bne.n	8005126 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005120:	7b3b      	ldrb	r3, [r7, #12]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d001      	beq.n	800512a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e05e      	b.n	80051e8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2202      	movs	r2, #2
 800512e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2202      	movs	r2, #2
 8005136:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2202      	movs	r2, #2
 800513e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2202      	movs	r2, #2
 8005146:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <HAL_TIM_Encoder_Start_IT+0xc4>
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	2b04      	cmp	r3, #4
 8005154:	d010      	beq.n	8005178 <HAL_TIM_Encoder_Start_IT+0xe4>
 8005156:	e01f      	b.n	8005198 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2201      	movs	r2, #1
 800515e:	2100      	movs	r1, #0
 8005160:	4618      	mov	r0, r3
 8005162:	f000 fbd9 	bl	8005918 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f042 0202 	orr.w	r2, r2, #2
 8005174:	60da      	str	r2, [r3, #12]
      break;
 8005176:	e02e      	b.n	80051d6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2201      	movs	r2, #1
 800517e:	2104      	movs	r1, #4
 8005180:	4618      	mov	r0, r3
 8005182:	f000 fbc9 	bl	8005918 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68da      	ldr	r2, [r3, #12]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f042 0204 	orr.w	r2, r2, #4
 8005194:	60da      	str	r2, [r3, #12]
      break;
 8005196:	e01e      	b.n	80051d6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2201      	movs	r2, #1
 800519e:	2100      	movs	r1, #0
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 fbb9 	bl	8005918 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2201      	movs	r2, #1
 80051ac:	2104      	movs	r1, #4
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 fbb2 	bl	8005918 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68da      	ldr	r2, [r3, #12]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 0202 	orr.w	r2, r2, #2
 80051c2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0204 	orr.w	r2, r2, #4
 80051d2:	60da      	str	r2, [r3, #12]
      break;
 80051d4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f042 0201 	orr.w	r2, r2, #1
 80051e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10f      	bne.n	8005220 <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2200      	movs	r2, #0
 8005206:	2100      	movs	r1, #0
 8005208:	4618      	mov	r0, r3
 800520a:	f000 fb85 	bl	8005918 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68da      	ldr	r2, [r3, #12]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 0202 	bic.w	r2, r2, #2
 800521c:	60da      	str	r2, [r3, #12]
 800521e:	e030      	b.n	8005282 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	2b04      	cmp	r3, #4
 8005224:	d10f      	bne.n	8005246 <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2200      	movs	r2, #0
 800522c:	2104      	movs	r1, #4
 800522e:	4618      	mov	r0, r3
 8005230:	f000 fb72 	bl	8005918 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 0204 	bic.w	r2, r2, #4
 8005242:	60da      	str	r2, [r3, #12]
 8005244:	e01d      	b.n	8005282 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2200      	movs	r2, #0
 800524c:	2100      	movs	r1, #0
 800524e:	4618      	mov	r0, r3
 8005250:	f000 fb62 	bl	8005918 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2200      	movs	r2, #0
 800525a:	2104      	movs	r1, #4
 800525c:	4618      	mov	r0, r3
 800525e:	f000 fb5b 	bl	8005918 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68da      	ldr	r2, [r3, #12]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f022 0202 	bic.w	r2, r2, #2
 8005270:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68da      	ldr	r2, [r3, #12]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0204 	bic.w	r2, r2, #4
 8005280:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6a1a      	ldr	r2, [r3, #32]
 8005288:	f241 1311 	movw	r3, #4369	; 0x1111
 800528c:	4013      	ands	r3, r2
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10f      	bne.n	80052b2 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6a1a      	ldr	r2, [r3, #32]
 8005298:	f240 4344 	movw	r3, #1092	; 0x444
 800529c:	4013      	ands	r3, r2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d107      	bne.n	80052b2 <HAL_TIM_Encoder_Stop_IT+0xc2>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 0201 	bic.w	r2, r2, #1
 80052b0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d002      	beq.n	80052be <HAL_TIM_Encoder_Stop_IT+0xce>
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	2b04      	cmp	r3, #4
 80052bc:	d138      	bne.n	8005330 <HAL_TIM_Encoder_Stop_IT+0x140>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d104      	bne.n	80052ce <HAL_TIM_Encoder_Stop_IT+0xde>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052cc:	e013      	b.n	80052f6 <HAL_TIM_Encoder_Stop_IT+0x106>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b04      	cmp	r3, #4
 80052d2:	d104      	bne.n	80052de <HAL_TIM_Encoder_Stop_IT+0xee>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052dc:	e00b      	b.n	80052f6 <HAL_TIM_Encoder_Stop_IT+0x106>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d104      	bne.n	80052ee <HAL_TIM_Encoder_Stop_IT+0xfe>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052ec:	e003      	b.n	80052f6 <HAL_TIM_Encoder_Stop_IT+0x106>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d104      	bne.n	8005306 <HAL_TIM_Encoder_Stop_IT+0x116>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005304:	e024      	b.n	8005350 <HAL_TIM_Encoder_Stop_IT+0x160>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b04      	cmp	r3, #4
 800530a:	d104      	bne.n	8005316 <HAL_TIM_Encoder_Stop_IT+0x126>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005314:	e01c      	b.n	8005350 <HAL_TIM_Encoder_Stop_IT+0x160>
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b08      	cmp	r3, #8
 800531a:	d104      	bne.n	8005326 <HAL_TIM_Encoder_Stop_IT+0x136>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005324:	e014      	b.n	8005350 <HAL_TIM_Encoder_Stop_IT+0x160>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800532e:	e00f      	b.n	8005350 <HAL_TIM_Encoder_Stop_IT+0x160>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3708      	adds	r7, #8
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b082      	sub	sp, #8
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b02      	cmp	r3, #2
 800536e:	d122      	bne.n	80053b6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b02      	cmp	r3, #2
 800537c:	d11b      	bne.n	80053b6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f06f 0202 	mvn.w	r2, #2
 8005386:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	f003 0303 	and.w	r3, r3, #3
 8005398:	2b00      	cmp	r3, #0
 800539a:	d003      	beq.n	80053a4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f7fc fafb 	bl	8001998 <HAL_TIM_IC_CaptureCallback>
 80053a2:	e005      	b.n	80053b0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 f9a4 	bl	80056f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f9aa 	bl	8005704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	f003 0304 	and.w	r3, r3, #4
 80053c0:	2b04      	cmp	r3, #4
 80053c2:	d122      	bne.n	800540a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	f003 0304 	and.w	r3, r3, #4
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	d11b      	bne.n	800540a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f06f 0204 	mvn.w	r2, #4
 80053da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d003      	beq.n	80053f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7fc fad1 	bl	8001998 <HAL_TIM_IC_CaptureCallback>
 80053f6:	e005      	b.n	8005404 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f97a 	bl	80056f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f980 	bl	8005704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	f003 0308 	and.w	r3, r3, #8
 8005414:	2b08      	cmp	r3, #8
 8005416:	d122      	bne.n	800545e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	f003 0308 	and.w	r3, r3, #8
 8005422:	2b08      	cmp	r3, #8
 8005424:	d11b      	bne.n	800545e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f06f 0208 	mvn.w	r2, #8
 800542e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2204      	movs	r2, #4
 8005434:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	69db      	ldr	r3, [r3, #28]
 800543c:	f003 0303 	and.w	r3, r3, #3
 8005440:	2b00      	cmp	r3, #0
 8005442:	d003      	beq.n	800544c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f7fc faa7 	bl	8001998 <HAL_TIM_IC_CaptureCallback>
 800544a:	e005      	b.n	8005458 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 f950 	bl	80056f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f956 	bl	8005704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	f003 0310 	and.w	r3, r3, #16
 8005468:	2b10      	cmp	r3, #16
 800546a:	d122      	bne.n	80054b2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f003 0310 	and.w	r3, r3, #16
 8005476:	2b10      	cmp	r3, #16
 8005478:	d11b      	bne.n	80054b2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f06f 0210 	mvn.w	r2, #16
 8005482:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2208      	movs	r2, #8
 8005488:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69db      	ldr	r3, [r3, #28]
 8005490:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005494:	2b00      	cmp	r3, #0
 8005496:	d003      	beq.n	80054a0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f7fc fa7d 	bl	8001998 <HAL_TIM_IC_CaptureCallback>
 800549e:	e005      	b.n	80054ac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f926 	bl	80056f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f92c 	bl	8005704 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d10e      	bne.n	80054de <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d107      	bne.n	80054de <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f06f 0201 	mvn.w	r2, #1
 80054d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f7fc faaf 	bl	8001a3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e8:	2b80      	cmp	r3, #128	; 0x80
 80054ea:	d10e      	bne.n	800550a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f6:	2b80      	cmp	r3, #128	; 0x80
 80054f8:	d107      	bne.n	800550a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 fa92 	bl	8005a2e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005514:	2b40      	cmp	r3, #64	; 0x40
 8005516:	d10e      	bne.n	8005536 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005522:	2b40      	cmp	r3, #64	; 0x40
 8005524:	d107      	bne.n	8005536 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800552e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 f8f0 	bl	8005716 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	f003 0320 	and.w	r3, r3, #32
 8005540:	2b20      	cmp	r3, #32
 8005542:	d10e      	bne.n	8005562 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f003 0320 	and.w	r3, r3, #32
 800554e:	2b20      	cmp	r3, #32
 8005550:	d107      	bne.n	8005562 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f06f 0220 	mvn.w	r2, #32
 800555a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 fa5d 	bl	8005a1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005562:	bf00      	nop
 8005564:	3708      	adds	r7, #8
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b084      	sub	sp, #16
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
 8005572:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800557a:	2b01      	cmp	r3, #1
 800557c:	d101      	bne.n	8005582 <HAL_TIM_ConfigClockSource+0x18>
 800557e:	2302      	movs	r3, #2
 8005580:	e0b3      	b.n	80056ea <HAL_TIM_ConfigClockSource+0x180>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2202      	movs	r2, #2
 800558e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055a0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055a8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ba:	d03e      	beq.n	800563a <HAL_TIM_ConfigClockSource+0xd0>
 80055bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055c0:	f200 8087 	bhi.w	80056d2 <HAL_TIM_ConfigClockSource+0x168>
 80055c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055c8:	f000 8085 	beq.w	80056d6 <HAL_TIM_ConfigClockSource+0x16c>
 80055cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d0:	d87f      	bhi.n	80056d2 <HAL_TIM_ConfigClockSource+0x168>
 80055d2:	2b70      	cmp	r3, #112	; 0x70
 80055d4:	d01a      	beq.n	800560c <HAL_TIM_ConfigClockSource+0xa2>
 80055d6:	2b70      	cmp	r3, #112	; 0x70
 80055d8:	d87b      	bhi.n	80056d2 <HAL_TIM_ConfigClockSource+0x168>
 80055da:	2b60      	cmp	r3, #96	; 0x60
 80055dc:	d050      	beq.n	8005680 <HAL_TIM_ConfigClockSource+0x116>
 80055de:	2b60      	cmp	r3, #96	; 0x60
 80055e0:	d877      	bhi.n	80056d2 <HAL_TIM_ConfigClockSource+0x168>
 80055e2:	2b50      	cmp	r3, #80	; 0x50
 80055e4:	d03c      	beq.n	8005660 <HAL_TIM_ConfigClockSource+0xf6>
 80055e6:	2b50      	cmp	r3, #80	; 0x50
 80055e8:	d873      	bhi.n	80056d2 <HAL_TIM_ConfigClockSource+0x168>
 80055ea:	2b40      	cmp	r3, #64	; 0x40
 80055ec:	d058      	beq.n	80056a0 <HAL_TIM_ConfigClockSource+0x136>
 80055ee:	2b40      	cmp	r3, #64	; 0x40
 80055f0:	d86f      	bhi.n	80056d2 <HAL_TIM_ConfigClockSource+0x168>
 80055f2:	2b30      	cmp	r3, #48	; 0x30
 80055f4:	d064      	beq.n	80056c0 <HAL_TIM_ConfigClockSource+0x156>
 80055f6:	2b30      	cmp	r3, #48	; 0x30
 80055f8:	d86b      	bhi.n	80056d2 <HAL_TIM_ConfigClockSource+0x168>
 80055fa:	2b20      	cmp	r3, #32
 80055fc:	d060      	beq.n	80056c0 <HAL_TIM_ConfigClockSource+0x156>
 80055fe:	2b20      	cmp	r3, #32
 8005600:	d867      	bhi.n	80056d2 <HAL_TIM_ConfigClockSource+0x168>
 8005602:	2b00      	cmp	r3, #0
 8005604:	d05c      	beq.n	80056c0 <HAL_TIM_ConfigClockSource+0x156>
 8005606:	2b10      	cmp	r3, #16
 8005608:	d05a      	beq.n	80056c0 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800560a:	e062      	b.n	80056d2 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6818      	ldr	r0, [r3, #0]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	6899      	ldr	r1, [r3, #8]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f000 f95d 	bl	80058da <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800562e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	609a      	str	r2, [r3, #8]
      break;
 8005638:	e04e      	b.n	80056d8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6818      	ldr	r0, [r3, #0]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	6899      	ldr	r1, [r3, #8]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	f000 f946 	bl	80058da <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	689a      	ldr	r2, [r3, #8]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800565c:	609a      	str	r2, [r3, #8]
      break;
 800565e:	e03b      	b.n	80056d8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6818      	ldr	r0, [r3, #0]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	6859      	ldr	r1, [r3, #4]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	461a      	mov	r2, r3
 800566e:	f000 f8bd 	bl	80057ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2150      	movs	r1, #80	; 0x50
 8005678:	4618      	mov	r0, r3
 800567a:	f000 f914 	bl	80058a6 <TIM_ITRx_SetConfig>
      break;
 800567e:	e02b      	b.n	80056d8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6818      	ldr	r0, [r3, #0]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	6859      	ldr	r1, [r3, #4]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	461a      	mov	r2, r3
 800568e:	f000 f8db 	bl	8005848 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2160      	movs	r1, #96	; 0x60
 8005698:	4618      	mov	r0, r3
 800569a:	f000 f904 	bl	80058a6 <TIM_ITRx_SetConfig>
      break;
 800569e:	e01b      	b.n	80056d8 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6818      	ldr	r0, [r3, #0]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	6859      	ldr	r1, [r3, #4]
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	461a      	mov	r2, r3
 80056ae:	f000 f89d 	bl	80057ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2140      	movs	r1, #64	; 0x40
 80056b8:	4618      	mov	r0, r3
 80056ba:	f000 f8f4 	bl	80058a6 <TIM_ITRx_SetConfig>
      break;
 80056be:	e00b      	b.n	80056d8 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4619      	mov	r1, r3
 80056ca:	4610      	mov	r0, r2
 80056cc:	f000 f8eb 	bl	80058a6 <TIM_ITRx_SetConfig>
        break;
 80056d0:	e002      	b.n	80056d8 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80056d2:	bf00      	nop
 80056d4:	e000      	b.n	80056d8 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80056d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b083      	sub	sp, #12
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056fa:	bf00      	nop
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	bc80      	pop	{r7}
 8005702:	4770      	bx	lr

08005704 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	bc80      	pop	{r7}
 8005714:	4770      	bx	lr

08005716 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005716:	b480      	push	{r7}
 8005718:	b083      	sub	sp, #12
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800571e:	bf00      	nop
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	bc80      	pop	{r7}
 8005726:	4770      	bx	lr

08005728 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a29      	ldr	r2, [pc, #164]	; (80057e0 <TIM_Base_SetConfig+0xb8>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d00b      	beq.n	8005758 <TIM_Base_SetConfig+0x30>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005746:	d007      	beq.n	8005758 <TIM_Base_SetConfig+0x30>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a26      	ldr	r2, [pc, #152]	; (80057e4 <TIM_Base_SetConfig+0xbc>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d003      	beq.n	8005758 <TIM_Base_SetConfig+0x30>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a25      	ldr	r2, [pc, #148]	; (80057e8 <TIM_Base_SetConfig+0xc0>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d108      	bne.n	800576a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800575e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	4313      	orrs	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a1c      	ldr	r2, [pc, #112]	; (80057e0 <TIM_Base_SetConfig+0xb8>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d00b      	beq.n	800578a <TIM_Base_SetConfig+0x62>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005778:	d007      	beq.n	800578a <TIM_Base_SetConfig+0x62>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a19      	ldr	r2, [pc, #100]	; (80057e4 <TIM_Base_SetConfig+0xbc>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d003      	beq.n	800578a <TIM_Base_SetConfig+0x62>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4a18      	ldr	r2, [pc, #96]	; (80057e8 <TIM_Base_SetConfig+0xc0>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d108      	bne.n	800579c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	4313      	orrs	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	689a      	ldr	r2, [r3, #8]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a07      	ldr	r2, [pc, #28]	; (80057e0 <TIM_Base_SetConfig+0xb8>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d103      	bne.n	80057d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	691a      	ldr	r2, [r3, #16]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	615a      	str	r2, [r3, #20]
}
 80057d6:	bf00      	nop
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	bc80      	pop	{r7}
 80057de:	4770      	bx	lr
 80057e0:	40012c00 	.word	0x40012c00
 80057e4:	40000400 	.word	0x40000400
 80057e8:	40000800 	.word	0x40000800

080057ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	f023 0201 	bic.w	r2, r3, #1
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005816:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	011b      	lsls	r3, r3, #4
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	4313      	orrs	r3, r2
 8005820:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f023 030a 	bic.w	r3, r3, #10
 8005828:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	4313      	orrs	r3, r2
 8005830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	621a      	str	r2, [r3, #32]
}
 800583e:	bf00      	nop
 8005840:	371c      	adds	r7, #28
 8005842:	46bd      	mov	sp, r7
 8005844:	bc80      	pop	{r7}
 8005846:	4770      	bx	lr

08005848 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005848:	b480      	push	{r7}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6a1b      	ldr	r3, [r3, #32]
 8005858:	f023 0210 	bic.w	r2, r3, #16
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005872:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	031b      	lsls	r3, r3, #12
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	4313      	orrs	r3, r2
 800587c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005884:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	011b      	lsls	r3, r3, #4
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	4313      	orrs	r3, r2
 800588e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	621a      	str	r2, [r3, #32]
}
 800589c:	bf00      	nop
 800589e:	371c      	adds	r7, #28
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bc80      	pop	{r7}
 80058a4:	4770      	bx	lr

080058a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b085      	sub	sp, #20
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
 80058ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	f043 0307 	orr.w	r3, r3, #7
 80058c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	609a      	str	r2, [r3, #8]
}
 80058d0:	bf00      	nop
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bc80      	pop	{r7}
 80058d8:	4770      	bx	lr

080058da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058da:	b480      	push	{r7}
 80058dc:	b087      	sub	sp, #28
 80058de:	af00      	add	r7, sp, #0
 80058e0:	60f8      	str	r0, [r7, #12]
 80058e2:	60b9      	str	r1, [r7, #8]
 80058e4:	607a      	str	r2, [r7, #4]
 80058e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	021a      	lsls	r2, r3, #8
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	431a      	orrs	r2, r3
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	4313      	orrs	r3, r2
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	4313      	orrs	r3, r2
 8005906:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	609a      	str	r2, [r3, #8]
}
 800590e:	bf00      	nop
 8005910:	371c      	adds	r7, #28
 8005912:	46bd      	mov	sp, r7
 8005914:	bc80      	pop	{r7}
 8005916:	4770      	bx	lr

08005918 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005918:	b480      	push	{r7}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	f003 031f 	and.w	r3, r3, #31
 800592a:	2201      	movs	r2, #1
 800592c:	fa02 f303 	lsl.w	r3, r2, r3
 8005930:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6a1a      	ldr	r2, [r3, #32]
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	43db      	mvns	r3, r3
 800593a:	401a      	ands	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6a1a      	ldr	r2, [r3, #32]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	f003 031f 	and.w	r3, r3, #31
 800594a:	6879      	ldr	r1, [r7, #4]
 800594c:	fa01 f303 	lsl.w	r3, r1, r3
 8005950:	431a      	orrs	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	621a      	str	r2, [r3, #32]
}
 8005956:	bf00      	nop
 8005958:	371c      	adds	r7, #28
 800595a:	46bd      	mov	sp, r7
 800595c:	bc80      	pop	{r7}
 800595e:	4770      	bx	lr

08005960 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005970:	2b01      	cmp	r3, #1
 8005972:	d101      	bne.n	8005978 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005974:	2302      	movs	r3, #2
 8005976:	e046      	b.n	8005a06 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2202      	movs	r2, #2
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800599e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a16      	ldr	r2, [pc, #88]	; (8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d00e      	beq.n	80059da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059c4:	d009      	beq.n	80059da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a12      	ldr	r2, [pc, #72]	; (8005a14 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d004      	beq.n	80059da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a10      	ldr	r2, [pc, #64]	; (8005a18 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d10c      	bne.n	80059f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bc80      	pop	{r7}
 8005a0e:	4770      	bx	lr
 8005a10:	40012c00 	.word	0x40012c00
 8005a14:	40000400 	.word	0x40000400
 8005a18:	40000800 	.word	0x40000800

08005a1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bc80      	pop	{r7}
 8005a2c:	4770      	bx	lr

08005a2e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b083      	sub	sp, #12
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a36:	bf00      	nop
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bc80      	pop	{r7}
 8005a3e:	4770      	bx	lr

08005a40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e03f      	b.n	8005ad2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d106      	bne.n	8005a6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f7fc f8fa 	bl	8001c60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2224      	movs	r2, #36	; 0x24
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68da      	ldr	r2, [r3, #12]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 fba9 	bl	80061dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	691a      	ldr	r2, [r3, #16]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	695a      	ldr	r2, [r3, #20]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005aa8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68da      	ldr	r2, [r3, #12]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ab8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2220      	movs	r2, #32
 8005acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3708      	adds	r7, #8
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b084      	sub	sp, #16
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	60f8      	str	r0, [r7, #12]
 8005ae2:	60b9      	str	r1, [r7, #8]
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b20      	cmp	r3, #32
 8005af2:	d11d      	bne.n	8005b30 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d002      	beq.n	8005b00 <HAL_UART_Receive_IT+0x26>
 8005afa:	88fb      	ldrh	r3, [r7, #6]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d101      	bne.n	8005b04 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e016      	b.n	8005b32 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d101      	bne.n	8005b12 <HAL_UART_Receive_IT+0x38>
 8005b0e:	2302      	movs	r3, #2
 8005b10:	e00f      	b.n	8005b32 <HAL_UART_Receive_IT+0x58>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005b20:	88fb      	ldrh	r3, [r7, #6]
 8005b22:	461a      	mov	r2, r3
 8005b24:	68b9      	ldr	r1, [r7, #8]
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f000 f9cf 	bl	8005eca <UART_Start_Receive_IT>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	e000      	b.n	8005b32 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005b30:	2302      	movs	r3, #2
  }
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
	...

08005b3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b08a      	sub	sp, #40	; 0x28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005b60:	2300      	movs	r3, #0
 8005b62:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b66:	f003 030f 	and.w	r3, r3, #15
 8005b6a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10d      	bne.n	8005b8e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	f003 0320 	and.w	r3, r3, #32
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d008      	beq.n	8005b8e <HAL_UART_IRQHandler+0x52>
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	f003 0320 	and.w	r3, r3, #32
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d003      	beq.n	8005b8e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fa7f 	bl	800608a <UART_Receive_IT>
      return;
 8005b8c:	e17b      	b.n	8005e86 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f000 80b1 	beq.w	8005cf8 <HAL_UART_IRQHandler+0x1bc>
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d105      	bne.n	8005bac <HAL_UART_IRQHandler+0x70>
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f000 80a6 	beq.w	8005cf8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00a      	beq.n	8005bcc <HAL_UART_IRQHandler+0x90>
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d005      	beq.n	8005bcc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc4:	f043 0201 	orr.w	r2, r3, #1
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	f003 0304 	and.w	r3, r3, #4
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00a      	beq.n	8005bec <HAL_UART_IRQHandler+0xb0>
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	f003 0301 	and.w	r3, r3, #1
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d005      	beq.n	8005bec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be4:	f043 0202 	orr.w	r2, r3, #2
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00a      	beq.n	8005c0c <HAL_UART_IRQHandler+0xd0>
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d005      	beq.n	8005c0c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c04:	f043 0204 	orr.w	r2, r3, #4
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0e:	f003 0308 	and.w	r3, r3, #8
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00f      	beq.n	8005c36 <HAL_UART_IRQHandler+0xfa>
 8005c16:	6a3b      	ldr	r3, [r7, #32]
 8005c18:	f003 0320 	and.w	r3, r3, #32
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d104      	bne.n	8005c2a <HAL_UART_IRQHandler+0xee>
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d005      	beq.n	8005c36 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	f043 0208 	orr.w	r2, r3, #8
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 811e 	beq.w	8005e7c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c42:	f003 0320 	and.w	r3, r3, #32
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d007      	beq.n	8005c5a <HAL_UART_IRQHandler+0x11e>
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	f003 0320 	and.w	r3, r3, #32
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 fa18 	bl	800608a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	bf14      	ite	ne
 8005c68:	2301      	movne	r3, #1
 8005c6a:	2300      	moveq	r3, #0
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c74:	f003 0308 	and.w	r3, r3, #8
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d102      	bne.n	8005c82 <HAL_UART_IRQHandler+0x146>
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d031      	beq.n	8005ce6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f95a 	bl	8005f3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d023      	beq.n	8005cde <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	695a      	ldr	r2, [r3, #20]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ca4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d013      	beq.n	8005cd6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb2:	4a76      	ldr	r2, [pc, #472]	; (8005e8c <HAL_UART_IRQHandler+0x350>)
 8005cb4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7fc fa74 	bl	80021a8 <HAL_DMA_Abort_IT>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d016      	beq.n	8005cf4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cd4:	e00e      	b.n	8005cf4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f8e3 	bl	8005ea2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cdc:	e00a      	b.n	8005cf4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f8df 	bl	8005ea2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce4:	e006      	b.n	8005cf4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f8db 	bl	8005ea2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005cf2:	e0c3      	b.n	8005e7c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf4:	bf00      	nop
    return;
 8005cf6:	e0c1      	b.n	8005e7c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	f040 80a1 	bne.w	8005e44 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d04:	f003 0310 	and.w	r3, r3, #16
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 809b 	beq.w	8005e44 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005d0e:	6a3b      	ldr	r3, [r7, #32]
 8005d10:	f003 0310 	and.w	r3, r3, #16
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f000 8095 	beq.w	8005e44 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	60fb      	str	r3, [r7, #12]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	60fb      	str	r3, [r7, #12]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	60fb      	str	r3, [r7, #12]
 8005d2e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d04e      	beq.n	8005ddc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005d48:	8a3b      	ldrh	r3, [r7, #16]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f000 8098 	beq.w	8005e80 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d54:	8a3a      	ldrh	r2, [r7, #16]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	f080 8092 	bcs.w	8005e80 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	8a3a      	ldrh	r2, [r7, #16]
 8005d60:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	2b20      	cmp	r3, #32
 8005d6a:	d02b      	beq.n	8005dc4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68da      	ldr	r2, [r3, #12]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d7a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	695a      	ldr	r2, [r3, #20]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f022 0201 	bic.w	r2, r2, #1
 8005d8a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	695a      	ldr	r2, [r3, #20]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d9a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2220      	movs	r2, #32
 8005da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68da      	ldr	r2, [r3, #12]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f022 0210 	bic.w	r2, r2, #16
 8005db8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fc f9b7 	bl	8002132 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 f86d 	bl	8005eb4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005dda:	e051      	b.n	8005e80 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d047      	beq.n	8005e84 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005df4:	8a7b      	ldrh	r3, [r7, #18]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d044      	beq.n	8005e84 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68da      	ldr	r2, [r3, #12]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005e08:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	695a      	ldr	r2, [r3, #20]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 0201 	bic.w	r2, r2, #1
 8005e18:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68da      	ldr	r2, [r3, #12]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f022 0210 	bic.w	r2, r2, #16
 8005e36:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e38:	8a7b      	ldrh	r3, [r7, #18]
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f839 	bl	8005eb4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005e42:	e01f      	b.n	8005e84 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d008      	beq.n	8005e60 <HAL_UART_IRQHandler+0x324>
 8005e4e:	6a3b      	ldr	r3, [r7, #32]
 8005e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d003      	beq.n	8005e60 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 f8af 	bl	8005fbc <UART_Transmit_IT>
    return;
 8005e5e:	e012      	b.n	8005e86 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00d      	beq.n	8005e86 <HAL_UART_IRQHandler+0x34a>
 8005e6a:	6a3b      	ldr	r3, [r7, #32]
 8005e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d008      	beq.n	8005e86 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 f8f0 	bl	800605a <UART_EndTransmit_IT>
    return;
 8005e7a:	e004      	b.n	8005e86 <HAL_UART_IRQHandler+0x34a>
    return;
 8005e7c:	bf00      	nop
 8005e7e:	e002      	b.n	8005e86 <HAL_UART_IRQHandler+0x34a>
      return;
 8005e80:	bf00      	nop
 8005e82:	e000      	b.n	8005e86 <HAL_UART_IRQHandler+0x34a>
      return;
 8005e84:	bf00      	nop
  }
}
 8005e86:	3728      	adds	r7, #40	; 0x28
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	08005f95 	.word	0x08005f95

08005e90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bc80      	pop	{r7}
 8005ea0:	4770      	bx	lr

08005ea2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	b083      	sub	sp, #12
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005eaa:	bf00      	nop
 8005eac:	370c      	adds	r7, #12
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bc80      	pop	{r7}
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bc80      	pop	{r7}
 8005ec8:	4770      	bx	lr

08005eca <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b085      	sub	sp, #20
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	60f8      	str	r0, [r7, #12]
 8005ed2:	60b9      	str	r1, [r7, #8]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	88fa      	ldrh	r2, [r7, #6]
 8005ee2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	88fa      	ldrh	r2, [r7, #6]
 8005ee8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2222      	movs	r2, #34	; 0x22
 8005ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68da      	ldr	r2, [r3, #12]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f0e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	695a      	ldr	r2, [r3, #20]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f042 0201 	orr.w	r2, r2, #1
 8005f1e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f042 0220 	orr.w	r2, r2, #32
 8005f2e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3714      	adds	r7, #20
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bc80      	pop	{r7}
 8005f3a:	4770      	bx	lr

08005f3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68da      	ldr	r2, [r3, #12]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005f52:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	695a      	ldr	r2, [r3, #20]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f022 0201 	bic.w	r2, r2, #1
 8005f62:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d107      	bne.n	8005f7c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68da      	ldr	r2, [r3, #12]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f022 0210 	bic.w	r2, r2, #16
 8005f7a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f8a:	bf00      	nop
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bc80      	pop	{r7}
 8005f92:	4770      	bx	lr

08005f94 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f7ff ff77 	bl	8005ea2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fb4:	bf00      	nop
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b21      	cmp	r3, #33	; 0x21
 8005fce:	d13e      	bne.n	800604e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fd8:	d114      	bne.n	8006004 <UART_Transmit_IT+0x48>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d110      	bne.n	8006004 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
 8005fe6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	881b      	ldrh	r3, [r3, #0]
 8005fec:	461a      	mov	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ff6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	1c9a      	adds	r2, r3, #2
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	621a      	str	r2, [r3, #32]
 8006002:	e008      	b.n	8006016 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a1b      	ldr	r3, [r3, #32]
 8006008:	1c59      	adds	r1, r3, #1
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	6211      	str	r1, [r2, #32]
 800600e:	781a      	ldrb	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800601a:	b29b      	uxth	r3, r3
 800601c:	3b01      	subs	r3, #1
 800601e:	b29b      	uxth	r3, r3
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	4619      	mov	r1, r3
 8006024:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10f      	bne.n	800604a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68da      	ldr	r2, [r3, #12]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006038:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68da      	ldr	r2, [r3, #12]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006048:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800604a:	2300      	movs	r3, #0
 800604c:	e000      	b.n	8006050 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800604e:	2302      	movs	r3, #2
  }
}
 8006050:	4618      	mov	r0, r3
 8006052:	3714      	adds	r7, #20
 8006054:	46bd      	mov	sp, r7
 8006056:	bc80      	pop	{r7}
 8006058:	4770      	bx	lr

0800605a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800605a:	b580      	push	{r7, lr}
 800605c:	b082      	sub	sp, #8
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68da      	ldr	r2, [r3, #12]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006070:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2220      	movs	r2, #32
 8006076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7ff ff08 	bl	8005e90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3708      	adds	r7, #8
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b086      	sub	sp, #24
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b22      	cmp	r3, #34	; 0x22
 800609c:	f040 8099 	bne.w	80061d2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060a8:	d117      	bne.n	80060da <UART_Receive_IT+0x50>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d113      	bne.n	80060da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80060b2:	2300      	movs	r3, #0
 80060b4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ba:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d2:	1c9a      	adds	r2, r3, #2
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	629a      	str	r2, [r3, #40]	; 0x28
 80060d8:	e026      	b.n	8006128 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060de:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80060e0:	2300      	movs	r3, #0
 80060e2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ec:	d007      	beq.n	80060fe <UART_Receive_IT+0x74>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10a      	bne.n	800610c <UART_Receive_IT+0x82>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d106      	bne.n	800610c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	b2da      	uxtb	r2, r3
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	701a      	strb	r2, [r3, #0]
 800610a:	e008      	b.n	800611e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	b2db      	uxtb	r3, r3
 8006114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006118:	b2da      	uxtb	r2, r3
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006122:	1c5a      	adds	r2, r3, #1
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800612c:	b29b      	uxth	r3, r3
 800612e:	3b01      	subs	r3, #1
 8006130:	b29b      	uxth	r3, r3
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	4619      	mov	r1, r3
 8006136:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006138:	2b00      	cmp	r3, #0
 800613a:	d148      	bne.n	80061ce <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68da      	ldr	r2, [r3, #12]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f022 0220 	bic.w	r2, r2, #32
 800614a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68da      	ldr	r2, [r3, #12]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800615a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	695a      	ldr	r2, [r3, #20]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f022 0201 	bic.w	r2, r2, #1
 800616a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2220      	movs	r2, #32
 8006170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006178:	2b01      	cmp	r3, #1
 800617a:	d123      	bne.n	80061c4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68da      	ldr	r2, [r3, #12]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f022 0210 	bic.w	r2, r2, #16
 8006190:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0310 	and.w	r3, r3, #16
 800619c:	2b10      	cmp	r3, #16
 800619e:	d10a      	bne.n	80061b6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061a0:	2300      	movs	r3, #0
 80061a2:	60fb      	str	r3, [r7, #12]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	60fb      	str	r3, [r7, #12]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	60fb      	str	r3, [r7, #12]
 80061b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061ba:	4619      	mov	r1, r3
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f7ff fe79 	bl	8005eb4 <HAL_UARTEx_RxEventCallback>
 80061c2:	e002      	b.n	80061ca <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f7fb fc1d 	bl	8001a04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80061ca:	2300      	movs	r3, #0
 80061cc:	e002      	b.n	80061d4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80061ce:	2300      	movs	r3, #0
 80061d0:	e000      	b.n	80061d4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80061d2:	2302      	movs	r3, #2
  }
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3718      	adds	r7, #24
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68da      	ldr	r2, [r3, #12]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	430a      	orrs	r2, r1
 80061f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	689a      	ldr	r2, [r3, #8]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	431a      	orrs	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	4313      	orrs	r3, r2
 800620a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006216:	f023 030c 	bic.w	r3, r3, #12
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	6812      	ldr	r2, [r2, #0]
 800621e:	68b9      	ldr	r1, [r7, #8]
 8006220:	430b      	orrs	r3, r1
 8006222:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	699a      	ldr	r2, [r3, #24]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	430a      	orrs	r2, r1
 8006238:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a2c      	ldr	r2, [pc, #176]	; (80062f0 <UART_SetConfig+0x114>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d103      	bne.n	800624c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006244:	f7fe fccc 	bl	8004be0 <HAL_RCC_GetPCLK2Freq>
 8006248:	60f8      	str	r0, [r7, #12]
 800624a:	e002      	b.n	8006252 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800624c:	f7fe fcb4 	bl	8004bb8 <HAL_RCC_GetPCLK1Freq>
 8006250:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	4613      	mov	r3, r2
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	4413      	add	r3, r2
 800625a:	009a      	lsls	r2, r3, #2
 800625c:	441a      	add	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	fbb2 f3f3 	udiv	r3, r2, r3
 8006268:	4a22      	ldr	r2, [pc, #136]	; (80062f4 <UART_SetConfig+0x118>)
 800626a:	fba2 2303 	umull	r2, r3, r2, r3
 800626e:	095b      	lsrs	r3, r3, #5
 8006270:	0119      	lsls	r1, r3, #4
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	4613      	mov	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	009a      	lsls	r2, r3, #2
 800627c:	441a      	add	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	fbb2 f2f3 	udiv	r2, r2, r3
 8006288:	4b1a      	ldr	r3, [pc, #104]	; (80062f4 <UART_SetConfig+0x118>)
 800628a:	fba3 0302 	umull	r0, r3, r3, r2
 800628e:	095b      	lsrs	r3, r3, #5
 8006290:	2064      	movs	r0, #100	; 0x64
 8006292:	fb00 f303 	mul.w	r3, r0, r3
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	011b      	lsls	r3, r3, #4
 800629a:	3332      	adds	r3, #50	; 0x32
 800629c:	4a15      	ldr	r2, [pc, #84]	; (80062f4 <UART_SetConfig+0x118>)
 800629e:	fba2 2303 	umull	r2, r3, r2, r3
 80062a2:	095b      	lsrs	r3, r3, #5
 80062a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062a8:	4419      	add	r1, r3
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	4613      	mov	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	4413      	add	r3, r2
 80062b2:	009a      	lsls	r2, r3, #2
 80062b4:	441a      	add	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80062c0:	4b0c      	ldr	r3, [pc, #48]	; (80062f4 <UART_SetConfig+0x118>)
 80062c2:	fba3 0302 	umull	r0, r3, r3, r2
 80062c6:	095b      	lsrs	r3, r3, #5
 80062c8:	2064      	movs	r0, #100	; 0x64
 80062ca:	fb00 f303 	mul.w	r3, r0, r3
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	011b      	lsls	r3, r3, #4
 80062d2:	3332      	adds	r3, #50	; 0x32
 80062d4:	4a07      	ldr	r2, [pc, #28]	; (80062f4 <UART_SetConfig+0x118>)
 80062d6:	fba2 2303 	umull	r2, r3, r2, r3
 80062da:	095b      	lsrs	r3, r3, #5
 80062dc:	f003 020f 	and.w	r2, r3, #15
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	440a      	add	r2, r1
 80062e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80062e8:	bf00      	nop
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	40013800 	.word	0x40013800
 80062f4:	51eb851f 	.word	0x51eb851f

080062f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80062f8:	b084      	sub	sp, #16
 80062fa:	b480      	push	{r7}
 80062fc:	b083      	sub	sp, #12
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
 8006302:	f107 0014 	add.w	r0, r7, #20
 8006306:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	bc80      	pop	{r7}
 8006314:	b004      	add	sp, #16
 8006316:	4770      	bx	lr

08006318 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006328:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800632c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	b29a      	uxth	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3714      	adds	r7, #20
 800633e:	46bd      	mov	sp, r7
 8006340:	bc80      	pop	{r7}
 8006342:	4770      	bx	lr

08006344 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006344:	b480      	push	{r7}
 8006346:	b085      	sub	sp, #20
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800634c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006350:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006358:	b29a      	uxth	r2, r3
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	b29b      	uxth	r3, r3
 800635e:	43db      	mvns	r3, r3
 8006360:	b29b      	uxth	r3, r3
 8006362:	4013      	ands	r3, r2
 8006364:	b29a      	uxth	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	bc80      	pop	{r7}
 8006376:	4770      	bx	lr

08006378 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	460b      	mov	r3, r1
 8006382:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	bc80      	pop	{r7}
 800638e:	4770      	bx	lr

08006390 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006390:	b084      	sub	sp, #16
 8006392:	b480      	push	{r7}
 8006394:	b083      	sub	sp, #12
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	f107 0014 	add.w	r0, r7, #20
 800639e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bc80      	pop	{r7}
 80063cc:	b004      	add	sp, #16
 80063ce:	4770      	bx	lr

080063d0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b09b      	sub	sp, #108	; 0x6c
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80063da:	2300      	movs	r3, #0
 80063dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	4413      	add	r3, r2
 80063ea:	881b      	ldrh	r3, [r3, #0]
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80063f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	78db      	ldrb	r3, [r3, #3]
 80063fe:	2b03      	cmp	r3, #3
 8006400:	d81f      	bhi.n	8006442 <USB_ActivateEndpoint+0x72>
 8006402:	a201      	add	r2, pc, #4	; (adr r2, 8006408 <USB_ActivateEndpoint+0x38>)
 8006404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006408:	08006419 	.word	0x08006419
 800640c:	08006435 	.word	0x08006435
 8006410:	0800644b 	.word	0x0800644b
 8006414:	08006427 	.word	0x08006427
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006418:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800641c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006420:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006424:	e012      	b.n	800644c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006426:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800642a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800642e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006432:	e00b      	b.n	800644c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006434:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006438:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800643c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006440:	e004      	b.n	800644c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006448:	e000      	b.n	800644c <USB_ActivateEndpoint+0x7c>
      break;
 800644a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	441a      	add	r2, r3
 8006456:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800645a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800645e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800646a:	b29b      	uxth	r3, r3
 800646c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4413      	add	r3, r2
 8006478:	881b      	ldrh	r3, [r3, #0]
 800647a:	b29b      	uxth	r3, r3
 800647c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006484:	b29a      	uxth	r2, r3
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	b29b      	uxth	r3, r3
 800648c:	4313      	orrs	r3, r2
 800648e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	441a      	add	r2, r3
 800649c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80064a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	7b1b      	ldrb	r3, [r3, #12]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f040 8149 	bne.w	8006750 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	785b      	ldrb	r3, [r3, #1]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f000 8084 	beq.w	80065d0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	617b      	str	r3, [r7, #20]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	461a      	mov	r2, r3
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	4413      	add	r3, r2
 80064da:	617b      	str	r3, [r7, #20]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	011a      	lsls	r2, r3, #4
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	4413      	add	r3, r2
 80064e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064ea:	613b      	str	r3, [r7, #16]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	88db      	ldrh	r3, [r3, #6]
 80064f0:	085b      	lsrs	r3, r3, #1
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	005b      	lsls	r3, r3, #1
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4413      	add	r3, r2
 8006506:	881b      	ldrh	r3, [r3, #0]
 8006508:	81fb      	strh	r3, [r7, #14]
 800650a:	89fb      	ldrh	r3, [r7, #14]
 800650c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006510:	2b00      	cmp	r3, #0
 8006512:	d01b      	beq.n	800654c <USB_ActivateEndpoint+0x17c>
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	881b      	ldrh	r3, [r3, #0]
 8006520:	b29b      	uxth	r3, r3
 8006522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800652a:	81bb      	strh	r3, [r7, #12]
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	441a      	add	r2, r3
 8006536:	89bb      	ldrh	r3, [r7, #12]
 8006538:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800653c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006540:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006544:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006548:	b29b      	uxth	r3, r3
 800654a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	78db      	ldrb	r3, [r3, #3]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d020      	beq.n	8006596 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4413      	add	r3, r2
 800655e:	881b      	ldrh	r3, [r3, #0]
 8006560:	b29b      	uxth	r3, r3
 8006562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800656a:	813b      	strh	r3, [r7, #8]
 800656c:	893b      	ldrh	r3, [r7, #8]
 800656e:	f083 0320 	eor.w	r3, r3, #32
 8006572:	813b      	strh	r3, [r7, #8]
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	441a      	add	r2, r3
 800657e:	893b      	ldrh	r3, [r7, #8]
 8006580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800658c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006590:	b29b      	uxth	r3, r3
 8006592:	8013      	strh	r3, [r2, #0]
 8006594:	e27f      	b.n	8006a96 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	4413      	add	r3, r2
 80065a0:	881b      	ldrh	r3, [r3, #0]
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065ac:	817b      	strh	r3, [r7, #10]
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	441a      	add	r2, r3
 80065b8:	897b      	ldrh	r3, [r7, #10]
 80065ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	8013      	strh	r3, [r2, #0]
 80065ce:	e262      	b.n	8006a96 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065da:	b29b      	uxth	r3, r3
 80065dc:	461a      	mov	r2, r3
 80065de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e0:	4413      	add	r3, r2
 80065e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	011a      	lsls	r2, r3, #4
 80065ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ec:	4413      	add	r3, r2
 80065ee:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80065f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	88db      	ldrh	r3, [r3, #6]
 80065f8:	085b      	lsrs	r3, r3, #1
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	005b      	lsls	r3, r3, #1
 80065fe:	b29a      	uxth	r2, r3
 8006600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006602:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	627b      	str	r3, [r7, #36]	; 0x24
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800660e:	b29b      	uxth	r3, r3
 8006610:	461a      	mov	r2, r3
 8006612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006614:	4413      	add	r3, r2
 8006616:	627b      	str	r3, [r7, #36]	; 0x24
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	011a      	lsls	r2, r3, #4
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	4413      	add	r3, r2
 8006622:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006626:	623b      	str	r3, [r7, #32]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d112      	bne.n	8006656 <USB_ActivateEndpoint+0x286>
 8006630:	6a3b      	ldr	r3, [r7, #32]
 8006632:	881b      	ldrh	r3, [r3, #0]
 8006634:	b29b      	uxth	r3, r3
 8006636:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800663a:	b29a      	uxth	r2, r3
 800663c:	6a3b      	ldr	r3, [r7, #32]
 800663e:	801a      	strh	r2, [r3, #0]
 8006640:	6a3b      	ldr	r3, [r7, #32]
 8006642:	881b      	ldrh	r3, [r3, #0]
 8006644:	b29b      	uxth	r3, r3
 8006646:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800664a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800664e:	b29a      	uxth	r2, r3
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	801a      	strh	r2, [r3, #0]
 8006654:	e02f      	b.n	80066b6 <USB_ActivateEndpoint+0x2e6>
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	2b3e      	cmp	r3, #62	; 0x3e
 800665c:	d813      	bhi.n	8006686 <USB_ActivateEndpoint+0x2b6>
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	085b      	lsrs	r3, r3, #1
 8006664:	663b      	str	r3, [r7, #96]	; 0x60
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b00      	cmp	r3, #0
 8006670:	d002      	beq.n	8006678 <USB_ActivateEndpoint+0x2a8>
 8006672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006674:	3301      	adds	r3, #1
 8006676:	663b      	str	r3, [r7, #96]	; 0x60
 8006678:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800667a:	b29b      	uxth	r3, r3
 800667c:	029b      	lsls	r3, r3, #10
 800667e:	b29a      	uxth	r2, r3
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	801a      	strh	r2, [r3, #0]
 8006684:	e017      	b.n	80066b6 <USB_ActivateEndpoint+0x2e6>
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	095b      	lsrs	r3, r3, #5
 800668c:	663b      	str	r3, [r7, #96]	; 0x60
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	f003 031f 	and.w	r3, r3, #31
 8006696:	2b00      	cmp	r3, #0
 8006698:	d102      	bne.n	80066a0 <USB_ActivateEndpoint+0x2d0>
 800669a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800669c:	3b01      	subs	r3, #1
 800669e:	663b      	str	r3, [r7, #96]	; 0x60
 80066a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	029b      	lsls	r3, r3, #10
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	6a3b      	ldr	r3, [r7, #32]
 80066b4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	881b      	ldrh	r3, [r3, #0]
 80066c2:	83fb      	strh	r3, [r7, #30]
 80066c4:	8bfb      	ldrh	r3, [r7, #30]
 80066c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d01b      	beq.n	8006706 <USB_ActivateEndpoint+0x336>
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4413      	add	r3, r2
 80066d8:	881b      	ldrh	r3, [r3, #0]
 80066da:	b29b      	uxth	r3, r3
 80066dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066e4:	83bb      	strh	r3, [r7, #28]
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	441a      	add	r2, r3
 80066f0:	8bbb      	ldrh	r3, [r7, #28]
 80066f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80066fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006702:	b29b      	uxth	r3, r3
 8006704:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	4413      	add	r3, r2
 8006710:	881b      	ldrh	r3, [r3, #0]
 8006712:	b29b      	uxth	r3, r3
 8006714:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800671c:	837b      	strh	r3, [r7, #26]
 800671e:	8b7b      	ldrh	r3, [r7, #26]
 8006720:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006724:	837b      	strh	r3, [r7, #26]
 8006726:	8b7b      	ldrh	r3, [r7, #26]
 8006728:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800672c:	837b      	strh	r3, [r7, #26]
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	441a      	add	r2, r3
 8006738:	8b7b      	ldrh	r3, [r7, #26]
 800673a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800673e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006742:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800674a:	b29b      	uxth	r3, r3
 800674c:	8013      	strh	r3, [r2, #0]
 800674e:	e1a2      	b.n	8006a96 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	881b      	ldrh	r3, [r3, #0]
 800675c:	b29b      	uxth	r3, r3
 800675e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006766:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	441a      	add	r2, r3
 8006774:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800677c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006780:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006788:	b29b      	uxth	r3, r3
 800678a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006796:	b29b      	uxth	r3, r3
 8006798:	461a      	mov	r2, r3
 800679a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800679c:	4413      	add	r3, r2
 800679e:	65bb      	str	r3, [r7, #88]	; 0x58
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	011a      	lsls	r2, r3, #4
 80067a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067ae:	657b      	str	r3, [r7, #84]	; 0x54
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	891b      	ldrh	r3, [r3, #8]
 80067b4:	085b      	lsrs	r3, r3, #1
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	005b      	lsls	r3, r3, #1
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067be:	801a      	strh	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	653b      	str	r3, [r7, #80]	; 0x50
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	461a      	mov	r2, r3
 80067ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067d0:	4413      	add	r3, r2
 80067d2:	653b      	str	r3, [r7, #80]	; 0x50
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	011a      	lsls	r2, r3, #4
 80067da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067dc:	4413      	add	r3, r2
 80067de:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80067e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	895b      	ldrh	r3, [r3, #10]
 80067e8:	085b      	lsrs	r3, r3, #1
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	005b      	lsls	r3, r3, #1
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067f2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	785b      	ldrb	r3, [r3, #1]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f040 8091 	bne.w	8006920 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	4413      	add	r3, r2
 8006808:	881b      	ldrh	r3, [r3, #0]
 800680a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800680c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800680e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d01b      	beq.n	800684e <USB_ActivateEndpoint+0x47e>
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4413      	add	r3, r2
 8006820:	881b      	ldrh	r3, [r3, #0]
 8006822:	b29b      	uxth	r3, r3
 8006824:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800682c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800682e:	687a      	ldr	r2, [r7, #4]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	441a      	add	r2, r3
 8006838:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800683a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800683e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006842:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800684a:	b29b      	uxth	r3, r3
 800684c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	4413      	add	r3, r2
 8006858:	881b      	ldrh	r3, [r3, #0]
 800685a:	873b      	strh	r3, [r7, #56]	; 0x38
 800685c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800685e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006862:	2b00      	cmp	r3, #0
 8006864:	d01b      	beq.n	800689e <USB_ActivateEndpoint+0x4ce>
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	4413      	add	r3, r2
 8006870:	881b      	ldrh	r3, [r3, #0]
 8006872:	b29b      	uxth	r3, r3
 8006874:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800687c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	441a      	add	r2, r3
 8006888:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800688a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800688e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006896:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800689a:	b29b      	uxth	r3, r3
 800689c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	4413      	add	r3, r2
 80068a8:	881b      	ldrh	r3, [r3, #0]
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80068b6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80068b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068bc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80068be:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80068c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80068c4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	441a      	add	r2, r3
 80068d0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80068d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	881b      	ldrh	r3, [r3, #0]
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068fc:	867b      	strh	r3, [r7, #50]	; 0x32
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	441a      	add	r2, r3
 8006908:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800690a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800690e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800691a:	b29b      	uxth	r3, r3
 800691c:	8013      	strh	r3, [r2, #0]
 800691e:	e0ba      	b.n	8006a96 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	881b      	ldrh	r3, [r3, #0]
 800692c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006930:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006934:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006938:	2b00      	cmp	r3, #0
 800693a:	d01d      	beq.n	8006978 <USB_ActivateEndpoint+0x5a8>
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	b29b      	uxth	r3, r3
 800694a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800694e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006952:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	441a      	add	r2, r3
 8006960:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006964:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006968:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800696c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006974:	b29b      	uxth	r3, r3
 8006976:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	881b      	ldrh	r3, [r3, #0]
 8006984:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006988:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800698c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006990:	2b00      	cmp	r3, #0
 8006992:	d01d      	beq.n	80069d0 <USB_ActivateEndpoint+0x600>
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4413      	add	r3, r2
 800699e:	881b      	ldrh	r3, [r3, #0]
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069aa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	441a      	add	r2, r3
 80069b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80069bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	78db      	ldrb	r3, [r3, #3]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d024      	beq.n	8006a22 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	881b      	ldrh	r3, [r3, #0]
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069ee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80069f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80069f6:	f083 0320 	eor.w	r3, r3, #32
 80069fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	441a      	add	r2, r3
 8006a08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006a0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	8013      	strh	r3, [r2, #0]
 8006a20:	e01d      	b.n	8006a5e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	881b      	ldrh	r3, [r3, #0]
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a38:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	441a      	add	r2, r3
 8006a46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	4413      	add	r3, r2
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a74:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	441a      	add	r2, r3
 8006a80:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006a96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	376c      	adds	r7, #108	; 0x6c
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bc80      	pop	{r7}
 8006aa2:	4770      	bx	lr

08006aa4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b08d      	sub	sp, #52	; 0x34
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	7b1b      	ldrb	r3, [r3, #12]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f040 808e 	bne.w	8006bd4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	785b      	ldrb	r3, [r3, #1]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d044      	beq.n	8006b4a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4413      	add	r3, r2
 8006aca:	881b      	ldrh	r3, [r3, #0]
 8006acc:	81bb      	strh	r3, [r7, #12]
 8006ace:	89bb      	ldrh	r3, [r7, #12]
 8006ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d01b      	beq.n	8006b10 <USB_DeactivateEndpoint+0x6c>
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4413      	add	r3, r2
 8006ae2:	881b      	ldrh	r3, [r3, #0]
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aee:	817b      	strh	r3, [r7, #10]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	441a      	add	r2, r3
 8006afa:	897b      	ldrh	r3, [r7, #10]
 8006afc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4413      	add	r3, r2
 8006b1a:	881b      	ldrh	r3, [r3, #0]
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b26:	813b      	strh	r3, [r7, #8]
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	441a      	add	r2, r3
 8006b32:	893b      	ldrh	r3, [r7, #8]
 8006b34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	8013      	strh	r3, [r2, #0]
 8006b48:	e192      	b.n	8006e70 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4413      	add	r3, r2
 8006b54:	881b      	ldrh	r3, [r3, #0]
 8006b56:	827b      	strh	r3, [r7, #18]
 8006b58:	8a7b      	ldrh	r3, [r7, #18]
 8006b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d01b      	beq.n	8006b9a <USB_DeactivateEndpoint+0xf6>
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	4413      	add	r3, r2
 8006b6c:	881b      	ldrh	r3, [r3, #0]
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b78:	823b      	strh	r3, [r7, #16]
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	441a      	add	r2, r3
 8006b84:	8a3b      	ldrh	r3, [r7, #16]
 8006b86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4413      	add	r3, r2
 8006ba4:	881b      	ldrh	r3, [r3, #0]
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb0:	81fb      	strh	r3, [r7, #14]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	441a      	add	r2, r3
 8006bbc:	89fb      	ldrh	r3, [r7, #14]
 8006bbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	8013      	strh	r3, [r2, #0]
 8006bd2:	e14d      	b.n	8006e70 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	785b      	ldrb	r3, [r3, #1]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f040 80a5 	bne.w	8006d28 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4413      	add	r3, r2
 8006be8:	881b      	ldrh	r3, [r3, #0]
 8006bea:	843b      	strh	r3, [r7, #32]
 8006bec:	8c3b      	ldrh	r3, [r7, #32]
 8006bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d01b      	beq.n	8006c2e <USB_DeactivateEndpoint+0x18a>
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	4413      	add	r3, r2
 8006c00:	881b      	ldrh	r3, [r3, #0]
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c0c:	83fb      	strh	r3, [r7, #30]
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	441a      	add	r2, r3
 8006c18:	8bfb      	ldrh	r3, [r7, #30]
 8006c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4413      	add	r3, r2
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	83bb      	strh	r3, [r7, #28]
 8006c3c:	8bbb      	ldrh	r3, [r7, #28]
 8006c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d01b      	beq.n	8006c7e <USB_DeactivateEndpoint+0x1da>
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4413      	add	r3, r2
 8006c50:	881b      	ldrh	r3, [r3, #0]
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c5c:	837b      	strh	r3, [r7, #26]
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	441a      	add	r2, r3
 8006c68:	8b7b      	ldrh	r3, [r7, #26]
 8006c6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c94:	833b      	strh	r3, [r7, #24]
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	441a      	add	r2, r3
 8006ca0:	8b3b      	ldrh	r3, [r7, #24]
 8006ca2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ca6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	4413      	add	r3, r2
 8006cc0:	881b      	ldrh	r3, [r3, #0]
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ccc:	82fb      	strh	r3, [r7, #22]
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	441a      	add	r2, r3
 8006cd8:	8afb      	ldrh	r3, [r7, #22]
 8006cda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ce6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4413      	add	r3, r2
 8006cf8:	881b      	ldrh	r3, [r3, #0]
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d04:	82bb      	strh	r3, [r7, #20]
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	441a      	add	r2, r3
 8006d10:	8abb      	ldrh	r3, [r7, #20]
 8006d12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	8013      	strh	r3, [r2, #0]
 8006d26:	e0a3      	b.n	8006e70 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006d36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d01b      	beq.n	8006d78 <USB_DeactivateEndpoint+0x2d4>
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	4413      	add	r3, r2
 8006d4a:	881b      	ldrh	r3, [r3, #0]
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d56:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	441a      	add	r2, r3
 8006d62:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006d64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006d86:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d01b      	beq.n	8006dc8 <USB_DeactivateEndpoint+0x324>
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	4413      	add	r3, r2
 8006d9a:	881b      	ldrh	r3, [r3, #0]
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da6:	853b      	strh	r3, [r7, #40]	; 0x28
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	441a      	add	r2, r3
 8006db2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006db4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006db8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dc0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	4413      	add	r3, r2
 8006dd2:	881b      	ldrh	r3, [r3, #0]
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dde:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	441a      	add	r2, r3
 8006dea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006dec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006df0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006df4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4413      	add	r3, r2
 8006e0a:	881b      	ldrh	r3, [r3, #0]
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e16:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	441a      	add	r2, r3
 8006e22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	4413      	add	r3, r2
 8006e42:	881b      	ldrh	r3, [r3, #0]
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e4e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	441a      	add	r2, r3
 8006e5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006e5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3734      	adds	r7, #52	; 0x34
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bc80      	pop	{r7}
 8006e7a:	4770      	bx	lr

08006e7c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b0cc      	sub	sp, #304	; 0x130
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e8a:	6018      	str	r0, [r3, #0]
 8006e8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e94:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	785b      	ldrb	r3, [r3, #1]
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	f041 817d 	bne.w	80081a2 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006ea8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	699a      	ldr	r2, [r3, #24]
 8006eb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d908      	bls.n	8006ed6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006ec4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ec8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006ed4:	e007      	b.n	8006ee6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006ed6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	7b1b      	ldrb	r3, [r3, #12]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d152      	bne.n	8006f9c <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006ef6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006efa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6959      	ldr	r1, [r3, #20]
 8006f02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	88da      	ldrh	r2, [r3, #6]
 8006f0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006f18:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006f1c:	6800      	ldr	r0, [r0, #0]
 8006f1e:	f001 ff23 	bl	8008d68 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f26:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006f2a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f2e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006f32:	6812      	ldr	r2, [r2, #0]
 8006f34:	601a      	str	r2, [r3, #0]
 8006f36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	4619      	mov	r1, r3
 8006f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f4c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006f50:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f54:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006f58:	6812      	ldr	r2, [r2, #0]
 8006f5a:	440a      	add	r2, r1
 8006f5c:	601a      	str	r2, [r3, #0]
 8006f5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	011a      	lsls	r2, r3, #4
 8006f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f70:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4413      	add	r3, r2
 8006f78:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006f7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f80:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006f84:	601a      	str	r2, [r3, #0]
 8006f86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f90:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	801a      	strh	r2, [r3, #0]
 8006f98:	f001 b8b5 	b.w	8008106 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	78db      	ldrb	r3, [r3, #3]
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	f040 84c6 	bne.w	800793a <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006fae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6a1a      	ldr	r2, [r3, #32]
 8006fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	f240 8443 	bls.w	8007852 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006fcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4413      	add	r3, r2
 8006fe6:	881b      	ldrh	r3, [r3, #0]
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006ff6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ffa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007004:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	441a      	add	r2, r3
 8007010:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800701c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007024:	b29b      	uxth	r3, r3
 8007026:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007028:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800702c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	6a1a      	ldr	r2, [r3, #32]
 8007034:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007038:	1ad2      	subs	r2, r2, r3
 800703a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800703e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800704a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007054:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	4413      	add	r3, r2
 8007060:	881b      	ldrh	r3, [r3, #0]
 8007062:	b29b      	uxth	r3, r3
 8007064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007068:	2b00      	cmp	r3, #0
 800706a:	f000 823e 	beq.w	80074ea <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800706e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007072:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007076:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800707a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800707e:	6812      	ldr	r2, [r2, #0]
 8007080:	601a      	str	r2, [r3, #0]
 8007082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007086:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	785b      	ldrb	r3, [r3, #1]
 800708e:	2b00      	cmp	r3, #0
 8007090:	f040 809a 	bne.w	80071c8 <USB_EPStartXfer+0x34c>
 8007094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800709c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070a0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80070a4:	6812      	ldr	r2, [r2, #0]
 80070a6:	601a      	str	r2, [r3, #0]
 80070a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	4619      	mov	r1, r3
 80070ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070c2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070c6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80070ca:	6812      	ldr	r2, [r2, #0]
 80070cc:	440a      	add	r2, r1
 80070ce:	601a      	str	r2, [r3, #0]
 80070d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	011a      	lsls	r2, r3, #4
 80070de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4413      	add	r3, r2
 80070ea:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80070ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80070f6:	601a      	str	r2, [r3, #0]
 80070f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d122      	bne.n	8007146 <USB_EPStartXfer+0x2ca>
 8007100:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007104:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	881b      	ldrh	r3, [r3, #0]
 800710c:	b29b      	uxth	r3, r3
 800710e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007112:	b29a      	uxth	r2, r3
 8007114:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007118:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	801a      	strh	r2, [r3, #0]
 8007120:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007124:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	881b      	ldrh	r3, [r3, #0]
 800712c:	b29b      	uxth	r3, r3
 800712e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007132:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007136:	b29a      	uxth	r2, r3
 8007138:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800713c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	801a      	strh	r2, [r3, #0]
 8007144:	e079      	b.n	800723a <USB_EPStartXfer+0x3be>
 8007146:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800714a:	2b3e      	cmp	r3, #62	; 0x3e
 800714c:	d81b      	bhi.n	8007186 <USB_EPStartXfer+0x30a>
 800714e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007152:	085b      	lsrs	r3, r3, #1
 8007154:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007158:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800715c:	f003 0301 	and.w	r3, r3, #1
 8007160:	2b00      	cmp	r3, #0
 8007162:	d004      	beq.n	800716e <USB_EPStartXfer+0x2f2>
 8007164:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007168:	3301      	adds	r3, #1
 800716a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800716e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007172:	b29b      	uxth	r3, r3
 8007174:	029b      	lsls	r3, r3, #10
 8007176:	b29a      	uxth	r2, r3
 8007178:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800717c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	801a      	strh	r2, [r3, #0]
 8007184:	e059      	b.n	800723a <USB_EPStartXfer+0x3be>
 8007186:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800718a:	095b      	lsrs	r3, r3, #5
 800718c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007190:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007194:	f003 031f 	and.w	r3, r3, #31
 8007198:	2b00      	cmp	r3, #0
 800719a:	d104      	bne.n	80071a6 <USB_EPStartXfer+0x32a>
 800719c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071a0:	3b01      	subs	r3, #1
 80071a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80071a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	029b      	lsls	r3, r3, #10
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	801a      	strh	r2, [r3, #0]
 80071c6:	e038      	b.n	800723a <USB_EPStartXfer+0x3be>
 80071c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	785b      	ldrb	r3, [r3, #1]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d130      	bne.n	800723a <USB_EPStartXfer+0x3be>
 80071d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	4619      	mov	r1, r3
 80071ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ee:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80071f2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80071f6:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80071fa:	6812      	ldr	r2, [r2, #0]
 80071fc:	440a      	add	r2, r1
 80071fe:	601a      	str	r2, [r3, #0]
 8007200:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007204:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	011a      	lsls	r2, r3, #4
 800720e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007212:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4413      	add	r3, r2
 800721a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800721e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007222:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007226:	601a      	str	r2, [r3, #0]
 8007228:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800722c:	b29a      	uxth	r2, r3
 800722e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007232:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800723a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800723e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	895b      	ldrh	r3, [r3, #10]
 8007246:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800724a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800724e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6959      	ldr	r1, [r3, #20]
 8007256:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800725a:	b29b      	uxth	r3, r3
 800725c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007260:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007264:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007268:	6800      	ldr	r0, [r0, #0]
 800726a:	f001 fd7d 	bl	8008d68 <USB_WritePMA>
            ep->xfer_buff += len;
 800726e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007272:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	695a      	ldr	r2, [r3, #20]
 800727a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800727e:	441a      	add	r2, r3
 8007280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007284:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800728c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007290:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	6a1a      	ldr	r2, [r3, #32]
 8007298:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800729c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d90f      	bls.n	80072c8 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80072a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	6a1a      	ldr	r2, [r3, #32]
 80072b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072b8:	1ad2      	subs	r2, r2, r3
 80072ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	621a      	str	r2, [r3, #32]
 80072c6:	e00e      	b.n	80072e6 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80072c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	6a1b      	ldr	r3, [r3, #32]
 80072d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80072d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2200      	movs	r2, #0
 80072e4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80072e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	785b      	ldrb	r3, [r3, #1]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f040 809a 	bne.w	800742c <USB_EPStartXfer+0x5b0>
 80072f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072fc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007300:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007304:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007308:	6812      	ldr	r2, [r2, #0]
 800730a:	601a      	str	r2, [r3, #0]
 800730c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007310:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800731a:	b29b      	uxth	r3, r3
 800731c:	4619      	mov	r1, r3
 800731e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007322:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007326:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800732a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800732e:	6812      	ldr	r2, [r2, #0]
 8007330:	440a      	add	r2, r1
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007338:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	011a      	lsls	r2, r3, #4
 8007342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007346:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4413      	add	r3, r2
 800734e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007352:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007356:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800735a:	601a      	str	r2, [r3, #0]
 800735c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007360:	2b00      	cmp	r3, #0
 8007362:	d122      	bne.n	80073aa <USB_EPStartXfer+0x52e>
 8007364:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007368:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	881b      	ldrh	r3, [r3, #0]
 8007370:	b29b      	uxth	r3, r3
 8007372:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007376:	b29a      	uxth	r2, r3
 8007378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800737c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	801a      	strh	r2, [r3, #0]
 8007384:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007388:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	881b      	ldrh	r3, [r3, #0]
 8007390:	b29b      	uxth	r3, r3
 8007392:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007396:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800739a:	b29a      	uxth	r2, r3
 800739c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073a0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	801a      	strh	r2, [r3, #0]
 80073a8:	e083      	b.n	80074b2 <USB_EPStartXfer+0x636>
 80073aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073ae:	2b3e      	cmp	r3, #62	; 0x3e
 80073b0:	d81b      	bhi.n	80073ea <USB_EPStartXfer+0x56e>
 80073b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073b6:	085b      	lsrs	r3, r3, #1
 80073b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80073bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073c0:	f003 0301 	and.w	r3, r3, #1
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d004      	beq.n	80073d2 <USB_EPStartXfer+0x556>
 80073c8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80073cc:	3301      	adds	r3, #1
 80073ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80073d2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	029b      	lsls	r3, r3, #10
 80073da:	b29a      	uxth	r2, r3
 80073dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	801a      	strh	r2, [r3, #0]
 80073e8:	e063      	b.n	80074b2 <USB_EPStartXfer+0x636>
 80073ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073ee:	095b      	lsrs	r3, r3, #5
 80073f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80073f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073f8:	f003 031f 	and.w	r3, r3, #31
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d104      	bne.n	800740a <USB_EPStartXfer+0x58e>
 8007400:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007404:	3b01      	subs	r3, #1
 8007406:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800740a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800740e:	b29b      	uxth	r3, r3
 8007410:	029b      	lsls	r3, r3, #10
 8007412:	b29b      	uxth	r3, r3
 8007414:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007418:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800741c:	b29a      	uxth	r2, r3
 800741e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007422:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	801a      	strh	r2, [r3, #0]
 800742a:	e042      	b.n	80074b2 <USB_EPStartXfer+0x636>
 800742c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007430:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	785b      	ldrb	r3, [r3, #1]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d13a      	bne.n	80074b2 <USB_EPStartXfer+0x636>
 800743c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007440:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007444:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007448:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800744c:	6812      	ldr	r2, [r2, #0]
 800744e:	601a      	str	r2, [r3, #0]
 8007450:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007454:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800745e:	b29b      	uxth	r3, r3
 8007460:	4619      	mov	r1, r3
 8007462:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007466:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800746a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800746e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8007472:	6812      	ldr	r2, [r2, #0]
 8007474:	440a      	add	r2, r1
 8007476:	601a      	str	r2, [r3, #0]
 8007478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800747c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	011a      	lsls	r2, r3, #4
 8007486:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800748a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4413      	add	r3, r2
 8007492:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800749a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800749e:	601a      	str	r2, [r3, #0]
 80074a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80074b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	891b      	ldrh	r3, [r3, #8]
 80074be:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80074c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	6959      	ldr	r1, [r3, #20]
 80074ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80074d8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80074dc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80074e0:	6800      	ldr	r0, [r0, #0]
 80074e2:	f001 fc41 	bl	8008d68 <USB_WritePMA>
 80074e6:	f000 be0e 	b.w	8008106 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80074ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	785b      	ldrb	r3, [r3, #1]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d16d      	bne.n	80075d6 <USB_EPStartXfer+0x75a>
 80074fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	64bb      	str	r3, [r7, #72]	; 0x48
 8007506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800750a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007514:	b29b      	uxth	r3, r3
 8007516:	461a      	mov	r2, r3
 8007518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800751a:	4413      	add	r3, r2
 800751c:	64bb      	str	r3, [r7, #72]	; 0x48
 800751e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007522:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	011a      	lsls	r2, r3, #4
 800752c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800752e:	4413      	add	r3, r2
 8007530:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007534:	647b      	str	r3, [r7, #68]	; 0x44
 8007536:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800753a:	2b00      	cmp	r3, #0
 800753c:	d112      	bne.n	8007564 <USB_EPStartXfer+0x6e8>
 800753e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007540:	881b      	ldrh	r3, [r3, #0]
 8007542:	b29b      	uxth	r3, r3
 8007544:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007548:	b29a      	uxth	r2, r3
 800754a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800754c:	801a      	strh	r2, [r3, #0]
 800754e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007550:	881b      	ldrh	r3, [r3, #0]
 8007552:	b29b      	uxth	r3, r3
 8007554:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007558:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800755c:	b29a      	uxth	r2, r3
 800755e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007560:	801a      	strh	r2, [r3, #0]
 8007562:	e063      	b.n	800762c <USB_EPStartXfer+0x7b0>
 8007564:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007568:	2b3e      	cmp	r3, #62	; 0x3e
 800756a:	d817      	bhi.n	800759c <USB_EPStartXfer+0x720>
 800756c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007570:	085b      	lsrs	r3, r3, #1
 8007572:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007576:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800757a:	f003 0301 	and.w	r3, r3, #1
 800757e:	2b00      	cmp	r3, #0
 8007580:	d004      	beq.n	800758c <USB_EPStartXfer+0x710>
 8007582:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007586:	3301      	adds	r3, #1
 8007588:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800758c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007590:	b29b      	uxth	r3, r3
 8007592:	029b      	lsls	r3, r3, #10
 8007594:	b29a      	uxth	r2, r3
 8007596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007598:	801a      	strh	r2, [r3, #0]
 800759a:	e047      	b.n	800762c <USB_EPStartXfer+0x7b0>
 800759c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075a0:	095b      	lsrs	r3, r3, #5
 80075a2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80075a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075aa:	f003 031f 	and.w	r3, r3, #31
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d104      	bne.n	80075bc <USB_EPStartXfer+0x740>
 80075b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80075b6:	3b01      	subs	r3, #1
 80075b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80075bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	029b      	lsls	r3, r3, #10
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075d2:	801a      	strh	r2, [r3, #0]
 80075d4:	e02a      	b.n	800762c <USB_EPStartXfer+0x7b0>
 80075d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	785b      	ldrb	r3, [r3, #1]
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d122      	bne.n	800762c <USB_EPStartXfer+0x7b0>
 80075e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	653b      	str	r3, [r7, #80]	; 0x50
 80075f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007600:	b29b      	uxth	r3, r3
 8007602:	461a      	mov	r2, r3
 8007604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007606:	4413      	add	r3, r2
 8007608:	653b      	str	r3, [r7, #80]	; 0x50
 800760a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800760e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	011a      	lsls	r2, r3, #4
 8007618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800761a:	4413      	add	r3, r2
 800761c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007620:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007622:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007626:	b29a      	uxth	r2, r3
 8007628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800762a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800762c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007630:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	891b      	ldrh	r3, [r3, #8]
 8007638:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800763c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007640:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	6959      	ldr	r1, [r3, #20]
 8007648:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800764c:	b29b      	uxth	r3, r3
 800764e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007652:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007656:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800765a:	6800      	ldr	r0, [r0, #0]
 800765c:	f001 fb84 	bl	8008d68 <USB_WritePMA>
            ep->xfer_buff += len;
 8007660:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007664:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	695a      	ldr	r2, [r3, #20]
 800766c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007670:	441a      	add	r2, r3
 8007672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007676:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800767e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007682:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	6a1a      	ldr	r2, [r3, #32]
 800768a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800768e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	429a      	cmp	r2, r3
 8007698:	d90f      	bls.n	80076ba <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800769a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800769e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	6a1a      	ldr	r2, [r3, #32]
 80076a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076aa:	1ad2      	subs	r2, r2, r3
 80076ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	621a      	str	r2, [r3, #32]
 80076b8:	e00e      	b.n	80076d8 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80076ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	6a1b      	ldr	r3, [r3, #32]
 80076c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80076ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2200      	movs	r2, #0
 80076d6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80076d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	643b      	str	r3, [r7, #64]	; 0x40
 80076e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	785b      	ldrb	r3, [r3, #1]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d16d      	bne.n	80077d0 <USB_EPStartXfer+0x954>
 80076f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8007700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007704:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800770e:	b29b      	uxth	r3, r3
 8007710:	461a      	mov	r2, r3
 8007712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007714:	4413      	add	r3, r2
 8007716:	63bb      	str	r3, [r7, #56]	; 0x38
 8007718:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800771c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	011a      	lsls	r2, r3, #4
 8007726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007728:	4413      	add	r3, r2
 800772a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800772e:	637b      	str	r3, [r7, #52]	; 0x34
 8007730:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007734:	2b00      	cmp	r3, #0
 8007736:	d112      	bne.n	800775e <USB_EPStartXfer+0x8e2>
 8007738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800773a:	881b      	ldrh	r3, [r3, #0]
 800773c:	b29b      	uxth	r3, r3
 800773e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007742:	b29a      	uxth	r2, r3
 8007744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007746:	801a      	strh	r2, [r3, #0]
 8007748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800774a:	881b      	ldrh	r3, [r3, #0]
 800774c:	b29b      	uxth	r3, r3
 800774e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007752:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007756:	b29a      	uxth	r2, r3
 8007758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800775a:	801a      	strh	r2, [r3, #0]
 800775c:	e05d      	b.n	800781a <USB_EPStartXfer+0x99e>
 800775e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007762:	2b3e      	cmp	r3, #62	; 0x3e
 8007764:	d817      	bhi.n	8007796 <USB_EPStartXfer+0x91a>
 8007766:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800776a:	085b      	lsrs	r3, r3, #1
 800776c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007770:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007774:	f003 0301 	and.w	r3, r3, #1
 8007778:	2b00      	cmp	r3, #0
 800777a:	d004      	beq.n	8007786 <USB_EPStartXfer+0x90a>
 800777c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007780:	3301      	adds	r3, #1
 8007782:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007786:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800778a:	b29b      	uxth	r3, r3
 800778c:	029b      	lsls	r3, r3, #10
 800778e:	b29a      	uxth	r2, r3
 8007790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007792:	801a      	strh	r2, [r3, #0]
 8007794:	e041      	b.n	800781a <USB_EPStartXfer+0x99e>
 8007796:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800779a:	095b      	lsrs	r3, r3, #5
 800779c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80077a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077a4:	f003 031f 	and.w	r3, r3, #31
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d104      	bne.n	80077b6 <USB_EPStartXfer+0x93a>
 80077ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80077b0:	3b01      	subs	r3, #1
 80077b2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80077b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	029b      	lsls	r3, r3, #10
 80077be:	b29b      	uxth	r3, r3
 80077c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077cc:	801a      	strh	r2, [r3, #0]
 80077ce:	e024      	b.n	800781a <USB_EPStartXfer+0x99e>
 80077d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	785b      	ldrb	r3, [r3, #1]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d11c      	bne.n	800781a <USB_EPStartXfer+0x99e>
 80077e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	461a      	mov	r2, r3
 80077f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077f4:	4413      	add	r3, r2
 80077f6:	643b      	str	r3, [r7, #64]	; 0x40
 80077f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	011a      	lsls	r2, r3, #4
 8007806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007808:	4413      	add	r3, r2
 800780a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800780e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007810:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007814:	b29a      	uxth	r2, r3
 8007816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007818:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800781a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800781e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	895b      	ldrh	r3, [r3, #10]
 8007826:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800782a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800782e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6959      	ldr	r1, [r3, #20]
 8007836:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800783a:	b29b      	uxth	r3, r3
 800783c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007840:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007844:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007848:	6800      	ldr	r0, [r0, #0]
 800784a:	f001 fa8d 	bl	8008d68 <USB_WritePMA>
 800784e:	f000 bc5a 	b.w	8008106 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007856:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	6a1b      	ldr	r3, [r3, #32]
 800785e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007862:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007866:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007870:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	4413      	add	r3, r2
 800787c:	881b      	ldrh	r3, [r3, #0]
 800787e:	b29b      	uxth	r3, r3
 8007880:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007888:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800788c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007890:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800789a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	441a      	add	r2, r3
 80078a6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80078aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80078be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078d8:	b29b      	uxth	r3, r3
 80078da:	461a      	mov	r2, r3
 80078dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078de:	4413      	add	r3, r2
 80078e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	011a      	lsls	r2, r3, #4
 80078f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078f2:	4413      	add	r3, r2
 80078f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80078f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80078fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078fe:	b29a      	uxth	r2, r3
 8007900:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007902:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007904:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007908:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	891b      	ldrh	r3, [r3, #8]
 8007910:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007914:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007918:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	6959      	ldr	r1, [r3, #20]
 8007920:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007924:	b29b      	uxth	r3, r3
 8007926:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800792a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800792e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007932:	6800      	ldr	r0, [r0, #0]
 8007934:	f001 fa18 	bl	8008d68 <USB_WritePMA>
 8007938:	e3e5      	b.n	8008106 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800793a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800793e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007948:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	4413      	add	r3, r2
 8007954:	881b      	ldrh	r3, [r3, #0]
 8007956:	b29b      	uxth	r3, r3
 8007958:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800795c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007960:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007964:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007968:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007972:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	441a      	add	r2, r3
 800797e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007982:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007986:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800798a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800798e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007992:	b29b      	uxth	r3, r3
 8007994:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800799a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	6a1a      	ldr	r2, [r3, #32]
 80079a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079a6:	1ad2      	subs	r2, r2, r3
 80079a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80079b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	4413      	add	r3, r2
 80079ce:	881b      	ldrh	r3, [r3, #0]
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f000 81bc 	beq.w	8007d54 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80079dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80079ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	785b      	ldrb	r3, [r3, #1]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d16d      	bne.n	8007ad6 <USB_EPStartXfer+0xc5a>
 80079fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	461a      	mov	r2, r3
 8007a18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a1a:	4413      	add	r3, r2
 8007a1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	011a      	lsls	r2, r3, #4
 8007a2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a2e:	4413      	add	r3, r2
 8007a30:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a34:	677b      	str	r3, [r7, #116]	; 0x74
 8007a36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d112      	bne.n	8007a64 <USB_EPStartXfer+0xbe8>
 8007a3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a40:	881b      	ldrh	r3, [r3, #0]
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a4c:	801a      	strh	r2, [r3, #0]
 8007a4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a50:	881b      	ldrh	r3, [r3, #0]
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a60:	801a      	strh	r2, [r3, #0]
 8007a62:	e060      	b.n	8007b26 <USB_EPStartXfer+0xcaa>
 8007a64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a68:	2b3e      	cmp	r3, #62	; 0x3e
 8007a6a:	d817      	bhi.n	8007a9c <USB_EPStartXfer+0xc20>
 8007a6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a70:	085b      	lsrs	r3, r3, #1
 8007a72:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007a76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a7a:	f003 0301 	and.w	r3, r3, #1
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d004      	beq.n	8007a8c <USB_EPStartXfer+0xc10>
 8007a82:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007a86:	3301      	adds	r3, #1
 8007a88:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007a8c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	029b      	lsls	r3, r3, #10
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a98:	801a      	strh	r2, [r3, #0]
 8007a9a:	e044      	b.n	8007b26 <USB_EPStartXfer+0xcaa>
 8007a9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aa0:	095b      	lsrs	r3, r3, #5
 8007aa2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007aa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aaa:	f003 031f 	and.w	r3, r3, #31
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d104      	bne.n	8007abc <USB_EPStartXfer+0xc40>
 8007ab2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007abc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	029b      	lsls	r3, r3, #10
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ad2:	801a      	strh	r2, [r3, #0]
 8007ad4:	e027      	b.n	8007b26 <USB_EPStartXfer+0xcaa>
 8007ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ada:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	785b      	ldrb	r3, [r3, #1]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d11f      	bne.n	8007b26 <USB_EPStartXfer+0xcaa>
 8007ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	461a      	mov	r2, r3
 8007af8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007afc:	4413      	add	r3, r2
 8007afe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	011a      	lsls	r2, r3, #4
 8007b10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b14:	4413      	add	r3, r2
 8007b16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b1a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b24:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	895b      	ldrh	r3, [r3, #10]
 8007b32:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	6959      	ldr	r1, [r3, #20]
 8007b42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007b4c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007b50:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007b54:	6800      	ldr	r0, [r0, #0]
 8007b56:	f001 f907 	bl	8008d68 <USB_WritePMA>
          ep->xfer_buff += len;
 8007b5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	695a      	ldr	r2, [r3, #20]
 8007b66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b6a:	441a      	add	r2, r3
 8007b6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007b78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	6a1a      	ldr	r2, [r3, #32]
 8007b84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d90f      	bls.n	8007bb4 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	6a1a      	ldr	r2, [r3, #32]
 8007ba0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ba4:	1ad2      	subs	r2, r2, r3
 8007ba6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007baa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	621a      	str	r2, [r3, #32]
 8007bb2:	e00e      	b.n	8007bd2 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	6a1b      	ldr	r3, [r3, #32]
 8007bc0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007bd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	f000 8295 	beq.w	8008106 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007bdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007be0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	785b      	ldrb	r3, [r3, #1]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d16d      	bne.n	8007cc8 <USB_EPStartXfer+0xe4c>
 8007bec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bf0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bfc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	461a      	mov	r2, r3
 8007c0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c0c:	4413      	add	r3, r2
 8007c0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	011a      	lsls	r2, r3, #4
 8007c1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c20:	4413      	add	r3, r2
 8007c22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c26:	667b      	str	r3, [r7, #100]	; 0x64
 8007c28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d112      	bne.n	8007c56 <USB_EPStartXfer+0xdda>
 8007c30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c32:	881b      	ldrh	r3, [r3, #0]
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c3e:	801a      	strh	r2, [r3, #0]
 8007c40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c42:	881b      	ldrh	r3, [r3, #0]
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c4e:	b29a      	uxth	r2, r3
 8007c50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c52:	801a      	strh	r2, [r3, #0]
 8007c54:	e063      	b.n	8007d1e <USB_EPStartXfer+0xea2>
 8007c56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c5a:	2b3e      	cmp	r3, #62	; 0x3e
 8007c5c:	d817      	bhi.n	8007c8e <USB_EPStartXfer+0xe12>
 8007c5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c62:	085b      	lsrs	r3, r3, #1
 8007c64:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007c68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c6c:	f003 0301 	and.w	r3, r3, #1
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d004      	beq.n	8007c7e <USB_EPStartXfer+0xe02>
 8007c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c78:	3301      	adds	r3, #1
 8007c7a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	029b      	lsls	r3, r3, #10
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c8a:	801a      	strh	r2, [r3, #0]
 8007c8c:	e047      	b.n	8007d1e <USB_EPStartXfer+0xea2>
 8007c8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c92:	095b      	lsrs	r3, r3, #5
 8007c94:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007c98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c9c:	f003 031f 	and.w	r3, r3, #31
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d104      	bne.n	8007cae <USB_EPStartXfer+0xe32>
 8007ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ca8:	3b01      	subs	r3, #1
 8007caa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	029b      	lsls	r3, r3, #10
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cc0:	b29a      	uxth	r2, r3
 8007cc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cc4:	801a      	strh	r2, [r3, #0]
 8007cc6:	e02a      	b.n	8007d1e <USB_EPStartXfer+0xea2>
 8007cc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ccc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	785b      	ldrb	r3, [r3, #1]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d122      	bne.n	8007d1e <USB_EPStartXfer+0xea2>
 8007cd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	673b      	str	r3, [r7, #112]	; 0x70
 8007ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ce8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cf8:	4413      	add	r3, r2
 8007cfa:	673b      	str	r3, [r7, #112]	; 0x70
 8007cfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	011a      	lsls	r2, r3, #4
 8007d0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d0c:	4413      	add	r3, r2
 8007d0e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d18:	b29a      	uxth	r2, r3
 8007d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d1c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007d1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	891b      	ldrh	r3, [r3, #8]
 8007d2a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	6959      	ldr	r1, [r3, #20]
 8007d3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007d44:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007d48:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007d4c:	6800      	ldr	r0, [r0, #0]
 8007d4e:	f001 f80b 	bl	8008d68 <USB_WritePMA>
 8007d52:	e1d8      	b.n	8008106 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	785b      	ldrb	r3, [r3, #1]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d178      	bne.n	8007e56 <USB_EPStartXfer+0xfda>
 8007d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	461a      	mov	r2, r3
 8007d84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d88:	4413      	add	r3, r2
 8007d8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	011a      	lsls	r2, r3, #4
 8007d9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007da0:	4413      	add	r3, r2
 8007da2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007da6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007daa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d116      	bne.n	8007de0 <USB_EPStartXfer+0xf64>
 8007db2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007db6:	881b      	ldrh	r3, [r3, #0]
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dc4:	801a      	strh	r2, [r3, #0]
 8007dc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dca:	881b      	ldrh	r3, [r3, #0]
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ddc:	801a      	strh	r2, [r3, #0]
 8007dde:	e06b      	b.n	8007eb8 <USB_EPStartXfer+0x103c>
 8007de0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007de4:	2b3e      	cmp	r3, #62	; 0x3e
 8007de6:	d818      	bhi.n	8007e1a <USB_EPStartXfer+0xf9e>
 8007de8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dec:	085b      	lsrs	r3, r3, #1
 8007dee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007df2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007df6:	f003 0301 	and.w	r3, r3, #1
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d004      	beq.n	8007e08 <USB_EPStartXfer+0xf8c>
 8007dfe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e02:	3301      	adds	r3, #1
 8007e04:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007e08:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	029b      	lsls	r3, r3, #10
 8007e10:	b29a      	uxth	r2, r3
 8007e12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e16:	801a      	strh	r2, [r3, #0]
 8007e18:	e04e      	b.n	8007eb8 <USB_EPStartXfer+0x103c>
 8007e1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e1e:	095b      	lsrs	r3, r3, #5
 8007e20:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007e24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e28:	f003 031f 	and.w	r3, r3, #31
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d104      	bne.n	8007e3a <USB_EPStartXfer+0xfbe>
 8007e30:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e34:	3b01      	subs	r3, #1
 8007e36:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007e3a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	029b      	lsls	r3, r3, #10
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e52:	801a      	strh	r2, [r3, #0]
 8007e54:	e030      	b.n	8007eb8 <USB_EPStartXfer+0x103c>
 8007e56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	785b      	ldrb	r3, [r3, #1]
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d128      	bne.n	8007eb8 <USB_EPStartXfer+0x103c>
 8007e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007e74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	461a      	mov	r2, r3
 8007e86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007e8a:	4413      	add	r3, r2
 8007e8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007e90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	011a      	lsls	r2, r3, #4
 8007e9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ea8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007eac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007eb6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ebc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	891b      	ldrh	r3, [r3, #8]
 8007ec4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ec8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ecc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	6959      	ldr	r1, [r3, #20]
 8007ed4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007ede:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007ee2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007ee6:	6800      	ldr	r0, [r0, #0]
 8007ee8:	f000 ff3e 	bl	8008d68 <USB_WritePMA>
          ep->xfer_buff += len;
 8007eec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ef0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	695a      	ldr	r2, [r3, #20]
 8007ef8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007efc:	441a      	add	r2, r3
 8007efe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007f0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	6a1a      	ldr	r2, [r3, #32]
 8007f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d90f      	bls.n	8007f46 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8007f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	6a1a      	ldr	r2, [r3, #32]
 8007f32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f36:	1ad2      	subs	r2, r2, r3
 8007f38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	621a      	str	r2, [r3, #32]
 8007f44:	e00e      	b.n	8007f64 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8007f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	6a1b      	ldr	r3, [r3, #32]
 8007f52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2200      	movs	r2, #0
 8007f62:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007f64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	f000 80cc 	beq.w	8008106 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007f6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	785b      	ldrb	r3, [r3, #1]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d178      	bne.n	800807e <USB_EPStartXfer+0x1202>
 8007f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007f9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	461a      	mov	r2, r3
 8007fac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007fb0:	4413      	add	r3, r2
 8007fb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007fb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	011a      	lsls	r2, r3, #4
 8007fc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007fc8:	4413      	add	r3, r2
 8007fca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007fce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007fd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d116      	bne.n	8008008 <USB_EPStartXfer+0x118c>
 8007fda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007fde:	881b      	ldrh	r3, [r3, #0]
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007fe6:	b29a      	uxth	r2, r3
 8007fe8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007fec:	801a      	strh	r2, [r3, #0]
 8007fee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ff2:	881b      	ldrh	r3, [r3, #0]
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ffe:	b29a      	uxth	r2, r3
 8008000:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008004:	801a      	strh	r2, [r3, #0]
 8008006:	e064      	b.n	80080d2 <USB_EPStartXfer+0x1256>
 8008008:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800800c:	2b3e      	cmp	r3, #62	; 0x3e
 800800e:	d818      	bhi.n	8008042 <USB_EPStartXfer+0x11c6>
 8008010:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008014:	085b      	lsrs	r3, r3, #1
 8008016:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800801a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800801e:	f003 0301 	and.w	r3, r3, #1
 8008022:	2b00      	cmp	r3, #0
 8008024:	d004      	beq.n	8008030 <USB_EPStartXfer+0x11b4>
 8008026:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800802a:	3301      	adds	r3, #1
 800802c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008030:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008034:	b29b      	uxth	r3, r3
 8008036:	029b      	lsls	r3, r3, #10
 8008038:	b29a      	uxth	r2, r3
 800803a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800803e:	801a      	strh	r2, [r3, #0]
 8008040:	e047      	b.n	80080d2 <USB_EPStartXfer+0x1256>
 8008042:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008046:	095b      	lsrs	r3, r3, #5
 8008048:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800804c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008050:	f003 031f 	and.w	r3, r3, #31
 8008054:	2b00      	cmp	r3, #0
 8008056:	d104      	bne.n	8008062 <USB_EPStartXfer+0x11e6>
 8008058:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800805c:	3b01      	subs	r3, #1
 800805e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008062:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008066:	b29b      	uxth	r3, r3
 8008068:	029b      	lsls	r3, r3, #10
 800806a:	b29b      	uxth	r3, r3
 800806c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008070:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008074:	b29a      	uxth	r2, r3
 8008076:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800807a:	801a      	strh	r2, [r3, #0]
 800807c:	e029      	b.n	80080d2 <USB_EPStartXfer+0x1256>
 800807e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008082:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	785b      	ldrb	r3, [r3, #1]
 800808a:	2b01      	cmp	r3, #1
 800808c:	d121      	bne.n	80080d2 <USB_EPStartXfer+0x1256>
 800808e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008092:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800809c:	b29b      	uxth	r3, r3
 800809e:	461a      	mov	r2, r3
 80080a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80080a4:	4413      	add	r3, r2
 80080a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80080aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	011a      	lsls	r2, r3, #4
 80080b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80080bc:	4413      	add	r3, r2
 80080be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80080c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80080c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80080d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	895b      	ldrh	r3, [r3, #10]
 80080de:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80080e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	6959      	ldr	r1, [r3, #20]
 80080ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80080f8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80080fc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008100:	6800      	ldr	r0, [r0, #0]
 8008102:	f000 fe31 	bl	8008d68 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008106:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800810a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008114:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	4413      	add	r3, r2
 8008120:	881b      	ldrh	r3, [r3, #0]
 8008122:	b29b      	uxth	r3, r3
 8008124:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008128:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800812c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008130:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008134:	8013      	strh	r3, [r2, #0]
 8008136:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800813a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800813e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008142:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008146:	8812      	ldrh	r2, [r2, #0]
 8008148:	f082 0210 	eor.w	r2, r2, #16
 800814c:	801a      	strh	r2, [r3, #0]
 800814e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008152:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008156:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800815a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800815e:	8812      	ldrh	r2, [r2, #0]
 8008160:	f082 0220 	eor.w	r2, r2, #32
 8008164:	801a      	strh	r2, [r3, #0]
 8008166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800816a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008174:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	441a      	add	r2, r3
 8008180:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008184:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008188:	881b      	ldrh	r3, [r3, #0]
 800818a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800818e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800819a:	b29b      	uxth	r3, r3
 800819c:	8013      	strh	r3, [r2, #0]
 800819e:	f000 bc9f 	b.w	8008ae0 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80081a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	7b1b      	ldrb	r3, [r3, #12]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	f040 80ae 	bne.w	8008310 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80081b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	699a      	ldr	r2, [r3, #24]
 80081c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d917      	bls.n	8008200 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80081d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80081e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	699a      	ldr	r2, [r3, #24]
 80081ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081f0:	1ad2      	subs	r2, r2, r3
 80081f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	619a      	str	r2, [r3, #24]
 80081fe:	e00e      	b.n	800821e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8008200:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008204:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	699b      	ldr	r3, [r3, #24]
 800820c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8008210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008214:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2200      	movs	r2, #0
 800821c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800821e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008222:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800822c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008230:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800823a:	b29b      	uxth	r3, r3
 800823c:	461a      	mov	r2, r3
 800823e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008242:	4413      	add	r3, r2
 8008244:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800824c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	011a      	lsls	r2, r3, #4
 8008256:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800825a:	4413      	add	r3, r2
 800825c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008260:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008264:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008268:	2b00      	cmp	r3, #0
 800826a:	d116      	bne.n	800829a <USB_EPStartXfer+0x141e>
 800826c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008270:	881b      	ldrh	r3, [r3, #0]
 8008272:	b29b      	uxth	r3, r3
 8008274:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008278:	b29a      	uxth	r2, r3
 800827a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800827e:	801a      	strh	r2, [r3, #0]
 8008280:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008284:	881b      	ldrh	r3, [r3, #0]
 8008286:	b29b      	uxth	r3, r3
 8008288:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800828c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008290:	b29a      	uxth	r2, r3
 8008292:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008296:	801a      	strh	r2, [r3, #0]
 8008298:	e3e8      	b.n	8008a6c <USB_EPStartXfer+0x1bf0>
 800829a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800829e:	2b3e      	cmp	r3, #62	; 0x3e
 80082a0:	d818      	bhi.n	80082d4 <USB_EPStartXfer+0x1458>
 80082a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082a6:	085b      	lsrs	r3, r3, #1
 80082a8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80082ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082b0:	f003 0301 	and.w	r3, r3, #1
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d004      	beq.n	80082c2 <USB_EPStartXfer+0x1446>
 80082b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80082bc:	3301      	adds	r3, #1
 80082be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80082c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	029b      	lsls	r3, r3, #10
 80082ca:	b29a      	uxth	r2, r3
 80082cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082d0:	801a      	strh	r2, [r3, #0]
 80082d2:	e3cb      	b.n	8008a6c <USB_EPStartXfer+0x1bf0>
 80082d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082d8:	095b      	lsrs	r3, r3, #5
 80082da:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80082de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082e2:	f003 031f 	and.w	r3, r3, #31
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d104      	bne.n	80082f4 <USB_EPStartXfer+0x1478>
 80082ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80082ee:	3b01      	subs	r3, #1
 80082f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80082f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	029b      	lsls	r3, r3, #10
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008302:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008306:	b29a      	uxth	r2, r3
 8008308:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800830c:	801a      	strh	r2, [r3, #0]
 800830e:	e3ad      	b.n	8008a6c <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008310:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008314:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	78db      	ldrb	r3, [r3, #3]
 800831c:	2b02      	cmp	r3, #2
 800831e:	f040 8200 	bne.w	8008722 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008326:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	785b      	ldrb	r3, [r3, #1]
 800832e:	2b00      	cmp	r3, #0
 8008330:	f040 8091 	bne.w	8008456 <USB_EPStartXfer+0x15da>
 8008334:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008338:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008346:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008350:	b29b      	uxth	r3, r3
 8008352:	461a      	mov	r2, r3
 8008354:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008358:	4413      	add	r3, r2
 800835a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800835e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008362:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	011a      	lsls	r2, r3, #4
 800836c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008370:	4413      	add	r3, r2
 8008372:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008376:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800837a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800837e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d116      	bne.n	80083b8 <USB_EPStartXfer+0x153c>
 800838a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800838e:	881b      	ldrh	r3, [r3, #0]
 8008390:	b29b      	uxth	r3, r3
 8008392:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008396:	b29a      	uxth	r2, r3
 8008398:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800839c:	801a      	strh	r2, [r3, #0]
 800839e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083a2:	881b      	ldrh	r3, [r3, #0]
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083ae:	b29a      	uxth	r2, r3
 80083b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083b4:	801a      	strh	r2, [r3, #0]
 80083b6:	e083      	b.n	80084c0 <USB_EPStartXfer+0x1644>
 80083b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	691b      	ldr	r3, [r3, #16]
 80083c4:	2b3e      	cmp	r3, #62	; 0x3e
 80083c6:	d820      	bhi.n	800840a <USB_EPStartXfer+0x158e>
 80083c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	691b      	ldr	r3, [r3, #16]
 80083d4:	085b      	lsrs	r3, r3, #1
 80083d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80083da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	f003 0301 	and.w	r3, r3, #1
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d004      	beq.n	80083f8 <USB_EPStartXfer+0x157c>
 80083ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083f2:	3301      	adds	r3, #1
 80083f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80083f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	029b      	lsls	r3, r3, #10
 8008400:	b29a      	uxth	r2, r3
 8008402:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008406:	801a      	strh	r2, [r3, #0]
 8008408:	e05a      	b.n	80084c0 <USB_EPStartXfer+0x1644>
 800840a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800840e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	095b      	lsrs	r3, r3, #5
 8008418:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800841c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008420:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	f003 031f 	and.w	r3, r3, #31
 800842c:	2b00      	cmp	r3, #0
 800842e:	d104      	bne.n	800843a <USB_EPStartXfer+0x15be>
 8008430:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008434:	3b01      	subs	r3, #1
 8008436:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800843a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800843e:	b29b      	uxth	r3, r3
 8008440:	029b      	lsls	r3, r3, #10
 8008442:	b29b      	uxth	r3, r3
 8008444:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008448:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800844c:	b29a      	uxth	r2, r3
 800844e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008452:	801a      	strh	r2, [r3, #0]
 8008454:	e034      	b.n	80084c0 <USB_EPStartXfer+0x1644>
 8008456:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800845a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	785b      	ldrb	r3, [r3, #1]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d12c      	bne.n	80084c0 <USB_EPStartXfer+0x1644>
 8008466:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800846a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008478:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008482:	b29b      	uxth	r3, r3
 8008484:	461a      	mov	r2, r3
 8008486:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800848a:	4413      	add	r3, r2
 800848c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008494:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	011a      	lsls	r2, r3, #4
 800849e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084a2:	4413      	add	r3, r2
 80084a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80084a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80084ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	b29a      	uxth	r2, r3
 80084ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80084be:	801a      	strh	r2, [r3, #0]
 80084c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80084ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	785b      	ldrb	r3, [r3, #1]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f040 8091 	bne.w	8008602 <USB_EPStartXfer+0x1786>
 80084e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80084ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	461a      	mov	r2, r3
 8008500:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008504:	4413      	add	r3, r2
 8008506:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800850a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800850e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	011a      	lsls	r2, r3, #4
 8008518:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800851c:	4413      	add	r3, r2
 800851e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008522:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008526:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800852a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d116      	bne.n	8008564 <USB_EPStartXfer+0x16e8>
 8008536:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800853a:	881b      	ldrh	r3, [r3, #0]
 800853c:	b29b      	uxth	r3, r3
 800853e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008542:	b29a      	uxth	r2, r3
 8008544:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008548:	801a      	strh	r2, [r3, #0]
 800854a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800854e:	881b      	ldrh	r3, [r3, #0]
 8008550:	b29b      	uxth	r3, r3
 8008552:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008556:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800855a:	b29a      	uxth	r2, r3
 800855c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008560:	801a      	strh	r2, [r3, #0]
 8008562:	e07c      	b.n	800865e <USB_EPStartXfer+0x17e2>
 8008564:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008568:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	2b3e      	cmp	r3, #62	; 0x3e
 8008572:	d820      	bhi.n	80085b6 <USB_EPStartXfer+0x173a>
 8008574:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008578:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	691b      	ldr	r3, [r3, #16]
 8008580:	085b      	lsrs	r3, r3, #1
 8008582:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800858a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	f003 0301 	and.w	r3, r3, #1
 8008596:	2b00      	cmp	r3, #0
 8008598:	d004      	beq.n	80085a4 <USB_EPStartXfer+0x1728>
 800859a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800859e:	3301      	adds	r3, #1
 80085a0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80085a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	029b      	lsls	r3, r3, #10
 80085ac:	b29a      	uxth	r2, r3
 80085ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085b2:	801a      	strh	r2, [r3, #0]
 80085b4:	e053      	b.n	800865e <USB_EPStartXfer+0x17e2>
 80085b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	095b      	lsrs	r3, r3, #5
 80085c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80085c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	691b      	ldr	r3, [r3, #16]
 80085d4:	f003 031f 	and.w	r3, r3, #31
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d104      	bne.n	80085e6 <USB_EPStartXfer+0x176a>
 80085dc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80085e0:	3b01      	subs	r3, #1
 80085e2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80085e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	029b      	lsls	r3, r3, #10
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085fe:	801a      	strh	r2, [r3, #0]
 8008600:	e02d      	b.n	800865e <USB_EPStartXfer+0x17e2>
 8008602:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008606:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	785b      	ldrb	r3, [r3, #1]
 800860e:	2b01      	cmp	r3, #1
 8008610:	d125      	bne.n	800865e <USB_EPStartXfer+0x17e2>
 8008612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008616:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008620:	b29b      	uxth	r3, r3
 8008622:	461a      	mov	r2, r3
 8008624:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008628:	4413      	add	r3, r2
 800862a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800862e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008632:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	011a      	lsls	r2, r3, #4
 800863c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008640:	4413      	add	r3, r2
 8008642:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008646:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800864a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800864e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	b29a      	uxth	r2, r3
 8008658:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800865c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800865e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008662:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	69db      	ldr	r3, [r3, #28]
 800866a:	2b00      	cmp	r3, #0
 800866c:	f000 81fe 	beq.w	8008a6c <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008674:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800867e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	4413      	add	r3, r2
 800868a:	881b      	ldrh	r3, [r3, #0]
 800868c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008690:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008694:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008698:	2b00      	cmp	r3, #0
 800869a:	d005      	beq.n	80086a8 <USB_EPStartXfer+0x182c>
 800869c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80086a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d10d      	bne.n	80086c4 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80086a8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80086ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	f040 81db 	bne.w	8008a6c <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80086b6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80086ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086be:	2b00      	cmp	r3, #0
 80086c0:	f040 81d4 	bne.w	8008a6c <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80086c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	4413      	add	r3, r2
 80086de:	881b      	ldrh	r3, [r3, #0]
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ea:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80086ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	441a      	add	r2, r3
 8008708:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800870c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008710:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008714:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008718:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800871c:	b29b      	uxth	r3, r3
 800871e:	8013      	strh	r3, [r2, #0]
 8008720:	e1a4      	b.n	8008a6c <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008726:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	78db      	ldrb	r3, [r3, #3]
 800872e:	2b01      	cmp	r3, #1
 8008730:	f040 819a 	bne.w	8008a68 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008738:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	699a      	ldr	r2, [r3, #24]
 8008740:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008744:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	691b      	ldr	r3, [r3, #16]
 800874c:	429a      	cmp	r2, r3
 800874e:	d917      	bls.n	8008780 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8008750:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008754:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8008760:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008764:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	699a      	ldr	r2, [r3, #24]
 800876c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008770:	1ad2      	subs	r2, r2, r3
 8008772:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008776:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	619a      	str	r2, [r3, #24]
 800877e:	e00e      	b.n	800879e <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8008780:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008784:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	699b      	ldr	r3, [r3, #24]
 800878c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8008790:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008794:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2200      	movs	r2, #0
 800879c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800879e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	785b      	ldrb	r3, [r3, #1]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d178      	bne.n	80088a0 <USB_EPStartXfer+0x1a24>
 80087ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80087bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	461a      	mov	r2, r3
 80087ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087d2:	4413      	add	r3, r2
 80087d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80087d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	011a      	lsls	r2, r3, #4
 80087e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80087ea:	4413      	add	r3, r2
 80087ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80087f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80087f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d116      	bne.n	800882a <USB_EPStartXfer+0x19ae>
 80087fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008800:	881b      	ldrh	r3, [r3, #0]
 8008802:	b29b      	uxth	r3, r3
 8008804:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008808:	b29a      	uxth	r2, r3
 800880a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800880e:	801a      	strh	r2, [r3, #0]
 8008810:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008814:	881b      	ldrh	r3, [r3, #0]
 8008816:	b29b      	uxth	r3, r3
 8008818:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800881c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008820:	b29a      	uxth	r2, r3
 8008822:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008826:	801a      	strh	r2, [r3, #0]
 8008828:	e06b      	b.n	8008902 <USB_EPStartXfer+0x1a86>
 800882a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800882e:	2b3e      	cmp	r3, #62	; 0x3e
 8008830:	d818      	bhi.n	8008864 <USB_EPStartXfer+0x19e8>
 8008832:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008836:	085b      	lsrs	r3, r3, #1
 8008838:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800883c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008840:	f003 0301 	and.w	r3, r3, #1
 8008844:	2b00      	cmp	r3, #0
 8008846:	d004      	beq.n	8008852 <USB_EPStartXfer+0x19d6>
 8008848:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800884c:	3301      	adds	r3, #1
 800884e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008856:	b29b      	uxth	r3, r3
 8008858:	029b      	lsls	r3, r3, #10
 800885a:	b29a      	uxth	r2, r3
 800885c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008860:	801a      	strh	r2, [r3, #0]
 8008862:	e04e      	b.n	8008902 <USB_EPStartXfer+0x1a86>
 8008864:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008868:	095b      	lsrs	r3, r3, #5
 800886a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800886e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008872:	f003 031f 	and.w	r3, r3, #31
 8008876:	2b00      	cmp	r3, #0
 8008878:	d104      	bne.n	8008884 <USB_EPStartXfer+0x1a08>
 800887a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800887e:	3b01      	subs	r3, #1
 8008880:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008888:	b29b      	uxth	r3, r3
 800888a:	029b      	lsls	r3, r3, #10
 800888c:	b29b      	uxth	r3, r3
 800888e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008892:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008896:	b29a      	uxth	r2, r3
 8008898:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800889c:	801a      	strh	r2, [r3, #0]
 800889e:	e030      	b.n	8008902 <USB_EPStartXfer+0x1a86>
 80088a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	785b      	ldrb	r3, [r3, #1]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d128      	bne.n	8008902 <USB_EPStartXfer+0x1a86>
 80088b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80088be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	461a      	mov	r2, r3
 80088d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088d4:	4413      	add	r3, r2
 80088d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80088da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	011a      	lsls	r2, r3, #4
 80088e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088ec:	4413      	add	r3, r2
 80088ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80088f2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80088f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088fa:	b29a      	uxth	r2, r3
 80088fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008900:	801a      	strh	r2, [r3, #0]
 8008902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008906:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008914:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	785b      	ldrb	r3, [r3, #1]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d178      	bne.n	8008a12 <USB_EPStartXfer+0x1b96>
 8008920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008924:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800892e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008932:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800893c:	b29b      	uxth	r3, r3
 800893e:	461a      	mov	r2, r3
 8008940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008944:	4413      	add	r3, r2
 8008946:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800894a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800894e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	011a      	lsls	r2, r3, #4
 8008958:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800895c:	4413      	add	r3, r2
 800895e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008962:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008966:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800896a:	2b00      	cmp	r3, #0
 800896c:	d116      	bne.n	800899c <USB_EPStartXfer+0x1b20>
 800896e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008972:	881b      	ldrh	r3, [r3, #0]
 8008974:	b29b      	uxth	r3, r3
 8008976:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800897a:	b29a      	uxth	r2, r3
 800897c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008980:	801a      	strh	r2, [r3, #0]
 8008982:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008986:	881b      	ldrh	r3, [r3, #0]
 8008988:	b29b      	uxth	r3, r3
 800898a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800898e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008992:	b29a      	uxth	r2, r3
 8008994:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008998:	801a      	strh	r2, [r3, #0]
 800899a:	e067      	b.n	8008a6c <USB_EPStartXfer+0x1bf0>
 800899c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089a0:	2b3e      	cmp	r3, #62	; 0x3e
 80089a2:	d818      	bhi.n	80089d6 <USB_EPStartXfer+0x1b5a>
 80089a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089a8:	085b      	lsrs	r3, r3, #1
 80089aa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80089ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089b2:	f003 0301 	and.w	r3, r3, #1
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d004      	beq.n	80089c4 <USB_EPStartXfer+0x1b48>
 80089ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089be:	3301      	adds	r3, #1
 80089c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80089c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	029b      	lsls	r3, r3, #10
 80089cc:	b29a      	uxth	r2, r3
 80089ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089d2:	801a      	strh	r2, [r3, #0]
 80089d4:	e04a      	b.n	8008a6c <USB_EPStartXfer+0x1bf0>
 80089d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089da:	095b      	lsrs	r3, r3, #5
 80089dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80089e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089e4:	f003 031f 	and.w	r3, r3, #31
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d104      	bne.n	80089f6 <USB_EPStartXfer+0x1b7a>
 80089ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089f0:	3b01      	subs	r3, #1
 80089f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80089f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	029b      	lsls	r3, r3, #10
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a08:	b29a      	uxth	r2, r3
 8008a0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a0e:	801a      	strh	r2, [r3, #0]
 8008a10:	e02c      	b.n	8008a6c <USB_EPStartXfer+0x1bf0>
 8008a12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	785b      	ldrb	r3, [r3, #1]
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d124      	bne.n	8008a6c <USB_EPStartXfer+0x1bf0>
 8008a22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	461a      	mov	r2, r3
 8008a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a38:	4413      	add	r3, r2
 8008a3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	011a      	lsls	r2, r3, #4
 8008a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a50:	4413      	add	r3, r2
 8008a52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a56:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008a5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a5e:	b29a      	uxth	r2, r3
 8008a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a64:	801a      	strh	r2, [r3, #0]
 8008a66:	e001      	b.n	8008a6c <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e03a      	b.n	8008ae2 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008a6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	4413      	add	r3, r2
 8008a86:	881b      	ldrh	r3, [r3, #0]
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a92:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008a96:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008a9a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008a9e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008aa2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008aa6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008aaa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008aae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ab2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008abc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	441a      	add	r2, r3
 8008ac8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b085      	sub	sp, #20
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	785b      	ldrb	r3, [r3, #1]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d020      	beq.n	8008b40 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	4413      	add	r3, r2
 8008b08:	881b      	ldrh	r3, [r3, #0]
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b14:	81bb      	strh	r3, [r7, #12]
 8008b16:	89bb      	ldrh	r3, [r7, #12]
 8008b18:	f083 0310 	eor.w	r3, r3, #16
 8008b1c:	81bb      	strh	r3, [r7, #12]
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	441a      	add	r2, r3
 8008b28:	89bb      	ldrh	r3, [r7, #12]
 8008b2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	8013      	strh	r3, [r2, #0]
 8008b3e:	e01f      	b.n	8008b80 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	4413      	add	r3, r2
 8008b4a:	881b      	ldrh	r3, [r3, #0]
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b56:	81fb      	strh	r3, [r7, #14]
 8008b58:	89fb      	ldrh	r3, [r7, #14]
 8008b5a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008b5e:	81fb      	strh	r3, [r7, #14]
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	441a      	add	r2, r3
 8008b6a:	89fb      	ldrh	r3, [r7, #14]
 8008b6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3714      	adds	r7, #20
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bc80      	pop	{r7}
 8008b8a:	4770      	bx	lr

08008b8c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b087      	sub	sp, #28
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	7b1b      	ldrb	r3, [r3, #12]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	f040 809d 	bne.w	8008cda <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	785b      	ldrb	r3, [r3, #1]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d04c      	beq.n	8008c42 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	4413      	add	r3, r2
 8008bb2:	881b      	ldrh	r3, [r3, #0]
 8008bb4:	823b      	strh	r3, [r7, #16]
 8008bb6:	8a3b      	ldrh	r3, [r7, #16]
 8008bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d01b      	beq.n	8008bf8 <USB_EPClearStall+0x6c>
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	4413      	add	r3, r2
 8008bca:	881b      	ldrh	r3, [r3, #0]
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bd6:	81fb      	strh	r3, [r7, #14]
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	441a      	add	r2, r3
 8008be2:	89fb      	ldrh	r3, [r7, #14]
 8008be4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008be8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bf0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	78db      	ldrb	r3, [r3, #3]
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d06c      	beq.n	8008cda <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	4413      	add	r3, r2
 8008c0a:	881b      	ldrh	r3, [r3, #0]
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c16:	81bb      	strh	r3, [r7, #12]
 8008c18:	89bb      	ldrh	r3, [r7, #12]
 8008c1a:	f083 0320 	eor.w	r3, r3, #32
 8008c1e:	81bb      	strh	r3, [r7, #12]
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	441a      	add	r2, r3
 8008c2a:	89bb      	ldrh	r3, [r7, #12]
 8008c2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	8013      	strh	r3, [r2, #0]
 8008c40:	e04b      	b.n	8008cda <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	4413      	add	r3, r2
 8008c4c:	881b      	ldrh	r3, [r3, #0]
 8008c4e:	82fb      	strh	r3, [r7, #22]
 8008c50:	8afb      	ldrh	r3, [r7, #22]
 8008c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d01b      	beq.n	8008c92 <USB_EPClearStall+0x106>
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	4413      	add	r3, r2
 8008c64:	881b      	ldrh	r3, [r3, #0]
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c70:	82bb      	strh	r3, [r7, #20]
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	441a      	add	r2, r3
 8008c7c:	8abb      	ldrh	r3, [r7, #20]
 8008c7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	4413      	add	r3, r2
 8008c9c:	881b      	ldrh	r3, [r3, #0]
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ca8:	827b      	strh	r3, [r7, #18]
 8008caa:	8a7b      	ldrh	r3, [r7, #18]
 8008cac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008cb0:	827b      	strh	r3, [r7, #18]
 8008cb2:	8a7b      	ldrh	r3, [r7, #18]
 8008cb4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008cb8:	827b      	strh	r3, [r7, #18]
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	441a      	add	r2, r3
 8008cc4:	8a7b      	ldrh	r3, [r7, #18]
 8008cc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	371c      	adds	r7, #28
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bc80      	pop	{r7}
 8008ce4:	4770      	bx	lr

08008ce6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008ce6:	b480      	push	{r7}
 8008ce8:	b083      	sub	sp, #12
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
 8008cee:	460b      	mov	r3, r1
 8008cf0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008cf2:	78fb      	ldrb	r3, [r7, #3]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d103      	bne.n	8008d00 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2280      	movs	r2, #128	; 0x80
 8008cfc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	370c      	adds	r7, #12
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bc80      	pop	{r7}
 8008d0a:	4770      	bx	lr

08008d0c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008d14:	2300      	movs	r3, #0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	370c      	adds	r7, #12
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bc80      	pop	{r7}
 8008d1e:	4770      	bx	lr

08008d20 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	370c      	adds	r7, #12
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bc80      	pop	{r7}
 8008d32:	4770      	bx	lr

08008d34 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b085      	sub	sp, #20
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008d46:	68fb      	ldr	r3, [r7, #12]
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3714      	adds	r7, #20
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bc80      	pop	{r7}
 8008d50:	4770      	bx	lr

08008d52 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008d52:	b480      	push	{r7}
 8008d54:	b083      	sub	sp, #12
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
 8008d5a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	370c      	adds	r7, #12
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bc80      	pop	{r7}
 8008d66:	4770      	bx	lr

08008d68 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b08d      	sub	sp, #52	; 0x34
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	4611      	mov	r1, r2
 8008d74:	461a      	mov	r2, r3
 8008d76:	460b      	mov	r3, r1
 8008d78:	80fb      	strh	r3, [r7, #6]
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008d7e:	88bb      	ldrh	r3, [r7, #4]
 8008d80:	3301      	adds	r3, #1
 8008d82:	085b      	lsrs	r3, r3, #1
 8008d84:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008d8e:	88fb      	ldrh	r3, [r7, #6]
 8008d90:	005a      	lsls	r2, r3, #1
 8008d92:	69fb      	ldr	r3, [r7, #28]
 8008d94:	4413      	add	r3, r2
 8008d96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d9a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008d9c:	6a3b      	ldr	r3, [r7, #32]
 8008d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008da0:	e01e      	b.n	8008de0 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008daa:	3301      	adds	r3, #1
 8008dac:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	021b      	lsls	r3, r3, #8
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	461a      	mov	r2, r3
 8008dba:	69bb      	ldr	r3, [r7, #24]
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	b29a      	uxth	r2, r3
 8008dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dca:	3302      	adds	r3, #2
 8008dcc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd0:	3302      	adds	r3, #2
 8008dd2:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ddc:	3b01      	subs	r3, #1
 8008dde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d1dd      	bne.n	8008da2 <USB_WritePMA+0x3a>
  }
}
 8008de6:	bf00      	nop
 8008de8:	bf00      	nop
 8008dea:	3734      	adds	r7, #52	; 0x34
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bc80      	pop	{r7}
 8008df0:	4770      	bx	lr

08008df2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008df2:	b480      	push	{r7}
 8008df4:	b08b      	sub	sp, #44	; 0x2c
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	60f8      	str	r0, [r7, #12]
 8008dfa:	60b9      	str	r1, [r7, #8]
 8008dfc:	4611      	mov	r1, r2
 8008dfe:	461a      	mov	r2, r3
 8008e00:	460b      	mov	r3, r1
 8008e02:	80fb      	strh	r3, [r7, #6]
 8008e04:	4613      	mov	r3, r2
 8008e06:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008e08:	88bb      	ldrh	r3, [r7, #4]
 8008e0a:	085b      	lsrs	r3, r3, #1
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008e18:	88fb      	ldrh	r3, [r7, #6]
 8008e1a:	005a      	lsls	r2, r3, #1
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	4413      	add	r3, r2
 8008e20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e24:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	627b      	str	r3, [r7, #36]	; 0x24
 8008e2a:	e01b      	b.n	8008e64 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008e2c:	6a3b      	ldr	r3, [r7, #32]
 8008e2e:	881b      	ldrh	r3, [r3, #0]
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008e34:	6a3b      	ldr	r3, [r7, #32]
 8008e36:	3302      	adds	r3, #2
 8008e38:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	b2da      	uxtb	r2, r3
 8008e3e:	69fb      	ldr	r3, [r7, #28]
 8008e40:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	3301      	adds	r3, #1
 8008e46:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	0a1b      	lsrs	r3, r3, #8
 8008e4c:	b2da      	uxtb	r2, r3
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	3301      	adds	r3, #1
 8008e56:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008e58:	6a3b      	ldr	r3, [r7, #32]
 8008e5a:	3302      	adds	r3, #2
 8008e5c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e60:	3b01      	subs	r3, #1
 8008e62:	627b      	str	r3, [r7, #36]	; 0x24
 8008e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d1e0      	bne.n	8008e2c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008e6a:	88bb      	ldrh	r3, [r7, #4]
 8008e6c:	f003 0301 	and.w	r3, r3, #1
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d007      	beq.n	8008e86 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008e76:	6a3b      	ldr	r3, [r7, #32]
 8008e78:	881b      	ldrh	r3, [r3, #0]
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	b2da      	uxtb	r2, r3
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	701a      	strb	r2, [r3, #0]
  }
}
 8008e86:	bf00      	nop
 8008e88:	372c      	adds	r7, #44	; 0x2c
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bc80      	pop	{r7}
 8008e8e:	4770      	bx	lr

08008e90 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	460b      	mov	r3, r1
 8008e9a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	7c1b      	ldrb	r3, [r3, #16]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d115      	bne.n	8008ed4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008ea8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008eac:	2202      	movs	r2, #2
 8008eae:	2181      	movs	r1, #129	; 0x81
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f001 fea6 	bl	800ac02 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2201      	movs	r2, #1
 8008eba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008ebc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ec0:	2202      	movs	r2, #2
 8008ec2:	2101      	movs	r1, #1
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f001 fe9c 	bl	800ac02 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008ed2:	e012      	b.n	8008efa <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008ed4:	2340      	movs	r3, #64	; 0x40
 8008ed6:	2202      	movs	r2, #2
 8008ed8:	2181      	movs	r1, #129	; 0x81
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f001 fe91 	bl	800ac02 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008ee6:	2340      	movs	r3, #64	; 0x40
 8008ee8:	2202      	movs	r2, #2
 8008eea:	2101      	movs	r1, #1
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f001 fe88 	bl	800ac02 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008efa:	2308      	movs	r3, #8
 8008efc:	2203      	movs	r2, #3
 8008efe:	2182      	movs	r1, #130	; 0x82
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f001 fe7e 	bl	800ac02 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008f0c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008f10:	f001 ff9e 	bl	800ae50 <USBD_static_malloc>
 8008f14:	4602      	mov	r2, r0
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d102      	bne.n	8008f2c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008f26:	2301      	movs	r3, #1
 8008f28:	73fb      	strb	r3, [r7, #15]
 8008f2a:	e026      	b.n	8008f7a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f32:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	7c1b      	ldrb	r3, [r3, #16]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d109      	bne.n	8008f6a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f60:	2101      	movs	r1, #1
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f001 ff3e 	bl	800ade4 <USBD_LL_PrepareReceive>
 8008f68:	e007      	b.n	8008f7a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f70:	2340      	movs	r3, #64	; 0x40
 8008f72:	2101      	movs	r1, #1
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f001 ff35 	bl	800ade4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3710      	adds	r7, #16
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008f90:	2300      	movs	r3, #0
 8008f92:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008f94:	2181      	movs	r1, #129	; 0x81
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f001 fe59 	bl	800ac4e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008fa2:	2101      	movs	r1, #1
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f001 fe52 	bl	800ac4e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008fb2:	2182      	movs	r1, #130	; 0x82
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f001 fe4a 	bl	800ac4e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d00e      	beq.n	8008fe8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f001 ff44 	bl	800ae68 <USBD_static_free>
    pdev->pClassData = NULL;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b086      	sub	sp, #24
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
 8008ffa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009002:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009004:	2300      	movs	r3, #0
 8009006:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009008:	2300      	movs	r3, #0
 800900a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800900c:	2300      	movs	r3, #0
 800900e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009018:	2b00      	cmp	r3, #0
 800901a:	d039      	beq.n	8009090 <USBD_CDC_Setup+0x9e>
 800901c:	2b20      	cmp	r3, #32
 800901e:	d17f      	bne.n	8009120 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	88db      	ldrh	r3, [r3, #6]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d029      	beq.n	800907c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	b25b      	sxtb	r3, r3
 800902e:	2b00      	cmp	r3, #0
 8009030:	da11      	bge.n	8009056 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	683a      	ldr	r2, [r7, #0]
 800903c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800903e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009040:	683a      	ldr	r2, [r7, #0]
 8009042:	88d2      	ldrh	r2, [r2, #6]
 8009044:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009046:	6939      	ldr	r1, [r7, #16]
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	88db      	ldrh	r3, [r3, #6]
 800904c:	461a      	mov	r2, r3
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f001 fa09 	bl	800a466 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009054:	e06b      	b.n	800912e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	785a      	ldrb	r2, [r3, #1]
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	88db      	ldrh	r3, [r3, #6]
 8009064:	b2da      	uxtb	r2, r3
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800906c:	6939      	ldr	r1, [r7, #16]
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	88db      	ldrh	r3, [r3, #6]
 8009072:	461a      	mov	r2, r3
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f001 fa24 	bl	800a4c2 <USBD_CtlPrepareRx>
      break;
 800907a:	e058      	b.n	800912e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	683a      	ldr	r2, [r7, #0]
 8009086:	7850      	ldrb	r0, [r2, #1]
 8009088:	2200      	movs	r2, #0
 800908a:	6839      	ldr	r1, [r7, #0]
 800908c:	4798      	blx	r3
      break;
 800908e:	e04e      	b.n	800912e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	785b      	ldrb	r3, [r3, #1]
 8009094:	2b0b      	cmp	r3, #11
 8009096:	d02e      	beq.n	80090f6 <USBD_CDC_Setup+0x104>
 8009098:	2b0b      	cmp	r3, #11
 800909a:	dc38      	bgt.n	800910e <USBD_CDC_Setup+0x11c>
 800909c:	2b00      	cmp	r3, #0
 800909e:	d002      	beq.n	80090a6 <USBD_CDC_Setup+0xb4>
 80090a0:	2b0a      	cmp	r3, #10
 80090a2:	d014      	beq.n	80090ce <USBD_CDC_Setup+0xdc>
 80090a4:	e033      	b.n	800910e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090ac:	2b03      	cmp	r3, #3
 80090ae:	d107      	bne.n	80090c0 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80090b0:	f107 030c 	add.w	r3, r7, #12
 80090b4:	2202      	movs	r2, #2
 80090b6:	4619      	mov	r1, r3
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f001 f9d4 	bl	800a466 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80090be:	e02e      	b.n	800911e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80090c0:	6839      	ldr	r1, [r7, #0]
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f001 f965 	bl	800a392 <USBD_CtlError>
            ret = USBD_FAIL;
 80090c8:	2302      	movs	r3, #2
 80090ca:	75fb      	strb	r3, [r7, #23]
          break;
 80090cc:	e027      	b.n	800911e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090d4:	2b03      	cmp	r3, #3
 80090d6:	d107      	bne.n	80090e8 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80090d8:	f107 030f 	add.w	r3, r7, #15
 80090dc:	2201      	movs	r2, #1
 80090de:	4619      	mov	r1, r3
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f001 f9c0 	bl	800a466 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80090e6:	e01a      	b.n	800911e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80090e8:	6839      	ldr	r1, [r7, #0]
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f001 f951 	bl	800a392 <USBD_CtlError>
            ret = USBD_FAIL;
 80090f0:	2302      	movs	r3, #2
 80090f2:	75fb      	strb	r3, [r7, #23]
          break;
 80090f4:	e013      	b.n	800911e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090fc:	2b03      	cmp	r3, #3
 80090fe:	d00d      	beq.n	800911c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009100:	6839      	ldr	r1, [r7, #0]
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f001 f945 	bl	800a392 <USBD_CtlError>
            ret = USBD_FAIL;
 8009108:	2302      	movs	r3, #2
 800910a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800910c:	e006      	b.n	800911c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800910e:	6839      	ldr	r1, [r7, #0]
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f001 f93e 	bl	800a392 <USBD_CtlError>
          ret = USBD_FAIL;
 8009116:	2302      	movs	r3, #2
 8009118:	75fb      	strb	r3, [r7, #23]
          break;
 800911a:	e000      	b.n	800911e <USBD_CDC_Setup+0x12c>
          break;
 800911c:	bf00      	nop
      }
      break;
 800911e:	e006      	b.n	800912e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009120:	6839      	ldr	r1, [r7, #0]
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f001 f935 	bl	800a392 <USBD_CtlError>
      ret = USBD_FAIL;
 8009128:	2302      	movs	r3, #2
 800912a:	75fb      	strb	r3, [r7, #23]
      break;
 800912c:	bf00      	nop
  }

  return ret;
 800912e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009130:	4618      	mov	r0, r3
 8009132:	3718      	adds	r7, #24
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	460b      	mov	r3, r1
 8009142:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800914a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009152:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800915a:	2b00      	cmp	r3, #0
 800915c:	d03a      	beq.n	80091d4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800915e:	78fa      	ldrb	r2, [r7, #3]
 8009160:	6879      	ldr	r1, [r7, #4]
 8009162:	4613      	mov	r3, r2
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	4413      	add	r3, r2
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	440b      	add	r3, r1
 800916c:	331c      	adds	r3, #28
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d029      	beq.n	80091c8 <USBD_CDC_DataIn+0x90>
 8009174:	78fa      	ldrb	r2, [r7, #3]
 8009176:	6879      	ldr	r1, [r7, #4]
 8009178:	4613      	mov	r3, r2
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	4413      	add	r3, r2
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	440b      	add	r3, r1
 8009182:	331c      	adds	r3, #28
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	78f9      	ldrb	r1, [r7, #3]
 8009188:	68b8      	ldr	r0, [r7, #8]
 800918a:	460b      	mov	r3, r1
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	440b      	add	r3, r1
 8009190:	00db      	lsls	r3, r3, #3
 8009192:	4403      	add	r3, r0
 8009194:	3338      	adds	r3, #56	; 0x38
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	fbb2 f1f3 	udiv	r1, r2, r3
 800919c:	fb01 f303 	mul.w	r3, r1, r3
 80091a0:	1ad3      	subs	r3, r2, r3
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d110      	bne.n	80091c8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80091a6:	78fa      	ldrb	r2, [r7, #3]
 80091a8:	6879      	ldr	r1, [r7, #4]
 80091aa:	4613      	mov	r3, r2
 80091ac:	009b      	lsls	r3, r3, #2
 80091ae:	4413      	add	r3, r2
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	440b      	add	r3, r1
 80091b4:	331c      	adds	r3, #28
 80091b6:	2200      	movs	r2, #0
 80091b8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80091ba:	78f9      	ldrb	r1, [r7, #3]
 80091bc:	2300      	movs	r3, #0
 80091be:	2200      	movs	r2, #0
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f001 fdec 	bl	800ad9e <USBD_LL_Transmit>
 80091c6:	e003      	b.n	80091d0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2200      	movs	r2, #0
 80091cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80091d0:	2300      	movs	r3, #0
 80091d2:	e000      	b.n	80091d6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80091d4:	2302      	movs	r3, #2
  }
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3710      	adds	r7, #16
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80091de:	b580      	push	{r7, lr}
 80091e0:	b084      	sub	sp, #16
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
 80091e6:	460b      	mov	r3, r1
 80091e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091f0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80091f2:	78fb      	ldrb	r3, [r7, #3]
 80091f4:	4619      	mov	r1, r3
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f001 fe17 	bl	800ae2a <USBD_LL_GetRxDataSize>
 80091fc:	4602      	mov	r2, r0
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800920a:	2b00      	cmp	r3, #0
 800920c:	d00d      	beq.n	800922a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	68fa      	ldr	r2, [r7, #12]
 8009218:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800921c:	68fa      	ldr	r2, [r7, #12]
 800921e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009222:	4611      	mov	r1, r2
 8009224:	4798      	blx	r3

    return USBD_OK;
 8009226:	2300      	movs	r3, #0
 8009228:	e000      	b.n	800922c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800922a:	2302      	movs	r3, #2
  }
}
 800922c:	4618      	mov	r0, r3
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009242:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800924a:	2b00      	cmp	r3, #0
 800924c:	d015      	beq.n	800927a <USBD_CDC_EP0_RxReady+0x46>
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009254:	2bff      	cmp	r3, #255	; 0xff
 8009256:	d010      	beq.n	800927a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009266:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009268:	68fa      	ldr	r2, [r7, #12]
 800926a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800926e:	b292      	uxth	r2, r2
 8009270:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	22ff      	movs	r2, #255	; 0xff
 8009276:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	3710      	adds	r7, #16
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2243      	movs	r2, #67	; 0x43
 8009290:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009292:	4b03      	ldr	r3, [pc, #12]	; (80092a0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009294:	4618      	mov	r0, r3
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	bc80      	pop	{r7}
 800929c:	4770      	bx	lr
 800929e:	bf00      	nop
 80092a0:	20000098 	.word	0x20000098

080092a4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2243      	movs	r2, #67	; 0x43
 80092b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80092b2:	4b03      	ldr	r3, [pc, #12]	; (80092c0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	370c      	adds	r7, #12
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bc80      	pop	{r7}
 80092bc:	4770      	bx	lr
 80092be:	bf00      	nop
 80092c0:	20000054 	.word	0x20000054

080092c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2243      	movs	r2, #67	; 0x43
 80092d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80092d2:	4b03      	ldr	r3, [pc, #12]	; (80092e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	370c      	adds	r7, #12
 80092d8:	46bd      	mov	sp, r7
 80092da:	bc80      	pop	{r7}
 80092dc:	4770      	bx	lr
 80092de:	bf00      	nop
 80092e0:	200000dc 	.word	0x200000dc

080092e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	220a      	movs	r2, #10
 80092f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80092f2:	4b03      	ldr	r3, [pc, #12]	; (8009300 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	370c      	adds	r7, #12
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bc80      	pop	{r7}
 80092fc:	4770      	bx	lr
 80092fe:	bf00      	nop
 8009300:	20000010 	.word	0x20000010

08009304 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009304:	b480      	push	{r7}
 8009306:	b085      	sub	sp, #20
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800930e:	2302      	movs	r3, #2
 8009310:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d005      	beq.n	8009324 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	683a      	ldr	r2, [r7, #0]
 800931c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009320:	2300      	movs	r3, #0
 8009322:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009324:	7bfb      	ldrb	r3, [r7, #15]
}
 8009326:	4618      	mov	r0, r3
 8009328:	3714      	adds	r7, #20
 800932a:	46bd      	mov	sp, r7
 800932c:	bc80      	pop	{r7}
 800932e:	4770      	bx	lr

08009330 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009330:	b480      	push	{r7}
 8009332:	b087      	sub	sp, #28
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	4613      	mov	r3, r2
 800933c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009344:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	68ba      	ldr	r2, [r7, #8]
 800934a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800934e:	88fa      	ldrh	r2, [r7, #6]
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009356:	2300      	movs	r3, #0
}
 8009358:	4618      	mov	r0, r3
 800935a:	371c      	adds	r7, #28
 800935c:	46bd      	mov	sp, r7
 800935e:	bc80      	pop	{r7}
 8009360:	4770      	bx	lr

08009362 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009362:	b480      	push	{r7}
 8009364:	b085      	sub	sp, #20
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
 800936a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009372:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	683a      	ldr	r2, [r7, #0]
 8009378:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800937c:	2300      	movs	r3, #0
}
 800937e:	4618      	mov	r0, r3
 8009380:	3714      	adds	r7, #20
 8009382:	46bd      	mov	sp, r7
 8009384:	bc80      	pop	{r7}
 8009386:	4770      	bx	lr

08009388 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009396:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d01c      	beq.n	80093dc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d115      	bne.n	80093d8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2201      	movs	r2, #1
 80093b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	2181      	movs	r1, #129	; 0x81
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f001 fce5 	bl	800ad9e <USBD_LL_Transmit>

      return USBD_OK;
 80093d4:	2300      	movs	r3, #0
 80093d6:	e002      	b.n	80093de <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80093d8:	2301      	movs	r3, #1
 80093da:	e000      	b.n	80093de <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80093dc:	2302      	movs	r3, #2
  }
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3710      	adds	r7, #16
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b084      	sub	sp, #16
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093f4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d017      	beq.n	8009430 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	7c1b      	ldrb	r3, [r3, #16]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d109      	bne.n	800941c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800940e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009412:	2101      	movs	r1, #1
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f001 fce5 	bl	800ade4 <USBD_LL_PrepareReceive>
 800941a:	e007      	b.n	800942c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009422:	2340      	movs	r3, #64	; 0x40
 8009424:	2101      	movs	r1, #1
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f001 fcdc 	bl	800ade4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800942c:	2300      	movs	r3, #0
 800942e:	e000      	b.n	8009432 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009430:	2302      	movs	r3, #2
  }
}
 8009432:	4618      	mov	r0, r3
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b084      	sub	sp, #16
 800943e:	af00      	add	r7, sp, #0
 8009440:	60f8      	str	r0, [r7, #12]
 8009442:	60b9      	str	r1, [r7, #8]
 8009444:	4613      	mov	r3, r2
 8009446:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d101      	bne.n	8009452 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800944e:	2302      	movs	r3, #2
 8009450:	e01a      	b.n	8009488 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009458:	2b00      	cmp	r3, #0
 800945a:	d003      	beq.n	8009464 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2200      	movs	r2, #0
 8009460:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d003      	beq.n	8009472 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	68ba      	ldr	r2, [r7, #8]
 800946e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2201      	movs	r2, #1
 8009476:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	79fa      	ldrb	r2, [r7, #7]
 800947e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009480:	68f8      	ldr	r0, [r7, #12]
 8009482:	f001 fb49 	bl	800ab18 <USBD_LL_Init>

  return USBD_OK;
 8009486:	2300      	movs	r3, #0
}
 8009488:	4618      	mov	r0, r3
 800948a:	3710      	adds	r7, #16
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009490:	b480      	push	{r7}
 8009492:	b085      	sub	sp, #20
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800949a:	2300      	movs	r3, #0
 800949c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d006      	beq.n	80094b2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	683a      	ldr	r2, [r7, #0]
 80094a8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80094ac:	2300      	movs	r3, #0
 80094ae:	73fb      	strb	r3, [r7, #15]
 80094b0:	e001      	b.n	80094b6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80094b2:	2302      	movs	r3, #2
 80094b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80094b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3714      	adds	r7, #20
 80094bc:	46bd      	mov	sp, r7
 80094be:	bc80      	pop	{r7}
 80094c0:	4770      	bx	lr

080094c2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b082      	sub	sp, #8
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f001 fb7e 	bl	800abcc <USBD_LL_Start>

  return USBD_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3708      	adds	r7, #8
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80094da:	b480      	push	{r7}
 80094dc:	b083      	sub	sp, #12
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80094e2:	2300      	movs	r3, #0
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bc80      	pop	{r7}
 80094ec:	4770      	bx	lr

080094ee <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80094ee:	b580      	push	{r7, lr}
 80094f0:	b084      	sub	sp, #16
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
 80094f6:	460b      	mov	r3, r1
 80094f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80094fa:	2302      	movs	r3, #2
 80094fc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009504:	2b00      	cmp	r3, #0
 8009506:	d00c      	beq.n	8009522 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	78fa      	ldrb	r2, [r7, #3]
 8009512:	4611      	mov	r1, r2
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	4798      	blx	r3
 8009518:	4603      	mov	r3, r0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d101      	bne.n	8009522 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800951e:	2300      	movs	r3, #0
 8009520:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009522:	7bfb      	ldrb	r3, [r7, #15]
}
 8009524:	4618      	mov	r0, r3
 8009526:	3710      	adds	r7, #16
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	460b      	mov	r3, r1
 8009536:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	78fa      	ldrb	r2, [r7, #3]
 8009542:	4611      	mov	r1, r2
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	4798      	blx	r3

  return USBD_OK;
 8009548:	2300      	movs	r3, #0
}
 800954a:	4618      	mov	r0, r3
 800954c:	3708      	adds	r7, #8
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009552:	b580      	push	{r7, lr}
 8009554:	b082      	sub	sp, #8
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
 800955a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009562:	6839      	ldr	r1, [r7, #0]
 8009564:	4618      	mov	r0, r3
 8009566:	f000 fed8 	bl	800a31a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2201      	movs	r2, #1
 800956e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009578:	461a      	mov	r2, r3
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009586:	f003 031f 	and.w	r3, r3, #31
 800958a:	2b02      	cmp	r3, #2
 800958c:	d016      	beq.n	80095bc <USBD_LL_SetupStage+0x6a>
 800958e:	2b02      	cmp	r3, #2
 8009590:	d81c      	bhi.n	80095cc <USBD_LL_SetupStage+0x7a>
 8009592:	2b00      	cmp	r3, #0
 8009594:	d002      	beq.n	800959c <USBD_LL_SetupStage+0x4a>
 8009596:	2b01      	cmp	r3, #1
 8009598:	d008      	beq.n	80095ac <USBD_LL_SetupStage+0x5a>
 800959a:	e017      	b.n	80095cc <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80095a2:	4619      	mov	r1, r3
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f000 f9cb 	bl	8009940 <USBD_StdDevReq>
      break;
 80095aa:	e01a      	b.n	80095e2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80095b2:	4619      	mov	r1, r3
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 fa2d 	bl	8009a14 <USBD_StdItfReq>
      break;
 80095ba:	e012      	b.n	80095e2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80095c2:	4619      	mov	r1, r3
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 fa6d 	bl	8009aa4 <USBD_StdEPReq>
      break;
 80095ca:	e00a      	b.n	80095e2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80095d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	4619      	mov	r1, r3
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f001 fb56 	bl	800ac8c <USBD_LL_StallEP>
      break;
 80095e0:	bf00      	nop
  }

  return USBD_OK;
 80095e2:	2300      	movs	r3, #0
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3708      	adds	r7, #8
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b086      	sub	sp, #24
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	460b      	mov	r3, r1
 80095f6:	607a      	str	r2, [r7, #4]
 80095f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80095fa:	7afb      	ldrb	r3, [r7, #11]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d14b      	bne.n	8009698 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009606:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800960e:	2b03      	cmp	r3, #3
 8009610:	d134      	bne.n	800967c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	68da      	ldr	r2, [r3, #12]
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	691b      	ldr	r3, [r3, #16]
 800961a:	429a      	cmp	r2, r3
 800961c:	d919      	bls.n	8009652 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	68da      	ldr	r2, [r3, #12]
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	691b      	ldr	r3, [r3, #16]
 8009626:	1ad2      	subs	r2, r2, r3
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	68da      	ldr	r2, [r3, #12]
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009634:	429a      	cmp	r2, r3
 8009636:	d203      	bcs.n	8009640 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800963c:	b29b      	uxth	r3, r3
 800963e:	e002      	b.n	8009646 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009644:	b29b      	uxth	r3, r3
 8009646:	461a      	mov	r2, r3
 8009648:	6879      	ldr	r1, [r7, #4]
 800964a:	68f8      	ldr	r0, [r7, #12]
 800964c:	f000 ff57 	bl	800a4fe <USBD_CtlContinueRx>
 8009650:	e038      	b.n	80096c4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009658:	691b      	ldr	r3, [r3, #16]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00a      	beq.n	8009674 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009664:	2b03      	cmp	r3, #3
 8009666:	d105      	bne.n	8009674 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800966e:	691b      	ldr	r3, [r3, #16]
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009674:	68f8      	ldr	r0, [r7, #12]
 8009676:	f000 ff54 	bl	800a522 <USBD_CtlSendStatus>
 800967a:	e023      	b.n	80096c4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009682:	2b05      	cmp	r3, #5
 8009684:	d11e      	bne.n	80096c4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2200      	movs	r2, #0
 800968a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800968e:	2100      	movs	r1, #0
 8009690:	68f8      	ldr	r0, [r7, #12]
 8009692:	f001 fafb 	bl	800ac8c <USBD_LL_StallEP>
 8009696:	e015      	b.n	80096c4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800969e:	699b      	ldr	r3, [r3, #24]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d00d      	beq.n	80096c0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80096aa:	2b03      	cmp	r3, #3
 80096ac:	d108      	bne.n	80096c0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096b4:	699b      	ldr	r3, [r3, #24]
 80096b6:	7afa      	ldrb	r2, [r7, #11]
 80096b8:	4611      	mov	r1, r2
 80096ba:	68f8      	ldr	r0, [r7, #12]
 80096bc:	4798      	blx	r3
 80096be:	e001      	b.n	80096c4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80096c0:	2302      	movs	r3, #2
 80096c2:	e000      	b.n	80096c6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3718      	adds	r7, #24
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b086      	sub	sp, #24
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	60f8      	str	r0, [r7, #12]
 80096d6:	460b      	mov	r3, r1
 80096d8:	607a      	str	r2, [r7, #4]
 80096da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80096dc:	7afb      	ldrb	r3, [r7, #11]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d17f      	bne.n	80097e2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	3314      	adds	r3, #20
 80096e6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80096ee:	2b02      	cmp	r3, #2
 80096f0:	d15c      	bne.n	80097ac <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	68da      	ldr	r2, [r3, #12]
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	691b      	ldr	r3, [r3, #16]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d915      	bls.n	800972a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	68da      	ldr	r2, [r3, #12]
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	691b      	ldr	r3, [r3, #16]
 8009706:	1ad2      	subs	r2, r2, r3
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	b29b      	uxth	r3, r3
 8009712:	461a      	mov	r2, r3
 8009714:	6879      	ldr	r1, [r7, #4]
 8009716:	68f8      	ldr	r0, [r7, #12]
 8009718:	f000 fec1 	bl	800a49e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800971c:	2300      	movs	r3, #0
 800971e:	2200      	movs	r2, #0
 8009720:	2100      	movs	r1, #0
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	f001 fb5e 	bl	800ade4 <USBD_LL_PrepareReceive>
 8009728:	e04e      	b.n	80097c8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	697a      	ldr	r2, [r7, #20]
 8009730:	6912      	ldr	r2, [r2, #16]
 8009732:	fbb3 f1f2 	udiv	r1, r3, r2
 8009736:	fb01 f202 	mul.w	r2, r1, r2
 800973a:	1a9b      	subs	r3, r3, r2
 800973c:	2b00      	cmp	r3, #0
 800973e:	d11c      	bne.n	800977a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	689a      	ldr	r2, [r3, #8]
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009748:	429a      	cmp	r2, r3
 800974a:	d316      	bcc.n	800977a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	689a      	ldr	r2, [r3, #8]
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009756:	429a      	cmp	r2, r3
 8009758:	d20f      	bcs.n	800977a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800975a:	2200      	movs	r2, #0
 800975c:	2100      	movs	r1, #0
 800975e:	68f8      	ldr	r0, [r7, #12]
 8009760:	f000 fe9d 	bl	800a49e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2200      	movs	r2, #0
 8009768:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800976c:	2300      	movs	r3, #0
 800976e:	2200      	movs	r2, #0
 8009770:	2100      	movs	r1, #0
 8009772:	68f8      	ldr	r0, [r7, #12]
 8009774:	f001 fb36 	bl	800ade4 <USBD_LL_PrepareReceive>
 8009778:	e026      	b.n	80097c8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009780:	68db      	ldr	r3, [r3, #12]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00a      	beq.n	800979c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800978c:	2b03      	cmp	r3, #3
 800978e:	d105      	bne.n	800979c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009796:	68db      	ldr	r3, [r3, #12]
 8009798:	68f8      	ldr	r0, [r7, #12]
 800979a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800979c:	2180      	movs	r1, #128	; 0x80
 800979e:	68f8      	ldr	r0, [r7, #12]
 80097a0:	f001 fa74 	bl	800ac8c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80097a4:	68f8      	ldr	r0, [r7, #12]
 80097a6:	f000 fecf 	bl	800a548 <USBD_CtlReceiveStatus>
 80097aa:	e00d      	b.n	80097c8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80097b2:	2b04      	cmp	r3, #4
 80097b4:	d004      	beq.n	80097c0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d103      	bne.n	80097c8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80097c0:	2180      	movs	r1, #128	; 0x80
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f001 fa62 	bl	800ac8c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80097ce:	2b01      	cmp	r3, #1
 80097d0:	d11d      	bne.n	800980e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80097d2:	68f8      	ldr	r0, [r7, #12]
 80097d4:	f7ff fe81 	bl	80094da <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2200      	movs	r2, #0
 80097dc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80097e0:	e015      	b.n	800980e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097e8:	695b      	ldr	r3, [r3, #20]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d00d      	beq.n	800980a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80097f4:	2b03      	cmp	r3, #3
 80097f6:	d108      	bne.n	800980a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097fe:	695b      	ldr	r3, [r3, #20]
 8009800:	7afa      	ldrb	r2, [r7, #11]
 8009802:	4611      	mov	r1, r2
 8009804:	68f8      	ldr	r0, [r7, #12]
 8009806:	4798      	blx	r3
 8009808:	e001      	b.n	800980e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800980a:	2302      	movs	r3, #2
 800980c:	e000      	b.n	8009810 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800980e:	2300      	movs	r3, #0
}
 8009810:	4618      	mov	r0, r3
 8009812:	3718      	adds	r7, #24
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009820:	2340      	movs	r3, #64	; 0x40
 8009822:	2200      	movs	r2, #0
 8009824:	2100      	movs	r1, #0
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f001 f9eb 	bl	800ac02 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2240      	movs	r2, #64	; 0x40
 8009838:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800983c:	2340      	movs	r3, #64	; 0x40
 800983e:	2200      	movs	r2, #0
 8009840:	2180      	movs	r1, #128	; 0x80
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f001 f9dd 	bl	800ac02 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2240      	movs	r2, #64	; 0x40
 8009852:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2201      	movs	r2, #1
 8009858:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2200      	movs	r2, #0
 8009860:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009878:	2b00      	cmp	r3, #0
 800987a:	d009      	beq.n	8009890 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	6852      	ldr	r2, [r2, #4]
 8009888:	b2d2      	uxtb	r2, r2
 800988a:	4611      	mov	r1, r2
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	4798      	blx	r3
  }

  return USBD_OK;
 8009890:	2300      	movs	r3, #0
}
 8009892:	4618      	mov	r0, r3
 8009894:	3708      	adds	r7, #8
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800989a:	b480      	push	{r7}
 800989c:	b083      	sub	sp, #12
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
 80098a2:	460b      	mov	r3, r1
 80098a4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	78fa      	ldrb	r2, [r7, #3]
 80098aa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80098ac:	2300      	movs	r3, #0
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	370c      	adds	r7, #12
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bc80      	pop	{r7}
 80098b6:	4770      	bx	lr

080098b8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2204      	movs	r2, #4
 80098d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	370c      	adds	r7, #12
 80098da:	46bd      	mov	sp, r7
 80098dc:	bc80      	pop	{r7}
 80098de:	4770      	bx	lr

080098e0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098ee:	2b04      	cmp	r3, #4
 80098f0:	d105      	bne.n	80098fe <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80098fe:	2300      	movs	r3, #0
}
 8009900:	4618      	mov	r0, r3
 8009902:	370c      	adds	r7, #12
 8009904:	46bd      	mov	sp, r7
 8009906:	bc80      	pop	{r7}
 8009908:	4770      	bx	lr

0800990a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800990a:	b580      	push	{r7, lr}
 800990c:	b082      	sub	sp, #8
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009918:	2b03      	cmp	r3, #3
 800991a:	d10b      	bne.n	8009934 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009922:	69db      	ldr	r3, [r3, #28]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d005      	beq.n	8009934 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800992e:	69db      	ldr	r3, [r3, #28]
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3708      	adds	r7, #8
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
	...

08009940 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800994a:	2300      	movs	r3, #0
 800994c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009956:	2b40      	cmp	r3, #64	; 0x40
 8009958:	d005      	beq.n	8009966 <USBD_StdDevReq+0x26>
 800995a:	2b40      	cmp	r3, #64	; 0x40
 800995c:	d84f      	bhi.n	80099fe <USBD_StdDevReq+0xbe>
 800995e:	2b00      	cmp	r3, #0
 8009960:	d009      	beq.n	8009976 <USBD_StdDevReq+0x36>
 8009962:	2b20      	cmp	r3, #32
 8009964:	d14b      	bne.n	80099fe <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	6839      	ldr	r1, [r7, #0]
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	4798      	blx	r3
      break;
 8009974:	e048      	b.n	8009a08 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	785b      	ldrb	r3, [r3, #1]
 800997a:	2b09      	cmp	r3, #9
 800997c:	d839      	bhi.n	80099f2 <USBD_StdDevReq+0xb2>
 800997e:	a201      	add	r2, pc, #4	; (adr r2, 8009984 <USBD_StdDevReq+0x44>)
 8009980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009984:	080099d5 	.word	0x080099d5
 8009988:	080099e9 	.word	0x080099e9
 800998c:	080099f3 	.word	0x080099f3
 8009990:	080099df 	.word	0x080099df
 8009994:	080099f3 	.word	0x080099f3
 8009998:	080099b7 	.word	0x080099b7
 800999c:	080099ad 	.word	0x080099ad
 80099a0:	080099f3 	.word	0x080099f3
 80099a4:	080099cb 	.word	0x080099cb
 80099a8:	080099c1 	.word	0x080099c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80099ac:	6839      	ldr	r1, [r7, #0]
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 f9dc 	bl	8009d6c <USBD_GetDescriptor>
          break;
 80099b4:	e022      	b.n	80099fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80099b6:	6839      	ldr	r1, [r7, #0]
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 fb3f 	bl	800a03c <USBD_SetAddress>
          break;
 80099be:	e01d      	b.n	80099fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80099c0:	6839      	ldr	r1, [r7, #0]
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 fb7e 	bl	800a0c4 <USBD_SetConfig>
          break;
 80099c8:	e018      	b.n	80099fc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80099ca:	6839      	ldr	r1, [r7, #0]
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 fc07 	bl	800a1e0 <USBD_GetConfig>
          break;
 80099d2:	e013      	b.n	80099fc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80099d4:	6839      	ldr	r1, [r7, #0]
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 fc37 	bl	800a24a <USBD_GetStatus>
          break;
 80099dc:	e00e      	b.n	80099fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80099de:	6839      	ldr	r1, [r7, #0]
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 fc65 	bl	800a2b0 <USBD_SetFeature>
          break;
 80099e6:	e009      	b.n	80099fc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80099e8:	6839      	ldr	r1, [r7, #0]
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 fc74 	bl	800a2d8 <USBD_ClrFeature>
          break;
 80099f0:	e004      	b.n	80099fc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80099f2:	6839      	ldr	r1, [r7, #0]
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 fccc 	bl	800a392 <USBD_CtlError>
          break;
 80099fa:	bf00      	nop
      }
      break;
 80099fc:	e004      	b.n	8009a08 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80099fe:	6839      	ldr	r1, [r7, #0]
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 fcc6 	bl	800a392 <USBD_CtlError>
      break;
 8009a06:	bf00      	nop
  }

  return ret;
 8009a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop

08009a14 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a2a:	2b40      	cmp	r3, #64	; 0x40
 8009a2c:	d005      	beq.n	8009a3a <USBD_StdItfReq+0x26>
 8009a2e:	2b40      	cmp	r3, #64	; 0x40
 8009a30:	d82e      	bhi.n	8009a90 <USBD_StdItfReq+0x7c>
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d001      	beq.n	8009a3a <USBD_StdItfReq+0x26>
 8009a36:	2b20      	cmp	r3, #32
 8009a38:	d12a      	bne.n	8009a90 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a40:	3b01      	subs	r3, #1
 8009a42:	2b02      	cmp	r3, #2
 8009a44:	d81d      	bhi.n	8009a82 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	889b      	ldrh	r3, [r3, #4]
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d813      	bhi.n	8009a78 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	6839      	ldr	r1, [r7, #0]
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	4798      	blx	r3
 8009a5e:	4603      	mov	r3, r0
 8009a60:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	88db      	ldrh	r3, [r3, #6]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d110      	bne.n	8009a8c <USBD_StdItfReq+0x78>
 8009a6a:	7bfb      	ldrb	r3, [r7, #15]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d10d      	bne.n	8009a8c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 fd56 	bl	800a522 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009a76:	e009      	b.n	8009a8c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009a78:	6839      	ldr	r1, [r7, #0]
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 fc89 	bl	800a392 <USBD_CtlError>
          break;
 8009a80:	e004      	b.n	8009a8c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009a82:	6839      	ldr	r1, [r7, #0]
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 fc84 	bl	800a392 <USBD_CtlError>
          break;
 8009a8a:	e000      	b.n	8009a8e <USBD_StdItfReq+0x7a>
          break;
 8009a8c:	bf00      	nop
      }
      break;
 8009a8e:	e004      	b.n	8009a9a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009a90:	6839      	ldr	r1, [r7, #0]
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 fc7d 	bl	800a392 <USBD_CtlError>
      break;
 8009a98:	bf00      	nop
  }

  return USBD_OK;
 8009a9a:	2300      	movs	r3, #0
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3710      	adds	r7, #16
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	889b      	ldrh	r3, [r3, #4]
 8009ab6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ac0:	2b40      	cmp	r3, #64	; 0x40
 8009ac2:	d007      	beq.n	8009ad4 <USBD_StdEPReq+0x30>
 8009ac4:	2b40      	cmp	r3, #64	; 0x40
 8009ac6:	f200 8146 	bhi.w	8009d56 <USBD_StdEPReq+0x2b2>
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d00a      	beq.n	8009ae4 <USBD_StdEPReq+0x40>
 8009ace:	2b20      	cmp	r3, #32
 8009ad0:	f040 8141 	bne.w	8009d56 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ada:	689b      	ldr	r3, [r3, #8]
 8009adc:	6839      	ldr	r1, [r7, #0]
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	4798      	blx	r3
      break;
 8009ae2:	e13d      	b.n	8009d60 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009aec:	2b20      	cmp	r3, #32
 8009aee:	d10a      	bne.n	8009b06 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	6839      	ldr	r1, [r7, #0]
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	4798      	blx	r3
 8009afe:	4603      	mov	r3, r0
 8009b00:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009b02:	7bfb      	ldrb	r3, [r7, #15]
 8009b04:	e12d      	b.n	8009d62 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	785b      	ldrb	r3, [r3, #1]
 8009b0a:	2b03      	cmp	r3, #3
 8009b0c:	d007      	beq.n	8009b1e <USBD_StdEPReq+0x7a>
 8009b0e:	2b03      	cmp	r3, #3
 8009b10:	f300 811b 	bgt.w	8009d4a <USBD_StdEPReq+0x2a6>
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d072      	beq.n	8009bfe <USBD_StdEPReq+0x15a>
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d03a      	beq.n	8009b92 <USBD_StdEPReq+0xee>
 8009b1c:	e115      	b.n	8009d4a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b24:	2b02      	cmp	r3, #2
 8009b26:	d002      	beq.n	8009b2e <USBD_StdEPReq+0x8a>
 8009b28:	2b03      	cmp	r3, #3
 8009b2a:	d015      	beq.n	8009b58 <USBD_StdEPReq+0xb4>
 8009b2c:	e02b      	b.n	8009b86 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b2e:	7bbb      	ldrb	r3, [r7, #14]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d00c      	beq.n	8009b4e <USBD_StdEPReq+0xaa>
 8009b34:	7bbb      	ldrb	r3, [r7, #14]
 8009b36:	2b80      	cmp	r3, #128	; 0x80
 8009b38:	d009      	beq.n	8009b4e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009b3a:	7bbb      	ldrb	r3, [r7, #14]
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f001 f8a4 	bl	800ac8c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009b44:	2180      	movs	r1, #128	; 0x80
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f001 f8a0 	bl	800ac8c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b4c:	e020      	b.n	8009b90 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009b4e:	6839      	ldr	r1, [r7, #0]
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 fc1e 	bl	800a392 <USBD_CtlError>
              break;
 8009b56:	e01b      	b.n	8009b90 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	885b      	ldrh	r3, [r3, #2]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d10e      	bne.n	8009b7e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009b60:	7bbb      	ldrb	r3, [r7, #14]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d00b      	beq.n	8009b7e <USBD_StdEPReq+0xda>
 8009b66:	7bbb      	ldrb	r3, [r7, #14]
 8009b68:	2b80      	cmp	r3, #128	; 0x80
 8009b6a:	d008      	beq.n	8009b7e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	88db      	ldrh	r3, [r3, #6]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d104      	bne.n	8009b7e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009b74:	7bbb      	ldrb	r3, [r7, #14]
 8009b76:	4619      	mov	r1, r3
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f001 f887 	bl	800ac8c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 fccf 	bl	800a522 <USBD_CtlSendStatus>

              break;
 8009b84:	e004      	b.n	8009b90 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009b86:	6839      	ldr	r1, [r7, #0]
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 fc02 	bl	800a392 <USBD_CtlError>
              break;
 8009b8e:	bf00      	nop
          }
          break;
 8009b90:	e0e0      	b.n	8009d54 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b98:	2b02      	cmp	r3, #2
 8009b9a:	d002      	beq.n	8009ba2 <USBD_StdEPReq+0xfe>
 8009b9c:	2b03      	cmp	r3, #3
 8009b9e:	d015      	beq.n	8009bcc <USBD_StdEPReq+0x128>
 8009ba0:	e026      	b.n	8009bf0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ba2:	7bbb      	ldrb	r3, [r7, #14]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d00c      	beq.n	8009bc2 <USBD_StdEPReq+0x11e>
 8009ba8:	7bbb      	ldrb	r3, [r7, #14]
 8009baa:	2b80      	cmp	r3, #128	; 0x80
 8009bac:	d009      	beq.n	8009bc2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009bae:	7bbb      	ldrb	r3, [r7, #14]
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f001 f86a 	bl	800ac8c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009bb8:	2180      	movs	r1, #128	; 0x80
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f001 f866 	bl	800ac8c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009bc0:	e01c      	b.n	8009bfc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009bc2:	6839      	ldr	r1, [r7, #0]
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 fbe4 	bl	800a392 <USBD_CtlError>
              break;
 8009bca:	e017      	b.n	8009bfc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	885b      	ldrh	r3, [r3, #2]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d112      	bne.n	8009bfa <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009bd4:	7bbb      	ldrb	r3, [r7, #14]
 8009bd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d004      	beq.n	8009be8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009bde:	7bbb      	ldrb	r3, [r7, #14]
 8009be0:	4619      	mov	r1, r3
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f001 f871 	bl	800acca <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 fc9a 	bl	800a522 <USBD_CtlSendStatus>
              }
              break;
 8009bee:	e004      	b.n	8009bfa <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009bf0:	6839      	ldr	r1, [r7, #0]
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 fbcd 	bl	800a392 <USBD_CtlError>
              break;
 8009bf8:	e000      	b.n	8009bfc <USBD_StdEPReq+0x158>
              break;
 8009bfa:	bf00      	nop
          }
          break;
 8009bfc:	e0aa      	b.n	8009d54 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c04:	2b02      	cmp	r3, #2
 8009c06:	d002      	beq.n	8009c0e <USBD_StdEPReq+0x16a>
 8009c08:	2b03      	cmp	r3, #3
 8009c0a:	d032      	beq.n	8009c72 <USBD_StdEPReq+0x1ce>
 8009c0c:	e097      	b.n	8009d3e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c0e:	7bbb      	ldrb	r3, [r7, #14]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d007      	beq.n	8009c24 <USBD_StdEPReq+0x180>
 8009c14:	7bbb      	ldrb	r3, [r7, #14]
 8009c16:	2b80      	cmp	r3, #128	; 0x80
 8009c18:	d004      	beq.n	8009c24 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009c1a:	6839      	ldr	r1, [r7, #0]
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 fbb8 	bl	800a392 <USBD_CtlError>
                break;
 8009c22:	e091      	b.n	8009d48 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	da0b      	bge.n	8009c44 <USBD_StdEPReq+0x1a0>
 8009c2c:	7bbb      	ldrb	r3, [r7, #14]
 8009c2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c32:	4613      	mov	r3, r2
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	4413      	add	r3, r2
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	3310      	adds	r3, #16
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	4413      	add	r3, r2
 8009c40:	3304      	adds	r3, #4
 8009c42:	e00b      	b.n	8009c5c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c44:	7bbb      	ldrb	r3, [r7, #14]
 8009c46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	4413      	add	r3, r2
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	4413      	add	r3, r2
 8009c5a:	3304      	adds	r3, #4
 8009c5c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	2200      	movs	r2, #0
 8009c62:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	2202      	movs	r2, #2
 8009c68:	4619      	mov	r1, r3
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 fbfb 	bl	800a466 <USBD_CtlSendData>
              break;
 8009c70:	e06a      	b.n	8009d48 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009c72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	da11      	bge.n	8009c9e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009c7a:	7bbb      	ldrb	r3, [r7, #14]
 8009c7c:	f003 020f 	and.w	r2, r3, #15
 8009c80:	6879      	ldr	r1, [r7, #4]
 8009c82:	4613      	mov	r3, r2
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	4413      	add	r3, r2
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	440b      	add	r3, r1
 8009c8c:	3318      	adds	r3, #24
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d117      	bne.n	8009cc4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009c94:	6839      	ldr	r1, [r7, #0]
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 fb7b 	bl	800a392 <USBD_CtlError>
                  break;
 8009c9c:	e054      	b.n	8009d48 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009c9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ca0:	f003 020f 	and.w	r2, r3, #15
 8009ca4:	6879      	ldr	r1, [r7, #4]
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	4413      	add	r3, r2
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	440b      	add	r3, r1
 8009cb0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d104      	bne.n	8009cc4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009cba:	6839      	ldr	r1, [r7, #0]
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 fb68 	bl	800a392 <USBD_CtlError>
                  break;
 8009cc2:	e041      	b.n	8009d48 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	da0b      	bge.n	8009ce4 <USBD_StdEPReq+0x240>
 8009ccc:	7bbb      	ldrb	r3, [r7, #14]
 8009cce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009cd2:	4613      	mov	r3, r2
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	4413      	add	r3, r2
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	3310      	adds	r3, #16
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	4413      	add	r3, r2
 8009ce0:	3304      	adds	r3, #4
 8009ce2:	e00b      	b.n	8009cfc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ce4:	7bbb      	ldrb	r3, [r7, #14]
 8009ce6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cea:	4613      	mov	r3, r2
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	4413      	add	r3, r2
 8009cf0:	009b      	lsls	r3, r3, #2
 8009cf2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009cf6:	687a      	ldr	r2, [r7, #4]
 8009cf8:	4413      	add	r3, r2
 8009cfa:	3304      	adds	r3, #4
 8009cfc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009cfe:	7bbb      	ldrb	r3, [r7, #14]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d002      	beq.n	8009d0a <USBD_StdEPReq+0x266>
 8009d04:	7bbb      	ldrb	r3, [r7, #14]
 8009d06:	2b80      	cmp	r3, #128	; 0x80
 8009d08:	d103      	bne.n	8009d12 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	601a      	str	r2, [r3, #0]
 8009d10:	e00e      	b.n	8009d30 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009d12:	7bbb      	ldrb	r3, [r7, #14]
 8009d14:	4619      	mov	r1, r3
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 fff6 	bl	800ad08 <USBD_LL_IsStallEP>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d003      	beq.n	8009d2a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	2201      	movs	r2, #1
 8009d26:	601a      	str	r2, [r3, #0]
 8009d28:	e002      	b.n	8009d30 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	2202      	movs	r2, #2
 8009d34:	4619      	mov	r1, r3
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 fb95 	bl	800a466 <USBD_CtlSendData>
              break;
 8009d3c:	e004      	b.n	8009d48 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009d3e:	6839      	ldr	r1, [r7, #0]
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 fb26 	bl	800a392 <USBD_CtlError>
              break;
 8009d46:	bf00      	nop
          }
          break;
 8009d48:	e004      	b.n	8009d54 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009d4a:	6839      	ldr	r1, [r7, #0]
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f000 fb20 	bl	800a392 <USBD_CtlError>
          break;
 8009d52:	bf00      	nop
      }
      break;
 8009d54:	e004      	b.n	8009d60 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009d56:	6839      	ldr	r1, [r7, #0]
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f000 fb1a 	bl	800a392 <USBD_CtlError>
      break;
 8009d5e:	bf00      	nop
  }

  return ret;
 8009d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3710      	adds	r7, #16
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
	...

08009d6c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d76:	2300      	movs	r3, #0
 8009d78:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	885b      	ldrh	r3, [r3, #2]
 8009d86:	0a1b      	lsrs	r3, r3, #8
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	3b01      	subs	r3, #1
 8009d8c:	2b06      	cmp	r3, #6
 8009d8e:	f200 8128 	bhi.w	8009fe2 <USBD_GetDescriptor+0x276>
 8009d92:	a201      	add	r2, pc, #4	; (adr r2, 8009d98 <USBD_GetDescriptor+0x2c>)
 8009d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d98:	08009db5 	.word	0x08009db5
 8009d9c:	08009dcd 	.word	0x08009dcd
 8009da0:	08009e0d 	.word	0x08009e0d
 8009da4:	08009fe3 	.word	0x08009fe3
 8009da8:	08009fe3 	.word	0x08009fe3
 8009dac:	08009f83 	.word	0x08009f83
 8009db0:	08009faf 	.word	0x08009faf
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	7c12      	ldrb	r2, [r2, #16]
 8009dc0:	f107 0108 	add.w	r1, r7, #8
 8009dc4:	4610      	mov	r0, r2
 8009dc6:	4798      	blx	r3
 8009dc8:	60f8      	str	r0, [r7, #12]
      break;
 8009dca:	e112      	b.n	8009ff2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	7c1b      	ldrb	r3, [r3, #16]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d10d      	bne.n	8009df0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ddc:	f107 0208 	add.w	r2, r7, #8
 8009de0:	4610      	mov	r0, r2
 8009de2:	4798      	blx	r3
 8009de4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	3301      	adds	r3, #1
 8009dea:	2202      	movs	r2, #2
 8009dec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009dee:	e100      	b.n	8009ff2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df8:	f107 0208 	add.w	r2, r7, #8
 8009dfc:	4610      	mov	r0, r2
 8009dfe:	4798      	blx	r3
 8009e00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	3301      	adds	r3, #1
 8009e06:	2202      	movs	r2, #2
 8009e08:	701a      	strb	r2, [r3, #0]
      break;
 8009e0a:	e0f2      	b.n	8009ff2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	885b      	ldrh	r3, [r3, #2]
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	2b05      	cmp	r3, #5
 8009e14:	f200 80ac 	bhi.w	8009f70 <USBD_GetDescriptor+0x204>
 8009e18:	a201      	add	r2, pc, #4	; (adr r2, 8009e20 <USBD_GetDescriptor+0xb4>)
 8009e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e1e:	bf00      	nop
 8009e20:	08009e39 	.word	0x08009e39
 8009e24:	08009e6d 	.word	0x08009e6d
 8009e28:	08009ea1 	.word	0x08009ea1
 8009e2c:	08009ed5 	.word	0x08009ed5
 8009e30:	08009f09 	.word	0x08009f09
 8009e34:	08009f3d 	.word	0x08009f3d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00b      	beq.n	8009e5c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	7c12      	ldrb	r2, [r2, #16]
 8009e50:	f107 0108 	add.w	r1, r7, #8
 8009e54:	4610      	mov	r0, r2
 8009e56:	4798      	blx	r3
 8009e58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e5a:	e091      	b.n	8009f80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e5c:	6839      	ldr	r1, [r7, #0]
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 fa97 	bl	800a392 <USBD_CtlError>
            err++;
 8009e64:	7afb      	ldrb	r3, [r7, #11]
 8009e66:	3301      	adds	r3, #1
 8009e68:	72fb      	strb	r3, [r7, #11]
          break;
 8009e6a:	e089      	b.n	8009f80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e72:	689b      	ldr	r3, [r3, #8]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d00b      	beq.n	8009e90 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e7e:	689b      	ldr	r3, [r3, #8]
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	7c12      	ldrb	r2, [r2, #16]
 8009e84:	f107 0108 	add.w	r1, r7, #8
 8009e88:	4610      	mov	r0, r2
 8009e8a:	4798      	blx	r3
 8009e8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e8e:	e077      	b.n	8009f80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e90:	6839      	ldr	r1, [r7, #0]
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f000 fa7d 	bl	800a392 <USBD_CtlError>
            err++;
 8009e98:	7afb      	ldrb	r3, [r7, #11]
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e9e:	e06f      	b.n	8009f80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d00b      	beq.n	8009ec4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	7c12      	ldrb	r2, [r2, #16]
 8009eb8:	f107 0108 	add.w	r1, r7, #8
 8009ebc:	4610      	mov	r0, r2
 8009ebe:	4798      	blx	r3
 8009ec0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ec2:	e05d      	b.n	8009f80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ec4:	6839      	ldr	r1, [r7, #0]
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 fa63 	bl	800a392 <USBD_CtlError>
            err++;
 8009ecc:	7afb      	ldrb	r3, [r7, #11]
 8009ece:	3301      	adds	r3, #1
 8009ed0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ed2:	e055      	b.n	8009f80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009eda:	691b      	ldr	r3, [r3, #16]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d00b      	beq.n	8009ef8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ee6:	691b      	ldr	r3, [r3, #16]
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	7c12      	ldrb	r2, [r2, #16]
 8009eec:	f107 0108 	add.w	r1, r7, #8
 8009ef0:	4610      	mov	r0, r2
 8009ef2:	4798      	blx	r3
 8009ef4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ef6:	e043      	b.n	8009f80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ef8:	6839      	ldr	r1, [r7, #0]
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 fa49 	bl	800a392 <USBD_CtlError>
            err++;
 8009f00:	7afb      	ldrb	r3, [r7, #11]
 8009f02:	3301      	adds	r3, #1
 8009f04:	72fb      	strb	r3, [r7, #11]
          break;
 8009f06:	e03b      	b.n	8009f80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f0e:	695b      	ldr	r3, [r3, #20]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d00b      	beq.n	8009f2c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f1a:	695b      	ldr	r3, [r3, #20]
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	7c12      	ldrb	r2, [r2, #16]
 8009f20:	f107 0108 	add.w	r1, r7, #8
 8009f24:	4610      	mov	r0, r2
 8009f26:	4798      	blx	r3
 8009f28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f2a:	e029      	b.n	8009f80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f2c:	6839      	ldr	r1, [r7, #0]
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 fa2f 	bl	800a392 <USBD_CtlError>
            err++;
 8009f34:	7afb      	ldrb	r3, [r7, #11]
 8009f36:	3301      	adds	r3, #1
 8009f38:	72fb      	strb	r3, [r7, #11]
          break;
 8009f3a:	e021      	b.n	8009f80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f42:	699b      	ldr	r3, [r3, #24]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d00b      	beq.n	8009f60 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f4e:	699b      	ldr	r3, [r3, #24]
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	7c12      	ldrb	r2, [r2, #16]
 8009f54:	f107 0108 	add.w	r1, r7, #8
 8009f58:	4610      	mov	r0, r2
 8009f5a:	4798      	blx	r3
 8009f5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f5e:	e00f      	b.n	8009f80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f60:	6839      	ldr	r1, [r7, #0]
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 fa15 	bl	800a392 <USBD_CtlError>
            err++;
 8009f68:	7afb      	ldrb	r3, [r7, #11]
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	72fb      	strb	r3, [r7, #11]
          break;
 8009f6e:	e007      	b.n	8009f80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009f70:	6839      	ldr	r1, [r7, #0]
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 fa0d 	bl	800a392 <USBD_CtlError>
          err++;
 8009f78:	7afb      	ldrb	r3, [r7, #11]
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009f7e:	e038      	b.n	8009ff2 <USBD_GetDescriptor+0x286>
 8009f80:	e037      	b.n	8009ff2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	7c1b      	ldrb	r3, [r3, #16]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d109      	bne.n	8009f9e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f92:	f107 0208 	add.w	r2, r7, #8
 8009f96:	4610      	mov	r0, r2
 8009f98:	4798      	blx	r3
 8009f9a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f9c:	e029      	b.n	8009ff2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f9e:	6839      	ldr	r1, [r7, #0]
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f000 f9f6 	bl	800a392 <USBD_CtlError>
        err++;
 8009fa6:	7afb      	ldrb	r3, [r7, #11]
 8009fa8:	3301      	adds	r3, #1
 8009faa:	72fb      	strb	r3, [r7, #11]
      break;
 8009fac:	e021      	b.n	8009ff2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	7c1b      	ldrb	r3, [r3, #16]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d10d      	bne.n	8009fd2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fbe:	f107 0208 	add.w	r2, r7, #8
 8009fc2:	4610      	mov	r0, r2
 8009fc4:	4798      	blx	r3
 8009fc6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	3301      	adds	r3, #1
 8009fcc:	2207      	movs	r2, #7
 8009fce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009fd0:	e00f      	b.n	8009ff2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009fd2:	6839      	ldr	r1, [r7, #0]
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 f9dc 	bl	800a392 <USBD_CtlError>
        err++;
 8009fda:	7afb      	ldrb	r3, [r7, #11]
 8009fdc:	3301      	adds	r3, #1
 8009fde:	72fb      	strb	r3, [r7, #11]
      break;
 8009fe0:	e007      	b.n	8009ff2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009fe2:	6839      	ldr	r1, [r7, #0]
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 f9d4 	bl	800a392 <USBD_CtlError>
      err++;
 8009fea:	7afb      	ldrb	r3, [r7, #11]
 8009fec:	3301      	adds	r3, #1
 8009fee:	72fb      	strb	r3, [r7, #11]
      break;
 8009ff0:	bf00      	nop
  }

  if (err != 0U)
 8009ff2:	7afb      	ldrb	r3, [r7, #11]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d11c      	bne.n	800a032 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009ff8:	893b      	ldrh	r3, [r7, #8]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d011      	beq.n	800a022 <USBD_GetDescriptor+0x2b6>
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	88db      	ldrh	r3, [r3, #6]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d00d      	beq.n	800a022 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	88da      	ldrh	r2, [r3, #6]
 800a00a:	893b      	ldrh	r3, [r7, #8]
 800a00c:	4293      	cmp	r3, r2
 800a00e:	bf28      	it	cs
 800a010:	4613      	movcs	r3, r2
 800a012:	b29b      	uxth	r3, r3
 800a014:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a016:	893b      	ldrh	r3, [r7, #8]
 800a018:	461a      	mov	r2, r3
 800a01a:	68f9      	ldr	r1, [r7, #12]
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 fa22 	bl	800a466 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	88db      	ldrh	r3, [r3, #6]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d104      	bne.n	800a034 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 fa79 	bl	800a522 <USBD_CtlSendStatus>
 800a030:	e000      	b.n	800a034 <USBD_GetDescriptor+0x2c8>
    return;
 800a032:	bf00      	nop
    }
  }
}
 800a034:	3710      	adds	r7, #16
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop

0800a03c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	889b      	ldrh	r3, [r3, #4]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d130      	bne.n	800a0b0 <USBD_SetAddress+0x74>
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	88db      	ldrh	r3, [r3, #6]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d12c      	bne.n	800a0b0 <USBD_SetAddress+0x74>
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	885b      	ldrh	r3, [r3, #2]
 800a05a:	2b7f      	cmp	r3, #127	; 0x7f
 800a05c:	d828      	bhi.n	800a0b0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	885b      	ldrh	r3, [r3, #2]
 800a062:	b2db      	uxtb	r3, r3
 800a064:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a068:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a070:	2b03      	cmp	r3, #3
 800a072:	d104      	bne.n	800a07e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a074:	6839      	ldr	r1, [r7, #0]
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f000 f98b 	bl	800a392 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a07c:	e01d      	b.n	800a0ba <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	7bfa      	ldrb	r2, [r7, #15]
 800a082:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a086:	7bfb      	ldrb	r3, [r7, #15]
 800a088:	4619      	mov	r1, r3
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 fe68 	bl	800ad60 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 fa46 	bl	800a522 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a096:	7bfb      	ldrb	r3, [r7, #15]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d004      	beq.n	800a0a6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2202      	movs	r2, #2
 800a0a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0a4:	e009      	b.n	800a0ba <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0ae:	e004      	b.n	800a0ba <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a0b0:	6839      	ldr	r1, [r7, #0]
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 f96d 	bl	800a392 <USBD_CtlError>
  }
}
 800a0b8:	bf00      	nop
 800a0ba:	bf00      	nop
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
	...

0800a0c4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	885b      	ldrh	r3, [r3, #2]
 800a0d2:	b2da      	uxtb	r2, r3
 800a0d4:	4b41      	ldr	r3, [pc, #260]	; (800a1dc <USBD_SetConfig+0x118>)
 800a0d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a0d8:	4b40      	ldr	r3, [pc, #256]	; (800a1dc <USBD_SetConfig+0x118>)
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d904      	bls.n	800a0ea <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a0e0:	6839      	ldr	r1, [r7, #0]
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f000 f955 	bl	800a392 <USBD_CtlError>
 800a0e8:	e075      	b.n	800a1d6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0f0:	2b02      	cmp	r3, #2
 800a0f2:	d002      	beq.n	800a0fa <USBD_SetConfig+0x36>
 800a0f4:	2b03      	cmp	r3, #3
 800a0f6:	d023      	beq.n	800a140 <USBD_SetConfig+0x7c>
 800a0f8:	e062      	b.n	800a1c0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a0fa:	4b38      	ldr	r3, [pc, #224]	; (800a1dc <USBD_SetConfig+0x118>)
 800a0fc:	781b      	ldrb	r3, [r3, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d01a      	beq.n	800a138 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a102:	4b36      	ldr	r3, [pc, #216]	; (800a1dc <USBD_SetConfig+0x118>)
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	461a      	mov	r2, r3
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2203      	movs	r2, #3
 800a110:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a114:	4b31      	ldr	r3, [pc, #196]	; (800a1dc <USBD_SetConfig+0x118>)
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	4619      	mov	r1, r3
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f7ff f9e7 	bl	80094ee <USBD_SetClassConfig>
 800a120:	4603      	mov	r3, r0
 800a122:	2b02      	cmp	r3, #2
 800a124:	d104      	bne.n	800a130 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a126:	6839      	ldr	r1, [r7, #0]
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f000 f932 	bl	800a392 <USBD_CtlError>
            return;
 800a12e:	e052      	b.n	800a1d6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f000 f9f6 	bl	800a522 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a136:	e04e      	b.n	800a1d6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f000 f9f2 	bl	800a522 <USBD_CtlSendStatus>
        break;
 800a13e:	e04a      	b.n	800a1d6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a140:	4b26      	ldr	r3, [pc, #152]	; (800a1dc <USBD_SetConfig+0x118>)
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d112      	bne.n	800a16e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2202      	movs	r2, #2
 800a14c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a150:	4b22      	ldr	r3, [pc, #136]	; (800a1dc <USBD_SetConfig+0x118>)
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	461a      	mov	r2, r3
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a15a:	4b20      	ldr	r3, [pc, #128]	; (800a1dc <USBD_SetConfig+0x118>)
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	4619      	mov	r1, r3
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f7ff f9e3 	bl	800952c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 f9db 	bl	800a522 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a16c:	e033      	b.n	800a1d6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a16e:	4b1b      	ldr	r3, [pc, #108]	; (800a1dc <USBD_SetConfig+0x118>)
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	461a      	mov	r2, r3
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	429a      	cmp	r2, r3
 800a17a:	d01d      	beq.n	800a1b8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	b2db      	uxtb	r3, r3
 800a182:	4619      	mov	r1, r3
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f7ff f9d1 	bl	800952c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a18a:	4b14      	ldr	r3, [pc, #80]	; (800a1dc <USBD_SetConfig+0x118>)
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	461a      	mov	r2, r3
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a194:	4b11      	ldr	r3, [pc, #68]	; (800a1dc <USBD_SetConfig+0x118>)
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	4619      	mov	r1, r3
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f7ff f9a7 	bl	80094ee <USBD_SetClassConfig>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	2b02      	cmp	r3, #2
 800a1a4:	d104      	bne.n	800a1b0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a1a6:	6839      	ldr	r1, [r7, #0]
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 f8f2 	bl	800a392 <USBD_CtlError>
            return;
 800a1ae:	e012      	b.n	800a1d6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f000 f9b6 	bl	800a522 <USBD_CtlSendStatus>
        break;
 800a1b6:	e00e      	b.n	800a1d6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 f9b2 	bl	800a522 <USBD_CtlSendStatus>
        break;
 800a1be:	e00a      	b.n	800a1d6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a1c0:	6839      	ldr	r1, [r7, #0]
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 f8e5 	bl	800a392 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a1c8:	4b04      	ldr	r3, [pc, #16]	; (800a1dc <USBD_SetConfig+0x118>)
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f7ff f9ac 	bl	800952c <USBD_ClrClassConfig>
        break;
 800a1d4:	bf00      	nop
    }
  }
}
 800a1d6:	3708      	adds	r7, #8
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}
 800a1dc:	20000418 	.word	0x20000418

0800a1e0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	88db      	ldrh	r3, [r3, #6]
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	d004      	beq.n	800a1fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a1f2:	6839      	ldr	r1, [r7, #0]
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 f8cc 	bl	800a392 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a1fa:	e022      	b.n	800a242 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a202:	2b02      	cmp	r3, #2
 800a204:	dc02      	bgt.n	800a20c <USBD_GetConfig+0x2c>
 800a206:	2b00      	cmp	r3, #0
 800a208:	dc03      	bgt.n	800a212 <USBD_GetConfig+0x32>
 800a20a:	e015      	b.n	800a238 <USBD_GetConfig+0x58>
 800a20c:	2b03      	cmp	r3, #3
 800a20e:	d00b      	beq.n	800a228 <USBD_GetConfig+0x48>
 800a210:	e012      	b.n	800a238 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2200      	movs	r2, #0
 800a216:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	3308      	adds	r3, #8
 800a21c:	2201      	movs	r2, #1
 800a21e:	4619      	mov	r1, r3
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f000 f920 	bl	800a466 <USBD_CtlSendData>
        break;
 800a226:	e00c      	b.n	800a242 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	3304      	adds	r3, #4
 800a22c:	2201      	movs	r2, #1
 800a22e:	4619      	mov	r1, r3
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 f918 	bl	800a466 <USBD_CtlSendData>
        break;
 800a236:	e004      	b.n	800a242 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a238:	6839      	ldr	r1, [r7, #0]
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 f8a9 	bl	800a392 <USBD_CtlError>
        break;
 800a240:	bf00      	nop
}
 800a242:	bf00      	nop
 800a244:	3708      	adds	r7, #8
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}

0800a24a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a24a:	b580      	push	{r7, lr}
 800a24c:	b082      	sub	sp, #8
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
 800a252:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a25a:	3b01      	subs	r3, #1
 800a25c:	2b02      	cmp	r3, #2
 800a25e:	d81e      	bhi.n	800a29e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	88db      	ldrh	r3, [r3, #6]
 800a264:	2b02      	cmp	r3, #2
 800a266:	d004      	beq.n	800a272 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a268:	6839      	ldr	r1, [r7, #0]
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 f891 	bl	800a392 <USBD_CtlError>
        break;
 800a270:	e01a      	b.n	800a2a8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2201      	movs	r2, #1
 800a276:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d005      	beq.n	800a28e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	f043 0202 	orr.w	r2, r3, #2
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	330c      	adds	r3, #12
 800a292:	2202      	movs	r2, #2
 800a294:	4619      	mov	r1, r3
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 f8e5 	bl	800a466 <USBD_CtlSendData>
      break;
 800a29c:	e004      	b.n	800a2a8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a29e:	6839      	ldr	r1, [r7, #0]
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f000 f876 	bl	800a392 <USBD_CtlError>
      break;
 800a2a6:	bf00      	nop
  }
}
 800a2a8:	bf00      	nop
 800a2aa:	3708      	adds	r7, #8
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	885b      	ldrh	r3, [r3, #2]
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d106      	bne.n	800a2d0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2201      	movs	r2, #1
 800a2c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 f929 	bl	800a522 <USBD_CtlSendStatus>
  }
}
 800a2d0:	bf00      	nop
 800a2d2:	3708      	adds	r7, #8
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b082      	sub	sp, #8
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2e8:	3b01      	subs	r3, #1
 800a2ea:	2b02      	cmp	r3, #2
 800a2ec:	d80b      	bhi.n	800a306 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	885b      	ldrh	r3, [r3, #2]
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d10c      	bne.n	800a310 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 f90f 	bl	800a522 <USBD_CtlSendStatus>
      }
      break;
 800a304:	e004      	b.n	800a310 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a306:	6839      	ldr	r1, [r7, #0]
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 f842 	bl	800a392 <USBD_CtlError>
      break;
 800a30e:	e000      	b.n	800a312 <USBD_ClrFeature+0x3a>
      break;
 800a310:	bf00      	nop
  }
}
 800a312:	bf00      	nop
 800a314:	3708      	adds	r7, #8
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}

0800a31a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a31a:	b480      	push	{r7}
 800a31c:	b083      	sub	sp, #12
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
 800a322:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	781a      	ldrb	r2, [r3, #0]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	785a      	ldrb	r2, [r3, #1]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	3302      	adds	r3, #2
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	b29a      	uxth	r2, r3
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	3303      	adds	r3, #3
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	b29b      	uxth	r3, r3
 800a344:	021b      	lsls	r3, r3, #8
 800a346:	b29b      	uxth	r3, r3
 800a348:	4413      	add	r3, r2
 800a34a:	b29a      	uxth	r2, r3
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	3304      	adds	r3, #4
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	b29a      	uxth	r2, r3
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	3305      	adds	r3, #5
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	b29b      	uxth	r3, r3
 800a360:	021b      	lsls	r3, r3, #8
 800a362:	b29b      	uxth	r3, r3
 800a364:	4413      	add	r3, r2
 800a366:	b29a      	uxth	r2, r3
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	3306      	adds	r3, #6
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	b29a      	uxth	r2, r3
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	3307      	adds	r3, #7
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	021b      	lsls	r3, r3, #8
 800a37e:	b29b      	uxth	r3, r3
 800a380:	4413      	add	r3, r2
 800a382:	b29a      	uxth	r2, r3
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	80da      	strh	r2, [r3, #6]

}
 800a388:	bf00      	nop
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bc80      	pop	{r7}
 800a390:	4770      	bx	lr

0800a392 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a392:	b580      	push	{r7, lr}
 800a394:	b082      	sub	sp, #8
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
 800a39a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a39c:	2180      	movs	r1, #128	; 0x80
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 fc74 	bl	800ac8c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a3a4:	2100      	movs	r1, #0
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 fc70 	bl	800ac8c <USBD_LL_StallEP>
}
 800a3ac:	bf00      	nop
 800a3ae:	3708      	adds	r7, #8
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b086      	sub	sp, #24
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	60f8      	str	r0, [r7, #12]
 800a3bc:	60b9      	str	r1, [r7, #8]
 800a3be:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d032      	beq.n	800a430 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a3ca:	68f8      	ldr	r0, [r7, #12]
 800a3cc:	f000 f834 	bl	800a438 <USBD_GetLen>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	005b      	lsls	r3, r3, #1
 800a3d8:	b29a      	uxth	r2, r3
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a3de:	7dfb      	ldrb	r3, [r7, #23]
 800a3e0:	1c5a      	adds	r2, r3, #1
 800a3e2:	75fa      	strb	r2, [r7, #23]
 800a3e4:	461a      	mov	r2, r3
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	4413      	add	r3, r2
 800a3ea:	687a      	ldr	r2, [r7, #4]
 800a3ec:	7812      	ldrb	r2, [r2, #0]
 800a3ee:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a3f0:	7dfb      	ldrb	r3, [r7, #23]
 800a3f2:	1c5a      	adds	r2, r3, #1
 800a3f4:	75fa      	strb	r2, [r7, #23]
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	2203      	movs	r2, #3
 800a3fe:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a400:	e012      	b.n	800a428 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	1c5a      	adds	r2, r3, #1
 800a406:	60fa      	str	r2, [r7, #12]
 800a408:	7dfa      	ldrb	r2, [r7, #23]
 800a40a:	1c51      	adds	r1, r2, #1
 800a40c:	75f9      	strb	r1, [r7, #23]
 800a40e:	4611      	mov	r1, r2
 800a410:	68ba      	ldr	r2, [r7, #8]
 800a412:	440a      	add	r2, r1
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a418:	7dfb      	ldrb	r3, [r7, #23]
 800a41a:	1c5a      	adds	r2, r3, #1
 800a41c:	75fa      	strb	r2, [r7, #23]
 800a41e:	461a      	mov	r2, r3
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	4413      	add	r3, r2
 800a424:	2200      	movs	r2, #0
 800a426:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d1e8      	bne.n	800a402 <USBD_GetString+0x4e>
    }
  }
}
 800a430:	bf00      	nop
 800a432:	3718      	adds	r7, #24
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a438:	b480      	push	{r7}
 800a43a:	b085      	sub	sp, #20
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a440:	2300      	movs	r3, #0
 800a442:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a444:	e005      	b.n	800a452 <USBD_GetLen+0x1a>
  {
    len++;
 800a446:	7bfb      	ldrb	r3, [r7, #15]
 800a448:	3301      	adds	r3, #1
 800a44a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	3301      	adds	r3, #1
 800a450:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d1f5      	bne.n	800a446 <USBD_GetLen+0xe>
  }

  return len;
 800a45a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3714      	adds	r7, #20
 800a460:	46bd      	mov	sp, r7
 800a462:	bc80      	pop	{r7}
 800a464:	4770      	bx	lr

0800a466 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a466:	b580      	push	{r7, lr}
 800a468:	b084      	sub	sp, #16
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	60f8      	str	r0, [r7, #12]
 800a46e:	60b9      	str	r1, [r7, #8]
 800a470:	4613      	mov	r3, r2
 800a472:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2202      	movs	r2, #2
 800a478:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a47c:	88fa      	ldrh	r2, [r7, #6]
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a482:	88fa      	ldrh	r2, [r7, #6]
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a488:	88fb      	ldrh	r3, [r7, #6]
 800a48a:	68ba      	ldr	r2, [r7, #8]
 800a48c:	2100      	movs	r1, #0
 800a48e:	68f8      	ldr	r0, [r7, #12]
 800a490:	f000 fc85 	bl	800ad9e <USBD_LL_Transmit>

  return USBD_OK;
 800a494:	2300      	movs	r3, #0
}
 800a496:	4618      	mov	r0, r3
 800a498:	3710      	adds	r7, #16
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}

0800a49e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a49e:	b580      	push	{r7, lr}
 800a4a0:	b084      	sub	sp, #16
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	60f8      	str	r0, [r7, #12]
 800a4a6:	60b9      	str	r1, [r7, #8]
 800a4a8:	4613      	mov	r3, r2
 800a4aa:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4ac:	88fb      	ldrh	r3, [r7, #6]
 800a4ae:	68ba      	ldr	r2, [r7, #8]
 800a4b0:	2100      	movs	r1, #0
 800a4b2:	68f8      	ldr	r0, [r7, #12]
 800a4b4:	f000 fc73 	bl	800ad9e <USBD_LL_Transmit>

  return USBD_OK;
 800a4b8:	2300      	movs	r3, #0
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}

0800a4c2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a4c2:	b580      	push	{r7, lr}
 800a4c4:	b084      	sub	sp, #16
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	60f8      	str	r0, [r7, #12]
 800a4ca:	60b9      	str	r1, [r7, #8]
 800a4cc:	4613      	mov	r3, r2
 800a4ce:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2203      	movs	r2, #3
 800a4d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a4d8:	88fa      	ldrh	r2, [r7, #6]
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a4e0:	88fa      	ldrh	r2, [r7, #6]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4e8:	88fb      	ldrh	r3, [r7, #6]
 800a4ea:	68ba      	ldr	r2, [r7, #8]
 800a4ec:	2100      	movs	r1, #0
 800a4ee:	68f8      	ldr	r0, [r7, #12]
 800a4f0:	f000 fc78 	bl	800ade4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4f4:	2300      	movs	r3, #0
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3710      	adds	r7, #16
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b084      	sub	sp, #16
 800a502:	af00      	add	r7, sp, #0
 800a504:	60f8      	str	r0, [r7, #12]
 800a506:	60b9      	str	r1, [r7, #8]
 800a508:	4613      	mov	r3, r2
 800a50a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a50c:	88fb      	ldrh	r3, [r7, #6]
 800a50e:	68ba      	ldr	r2, [r7, #8]
 800a510:	2100      	movs	r1, #0
 800a512:	68f8      	ldr	r0, [r7, #12]
 800a514:	f000 fc66 	bl	800ade4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a518:	2300      	movs	r3, #0
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3710      	adds	r7, #16
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}

0800a522 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a522:	b580      	push	{r7, lr}
 800a524:	b082      	sub	sp, #8
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2204      	movs	r2, #4
 800a52e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a532:	2300      	movs	r3, #0
 800a534:	2200      	movs	r2, #0
 800a536:	2100      	movs	r1, #0
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f000 fc30 	bl	800ad9e <USBD_LL_Transmit>

  return USBD_OK;
 800a53e:	2300      	movs	r3, #0
}
 800a540:	4618      	mov	r0, r3
 800a542:	3708      	adds	r7, #8
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b082      	sub	sp, #8
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2205      	movs	r2, #5
 800a554:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a558:	2300      	movs	r3, #0
 800a55a:	2200      	movs	r2, #0
 800a55c:	2100      	movs	r1, #0
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 fc40 	bl	800ade4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a564:	2300      	movs	r3, #0
}
 800a566:	4618      	mov	r0, r3
 800a568:	3708      	adds	r7, #8
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
	...

0800a570 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a574:	2200      	movs	r2, #0
 800a576:	4912      	ldr	r1, [pc, #72]	; (800a5c0 <MX_USB_DEVICE_Init+0x50>)
 800a578:	4812      	ldr	r0, [pc, #72]	; (800a5c4 <MX_USB_DEVICE_Init+0x54>)
 800a57a:	f7fe ff5e 	bl	800943a <USBD_Init>
 800a57e:	4603      	mov	r3, r0
 800a580:	2b00      	cmp	r3, #0
 800a582:	d001      	beq.n	800a588 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a584:	f7f7 faca 	bl	8001b1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a588:	490f      	ldr	r1, [pc, #60]	; (800a5c8 <MX_USB_DEVICE_Init+0x58>)
 800a58a:	480e      	ldr	r0, [pc, #56]	; (800a5c4 <MX_USB_DEVICE_Init+0x54>)
 800a58c:	f7fe ff80 	bl	8009490 <USBD_RegisterClass>
 800a590:	4603      	mov	r3, r0
 800a592:	2b00      	cmp	r3, #0
 800a594:	d001      	beq.n	800a59a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a596:	f7f7 fac1 	bl	8001b1c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a59a:	490c      	ldr	r1, [pc, #48]	; (800a5cc <MX_USB_DEVICE_Init+0x5c>)
 800a59c:	4809      	ldr	r0, [pc, #36]	; (800a5c4 <MX_USB_DEVICE_Init+0x54>)
 800a59e:	f7fe feb1 	bl	8009304 <USBD_CDC_RegisterInterface>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d001      	beq.n	800a5ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a5a8:	f7f7 fab8 	bl	8001b1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a5ac:	4805      	ldr	r0, [pc, #20]	; (800a5c4 <MX_USB_DEVICE_Init+0x54>)
 800a5ae:	f7fe ff88 	bl	80094c2 <USBD_Start>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d001      	beq.n	800a5bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a5b8:	f7f7 fab0 	bl	8001b1c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a5bc:	bf00      	nop
 800a5be:	bd80      	pop	{r7, pc}
 800a5c0:	20000130 	.word	0x20000130
 800a5c4:	2000041c 	.word	0x2000041c
 800a5c8:	2000001c 	.word	0x2000001c
 800a5cc:	20000120 	.word	0x20000120

0800a5d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	4905      	ldr	r1, [pc, #20]	; (800a5ec <CDC_Init_FS+0x1c>)
 800a5d8:	4805      	ldr	r0, [pc, #20]	; (800a5f0 <CDC_Init_FS+0x20>)
 800a5da:	f7fe fea9 	bl	8009330 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a5de:	4905      	ldr	r1, [pc, #20]	; (800a5f4 <CDC_Init_FS+0x24>)
 800a5e0:	4803      	ldr	r0, [pc, #12]	; (800a5f0 <CDC_Init_FS+0x20>)
 800a5e2:	f7fe febe 	bl	8009362 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a5e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	bd80      	pop	{r7, pc}
 800a5ec:	20000ac8 	.word	0x20000ac8
 800a5f0:	2000041c 	.word	0x2000041c
 800a5f4:	200006e0 	.word	0x200006e0

0800a5f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a5fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	46bd      	mov	sp, r7
 800a602:	bc80      	pop	{r7}
 800a604:	4770      	bx	lr
	...

0800a608 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a608:	b480      	push	{r7}
 800a60a:	b083      	sub	sp, #12
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	4603      	mov	r3, r0
 800a610:	6039      	str	r1, [r7, #0]
 800a612:	71fb      	strb	r3, [r7, #7]
 800a614:	4613      	mov	r3, r2
 800a616:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a618:	79fb      	ldrb	r3, [r7, #7]
 800a61a:	2b23      	cmp	r3, #35	; 0x23
 800a61c:	d84a      	bhi.n	800a6b4 <CDC_Control_FS+0xac>
 800a61e:	a201      	add	r2, pc, #4	; (adr r2, 800a624 <CDC_Control_FS+0x1c>)
 800a620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a624:	0800a6b5 	.word	0x0800a6b5
 800a628:	0800a6b5 	.word	0x0800a6b5
 800a62c:	0800a6b5 	.word	0x0800a6b5
 800a630:	0800a6b5 	.word	0x0800a6b5
 800a634:	0800a6b5 	.word	0x0800a6b5
 800a638:	0800a6b5 	.word	0x0800a6b5
 800a63c:	0800a6b5 	.word	0x0800a6b5
 800a640:	0800a6b5 	.word	0x0800a6b5
 800a644:	0800a6b5 	.word	0x0800a6b5
 800a648:	0800a6b5 	.word	0x0800a6b5
 800a64c:	0800a6b5 	.word	0x0800a6b5
 800a650:	0800a6b5 	.word	0x0800a6b5
 800a654:	0800a6b5 	.word	0x0800a6b5
 800a658:	0800a6b5 	.word	0x0800a6b5
 800a65c:	0800a6b5 	.word	0x0800a6b5
 800a660:	0800a6b5 	.word	0x0800a6b5
 800a664:	0800a6b5 	.word	0x0800a6b5
 800a668:	0800a6b5 	.word	0x0800a6b5
 800a66c:	0800a6b5 	.word	0x0800a6b5
 800a670:	0800a6b5 	.word	0x0800a6b5
 800a674:	0800a6b5 	.word	0x0800a6b5
 800a678:	0800a6b5 	.word	0x0800a6b5
 800a67c:	0800a6b5 	.word	0x0800a6b5
 800a680:	0800a6b5 	.word	0x0800a6b5
 800a684:	0800a6b5 	.word	0x0800a6b5
 800a688:	0800a6b5 	.word	0x0800a6b5
 800a68c:	0800a6b5 	.word	0x0800a6b5
 800a690:	0800a6b5 	.word	0x0800a6b5
 800a694:	0800a6b5 	.word	0x0800a6b5
 800a698:	0800a6b5 	.word	0x0800a6b5
 800a69c:	0800a6b5 	.word	0x0800a6b5
 800a6a0:	0800a6b5 	.word	0x0800a6b5
 800a6a4:	0800a6b5 	.word	0x0800a6b5
 800a6a8:	0800a6b5 	.word	0x0800a6b5
 800a6ac:	0800a6b5 	.word	0x0800a6b5
 800a6b0:	0800a6b5 	.word	0x0800a6b5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a6b4:	bf00      	nop
  }

  return (USBD_OK);
 800a6b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	370c      	adds	r7, #12
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bc80      	pop	{r7}
 800a6c0:	4770      	bx	lr
 800a6c2:	bf00      	nop

0800a6c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b084      	sub	sp, #16
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	uint8_t contador = 0;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	73fb      	strb	r3, [r7, #15]
	if(USB_FLAG == 0)
 800a6d2:	4b13      	ldr	r3, [pc, #76]	; (800a720 <CDC_Receive_FS+0x5c>)
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d11d      	bne.n	800a716 <CDC_Receive_FS+0x52>
	{
		 memset (buffer,'\0', 70);
 800a6da:	2246      	movs	r2, #70	; 0x46
 800a6dc:	2100      	movs	r1, #0
 800a6de:	4811      	ldr	r0, [pc, #68]	; (800a724 <CDC_Receive_FS+0x60>)
 800a6e0:	f000 fc34 	bl	800af4c <memset>
	 USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a6e4:	6879      	ldr	r1, [r7, #4]
 800a6e6:	4810      	ldr	r0, [pc, #64]	; (800a728 <CDC_Receive_FS+0x64>)
 800a6e8:	f7fe fe3b 	bl	8009362 <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a6ec:	480e      	ldr	r0, [pc, #56]	; (800a728 <CDC_Receive_FS+0x64>)
 800a6ee:	f7fe fe7a 	bl	80093e6 <USBD_CDC_ReceivePacket>
	  uint8_t len = (uint8_t) *Len;
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	73bb      	strb	r3, [r7, #14]
	  memcpy (buffer,Buf,len);
 800a6f8:	7bbb      	ldrb	r3, [r7, #14]
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	6879      	ldr	r1, [r7, #4]
 800a6fe:	4809      	ldr	r0, [pc, #36]	; (800a724 <CDC_Receive_FS+0x60>)
 800a700:	f000 fc16 	bl	800af30 <memcpy>
	  memset (Buf,'\0',len);
 800a704:	7bbb      	ldrb	r3, [r7, #14]
 800a706:	461a      	mov	r2, r3
 800a708:	2100      	movs	r1, #0
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 fc1e 	bl	800af4c <memset>
	/*  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);*/
	  USB_FLAG = 1;
 800a710:	4b03      	ldr	r3, [pc, #12]	; (800a720 <CDC_Receive_FS+0x5c>)
 800a712:	2201      	movs	r2, #1
 800a714:	701a      	strb	r2, [r3, #0]
	}
	return (USBD_OK);
 800a716:	2300      	movs	r3, #0


  /* USER CODE END 6 */
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3710      	adds	r7, #16
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}
 800a720:	200002b6 	.word	0x200002b6
 800a724:	20000270 	.word	0x20000270
 800a728:	2000041c 	.word	0x2000041c

0800a72c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	460b      	mov	r3, r1
 800a736:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a738:	2300      	movs	r3, #0
 800a73a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a73c:	4b0d      	ldr	r3, [pc, #52]	; (800a774 <CDC_Transmit_FS+0x48>)
 800a73e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a742:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d001      	beq.n	800a752 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a74e:	2301      	movs	r3, #1
 800a750:	e00b      	b.n	800a76a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a752:	887b      	ldrh	r3, [r7, #2]
 800a754:	461a      	mov	r2, r3
 800a756:	6879      	ldr	r1, [r7, #4]
 800a758:	4806      	ldr	r0, [pc, #24]	; (800a774 <CDC_Transmit_FS+0x48>)
 800a75a:	f7fe fde9 	bl	8009330 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a75e:	4805      	ldr	r0, [pc, #20]	; (800a774 <CDC_Transmit_FS+0x48>)
 800a760:	f7fe fe12 	bl	8009388 <USBD_CDC_TransmitPacket>
 800a764:	4603      	mov	r3, r0
 800a766:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a768:	7bfb      	ldrb	r3, [r7, #15]
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3710      	adds	r7, #16
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	2000041c 	.word	0x2000041c

0800a778 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a778:	b480      	push	{r7}
 800a77a:	b083      	sub	sp, #12
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	4603      	mov	r3, r0
 800a780:	6039      	str	r1, [r7, #0]
 800a782:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	2212      	movs	r2, #18
 800a788:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a78a:	4b03      	ldr	r3, [pc, #12]	; (800a798 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	370c      	adds	r7, #12
 800a790:	46bd      	mov	sp, r7
 800a792:	bc80      	pop	{r7}
 800a794:	4770      	bx	lr
 800a796:	bf00      	nop
 800a798:	2000014c 	.word	0x2000014c

0800a79c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b083      	sub	sp, #12
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	6039      	str	r1, [r7, #0]
 800a7a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	2204      	movs	r2, #4
 800a7ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a7ae:	4b03      	ldr	r3, [pc, #12]	; (800a7bc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	370c      	adds	r7, #12
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bc80      	pop	{r7}
 800a7b8:	4770      	bx	lr
 800a7ba:	bf00      	nop
 800a7bc:	20000160 	.word	0x20000160

0800a7c0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b082      	sub	sp, #8
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	6039      	str	r1, [r7, #0]
 800a7ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a7cc:	79fb      	ldrb	r3, [r7, #7]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d105      	bne.n	800a7de <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a7d2:	683a      	ldr	r2, [r7, #0]
 800a7d4:	4907      	ldr	r1, [pc, #28]	; (800a7f4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a7d6:	4808      	ldr	r0, [pc, #32]	; (800a7f8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a7d8:	f7ff fdec 	bl	800a3b4 <USBD_GetString>
 800a7dc:	e004      	b.n	800a7e8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a7de:	683a      	ldr	r2, [r7, #0]
 800a7e0:	4904      	ldr	r1, [pc, #16]	; (800a7f4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a7e2:	4805      	ldr	r0, [pc, #20]	; (800a7f8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a7e4:	f7ff fde6 	bl	800a3b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7e8:	4b02      	ldr	r3, [pc, #8]	; (800a7f4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3708      	adds	r7, #8
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	20000eb0 	.word	0x20000eb0
 800a7f8:	0800af84 	.word	0x0800af84

0800a7fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b082      	sub	sp, #8
 800a800:	af00      	add	r7, sp, #0
 800a802:	4603      	mov	r3, r0
 800a804:	6039      	str	r1, [r7, #0]
 800a806:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a808:	683a      	ldr	r2, [r7, #0]
 800a80a:	4904      	ldr	r1, [pc, #16]	; (800a81c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a80c:	4804      	ldr	r0, [pc, #16]	; (800a820 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a80e:	f7ff fdd1 	bl	800a3b4 <USBD_GetString>
  return USBD_StrDesc;
 800a812:	4b02      	ldr	r3, [pc, #8]	; (800a81c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a814:	4618      	mov	r0, r3
 800a816:	3708      	adds	r7, #8
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	20000eb0 	.word	0x20000eb0
 800a820:	0800af9c 	.word	0x0800af9c

0800a824 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
 800a82a:	4603      	mov	r3, r0
 800a82c:	6039      	str	r1, [r7, #0]
 800a82e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	221a      	movs	r2, #26
 800a834:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a836:	f000 f843 	bl	800a8c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a83a:	4b02      	ldr	r3, [pc, #8]	; (800a844 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3708      	adds	r7, #8
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}
 800a844:	20000164 	.word	0x20000164

0800a848 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	4603      	mov	r3, r0
 800a850:	6039      	str	r1, [r7, #0]
 800a852:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a854:	79fb      	ldrb	r3, [r7, #7]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d105      	bne.n	800a866 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a85a:	683a      	ldr	r2, [r7, #0]
 800a85c:	4907      	ldr	r1, [pc, #28]	; (800a87c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a85e:	4808      	ldr	r0, [pc, #32]	; (800a880 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a860:	f7ff fda8 	bl	800a3b4 <USBD_GetString>
 800a864:	e004      	b.n	800a870 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a866:	683a      	ldr	r2, [r7, #0]
 800a868:	4904      	ldr	r1, [pc, #16]	; (800a87c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a86a:	4805      	ldr	r0, [pc, #20]	; (800a880 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a86c:	f7ff fda2 	bl	800a3b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a870:	4b02      	ldr	r3, [pc, #8]	; (800a87c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a872:	4618      	mov	r0, r3
 800a874:	3708      	adds	r7, #8
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	bf00      	nop
 800a87c:	20000eb0 	.word	0x20000eb0
 800a880:	0800afb0 	.word	0x0800afb0

0800a884 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
 800a88a:	4603      	mov	r3, r0
 800a88c:	6039      	str	r1, [r7, #0]
 800a88e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a890:	79fb      	ldrb	r3, [r7, #7]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d105      	bne.n	800a8a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a896:	683a      	ldr	r2, [r7, #0]
 800a898:	4907      	ldr	r1, [pc, #28]	; (800a8b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a89a:	4808      	ldr	r0, [pc, #32]	; (800a8bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a89c:	f7ff fd8a 	bl	800a3b4 <USBD_GetString>
 800a8a0:	e004      	b.n	800a8ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a8a2:	683a      	ldr	r2, [r7, #0]
 800a8a4:	4904      	ldr	r1, [pc, #16]	; (800a8b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a8a6:	4805      	ldr	r0, [pc, #20]	; (800a8bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a8a8:	f7ff fd84 	bl	800a3b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8ac:	4b02      	ldr	r3, [pc, #8]	; (800a8b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3708      	adds	r7, #8
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	bf00      	nop
 800a8b8:	20000eb0 	.word	0x20000eb0
 800a8bc:	0800afbc 	.word	0x0800afbc

0800a8c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a8c6:	4b0f      	ldr	r3, [pc, #60]	; (800a904 <Get_SerialNum+0x44>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a8cc:	4b0e      	ldr	r3, [pc, #56]	; (800a908 <Get_SerialNum+0x48>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a8d2:	4b0e      	ldr	r3, [pc, #56]	; (800a90c <Get_SerialNum+0x4c>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a8d8:	68fa      	ldr	r2, [r7, #12]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	4413      	add	r3, r2
 800a8de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d009      	beq.n	800a8fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a8e6:	2208      	movs	r2, #8
 800a8e8:	4909      	ldr	r1, [pc, #36]	; (800a910 <Get_SerialNum+0x50>)
 800a8ea:	68f8      	ldr	r0, [r7, #12]
 800a8ec:	f000 f814 	bl	800a918 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a8f0:	2204      	movs	r2, #4
 800a8f2:	4908      	ldr	r1, [pc, #32]	; (800a914 <Get_SerialNum+0x54>)
 800a8f4:	68b8      	ldr	r0, [r7, #8]
 800a8f6:	f000 f80f 	bl	800a918 <IntToUnicode>
  }
}
 800a8fa:	bf00      	nop
 800a8fc:	3710      	adds	r7, #16
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
 800a902:	bf00      	nop
 800a904:	1ffff7e8 	.word	0x1ffff7e8
 800a908:	1ffff7ec 	.word	0x1ffff7ec
 800a90c:	1ffff7f0 	.word	0x1ffff7f0
 800a910:	20000166 	.word	0x20000166
 800a914:	20000176 	.word	0x20000176

0800a918 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a918:	b480      	push	{r7}
 800a91a:	b087      	sub	sp, #28
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	60f8      	str	r0, [r7, #12]
 800a920:	60b9      	str	r1, [r7, #8]
 800a922:	4613      	mov	r3, r2
 800a924:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a926:	2300      	movs	r3, #0
 800a928:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a92a:	2300      	movs	r3, #0
 800a92c:	75fb      	strb	r3, [r7, #23]
 800a92e:	e027      	b.n	800a980 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	0f1b      	lsrs	r3, r3, #28
 800a934:	2b09      	cmp	r3, #9
 800a936:	d80b      	bhi.n	800a950 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	0f1b      	lsrs	r3, r3, #28
 800a93c:	b2da      	uxtb	r2, r3
 800a93e:	7dfb      	ldrb	r3, [r7, #23]
 800a940:	005b      	lsls	r3, r3, #1
 800a942:	4619      	mov	r1, r3
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	440b      	add	r3, r1
 800a948:	3230      	adds	r2, #48	; 0x30
 800a94a:	b2d2      	uxtb	r2, r2
 800a94c:	701a      	strb	r2, [r3, #0]
 800a94e:	e00a      	b.n	800a966 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	0f1b      	lsrs	r3, r3, #28
 800a954:	b2da      	uxtb	r2, r3
 800a956:	7dfb      	ldrb	r3, [r7, #23]
 800a958:	005b      	lsls	r3, r3, #1
 800a95a:	4619      	mov	r1, r3
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	440b      	add	r3, r1
 800a960:	3237      	adds	r2, #55	; 0x37
 800a962:	b2d2      	uxtb	r2, r2
 800a964:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	011b      	lsls	r3, r3, #4
 800a96a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a96c:	7dfb      	ldrb	r3, [r7, #23]
 800a96e:	005b      	lsls	r3, r3, #1
 800a970:	3301      	adds	r3, #1
 800a972:	68ba      	ldr	r2, [r7, #8]
 800a974:	4413      	add	r3, r2
 800a976:	2200      	movs	r2, #0
 800a978:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a97a:	7dfb      	ldrb	r3, [r7, #23]
 800a97c:	3301      	adds	r3, #1
 800a97e:	75fb      	strb	r3, [r7, #23]
 800a980:	7dfa      	ldrb	r2, [r7, #23]
 800a982:	79fb      	ldrb	r3, [r7, #7]
 800a984:	429a      	cmp	r2, r3
 800a986:	d3d3      	bcc.n	800a930 <IntToUnicode+0x18>
  }
}
 800a988:	bf00      	nop
 800a98a:	bf00      	nop
 800a98c:	371c      	adds	r7, #28
 800a98e:	46bd      	mov	sp, r7
 800a990:	bc80      	pop	{r7}
 800a992:	4770      	bx	lr

0800a994 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b084      	sub	sp, #16
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4a0d      	ldr	r2, [pc, #52]	; (800a9d8 <HAL_PCD_MspInit+0x44>)
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d113      	bne.n	800a9ce <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a9a6:	4b0d      	ldr	r3, [pc, #52]	; (800a9dc <HAL_PCD_MspInit+0x48>)
 800a9a8:	69db      	ldr	r3, [r3, #28]
 800a9aa:	4a0c      	ldr	r2, [pc, #48]	; (800a9dc <HAL_PCD_MspInit+0x48>)
 800a9ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a9b0:	61d3      	str	r3, [r2, #28]
 800a9b2:	4b0a      	ldr	r3, [pc, #40]	; (800a9dc <HAL_PCD_MspInit+0x48>)
 800a9b4:	69db      	ldr	r3, [r3, #28]
 800a9b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a9ba:	60fb      	str	r3, [r7, #12]
 800a9bc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a9be:	2200      	movs	r2, #0
 800a9c0:	2100      	movs	r1, #0
 800a9c2:	2014      	movs	r0, #20
 800a9c4:	f7f7 fb7f 	bl	80020c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a9c8:	2014      	movs	r0, #20
 800a9ca:	f7f7 fb98 	bl	80020fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a9ce:	bf00      	nop
 800a9d0:	3710      	adds	r7, #16
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	40005c00 	.word	0x40005c00
 800a9dc:	40021000 	.word	0x40021000

0800a9e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b082      	sub	sp, #8
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	4610      	mov	r0, r2
 800a9f8:	f7fe fdab 	bl	8009552 <USBD_LL_SetupStage>
}
 800a9fc:	bf00      	nop
 800a9fe:	3708      	adds	r7, #8
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b082      	sub	sp, #8
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	460b      	mov	r3, r1
 800aa0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800aa16:	78fa      	ldrb	r2, [r7, #3]
 800aa18:	6879      	ldr	r1, [r7, #4]
 800aa1a:	4613      	mov	r3, r2
 800aa1c:	009b      	lsls	r3, r3, #2
 800aa1e:	4413      	add	r3, r2
 800aa20:	00db      	lsls	r3, r3, #3
 800aa22:	440b      	add	r3, r1
 800aa24:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	78fb      	ldrb	r3, [r7, #3]
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	f7fe fddd 	bl	80095ec <USBD_LL_DataOutStage>
}
 800aa32:	bf00      	nop
 800aa34:	3708      	adds	r7, #8
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b082      	sub	sp, #8
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
 800aa42:	460b      	mov	r3, r1
 800aa44:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800aa4c:	78fa      	ldrb	r2, [r7, #3]
 800aa4e:	6879      	ldr	r1, [r7, #4]
 800aa50:	4613      	mov	r3, r2
 800aa52:	009b      	lsls	r3, r3, #2
 800aa54:	4413      	add	r3, r2
 800aa56:	00db      	lsls	r3, r3, #3
 800aa58:	440b      	add	r3, r1
 800aa5a:	333c      	adds	r3, #60	; 0x3c
 800aa5c:	681a      	ldr	r2, [r3, #0]
 800aa5e:	78fb      	ldrb	r3, [r7, #3]
 800aa60:	4619      	mov	r1, r3
 800aa62:	f7fe fe34 	bl	80096ce <USBD_LL_DataInStage>
}
 800aa66:	bf00      	nop
 800aa68:	3708      	adds	r7, #8
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}

0800aa6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa6e:	b580      	push	{r7, lr}
 800aa70:	b082      	sub	sp, #8
 800aa72:	af00      	add	r7, sp, #0
 800aa74:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f7fe ff44 	bl	800990a <USBD_LL_SOF>
}
 800aa82:	bf00      	nop
 800aa84:	3708      	adds	r7, #8
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}

0800aa8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa8a:	b580      	push	{r7, lr}
 800aa8c:	b084      	sub	sp, #16
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aa92:	2301      	movs	r3, #1
 800aa94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	689b      	ldr	r3, [r3, #8]
 800aa9a:	2b02      	cmp	r3, #2
 800aa9c:	d001      	beq.n	800aaa2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aa9e:	f7f7 f83d 	bl	8001b1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aaa8:	7bfa      	ldrb	r2, [r7, #15]
 800aaaa:	4611      	mov	r1, r2
 800aaac:	4618      	mov	r0, r3
 800aaae:	f7fe fef4 	bl	800989a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aab8:	4618      	mov	r0, r3
 800aaba:	f7fe fead 	bl	8009818 <USBD_LL_Reset>
}
 800aabe:	bf00      	nop
 800aac0:	3710      	adds	r7, #16
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
	...

0800aac8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7fe feee 	bl	80098b8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	699b      	ldr	r3, [r3, #24]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d005      	beq.n	800aaf0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aae4:	4b04      	ldr	r3, [pc, #16]	; (800aaf8 <HAL_PCD_SuspendCallback+0x30>)
 800aae6:	691b      	ldr	r3, [r3, #16]
 800aae8:	4a03      	ldr	r2, [pc, #12]	; (800aaf8 <HAL_PCD_SuspendCallback+0x30>)
 800aaea:	f043 0306 	orr.w	r3, r3, #6
 800aaee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aaf0:	bf00      	nop
 800aaf2:	3708      	adds	r7, #8
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}
 800aaf8:	e000ed00 	.word	0xe000ed00

0800aafc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7fe fee8 	bl	80098e0 <USBD_LL_Resume>
}
 800ab10:	bf00      	nop
 800ab12:	3708      	adds	r7, #8
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ab20:	4a28      	ldr	r2, [pc, #160]	; (800abc4 <USBD_LL_Init+0xac>)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	4a26      	ldr	r2, [pc, #152]	; (800abc4 <USBD_LL_Init+0xac>)
 800ab2c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ab30:	4b24      	ldr	r3, [pc, #144]	; (800abc4 <USBD_LL_Init+0xac>)
 800ab32:	4a25      	ldr	r2, [pc, #148]	; (800abc8 <USBD_LL_Init+0xb0>)
 800ab34:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ab36:	4b23      	ldr	r3, [pc, #140]	; (800abc4 <USBD_LL_Init+0xac>)
 800ab38:	2208      	movs	r2, #8
 800ab3a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ab3c:	4b21      	ldr	r3, [pc, #132]	; (800abc4 <USBD_LL_Init+0xac>)
 800ab3e:	2202      	movs	r2, #2
 800ab40:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ab42:	4b20      	ldr	r3, [pc, #128]	; (800abc4 <USBD_LL_Init+0xac>)
 800ab44:	2200      	movs	r2, #0
 800ab46:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ab48:	4b1e      	ldr	r3, [pc, #120]	; (800abc4 <USBD_LL_Init+0xac>)
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ab4e:	4b1d      	ldr	r3, [pc, #116]	; (800abc4 <USBD_LL_Init+0xac>)
 800ab50:	2200      	movs	r2, #0
 800ab52:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ab54:	481b      	ldr	r0, [pc, #108]	; (800abc4 <USBD_LL_Init+0xac>)
 800ab56:	f7f7 ff97 	bl	8002a88 <HAL_PCD_Init>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d001      	beq.n	800ab64 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ab60:	f7f6 ffdc 	bl	8001b1c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab6a:	2318      	movs	r3, #24
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	2100      	movs	r1, #0
 800ab70:	f7f9 fc0b 	bl	800438a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab7a:	2358      	movs	r3, #88	; 0x58
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	2180      	movs	r1, #128	; 0x80
 800ab80:	f7f9 fc03 	bl	800438a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab8a:	23c0      	movs	r3, #192	; 0xc0
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	2181      	movs	r1, #129	; 0x81
 800ab90:	f7f9 fbfb 	bl	800438a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab9a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ab9e:	2200      	movs	r2, #0
 800aba0:	2101      	movs	r1, #1
 800aba2:	f7f9 fbf2 	bl	800438a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800abac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abb0:	2200      	movs	r2, #0
 800abb2:	2182      	movs	r1, #130	; 0x82
 800abb4:	f7f9 fbe9 	bl	800438a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800abb8:	2300      	movs	r3, #0
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3708      	adds	r7, #8
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	200010b0 	.word	0x200010b0
 800abc8:	40005c00 	.word	0x40005c00

0800abcc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abd4:	2300      	movs	r3, #0
 800abd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abd8:	2300      	movs	r3, #0
 800abda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abe2:	4618      	mov	r0, r3
 800abe4:	f7f8 f85b 	bl	8002c9e <HAL_PCD_Start>
 800abe8:	4603      	mov	r3, r0
 800abea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abec:	7bfb      	ldrb	r3, [r7, #15]
 800abee:	4618      	mov	r0, r3
 800abf0:	f000 f94e 	bl	800ae90 <USBD_Get_USB_Status>
 800abf4:	4603      	mov	r3, r0
 800abf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abf8:	7bbb      	ldrb	r3, [r7, #14]
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3710      	adds	r7, #16
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}

0800ac02 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ac02:	b580      	push	{r7, lr}
 800ac04:	b084      	sub	sp, #16
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	6078      	str	r0, [r7, #4]
 800ac0a:	4608      	mov	r0, r1
 800ac0c:	4611      	mov	r1, r2
 800ac0e:	461a      	mov	r2, r3
 800ac10:	4603      	mov	r3, r0
 800ac12:	70fb      	strb	r3, [r7, #3]
 800ac14:	460b      	mov	r3, r1
 800ac16:	70bb      	strb	r3, [r7, #2]
 800ac18:	4613      	mov	r3, r2
 800ac1a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac20:	2300      	movs	r3, #0
 800ac22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac2a:	78bb      	ldrb	r3, [r7, #2]
 800ac2c:	883a      	ldrh	r2, [r7, #0]
 800ac2e:	78f9      	ldrb	r1, [r7, #3]
 800ac30:	f7f8 f9d3 	bl	8002fda <HAL_PCD_EP_Open>
 800ac34:	4603      	mov	r3, r0
 800ac36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac38:	7bfb      	ldrb	r3, [r7, #15]
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f000 f928 	bl	800ae90 <USBD_Get_USB_Status>
 800ac40:	4603      	mov	r3, r0
 800ac42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac44:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3710      	adds	r7, #16
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}

0800ac4e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac4e:	b580      	push	{r7, lr}
 800ac50:	b084      	sub	sp, #16
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	6078      	str	r0, [r7, #4]
 800ac56:	460b      	mov	r3, r1
 800ac58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac68:	78fa      	ldrb	r2, [r7, #3]
 800ac6a:	4611      	mov	r1, r2
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f7f8 fa1a 	bl	80030a6 <HAL_PCD_EP_Close>
 800ac72:	4603      	mov	r3, r0
 800ac74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac76:	7bfb      	ldrb	r3, [r7, #15]
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f000 f909 	bl	800ae90 <USBD_Get_USB_Status>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac82:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3710      	adds	r7, #16
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b084      	sub	sp, #16
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	460b      	mov	r3, r1
 800ac96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aca6:	78fa      	ldrb	r2, [r7, #3]
 800aca8:	4611      	mov	r1, r2
 800acaa:	4618      	mov	r0, r3
 800acac:	f7f8 fada 	bl	8003264 <HAL_PCD_EP_SetStall>
 800acb0:	4603      	mov	r3, r0
 800acb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acb4:	7bfb      	ldrb	r3, [r7, #15]
 800acb6:	4618      	mov	r0, r3
 800acb8:	f000 f8ea 	bl	800ae90 <USBD_Get_USB_Status>
 800acbc:	4603      	mov	r3, r0
 800acbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acc0:	7bbb      	ldrb	r3, [r7, #14]
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3710      	adds	r7, #16
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}

0800acca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acca:	b580      	push	{r7, lr}
 800accc:	b084      	sub	sp, #16
 800acce:	af00      	add	r7, sp, #0
 800acd0:	6078      	str	r0, [r7, #4]
 800acd2:	460b      	mov	r3, r1
 800acd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acd6:	2300      	movs	r3, #0
 800acd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acda:	2300      	movs	r3, #0
 800acdc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ace4:	78fa      	ldrb	r2, [r7, #3]
 800ace6:	4611      	mov	r1, r2
 800ace8:	4618      	mov	r0, r3
 800acea:	f7f8 fb1b 	bl	8003324 <HAL_PCD_EP_ClrStall>
 800acee:	4603      	mov	r3, r0
 800acf0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acf2:	7bfb      	ldrb	r3, [r7, #15]
 800acf4:	4618      	mov	r0, r3
 800acf6:	f000 f8cb 	bl	800ae90 <USBD_Get_USB_Status>
 800acfa:	4603      	mov	r3, r0
 800acfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acfe:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3710      	adds	r7, #16
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b085      	sub	sp, #20
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	460b      	mov	r3, r1
 800ad12:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad1a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ad1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	da0c      	bge.n	800ad3e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ad24:	78fb      	ldrb	r3, [r7, #3]
 800ad26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad2a:	68f9      	ldr	r1, [r7, #12]
 800ad2c:	1c5a      	adds	r2, r3, #1
 800ad2e:	4613      	mov	r3, r2
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	4413      	add	r3, r2
 800ad34:	00db      	lsls	r3, r3, #3
 800ad36:	440b      	add	r3, r1
 800ad38:	3302      	adds	r3, #2
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	e00b      	b.n	800ad56 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ad3e:	78fb      	ldrb	r3, [r7, #3]
 800ad40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad44:	68f9      	ldr	r1, [r7, #12]
 800ad46:	4613      	mov	r3, r2
 800ad48:	009b      	lsls	r3, r3, #2
 800ad4a:	4413      	add	r3, r2
 800ad4c:	00db      	lsls	r3, r3, #3
 800ad4e:	440b      	add	r3, r1
 800ad50:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ad54:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3714      	adds	r7, #20
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bc80      	pop	{r7}
 800ad5e:	4770      	bx	lr

0800ad60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b084      	sub	sp, #16
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	460b      	mov	r3, r1
 800ad6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad70:	2300      	movs	r3, #0
 800ad72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad7a:	78fa      	ldrb	r2, [r7, #3]
 800ad7c:	4611      	mov	r1, r2
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f7f8 f906 	bl	8002f90 <HAL_PCD_SetAddress>
 800ad84:	4603      	mov	r3, r0
 800ad86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad88:	7bfb      	ldrb	r3, [r7, #15]
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f000 f880 	bl	800ae90 <USBD_Get_USB_Status>
 800ad90:	4603      	mov	r3, r0
 800ad92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad94:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3710      	adds	r7, #16
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}

0800ad9e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ad9e:	b580      	push	{r7, lr}
 800ada0:	b086      	sub	sp, #24
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	60f8      	str	r0, [r7, #12]
 800ada6:	607a      	str	r2, [r7, #4]
 800ada8:	461a      	mov	r2, r3
 800adaa:	460b      	mov	r3, r1
 800adac:	72fb      	strb	r3, [r7, #11]
 800adae:	4613      	mov	r3, r2
 800adb0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adb2:	2300      	movs	r3, #0
 800adb4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adb6:	2300      	movs	r3, #0
 800adb8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800adc0:	893b      	ldrh	r3, [r7, #8]
 800adc2:	7af9      	ldrb	r1, [r7, #11]
 800adc4:	687a      	ldr	r2, [r7, #4]
 800adc6:	f7f8 fa0a 	bl	80031de <HAL_PCD_EP_Transmit>
 800adca:	4603      	mov	r3, r0
 800adcc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adce:	7dfb      	ldrb	r3, [r7, #23]
 800add0:	4618      	mov	r0, r3
 800add2:	f000 f85d 	bl	800ae90 <USBD_Get_USB_Status>
 800add6:	4603      	mov	r3, r0
 800add8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800adda:	7dbb      	ldrb	r3, [r7, #22]
}
 800addc:	4618      	mov	r0, r3
 800adde:	3718      	adds	r7, #24
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b086      	sub	sp, #24
 800ade8:	af00      	add	r7, sp, #0
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	607a      	str	r2, [r7, #4]
 800adee:	461a      	mov	r2, r3
 800adf0:	460b      	mov	r3, r1
 800adf2:	72fb      	strb	r3, [r7, #11]
 800adf4:	4613      	mov	r3, r2
 800adf6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adf8:	2300      	movs	r3, #0
 800adfa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adfc:	2300      	movs	r3, #0
 800adfe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ae06:	893b      	ldrh	r3, [r7, #8]
 800ae08:	7af9      	ldrb	r1, [r7, #11]
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	f7f8 f993 	bl	8003136 <HAL_PCD_EP_Receive>
 800ae10:	4603      	mov	r3, r0
 800ae12:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae14:	7dfb      	ldrb	r3, [r7, #23]
 800ae16:	4618      	mov	r0, r3
 800ae18:	f000 f83a 	bl	800ae90 <USBD_Get_USB_Status>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae20:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3718      	adds	r7, #24
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}

0800ae2a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae2a:	b580      	push	{r7, lr}
 800ae2c:	b082      	sub	sp, #8
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
 800ae32:	460b      	mov	r3, r1
 800ae34:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae3c:	78fa      	ldrb	r2, [r7, #3]
 800ae3e:	4611      	mov	r1, r2
 800ae40:	4618      	mov	r0, r3
 800ae42:	f7f8 f9b5 	bl	80031b0 <HAL_PCD_EP_GetRxCount>
 800ae46:	4603      	mov	r3, r0
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3708      	adds	r7, #8
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b083      	sub	sp, #12
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ae58:	4b02      	ldr	r3, [pc, #8]	; (800ae64 <USBD_static_malloc+0x14>)
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	370c      	adds	r7, #12
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bc80      	pop	{r7}
 800ae62:	4770      	bx	lr
 800ae64:	2000139c 	.word	0x2000139c

0800ae68 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b083      	sub	sp, #12
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]

}
 800ae70:	bf00      	nop
 800ae72:	370c      	adds	r7, #12
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bc80      	pop	{r7}
 800ae78:	4770      	bx	lr

0800ae7a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae7a:	b480      	push	{r7}
 800ae7c:	b083      	sub	sp, #12
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
 800ae82:	460b      	mov	r3, r1
 800ae84:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ae86:	bf00      	nop
 800ae88:	370c      	adds	r7, #12
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bc80      	pop	{r7}
 800ae8e:	4770      	bx	lr

0800ae90 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b085      	sub	sp, #20
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	4603      	mov	r3, r0
 800ae98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ae9e:	79fb      	ldrb	r3, [r7, #7]
 800aea0:	2b03      	cmp	r3, #3
 800aea2:	d817      	bhi.n	800aed4 <USBD_Get_USB_Status+0x44>
 800aea4:	a201      	add	r2, pc, #4	; (adr r2, 800aeac <USBD_Get_USB_Status+0x1c>)
 800aea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeaa:	bf00      	nop
 800aeac:	0800aebd 	.word	0x0800aebd
 800aeb0:	0800aec3 	.word	0x0800aec3
 800aeb4:	0800aec9 	.word	0x0800aec9
 800aeb8:	0800aecf 	.word	0x0800aecf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aebc:	2300      	movs	r3, #0
 800aebe:	73fb      	strb	r3, [r7, #15]
    break;
 800aec0:	e00b      	b.n	800aeda <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aec2:	2302      	movs	r3, #2
 800aec4:	73fb      	strb	r3, [r7, #15]
    break;
 800aec6:	e008      	b.n	800aeda <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aec8:	2301      	movs	r3, #1
 800aeca:	73fb      	strb	r3, [r7, #15]
    break;
 800aecc:	e005      	b.n	800aeda <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aece:	2302      	movs	r3, #2
 800aed0:	73fb      	strb	r3, [r7, #15]
    break;
 800aed2:	e002      	b.n	800aeda <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aed4:	2302      	movs	r3, #2
 800aed6:	73fb      	strb	r3, [r7, #15]
    break;
 800aed8:	bf00      	nop
  }
  return usb_status;
 800aeda:	7bfb      	ldrb	r3, [r7, #15]
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3714      	adds	r7, #20
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bc80      	pop	{r7}
 800aee4:	4770      	bx	lr
 800aee6:	bf00      	nop

0800aee8 <__libc_init_array>:
 800aee8:	b570      	push	{r4, r5, r6, lr}
 800aeea:	2600      	movs	r6, #0
 800aeec:	4d0c      	ldr	r5, [pc, #48]	; (800af20 <__libc_init_array+0x38>)
 800aeee:	4c0d      	ldr	r4, [pc, #52]	; (800af24 <__libc_init_array+0x3c>)
 800aef0:	1b64      	subs	r4, r4, r5
 800aef2:	10a4      	asrs	r4, r4, #2
 800aef4:	42a6      	cmp	r6, r4
 800aef6:	d109      	bne.n	800af0c <__libc_init_array+0x24>
 800aef8:	f000 f830 	bl	800af5c <_init>
 800aefc:	2600      	movs	r6, #0
 800aefe:	4d0a      	ldr	r5, [pc, #40]	; (800af28 <__libc_init_array+0x40>)
 800af00:	4c0a      	ldr	r4, [pc, #40]	; (800af2c <__libc_init_array+0x44>)
 800af02:	1b64      	subs	r4, r4, r5
 800af04:	10a4      	asrs	r4, r4, #2
 800af06:	42a6      	cmp	r6, r4
 800af08:	d105      	bne.n	800af16 <__libc_init_array+0x2e>
 800af0a:	bd70      	pop	{r4, r5, r6, pc}
 800af0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800af10:	4798      	blx	r3
 800af12:	3601      	adds	r6, #1
 800af14:	e7ee      	b.n	800aef4 <__libc_init_array+0xc>
 800af16:	f855 3b04 	ldr.w	r3, [r5], #4
 800af1a:	4798      	blx	r3
 800af1c:	3601      	adds	r6, #1
 800af1e:	e7f2      	b.n	800af06 <__libc_init_array+0x1e>
 800af20:	0800afe4 	.word	0x0800afe4
 800af24:	0800afe4 	.word	0x0800afe4
 800af28:	0800afe4 	.word	0x0800afe4
 800af2c:	0800afe8 	.word	0x0800afe8

0800af30 <memcpy>:
 800af30:	440a      	add	r2, r1
 800af32:	4291      	cmp	r1, r2
 800af34:	f100 33ff 	add.w	r3, r0, #4294967295
 800af38:	d100      	bne.n	800af3c <memcpy+0xc>
 800af3a:	4770      	bx	lr
 800af3c:	b510      	push	{r4, lr}
 800af3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af42:	4291      	cmp	r1, r2
 800af44:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af48:	d1f9      	bne.n	800af3e <memcpy+0xe>
 800af4a:	bd10      	pop	{r4, pc}

0800af4c <memset>:
 800af4c:	4603      	mov	r3, r0
 800af4e:	4402      	add	r2, r0
 800af50:	4293      	cmp	r3, r2
 800af52:	d100      	bne.n	800af56 <memset+0xa>
 800af54:	4770      	bx	lr
 800af56:	f803 1b01 	strb.w	r1, [r3], #1
 800af5a:	e7f9      	b.n	800af50 <memset+0x4>

0800af5c <_init>:
 800af5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af5e:	bf00      	nop
 800af60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af62:	bc08      	pop	{r3}
 800af64:	469e      	mov	lr, r3
 800af66:	4770      	bx	lr

0800af68 <_fini>:
 800af68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af6a:	bf00      	nop
 800af6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af6e:	bc08      	pop	{r3}
 800af70:	469e      	mov	lr, r3
 800af72:	4770      	bx	lr
