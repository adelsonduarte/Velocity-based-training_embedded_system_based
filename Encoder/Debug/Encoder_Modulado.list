
Encoder_Modulado.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  0800a7f0  0800a7f0  0001a7f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a954  0800a954  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a954  0800a954  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a954  0800a954  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a954  0800a954  0001a954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a958  0800a958  0001a958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a95c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001468  200001e8  0800ab44  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001650  0800ab44  00021650  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014267  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039a7  00000000  00000000  00034478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  00037e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001068  00000000  00000000  00039060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c419  00000000  00000000  0003a0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000167a8  00000000  00000000  000564e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f427  00000000  00000000  0006cc89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fc0b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005160  00000000  00000000  000fc100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e8 	.word	0x200001e8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a7d8 	.word	0x0800a7d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001ec 	.word	0x200001ec
 8000148:	0800a7d8 	.word	0x0800a7d8

0800014c <set_ID>:
#include <stdio.h>
#include <stdlib.h>
#include "Configuracao.h"
#include "Data.h"

unsigned char* set_ID(struct communicationStruct *dataReceiver){
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    unsigned char* codCefise;
//  FLASH_apaga(END_INICIAL, 1);
    codCefise = set_device_ID_struct(&(dataReceiver->destinationAdress));
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	3302      	adds	r3, #2
 8000158:	4618      	mov	r0, r3
 800015a:	f000 f94d 	bl	80003f8 <set_device_ID_struct>
 800015e:	60f8      	str	r0, [r7, #12]
//    printf("endereï¿½o codCefise = %d\n",codCefise);
//    printf("conteudo codCefise = %p\n",*codCefise);
//    FLASH_escreve_16bits(END_INICIAL, codCefise);
    return codCefise;
 8000160:	68fb      	ldr	r3, [r7, #12]
}
 8000162:	4618      	mov	r0, r3
 8000164:	3710      	adds	r7, #16
 8000166:	46bd      	mov	sp, r7
 8000168:	bd80      	pop	{r7, pc}

0800016a <get_ID>:

unsigned char* get_ID(){
 800016a:	b580      	push	{r7, lr}
 800016c:	b082      	sub	sp, #8
 800016e:	af00      	add	r7, sp, #0
    unsigned char* codCefise;
    codCefise = get_device_ID_struct();
 8000170:	f000 f954 	bl	800041c <get_device_ID_struct>
 8000174:	6078      	str	r0, [r7, #4]
    //FLASH_le_16bits(END_INICIAL, (codCefise);
    return codCefise;
 8000176:	687b      	ldr	r3, [r7, #4]
}
 8000178:	4618      	mov	r0, r3
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}

08000180 <set_frequency_samples>:

unsigned char* set_frequency_samples(struct communicationStruct *dataReceiver){
 8000180:	b580      	push	{r7, lr}
 8000182:	b084      	sub	sp, #16
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
    unsigned char* period;
    period = set_device_frequency_struct(&(dataReceiver->payload));
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	3305      	adds	r3, #5
 800018c:	4618      	mov	r0, r3
 800018e:	f000 f971 	bl	8000474 <set_device_frequency_struct>
 8000192:	4603      	mov	r3, r0
 8000194:	60fb      	str	r3, [r7, #12]
    return period;
 8000196:	68fb      	ldr	r3, [r7, #12]
}
 8000198:	4618      	mov	r0, r3
 800019a:	3710      	adds	r7, #16
 800019c:	46bd      	mov	sp, r7
 800019e:	bd80      	pop	{r7, pc}

080001a0 <set_operation_mode>:

unsigned char* set_operation_mode(struct communicationStruct *dataReceiver){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b084      	sub	sp, #16
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
    unsigned char* mode;
    mode = set_device_mode_struct(&(dataReceiver->payload));
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	3305      	adds	r3, #5
 80001ac:	4618      	mov	r0, r3
 80001ae:	f000 f975 	bl	800049c <set_device_mode_struct>
 80001b2:	4603      	mov	r3, r0
 80001b4:	60fb      	str	r3, [r7, #12]
    return mode;
 80001b6:	68fb      	ldr	r3, [r7, #12]
}
 80001b8:	4618      	mov	r0, r3
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}

080001c0 <get_data>:
struct deviceStruct dataDevice;
struct deviceStruct* ptr_dataDevice = &dataDevice;


char* get_data(char *data)
{
 80001c0:	b590      	push	{r4, r7, lr}
 80001c2:	b085      	sub	sp, #20
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]
  static char receive_Data[SIZE_DATA];

  receive_Data[0] = get_header_start(data);
 80001c8:	6878      	ldr	r0, [r7, #4]
 80001ca:	f000 fd2d 	bl	8000c28 <get_header_start>
 80001ce:	4603      	mov	r3, r0
 80001d0:	461a      	mov	r2, r3
 80001d2:	4b34      	ldr	r3, [pc, #208]	; (80002a4 <get_data+0xe4>)
 80001d4:	701a      	strb	r2, [r3, #0]

  receive_Data[1] = get_source_address(data);
 80001d6:	6878      	ldr	r0, [r7, #4]
 80001d8:	f000 fd31 	bl	8000c3e <get_source_address>
 80001dc:	4603      	mov	r3, r0
 80001de:	461a      	mov	r2, r3
 80001e0:	4b30      	ldr	r3, [pc, #192]	; (80002a4 <get_data+0xe4>)
 80001e2:	705a      	strb	r2, [r3, #1]

  receive_Data[2] = get_destination_address(data);
 80001e4:	6878      	ldr	r0, [r7, #4]
 80001e6:	f000 fd36 	bl	8000c56 <get_destination_address>
 80001ea:	4603      	mov	r3, r0
 80001ec:	461a      	mov	r2, r3
 80001ee:	4b2d      	ldr	r3, [pc, #180]	; (80002a4 <get_data+0xe4>)
 80001f0:	709a      	strb	r2, [r3, #2]

  receive_Data[3] = get_function(data);
 80001f2:	6878      	ldr	r0, [r7, #4]
 80001f4:	f000 fd3b 	bl	8000c6e <get_function>
 80001f8:	4603      	mov	r3, r0
 80001fa:	461a      	mov	r2, r3
 80001fc:	4b29      	ldr	r3, [pc, #164]	; (80002a4 <get_data+0xe4>)
 80001fe:	70da      	strb	r2, [r3, #3]

  receive_Data[4] = get_payload_size(data);
 8000200:	6878      	ldr	r0, [r7, #4]
 8000202:	f000 fd40 	bl	8000c86 <get_payload_size>
 8000206:	4603      	mov	r3, r0
 8000208:	461a      	mov	r2, r3
 800020a:	4b26      	ldr	r3, [pc, #152]	; (80002a4 <get_data+0xe4>)
 800020c:	711a      	strb	r2, [r3, #4]

  for(unsigned char idx=0;idx<get_payload_size(data);idx++)
 800020e:	2300      	movs	r3, #0
 8000210:	73fb      	strb	r3, [r7, #15]
 8000212:	e00d      	b.n	8000230 <get_data+0x70>
  {
    receive_Data[5+idx] = get_payload(data,idx);
 8000214:	7bfb      	ldrb	r3, [r7, #15]
 8000216:	1d5c      	adds	r4, r3, #5
 8000218:	7bfb      	ldrb	r3, [r7, #15]
 800021a:	4619      	mov	r1, r3
 800021c:	6878      	ldr	r0, [r7, #4]
 800021e:	f000 fd3e 	bl	8000c9e <get_payload>
 8000222:	4603      	mov	r3, r0
 8000224:	461a      	mov	r2, r3
 8000226:	4b1f      	ldr	r3, [pc, #124]	; (80002a4 <get_data+0xe4>)
 8000228:	551a      	strb	r2, [r3, r4]
  for(unsigned char idx=0;idx<get_payload_size(data);idx++)
 800022a:	7bfb      	ldrb	r3, [r7, #15]
 800022c:	3301      	adds	r3, #1
 800022e:	73fb      	strb	r3, [r7, #15]
 8000230:	6878      	ldr	r0, [r7, #4]
 8000232:	f000 fd28 	bl	8000c86 <get_payload_size>
 8000236:	4603      	mov	r3, r0
 8000238:	461a      	mov	r2, r3
 800023a:	7bfb      	ldrb	r3, [r7, #15]
 800023c:	4293      	cmp	r3, r2
 800023e:	d3e9      	bcc.n	8000214 <get_data+0x54>
  }
    receive_Data[5+get_payload_size(data)] = get_checksum(data);
 8000240:	6878      	ldr	r0, [r7, #4]
 8000242:	f000 fd20 	bl	8000c86 <get_payload_size>
 8000246:	4603      	mov	r3, r0
 8000248:	1d5c      	adds	r4, r3, #5
 800024a:	6878      	ldr	r0, [r7, #4]
 800024c:	f000 fd38 	bl	8000cc0 <get_checksum>
 8000250:	4603      	mov	r3, r0
 8000252:	461a      	mov	r2, r3
 8000254:	4b13      	ldr	r3, [pc, #76]	; (80002a4 <get_data+0xe4>)
 8000256:	551a      	strb	r2, [r3, r4]

    receive_Data[6+get_payload_size(data)] = get_header_end(data);
 8000258:	6878      	ldr	r0, [r7, #4]
 800025a:	f000 fd14 	bl	8000c86 <get_payload_size>
 800025e:	4603      	mov	r3, r0
 8000260:	1d9c      	adds	r4, r3, #6
 8000262:	6878      	ldr	r0, [r7, #4]
 8000264:	f000 fd3d 	bl	8000ce2 <get_header_end>
 8000268:	4603      	mov	r3, r0
 800026a:	461a      	mov	r2, r3
 800026c:	4b0d      	ldr	r3, [pc, #52]	; (80002a4 <get_data+0xe4>)
 800026e:	551a      	strb	r2, [r3, r4]

    receive_Data[7+get_payload_size(data)] = get_array_end();
 8000270:	6878      	ldr	r0, [r7, #4]
 8000272:	f000 fd08 	bl	8000c86 <get_payload_size>
 8000276:	4603      	mov	r3, r0
 8000278:	1ddc      	adds	r4, r3, #7
 800027a:	f000 fd43 	bl	8000d04 <get_array_end>
 800027e:	4603      	mov	r3, r0
 8000280:	461a      	mov	r2, r3
 8000282:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <get_data+0xe4>)
 8000284:	551a      	strb	r2, [r3, r4]


    printf("endereÃ§o de receive_Data = %d\n",receive_Data);
 8000286:	4907      	ldr	r1, [pc, #28]	; (80002a4 <get_data+0xe4>)
 8000288:	4807      	ldr	r0, [pc, #28]	; (80002a8 <get_data+0xe8>)
 800028a:	f009 fb11 	bl	80098b0 <iprintf>
    printf("conteudo de receive_Data = %p\n",*receive_Data);
 800028e:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <get_data+0xe4>)
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	4619      	mov	r1, r3
 8000294:	4805      	ldr	r0, [pc, #20]	; (80002ac <get_data+0xec>)
 8000296:	f009 fb0b 	bl	80098b0 <iprintf>
   return receive_Data;
 800029a:	4b02      	ldr	r3, [pc, #8]	; (80002a4 <get_data+0xe4>)
}
 800029c:	4618      	mov	r0, r3
 800029e:	3714      	adds	r7, #20
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd90      	pop	{r4, r7, pc}
 80002a4:	2000024c 	.word	0x2000024c
 80002a8:	0800a7f0 	.word	0x0800a7f0
 80002ac:	0800a810 	.word	0x0800a810

080002b0 <set_receive_data_struct>:

struct communicationStruct* set_receive_data_struct(char* rawData){
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]

    static struct communicationStruct dataReceive = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    struct communicationStruct* ptr_dataReceive = &dataReceive;
 80002b8:	4b24      	ldr	r3, [pc, #144]	; (800034c <set_receive_data_struct+0x9c>)
 80002ba:	60bb      	str	r3, [r7, #8]
    ptr_dataReceive->startHeader = rawData[0];
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	781a      	ldrb	r2, [r3, #0]
 80002c0:	68bb      	ldr	r3, [r7, #8]
 80002c2:	701a      	strb	r2, [r3, #0]
    ptr_dataReceive->sourceAdress = rawData[1];
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	3301      	adds	r3, #1
 80002c8:	781a      	ldrb	r2, [r3, #0]
 80002ca:	68bb      	ldr	r3, [r7, #8]
 80002cc:	705a      	strb	r2, [r3, #1]
    ptr_dataReceive->destinationAdress = rawData[2];
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	3302      	adds	r3, #2
 80002d2:	781a      	ldrb	r2, [r3, #0]
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	709a      	strb	r2, [r3, #2]
    ptr_dataReceive->function = rawData[3];
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	3303      	adds	r3, #3
 80002dc:	781a      	ldrb	r2, [r3, #0]
 80002de:	68bb      	ldr	r3, [r7, #8]
 80002e0:	70da      	strb	r2, [r3, #3]
    ptr_dataReceive->payloadSize = rawData[4];
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	3304      	adds	r3, #4
 80002e6:	781a      	ldrb	r2, [r3, #0]
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	711a      	strb	r2, [r3, #4]
    for(unsigned char idx=0;idx<ptr_dataReceive->payloadSize;idx++){
 80002ec:	2300      	movs	r3, #0
 80002ee:	73fb      	strb	r3, [r7, #15]
 80002f0:	e00d      	b.n	800030e <set_receive_data_struct+0x5e>
        ptr_dataReceive->payload[idx] = rawData[5+idx];
 80002f2:	7bfb      	ldrb	r3, [r7, #15]
 80002f4:	3305      	adds	r3, #5
 80002f6:	461a      	mov	r2, r3
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	441a      	add	r2, r3
 80002fc:	7bfb      	ldrb	r3, [r7, #15]
 80002fe:	7811      	ldrb	r1, [r2, #0]
 8000300:	68ba      	ldr	r2, [r7, #8]
 8000302:	4413      	add	r3, r2
 8000304:	460a      	mov	r2, r1
 8000306:	715a      	strb	r2, [r3, #5]
    for(unsigned char idx=0;idx<ptr_dataReceive->payloadSize;idx++){
 8000308:	7bfb      	ldrb	r3, [r7, #15]
 800030a:	3301      	adds	r3, #1
 800030c:	73fb      	strb	r3, [r7, #15]
 800030e:	68bb      	ldr	r3, [r7, #8]
 8000310:	791b      	ldrb	r3, [r3, #4]
 8000312:	7bfa      	ldrb	r2, [r7, #15]
 8000314:	429a      	cmp	r2, r3
 8000316:	d3ec      	bcc.n	80002f2 <set_receive_data_struct+0x42>
    }
    ptr_dataReceive->checksum = rawData[5+ptr_dataReceive->payloadSize];
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	791b      	ldrb	r3, [r3, #4]
 800031c:	3305      	adds	r3, #5
 800031e:	461a      	mov	r2, r3
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	4413      	add	r3, r2
 8000324:	781a      	ldrb	r2, [r3, #0]
 8000326:	68bb      	ldr	r3, [r7, #8]
 8000328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    ptr_dataReceive->endHeader = rawData[6+ptr_dataReceive->payloadSize];
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	791b      	ldrb	r3, [r3, #4]
 8000330:	3306      	adds	r3, #6
 8000332:	461a      	mov	r2, r3
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	4413      	add	r3, r2
 8000338:	781a      	ldrb	r2, [r3, #0]
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    return ptr_dataReceive;
 8000340:	68bb      	ldr	r3, [r7, #8]
}
 8000342:	4618      	mov	r0, r3
 8000344:	3714      	adds	r7, #20
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr
 800034c:	20000258 	.word	0x20000258

08000350 <set_transmission_data_struct>:

struct communicationStruct* set_transmission_data_struct(unsigned char* rawData){
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]

    static struct communicationStruct dataTransmission;
    struct communicationStruct* ptr_dataTransmission = &dataTransmission;
 8000358:	4b24      	ldr	r3, [pc, #144]	; (80003ec <set_transmission_data_struct+0x9c>)
 800035a:	60fb      	str	r3, [r7, #12]
    unsigned char* payload;
    ptr_dataTransmission->startHeader = HEADER;
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	220a      	movs	r2, #10
 8000360:	701a      	strb	r2, [r3, #0]
    ptr_dataTransmission->sourceAdress = ptr_dataDevice->id;
 8000362:	4b23      	ldr	r3, [pc, #140]	; (80003f0 <set_transmission_data_struct+0xa0>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	781a      	ldrb	r2, [r3, #0]
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	705a      	strb	r2, [r3, #1]
    ptr_dataTransmission->destinationAdress = DESTINATION;
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	22c0      	movs	r2, #192	; 0xc0
 8000370:	709a      	strb	r2, [r3, #2]
    ptr_dataTransmission->function = rawData[0];
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	781a      	ldrb	r2, [r3, #0]
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	70da      	strb	r2, [r3, #3]
    ptr_dataTransmission->payloadSize = rawData[1];
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	785a      	ldrb	r2, [r3, #1]
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	711a      	strb	r2, [r3, #4]
    if(ptr_dataTransmission->payloadSize>0) payload = get_transmitt_payload(&(ptr_dataTransmission->function));
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	791b      	ldrb	r3, [r3, #4]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d005      	beq.n	8000396 <set_transmission_data_struct+0x46>
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	3303      	adds	r3, #3
 800038e:	4618      	mov	r0, r3
 8000390:	f000 f852 	bl	8000438 <get_transmitt_payload>
 8000394:	6178      	str	r0, [r7, #20]
    for(unsigned char idx=0;idx<ptr_dataTransmission->payloadSize;idx++){
 8000396:	2300      	movs	r3, #0
 8000398:	74fb      	strb	r3, [r7, #19]
 800039a:	e00b      	b.n	80003b4 <set_transmission_data_struct+0x64>
        ptr_dataTransmission->payload[idx] = payload[idx];
 800039c:	7cfb      	ldrb	r3, [r7, #19]
 800039e:	697a      	ldr	r2, [r7, #20]
 80003a0:	441a      	add	r2, r3
 80003a2:	7cfb      	ldrb	r3, [r7, #19]
 80003a4:	7811      	ldrb	r1, [r2, #0]
 80003a6:	68fa      	ldr	r2, [r7, #12]
 80003a8:	4413      	add	r3, r2
 80003aa:	460a      	mov	r2, r1
 80003ac:	715a      	strb	r2, [r3, #5]
    for(unsigned char idx=0;idx<ptr_dataTransmission->payloadSize;idx++){
 80003ae:	7cfb      	ldrb	r3, [r7, #19]
 80003b0:	3301      	adds	r3, #1
 80003b2:	74fb      	strb	r3, [r7, #19]
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	791b      	ldrb	r3, [r3, #4]
 80003b8:	7cfa      	ldrb	r2, [r7, #19]
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d3ee      	bcc.n	800039c <set_transmission_data_struct+0x4c>
    }
    ptr_dataTransmission->checksum = set_checksum(ptr_dataTransmission, sizeof(*ptr_dataTransmission));
 80003be:	2143      	movs	r1, #67	; 0x43
 80003c0:	68f8      	ldr	r0, [r7, #12]
 80003c2:	f000 f8e5 	bl	8000590 <set_checksum>
 80003c6:	4603      	mov	r3, r0
 80003c8:	461a      	mov	r2, r3
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    ptr_dataTransmission->endHeader = END;
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	220f      	movs	r2, #15
 80003d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    printf("Endereco ptr_dataTransmission = %d\n",ptr_dataTransmission);
 80003d8:	68f9      	ldr	r1, [r7, #12]
 80003da:	4806      	ldr	r0, [pc, #24]	; (80003f4 <set_transmission_data_struct+0xa4>)
 80003dc:	f009 fa68 	bl	80098b0 <iprintf>
    return ptr_dataTransmission;
 80003e0:	68fb      	ldr	r3, [r7, #12]
}
 80003e2:	4618      	mov	r0, r3
 80003e4:	3718      	adds	r7, #24
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	2000029c 	.word	0x2000029c
 80003f0:	20000000 	.word	0x20000000
 80003f4:	0800a830 	.word	0x0800a830

080003f8 <set_device_ID_struct>:

struct deviceStruct* set_device_ID_struct(char *data)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
    ptr_dataDevice->id = *data;
 8000400:	4b05      	ldr	r3, [pc, #20]	; (8000418 <set_device_ID_struct+0x20>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	687a      	ldr	r2, [r7, #4]
 8000406:	7812      	ldrb	r2, [r2, #0]
 8000408:	701a      	strb	r2, [r3, #0]
//    printf("endereÃ§o ptr_dataDevice = %d\n",ptr_dataDevice);
//    printf("conteudo ptr_dataDevice = %p\n",*ptr_dataDevice);
    return ptr_dataDevice;
 800040a:	4b03      	ldr	r3, [pc, #12]	; (8000418 <set_device_ID_struct+0x20>)
 800040c:	681b      	ldr	r3, [r3, #0]
};
 800040e:	4618      	mov	r0, r3
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	bc80      	pop	{r7}
 8000416:	4770      	bx	lr
 8000418:	20000000 	.word	0x20000000

0800041c <get_device_ID_struct>:

struct deviceStruct* get_device_ID_struct()
{
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
     char* data = &(ptr_dataDevice->id);
 8000422:	4b04      	ldr	r3, [pc, #16]	; (8000434 <get_device_ID_struct+0x18>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	607b      	str	r3, [r7, #4]
    return data;
 8000428:	687b      	ldr	r3, [r7, #4]
};
 800042a:	4618      	mov	r0, r3
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr
 8000434:	20000000 	.word	0x20000000

08000438 <get_transmitt_payload>:

unsigned char* get_transmitt_payload(unsigned char* ID)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
    extern int32_t bufferPulso[SAMPLES];
    extern uint16_t currentTime[SAMPLES];
    unsigned char* data;
    if(*ID == IDENTIFICATION) data = get_device_ID_struct();
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2b01      	cmp	r3, #1
 8000446:	d103      	bne.n	8000450 <get_transmitt_payload+0x18>
 8000448:	f7ff ffe8 	bl	800041c <get_device_ID_struct>
 800044c:	60f8      	str	r0, [r7, #12]
 800044e:	e008      	b.n	8000462 <get_transmitt_payload+0x2a>
    else if(*ID == READ) data = set_device_measurement_struct(currentTime,bufferPulso);
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b04      	cmp	r3, #4
 8000456:	d104      	bne.n	8000462 <get_transmitt_payload+0x2a>
 8000458:	4904      	ldr	r1, [pc, #16]	; (800046c <get_transmitt_payload+0x34>)
 800045a:	4805      	ldr	r0, [pc, #20]	; (8000470 <get_transmitt_payload+0x38>)
 800045c:	f000 f832 	bl	80004c4 <set_device_measurement_struct>
 8000460:	60f8      	str	r0, [r7, #12]
    return data;
 8000462:	68fb      	ldr	r3, [r7, #12]
}
 8000464:	4618      	mov	r0, r3
 8000466:	3710      	adds	r7, #16
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	20000450 	.word	0x20000450
 8000470:	2000047c 	.word	0x2000047c

08000474 <set_device_frequency_struct>:

struct deviceStruct* set_device_frequency_struct(char* data){
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
    ptr_dataDevice->timeSampling = data[1];
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	1c5a      	adds	r2, r3, #1
 8000480:	4b05      	ldr	r3, [pc, #20]	; (8000498 <set_device_frequency_struct+0x24>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	7812      	ldrb	r2, [r2, #0]
 8000486:	709a      	strb	r2, [r3, #2]
    return ptr_dataDevice->timeSampling;
 8000488:	4b03      	ldr	r3, [pc, #12]	; (8000498 <set_device_frequency_struct+0x24>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	789b      	ldrb	r3, [r3, #2]
};
 800048e:	4618      	mov	r0, r3
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr
 8000498:	20000000 	.word	0x20000000

0800049c <set_device_mode_struct>:

struct deviceStruct* set_device_mode_struct(char* data){
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
    ptr_dataDevice->readStatus = data[0];
 80004a4:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <set_device_mode_struct+0x24>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	687a      	ldr	r2, [r7, #4]
 80004aa:	7812      	ldrb	r2, [r2, #0]
 80004ac:	705a      	strb	r2, [r3, #1]
    return ptr_dataDevice->readStatus;
 80004ae:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <set_device_mode_struct+0x24>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	785b      	ldrb	r3, [r3, #1]
};
 80004b4:	4618      	mov	r0, r3
 80004b6:	370c      	adds	r7, #12
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bc80      	pop	{r7}
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	20000000 	.word	0x20000000

080004c4 <set_device_measurement_struct>:
struct deviceStruct* set_device_error_struct(char* data){
    ptr_dataDevice->error = *data;
    return ptr_dataDevice->error;
};

struct deviceStruct* set_device_measurement_struct(uint16_t* data1, int32_t* data2){
 80004c4:	b480      	push	{r7}
 80004c6:	b085      	sub	sp, #20
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	6039      	str	r1, [r7, #0]
    unsigned char position = 0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	73fb      	strb	r3, [r7, #15]

    for(unsigned char i=0;i<SAMPLES;i++)
 80004d2:	2300      	movs	r3, #0
 80004d4:	73bb      	strb	r3, [r7, #14]
 80004d6:	e024      	b.n	8000522 <set_device_measurement_struct+0x5e>
    {
      ptr_dataDevice->timeMeasurement.timeAll = data1[i];
 80004d8:	7bbb      	ldrb	r3, [r7, #14]
 80004da:	005b      	lsls	r3, r3, #1
 80004dc:	687a      	ldr	r2, [r7, #4]
 80004de:	441a      	add	r2, r3
 80004e0:	4b2a      	ldr	r3, [pc, #168]	; (800058c <set_device_measurement_struct+0xc8>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	8812      	ldrh	r2, [r2, #0]
 80004e6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
      for(unsigned char y = 2;y>0;y--)
 80004ea:	2302      	movs	r3, #2
 80004ec:	737b      	strb	r3, [r7, #13]
 80004ee:	e012      	b.n	8000516 <set_device_measurement_struct+0x52>
      {
          ptr_dataDevice->measurement[position] = ptr_dataDevice->timeMeasurement.timePT[y-1];
 80004f0:	4b26      	ldr	r3, [pc, #152]	; (800058c <set_device_measurement_struct+0xc8>)
 80004f2:	6818      	ldr	r0, [r3, #0]
 80004f4:	7b7b      	ldrb	r3, [r7, #13]
 80004f6:	1e59      	subs	r1, r3, #1
 80004f8:	4b24      	ldr	r3, [pc, #144]	; (800058c <set_device_measurement_struct+0xc8>)
 80004fa:	681a      	ldr	r2, [r3, #0]
 80004fc:	7bfb      	ldrb	r3, [r7, #15]
 80004fe:	4401      	add	r1, r0
 8000500:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
 8000504:	4413      	add	r3, r2
 8000506:	460a      	mov	r2, r1
 8000508:	719a      	strb	r2, [r3, #6]
          position++;
 800050a:	7bfb      	ldrb	r3, [r7, #15]
 800050c:	3301      	adds	r3, #1
 800050e:	73fb      	strb	r3, [r7, #15]
      for(unsigned char y = 2;y>0;y--)
 8000510:	7b7b      	ldrb	r3, [r7, #13]
 8000512:	3b01      	subs	r3, #1
 8000514:	737b      	strb	r3, [r7, #13]
 8000516:	7b7b      	ldrb	r3, [r7, #13]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d1e9      	bne.n	80004f0 <set_device_measurement_struct+0x2c>
    for(unsigned char i=0;i<SAMPLES;i++)
 800051c:	7bbb      	ldrb	r3, [r7, #14]
 800051e:	3301      	adds	r3, #1
 8000520:	73bb      	strb	r3, [r7, #14]
 8000522:	7bbb      	ldrb	r3, [r7, #14]
 8000524:	2b09      	cmp	r3, #9
 8000526:	d9d7      	bls.n	80004d8 <set_device_measurement_struct+0x14>
      }
    }

    for(unsigned char i=0;i<SAMPLES;i++)
 8000528:	2300      	movs	r3, #0
 800052a:	733b      	strb	r3, [r7, #12]
 800052c:	e023      	b.n	8000576 <set_device_measurement_struct+0xb2>
    {
      ptr_dataDevice->pulseMeasurement.pulseAll = data2[i];
 800052e:	7b3b      	ldrb	r3, [r7, #12]
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	683a      	ldr	r2, [r7, #0]
 8000534:	441a      	add	r2, r3
 8000536:	4b15      	ldr	r3, [pc, #84]	; (800058c <set_device_measurement_struct+0xc8>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	6812      	ldr	r2, [r2, #0]
 800053c:	645a      	str	r2, [r3, #68]	; 0x44
      for(unsigned char y = 4;y>0;y--)
 800053e:	2304      	movs	r3, #4
 8000540:	72fb      	strb	r3, [r7, #11]
 8000542:	e012      	b.n	800056a <set_device_measurement_struct+0xa6>
      {
          ptr_dataDevice->measurement[position] = ptr_dataDevice->pulseMeasurement.pulsePT[y-1];
 8000544:	4b11      	ldr	r3, [pc, #68]	; (800058c <set_device_measurement_struct+0xc8>)
 8000546:	6818      	ldr	r0, [r3, #0]
 8000548:	7afb      	ldrb	r3, [r7, #11]
 800054a:	1e59      	subs	r1, r3, #1
 800054c:	4b0f      	ldr	r3, [pc, #60]	; (800058c <set_device_measurement_struct+0xc8>)
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	7bfb      	ldrb	r3, [r7, #15]
 8000552:	4401      	add	r1, r0
 8000554:	f891 1044 	ldrb.w	r1, [r1, #68]	; 0x44
 8000558:	4413      	add	r3, r2
 800055a:	460a      	mov	r2, r1
 800055c:	719a      	strb	r2, [r3, #6]
          position++;
 800055e:	7bfb      	ldrb	r3, [r7, #15]
 8000560:	3301      	adds	r3, #1
 8000562:	73fb      	strb	r3, [r7, #15]
      for(unsigned char y = 4;y>0;y--)
 8000564:	7afb      	ldrb	r3, [r7, #11]
 8000566:	3b01      	subs	r3, #1
 8000568:	72fb      	strb	r3, [r7, #11]
 800056a:	7afb      	ldrb	r3, [r7, #11]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d1e9      	bne.n	8000544 <set_device_measurement_struct+0x80>
    for(unsigned char i=0;i<SAMPLES;i++)
 8000570:	7b3b      	ldrb	r3, [r7, #12]
 8000572:	3301      	adds	r3, #1
 8000574:	733b      	strb	r3, [r7, #12]
 8000576:	7b3b      	ldrb	r3, [r7, #12]
 8000578:	2b09      	cmp	r3, #9
 800057a:	d9d8      	bls.n	800052e <set_device_measurement_struct+0x6a>
      }
    }
    return ptr_dataDevice->measurement;
 800057c:	4b03      	ldr	r3, [pc, #12]	; (800058c <set_device_measurement_struct+0xc8>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	3306      	adds	r3, #6
}
 8000582:	4618      	mov	r0, r3
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr
 800058c:	20000000 	.word	0x20000000

08000590 <set_checksum>:

char set_checksum(char* data, char dataSize)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	460b      	mov	r3, r1
 800059a:	70fb      	strb	r3, [r7, #3]
    unsigned char checksum_value = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	737b      	strb	r3, [r7, #13]
    unsigned char checksum_sum=0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	73fb      	strb	r3, [r7, #15]

    for(unsigned char i=1; i<(dataSize-2);i++)
 80005a4:	2301      	movs	r3, #1
 80005a6:	73bb      	strb	r3, [r7, #14]
 80005a8:	e009      	b.n	80005be <set_checksum+0x2e>
    {
        checksum_sum += data[i];
 80005aa:	7bbb      	ldrb	r3, [r7, #14]
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	4413      	add	r3, r2
 80005b0:	781a      	ldrb	r2, [r3, #0]
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	4413      	add	r3, r2
 80005b6:	73fb      	strb	r3, [r7, #15]
    for(unsigned char i=1; i<(dataSize-2);i++)
 80005b8:	7bbb      	ldrb	r3, [r7, #14]
 80005ba:	3301      	adds	r3, #1
 80005bc:	73bb      	strb	r3, [r7, #14]
 80005be:	7bba      	ldrb	r2, [r7, #14]
 80005c0:	78fb      	ldrb	r3, [r7, #3]
 80005c2:	3b02      	subs	r3, #2
 80005c4:	429a      	cmp	r2, r3
 80005c6:	dbf0      	blt.n	80005aa <set_checksum+0x1a>
    }

    checksum_value = 0xFF-checksum_sum;
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	43db      	mvns	r3, r3
 80005cc:	737b      	strb	r3, [r7, #13]
    checksum_value += 0x01;
 80005ce:	7b7b      	ldrb	r3, [r7, #13]
 80005d0:	3301      	adds	r3, #1
 80005d2:	737b      	strb	r3, [r7, #13]
    return checksum_value;
 80005d4:	7b7b      	ldrb	r3, [r7, #13]

}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	bc80      	pop	{r7}
 80005de:	4770      	bx	lr

080005e0 <reset_buffer>:

void reset_buffer(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
	extern int32_t bufferPulso[SAMPLES];
	extern uint16_t currentTime[SAMPLES];
	for(unsigned x=0;x<SAMPLES;x++)
 80005e6:	2300      	movs	r3, #0
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	e00c      	b.n	8000606 <reset_buffer+0x26>
	{
		bufferPulso[x] = 0;
 80005ec:	4a0a      	ldr	r2, [pc, #40]	; (8000618 <reset_buffer+0x38>)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2100      	movs	r1, #0
 80005f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		currentTime[x] = 0;
 80005f6:	4a09      	ldr	r2, [pc, #36]	; (800061c <reset_buffer+0x3c>)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2100      	movs	r1, #0
 80005fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(unsigned x=0;x<SAMPLES;x++)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	3301      	adds	r3, #1
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2b09      	cmp	r3, #9
 800060a:	d9ef      	bls.n	80005ec <reset_buffer+0xc>
	}

}
 800060c:	bf00      	nop
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr
 8000618:	20000450 	.word	0x20000450
 800061c:	2000047c 	.word	0x2000047c

08000620 <start_encoder>:

static unsigned char encoderStatus;
static unsigned char timerStatus;

unsigned char* start_encoder(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
//        printf("Liga Encoder \n");
        encoderStatus = HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000624:	213c      	movs	r1, #60	; 0x3c
 8000626:	4809      	ldr	r0, [pc, #36]	; (800064c <start_encoder+0x2c>)
 8000628:	f003 fe36 	bl	8004298 <HAL_TIM_Encoder_Start_IT>
 800062c:	4603      	mov	r3, r0
 800062e:	461a      	mov	r2, r3
 8000630:	4b07      	ldr	r3, [pc, #28]	; (8000650 <start_encoder+0x30>)
 8000632:	701a      	strb	r2, [r3, #0]
        HAL_Delay(10);
 8000634:	200a      	movs	r0, #10
 8000636:	f001 f86b 	bl	8001710 <HAL_Delay>
        return !encoderStatus;
 800063a:	4b05      	ldr	r3, [pc, #20]	; (8000650 <start_encoder+0x30>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d101      	bne.n	8000646 <start_encoder+0x26>
 8000642:	2301      	movs	r3, #1
 8000644:	e000      	b.n	8000648 <start_encoder+0x28>
 8000646:	2300      	movs	r3, #0
}
 8000648:	4618      	mov	r0, r3
 800064a:	bd80      	pop	{r7, pc}
 800064c:	200003b4 	.word	0x200003b4
 8000650:	200002df 	.word	0x200002df

08000654 <stop_encoder>:

unsigned char* stop_encoder(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
//    printf("Desliga Encoder \n");
	encoderStatus = HAL_TIM_Encoder_Stop_IT(&htim2, TIM_CHANNEL_ALL);
 8000658:	213c      	movs	r1, #60	; 0x3c
 800065a:	4807      	ldr	r0, [pc, #28]	; (8000678 <stop_encoder+0x24>)
 800065c:	f003 feca 	bl	80043f4 <HAL_TIM_Encoder_Stop_IT>
 8000660:	4603      	mov	r3, r0
 8000662:	461a      	mov	r2, r3
 8000664:	4b05      	ldr	r3, [pc, #20]	; (800067c <stop_encoder+0x28>)
 8000666:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 8000668:	200a      	movs	r0, #10
 800066a:	f001 f851 	bl	8001710 <HAL_Delay>
        return encoderStatus;
 800066e:	4b03      	ldr	r3, [pc, #12]	; (800067c <stop_encoder+0x28>)
 8000670:	781b      	ldrb	r3, [r3, #0]
}
 8000672:	4618      	mov	r0, r3
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	200003b4 	.word	0x200003b4
 800067c:	200002df 	.word	0x200002df

08000680 <start_timer>:

unsigned char* start_timer(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
//    printf("Liga Timer \n");
     timerStatus =HAL_TIM_Base_Start_IT(&htim3);
 8000684:	4809      	ldr	r0, [pc, #36]	; (80006ac <start_timer+0x2c>)
 8000686:	f003 fce5 	bl	8004054 <HAL_TIM_Base_Start_IT>
 800068a:	4603      	mov	r3, r0
 800068c:	461a      	mov	r2, r3
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <start_timer+0x30>)
 8000690:	701a      	strb	r2, [r3, #0]
     HAL_Delay(10);
 8000692:	200a      	movs	r0, #10
 8000694:	f001 f83c 	bl	8001710 <HAL_Delay>
    return !timerStatus;
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <start_timer+0x30>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d101      	bne.n	80006a4 <start_timer+0x24>
 80006a0:	2301      	movs	r3, #1
 80006a2:	e000      	b.n	80006a6 <start_timer+0x26>
 80006a4:	2300      	movs	r3, #0
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	200003fc 	.word	0x200003fc
 80006b0:	200002e0 	.word	0x200002e0

080006b4 <stop_timer>:

unsigned char* stop_timer(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
//    printf("Desliga Timer \n");
     timerStatus =HAL_TIM_Base_Stop_IT(&htim3);
 80006b8:	4806      	ldr	r0, [pc, #24]	; (80006d4 <stop_timer+0x20>)
 80006ba:	f003 fd1d 	bl	80040f8 <HAL_TIM_Base_Stop_IT>
 80006be:	4603      	mov	r3, r0
 80006c0:	461a      	mov	r2, r3
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <stop_timer+0x24>)
 80006c4:	701a      	strb	r2, [r3, #0]
    HAL_Delay(10);
 80006c6:	200a      	movs	r0, #10
 80006c8:	f001 f822 	bl	8001710 <HAL_Delay>
    return timerStatus;
 80006cc:	4b02      	ldr	r3, [pc, #8]	; (80006d8 <stop_timer+0x24>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	200003fc 	.word	0x200003fc
 80006d8:	200002e0 	.word	0x200002e0

080006dc <machine_state>:
extern uint16_t acquiredTime;
extern uint16_t currentTime[SAMPLES];
extern unsigned char transmitFlag;

unsigned char machine_state(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
    static unsigned char timerStatus = 0;
    static int32_t counterPulso[SAMPLES];
    static char readEnable = FALSE;
    static char dataToStruct[2];

    switch(state)
 80006e2:	4ba4      	ldr	r3, [pc, #656]	; (8000974 <machine_state+0x298>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b09      	cmp	r3, #9
 80006e8:	f200 8258 	bhi.w	8000b9c <machine_state+0x4c0>
 80006ec:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <machine_state+0x18>)
 80006ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f2:	bf00      	nop
 80006f4:	0800071d 	.word	0x0800071d
 80006f8:	080007cf 	.word	0x080007cf
 80006fc:	08000891 	.word	0x08000891
 8000700:	08000901 	.word	0x08000901
 8000704:	080009ad 	.word	0x080009ad
 8000708:	08000b55 	.word	0x08000b55
 800070c:	08000ac7 	.word	0x08000ac7
 8000710:	0800073f 	.word	0x0800073f
 8000714:	0800076f 	.word	0x0800076f
 8000718:	08000b9d 	.word	0x08000b9d
    {
        case IDDLE:
            if(rxFlag == TRUE) state = RXDATA;
 800071c:	4b96      	ldr	r3, [pc, #600]	; (8000978 <machine_state+0x29c>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d103      	bne.n	800072c <machine_state+0x50>
 8000724:	4b93      	ldr	r3, [pc, #588]	; (8000974 <machine_state+0x298>)
 8000726:	2207      	movs	r2, #7
 8000728:	701a      	strb	r2, [r3, #0]
            else if (rxFlag == FALSE) state = IDDLE;
            break;
 800072a:	e232      	b.n	8000b92 <machine_state+0x4b6>
            else if (rxFlag == FALSE) state = IDDLE;
 800072c:	4b92      	ldr	r3, [pc, #584]	; (8000978 <machine_state+0x29c>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	f040 822e 	bne.w	8000b92 <machine_state+0x4b6>
 8000736:	4b8f      	ldr	r3, [pc, #572]	; (8000974 <machine_state+0x298>)
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
            break;
 800073c:	e229      	b.n	8000b92 <machine_state+0x4b6>

        case RXDATA:

            getData = get_data(RXbuffer);
 800073e:	488f      	ldr	r0, [pc, #572]	; (800097c <machine_state+0x2a0>)
 8000740:	f7ff fd3e 	bl	80001c0 <get_data>
 8000744:	4603      	mov	r3, r0
 8000746:	4a8e      	ldr	r2, [pc, #568]	; (8000980 <machine_state+0x2a4>)
 8000748:	6013      	str	r3, [r2, #0]
            ptr_dataReceiver = set_receive_data_struct(getData);
 800074a:	4b8d      	ldr	r3, [pc, #564]	; (8000980 <machine_state+0x2a4>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff fdae 	bl	80002b0 <set_receive_data_struct>
 8000754:	4603      	mov	r3, r0
 8000756:	4a8b      	ldr	r2, [pc, #556]	; (8000984 <machine_state+0x2a8>)
 8000758:	6013      	str	r3, [r2, #0]
            rxGet = TRUE;
 800075a:	4b8b      	ldr	r3, [pc, #556]	; (8000988 <machine_state+0x2ac>)
 800075c:	2201      	movs	r2, #1
 800075e:	701a      	strb	r2, [r3, #0]
            rxFlag = FALSE;
 8000760:	4b85      	ldr	r3, [pc, #532]	; (8000978 <machine_state+0x29c>)
 8000762:	2200      	movs	r2, #0
 8000764:	701a      	strb	r2, [r3, #0]
            state = INICIO;
 8000766:	4b83      	ldr	r3, [pc, #524]	; (8000974 <machine_state+0x298>)
 8000768:	2208      	movs	r2, #8
 800076a:	701a      	strb	r2, [r3, #0]
            break;
 800076c:	e216      	b.n	8000b9c <machine_state+0x4c0>

        case INICIO:
            switch(ptr_dataReceiver->function)
 800076e:	4b85      	ldr	r3, [pc, #532]	; (8000984 <machine_state+0x2a8>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	78db      	ldrb	r3, [r3, #3]
 8000774:	3b01      	subs	r3, #1
 8000776:	2b05      	cmp	r3, #5
 8000778:	f200 820d 	bhi.w	8000b96 <machine_state+0x4ba>
 800077c:	a201      	add	r2, pc, #4	; (adr r2, 8000784 <machine_state+0xa8>)
 800077e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000782:	bf00      	nop
 8000784:	0800079d 	.word	0x0800079d
 8000788:	080007a5 	.word	0x080007a5
 800078c:	080007ad 	.word	0x080007ad
 8000790:	080007b5 	.word	0x080007b5
 8000794:	080007c5 	.word	0x080007c5
 8000798:	080007bd 	.word	0x080007bd
            {
                case IDENTIFICATION:
                    state = IDENTIFICATION;
 800079c:	4b75      	ldr	r3, [pc, #468]	; (8000974 <machine_state+0x298>)
 800079e:	2201      	movs	r2, #1
 80007a0:	701a      	strb	r2, [r3, #0]
                break;
 80007a2:	e013      	b.n	80007cc <machine_state+0xf0>

                case CONFIG:
                    state = CONFIG;
 80007a4:	4b73      	ldr	r3, [pc, #460]	; (8000974 <machine_state+0x298>)
 80007a6:	2202      	movs	r2, #2
 80007a8:	701a      	strb	r2, [r3, #0]
                    break;
 80007aa:	e00f      	b.n	80007cc <machine_state+0xf0>

                case START:
                    state = START;
 80007ac:	4b71      	ldr	r3, [pc, #452]	; (8000974 <machine_state+0x298>)
 80007ae:	2203      	movs	r2, #3
 80007b0:	701a      	strb	r2, [r3, #0]
                    break;
 80007b2:	e00b      	b.n	80007cc <machine_state+0xf0>

                case READ:
                    state = READ;
 80007b4:	4b6f      	ldr	r3, [pc, #444]	; (8000974 <machine_state+0x298>)
 80007b6:	2204      	movs	r2, #4
 80007b8:	701a      	strb	r2, [r3, #0]
                    break;
 80007ba:	e007      	b.n	80007cc <machine_state+0xf0>

                case STOP:
                    state = STOP;
 80007bc:	4b6d      	ldr	r3, [pc, #436]	; (8000974 <machine_state+0x298>)
 80007be:	2206      	movs	r2, #6
 80007c0:	701a      	strb	r2, [r3, #0]
                    break;
 80007c2:	e003      	b.n	80007cc <machine_state+0xf0>

                case READERROR:
                    state = READERROR;
 80007c4:	4b6b      	ldr	r3, [pc, #428]	; (8000974 <machine_state+0x298>)
 80007c6:	2205      	movs	r2, #5
 80007c8:	701a      	strb	r2, [r3, #0]
                    break;
 80007ca:	bf00      	nop
            }
            break;
 80007cc:	e1e3      	b.n	8000b96 <machine_state+0x4ba>

        case IDENTIFICATION:
            if(ptr_dataReceiver->payloadSize==1) //codificacao
 80007ce:	4b6d      	ldr	r3, [pc, #436]	; (8000984 <machine_state+0x2a8>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	791b      	ldrb	r3, [r3, #4]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d129      	bne.n	800082c <machine_state+0x150>
            {
            	ptr_dataDevice = set_ID(ptr_dataReceiver);
 80007d8:	4b6a      	ldr	r3, [pc, #424]	; (8000984 <machine_state+0x2a8>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff fcb5 	bl	800014c <set_ID>
 80007e2:	4603      	mov	r3, r0
 80007e4:	4a69      	ldr	r2, [pc, #420]	; (800098c <machine_state+0x2b0>)
 80007e6:	6013      	str	r3, [r2, #0]
            	payloadSize = 1;
 80007e8:	4b69      	ldr	r3, [pc, #420]	; (8000990 <machine_state+0x2b4>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	701a      	strb	r2, [r3, #0]
            	TXsize = 8;
 80007ee:	4b69      	ldr	r3, [pc, #420]	; (8000994 <machine_state+0x2b8>)
 80007f0:	2208      	movs	r2, #8
 80007f2:	701a      	strb	r2, [r3, #0]
            	dataToStruct[0] = IDENTIFICATION;
 80007f4:	4b68      	ldr	r3, [pc, #416]	; (8000998 <machine_state+0x2bc>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	701a      	strb	r2, [r3, #0]
            	dataToStruct[1] = payloadSize;
 80007fa:	4b65      	ldr	r3, [pc, #404]	; (8000990 <machine_state+0x2b4>)
 80007fc:	781a      	ldrb	r2, [r3, #0]
 80007fe:	4b66      	ldr	r3, [pc, #408]	; (8000998 <machine_state+0x2bc>)
 8000800:	705a      	strb	r2, [r3, #1]
            	ptr_dataTransmitter = set_transmission_data_struct(dataToStruct);
 8000802:	4865      	ldr	r0, [pc, #404]	; (8000998 <machine_state+0x2bc>)
 8000804:	f7ff fda4 	bl	8000350 <set_transmission_data_struct>
 8000808:	4603      	mov	r3, r0
 800080a:	4a64      	ldr	r2, [pc, #400]	; (800099c <machine_state+0x2c0>)
 800080c:	6013      	str	r3, [r2, #0]
                transmit_data(TXsize,ptr_dataTransmitter);
 800080e:	4b61      	ldr	r3, [pc, #388]	; (8000994 <machine_state+0x2b8>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	4a62      	ldr	r2, [pc, #392]	; (800099c <machine_state+0x2c0>)
 8000814:	6812      	ldr	r2, [r2, #0]
 8000816:	4611      	mov	r1, r2
 8000818:	4618      	mov	r0, r3
 800081a:	f000 fa7a 	bl	8000d12 <transmit_data>
                erasePayload(&(ptr_dataTransmitter->payload));
 800081e:	4b5f      	ldr	r3, [pc, #380]	; (800099c <machine_state+0x2c0>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	3305      	adds	r3, #5
 8000824:	4618      	mov	r0, r3
 8000826:	f000 f9e7 	bl	8000bf8 <erasePayload>
 800082a:	e02a      	b.n	8000882 <machine_state+0x1a6>
            }
            else if(ptr_dataReceiver->payloadSize==0) //identificacao
 800082c:	4b55      	ldr	r3, [pc, #340]	; (8000984 <machine_state+0x2a8>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	791b      	ldrb	r3, [r3, #4]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d125      	bne.n	8000882 <machine_state+0x1a6>
            {
            	ptr_dataDevice = get_ID();
 8000836:	f7ff fc98 	bl	800016a <get_ID>
 800083a:	4603      	mov	r3, r0
 800083c:	4a53      	ldr	r2, [pc, #332]	; (800098c <machine_state+0x2b0>)
 800083e:	6013      	str	r3, [r2, #0]
            	payloadSize = 1;
 8000840:	4b53      	ldr	r3, [pc, #332]	; (8000990 <machine_state+0x2b4>)
 8000842:	2201      	movs	r2, #1
 8000844:	701a      	strb	r2, [r3, #0]
				TXsize = 8;
 8000846:	4b53      	ldr	r3, [pc, #332]	; (8000994 <machine_state+0x2b8>)
 8000848:	2208      	movs	r2, #8
 800084a:	701a      	strb	r2, [r3, #0]
                dataToStruct[0] = IDENTIFICATION;
 800084c:	4b52      	ldr	r3, [pc, #328]	; (8000998 <machine_state+0x2bc>)
 800084e:	2201      	movs	r2, #1
 8000850:	701a      	strb	r2, [r3, #0]
            	dataToStruct[1] = payloadSize;
 8000852:	4b4f      	ldr	r3, [pc, #316]	; (8000990 <machine_state+0x2b4>)
 8000854:	781a      	ldrb	r2, [r3, #0]
 8000856:	4b50      	ldr	r3, [pc, #320]	; (8000998 <machine_state+0x2bc>)
 8000858:	705a      	strb	r2, [r3, #1]
                ptr_dataTransmitter = set_transmission_data_struct(dataToStruct);
 800085a:	484f      	ldr	r0, [pc, #316]	; (8000998 <machine_state+0x2bc>)
 800085c:	f7ff fd78 	bl	8000350 <set_transmission_data_struct>
 8000860:	4603      	mov	r3, r0
 8000862:	4a4e      	ldr	r2, [pc, #312]	; (800099c <machine_state+0x2c0>)
 8000864:	6013      	str	r3, [r2, #0]
				transmit_data(TXsize,ptr_dataTransmitter);
 8000866:	4b4b      	ldr	r3, [pc, #300]	; (8000994 <machine_state+0x2b8>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	4a4c      	ldr	r2, [pc, #304]	; (800099c <machine_state+0x2c0>)
 800086c:	6812      	ldr	r2, [r2, #0]
 800086e:	4611      	mov	r1, r2
 8000870:	4618      	mov	r0, r3
 8000872:	f000 fa4e 	bl	8000d12 <transmit_data>
				erasePayload(&(ptr_dataTransmitter->payload));
 8000876:	4b49      	ldr	r3, [pc, #292]	; (800099c <machine_state+0x2c0>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	3305      	adds	r3, #5
 800087c:	4618      	mov	r0, r3
 800087e:	f000 f9bb 	bl	8000bf8 <erasePayload>
            }
            rxGet = FALSE;
 8000882:	4b41      	ldr	r3, [pc, #260]	; (8000988 <machine_state+0x2ac>)
 8000884:	2200      	movs	r2, #0
 8000886:	701a      	strb	r2, [r3, #0]
            state = IDDLE;
 8000888:	4b3a      	ldr	r3, [pc, #232]	; (8000974 <machine_state+0x298>)
 800088a:	2200      	movs	r2, #0
 800088c:	701a      	strb	r2, [r3, #0]
            break;
 800088e:	e185      	b.n	8000b9c <machine_state+0x4c0>

        case CONFIG:
        	ptr_dataDevice->timeSampling = set_frequency_samples(ptr_dataReceiver);
 8000890:	4b3c      	ldr	r3, [pc, #240]	; (8000984 <machine_state+0x2a8>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff fc73 	bl	8000180 <set_frequency_samples>
 800089a:	4603      	mov	r3, r0
 800089c:	461a      	mov	r2, r3
 800089e:	4b3b      	ldr	r3, [pc, #236]	; (800098c <machine_state+0x2b0>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	b2d2      	uxtb	r2, r2
 80008a4:	709a      	strb	r2, [r3, #2]
			ptr_dataDevice->readStatus = set_operation_mode(ptr_dataReceiver);
 80008a6:	4b37      	ldr	r3, [pc, #220]	; (8000984 <machine_state+0x2a8>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fc78 	bl	80001a0 <set_operation_mode>
 80008b0:	4603      	mov	r3, r0
 80008b2:	461a      	mov	r2, r3
 80008b4:	4b35      	ldr	r3, [pc, #212]	; (800098c <machine_state+0x2b0>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	b2d2      	uxtb	r2, r2
 80008ba:	705a      	strb	r2, [r3, #1]
		    payloadSize = 0;
 80008bc:	4b34      	ldr	r3, [pc, #208]	; (8000990 <machine_state+0x2b4>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
		    TXsize = 7;
 80008c2:	4b34      	ldr	r3, [pc, #208]	; (8000994 <machine_state+0x2b8>)
 80008c4:	2207      	movs	r2, #7
 80008c6:	701a      	strb	r2, [r3, #0]
		    dataToStruct[0] = CONFIG;
 80008c8:	4b33      	ldr	r3, [pc, #204]	; (8000998 <machine_state+0x2bc>)
 80008ca:	2202      	movs	r2, #2
 80008cc:	701a      	strb	r2, [r3, #0]
            dataToStruct[1] = payloadSize;
 80008ce:	4b30      	ldr	r3, [pc, #192]	; (8000990 <machine_state+0x2b4>)
 80008d0:	781a      	ldrb	r2, [r3, #0]
 80008d2:	4b31      	ldr	r3, [pc, #196]	; (8000998 <machine_state+0x2bc>)
 80008d4:	705a      	strb	r2, [r3, #1]
		    ptr_dataTransmitter = set_transmission_data_struct(dataToStruct);
 80008d6:	4830      	ldr	r0, [pc, #192]	; (8000998 <machine_state+0x2bc>)
 80008d8:	f7ff fd3a 	bl	8000350 <set_transmission_data_struct>
 80008dc:	4603      	mov	r3, r0
 80008de:	4a2f      	ldr	r2, [pc, #188]	; (800099c <machine_state+0x2c0>)
 80008e0:	6013      	str	r3, [r2, #0]
		    transmit_data(TXsize,ptr_dataTransmitter);
 80008e2:	4b2c      	ldr	r3, [pc, #176]	; (8000994 <machine_state+0x2b8>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	4a2d      	ldr	r2, [pc, #180]	; (800099c <machine_state+0x2c0>)
 80008e8:	6812      	ldr	r2, [r2, #0]
 80008ea:	4611      	mov	r1, r2
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 fa10 	bl	8000d12 <transmit_data>
            rxGet = FALSE;
 80008f2:	4b25      	ldr	r3, [pc, #148]	; (8000988 <machine_state+0x2ac>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	701a      	strb	r2, [r3, #0]
            state = IDDLE;
 80008f8:	4b1e      	ldr	r3, [pc, #120]	; (8000974 <machine_state+0x298>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
            break;
 80008fe:	e14d      	b.n	8000b9c <machine_state+0x4c0>

        case START:
            if(timerStatus == 0) timerStatus = start_timer();
 8000900:	4b27      	ldr	r3, [pc, #156]	; (80009a0 <machine_state+0x2c4>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d105      	bne.n	8000914 <machine_state+0x238>
 8000908:	f7ff feba 	bl	8000680 <start_timer>
 800090c:	4603      	mov	r3, r0
 800090e:	b2da      	uxtb	r2, r3
 8000910:	4b23      	ldr	r3, [pc, #140]	; (80009a0 <machine_state+0x2c4>)
 8000912:	701a      	strb	r2, [r3, #0]
            if(encoderStatus == 0) encoderStatus = start_encoder();
 8000914:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <machine_state+0x2c8>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d105      	bne.n	8000928 <machine_state+0x24c>
 800091c:	f7ff fe80 	bl	8000620 <start_encoder>
 8000920:	4603      	mov	r3, r0
 8000922:	b2da      	uxtb	r2, r3
 8000924:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <machine_state+0x2c8>)
 8000926:	701a      	strb	r2, [r3, #0]
            payloadSize = 0;
 8000928:	4b19      	ldr	r3, [pc, #100]	; (8000990 <machine_state+0x2b4>)
 800092a:	2200      	movs	r2, #0
 800092c:	701a      	strb	r2, [r3, #0]
            TXsize = 7;
 800092e:	4b19      	ldr	r3, [pc, #100]	; (8000994 <machine_state+0x2b8>)
 8000930:	2207      	movs	r2, #7
 8000932:	701a      	strb	r2, [r3, #0]
            dataToStruct[0] = START;
 8000934:	4b18      	ldr	r3, [pc, #96]	; (8000998 <machine_state+0x2bc>)
 8000936:	2203      	movs	r2, #3
 8000938:	701a      	strb	r2, [r3, #0]
            dataToStruct[1] = payloadSize;
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <machine_state+0x2b4>)
 800093c:	781a      	ldrb	r2, [r3, #0]
 800093e:	4b16      	ldr	r3, [pc, #88]	; (8000998 <machine_state+0x2bc>)
 8000940:	705a      	strb	r2, [r3, #1]
            ptr_dataTransmitter = set_transmission_data_struct(dataToStruct);
 8000942:	4815      	ldr	r0, [pc, #84]	; (8000998 <machine_state+0x2bc>)
 8000944:	f7ff fd04 	bl	8000350 <set_transmission_data_struct>
 8000948:	4603      	mov	r3, r0
 800094a:	4a14      	ldr	r2, [pc, #80]	; (800099c <machine_state+0x2c0>)
 800094c:	6013      	str	r3, [r2, #0]
            transmit_data(TXsize,ptr_dataTransmitter);
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <machine_state+0x2b8>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	4a12      	ldr	r2, [pc, #72]	; (800099c <machine_state+0x2c0>)
 8000954:	6812      	ldr	r2, [r2, #0]
 8000956:	4611      	mov	r1, r2
 8000958:	4618      	mov	r0, r3
 800095a:	f000 f9da 	bl	8000d12 <transmit_data>
            rxGet = FALSE;
 800095e:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <machine_state+0x2ac>)
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
            state = IDDLE;
 8000964:	4b03      	ldr	r3, [pc, #12]	; (8000974 <machine_state+0x298>)
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]
            readEnable = TRUE;
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <machine_state+0x2cc>)
 800096c:	2201      	movs	r2, #1
 800096e:	701a      	strb	r2, [r3, #0]
            break;
 8000970:	e114      	b.n	8000b9c <machine_state+0x4c0>
 8000972:	bf00      	nop
 8000974:	2000032a 	.word	0x2000032a
 8000978:	200002e1 	.word	0x200002e1
 800097c:	200002e4 	.word	0x200002e4
 8000980:	2000032c 	.word	0x2000032c
 8000984:	20000330 	.word	0x20000330
 8000988:	20000334 	.word	0x20000334
 800098c:	20000004 	.word	0x20000004
 8000990:	20000335 	.word	0x20000335
 8000994:	20000336 	.word	0x20000336
 8000998:	20000338 	.word	0x20000338
 800099c:	2000033c 	.word	0x2000033c
 80009a0:	20000340 	.word	0x20000340
 80009a4:	20000341 	.word	0x20000341
 80009a8:	20000342 	.word	0x20000342

        case READ:
        	if(readEnable == TRUE)
 80009ac:	4b7e      	ldr	r3, [pc, #504]	; (8000ba8 <machine_state+0x4cc>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d114      	bne.n	80009de <machine_state+0x302>
        	{
				pulseCounter = 0;
 80009b4:	4b7d      	ldr	r3, [pc, #500]	; (8000bac <machine_state+0x4d0>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
				acquiredTime = 0;
 80009ba:	4b7d      	ldr	r3, [pc, #500]	; (8000bb0 <machine_state+0x4d4>)
 80009bc:	2200      	movs	r2, #0
 80009be:	801a      	strh	r2, [r3, #0]
				newTime = 0;
 80009c0:	4b7c      	ldr	r3, [pc, #496]	; (8000bb4 <machine_state+0x4d8>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	801a      	strh	r2, [r3, #0]
				samples = 0;
 80009c6:	4b7c      	ldr	r3, [pc, #496]	; (8000bb8 <machine_state+0x4dc>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
				readFlag = TRUE;
 80009cc:	4b7b      	ldr	r3, [pc, #492]	; (8000bbc <machine_state+0x4e0>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	701a      	strb	r2, [r3, #0]
				timerFlag = TRUE;
 80009d2:	4b7b      	ldr	r3, [pc, #492]	; (8000bc0 <machine_state+0x4e4>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	701a      	strb	r2, [r3, #0]
				readEnable = FALSE;
 80009d8:	4b73      	ldr	r3, [pc, #460]	; (8000ba8 <machine_state+0x4cc>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]
        	}


            if(ptr_dataDevice->readStatus == AUTO)
 80009de:	4b79      	ldr	r3, [pc, #484]	; (8000bc4 <machine_state+0x4e8>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	785b      	ldrb	r3, [r3, #1]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d13a      	bne.n	8000a5e <machine_state+0x382>
            {
                if(transmitFlag == TRUE && rxFlag == FALSE)
 80009e8:	4b77      	ldr	r3, [pc, #476]	; (8000bc8 <machine_state+0x4ec>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d128      	bne.n	8000a42 <machine_state+0x366>
 80009f0:	4b76      	ldr	r3, [pc, #472]	; (8000bcc <machine_state+0x4f0>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d124      	bne.n	8000a42 <machine_state+0x366>
                {
            		payloadSize = 60;
 80009f8:	4b75      	ldr	r3, [pc, #468]	; (8000bd0 <machine_state+0x4f4>)
 80009fa:	223c      	movs	r2, #60	; 0x3c
 80009fc:	701a      	strb	r2, [r3, #0]
    				TXsize = 67;
 80009fe:	4b75      	ldr	r3, [pc, #468]	; (8000bd4 <machine_state+0x4f8>)
 8000a00:	2243      	movs	r2, #67	; 0x43
 8000a02:	701a      	strb	r2, [r3, #0]
                    dataToStruct[0] = READ;
 8000a04:	4b74      	ldr	r3, [pc, #464]	; (8000bd8 <machine_state+0x4fc>)
 8000a06:	2204      	movs	r2, #4
 8000a08:	701a      	strb	r2, [r3, #0]
                    dataToStruct[1] = payloadSize;
 8000a0a:	4b71      	ldr	r3, [pc, #452]	; (8000bd0 <machine_state+0x4f4>)
 8000a0c:	781a      	ldrb	r2, [r3, #0]
 8000a0e:	4b72      	ldr	r3, [pc, #456]	; (8000bd8 <machine_state+0x4fc>)
 8000a10:	705a      	strb	r2, [r3, #1]
					ptr_dataTransmitter = set_transmission_data_struct(dataToStruct);
 8000a12:	4871      	ldr	r0, [pc, #452]	; (8000bd8 <machine_state+0x4fc>)
 8000a14:	f7ff fc9c 	bl	8000350 <set_transmission_data_struct>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	4a70      	ldr	r2, [pc, #448]	; (8000bdc <machine_state+0x500>)
 8000a1c:	6013      	str	r3, [r2, #0]
					transmit_data(TXsize,ptr_dataTransmitter);
 8000a1e:	4b6d      	ldr	r3, [pc, #436]	; (8000bd4 <machine_state+0x4f8>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	4a6e      	ldr	r2, [pc, #440]	; (8000bdc <machine_state+0x500>)
 8000a24:	6812      	ldr	r2, [r2, #0]
 8000a26:	4611      	mov	r1, r2
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 f972 	bl	8000d12 <transmit_data>
					transmitFlag = FALSE;
 8000a2e:	4b66      	ldr	r3, [pc, #408]	; (8000bc8 <machine_state+0x4ec>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	701a      	strb	r2, [r3, #0]
//					HAL_GPIO_TogglePin(GPIOA, ACQUISITION_Pin);
                    rxGet = FALSE;
 8000a34:	4b6a      	ldr	r3, [pc, #424]	; (8000be0 <machine_state+0x504>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	701a      	strb	r2, [r3, #0]
					state = IDDLE;
 8000a3a:	4b6a      	ldr	r3, [pc, #424]	; (8000be4 <machine_state+0x508>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	701a      	strb	r2, [r3, #0]
                //transmit
                for(unsigned char i=0;i<SAMPLES;i++) counterPulso[i] = 0;
                rxGet = FALSE;
                state = IDDLE;
            }
            break;
 8000a40:	e0ab      	b.n	8000b9a <machine_state+0x4be>
                else if(transmitFlag == TRUE && rxFlag == TRUE)
 8000a42:	4b61      	ldr	r3, [pc, #388]	; (8000bc8 <machine_state+0x4ec>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	f040 80a7 	bne.w	8000b9a <machine_state+0x4be>
 8000a4c:	4b5f      	ldr	r3, [pc, #380]	; (8000bcc <machine_state+0x4f0>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	f040 80a2 	bne.w	8000b9a <machine_state+0x4be>
                    state = STOP;
 8000a56:	4b63      	ldr	r3, [pc, #396]	; (8000be4 <machine_state+0x508>)
 8000a58:	2206      	movs	r2, #6
 8000a5a:	701a      	strb	r2, [r3, #0]
            break;
 8000a5c:	e09d      	b.n	8000b9a <machine_state+0x4be>
            else if(ptr_dataDevice->readStatus == MAN)
 8000a5e:	4b59      	ldr	r3, [pc, #356]	; (8000bc4 <machine_state+0x4e8>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	785b      	ldrb	r3, [r3, #1]
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	f040 8098 	bne.w	8000b9a <machine_state+0x4be>
                while(transmitFlag==0);
 8000a6a:	bf00      	nop
 8000a6c:	4b56      	ldr	r3, [pc, #344]	; (8000bc8 <machine_state+0x4ec>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d0fb      	beq.n	8000a6c <machine_state+0x390>
                transmitFlag = 0;
 8000a74:	4b54      	ldr	r3, [pc, #336]	; (8000bc8 <machine_state+0x4ec>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]
                for(unsigned char i=0;i<SAMPLES;i++) counterPulso[i] = bufferPulso[i];
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	71fb      	strb	r3, [r7, #7]
 8000a7e:	e00a      	b.n	8000a96 <machine_state+0x3ba>
 8000a80:	79fa      	ldrb	r2, [r7, #7]
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	4958      	ldr	r1, [pc, #352]	; (8000be8 <machine_state+0x50c>)
 8000a86:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000a8a:	4958      	ldr	r1, [pc, #352]	; (8000bec <machine_state+0x510>)
 8000a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	3301      	adds	r3, #1
 8000a94:	71fb      	strb	r3, [r7, #7]
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	2b09      	cmp	r3, #9
 8000a9a:	d9f1      	bls.n	8000a80 <machine_state+0x3a4>
                for(unsigned char i=0;i<SAMPLES;i++) counterPulso[i] = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	71bb      	strb	r3, [r7, #6]
 8000aa0:	e007      	b.n	8000ab2 <machine_state+0x3d6>
 8000aa2:	79bb      	ldrb	r3, [r7, #6]
 8000aa4:	4a51      	ldr	r2, [pc, #324]	; (8000bec <machine_state+0x510>)
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000aac:	79bb      	ldrb	r3, [r7, #6]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	71bb      	strb	r3, [r7, #6]
 8000ab2:	79bb      	ldrb	r3, [r7, #6]
 8000ab4:	2b09      	cmp	r3, #9
 8000ab6:	d9f4      	bls.n	8000aa2 <machine_state+0x3c6>
                rxGet = FALSE;
 8000ab8:	4b49      	ldr	r3, [pc, #292]	; (8000be0 <machine_state+0x504>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]
                state = IDDLE;
 8000abe:	4b49      	ldr	r3, [pc, #292]	; (8000be4 <machine_state+0x508>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]
            break;
 8000ac4:	e069      	b.n	8000b9a <machine_state+0x4be>

        case STOP:
            if(timerStatus == 1) timerStatus = stop_timer();
 8000ac6:	4b4a      	ldr	r3, [pc, #296]	; (8000bf0 <machine_state+0x514>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d105      	bne.n	8000ada <machine_state+0x3fe>
 8000ace:	f7ff fdf1 	bl	80006b4 <stop_timer>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4b46      	ldr	r3, [pc, #280]	; (8000bf0 <machine_state+0x514>)
 8000ad8:	701a      	strb	r2, [r3, #0]
            if(encoderStatus == 1) encoderStatus = stop_encoder();
 8000ada:	4b46      	ldr	r3, [pc, #280]	; (8000bf4 <machine_state+0x518>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d105      	bne.n	8000aee <machine_state+0x412>
 8000ae2:	f7ff fdb7 	bl	8000654 <stop_encoder>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	4b42      	ldr	r3, [pc, #264]	; (8000bf4 <machine_state+0x518>)
 8000aec:	701a      	strb	r2, [r3, #0]
            erasePayload(&(ptr_dataTransmitter->payload));
 8000aee:	4b3b      	ldr	r3, [pc, #236]	; (8000bdc <machine_state+0x500>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	3305      	adds	r3, #5
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 f87f 	bl	8000bf8 <erasePayload>
            payloadSize = 0;
 8000afa:	4b35      	ldr	r3, [pc, #212]	; (8000bd0 <machine_state+0x4f4>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]
            TXsize = 7;
 8000b00:	4b34      	ldr	r3, [pc, #208]	; (8000bd4 <machine_state+0x4f8>)
 8000b02:	2207      	movs	r2, #7
 8000b04:	701a      	strb	r2, [r3, #0]
            dataToStruct[0] = STOP;
 8000b06:	4b34      	ldr	r3, [pc, #208]	; (8000bd8 <machine_state+0x4fc>)
 8000b08:	2206      	movs	r2, #6
 8000b0a:	701a      	strb	r2, [r3, #0]
            dataToStruct[1] = payloadSize;
 8000b0c:	4b30      	ldr	r3, [pc, #192]	; (8000bd0 <machine_state+0x4f4>)
 8000b0e:	781a      	ldrb	r2, [r3, #0]
 8000b10:	4b31      	ldr	r3, [pc, #196]	; (8000bd8 <machine_state+0x4fc>)
 8000b12:	705a      	strb	r2, [r3, #1]
            ptr_dataTransmitter = set_transmission_data_struct(dataToStruct);
 8000b14:	4830      	ldr	r0, [pc, #192]	; (8000bd8 <machine_state+0x4fc>)
 8000b16:	f7ff fc1b 	bl	8000350 <set_transmission_data_struct>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	4a2f      	ldr	r2, [pc, #188]	; (8000bdc <machine_state+0x500>)
 8000b1e:	6013      	str	r3, [r2, #0]
            transmit_data(TXsize,ptr_dataTransmitter);
 8000b20:	4b2c      	ldr	r3, [pc, #176]	; (8000bd4 <machine_state+0x4f8>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	4a2d      	ldr	r2, [pc, #180]	; (8000bdc <machine_state+0x500>)
 8000b26:	6812      	ldr	r2, [r2, #0]
 8000b28:	4611      	mov	r1, r2
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 f8f1 	bl	8000d12 <transmit_data>
			readFlag = FALSE;
 8000b30:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <machine_state+0x4e0>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	701a      	strb	r2, [r3, #0]
			timerFlag = FALSE;
 8000b36:	4b22      	ldr	r3, [pc, #136]	; (8000bc0 <machine_state+0x4e4>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	701a      	strb	r2, [r3, #0]
            rxGet = FALSE;
 8000b3c:	4b28      	ldr	r3, [pc, #160]	; (8000be0 <machine_state+0x504>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	701a      	strb	r2, [r3, #0]
            state = IDDLE;
 8000b42:	4b28      	ldr	r3, [pc, #160]	; (8000be4 <machine_state+0x508>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]
            readEnable = TRUE;
 8000b48:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <machine_state+0x4cc>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	701a      	strb	r2, [r3, #0]
            reset_buffer();
 8000b4e:	f7ff fd47 	bl	80005e0 <reset_buffer>
            break;
 8000b52:	e023      	b.n	8000b9c <machine_state+0x4c0>



        case READERROR:
        	payloadSize = 60;
 8000b54:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <machine_state+0x4f4>)
 8000b56:	223c      	movs	r2, #60	; 0x3c
 8000b58:	701a      	strb	r2, [r3, #0]
			TXsize = 67;
 8000b5a:	4b1e      	ldr	r3, [pc, #120]	; (8000bd4 <machine_state+0x4f8>)
 8000b5c:	2243      	movs	r2, #67	; 0x43
 8000b5e:	701a      	strb	r2, [r3, #0]
			dataToStruct[0] = READ;
 8000b60:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <machine_state+0x4fc>)
 8000b62:	2204      	movs	r2, #4
 8000b64:	701a      	strb	r2, [r3, #0]
			dataToStruct[1] = payloadSize;
 8000b66:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <machine_state+0x4f4>)
 8000b68:	781a      	ldrb	r2, [r3, #0]
 8000b6a:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <machine_state+0x4fc>)
 8000b6c:	705a      	strb	r2, [r3, #1]
			transmit_data(TXsize,ptr_dataTransmitter);
 8000b6e:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <machine_state+0x4f8>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	4a1a      	ldr	r2, [pc, #104]	; (8000bdc <machine_state+0x500>)
 8000b74:	6812      	ldr	r2, [r2, #0]
 8000b76:	4611      	mov	r1, r2
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 f8ca 	bl	8000d12 <transmit_data>
			transmitFlag = FALSE;
 8000b7e:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <machine_state+0x4ec>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	701a      	strb	r2, [r3, #0]
//					HAL_GPIO_TogglePin(GPIOA, ACQUISITION_Pin);
			rxGet = FALSE;
 8000b84:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <machine_state+0x504>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	701a      	strb	r2, [r3, #0]
			state = IDDLE;
 8000b8a:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <machine_state+0x508>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]
            break;
 8000b90:	e004      	b.n	8000b9c <machine_state+0x4c0>
            break;
 8000b92:	bf00      	nop
 8000b94:	e002      	b.n	8000b9c <machine_state+0x4c0>
            break;
 8000b96:	bf00      	nop
 8000b98:	e000      	b.n	8000b9c <machine_state+0x4c0>
            break;
 8000b9a:	bf00      	nop

        case ERROR:
            break;
    }
}
 8000b9c:	bf00      	nop
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000342 	.word	0x20000342
 8000bac:	20000448 	.word	0x20000448
 8000bb0:	20000478 	.word	0x20000478
 8000bb4:	2000044c 	.word	0x2000044c
 8000bb8:	2000044e 	.word	0x2000044e
 8000bbc:	20000444 	.word	0x20000444
 8000bc0:	20000445 	.word	0x20000445
 8000bc4:	20000004 	.word	0x20000004
 8000bc8:	20000490 	.word	0x20000490
 8000bcc:	200002e1 	.word	0x200002e1
 8000bd0:	20000335 	.word	0x20000335
 8000bd4:	20000336 	.word	0x20000336
 8000bd8:	20000338 	.word	0x20000338
 8000bdc:	2000033c 	.word	0x2000033c
 8000be0:	20000334 	.word	0x20000334
 8000be4:	2000032a 	.word	0x2000032a
 8000be8:	20000450 	.word	0x20000450
 8000bec:	20000344 	.word	0x20000344
 8000bf0:	20000340 	.word	0x20000340
 8000bf4:	20000341 	.word	0x20000341

08000bf8 <erasePayload>:

void erasePayload(char* TXpayload)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	for(unsigned char i=0;i<SIZE_PAYLOAD;i++) TXpayload[i]=0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	73fb      	strb	r3, [r7, #15]
 8000c04:	e007      	b.n	8000c16 <erasePayload+0x1e>
 8000c06:	7bfb      	ldrb	r3, [r7, #15]
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	701a      	strb	r2, [r3, #0]
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
 8000c12:	3301      	adds	r3, #1
 8000c14:	73fb      	strb	r3, [r7, #15]
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
 8000c18:	2b3b      	cmp	r3, #59	; 0x3b
 8000c1a:	d9f4      	bls.n	8000c06 <erasePayload+0xe>

}
 8000c1c:	bf00      	nop
 8000c1e:	bf00      	nop
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <get_header_start>:
#include <stdlib.h>
#include "comunicacao.h"
#include "usb_device.h"
#include "usbd_cdc_if.h"

unsigned char get_header_start(char *buffer){
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
    return buffer[0];
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	781b      	ldrb	r3, [r3, #0]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr

08000c3e <get_source_address>:
unsigned char get_source_address(char *buffer){
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
    return buffer[1];
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	781b      	ldrb	r3, [r3, #0]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr

08000c56 <get_destination_address>:

unsigned char get_destination_address(char *buffer){
 8000c56:	b480      	push	{r7}
 8000c58:	b083      	sub	sp, #12
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
    return buffer[2];
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3302      	adds	r3, #2
 8000c62:	781b      	ldrb	r3, [r3, #0]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr

08000c6e <get_function>:

unsigned char get_function(char *buffer){
 8000c6e:	b480      	push	{r7}
 8000c70:	b083      	sub	sp, #12
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
    return buffer[3];
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3303      	adds	r3, #3
 8000c7a:	781b      	ldrb	r3, [r3, #0]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr

08000c86 <get_payload_size>:

unsigned char get_payload_size(char *buffer){
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
    return buffer[4];
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	3304      	adds	r3, #4
 8000c92:	781b      	ldrb	r3, [r3, #0]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr

08000c9e <get_payload>:

char get_payload(char *buffer, char idx){
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	70fb      	strb	r3, [r7, #3]
	return buffer[5+idx];}
 8000caa:	78fb      	ldrb	r3, [r7, #3]
 8000cac:	3305      	adds	r3, #5
 8000cae:	461a      	mov	r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr

08000cc0 <get_checksum>:

unsigned char get_checksum(char *buffer){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
    return buffer[5+get_payload_size(buffer)];
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f7ff ffdc 	bl	8000c86 <get_payload_size>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	3305      	adds	r3, #5
 8000cd2:	461a      	mov	r2, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	781b      	ldrb	r3, [r3, #0]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <get_header_end>:

unsigned char get_header_end(char *buffer){
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
    return buffer[6+get_payload_size(buffer)];
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f7ff ffcb 	bl	8000c86 <get_payload_size>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	3306      	adds	r3, #6
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	781b      	ldrb	r3, [r3, #0]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <get_array_end>:

unsigned char get_array_end(){
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
    return END_ARRAY;
 8000d08:	2340      	movs	r3, #64	; 0x40
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr

08000d12 <transmit_data>:


void transmit_data(unsigned char dataSize, unsigned char* buffer){
 8000d12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d16:	b087      	sub	sp, #28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	6039      	str	r1, [r7, #0]
 8000d1e:	71fb      	strb	r3, [r7, #7]
 8000d20:	466b      	mov	r3, sp
 8000d22:	461e      	mov	r6, r3
    unsigned char TXbuffer[dataSize];
 8000d24:	79f9      	ldrb	r1, [r7, #7]
 8000d26:	460b      	mov	r3, r1
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	b2cb      	uxtb	r3, r1
 8000d2e:	2200      	movs	r2, #0
 8000d30:	4698      	mov	r8, r3
 8000d32:	4691      	mov	r9, r2
 8000d34:	f04f 0200 	mov.w	r2, #0
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d40:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d44:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d48:	b2cb      	uxtb	r3, r1
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	461c      	mov	r4, r3
 8000d4e:	4615      	mov	r5, r2
 8000d50:	f04f 0200 	mov.w	r2, #0
 8000d54:	f04f 0300 	mov.w	r3, #0
 8000d58:	00eb      	lsls	r3, r5, #3
 8000d5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d5e:	00e2      	lsls	r2, r4, #3
 8000d60:	460b      	mov	r3, r1
 8000d62:	3307      	adds	r3, #7
 8000d64:	08db      	lsrs	r3, r3, #3
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	ebad 0d03 	sub.w	sp, sp, r3
 8000d6c:	466b      	mov	r3, sp
 8000d6e:	3300      	adds	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]

    if(buffer[4] == 0)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	3304      	adds	r3, #4
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d123      	bne.n	8000dc4 <transmit_data+0xb2>
    {
        TXbuffer[0] = buffer[0];
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	781a      	ldrb	r2, [r3, #0]
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	701a      	strb	r2, [r3, #0]
        TXbuffer[1] = buffer[1];
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	785a      	ldrb	r2, [r3, #1]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	705a      	strb	r2, [r3, #1]
        TXbuffer[2] = buffer[2];
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	789a      	ldrb	r2, [r3, #2]
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	709a      	strb	r2, [r3, #2]
        TXbuffer[3] = buffer[3];
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	78da      	ldrb	r2, [r3, #3]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	70da      	strb	r2, [r3, #3]
        TXbuffer[4] = buffer[4];
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	791a      	ldrb	r2, [r3, #4]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	711a      	strb	r2, [r3, #4]
        TXbuffer[5] = buffer[65];
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	715a      	strb	r2, [r3, #5]
        TXbuffer[6] = buffer[66];
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	719a      	strb	r2, [r3, #6]
        CDC_Transmit_FS((unsigned*)TXbuffer, sizeof(TXbuffer));
 8000db8:	b28b      	uxth	r3, r1
 8000dba:	4619      	mov	r1, r3
 8000dbc:	68f8      	ldr	r0, [r7, #12]
 8000dbe:	f008 f959 	bl	8009074 <CDC_Transmit_FS>
 8000dc2:	e042      	b.n	8000e4a <transmit_data+0x138>
    }
    else if(buffer[4] == 1)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	3304      	adds	r3, #4
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d127      	bne.n	8000e1e <transmit_data+0x10c>
    {
        TXbuffer[0] = buffer[0];
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	781a      	ldrb	r2, [r3, #0]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	701a      	strb	r2, [r3, #0]
        TXbuffer[1] = buffer[1];
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	785a      	ldrb	r2, [r3, #1]
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	705a      	strb	r2, [r3, #1]
        TXbuffer[2] = buffer[2];
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	789a      	ldrb	r2, [r3, #2]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	709a      	strb	r2, [r3, #2]
        TXbuffer[3] = buffer[3];
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	78da      	ldrb	r2, [r3, #3]
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	70da      	strb	r2, [r3, #3]
        TXbuffer[4] = buffer[4];
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	791a      	ldrb	r2, [r3, #4]
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	711a      	strb	r2, [r3, #4]
        TXbuffer[5] = buffer[5];
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	795a      	ldrb	r2, [r3, #5]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	715a      	strb	r2, [r3, #5]
        TXbuffer[6] = buffer[65];
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	719a      	strb	r2, [r3, #6]
        TXbuffer[7] = buffer[66];
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	71da      	strb	r2, [r3, #7]
        CDC_Transmit_FS((unsigned*)TXbuffer, sizeof(TXbuffer));
 8000e12:	b28b      	uxth	r3, r1
 8000e14:	4619      	mov	r1, r3
 8000e16:	68f8      	ldr	r0, [r7, #12]
 8000e18:	f008 f92c 	bl	8009074 <CDC_Transmit_FS>
 8000e1c:	e015      	b.n	8000e4a <transmit_data+0x138>
    }

    else
    {
        for(unsigned char x=0;x<dataSize;x++) TXbuffer[x] = buffer[x];
 8000e1e:	2300      	movs	r3, #0
 8000e20:	75fb      	strb	r3, [r7, #23]
 8000e22:	e009      	b.n	8000e38 <transmit_data+0x126>
 8000e24:	7dfb      	ldrb	r3, [r7, #23]
 8000e26:	683a      	ldr	r2, [r7, #0]
 8000e28:	441a      	add	r2, r3
 8000e2a:	7dfb      	ldrb	r3, [r7, #23]
 8000e2c:	7810      	ldrb	r0, [r2, #0]
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	54d0      	strb	r0, [r2, r3]
 8000e32:	7dfb      	ldrb	r3, [r7, #23]
 8000e34:	3301      	adds	r3, #1
 8000e36:	75fb      	strb	r3, [r7, #23]
 8000e38:	7dfa      	ldrb	r2, [r7, #23]
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d3f1      	bcc.n	8000e24 <transmit_data+0x112>
        CDC_Transmit_FS((unsigned*)TXbuffer, sizeof(TXbuffer));
 8000e40:	b28b      	uxth	r3, r1
 8000e42:	4619      	mov	r1, r3
 8000e44:	68f8      	ldr	r0, [r7, #12]
 8000e46:	f008 f915 	bl	8009074 <CDC_Transmit_FS>
 8000e4a:	46b5      	mov	sp, r6


//    for(unsigned char y=0;y<dataSize;y++){
//        printf("Msg de retorno ID Txbuffer[%d] = %d\n",y,TXbuffer[y]);
//    }
}
 8000e4c:	bf00      	nop
 8000e4e:	371c      	adds	r7, #28
 8000e50:	46bd      	mov	sp, r7
 8000e52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000e56 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e5a:	f000 fbf7 	bl	800164c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e5e:	f000 f80b 	bl	8000e78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e62:	f000 f905 	bl	8001070 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e66:	f000 f861 	bl	8000f2c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e6a:	f000 f8b3 	bl	8000fd4 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000e6e:	f008 f825 	bl	8008ebc <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  machine_state();
 8000e72:	f7ff fc33 	bl	80006dc <machine_state>
 8000e76:	e7fc      	b.n	8000e72 <main+0x1c>

08000e78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b094      	sub	sp, #80	; 0x50
 8000e7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e82:	2228      	movs	r2, #40	; 0x28
 8000e84:	2100      	movs	r1, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f008 fd0a 	bl	80098a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ebe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ec2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ec4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f002 fbd2 	bl	8003678 <HAL_RCC_OscConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000eda:	f000 f9fb 	bl	80012d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ede:	230f      	movs	r3, #15
 8000ee0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2102      	movs	r1, #2
 8000efa:	4618      	mov	r0, r3
 8000efc:	f002 fe3e 	bl	8003b7c <HAL_RCC_ClockConfig>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000f06:	f000 f9e5 	bl	80012d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f0a:	2310      	movs	r3, #16
 8000f0c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	4618      	mov	r0, r3
 8000f16:	f002 ff97 	bl	8003e48 <HAL_RCCEx_PeriphCLKConfig>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000f20:	f000 f9d8 	bl	80012d4 <Error_Handler>
  }
}
 8000f24:	bf00      	nop
 8000f26:	3750      	adds	r7, #80	; 0x50
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08c      	sub	sp, #48	; 0x30
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f32:	f107 030c 	add.w	r3, r7, #12
 8000f36:	2224      	movs	r2, #36	; 0x24
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f008 fcb0 	bl	80098a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f48:	4b21      	ldr	r3, [pc, #132]	; (8000fd0 <MX_TIM2_Init+0xa4>)
 8000f4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f50:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <MX_TIM2_Init+0xa4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f56:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <MX_TIM2_Init+0xa4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000f5c:	4b1c      	ldr	r3, [pc, #112]	; (8000fd0 <MX_TIM2_Init+0xa4>)
 8000f5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f64:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <MX_TIM2_Init+0xa4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6a:	4b19      	ldr	r3, [pc, #100]	; (8000fd0 <MX_TIM2_Init+0xa4>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f70:	2301      	movs	r3, #1
 8000f72:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f74:	2300      	movs	r3, #0
 8000f76:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000f80:	230f      	movs	r3, #15
 8000f82:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f84:	2300      	movs	r3, #0
 8000f86:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8000f90:	230f      	movs	r3, #15
 8000f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <MX_TIM2_Init+0xa4>)
 8000f9c:	f003 f8da 	bl	8004154 <HAL_TIM_Encoder_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000fa6:	f000 f995 	bl	80012d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000faa:	2300      	movs	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4806      	ldr	r0, [pc, #24]	; (8000fd0 <MX_TIM2_Init+0xa4>)
 8000fb8:	f003 fdd4 	bl	8004b64 <HAL_TIMEx_MasterConfigSynchronization>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000fc2:	f000 f987 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	3730      	adds	r7, #48	; 0x30
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200003b4 	.word	0x200003b4

08000fd4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fda:	f107 0308 	add.w	r3, r7, #8
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe8:	463b      	mov	r3, r7
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ff0:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <MX_TIM3_Init+0x94>)
 8000ff2:	4a1e      	ldr	r2, [pc, #120]	; (800106c <MX_TIM3_Init+0x98>)
 8000ff4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <MX_TIM3_Init+0x94>)
 8000ff8:	2247      	movs	r2, #71	; 0x47
 8000ffa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffc:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <MX_TIM3_Init+0x94>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <MX_TIM3_Init+0x94>)
 8001004:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001008:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100a:	4b17      	ldr	r3, [pc, #92]	; (8001068 <MX_TIM3_Init+0x94>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001010:	4b15      	ldr	r3, [pc, #84]	; (8001068 <MX_TIM3_Init+0x94>)
 8001012:	2200      	movs	r2, #0
 8001014:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001016:	4814      	ldr	r0, [pc, #80]	; (8001068 <MX_TIM3_Init+0x94>)
 8001018:	f002 ffcc 	bl	8003fb4 <HAL_TIM_Base_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001022:	f000 f957 	bl	80012d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001026:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800102a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800102c:	f107 0308 	add.w	r3, r7, #8
 8001030:	4619      	mov	r1, r3
 8001032:	480d      	ldr	r0, [pc, #52]	; (8001068 <MX_TIM3_Init+0x94>)
 8001034:	f003 fb9b 	bl	800476e <HAL_TIM_ConfigClockSource>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800103e:	f000 f949 	bl	80012d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001042:	2300      	movs	r3, #0
 8001044:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800104a:	463b      	mov	r3, r7
 800104c:	4619      	mov	r1, r3
 800104e:	4806      	ldr	r0, [pc, #24]	; (8001068 <MX_TIM3_Init+0x94>)
 8001050:	f003 fd88 	bl	8004b64 <HAL_TIMEx_MasterConfigSynchronization>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800105a:	f000 f93b 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200003fc 	.word	0x200003fc
 800106c:	40000400 	.word	0x40000400

08001070 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001076:	f107 0310 	add.w	r3, r7, #16
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001084:	4b43      	ldr	r3, [pc, #268]	; (8001194 <MX_GPIO_Init+0x124>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	4a42      	ldr	r2, [pc, #264]	; (8001194 <MX_GPIO_Init+0x124>)
 800108a:	f043 0310 	orr.w	r3, r3, #16
 800108e:	6193      	str	r3, [r2, #24]
 8001090:	4b40      	ldr	r3, [pc, #256]	; (8001194 <MX_GPIO_Init+0x124>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	f003 0310 	and.w	r3, r3, #16
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800109c:	4b3d      	ldr	r3, [pc, #244]	; (8001194 <MX_GPIO_Init+0x124>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	4a3c      	ldr	r2, [pc, #240]	; (8001194 <MX_GPIO_Init+0x124>)
 80010a2:	f043 0320 	orr.w	r3, r3, #32
 80010a6:	6193      	str	r3, [r2, #24]
 80010a8:	4b3a      	ldr	r3, [pc, #232]	; (8001194 <MX_GPIO_Init+0x124>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	f003 0320 	and.w	r3, r3, #32
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b4:	4b37      	ldr	r3, [pc, #220]	; (8001194 <MX_GPIO_Init+0x124>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a36      	ldr	r2, [pc, #216]	; (8001194 <MX_GPIO_Init+0x124>)
 80010ba:	f043 0304 	orr.w	r3, r3, #4
 80010be:	6193      	str	r3, [r2, #24]
 80010c0:	4b34      	ldr	r3, [pc, #208]	; (8001194 <MX_GPIO_Init+0x124>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010cc:	4b31      	ldr	r3, [pc, #196]	; (8001194 <MX_GPIO_Init+0x124>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4a30      	ldr	r2, [pc, #192]	; (8001194 <MX_GPIO_Init+0x124>)
 80010d2:	f043 0308 	orr.w	r3, r3, #8
 80010d6:	6193      	str	r3, [r2, #24]
 80010d8:	4b2e      	ldr	r3, [pc, #184]	; (8001194 <MX_GPIO_Init+0x124>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	f003 0308 	and.w	r3, r3, #8
 80010e0:	603b      	str	r3, [r7, #0]
 80010e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ea:	482b      	ldr	r0, [pc, #172]	; (8001198 <MX_GPIO_Init+0x128>)
 80010ec:	f000 fdc6 	bl	8001c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STOP_Pin|ERRO_Pin|STATUS_Pin|CONFIG_Pin, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80010f6:	4829      	ldr	r0, [pc, #164]	; (800119c <MX_GPIO_Init+0x12c>)
 80010f8:	f000 fdc0 	bl	8001c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACQUISITION_GPIO_Port, ACQUISITION_Pin, GPIO_PIN_RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001102:	4827      	ldr	r0, [pc, #156]	; (80011a0 <MX_GPIO_Init+0x130>)
 8001104:	f000 fdba 	bl	8001c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001108:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800110c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110e:	2301      	movs	r3, #1
 8001110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001112:	2302      	movs	r3, #2
 8001114:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001116:	2302      	movs	r3, #2
 8001118:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800111a:	f107 0310 	add.w	r3, r7, #16
 800111e:	4619      	mov	r1, r3
 8001120:	481d      	ldr	r0, [pc, #116]	; (8001198 <MX_GPIO_Init+0x128>)
 8001122:	f000 fc27 	bl	8001974 <HAL_GPIO_Init>

  /*Configure GPIO pins : STOP_Pin ERRO_Pin STATUS_Pin CONFIG_Pin */
  GPIO_InitStruct.Pin = STOP_Pin|ERRO_Pin|STATUS_Pin|CONFIG_Pin;
 8001126:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800112a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112c:	2301      	movs	r3, #1
 800112e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001130:	2302      	movs	r3, #2
 8001132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2302      	movs	r3, #2
 8001136:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	4619      	mov	r1, r3
 800113e:	4817      	ldr	r0, [pc, #92]	; (800119c <MX_GPIO_Init+0x12c>)
 8001140:	f000 fc18 	bl	8001974 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACQUISITION_Pin */
  GPIO_InitStruct.Pin = ACQUISITION_Pin;
 8001144:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001148:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114a:	2301      	movs	r3, #1
 800114c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800114e:	2302      	movs	r3, #2
 8001150:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2302      	movs	r3, #2
 8001154:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACQUISITION_GPIO_Port, &GPIO_InitStruct);
 8001156:	f107 0310 	add.w	r3, r7, #16
 800115a:	4619      	mov	r1, r3
 800115c:	4810      	ldr	r0, [pc, #64]	; (80011a0 <MX_GPIO_Init+0x130>)
 800115e:	f000 fc09 	bl	8001974 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8001162:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001166:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001168:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <MX_GPIO_Init+0x134>)
 800116a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8001170:	f107 0310 	add.w	r3, r7, #16
 8001174:	4619      	mov	r1, r3
 8001176:	480a      	ldr	r0, [pc, #40]	; (80011a0 <MX_GPIO_Init+0x130>)
 8001178:	f000 fbfc 	bl	8001974 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800117c:	2200      	movs	r2, #0
 800117e:	2100      	movs	r1, #0
 8001180:	2017      	movs	r0, #23
 8001182:	f000 fbc0 	bl	8001906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001186:	2017      	movs	r0, #23
 8001188:	f000 fbd9 	bl	800193e <HAL_NVIC_EnableIRQ>

}
 800118c:	bf00      	nop
 800118e:	3720      	adds	r7, #32
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40021000 	.word	0x40021000
 8001198:	40011000 	.word	0x40011000
 800119c:	40010c00 	.word	0x40010c00
 80011a0:	40010800 	.word	0x40010800
 80011a4:	10110000 	.word	0x10110000

080011a8 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

//InterrupÃ§Ãµes
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	if(readFlag == TRUE)
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <HAL_TIM_IC_CaptureCallback+0x5c>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d11f      	bne.n	80011f8 <HAL_TIM_IC_CaptureCallback+0x50>
	{
		/*pulseCounter++;*/
		direction = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <HAL_TIM_IC_CaptureCallback+0x60>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0310 	and.w	r3, r3, #16
 80011c2:	2b10      	cmp	r3, #16
 80011c4:	bf0c      	ite	eq
 80011c6:	2301      	moveq	r3, #1
 80011c8:	2300      	movne	r3, #0
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <HAL_TIM_IC_CaptureCallback+0x64>)
 80011d0:	701a      	strb	r2, [r3, #0]
		if(direction == 0)
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <HAL_TIM_IC_CaptureCallback+0x64>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d105      	bne.n	80011e6 <HAL_TIM_IC_CaptureCallback+0x3e>
		{
			pulseCounter++;
 80011da:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <HAL_TIM_IC_CaptureCallback+0x68>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	3301      	adds	r3, #1
 80011e0:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <HAL_TIM_IC_CaptureCallback+0x68>)
 80011e2:	6013      	str	r3, [r2, #0]
			pulseCounter--;
//			if(pulseCounter<0) pulseCounter = 0;
			/*posAtual = pulseCounter;*/
		}
	}
}
 80011e4:	e008      	b.n	80011f8 <HAL_TIM_IC_CaptureCallback+0x50>
		else if (direction == 1)
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <HAL_TIM_IC_CaptureCallback+0x64>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d104      	bne.n	80011f8 <HAL_TIM_IC_CaptureCallback+0x50>
			pulseCounter--;
 80011ee:	4b08      	ldr	r3, [pc, #32]	; (8001210 <HAL_TIM_IC_CaptureCallback+0x68>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	4a06      	ldr	r2, [pc, #24]	; (8001210 <HAL_TIM_IC_CaptureCallback+0x68>)
 80011f6:	6013      	str	r3, [r2, #0]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000444 	.word	0x20000444
 8001208:	200003b4 	.word	0x200003b4
 800120c:	20000491 	.word	0x20000491
 8001210:	20000448 	.word	0x20000448

08001214 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	/*50 Hz -> 20
	100 hz -> 10
	200 hz ->5
	500 Hz -> 2
	1k -> 1*/
	if(timerFlag == TRUE )
 800121c:	4b23      	ldr	r3, [pc, #140]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x98>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d13e      	bne.n	80012a2 <HAL_TIM_PeriodElapsedCallback+0x8e>
	{
		newTime+=1; //1ms
 8001224:	4b22      	ldr	r3, [pc, #136]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	3301      	adds	r3, #1
 800122a:	b29a      	uxth	r2, r3
 800122c:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800122e:	801a      	strh	r2, [r3, #0]
		if(newTime == ptr_dataDevice->timeSampling)
 8001230:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	789b      	ldrb	r3, [r3, #2]
 8001236:	b29a      	uxth	r2, r3
 8001238:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800123a:	881b      	ldrh	r3, [r3, #0]
 800123c:	429a      	cmp	r2, r3
 800123e:	d126      	bne.n	800128e <HAL_TIM_PeriodElapsedCallback+0x7a>
		{
			readFlag = 0;
 8001240:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
			bufferPulso[samples] = pulseCounter;
 8001246:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	4619      	mov	r1, r3
 800124c:	4b1c      	ldr	r3, [pc, #112]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a1c      	ldr	r2, [pc, #112]	; (80012c4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001252:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			acquiredTime += newTime;
 8001256:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001258:	881a      	ldrh	r2, [r3, #0]
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	4413      	add	r3, r2
 8001260:	b29a      	uxth	r2, r3
 8001262:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001264:	801a      	strh	r2, [r3, #0]
			currentTime[samples] = acquiredTime;
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800126e:	8819      	ldrh	r1, [r3, #0]
 8001270:	4b16      	ldr	r3, [pc, #88]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001272:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			samples++;
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	3301      	adds	r3, #1
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001280:	701a      	strb	r2, [r3, #0]
			newTime = 0;
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001284:	2200      	movs	r2, #0
 8001286:	801a      	strh	r2, [r3, #0]
			readFlag = TRUE;
 8001288:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]
		}
		if(samples == SAMPLES)
 800128e:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b0a      	cmp	r3, #10
 8001294:	d105      	bne.n	80012a2 <HAL_TIM_PeriodElapsedCallback+0x8e>
		{
			transmitFlag = TRUE;
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001298:	2201      	movs	r2, #1
 800129a:	701a      	strb	r2, [r3, #0]
			samples=0;
 800129c:	4b07      	ldr	r3, [pc, #28]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr
 80012ac:	20000445 	.word	0x20000445
 80012b0:	2000044c 	.word	0x2000044c
 80012b4:	20000000 	.word	0x20000000
 80012b8:	20000444 	.word	0x20000444
 80012bc:	2000044e 	.word	0x2000044e
 80012c0:	20000448 	.word	0x20000448
 80012c4:	20000450 	.word	0x20000450
 80012c8:	20000478 	.word	0x20000478
 80012cc:	2000047c 	.word	0x2000047c
 80012d0:	20000490 	.word	0x20000490

080012d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d8:	b672      	cpsid	i
}
 80012da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012dc:	e7fe      	b.n	80012dc <Error_Handler+0x8>
	...

080012e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <HAL_MspInit+0x5c>)
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	4a14      	ldr	r2, [pc, #80]	; (800133c <HAL_MspInit+0x5c>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6193      	str	r3, [r2, #24]
 80012f2:	4b12      	ldr	r3, [pc, #72]	; (800133c <HAL_MspInit+0x5c>)
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fe:	4b0f      	ldr	r3, [pc, #60]	; (800133c <HAL_MspInit+0x5c>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	4a0e      	ldr	r2, [pc, #56]	; (800133c <HAL_MspInit+0x5c>)
 8001304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001308:	61d3      	str	r3, [r2, #28]
 800130a:	4b0c      	ldr	r3, [pc, #48]	; (800133c <HAL_MspInit+0x5c>)
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <HAL_MspInit+0x60>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	4a04      	ldr	r2, [pc, #16]	; (8001340 <HAL_MspInit+0x60>)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001332:	bf00      	nop
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr
 800133c:	40021000 	.word	0x40021000
 8001340:	40010000 	.word	0x40010000

08001344 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b088      	sub	sp, #32
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 0310 	add.w	r3, r7, #16
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001362:	d12b      	bne.n	80013bc <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001364:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001366:	69db      	ldr	r3, [r3, #28]
 8001368:	4a16      	ldr	r2, [pc, #88]	; (80013c4 <HAL_TIM_Encoder_MspInit+0x80>)
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	61d3      	str	r3, [r2, #28]
 8001370:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001372:	69db      	ldr	r3, [r3, #28]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <HAL_TIM_Encoder_MspInit+0x80>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4a10      	ldr	r2, [pc, #64]	; (80013c4 <HAL_TIM_Encoder_MspInit+0x80>)
 8001382:	f043 0304 	orr.w	r3, r3, #4
 8001386:	6193      	str	r3, [r2, #24]
 8001388:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <HAL_TIM_Encoder_MspInit+0x80>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001394:	2303      	movs	r3, #3
 8001396:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a0:	f107 0310 	add.w	r3, r7, #16
 80013a4:	4619      	mov	r1, r3
 80013a6:	4808      	ldr	r0, [pc, #32]	; (80013c8 <HAL_TIM_Encoder_MspInit+0x84>)
 80013a8:	f000 fae4 	bl	8001974 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2100      	movs	r1, #0
 80013b0:	201c      	movs	r0, #28
 80013b2:	f000 faa8 	bl	8001906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013b6:	201c      	movs	r0, #28
 80013b8:	f000 fac1 	bl	800193e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013bc:	bf00      	nop
 80013be:	3720      	adds	r7, #32
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40010800 	.word	0x40010800

080013cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <HAL_TIM_Base_MspInit+0x44>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d113      	bne.n	8001406 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013de:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <HAL_TIM_Base_MspInit+0x48>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	4a0c      	ldr	r2, [pc, #48]	; (8001414 <HAL_TIM_Base_MspInit+0x48>)
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	61d3      	str	r3, [r2, #28]
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <HAL_TIM_Base_MspInit+0x48>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	201d      	movs	r0, #29
 80013fc:	f000 fa83 	bl	8001906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001400:	201d      	movs	r0, #29
 8001402:	f000 fa9c 	bl	800193e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40000400 	.word	0x40000400
 8001414:	40021000 	.word	0x40021000

08001418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800141c:	e7fe      	b.n	800141c <NMI_Handler+0x4>

0800141e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001422:	e7fe      	b.n	8001422 <HardFault_Handler+0x4>

08001424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <MemManage_Handler+0x4>

0800142a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800142e:	e7fe      	b.n	800142e <BusFault_Handler+0x4>

08001430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <UsageFault_Handler+0x4>

08001436 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr

08001442 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr

0800144e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr

0800145a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800145e:	f000 f93b 	bl	80016d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800146e:	f000 fd70 	bl	8001f52 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20001134 	.word	0x20001134

0800147c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RESET_Pin);
 8001480:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001484:	f000 fc12 	bl	8001cac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}

0800148c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001490:	4802      	ldr	r0, [pc, #8]	; (800149c <TIM2_IRQHandler+0x10>)
 8001492:	f003 f864 	bl	800455e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200003b4 	.word	0x200003b4

080014a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <TIM3_IRQHandler+0x10>)
 80014a6:	f003 f85a 	bl	800455e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200003fc 	.word	0x200003fc

080014b4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	e00a      	b.n	80014dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014c6:	f3af 8000 	nop.w
 80014ca:	4601      	mov	r1, r0
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	1c5a      	adds	r2, r3, #1
 80014d0:	60ba      	str	r2, [r7, #8]
 80014d2:	b2ca      	uxtb	r2, r1
 80014d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	3301      	adds	r3, #1
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	dbf0      	blt.n	80014c6 <_read+0x12>
	}

return len;
 80014e4:	687b      	ldr	r3, [r7, #4]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b086      	sub	sp, #24
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	60f8      	str	r0, [r7, #12]
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	e009      	b.n	8001514 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	60ba      	str	r2, [r7, #8]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	3301      	adds	r3, #1
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	429a      	cmp	r2, r3
 800151a:	dbf1      	blt.n	8001500 <_write+0x12>
	}
	return len;
 800151c:	687b      	ldr	r3, [r7, #4]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3718      	adds	r7, #24
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <_close>:

int _close(int file)
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
	return -1;
 800152e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001532:	4618      	mov	r0, r3
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr

0800153c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800154c:	605a      	str	r2, [r3, #4]
	return 0;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr

0800155a <_isatty>:

int _isatty(int file)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
	return 1;
 8001562:	2301      	movs	r3, #1
}
 8001564:	4618      	mov	r0, r3
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr

0800156e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800156e:	b480      	push	{r7}
 8001570:	b085      	sub	sp, #20
 8001572:	af00      	add	r7, sp, #0
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
	return 0;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr
	...

08001588 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001590:	4a14      	ldr	r2, [pc, #80]	; (80015e4 <_sbrk+0x5c>)
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <_sbrk+0x60>)
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800159c:	4b13      	ldr	r3, [pc, #76]	; (80015ec <_sbrk+0x64>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d102      	bne.n	80015aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a4:	4b11      	ldr	r3, [pc, #68]	; (80015ec <_sbrk+0x64>)
 80015a6:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <_sbrk+0x68>)
 80015a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <_sbrk+0x64>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d207      	bcs.n	80015c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b8:	f008 f93a 	bl	8009830 <__errno>
 80015bc:	4603      	mov	r3, r0
 80015be:	220c      	movs	r2, #12
 80015c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015c2:	f04f 33ff 	mov.w	r3, #4294967295
 80015c6:	e009      	b.n	80015dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c8:	4b08      	ldr	r3, [pc, #32]	; (80015ec <_sbrk+0x64>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ce:	4b07      	ldr	r3, [pc, #28]	; (80015ec <_sbrk+0x64>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	4a05      	ldr	r2, [pc, #20]	; (80015ec <_sbrk+0x64>)
 80015d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015da:	68fb      	ldr	r3, [r7, #12]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20005000 	.word	0x20005000
 80015e8:	00000400 	.word	0x00000400
 80015ec:	20000494 	.word	0x20000494
 80015f0:	20001650 	.word	0x20001650

080015f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001600:	480c      	ldr	r0, [pc, #48]	; (8001634 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001602:	490d      	ldr	r1, [pc, #52]	; (8001638 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001604:	4a0d      	ldr	r2, [pc, #52]	; (800163c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001608:	e002      	b.n	8001610 <LoopCopyDataInit>

0800160a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800160c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160e:	3304      	adds	r3, #4

08001610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001614:	d3f9      	bcc.n	800160a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001616:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001618:	4c0a      	ldr	r4, [pc, #40]	; (8001644 <LoopFillZerobss+0x22>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800161c:	e001      	b.n	8001622 <LoopFillZerobss>

0800161e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001620:	3204      	adds	r2, #4

08001622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001624:	d3fb      	bcc.n	800161e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001626:	f7ff ffe5 	bl	80015f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800162a:	f008 f907 	bl	800983c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800162e:	f7ff fc12 	bl	8000e56 <main>
  bx lr
 8001632:	4770      	bx	lr
  ldr r0, =_sdata
 8001634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001638:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800163c:	0800a95c 	.word	0x0800a95c
  ldr r2, =_sbss
 8001640:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001644:	20001650 	.word	0x20001650

08001648 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001648:	e7fe      	b.n	8001648 <ADC1_2_IRQHandler>
	...

0800164c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001650:	4b08      	ldr	r3, [pc, #32]	; (8001674 <HAL_Init+0x28>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a07      	ldr	r2, [pc, #28]	; (8001674 <HAL_Init+0x28>)
 8001656:	f043 0310 	orr.w	r3, r3, #16
 800165a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165c:	2003      	movs	r0, #3
 800165e:	f000 f947 	bl	80018f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001662:	200f      	movs	r0, #15
 8001664:	f000 f808 	bl	8001678 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001668:	f7ff fe3a 	bl	80012e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40022000 	.word	0x40022000

08001678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_InitTick+0x54>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_InitTick+0x58>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	4619      	mov	r1, r3
 800168a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001692:	fbb2 f3f3 	udiv	r3, r2, r3
 8001696:	4618      	mov	r0, r3
 8001698:	f000 f95f 	bl	800195a <HAL_SYSTICK_Config>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00e      	b.n	80016c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b0f      	cmp	r3, #15
 80016aa:	d80a      	bhi.n	80016c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ac:	2200      	movs	r2, #0
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	f000 f927 	bl	8001906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b8:	4a06      	ldr	r2, [pc, #24]	; (80016d4 <HAL_InitTick+0x5c>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	e000      	b.n	80016c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000008 	.word	0x20000008
 80016d0:	20000010 	.word	0x20000010
 80016d4:	2000000c 	.word	0x2000000c

080016d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <HAL_IncTick+0x1c>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <HAL_IncTick+0x20>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	4a03      	ldr	r2, [pc, #12]	; (80016f8 <HAL_IncTick+0x20>)
 80016ea:	6013      	str	r3, [r2, #0]
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr
 80016f4:	20000010 	.word	0x20000010
 80016f8:	20000498 	.word	0x20000498

080016fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001700:	4b02      	ldr	r3, [pc, #8]	; (800170c <HAL_GetTick+0x10>)
 8001702:	681b      	ldr	r3, [r3, #0]
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr
 800170c:	20000498 	.word	0x20000498

08001710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001718:	f7ff fff0 	bl	80016fc <HAL_GetTick>
 800171c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001728:	d005      	beq.n	8001736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800172a:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <HAL_Delay+0x44>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	461a      	mov	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4413      	add	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001736:	bf00      	nop
 8001738:	f7ff ffe0 	bl	80016fc <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	429a      	cmp	r2, r3
 8001746:	d8f7      	bhi.n	8001738 <HAL_Delay+0x28>
  {
  }
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000010 	.word	0x20000010

08001758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800176e:	68ba      	ldr	r2, [r7, #8]
 8001770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001774:	4013      	ands	r3, r2
 8001776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001780:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800178a:	4a04      	ldr	r2, [pc, #16]	; (800179c <__NVIC_SetPriorityGrouping+0x44>)
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	60d3      	str	r3, [r2, #12]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <__NVIC_GetPriorityGrouping+0x18>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	0a1b      	lsrs	r3, r3, #8
 80017aa:	f003 0307 	and.w	r3, r3, #7
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	db0b      	blt.n	80017e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	f003 021f 	and.w	r2, r3, #31
 80017d4:	4906      	ldr	r1, [pc, #24]	; (80017f0 <__NVIC_EnableIRQ+0x34>)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	095b      	lsrs	r3, r3, #5
 80017dc:	2001      	movs	r0, #1
 80017de:	fa00 f202 	lsl.w	r2, r0, r2
 80017e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr
 80017f0:	e000e100 	.word	0xe000e100

080017f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	6039      	str	r1, [r7, #0]
 80017fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001804:	2b00      	cmp	r3, #0
 8001806:	db0a      	blt.n	800181e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	b2da      	uxtb	r2, r3
 800180c:	490c      	ldr	r1, [pc, #48]	; (8001840 <__NVIC_SetPriority+0x4c>)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	0112      	lsls	r2, r2, #4
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	440b      	add	r3, r1
 8001818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800181c:	e00a      	b.n	8001834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	b2da      	uxtb	r2, r3
 8001822:	4908      	ldr	r1, [pc, #32]	; (8001844 <__NVIC_SetPriority+0x50>)
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	3b04      	subs	r3, #4
 800182c:	0112      	lsls	r2, r2, #4
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	440b      	add	r3, r1
 8001832:	761a      	strb	r2, [r3, #24]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000e100 	.word	0xe000e100
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001848:	b480      	push	{r7}
 800184a:	b089      	sub	sp, #36	; 0x24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f1c3 0307 	rsb	r3, r3, #7
 8001862:	2b04      	cmp	r3, #4
 8001864:	bf28      	it	cs
 8001866:	2304      	movcs	r3, #4
 8001868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3304      	adds	r3, #4
 800186e:	2b06      	cmp	r3, #6
 8001870:	d902      	bls.n	8001878 <NVIC_EncodePriority+0x30>
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3b03      	subs	r3, #3
 8001876:	e000      	b.n	800187a <NVIC_EncodePriority+0x32>
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	f04f 32ff 	mov.w	r2, #4294967295
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43da      	mvns	r2, r3
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	401a      	ands	r2, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001890:	f04f 31ff 	mov.w	r1, #4294967295
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	fa01 f303 	lsl.w	r3, r1, r3
 800189a:	43d9      	mvns	r1, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	4313      	orrs	r3, r2
         );
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3724      	adds	r7, #36	; 0x24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr

080018ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018bc:	d301      	bcc.n	80018c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018be:	2301      	movs	r3, #1
 80018c0:	e00f      	b.n	80018e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c2:	4a0a      	ldr	r2, [pc, #40]	; (80018ec <SysTick_Config+0x40>)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ca:	210f      	movs	r1, #15
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295
 80018d0:	f7ff ff90 	bl	80017f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <SysTick_Config+0x40>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018da:	4b04      	ldr	r3, [pc, #16]	; (80018ec <SysTick_Config+0x40>)
 80018dc:	2207      	movs	r2, #7
 80018de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	e000e010 	.word	0xe000e010

080018f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ff2d 	bl	8001758 <__NVIC_SetPriorityGrouping>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001906:	b580      	push	{r7, lr}
 8001908:	b086      	sub	sp, #24
 800190a:	af00      	add	r7, sp, #0
 800190c:	4603      	mov	r3, r0
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
 8001912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001918:	f7ff ff42 	bl	80017a0 <__NVIC_GetPriorityGrouping>
 800191c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	68b9      	ldr	r1, [r7, #8]
 8001922:	6978      	ldr	r0, [r7, #20]
 8001924:	f7ff ff90 	bl	8001848 <NVIC_EncodePriority>
 8001928:	4602      	mov	r2, r0
 800192a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff5f 	bl	80017f4 <__NVIC_SetPriority>
}
 8001936:	bf00      	nop
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	4603      	mov	r3, r0
 8001946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff35 	bl	80017bc <__NVIC_EnableIRQ>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff ffa2 	bl	80018ac <SysTick_Config>
 8001968:	4603      	mov	r3, r0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001974:	b480      	push	{r7}
 8001976:	b08b      	sub	sp, #44	; 0x2c
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001982:	2300      	movs	r3, #0
 8001984:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001986:	e169      	b.n	8001c5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001988:	2201      	movs	r2, #1
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	69fa      	ldr	r2, [r7, #28]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	f040 8158 	bne.w	8001c56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	4a9a      	ldr	r2, [pc, #616]	; (8001c14 <HAL_GPIO_Init+0x2a0>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d05e      	beq.n	8001a6e <HAL_GPIO_Init+0xfa>
 80019b0:	4a98      	ldr	r2, [pc, #608]	; (8001c14 <HAL_GPIO_Init+0x2a0>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d875      	bhi.n	8001aa2 <HAL_GPIO_Init+0x12e>
 80019b6:	4a98      	ldr	r2, [pc, #608]	; (8001c18 <HAL_GPIO_Init+0x2a4>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d058      	beq.n	8001a6e <HAL_GPIO_Init+0xfa>
 80019bc:	4a96      	ldr	r2, [pc, #600]	; (8001c18 <HAL_GPIO_Init+0x2a4>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d86f      	bhi.n	8001aa2 <HAL_GPIO_Init+0x12e>
 80019c2:	4a96      	ldr	r2, [pc, #600]	; (8001c1c <HAL_GPIO_Init+0x2a8>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d052      	beq.n	8001a6e <HAL_GPIO_Init+0xfa>
 80019c8:	4a94      	ldr	r2, [pc, #592]	; (8001c1c <HAL_GPIO_Init+0x2a8>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d869      	bhi.n	8001aa2 <HAL_GPIO_Init+0x12e>
 80019ce:	4a94      	ldr	r2, [pc, #592]	; (8001c20 <HAL_GPIO_Init+0x2ac>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d04c      	beq.n	8001a6e <HAL_GPIO_Init+0xfa>
 80019d4:	4a92      	ldr	r2, [pc, #584]	; (8001c20 <HAL_GPIO_Init+0x2ac>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d863      	bhi.n	8001aa2 <HAL_GPIO_Init+0x12e>
 80019da:	4a92      	ldr	r2, [pc, #584]	; (8001c24 <HAL_GPIO_Init+0x2b0>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d046      	beq.n	8001a6e <HAL_GPIO_Init+0xfa>
 80019e0:	4a90      	ldr	r2, [pc, #576]	; (8001c24 <HAL_GPIO_Init+0x2b0>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d85d      	bhi.n	8001aa2 <HAL_GPIO_Init+0x12e>
 80019e6:	2b12      	cmp	r3, #18
 80019e8:	d82a      	bhi.n	8001a40 <HAL_GPIO_Init+0xcc>
 80019ea:	2b12      	cmp	r3, #18
 80019ec:	d859      	bhi.n	8001aa2 <HAL_GPIO_Init+0x12e>
 80019ee:	a201      	add	r2, pc, #4	; (adr r2, 80019f4 <HAL_GPIO_Init+0x80>)
 80019f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f4:	08001a6f 	.word	0x08001a6f
 80019f8:	08001a49 	.word	0x08001a49
 80019fc:	08001a5b 	.word	0x08001a5b
 8001a00:	08001a9d 	.word	0x08001a9d
 8001a04:	08001aa3 	.word	0x08001aa3
 8001a08:	08001aa3 	.word	0x08001aa3
 8001a0c:	08001aa3 	.word	0x08001aa3
 8001a10:	08001aa3 	.word	0x08001aa3
 8001a14:	08001aa3 	.word	0x08001aa3
 8001a18:	08001aa3 	.word	0x08001aa3
 8001a1c:	08001aa3 	.word	0x08001aa3
 8001a20:	08001aa3 	.word	0x08001aa3
 8001a24:	08001aa3 	.word	0x08001aa3
 8001a28:	08001aa3 	.word	0x08001aa3
 8001a2c:	08001aa3 	.word	0x08001aa3
 8001a30:	08001aa3 	.word	0x08001aa3
 8001a34:	08001aa3 	.word	0x08001aa3
 8001a38:	08001a51 	.word	0x08001a51
 8001a3c:	08001a65 	.word	0x08001a65
 8001a40:	4a79      	ldr	r2, [pc, #484]	; (8001c28 <HAL_GPIO_Init+0x2b4>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d013      	beq.n	8001a6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a46:	e02c      	b.n	8001aa2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	623b      	str	r3, [r7, #32]
          break;
 8001a4e:	e029      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	3304      	adds	r3, #4
 8001a56:	623b      	str	r3, [r7, #32]
          break;
 8001a58:	e024      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	3308      	adds	r3, #8
 8001a60:	623b      	str	r3, [r7, #32]
          break;
 8001a62:	e01f      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	330c      	adds	r3, #12
 8001a6a:	623b      	str	r3, [r7, #32]
          break;
 8001a6c:	e01a      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d102      	bne.n	8001a7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a76:	2304      	movs	r3, #4
 8001a78:	623b      	str	r3, [r7, #32]
          break;
 8001a7a:	e013      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d105      	bne.n	8001a90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a84:	2308      	movs	r3, #8
 8001a86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69fa      	ldr	r2, [r7, #28]
 8001a8c:	611a      	str	r2, [r3, #16]
          break;
 8001a8e:	e009      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a90:	2308      	movs	r3, #8
 8001a92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69fa      	ldr	r2, [r7, #28]
 8001a98:	615a      	str	r2, [r3, #20]
          break;
 8001a9a:	e003      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	623b      	str	r3, [r7, #32]
          break;
 8001aa0:	e000      	b.n	8001aa4 <HAL_GPIO_Init+0x130>
          break;
 8001aa2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	2bff      	cmp	r3, #255	; 0xff
 8001aa8:	d801      	bhi.n	8001aae <HAL_GPIO_Init+0x13a>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	e001      	b.n	8001ab2 <HAL_GPIO_Init+0x13e>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	2bff      	cmp	r3, #255	; 0xff
 8001ab8:	d802      	bhi.n	8001ac0 <HAL_GPIO_Init+0x14c>
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	e002      	b.n	8001ac6 <HAL_GPIO_Init+0x152>
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	3b08      	subs	r3, #8
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	210f      	movs	r1, #15
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	6a39      	ldr	r1, [r7, #32]
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 80b1 	beq.w	8001c56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001af4:	4b4d      	ldr	r3, [pc, #308]	; (8001c2c <HAL_GPIO_Init+0x2b8>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	4a4c      	ldr	r2, [pc, #304]	; (8001c2c <HAL_GPIO_Init+0x2b8>)
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	6193      	str	r3, [r2, #24]
 8001b00:	4b4a      	ldr	r3, [pc, #296]	; (8001c2c <HAL_GPIO_Init+0x2b8>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b0c:	4a48      	ldr	r2, [pc, #288]	; (8001c30 <HAL_GPIO_Init+0x2bc>)
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	089b      	lsrs	r3, r3, #2
 8001b12:	3302      	adds	r3, #2
 8001b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	220f      	movs	r2, #15
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a40      	ldr	r2, [pc, #256]	; (8001c34 <HAL_GPIO_Init+0x2c0>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d013      	beq.n	8001b60 <HAL_GPIO_Init+0x1ec>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a3f      	ldr	r2, [pc, #252]	; (8001c38 <HAL_GPIO_Init+0x2c4>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d00d      	beq.n	8001b5c <HAL_GPIO_Init+0x1e8>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a3e      	ldr	r2, [pc, #248]	; (8001c3c <HAL_GPIO_Init+0x2c8>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d007      	beq.n	8001b58 <HAL_GPIO_Init+0x1e4>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a3d      	ldr	r2, [pc, #244]	; (8001c40 <HAL_GPIO_Init+0x2cc>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d101      	bne.n	8001b54 <HAL_GPIO_Init+0x1e0>
 8001b50:	2303      	movs	r3, #3
 8001b52:	e006      	b.n	8001b62 <HAL_GPIO_Init+0x1ee>
 8001b54:	2304      	movs	r3, #4
 8001b56:	e004      	b.n	8001b62 <HAL_GPIO_Init+0x1ee>
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e002      	b.n	8001b62 <HAL_GPIO_Init+0x1ee>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <HAL_GPIO_Init+0x1ee>
 8001b60:	2300      	movs	r3, #0
 8001b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b64:	f002 0203 	and.w	r2, r2, #3
 8001b68:	0092      	lsls	r2, r2, #2
 8001b6a:	4093      	lsls	r3, r2
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b72:	492f      	ldr	r1, [pc, #188]	; (8001c30 <HAL_GPIO_Init+0x2bc>)
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	089b      	lsrs	r3, r3, #2
 8001b78:	3302      	adds	r3, #2
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d006      	beq.n	8001b9a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b8c:	4b2d      	ldr	r3, [pc, #180]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	492c      	ldr	r1, [pc, #176]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	600b      	str	r3, [r1, #0]
 8001b98:	e006      	b.n	8001ba8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b9a:	4b2a      	ldr	r3, [pc, #168]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	4928      	ldr	r1, [pc, #160]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d006      	beq.n	8001bc2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bb4:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	4922      	ldr	r1, [pc, #136]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	604b      	str	r3, [r1, #4]
 8001bc0:	e006      	b.n	8001bd0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bc2:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	491e      	ldr	r1, [pc, #120]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d006      	beq.n	8001bea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bdc:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	4918      	ldr	r1, [pc, #96]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	608b      	str	r3, [r1, #8]
 8001be8:	e006      	b.n	8001bf8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bea:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	4914      	ldr	r1, [pc, #80]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d021      	beq.n	8001c48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c04:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001c06:	68da      	ldr	r2, [r3, #12]
 8001c08:	490e      	ldr	r1, [pc, #56]	; (8001c44 <HAL_GPIO_Init+0x2d0>)
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	60cb      	str	r3, [r1, #12]
 8001c10:	e021      	b.n	8001c56 <HAL_GPIO_Init+0x2e2>
 8001c12:	bf00      	nop
 8001c14:	10320000 	.word	0x10320000
 8001c18:	10310000 	.word	0x10310000
 8001c1c:	10220000 	.word	0x10220000
 8001c20:	10210000 	.word	0x10210000
 8001c24:	10120000 	.word	0x10120000
 8001c28:	10110000 	.word	0x10110000
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40010000 	.word	0x40010000
 8001c34:	40010800 	.word	0x40010800
 8001c38:	40010c00 	.word	0x40010c00
 8001c3c:	40011000 	.word	0x40011000
 8001c40:	40011400 	.word	0x40011400
 8001c44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <HAL_GPIO_Init+0x304>)
 8001c4a:	68da      	ldr	r2, [r3, #12]
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	4909      	ldr	r1, [pc, #36]	; (8001c78 <HAL_GPIO_Init+0x304>)
 8001c52:	4013      	ands	r3, r2
 8001c54:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	3301      	adds	r3, #1
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	fa22 f303 	lsr.w	r3, r2, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f47f ae8e 	bne.w	8001988 <HAL_GPIO_Init+0x14>
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	bf00      	nop
 8001c70:	372c      	adds	r7, #44	; 0x2c
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr
 8001c78:	40010400 	.word	0x40010400

08001c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	807b      	strh	r3, [r7, #2]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c8c:	787b      	ldrb	r3, [r7, #1]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c92:	887a      	ldrh	r2, [r7, #2]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c98:	e003      	b.n	8001ca2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c9a:	887b      	ldrh	r3, [r7, #2]
 8001c9c:	041a      	lsls	r2, r3, #16
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	611a      	str	r2, [r3, #16]
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001cb6:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cb8:	695a      	ldr	r2, [r3, #20]
 8001cba:	88fb      	ldrh	r3, [r7, #6]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d006      	beq.n	8001cd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cc2:	4a05      	ldr	r2, [pc, #20]	; (8001cd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cc4:	88fb      	ldrh	r3, [r7, #6]
 8001cc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cc8:	88fb      	ldrh	r3, [r7, #6]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 f806 	bl	8001cdc <HAL_GPIO_EXTI_Callback>
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40010400 	.word	0x40010400

08001cdc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr

08001cf0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cf2:	b08b      	sub	sp, #44	; 0x2c
 8001cf4:	af06      	add	r7, sp, #24
 8001cf6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e0fd      	b.n	8001efe <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d106      	bne.n	8001d1c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f007 fae0 	bl	80092dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2203      	movs	r2, #3
 8001d20:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f002 ffb1 	bl	8004c90 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	603b      	str	r3, [r7, #0]
 8001d34:	687e      	ldr	r6, [r7, #4]
 8001d36:	466d      	mov	r5, sp
 8001d38:	f106 0410 	add.w	r4, r6, #16
 8001d3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d40:	6823      	ldr	r3, [r4, #0]
 8001d42:	602b      	str	r3, [r5, #0]
 8001d44:	1d33      	adds	r3, r6, #4
 8001d46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d48:	6838      	ldr	r0, [r7, #0]
 8001d4a:	f002 ff7b 	bl	8004c44 <USB_CoreInit>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2202      	movs	r2, #2
 8001d58:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e0ce      	b.n	8001efe <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2100      	movs	r1, #0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f002 ffac 	bl	8004cc4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	73fb      	strb	r3, [r7, #15]
 8001d70:	e04c      	b.n	8001e0c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	4613      	mov	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	440b      	add	r3, r1
 8001d82:	3301      	adds	r3, #1
 8001d84:	2201      	movs	r2, #1
 8001d86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	1c5a      	adds	r2, r3, #1
 8001d8e:	4613      	mov	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	440b      	add	r3, r1
 8001d98:	7bfa      	ldrb	r2, [r7, #15]
 8001d9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d9c:	7bfa      	ldrb	r2, [r7, #15]
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	b298      	uxth	r0, r3
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	4613      	mov	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	440b      	add	r3, r1
 8001dae:	3336      	adds	r3, #54	; 0x36
 8001db0:	4602      	mov	r2, r0
 8001db2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	1c5a      	adds	r2, r3, #1
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	440b      	add	r3, r1
 8001dc4:	3303      	adds	r3, #3
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001dca:	7bfa      	ldrb	r2, [r7, #15]
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	440b      	add	r3, r1
 8001dd8:	3338      	adds	r3, #56	; 0x38
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001dde:	7bfa      	ldrb	r2, [r7, #15]
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	440b      	add	r3, r1
 8001dec:	333c      	adds	r3, #60	; 0x3c
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001df2:	7bfa      	ldrb	r2, [r7, #15]
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	4613      	mov	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	440b      	add	r3, r1
 8001e00:	3340      	adds	r3, #64	; 0x40
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e06:	7bfb      	ldrb	r3, [r7, #15]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	73fb      	strb	r3, [r7, #15]
 8001e0c:	7bfa      	ldrb	r2, [r7, #15]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d3ad      	bcc.n	8001d72 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e16:	2300      	movs	r3, #0
 8001e18:	73fb      	strb	r3, [r7, #15]
 8001e1a:	e044      	b.n	8001ea6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e1c:	7bfa      	ldrb	r2, [r7, #15]
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	4613      	mov	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	440b      	add	r3, r1
 8001e2a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001e2e:	2200      	movs	r2, #0
 8001e30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e32:	7bfa      	ldrb	r2, [r7, #15]
 8001e34:	6879      	ldr	r1, [r7, #4]
 8001e36:	4613      	mov	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	440b      	add	r3, r1
 8001e40:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e44:	7bfa      	ldrb	r2, [r7, #15]
 8001e46:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e48:	7bfa      	ldrb	r2, [r7, #15]
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	440b      	add	r3, r1
 8001e56:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e5e:	7bfa      	ldrb	r2, [r7, #15]
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	4613      	mov	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4413      	add	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	440b      	add	r3, r1
 8001e6c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e74:	7bfa      	ldrb	r2, [r7, #15]
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	440b      	add	r3, r1
 8001e82:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e8a:	7bfa      	ldrb	r2, [r7, #15]
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	440b      	add	r3, r1
 8001e98:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	73fb      	strb	r3, [r7, #15]
 8001ea6:	7bfa      	ldrb	r2, [r7, #15]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d3b5      	bcc.n	8001e1c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	603b      	str	r3, [r7, #0]
 8001eb6:	687e      	ldr	r6, [r7, #4]
 8001eb8:	466d      	mov	r5, sp
 8001eba:	f106 0410 	add.w	r4, r6, #16
 8001ebe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ec0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ec2:	6823      	ldr	r3, [r4, #0]
 8001ec4:	602b      	str	r3, [r5, #0]
 8001ec6:	1d33      	adds	r3, r6, #4
 8001ec8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eca:	6838      	ldr	r0, [r7, #0]
 8001ecc:	f002 ff06 	bl	8004cdc <USB_DevInit>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d005      	beq.n	8001ee2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2202      	movs	r2, #2
 8001eda:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e00d      	b.n	8001efe <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f005 fbb8 	bl	800766c <USB_DevDisconnect>

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f06 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d101      	bne.n	8001f1c <HAL_PCD_Start+0x16>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	e016      	b.n	8001f4a <HAL_PCD_Start+0x44>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f002 fe9b 	bl	8004c64 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001f2e:	2101      	movs	r1, #1
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f007 fc46 	bl	80097c2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f005 fb8c 	bl	8007658 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b088      	sub	sp, #32
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f005 fb8e 	bl	8007680 <USB_ReadInterrupts>
 8001f64:	4603      	mov	r3, r0
 8001f66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f6e:	d102      	bne.n	8001f76 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 fb5f 	bl	8002634 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f005 fb80 	bl	8007680 <USB_ReadInterrupts>
 8001f80:	4603      	mov	r3, r0
 8001f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f8a:	d112      	bne.n	8001fb2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f9e:	b292      	uxth	r2, r2
 8001fa0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f007 fa14 	bl	80093d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001faa:	2100      	movs	r1, #0
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f923 	bl	80021f8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f005 fb62 	bl	8007680 <USB_ReadInterrupts>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fc6:	d10b      	bne.n	8001fe0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001fda:	b292      	uxth	r2, r2
 8001fdc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f005 fb4b 	bl	8007680 <USB_ReadInterrupts>
 8001fea:	4603      	mov	r3, r0
 8001fec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ff4:	d10b      	bne.n	800200e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002008:	b292      	uxth	r2, r2
 800200a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f005 fb34 	bl	8007680 <USB_ReadInterrupts>
 8002018:	4603      	mov	r3, r0
 800201a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800201e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002022:	d126      	bne.n	8002072 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800202c:	b29a      	uxth	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0204 	bic.w	r2, r2, #4
 8002036:	b292      	uxth	r2, r2
 8002038:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002044:	b29a      	uxth	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0208 	bic.w	r2, r2, #8
 800204e:	b292      	uxth	r2, r2
 8002050:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f007 f9f5 	bl	8009444 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002062:	b29a      	uxth	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800206c:	b292      	uxth	r2, r2
 800206e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f005 fb02 	bl	8007680 <USB_ReadInterrupts>
 800207c:	4603      	mov	r3, r0
 800207e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002082:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002086:	f040 8082 	bne.w	800218e <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800208a:	2300      	movs	r3, #0
 800208c:	77fb      	strb	r3, [r7, #31]
 800208e:	e010      	b.n	80020b2 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	461a      	mov	r2, r3
 8002096:	7ffb      	ldrb	r3, [r7, #31]
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	441a      	add	r2, r3
 800209c:	7ffb      	ldrb	r3, [r7, #31]
 800209e:	8812      	ldrh	r2, [r2, #0]
 80020a0:	b292      	uxth	r2, r2
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	3320      	adds	r3, #32
 80020a6:	443b      	add	r3, r7
 80020a8:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80020ac:	7ffb      	ldrb	r3, [r7, #31]
 80020ae:	3301      	adds	r3, #1
 80020b0:	77fb      	strb	r3, [r7, #31]
 80020b2:	7ffb      	ldrb	r3, [r7, #31]
 80020b4:	2b07      	cmp	r3, #7
 80020b6:	d9eb      	bls.n	8002090 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f042 0201 	orr.w	r2, r2, #1
 80020ca:	b292      	uxth	r2, r2
 80020cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80020d8:	b29a      	uxth	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0201 	bic.w	r2, r2, #1
 80020e2:	b292      	uxth	r2, r2
 80020e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80020e8:	bf00      	nop
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0f6      	beq.n	80020ea <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002104:	b29a      	uxth	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800210e:	b292      	uxth	r2, r2
 8002110:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002114:	2300      	movs	r3, #0
 8002116:	77fb      	strb	r3, [r7, #31]
 8002118:	e00f      	b.n	800213a <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800211a:	7ffb      	ldrb	r3, [r7, #31]
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6812      	ldr	r2, [r2, #0]
 8002120:	4611      	mov	r1, r2
 8002122:	7ffa      	ldrb	r2, [r7, #31]
 8002124:	0092      	lsls	r2, r2, #2
 8002126:	440a      	add	r2, r1
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	3320      	adds	r3, #32
 800212c:	443b      	add	r3, r7
 800212e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002132:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002134:	7ffb      	ldrb	r3, [r7, #31]
 8002136:	3301      	adds	r3, #1
 8002138:	77fb      	strb	r3, [r7, #31]
 800213a:	7ffb      	ldrb	r3, [r7, #31]
 800213c:	2b07      	cmp	r3, #7
 800213e:	d9ec      	bls.n	800211a <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002148:	b29a      	uxth	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0208 	orr.w	r2, r2, #8
 8002152:	b292      	uxth	r2, r2
 8002154:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002160:	b29a      	uxth	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800216a:	b292      	uxth	r2, r2
 800216c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002178:	b29a      	uxth	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f042 0204 	orr.w	r2, r2, #4
 8002182:	b292      	uxth	r2, r2
 8002184:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f007 f941 	bl	8009410 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f005 fa74 	bl	8007680 <USB_ReadInterrupts>
 8002198:	4603      	mov	r3, r0
 800219a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800219e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021a2:	d10e      	bne.n	80021c2 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021b6:	b292      	uxth	r2, r2
 80021b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f007 f8fa 	bl	80093b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f005 fa5a 	bl	8007680 <USB_ReadInterrupts>
 80021cc:	4603      	mov	r3, r0
 80021ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021d6:	d10b      	bne.n	80021f0 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021ea:	b292      	uxth	r2, r2
 80021ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80021f0:	bf00      	nop
 80021f2:	3720      	adds	r7, #32
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800220a:	2b01      	cmp	r3, #1
 800220c:	d101      	bne.n	8002212 <HAL_PCD_SetAddress+0x1a>
 800220e:	2302      	movs	r3, #2
 8002210:	e013      	b.n	800223a <HAL_PCD_SetAddress+0x42>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	78fa      	ldrb	r2, [r7, #3]
 800221e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	78fa      	ldrb	r2, [r7, #3]
 8002228:	4611      	mov	r1, r2
 800222a:	4618      	mov	r0, r3
 800222c:	f005 fa01 	bl	8007632 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b084      	sub	sp, #16
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
 800224a:	4608      	mov	r0, r1
 800224c:	4611      	mov	r1, r2
 800224e:	461a      	mov	r2, r3
 8002250:	4603      	mov	r3, r0
 8002252:	70fb      	strb	r3, [r7, #3]
 8002254:	460b      	mov	r3, r1
 8002256:	803b      	strh	r3, [r7, #0]
 8002258:	4613      	mov	r3, r2
 800225a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800225c:	2300      	movs	r3, #0
 800225e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002260:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002264:	2b00      	cmp	r3, #0
 8002266:	da0e      	bge.n	8002286 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002268:	78fb      	ldrb	r3, [r7, #3]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	4413      	add	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2201      	movs	r2, #1
 8002282:	705a      	strb	r2, [r3, #1]
 8002284:	e00e      	b.n	80022a4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002286:	78fb      	ldrb	r3, [r7, #3]
 8002288:	f003 0207 	and.w	r2, r3, #7
 800228c:	4613      	mov	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	4413      	add	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80022b0:	883a      	ldrh	r2, [r7, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	78ba      	ldrb	r2, [r7, #2]
 80022ba:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	785b      	ldrb	r3, [r3, #1]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d004      	beq.n	80022ce <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80022ce:	78bb      	ldrb	r3, [r7, #2]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d102      	bne.n	80022da <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d101      	bne.n	80022e8 <HAL_PCD_EP_Open+0xa6>
 80022e4:	2302      	movs	r3, #2
 80022e6:	e00e      	b.n	8002306 <HAL_PCD_EP_Open+0xc4>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68f9      	ldr	r1, [r7, #12]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f002 fd10 	bl	8004d1c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002304:	7afb      	ldrb	r3, [r7, #11]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b084      	sub	sp, #16
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	460b      	mov	r3, r1
 8002318:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800231a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800231e:	2b00      	cmp	r3, #0
 8002320:	da0e      	bge.n	8002340 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002322:	78fb      	ldrb	r3, [r7, #3]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	4413      	add	r3, r2
 8002336:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2201      	movs	r2, #1
 800233c:	705a      	strb	r2, [r3, #1]
 800233e:	e00e      	b.n	800235e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	f003 0207 	and.w	r2, r3, #7
 8002346:	4613      	mov	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	4413      	add	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800235e:	78fb      	ldrb	r3, [r7, #3]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	b2da      	uxtb	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002370:	2b01      	cmp	r3, #1
 8002372:	d101      	bne.n	8002378 <HAL_PCD_EP_Close+0x6a>
 8002374:	2302      	movs	r3, #2
 8002376:	e00e      	b.n	8002396 <HAL_PCD_EP_Close+0x88>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68f9      	ldr	r1, [r7, #12]
 8002386:	4618      	mov	r0, r3
 8002388:	f003 f832 	bl	80053f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b086      	sub	sp, #24
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	60f8      	str	r0, [r7, #12]
 80023a6:	607a      	str	r2, [r7, #4]
 80023a8:	603b      	str	r3, [r7, #0]
 80023aa:	460b      	mov	r3, r1
 80023ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023ae:	7afb      	ldrb	r3, [r7, #11]
 80023b0:	f003 0207 	and.w	r2, r3, #7
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	4413      	add	r3, r2
 80023c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2200      	movs	r2, #0
 80023d6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	2200      	movs	r2, #0
 80023dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023de:	7afb      	ldrb	r3, [r7, #11]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023ea:	7afb      	ldrb	r3, [r7, #11]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d106      	bne.n	8002402 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6979      	ldr	r1, [r7, #20]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f003 f9e4 	bl	80057c8 <USB_EPStartXfer>
 8002400:	e005      	b.n	800240e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6979      	ldr	r1, [r7, #20]
 8002408:	4618      	mov	r0, r3
 800240a:	f003 f9dd 	bl	80057c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	f003 0207 	and.w	r2, r3, #7
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	4413      	add	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	440b      	add	r3, r1
 8002436:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800243a:	681b      	ldr	r3, [r3, #0]
}
 800243c:	4618      	mov	r0, r3
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	bc80      	pop	{r7}
 8002444:	4770      	bx	lr

08002446 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b086      	sub	sp, #24
 800244a:	af00      	add	r7, sp, #0
 800244c:	60f8      	str	r0, [r7, #12]
 800244e:	607a      	str	r2, [r7, #4]
 8002450:	603b      	str	r3, [r7, #0]
 8002452:	460b      	mov	r3, r1
 8002454:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002456:	7afb      	ldrb	r3, [r7, #11]
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	4413      	add	r3, r2
 800246a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2200      	movs	r2, #0
 800248a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	2201      	movs	r2, #1
 8002490:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002492:	7afb      	ldrb	r3, [r7, #11]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	b2da      	uxtb	r2, r3
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800249e:	7afb      	ldrb	r3, [r7, #11]
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d106      	bne.n	80024b6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6979      	ldr	r1, [r7, #20]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f003 f98a 	bl	80057c8 <USB_EPStartXfer>
 80024b4:	e005      	b.n	80024c2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6979      	ldr	r1, [r7, #20]
 80024bc:	4618      	mov	r0, r3
 80024be:	f003 f983 	bl	80057c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	460b      	mov	r3, r1
 80024d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80024d8:	78fb      	ldrb	r3, [r7, #3]
 80024da:	f003 0207 	and.w	r2, r3, #7
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d901      	bls.n	80024ea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e04c      	b.n	8002584 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	da0e      	bge.n	8002510 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024f2:	78fb      	ldrb	r3, [r7, #3]
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	4413      	add	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2201      	movs	r2, #1
 800250c:	705a      	strb	r2, [r3, #1]
 800250e:	e00c      	b.n	800252a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002510:	78fa      	ldrb	r2, [r7, #3]
 8002512:	4613      	mov	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	4413      	add	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2201      	movs	r2, #1
 800252e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	b2da      	uxtb	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002542:	2b01      	cmp	r3, #1
 8002544:	d101      	bne.n	800254a <HAL_PCD_EP_SetStall+0x7e>
 8002546:	2302      	movs	r3, #2
 8002548:	e01c      	b.n	8002584 <HAL_PCD_EP_SetStall+0xb8>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68f9      	ldr	r1, [r7, #12]
 8002558:	4618      	mov	r0, r3
 800255a:	f004 ff6d 	bl	8007438 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800255e:	78fb      	ldrb	r3, [r7, #3]
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	2b00      	cmp	r3, #0
 8002566:	d108      	bne.n	800257a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002572:	4619      	mov	r1, r3
 8002574:	4610      	mov	r0, r2
 8002576:	f005 f892 	bl	800769e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	460b      	mov	r3, r1
 8002596:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002598:	78fb      	ldrb	r3, [r7, #3]
 800259a:	f003 020f 	and.w	r2, r3, #15
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d901      	bls.n	80025aa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e040      	b.n	800262c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	da0e      	bge.n	80025d0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025b2:	78fb      	ldrb	r3, [r7, #3]
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	4613      	mov	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	4413      	add	r3, r2
 80025c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2201      	movs	r2, #1
 80025cc:	705a      	strb	r2, [r3, #1]
 80025ce:	e00e      	b.n	80025ee <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025d0:	78fb      	ldrb	r3, [r7, #3]
 80025d2:	f003 0207 	and.w	r2, r3, #7
 80025d6:	4613      	mov	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	4413      	add	r3, r2
 80025e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025f4:	78fb      	ldrb	r3, [r7, #3]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_PCD_EP_ClrStall+0x82>
 800260a:	2302      	movs	r3, #2
 800260c:	e00e      	b.n	800262c <HAL_PCD_EP_ClrStall+0xa0>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68f9      	ldr	r1, [r7, #12]
 800261c:	4618      	mov	r0, r3
 800261e:	f004 ff5b 	bl	80074d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08e      	sub	sp, #56	; 0x38
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800263c:	e2ec      	b.n	8002c18 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002646:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002648:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800264a:	b2db      	uxtb	r3, r3
 800264c:	f003 030f 	and.w	r3, r3, #15
 8002650:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002654:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002658:	2b00      	cmp	r3, #0
 800265a:	f040 8161 	bne.w	8002920 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800265e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002660:	f003 0310 	and.w	r3, r3, #16
 8002664:	2b00      	cmp	r3, #0
 8002666:	d152      	bne.n	800270e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	b29b      	uxth	r3, r3
 8002670:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002678:	81fb      	strh	r3, [r7, #14]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	89fb      	ldrh	r3, [r7, #14]
 8002680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002688:	b29b      	uxth	r3, r3
 800268a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3328      	adds	r3, #40	; 0x28
 8002690:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800269a:	b29b      	uxth	r3, r3
 800269c:	461a      	mov	r2, r3
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	4413      	add	r3, r2
 80026a6:	3302      	adds	r3, #2
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6812      	ldr	r2, [r2, #0]
 80026ae:	4413      	add	r3, r2
 80026b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	695a      	ldr	r2, [r3, #20]
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	441a      	add	r2, r3
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80026cc:	2100      	movs	r1, #0
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f006 fe57 	bl	8009382 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 829b 	beq.w	8002c18 <PCD_EP_ISR_Handler+0x5e4>
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f040 8296 	bne.w	8002c18 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	b292      	uxth	r2, r2
 8002700:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800270c:	e284      	b.n	8002c18 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002714:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	881b      	ldrh	r3, [r3, #0]
 800271c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800271e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002724:	2b00      	cmp	r3, #0
 8002726:	d034      	beq.n	8002792 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002730:	b29b      	uxth	r3, r3
 8002732:	461a      	mov	r2, r3
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4413      	add	r3, r2
 800273c:	3306      	adds	r3, #6
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6812      	ldr	r2, [r2, #0]
 8002744:	4413      	add	r3, r2
 8002746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800274a:	881b      	ldrh	r3, [r3, #0]
 800274c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002766:	b29b      	uxth	r3, r3
 8002768:	f004 ffe9 	bl	800773e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	881b      	ldrh	r3, [r3, #0]
 8002772:	b29a      	uxth	r2, r3
 8002774:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002778:	4013      	ands	r3, r2
 800277a:	823b      	strh	r3, [r7, #16]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	8a3a      	ldrh	r2, [r7, #16]
 8002782:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002786:	b292      	uxth	r2, r2
 8002788:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f006 fdcc 	bl	8009328 <HAL_PCD_SetupStageCallback>
 8002790:	e242      	b.n	8002c18 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002792:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002796:	2b00      	cmp	r3, #0
 8002798:	f280 823e 	bge.w	8002c18 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80027a8:	4013      	ands	r3, r2
 80027aa:	83bb      	strh	r3, [r7, #28]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	8bba      	ldrh	r2, [r7, #28]
 80027b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027b6:	b292      	uxth	r2, r2
 80027b8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	461a      	mov	r2, r3
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	4413      	add	r3, r2
 80027ce:	3306      	adds	r3, #6
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6812      	ldr	r2, [r2, #0]
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d019      	beq.n	8002822 <PCD_EP_ISR_Handler+0x1ee>
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d015      	beq.n	8002822 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	6959      	ldr	r1, [r3, #20]
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002806:	b29b      	uxth	r3, r3
 8002808:	f004 ff99 	bl	800773e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	695a      	ldr	r2, [r3, #20]
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	69db      	ldr	r3, [r3, #28]
 8002814:	441a      	add	r2, r3
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800281a:	2100      	movs	r1, #0
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f006 fd95 	bl	800934c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	881b      	ldrh	r3, [r3, #0]
 8002828:	b29b      	uxth	r3, r3
 800282a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800282e:	2b00      	cmp	r3, #0
 8002830:	f040 81f2 	bne.w	8002c18 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	61bb      	str	r3, [r7, #24]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002842:	b29b      	uxth	r3, r3
 8002844:	461a      	mov	r2, r3
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	4413      	add	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d112      	bne.n	8002882 <PCD_EP_ISR_Handler+0x24e>
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	881b      	ldrh	r3, [r3, #0]
 8002860:	b29b      	uxth	r3, r3
 8002862:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002866:	b29a      	uxth	r2, r3
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	801a      	strh	r2, [r3, #0]
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	881b      	ldrh	r3, [r3, #0]
 8002870:	b29b      	uxth	r3, r3
 8002872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800287a:	b29a      	uxth	r2, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	801a      	strh	r2, [r3, #0]
 8002880:	e02f      	b.n	80028e2 <PCD_EP_ISR_Handler+0x2ae>
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	2b3e      	cmp	r3, #62	; 0x3e
 8002888:	d813      	bhi.n	80028b2 <PCD_EP_ISR_Handler+0x27e>
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	085b      	lsrs	r3, r3, #1
 8002890:	633b      	str	r3, [r7, #48]	; 0x30
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d002      	beq.n	80028a4 <PCD_EP_ISR_Handler+0x270>
 800289e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a0:	3301      	adds	r3, #1
 80028a2:	633b      	str	r3, [r7, #48]	; 0x30
 80028a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	029b      	lsls	r3, r3, #10
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	801a      	strh	r2, [r3, #0]
 80028b0:	e017      	b.n	80028e2 <PCD_EP_ISR_Handler+0x2ae>
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	633b      	str	r3, [r7, #48]	; 0x30
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	f003 031f 	and.w	r3, r3, #31
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d102      	bne.n	80028cc <PCD_EP_ISR_Handler+0x298>
 80028c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c8:	3b01      	subs	r3, #1
 80028ca:	633b      	str	r3, [r7, #48]	; 0x30
 80028cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	029b      	lsls	r3, r3, #10
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028dc:	b29a      	uxth	r2, r3
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	881b      	ldrh	r3, [r3, #0]
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f2:	827b      	strh	r3, [r7, #18]
 80028f4:	8a7b      	ldrh	r3, [r7, #18]
 80028f6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80028fa:	827b      	strh	r3, [r7, #18]
 80028fc:	8a7b      	ldrh	r3, [r7, #18]
 80028fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002902:	827b      	strh	r3, [r7, #18]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	8a7b      	ldrh	r3, [r7, #18]
 800290a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800290e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800291a:	b29b      	uxth	r3, r3
 800291c:	8013      	strh	r3, [r2, #0]
 800291e:	e17b      	b.n	8002c18 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	461a      	mov	r2, r3
 8002926:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	881b      	ldrh	r3, [r3, #0]
 8002930:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002932:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002936:	2b00      	cmp	r3, #0
 8002938:	f280 80ea 	bge.w	8002b10 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	461a      	mov	r2, r3
 8002942:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	b29a      	uxth	r2, r3
 800294e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002952:	4013      	ands	r3, r2
 8002954:	853b      	strh	r3, [r7, #40]	; 0x28
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	461a      	mov	r2, r3
 800295c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002966:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800296a:	b292      	uxth	r2, r2
 800296c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800296e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002972:	4613      	mov	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	4413      	add	r3, r2
 8002982:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	7b1b      	ldrb	r3, [r3, #12]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d122      	bne.n	80029d2 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002994:	b29b      	uxth	r3, r3
 8002996:	461a      	mov	r2, r3
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	4413      	add	r3, r2
 80029a0:	3306      	adds	r3, #6
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6812      	ldr	r2, [r2, #0]
 80029a8:	4413      	add	r3, r2
 80029aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029ae:	881b      	ldrh	r3, [r3, #0]
 80029b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029b4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80029b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 8087 	beq.w	8002acc <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	6959      	ldr	r1, [r3, #20]
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	88da      	ldrh	r2, [r3, #6]
 80029ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80029cc:	f004 feb7 	bl	800773e <USB_ReadPMA>
 80029d0:	e07c      	b.n	8002acc <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	78db      	ldrb	r3, [r3, #3]
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d108      	bne.n	80029ec <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80029da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80029dc:	461a      	mov	r2, r3
 80029de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 f927 	bl	8002c34 <HAL_PCD_EP_DB_Receive>
 80029e6:	4603      	mov	r3, r0
 80029e8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80029ea:	e06f      	b.n	8002acc <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	461a      	mov	r2, r3
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	881b      	ldrh	r3, [r3, #0]
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a06:	847b      	strh	r3, [r7, #34]	; 0x22
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	441a      	add	r2, r3
 8002a16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002a18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	881b      	ldrh	r3, [r3, #0]
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d021      	beq.n	8002a8a <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	461a      	mov	r2, r3
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4413      	add	r3, r2
 8002a5a:	3302      	adds	r3, #2
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6812      	ldr	r2, [r2, #0]
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a6e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002a70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d02a      	beq.n	8002acc <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6818      	ldr	r0, [r3, #0]
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	6959      	ldr	r1, [r3, #20]
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	891a      	ldrh	r2, [r3, #8]
 8002a82:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002a84:	f004 fe5b 	bl	800773e <USB_ReadPMA>
 8002a88:	e020      	b.n	8002acc <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	461a      	mov	r2, r3
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3306      	adds	r3, #6
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	6812      	ldr	r2, [r2, #0]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002aac:	881b      	ldrh	r3, [r3, #0]
 8002aae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ab2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002ab4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d008      	beq.n	8002acc <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6818      	ldr	r0, [r3, #0]
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	6959      	ldr	r1, [r3, #20]
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	895a      	ldrh	r2, [r3, #10]
 8002ac6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ac8:	f004 fe39 	bl	800773e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	69da      	ldr	r2, [r3, #28]
 8002ad0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ad2:	441a      	add	r2, r3
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	695a      	ldr	r2, [r3, #20]
 8002adc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ade:	441a      	add	r2, r3
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d004      	beq.n	8002af6 <PCD_EP_ISR_Handler+0x4c2>
 8002aec:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d206      	bcs.n	8002b04 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	4619      	mov	r1, r3
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f006 fc25 	bl	800934c <HAL_PCD_DataOutStageCallback>
 8002b02:	e005      	b.n	8002b10 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f002 fe5c 	bl	80057c8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002b10:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d07e      	beq.n	8002c18 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002b1a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	461a      	mov	r2, r3
 8002b34:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	881b      	ldrh	r3, [r3, #0]
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b48:	843b      	strh	r3, [r7, #32]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	461a      	mov	r2, r3
 8002b50:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	441a      	add	r2, r3
 8002b58:	8c3b      	ldrh	r3, [r7, #32]
 8002b5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	78db      	ldrb	r3, [r3, #3]
 8002b6a:	2b03      	cmp	r3, #3
 8002b6c:	d00c      	beq.n	8002b88 <PCD_EP_ISR_Handler+0x554>
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	78db      	ldrb	r3, [r3, #3]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d008      	beq.n	8002b88 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d146      	bne.n	8002c0c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002b7e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d141      	bne.n	8002c0c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	461a      	mov	r2, r3
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3302      	adds	r3, #2
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bb0:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	699a      	ldr	r2, [r3, #24]
 8002bb6:	8bfb      	ldrh	r3, [r7, #30]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d906      	bls.n	8002bca <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	699a      	ldr	r2, [r3, #24]
 8002bc0:	8bfb      	ldrh	r3, [r7, #30]
 8002bc2:	1ad2      	subs	r2, r2, r3
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc6:	619a      	str	r2, [r3, #24]
 8002bc8:	e002      	b.n	8002bd0 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	2200      	movs	r2, #0
 8002bce:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d106      	bne.n	8002be6 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	4619      	mov	r1, r3
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f006 fbcf 	bl	8009382 <HAL_PCD_DataInStageCallback>
 8002be4:	e018      	b.n	8002c18 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	695a      	ldr	r2, [r3, #20]
 8002bea:	8bfb      	ldrh	r3, [r7, #30]
 8002bec:	441a      	add	r2, r3
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	69da      	ldr	r2, [r3, #28]
 8002bf6:	8bfb      	ldrh	r3, [r7, #30]
 8002bf8:	441a      	add	r2, r3
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c04:	4618      	mov	r0, r3
 8002c06:	f002 fddf 	bl	80057c8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002c0a:	e005      	b.n	8002c18 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002c0c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002c0e:	461a      	mov	r2, r3
 8002c10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f91b 	bl	8002e4e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	b21b      	sxth	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f6ff ad0a 	blt.w	800263e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3738      	adds	r7, #56	; 0x38
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c42:	88fb      	ldrh	r3, [r7, #6]
 8002c44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d07e      	beq.n	8002d4a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	461a      	mov	r2, r3
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	4413      	add	r3, r2
 8002c60:	3302      	adds	r3, #2
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	6812      	ldr	r2, [r2, #0]
 8002c68:	4413      	add	r3, r2
 8002c6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c74:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	699a      	ldr	r2, [r3, #24]
 8002c7a:	8b7b      	ldrh	r3, [r7, #26]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d306      	bcc.n	8002c8e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	699a      	ldr	r2, [r3, #24]
 8002c84:	8b7b      	ldrh	r3, [r7, #26]
 8002c86:	1ad2      	subs	r2, r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	619a      	str	r2, [r3, #24]
 8002c8c:	e002      	b.n	8002c94 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2200      	movs	r2, #0
 8002c92:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d123      	bne.n	8002ce4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	881b      	ldrh	r3, [r3, #0]
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb6:	833b      	strh	r3, [r7, #24]
 8002cb8:	8b3b      	ldrh	r3, [r7, #24]
 8002cba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002cbe:	833b      	strh	r3, [r7, #24]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	441a      	add	r2, r3
 8002cce:	8b3b      	ldrh	r3, [r7, #24]
 8002cd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ce4:	88fb      	ldrh	r3, [r7, #6]
 8002ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d01f      	beq.n	8002d2e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d08:	82fb      	strh	r3, [r7, #22]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	441a      	add	r2, r3
 8002d18:	8afb      	ldrh	r3, [r7, #22]
 8002d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002d2e:	8b7b      	ldrh	r3, [r7, #26]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 8087 	beq.w	8002e44 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6818      	ldr	r0, [r3, #0]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	6959      	ldr	r1, [r3, #20]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	891a      	ldrh	r2, [r3, #8]
 8002d42:	8b7b      	ldrh	r3, [r7, #26]
 8002d44:	f004 fcfb 	bl	800773e <USB_ReadPMA>
 8002d48:	e07c      	b.n	8002e44 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	461a      	mov	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	3306      	adds	r3, #6
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	6812      	ldr	r2, [r2, #0]
 8002d66:	4413      	add	r3, r2
 8002d68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d72:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	699a      	ldr	r2, [r3, #24]
 8002d78:	8b7b      	ldrh	r3, [r7, #26]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d306      	bcc.n	8002d8c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	699a      	ldr	r2, [r3, #24]
 8002d82:	8b7b      	ldrh	r3, [r7, #26]
 8002d84:	1ad2      	subs	r2, r2, r3
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	619a      	str	r2, [r3, #24]
 8002d8a:	e002      	b.n	8002d92 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d123      	bne.n	8002de2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db4:	83fb      	strh	r3, [r7, #30]
 8002db6:	8bfb      	ldrh	r3, [r7, #30]
 8002db8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002dbc:	83fb      	strh	r3, [r7, #30]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	441a      	add	r2, r3
 8002dcc:	8bfb      	ldrh	r3, [r7, #30]
 8002dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002de2:	88fb      	ldrh	r3, [r7, #6]
 8002de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d11f      	bne.n	8002e2c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	461a      	mov	r2, r3
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e06:	83bb      	strh	r3, [r7, #28]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	441a      	add	r2, r3
 8002e16:	8bbb      	ldrh	r3, [r7, #28]
 8002e18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002e2c:	8b7b      	ldrh	r3, [r7, #26]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d008      	beq.n	8002e44 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6818      	ldr	r0, [r3, #0]
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	6959      	ldr	r1, [r3, #20]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	895a      	ldrh	r2, [r3, #10]
 8002e3e:	8b7b      	ldrh	r3, [r7, #26]
 8002e40:	f004 fc7d 	bl	800773e <USB_ReadPMA>
    }
  }

  return count;
 8002e44:	8b7b      	ldrh	r3, [r7, #26]
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3720      	adds	r7, #32
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b0a2      	sub	sp, #136	; 0x88
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e5c:	88fb      	ldrh	r3, [r7, #6]
 8002e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 81c7 	beq.w	80031f6 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	461a      	mov	r2, r3
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	3302      	adds	r3, #2
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	6812      	ldr	r2, [r2, #0]
 8002e84:	4413      	add	r3, r2
 8002e86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e90:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	699a      	ldr	r2, [r3, #24]
 8002e98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d907      	bls.n	8002eb0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	699a      	ldr	r2, [r3, #24]
 8002ea4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ea8:	1ad2      	subs	r2, r2, r3
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	619a      	str	r2, [r3, #24]
 8002eae:	e002      	b.n	8002eb6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f040 80b9 	bne.w	8003032 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	785b      	ldrb	r3, [r3, #1]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d126      	bne.n	8002f16 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	461a      	mov	r2, r3
 8002eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002edc:	4413      	add	r3, r2
 8002ede:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	011a      	lsls	r2, r3, #4
 8002ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee8:	4413      	add	r3, r2
 8002eea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	881b      	ldrh	r3, [r3, #0]
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	801a      	strh	r2, [r3, #0]
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f02:	881b      	ldrh	r3, [r3, #0]
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	801a      	strh	r2, [r3, #0]
 8002f14:	e01a      	b.n	8002f4c <HAL_PCD_EP_DB_Transmit+0xfe>
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	785b      	ldrb	r3, [r3, #1]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d116      	bne.n	8002f4c <HAL_PCD_EP_DB_Transmit+0xfe>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	633b      	str	r3, [r7, #48]	; 0x30
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	461a      	mov	r2, r3
 8002f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f32:	4413      	add	r3, r2
 8002f34:	633b      	str	r3, [r7, #48]	; 0x30
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	011a      	lsls	r2, r3, #4
 8002f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3e:	4413      	add	r3, r2
 8002f40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f48:	2200      	movs	r2, #0
 8002f4a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	623b      	str	r3, [r7, #32]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	785b      	ldrb	r3, [r3, #1]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d126      	bne.n	8002fa8 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	61bb      	str	r3, [r7, #24]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	4413      	add	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	011a      	lsls	r2, r3, #4
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f80:	617b      	str	r3, [r7, #20]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	801a      	strh	r2, [r3, #0]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	801a      	strh	r2, [r3, #0]
 8002fa6:	e017      	b.n	8002fd8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	785b      	ldrb	r3, [r3, #1]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d113      	bne.n	8002fd8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	461a      	mov	r2, r3
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	623b      	str	r3, [r7, #32]
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	011a      	lsls	r2, r3, #4
 8002fc8:	6a3b      	ldr	r3, [r7, #32]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002fd0:	61fb      	str	r3, [r7, #28]
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	4619      	mov	r1, r3
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f006 f9cf 	bl	8009382 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002fe4:	88fb      	ldrh	r3, [r7, #6]
 8002fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 82d4 	beq.w	8003598 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	b29b      	uxth	r3, r3
 8003002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800300a:	827b      	strh	r3, [r7, #18]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	461a      	mov	r2, r3
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	441a      	add	r2, r3
 800301a:	8a7b      	ldrh	r3, [r7, #18]
 800301c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003020:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003024:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800302c:	b29b      	uxth	r3, r3
 800302e:	8013      	strh	r3, [r2, #0]
 8003030:	e2b2      	b.n	8003598 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003032:	88fb      	ldrh	r3, [r7, #6]
 8003034:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d021      	beq.n	8003080 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	461a      	mov	r2, r3
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4413      	add	r3, r2
 800304a:	881b      	ldrh	r3, [r3, #0]
 800304c:	b29b      	uxth	r3, r3
 800304e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003056:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	461a      	mov	r2, r3
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	441a      	add	r2, r3
 8003068:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800306c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003074:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800307c:	b29b      	uxth	r3, r3
 800307e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003086:	2b01      	cmp	r3, #1
 8003088:	f040 8286 	bne.w	8003598 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	695a      	ldr	r2, [r3, #20]
 8003090:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003094:	441a      	add	r2, r3
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	69da      	ldr	r2, [r3, #28]
 800309e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030a2:	441a      	add	r2, r3
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	6a1a      	ldr	r2, [r3, #32]
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d309      	bcc.n	80030c8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	6a1a      	ldr	r2, [r3, #32]
 80030be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030c0:	1ad2      	subs	r2, r2, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	621a      	str	r2, [r3, #32]
 80030c6:	e015      	b.n	80030f4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d107      	bne.n	80030e0 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80030d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030d4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80030de:	e009      	b.n	80030f4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2200      	movs	r2, #0
 80030f2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	785b      	ldrb	r3, [r3, #1]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d155      	bne.n	80031a8 <HAL_PCD_EP_DB_Transmit+0x35a>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	63bb      	str	r3, [r7, #56]	; 0x38
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800310a:	b29b      	uxth	r3, r3
 800310c:	461a      	mov	r2, r3
 800310e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003110:	4413      	add	r3, r2
 8003112:	63bb      	str	r3, [r7, #56]	; 0x38
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	011a      	lsls	r2, r3, #4
 800311a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800311c:	4413      	add	r3, r2
 800311e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003122:	637b      	str	r3, [r7, #52]	; 0x34
 8003124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003126:	2b00      	cmp	r3, #0
 8003128:	d112      	bne.n	8003150 <HAL_PCD_EP_DB_Transmit+0x302>
 800312a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800312c:	881b      	ldrh	r3, [r3, #0]
 800312e:	b29b      	uxth	r3, r3
 8003130:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003134:	b29a      	uxth	r2, r3
 8003136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003138:	801a      	strh	r2, [r3, #0]
 800313a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800313c:	881b      	ldrh	r3, [r3, #0]
 800313e:	b29b      	uxth	r3, r3
 8003140:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003144:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003148:	b29a      	uxth	r2, r3
 800314a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800314c:	801a      	strh	r2, [r3, #0]
 800314e:	e047      	b.n	80031e0 <HAL_PCD_EP_DB_Transmit+0x392>
 8003150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003152:	2b3e      	cmp	r3, #62	; 0x3e
 8003154:	d811      	bhi.n	800317a <HAL_PCD_EP_DB_Transmit+0x32c>
 8003156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003158:	085b      	lsrs	r3, r3, #1
 800315a:	64bb      	str	r3, [r7, #72]	; 0x48
 800315c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <HAL_PCD_EP_DB_Transmit+0x31e>
 8003166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003168:	3301      	adds	r3, #1
 800316a:	64bb      	str	r3, [r7, #72]	; 0x48
 800316c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800316e:	b29b      	uxth	r3, r3
 8003170:	029b      	lsls	r3, r3, #10
 8003172:	b29a      	uxth	r2, r3
 8003174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003176:	801a      	strh	r2, [r3, #0]
 8003178:	e032      	b.n	80031e0 <HAL_PCD_EP_DB_Transmit+0x392>
 800317a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800317c:	095b      	lsrs	r3, r3, #5
 800317e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003182:	f003 031f 	and.w	r3, r3, #31
 8003186:	2b00      	cmp	r3, #0
 8003188:	d102      	bne.n	8003190 <HAL_PCD_EP_DB_Transmit+0x342>
 800318a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800318c:	3b01      	subs	r3, #1
 800318e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003192:	b29b      	uxth	r3, r3
 8003194:	029b      	lsls	r3, r3, #10
 8003196:	b29b      	uxth	r3, r3
 8003198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800319c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a4:	801a      	strh	r2, [r3, #0]
 80031a6:	e01b      	b.n	80031e0 <HAL_PCD_EP_DB_Transmit+0x392>
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	785b      	ldrb	r3, [r3, #1]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d117      	bne.n	80031e0 <HAL_PCD_EP_DB_Transmit+0x392>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	643b      	str	r3, [r7, #64]	; 0x40
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031be:	b29b      	uxth	r3, r3
 80031c0:	461a      	mov	r2, r3
 80031c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031c4:	4413      	add	r3, r2
 80031c6:	643b      	str	r3, [r7, #64]	; 0x40
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	011a      	lsls	r2, r3, #4
 80031ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031d0:	4413      	add	r3, r2
 80031d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80031d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031da:	b29a      	uxth	r2, r3
 80031dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031de:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6818      	ldr	r0, [r3, #0]
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	6959      	ldr	r1, [r3, #20]
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	891a      	ldrh	r2, [r3, #8]
 80031ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	f004 fa60 	bl	80076b4 <USB_WritePMA>
 80031f4:	e1d0      	b.n	8003598 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031fe:	b29b      	uxth	r3, r3
 8003200:	461a      	mov	r2, r3
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4413      	add	r3, r2
 800320a:	3306      	adds	r3, #6
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	6812      	ldr	r2, [r2, #0]
 8003212:	4413      	add	r3, r2
 8003214:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003218:	881b      	ldrh	r3, [r3, #0]
 800321a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800321e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	699a      	ldr	r2, [r3, #24]
 8003226:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800322a:	429a      	cmp	r2, r3
 800322c:	d307      	bcc.n	800323e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	699a      	ldr	r2, [r3, #24]
 8003232:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003236:	1ad2      	subs	r2, r2, r3
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	619a      	str	r2, [r3, #24]
 800323c:	e002      	b.n	8003244 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	2200      	movs	r2, #0
 8003242:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	2b00      	cmp	r3, #0
 800324a:	f040 80c4 	bne.w	80033d6 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	785b      	ldrb	r3, [r3, #1]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d126      	bne.n	80032a4 <HAL_PCD_EP_DB_Transmit+0x456>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003264:	b29b      	uxth	r3, r3
 8003266:	461a      	mov	r2, r3
 8003268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800326a:	4413      	add	r3, r2
 800326c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	011a      	lsls	r2, r3, #4
 8003274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003276:	4413      	add	r3, r2
 8003278:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800327c:	66bb      	str	r3, [r7, #104]	; 0x68
 800327e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003280:	881b      	ldrh	r3, [r3, #0]
 8003282:	b29b      	uxth	r3, r3
 8003284:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003288:	b29a      	uxth	r2, r3
 800328a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800328c:	801a      	strh	r2, [r3, #0]
 800328e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	b29b      	uxth	r3, r3
 8003294:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003298:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800329c:	b29a      	uxth	r2, r3
 800329e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032a0:	801a      	strh	r2, [r3, #0]
 80032a2:	e01a      	b.n	80032da <HAL_PCD_EP_DB_Transmit+0x48c>
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	785b      	ldrb	r3, [r3, #1]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d116      	bne.n	80032da <HAL_PCD_EP_DB_Transmit+0x48c>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	677b      	str	r3, [r7, #116]	; 0x74
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	461a      	mov	r2, r3
 80032be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032c0:	4413      	add	r3, r2
 80032c2:	677b      	str	r3, [r7, #116]	; 0x74
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	011a      	lsls	r2, r3, #4
 80032ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032cc:	4413      	add	r3, r2
 80032ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80032d2:	673b      	str	r3, [r7, #112]	; 0x70
 80032d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032d6:	2200      	movs	r2, #0
 80032d8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	67bb      	str	r3, [r7, #120]	; 0x78
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	785b      	ldrb	r3, [r3, #1]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d12f      	bne.n	8003348 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	461a      	mov	r2, r3
 80032fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003300:	4413      	add	r3, r2
 8003302:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	011a      	lsls	r2, r3, #4
 800330c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003310:	4413      	add	r3, r2
 8003312:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003316:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800331a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800331e:	881b      	ldrh	r3, [r3, #0]
 8003320:	b29b      	uxth	r3, r3
 8003322:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003326:	b29a      	uxth	r2, r3
 8003328:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800332c:	801a      	strh	r2, [r3, #0]
 800332e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	b29b      	uxth	r3, r3
 8003336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800333a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800333e:	b29a      	uxth	r2, r3
 8003340:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003344:	801a      	strh	r2, [r3, #0]
 8003346:	e017      	b.n	8003378 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	785b      	ldrb	r3, [r3, #1]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d113      	bne.n	8003378 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003358:	b29b      	uxth	r3, r3
 800335a:	461a      	mov	r2, r3
 800335c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800335e:	4413      	add	r3, r2
 8003360:	67bb      	str	r3, [r7, #120]	; 0x78
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	011a      	lsls	r2, r3, #4
 8003368:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800336a:	4413      	add	r3, r2
 800336c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003370:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003372:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003374:	2200      	movs	r2, #0
 8003376:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	4619      	mov	r1, r3
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f005 ffff 	bl	8009382 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003384:	88fb      	ldrh	r3, [r7, #6]
 8003386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800338a:	2b00      	cmp	r3, #0
 800338c:	f040 8104 	bne.w	8003598 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	461a      	mov	r2, r3
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	881b      	ldrh	r3, [r3, #0]
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033aa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	461a      	mov	r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	441a      	add	r2, r3
 80033bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80033c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	8013      	strh	r3, [r2, #0]
 80033d4:	e0e0      	b.n	8003598 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80033d6:	88fb      	ldrh	r3, [r7, #6]
 80033d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d121      	bne.n	8003424 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	461a      	mov	r2, r3
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	881b      	ldrh	r3, [r3, #0]
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033fa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	461a      	mov	r2, r3
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	441a      	add	r2, r3
 800340c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003410:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003414:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003418:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800341c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003420:	b29b      	uxth	r3, r3
 8003422:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800342a:	2b01      	cmp	r3, #1
 800342c:	f040 80b4 	bne.w	8003598 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	695a      	ldr	r2, [r3, #20]
 8003434:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003438:	441a      	add	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	69da      	ldr	r2, [r3, #28]
 8003442:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003446:	441a      	add	r2, r3
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	6a1a      	ldr	r2, [r3, #32]
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	429a      	cmp	r2, r3
 8003456:	d309      	bcc.n	800346c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	6a1a      	ldr	r2, [r3, #32]
 8003462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003464:	1ad2      	subs	r2, r2, r3
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	621a      	str	r2, [r3, #32]
 800346a:	e015      	b.n	8003498 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d107      	bne.n	8003484 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003474:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003478:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003482:	e009      	b.n	8003498 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2200      	movs	r2, #0
 800348e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	667b      	str	r3, [r7, #100]	; 0x64
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	785b      	ldrb	r3, [r3, #1]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d155      	bne.n	8003552 <HAL_PCD_EP_DB_Transmit+0x704>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	461a      	mov	r2, r3
 80034b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ba:	4413      	add	r3, r2
 80034bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	011a      	lsls	r2, r3, #4
 80034c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034c6:	4413      	add	r3, r2
 80034c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80034cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80034ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d112      	bne.n	80034fa <HAL_PCD_EP_DB_Transmit+0x6ac>
 80034d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	b29b      	uxth	r3, r3
 80034da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80034de:	b29a      	uxth	r2, r3
 80034e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034e2:	801a      	strh	r2, [r3, #0]
 80034e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034e6:	881b      	ldrh	r3, [r3, #0]
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034f6:	801a      	strh	r2, [r3, #0]
 80034f8:	e044      	b.n	8003584 <HAL_PCD_EP_DB_Transmit+0x736>
 80034fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034fc:	2b3e      	cmp	r3, #62	; 0x3e
 80034fe:	d811      	bhi.n	8003524 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003502:	085b      	lsrs	r3, r3, #1
 8003504:	657b      	str	r3, [r7, #84]	; 0x54
 8003506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003512:	3301      	adds	r3, #1
 8003514:	657b      	str	r3, [r7, #84]	; 0x54
 8003516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003518:	b29b      	uxth	r3, r3
 800351a:	029b      	lsls	r3, r3, #10
 800351c:	b29a      	uxth	r2, r3
 800351e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003520:	801a      	strh	r2, [r3, #0]
 8003522:	e02f      	b.n	8003584 <HAL_PCD_EP_DB_Transmit+0x736>
 8003524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003526:	095b      	lsrs	r3, r3, #5
 8003528:	657b      	str	r3, [r7, #84]	; 0x54
 800352a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800352c:	f003 031f 	and.w	r3, r3, #31
 8003530:	2b00      	cmp	r3, #0
 8003532:	d102      	bne.n	800353a <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003534:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003536:	3b01      	subs	r3, #1
 8003538:	657b      	str	r3, [r7, #84]	; 0x54
 800353a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800353c:	b29b      	uxth	r3, r3
 800353e:	029b      	lsls	r3, r3, #10
 8003540:	b29b      	uxth	r3, r3
 8003542:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003546:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800354a:	b29a      	uxth	r2, r3
 800354c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800354e:	801a      	strh	r2, [r3, #0]
 8003550:	e018      	b.n	8003584 <HAL_PCD_EP_DB_Transmit+0x736>
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	785b      	ldrb	r3, [r3, #1]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d114      	bne.n	8003584 <HAL_PCD_EP_DB_Transmit+0x736>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003562:	b29b      	uxth	r3, r3
 8003564:	461a      	mov	r2, r3
 8003566:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003568:	4413      	add	r3, r2
 800356a:	667b      	str	r3, [r7, #100]	; 0x64
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	011a      	lsls	r2, r3, #4
 8003572:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003574:	4413      	add	r3, r2
 8003576:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800357a:	663b      	str	r3, [r7, #96]	; 0x60
 800357c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800357e:	b29a      	uxth	r2, r3
 8003580:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003582:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6818      	ldr	r0, [r3, #0]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	6959      	ldr	r1, [r3, #20]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	895a      	ldrh	r2, [r3, #10]
 8003590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003592:	b29b      	uxth	r3, r3
 8003594:	f004 f88e 	bl	80076b4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	461a      	mov	r2, r3
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035b2:	823b      	strh	r3, [r7, #16]
 80035b4:	8a3b      	ldrh	r3, [r7, #16]
 80035b6:	f083 0310 	eor.w	r3, r3, #16
 80035ba:	823b      	strh	r3, [r7, #16]
 80035bc:	8a3b      	ldrh	r3, [r7, #16]
 80035be:	f083 0320 	eor.w	r3, r3, #32
 80035c2:	823b      	strh	r3, [r7, #16]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	461a      	mov	r2, r3
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	441a      	add	r2, r3
 80035d2:	8a3b      	ldrh	r3, [r7, #16]
 80035d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3788      	adds	r7, #136	; 0x88
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b087      	sub	sp, #28
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	60f8      	str	r0, [r7, #12]
 80035fa:	607b      	str	r3, [r7, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	817b      	strh	r3, [r7, #10]
 8003600:	4613      	mov	r3, r2
 8003602:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003604:	897b      	ldrh	r3, [r7, #10]
 8003606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800360a:	b29b      	uxth	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00b      	beq.n	8003628 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003610:	897b      	ldrh	r3, [r7, #10]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	1c5a      	adds	r2, r3, #1
 8003618:	4613      	mov	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	4413      	add	r3, r2
 8003624:	617b      	str	r3, [r7, #20]
 8003626:	e009      	b.n	800363c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003628:	897a      	ldrh	r2, [r7, #10]
 800362a:	4613      	mov	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	4413      	add	r3, r2
 800363a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800363c:	893b      	ldrh	r3, [r7, #8]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d107      	bne.n	8003652 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2200      	movs	r2, #0
 8003646:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	b29a      	uxth	r2, r3
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	80da      	strh	r2, [r3, #6]
 8003650:	e00b      	b.n	800366a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2201      	movs	r2, #1
 8003656:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	b29a      	uxth	r2, r3
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	0c1b      	lsrs	r3, r3, #16
 8003664:	b29a      	uxth	r2, r3
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	371c      	adds	r7, #28
 8003670:	46bd      	mov	sp, r7
 8003672:	bc80      	pop	{r7}
 8003674:	4770      	bx	lr
	...

08003678 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e272      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 8087 	beq.w	80037a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003698:	4b92      	ldr	r3, [pc, #584]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f003 030c 	and.w	r3, r3, #12
 80036a0:	2b04      	cmp	r3, #4
 80036a2:	d00c      	beq.n	80036be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036a4:	4b8f      	ldr	r3, [pc, #572]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f003 030c 	and.w	r3, r3, #12
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d112      	bne.n	80036d6 <HAL_RCC_OscConfig+0x5e>
 80036b0:	4b8c      	ldr	r3, [pc, #560]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036bc:	d10b      	bne.n	80036d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036be:	4b89      	ldr	r3, [pc, #548]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d06c      	beq.n	80037a4 <HAL_RCC_OscConfig+0x12c>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d168      	bne.n	80037a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e24c      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036de:	d106      	bne.n	80036ee <HAL_RCC_OscConfig+0x76>
 80036e0:	4b80      	ldr	r3, [pc, #512]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a7f      	ldr	r2, [pc, #508]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80036e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ea:	6013      	str	r3, [r2, #0]
 80036ec:	e02e      	b.n	800374c <HAL_RCC_OscConfig+0xd4>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10c      	bne.n	8003710 <HAL_RCC_OscConfig+0x98>
 80036f6:	4b7b      	ldr	r3, [pc, #492]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a7a      	ldr	r2, [pc, #488]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80036fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	4b78      	ldr	r3, [pc, #480]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a77      	ldr	r2, [pc, #476]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 8003708:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	e01d      	b.n	800374c <HAL_RCC_OscConfig+0xd4>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003718:	d10c      	bne.n	8003734 <HAL_RCC_OscConfig+0xbc>
 800371a:	4b72      	ldr	r3, [pc, #456]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a71      	ldr	r2, [pc, #452]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 8003720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003724:	6013      	str	r3, [r2, #0]
 8003726:	4b6f      	ldr	r3, [pc, #444]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a6e      	ldr	r2, [pc, #440]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 800372c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	e00b      	b.n	800374c <HAL_RCC_OscConfig+0xd4>
 8003734:	4b6b      	ldr	r3, [pc, #428]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a6a      	ldr	r2, [pc, #424]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 800373a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800373e:	6013      	str	r3, [r2, #0]
 8003740:	4b68      	ldr	r3, [pc, #416]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a67      	ldr	r2, [pc, #412]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 8003746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800374a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d013      	beq.n	800377c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003754:	f7fd ffd2 	bl	80016fc <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800375c:	f7fd ffce 	bl	80016fc <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b64      	cmp	r3, #100	; 0x64
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e200      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376e:	4b5d      	ldr	r3, [pc, #372]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0f0      	beq.n	800375c <HAL_RCC_OscConfig+0xe4>
 800377a:	e014      	b.n	80037a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377c:	f7fd ffbe 	bl	80016fc <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003784:	f7fd ffba 	bl	80016fc <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b64      	cmp	r3, #100	; 0x64
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e1ec      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003796:	4b53      	ldr	r3, [pc, #332]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1f0      	bne.n	8003784 <HAL_RCC_OscConfig+0x10c>
 80037a2:	e000      	b.n	80037a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d063      	beq.n	800387a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037b2:	4b4c      	ldr	r3, [pc, #304]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f003 030c 	and.w	r3, r3, #12
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00b      	beq.n	80037d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037be:	4b49      	ldr	r3, [pc, #292]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f003 030c 	and.w	r3, r3, #12
 80037c6:	2b08      	cmp	r3, #8
 80037c8:	d11c      	bne.n	8003804 <HAL_RCC_OscConfig+0x18c>
 80037ca:	4b46      	ldr	r3, [pc, #280]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d116      	bne.n	8003804 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037d6:	4b43      	ldr	r3, [pc, #268]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d005      	beq.n	80037ee <HAL_RCC_OscConfig+0x176>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d001      	beq.n	80037ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e1c0      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ee:	4b3d      	ldr	r3, [pc, #244]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	4939      	ldr	r1, [pc, #228]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003802:	e03a      	b.n	800387a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d020      	beq.n	800384e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800380c:	4b36      	ldr	r3, [pc, #216]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 800380e:	2201      	movs	r2, #1
 8003810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003812:	f7fd ff73 	bl	80016fc <HAL_GetTick>
 8003816:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003818:	e008      	b.n	800382c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800381a:	f7fd ff6f 	bl	80016fc <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e1a1      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800382c:	4b2d      	ldr	r3, [pc, #180]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d0f0      	beq.n	800381a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003838:	4b2a      	ldr	r3, [pc, #168]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	4927      	ldr	r1, [pc, #156]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 8003848:	4313      	orrs	r3, r2
 800384a:	600b      	str	r3, [r1, #0]
 800384c:	e015      	b.n	800387a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800384e:	4b26      	ldr	r3, [pc, #152]	; (80038e8 <HAL_RCC_OscConfig+0x270>)
 8003850:	2200      	movs	r2, #0
 8003852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003854:	f7fd ff52 	bl	80016fc <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800385c:	f7fd ff4e 	bl	80016fc <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e180      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800386e:	4b1d      	ldr	r3, [pc, #116]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1f0      	bne.n	800385c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	2b00      	cmp	r3, #0
 8003884:	d03a      	beq.n	80038fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d019      	beq.n	80038c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800388e:	4b17      	ldr	r3, [pc, #92]	; (80038ec <HAL_RCC_OscConfig+0x274>)
 8003890:	2201      	movs	r2, #1
 8003892:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003894:	f7fd ff32 	bl	80016fc <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800389c:	f7fd ff2e 	bl	80016fc <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e160      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ae:	4b0d      	ldr	r3, [pc, #52]	; (80038e4 <HAL_RCC_OscConfig+0x26c>)
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0f0      	beq.n	800389c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038ba:	2001      	movs	r0, #1
 80038bc:	f000 faa6 	bl	8003e0c <RCC_Delay>
 80038c0:	e01c      	b.n	80038fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038c2:	4b0a      	ldr	r3, [pc, #40]	; (80038ec <HAL_RCC_OscConfig+0x274>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c8:	f7fd ff18 	bl	80016fc <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ce:	e00f      	b.n	80038f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038d0:	f7fd ff14 	bl	80016fc <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d908      	bls.n	80038f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e146      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
 80038e2:	bf00      	nop
 80038e4:	40021000 	.word	0x40021000
 80038e8:	42420000 	.word	0x42420000
 80038ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f0:	4b92      	ldr	r3, [pc, #584]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	f003 0302 	and.w	r3, r3, #2
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1e9      	bne.n	80038d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 80a6 	beq.w	8003a56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800390a:	2300      	movs	r3, #0
 800390c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800390e:	4b8b      	ldr	r3, [pc, #556]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10d      	bne.n	8003936 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800391a:	4b88      	ldr	r3, [pc, #544]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	4a87      	ldr	r2, [pc, #540]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003924:	61d3      	str	r3, [r2, #28]
 8003926:	4b85      	ldr	r3, [pc, #532]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800392e:	60bb      	str	r3, [r7, #8]
 8003930:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003932:	2301      	movs	r3, #1
 8003934:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003936:	4b82      	ldr	r3, [pc, #520]	; (8003b40 <HAL_RCC_OscConfig+0x4c8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393e:	2b00      	cmp	r3, #0
 8003940:	d118      	bne.n	8003974 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003942:	4b7f      	ldr	r3, [pc, #508]	; (8003b40 <HAL_RCC_OscConfig+0x4c8>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a7e      	ldr	r2, [pc, #504]	; (8003b40 <HAL_RCC_OscConfig+0x4c8>)
 8003948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800394c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800394e:	f7fd fed5 	bl	80016fc <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003956:	f7fd fed1 	bl	80016fc <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b64      	cmp	r3, #100	; 0x64
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e103      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003968:	4b75      	ldr	r3, [pc, #468]	; (8003b40 <HAL_RCC_OscConfig+0x4c8>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0f0      	beq.n	8003956 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d106      	bne.n	800398a <HAL_RCC_OscConfig+0x312>
 800397c:	4b6f      	ldr	r3, [pc, #444]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	4a6e      	ldr	r2, [pc, #440]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003982:	f043 0301 	orr.w	r3, r3, #1
 8003986:	6213      	str	r3, [r2, #32]
 8003988:	e02d      	b.n	80039e6 <HAL_RCC_OscConfig+0x36e>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10c      	bne.n	80039ac <HAL_RCC_OscConfig+0x334>
 8003992:	4b6a      	ldr	r3, [pc, #424]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	4a69      	ldr	r2, [pc, #420]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003998:	f023 0301 	bic.w	r3, r3, #1
 800399c:	6213      	str	r3, [r2, #32]
 800399e:	4b67      	ldr	r3, [pc, #412]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	4a66      	ldr	r2, [pc, #408]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 80039a4:	f023 0304 	bic.w	r3, r3, #4
 80039a8:	6213      	str	r3, [r2, #32]
 80039aa:	e01c      	b.n	80039e6 <HAL_RCC_OscConfig+0x36e>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	2b05      	cmp	r3, #5
 80039b2:	d10c      	bne.n	80039ce <HAL_RCC_OscConfig+0x356>
 80039b4:	4b61      	ldr	r3, [pc, #388]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	4a60      	ldr	r2, [pc, #384]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 80039ba:	f043 0304 	orr.w	r3, r3, #4
 80039be:	6213      	str	r3, [r2, #32]
 80039c0:	4b5e      	ldr	r3, [pc, #376]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	4a5d      	ldr	r2, [pc, #372]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	6213      	str	r3, [r2, #32]
 80039cc:	e00b      	b.n	80039e6 <HAL_RCC_OscConfig+0x36e>
 80039ce:	4b5b      	ldr	r3, [pc, #364]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	4a5a      	ldr	r2, [pc, #360]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 80039d4:	f023 0301 	bic.w	r3, r3, #1
 80039d8:	6213      	str	r3, [r2, #32]
 80039da:	4b58      	ldr	r3, [pc, #352]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	4a57      	ldr	r2, [pc, #348]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 80039e0:	f023 0304 	bic.w	r3, r3, #4
 80039e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d015      	beq.n	8003a1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ee:	f7fd fe85 	bl	80016fc <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f4:	e00a      	b.n	8003a0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f6:	f7fd fe81 	bl	80016fc <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e0b1      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a0c:	4b4b      	ldr	r3, [pc, #300]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0ee      	beq.n	80039f6 <HAL_RCC_OscConfig+0x37e>
 8003a18:	e014      	b.n	8003a44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a1a:	f7fd fe6f 	bl	80016fc <HAL_GetTick>
 8003a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a20:	e00a      	b.n	8003a38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a22:	f7fd fe6b 	bl	80016fc <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e09b      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a38:	4b40      	ldr	r3, [pc, #256]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1ee      	bne.n	8003a22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a44:	7dfb      	ldrb	r3, [r7, #23]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d105      	bne.n	8003a56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a4a:	4b3c      	ldr	r3, [pc, #240]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	4a3b      	ldr	r2, [pc, #236]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003a50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 8087 	beq.w	8003b6e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a60:	4b36      	ldr	r3, [pc, #216]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f003 030c 	and.w	r3, r3, #12
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d061      	beq.n	8003b30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d146      	bne.n	8003b02 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a74:	4b33      	ldr	r3, [pc, #204]	; (8003b44 <HAL_RCC_OscConfig+0x4cc>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7a:	f7fd fe3f 	bl	80016fc <HAL_GetTick>
 8003a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a80:	e008      	b.n	8003a94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a82:	f7fd fe3b 	bl	80016fc <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e06d      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a94:	4b29      	ldr	r3, [pc, #164]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1f0      	bne.n	8003a82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa8:	d108      	bne.n	8003abc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003aaa:	4b24      	ldr	r3, [pc, #144]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	4921      	ldr	r1, [pc, #132]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003abc:	4b1f      	ldr	r3, [pc, #124]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a19      	ldr	r1, [r3, #32]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	430b      	orrs	r3, r1
 8003ace:	491b      	ldr	r1, [pc, #108]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ad4:	4b1b      	ldr	r3, [pc, #108]	; (8003b44 <HAL_RCC_OscConfig+0x4cc>)
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ada:	f7fd fe0f 	bl	80016fc <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ae0:	e008      	b.n	8003af4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae2:	f7fd fe0b 	bl	80016fc <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e03d      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003af4:	4b11      	ldr	r3, [pc, #68]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0f0      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x46a>
 8003b00:	e035      	b.n	8003b6e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b02:	4b10      	ldr	r3, [pc, #64]	; (8003b44 <HAL_RCC_OscConfig+0x4cc>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b08:	f7fd fdf8 	bl	80016fc <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b10:	f7fd fdf4 	bl	80016fc <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e026      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b22:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <HAL_RCC_OscConfig+0x4c4>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f0      	bne.n	8003b10 <HAL_RCC_OscConfig+0x498>
 8003b2e:	e01e      	b.n	8003b6e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d107      	bne.n	8003b48 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e019      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	40007000 	.word	0x40007000
 8003b44:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b48:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <HAL_RCC_OscConfig+0x500>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d106      	bne.n	8003b6a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d001      	beq.n	8003b6e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e000      	b.n	8003b70 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3718      	adds	r7, #24
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40021000 	.word	0x40021000

08003b7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e0d0      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b90:	4b6a      	ldr	r3, [pc, #424]	; (8003d3c <HAL_RCC_ClockConfig+0x1c0>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d910      	bls.n	8003bc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9e:	4b67      	ldr	r3, [pc, #412]	; (8003d3c <HAL_RCC_ClockConfig+0x1c0>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f023 0207 	bic.w	r2, r3, #7
 8003ba6:	4965      	ldr	r1, [pc, #404]	; (8003d3c <HAL_RCC_ClockConfig+0x1c0>)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bae:	4b63      	ldr	r3, [pc, #396]	; (8003d3c <HAL_RCC_ClockConfig+0x1c0>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0307 	and.w	r3, r3, #7
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d001      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e0b8      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d020      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d005      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bd8:	4b59      	ldr	r3, [pc, #356]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	4a58      	ldr	r2, [pc, #352]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003bde:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003be2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d005      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bf0:	4b53      	ldr	r3, [pc, #332]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	4a52      	ldr	r2, [pc, #328]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003bfa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bfc:	4b50      	ldr	r3, [pc, #320]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	494d      	ldr	r1, [pc, #308]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d040      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d107      	bne.n	8003c32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c22:	4b47      	ldr	r3, [pc, #284]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d115      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e07f      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d107      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c3a:	4b41      	ldr	r3, [pc, #260]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d109      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e073      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c4a:	4b3d      	ldr	r3, [pc, #244]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e06b      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c5a:	4b39      	ldr	r3, [pc, #228]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f023 0203 	bic.w	r2, r3, #3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	4936      	ldr	r1, [pc, #216]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c6c:	f7fd fd46 	bl	80016fc <HAL_GetTick>
 8003c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c72:	e00a      	b.n	8003c8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c74:	f7fd fd42 	bl	80016fc <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e053      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8a:	4b2d      	ldr	r3, [pc, #180]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f003 020c 	and.w	r2, r3, #12
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d1eb      	bne.n	8003c74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c9c:	4b27      	ldr	r3, [pc, #156]	; (8003d3c <HAL_RCC_ClockConfig+0x1c0>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0307 	and.w	r3, r3, #7
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d210      	bcs.n	8003ccc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003caa:	4b24      	ldr	r3, [pc, #144]	; (8003d3c <HAL_RCC_ClockConfig+0x1c0>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f023 0207 	bic.w	r2, r3, #7
 8003cb2:	4922      	ldr	r1, [pc, #136]	; (8003d3c <HAL_RCC_ClockConfig+0x1c0>)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cba:	4b20      	ldr	r3, [pc, #128]	; (8003d3c <HAL_RCC_ClockConfig+0x1c0>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d001      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e032      	b.n	8003d32 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d008      	beq.n	8003cea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cd8:	4b19      	ldr	r3, [pc, #100]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	4916      	ldr	r1, [pc, #88]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d009      	beq.n	8003d0a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003cf6:	4b12      	ldr	r3, [pc, #72]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	490e      	ldr	r1, [pc, #56]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d0a:	f000 f821 	bl	8003d50 <HAL_RCC_GetSysClockFreq>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <HAL_RCC_ClockConfig+0x1c4>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	091b      	lsrs	r3, r3, #4
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	490a      	ldr	r1, [pc, #40]	; (8003d44 <HAL_RCC_ClockConfig+0x1c8>)
 8003d1c:	5ccb      	ldrb	r3, [r1, r3]
 8003d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d22:	4a09      	ldr	r2, [pc, #36]	; (8003d48 <HAL_RCC_ClockConfig+0x1cc>)
 8003d24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d26:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <HAL_RCC_ClockConfig+0x1d0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fd fca4 	bl	8001678 <HAL_InitTick>

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40022000 	.word	0x40022000
 8003d40:	40021000 	.word	0x40021000
 8003d44:	0800a8ac 	.word	0x0800a8ac
 8003d48:	20000008 	.word	0x20000008
 8003d4c:	2000000c 	.word	0x2000000c

08003d50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d50:	b490      	push	{r4, r7}
 8003d52:	b08a      	sub	sp, #40	; 0x28
 8003d54:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003d56:	4b29      	ldr	r3, [pc, #164]	; (8003dfc <HAL_RCC_GetSysClockFreq+0xac>)
 8003d58:	1d3c      	adds	r4, r7, #4
 8003d5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003d60:	f240 2301 	movw	r3, #513	; 0x201
 8003d64:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	61fb      	str	r3, [r7, #28]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61bb      	str	r3, [r7, #24]
 8003d6e:	2300      	movs	r3, #0
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24
 8003d72:	2300      	movs	r3, #0
 8003d74:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d76:	2300      	movs	r3, #0
 8003d78:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d7a:	4b21      	ldr	r3, [pc, #132]	; (8003e00 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	f003 030c 	and.w	r3, r3, #12
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d002      	beq.n	8003d90 <HAL_RCC_GetSysClockFreq+0x40>
 8003d8a:	2b08      	cmp	r3, #8
 8003d8c:	d003      	beq.n	8003d96 <HAL_RCC_GetSysClockFreq+0x46>
 8003d8e:	e02b      	b.n	8003de8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d90:	4b1c      	ldr	r3, [pc, #112]	; (8003e04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d92:	623b      	str	r3, [r7, #32]
      break;
 8003d94:	e02b      	b.n	8003dee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	0c9b      	lsrs	r3, r3, #18
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	3328      	adds	r3, #40	; 0x28
 8003da0:	443b      	add	r3, r7
 8003da2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003da6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d012      	beq.n	8003dd8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003db2:	4b13      	ldr	r3, [pc, #76]	; (8003e00 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	0c5b      	lsrs	r3, r3, #17
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	3328      	adds	r3, #40	; 0x28
 8003dbe:	443b      	add	r3, r7
 8003dc0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003dc4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	4a0e      	ldr	r2, [pc, #56]	; (8003e04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003dca:	fb03 f202 	mul.w	r2, r3, r2
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd6:	e004      	b.n	8003de2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	4a0b      	ldr	r2, [pc, #44]	; (8003e08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ddc:	fb02 f303 	mul.w	r3, r2, r3
 8003de0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	623b      	str	r3, [r7, #32]
      break;
 8003de6:	e002      	b.n	8003dee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003de8:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003dea:	623b      	str	r3, [r7, #32]
      break;
 8003dec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dee:	6a3b      	ldr	r3, [r7, #32]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3728      	adds	r7, #40	; 0x28
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bc90      	pop	{r4, r7}
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	0800a854 	.word	0x0800a854
 8003e00:	40021000 	.word	0x40021000
 8003e04:	007a1200 	.word	0x007a1200
 8003e08:	003d0900 	.word	0x003d0900

08003e0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e14:	4b0a      	ldr	r3, [pc, #40]	; (8003e40 <RCC_Delay+0x34>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a0a      	ldr	r2, [pc, #40]	; (8003e44 <RCC_Delay+0x38>)
 8003e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1e:	0a5b      	lsrs	r3, r3, #9
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	fb02 f303 	mul.w	r3, r2, r3
 8003e26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e28:	bf00      	nop
  }
  while (Delay --);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	1e5a      	subs	r2, r3, #1
 8003e2e:	60fa      	str	r2, [r7, #12]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1f9      	bne.n	8003e28 <RCC_Delay+0x1c>
}
 8003e34:	bf00      	nop
 8003e36:	bf00      	nop
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bc80      	pop	{r7}
 8003e3e:	4770      	bx	lr
 8003e40:	20000008 	.word	0x20000008
 8003e44:	10624dd3 	.word	0x10624dd3

08003e48 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	613b      	str	r3, [r7, #16]
 8003e54:	2300      	movs	r3, #0
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0301 	and.w	r3, r3, #1
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d07d      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003e64:	2300      	movs	r3, #0
 8003e66:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e68:	4b4f      	ldr	r3, [pc, #316]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e6a:	69db      	ldr	r3, [r3, #28]
 8003e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10d      	bne.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e74:	4b4c      	ldr	r3, [pc, #304]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e76:	69db      	ldr	r3, [r3, #28]
 8003e78:	4a4b      	ldr	r2, [pc, #300]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e7e:	61d3      	str	r3, [r2, #28]
 8003e80:	4b49      	ldr	r3, [pc, #292]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e88:	60bb      	str	r3, [r7, #8]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e90:	4b46      	ldr	r3, [pc, #280]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d118      	bne.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e9c:	4b43      	ldr	r3, [pc, #268]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a42      	ldr	r2, [pc, #264]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ea8:	f7fd fc28 	bl	80016fc <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eae:	e008      	b.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eb0:	f7fd fc24 	bl	80016fc <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b64      	cmp	r3, #100	; 0x64
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e06d      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec2:	4b3a      	ldr	r3, [pc, #232]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0f0      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ece:	4b36      	ldr	r3, [pc, #216]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ed6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d02e      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d027      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003eec:	4b2e      	ldr	r3, [pc, #184]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ef4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ef6:	4b2e      	ldr	r3, [pc, #184]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ef8:	2201      	movs	r2, #1
 8003efa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003efc:	4b2c      	ldr	r3, [pc, #176]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f02:	4a29      	ldr	r2, [pc, #164]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d014      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f12:	f7fd fbf3 	bl	80016fc <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f18:	e00a      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f1a:	f7fd fbef 	bl	80016fc <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e036      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f30:	4b1d      	ldr	r3, [pc, #116]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0ee      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f3c:	4b1a      	ldr	r3, [pc, #104]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	4917      	ldr	r1, [pc, #92]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f4e:	7dfb      	ldrb	r3, [r7, #23]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d105      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f54:	4b14      	ldr	r3, [pc, #80]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	4a13      	ldr	r2, [pc, #76]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f5e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d008      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f6c:	4b0e      	ldr	r3, [pc, #56]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	490b      	ldr	r1, [pc, #44]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0310 	and.w	r3, r3, #16
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d008      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f8a:	4b07      	ldr	r3, [pc, #28]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	4904      	ldr	r1, [pc, #16]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3718      	adds	r7, #24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	40007000 	.word	0x40007000
 8003fb0:	42420440 	.word	0x42420440

08003fb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e041      	b.n	800404a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d106      	bne.n	8003fe0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7fd f9f6 	bl	80013cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	4610      	mov	r0, r2
 8003ff4:	f000 fc9a 	bl	800492c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
	...

08004054 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b01      	cmp	r3, #1
 8004066:	d001      	beq.n	800406c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e03a      	b.n	80040e2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0201 	orr.w	r2, r2, #1
 8004082:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a18      	ldr	r2, [pc, #96]	; (80040ec <HAL_TIM_Base_Start_IT+0x98>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d00e      	beq.n	80040ac <HAL_TIM_Base_Start_IT+0x58>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004096:	d009      	beq.n	80040ac <HAL_TIM_Base_Start_IT+0x58>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a14      	ldr	r2, [pc, #80]	; (80040f0 <HAL_TIM_Base_Start_IT+0x9c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d004      	beq.n	80040ac <HAL_TIM_Base_Start_IT+0x58>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a13      	ldr	r2, [pc, #76]	; (80040f4 <HAL_TIM_Base_Start_IT+0xa0>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d111      	bne.n	80040d0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 0307 	and.w	r3, r3, #7
 80040b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2b06      	cmp	r3, #6
 80040bc:	d010      	beq.n	80040e0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f042 0201 	orr.w	r2, r2, #1
 80040cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ce:	e007      	b.n	80040e0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0201 	orr.w	r2, r2, #1
 80040de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bc80      	pop	{r7}
 80040ea:	4770      	bx	lr
 80040ec:	40012c00 	.word	0x40012c00
 80040f0:	40000400 	.word	0x40000400
 80040f4:	40000800 	.word	0x40000800

080040f8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0201 	bic.w	r2, r2, #1
 800410e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6a1a      	ldr	r2, [r3, #32]
 8004116:	f241 1311 	movw	r3, #4369	; 0x1111
 800411a:	4013      	ands	r3, r2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10f      	bne.n	8004140 <HAL_TIM_Base_Stop_IT+0x48>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6a1a      	ldr	r2, [r3, #32]
 8004126:	f240 4344 	movw	r3, #1092	; 0x444
 800412a:	4013      	ands	r3, r2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d107      	bne.n	8004140 <HAL_TIM_Base_Stop_IT+0x48>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0201 	bic.w	r2, r2, #1
 800413e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	bc80      	pop	{r7}
 8004152:	4770      	bx	lr

08004154 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e093      	b.n	8004290 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	d106      	bne.n	8004182 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7fd f8e1 	bl	8001344 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2202      	movs	r2, #2
 8004186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6812      	ldr	r2, [r2, #0]
 8004194:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004198:	f023 0307 	bic.w	r3, r3, #7
 800419c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	3304      	adds	r3, #4
 80041a6:	4619      	mov	r1, r3
 80041a8:	4610      	mov	r0, r2
 80041aa:	f000 fbbf 	bl	800492c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041d6:	f023 0303 	bic.w	r3, r3, #3
 80041da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	021b      	lsls	r3, r3, #8
 80041e6:	4313      	orrs	r3, r2
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80041f4:	f023 030c 	bic.w	r3, r3, #12
 80041f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004200:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004204:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	68da      	ldr	r2, [r3, #12]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	021b      	lsls	r3, r3, #8
 8004210:	4313      	orrs	r3, r2
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	4313      	orrs	r3, r2
 8004216:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	011a      	lsls	r2, r3, #4
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	031b      	lsls	r3, r3, #12
 8004224:	4313      	orrs	r3, r2
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	4313      	orrs	r3, r2
 800422a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004232:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	4313      	orrs	r3, r2
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	4313      	orrs	r3, r2
 8004244:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042a8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042b0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042b8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80042c0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d110      	bne.n	80042ea <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d102      	bne.n	80042d4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80042ce:	7b7b      	ldrb	r3, [r7, #13]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d001      	beq.n	80042d8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e089      	b.n	80043ec <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042e8:	e031      	b.n	800434e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	d110      	bne.n	8004312 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80042f0:	7bbb      	ldrb	r3, [r7, #14]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d102      	bne.n	80042fc <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80042f6:	7b3b      	ldrb	r3, [r7, #12]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d001      	beq.n	8004300 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e075      	b.n	80043ec <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2202      	movs	r2, #2
 800430c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004310:	e01d      	b.n	800434e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004312:	7bfb      	ldrb	r3, [r7, #15]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d108      	bne.n	800432a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004318:	7bbb      	ldrb	r3, [r7, #14]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d105      	bne.n	800432a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800431e:	7b7b      	ldrb	r3, [r7, #13]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d102      	bne.n	800432a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004324:	7b3b      	ldrb	r3, [r7, #12]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d001      	beq.n	800432e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e05e      	b.n	80043ec <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2202      	movs	r2, #2
 8004332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2202      	movs	r2, #2
 800433a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2202      	movs	r2, #2
 8004342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2202      	movs	r2, #2
 800434a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <HAL_TIM_Encoder_Start_IT+0xc4>
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	2b04      	cmp	r3, #4
 8004358:	d010      	beq.n	800437c <HAL_TIM_Encoder_Start_IT+0xe4>
 800435a:	e01f      	b.n	800439c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2201      	movs	r2, #1
 8004362:	2100      	movs	r1, #0
 8004364:	4618      	mov	r0, r3
 8004366:	f000 fbd9 	bl	8004b1c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68da      	ldr	r2, [r3, #12]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f042 0202 	orr.w	r2, r2, #2
 8004378:	60da      	str	r2, [r3, #12]
      break;
 800437a:	e02e      	b.n	80043da <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2201      	movs	r2, #1
 8004382:	2104      	movs	r1, #4
 8004384:	4618      	mov	r0, r3
 8004386:	f000 fbc9 	bl	8004b1c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f042 0204 	orr.w	r2, r2, #4
 8004398:	60da      	str	r2, [r3, #12]
      break;
 800439a:	e01e      	b.n	80043da <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2201      	movs	r2, #1
 80043a2:	2100      	movs	r1, #0
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 fbb9 	bl	8004b1c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2201      	movs	r2, #1
 80043b0:	2104      	movs	r1, #4
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 fbb2 	bl	8004b1c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f042 0202 	orr.w	r2, r2, #2
 80043c6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0204 	orr.w	r2, r2, #4
 80043d6:	60da      	str	r2, [r3, #12]
      break;
 80043d8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f042 0201 	orr.w	r2, r2, #1
 80043e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10f      	bne.n	8004424 <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2200      	movs	r2, #0
 800440a:	2100      	movs	r1, #0
 800440c:	4618      	mov	r0, r3
 800440e:	f000 fb85 	bl	8004b1c <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68da      	ldr	r2, [r3, #12]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0202 	bic.w	r2, r2, #2
 8004420:	60da      	str	r2, [r3, #12]
 8004422:	e030      	b.n	8004486 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	2b04      	cmp	r3, #4
 8004428:	d10f      	bne.n	800444a <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2200      	movs	r2, #0
 8004430:	2104      	movs	r1, #4
 8004432:	4618      	mov	r0, r3
 8004434:	f000 fb72 	bl	8004b1c <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68da      	ldr	r2, [r3, #12]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 0204 	bic.w	r2, r2, #4
 8004446:	60da      	str	r2, [r3, #12]
 8004448:	e01d      	b.n	8004486 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2200      	movs	r2, #0
 8004450:	2100      	movs	r1, #0
 8004452:	4618      	mov	r0, r3
 8004454:	f000 fb62 	bl	8004b1c <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2200      	movs	r2, #0
 800445e:	2104      	movs	r1, #4
 8004460:	4618      	mov	r0, r3
 8004462:	f000 fb5b 	bl	8004b1c <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68da      	ldr	r2, [r3, #12]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 0202 	bic.w	r2, r2, #2
 8004474:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0204 	bic.w	r2, r2, #4
 8004484:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6a1a      	ldr	r2, [r3, #32]
 800448c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004490:	4013      	ands	r3, r2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10f      	bne.n	80044b6 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6a1a      	ldr	r2, [r3, #32]
 800449c:	f240 4344 	movw	r3, #1092	; 0x444
 80044a0:	4013      	ands	r3, r2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d107      	bne.n	80044b6 <HAL_TIM_Encoder_Stop_IT+0xc2>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0201 	bic.w	r2, r2, #1
 80044b4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d002      	beq.n	80044c2 <HAL_TIM_Encoder_Stop_IT+0xce>
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	2b04      	cmp	r3, #4
 80044c0:	d138      	bne.n	8004534 <HAL_TIM_Encoder_Stop_IT+0x140>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d104      	bne.n	80044d2 <HAL_TIM_Encoder_Stop_IT+0xde>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044d0:	e013      	b.n	80044fa <HAL_TIM_Encoder_Stop_IT+0x106>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b04      	cmp	r3, #4
 80044d6:	d104      	bne.n	80044e2 <HAL_TIM_Encoder_Stop_IT+0xee>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044e0:	e00b      	b.n	80044fa <HAL_TIM_Encoder_Stop_IT+0x106>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d104      	bne.n	80044f2 <HAL_TIM_Encoder_Stop_IT+0xfe>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044f0:	e003      	b.n	80044fa <HAL_TIM_Encoder_Stop_IT+0x106>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d104      	bne.n	800450a <HAL_TIM_Encoder_Stop_IT+0x116>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004508:	e024      	b.n	8004554 <HAL_TIM_Encoder_Stop_IT+0x160>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	2b04      	cmp	r3, #4
 800450e:	d104      	bne.n	800451a <HAL_TIM_Encoder_Stop_IT+0x126>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004518:	e01c      	b.n	8004554 <HAL_TIM_Encoder_Stop_IT+0x160>
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2b08      	cmp	r3, #8
 800451e:	d104      	bne.n	800452a <HAL_TIM_Encoder_Stop_IT+0x136>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004528:	e014      	b.n	8004554 <HAL_TIM_Encoder_Stop_IT+0x160>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004532:	e00f      	b.n	8004554 <HAL_TIM_Encoder_Stop_IT+0x160>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b082      	sub	sp, #8
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b02      	cmp	r3, #2
 8004572:	d122      	bne.n	80045ba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b02      	cmp	r3, #2
 8004580:	d11b      	bne.n	80045ba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f06f 0202 	mvn.w	r2, #2
 800458a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	f003 0303 	and.w	r3, r3, #3
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f7fc fe01 	bl	80011a8 <HAL_TIM_IC_CaptureCallback>
 80045a6:	e005      	b.n	80045b4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 f9a4 	bl	80048f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f9aa 	bl	8004908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b04      	cmp	r3, #4
 80045c6:	d122      	bne.n	800460e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	f003 0304 	and.w	r3, r3, #4
 80045d2:	2b04      	cmp	r3, #4
 80045d4:	d11b      	bne.n	800460e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f06f 0204 	mvn.w	r2, #4
 80045de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d003      	beq.n	80045fc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f7fc fdd7 	bl	80011a8 <HAL_TIM_IC_CaptureCallback>
 80045fa:	e005      	b.n	8004608 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f97a 	bl	80048f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f980 	bl	8004908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	f003 0308 	and.w	r3, r3, #8
 8004618:	2b08      	cmp	r3, #8
 800461a:	d122      	bne.n	8004662 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b08      	cmp	r3, #8
 8004628:	d11b      	bne.n	8004662 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f06f 0208 	mvn.w	r2, #8
 8004632:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2204      	movs	r2, #4
 8004638:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	f003 0303 	and.w	r3, r3, #3
 8004644:	2b00      	cmp	r3, #0
 8004646:	d003      	beq.n	8004650 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7fc fdad 	bl	80011a8 <HAL_TIM_IC_CaptureCallback>
 800464e:	e005      	b.n	800465c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f950 	bl	80048f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f956 	bl	8004908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	f003 0310 	and.w	r3, r3, #16
 800466c:	2b10      	cmp	r3, #16
 800466e:	d122      	bne.n	80046b6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	f003 0310 	and.w	r3, r3, #16
 800467a:	2b10      	cmp	r3, #16
 800467c:	d11b      	bne.n	80046b6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f06f 0210 	mvn.w	r2, #16
 8004686:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2208      	movs	r2, #8
 800468c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	69db      	ldr	r3, [r3, #28]
 8004694:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004698:	2b00      	cmp	r3, #0
 800469a:	d003      	beq.n	80046a4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7fc fd83 	bl	80011a8 <HAL_TIM_IC_CaptureCallback>
 80046a2:	e005      	b.n	80046b0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f926 	bl	80048f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f92c 	bl	8004908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d10e      	bne.n	80046e2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d107      	bne.n	80046e2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f06f 0201 	mvn.w	r2, #1
 80046da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f7fc fd99 	bl	8001214 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ec:	2b80      	cmp	r3, #128	; 0x80
 80046ee:	d10e      	bne.n	800470e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fa:	2b80      	cmp	r3, #128	; 0x80
 80046fc:	d107      	bne.n	800470e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 fa92 	bl	8004c32 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004718:	2b40      	cmp	r3, #64	; 0x40
 800471a:	d10e      	bne.n	800473a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004726:	2b40      	cmp	r3, #64	; 0x40
 8004728:	d107      	bne.n	800473a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 f8f0 	bl	800491a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	f003 0320 	and.w	r3, r3, #32
 8004744:	2b20      	cmp	r3, #32
 8004746:	d10e      	bne.n	8004766 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f003 0320 	and.w	r3, r3, #32
 8004752:	2b20      	cmp	r3, #32
 8004754:	d107      	bne.n	8004766 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f06f 0220 	mvn.w	r2, #32
 800475e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 fa5d 	bl	8004c20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004766:	bf00      	nop
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b084      	sub	sp, #16
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
 8004776:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800477e:	2b01      	cmp	r3, #1
 8004780:	d101      	bne.n	8004786 <HAL_TIM_ConfigClockSource+0x18>
 8004782:	2302      	movs	r3, #2
 8004784:	e0b3      	b.n	80048ee <HAL_TIM_ConfigClockSource+0x180>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2202      	movs	r2, #2
 8004792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047a4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047ac:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047be:	d03e      	beq.n	800483e <HAL_TIM_ConfigClockSource+0xd0>
 80047c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047c4:	f200 8087 	bhi.w	80048d6 <HAL_TIM_ConfigClockSource+0x168>
 80047c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047cc:	f000 8085 	beq.w	80048da <HAL_TIM_ConfigClockSource+0x16c>
 80047d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d4:	d87f      	bhi.n	80048d6 <HAL_TIM_ConfigClockSource+0x168>
 80047d6:	2b70      	cmp	r3, #112	; 0x70
 80047d8:	d01a      	beq.n	8004810 <HAL_TIM_ConfigClockSource+0xa2>
 80047da:	2b70      	cmp	r3, #112	; 0x70
 80047dc:	d87b      	bhi.n	80048d6 <HAL_TIM_ConfigClockSource+0x168>
 80047de:	2b60      	cmp	r3, #96	; 0x60
 80047e0:	d050      	beq.n	8004884 <HAL_TIM_ConfigClockSource+0x116>
 80047e2:	2b60      	cmp	r3, #96	; 0x60
 80047e4:	d877      	bhi.n	80048d6 <HAL_TIM_ConfigClockSource+0x168>
 80047e6:	2b50      	cmp	r3, #80	; 0x50
 80047e8:	d03c      	beq.n	8004864 <HAL_TIM_ConfigClockSource+0xf6>
 80047ea:	2b50      	cmp	r3, #80	; 0x50
 80047ec:	d873      	bhi.n	80048d6 <HAL_TIM_ConfigClockSource+0x168>
 80047ee:	2b40      	cmp	r3, #64	; 0x40
 80047f0:	d058      	beq.n	80048a4 <HAL_TIM_ConfigClockSource+0x136>
 80047f2:	2b40      	cmp	r3, #64	; 0x40
 80047f4:	d86f      	bhi.n	80048d6 <HAL_TIM_ConfigClockSource+0x168>
 80047f6:	2b30      	cmp	r3, #48	; 0x30
 80047f8:	d064      	beq.n	80048c4 <HAL_TIM_ConfigClockSource+0x156>
 80047fa:	2b30      	cmp	r3, #48	; 0x30
 80047fc:	d86b      	bhi.n	80048d6 <HAL_TIM_ConfigClockSource+0x168>
 80047fe:	2b20      	cmp	r3, #32
 8004800:	d060      	beq.n	80048c4 <HAL_TIM_ConfigClockSource+0x156>
 8004802:	2b20      	cmp	r3, #32
 8004804:	d867      	bhi.n	80048d6 <HAL_TIM_ConfigClockSource+0x168>
 8004806:	2b00      	cmp	r3, #0
 8004808:	d05c      	beq.n	80048c4 <HAL_TIM_ConfigClockSource+0x156>
 800480a:	2b10      	cmp	r3, #16
 800480c:	d05a      	beq.n	80048c4 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800480e:	e062      	b.n	80048d6 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6818      	ldr	r0, [r3, #0]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	6899      	ldr	r1, [r3, #8]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	f000 f95d 	bl	8004ade <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004832:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	609a      	str	r2, [r3, #8]
      break;
 800483c:	e04e      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6818      	ldr	r0, [r3, #0]
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	6899      	ldr	r1, [r3, #8]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f000 f946 	bl	8004ade <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004860:	609a      	str	r2, [r3, #8]
      break;
 8004862:	e03b      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6818      	ldr	r0, [r3, #0]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	6859      	ldr	r1, [r3, #4]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	461a      	mov	r2, r3
 8004872:	f000 f8bd 	bl	80049f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2150      	movs	r1, #80	; 0x50
 800487c:	4618      	mov	r0, r3
 800487e:	f000 f914 	bl	8004aaa <TIM_ITRx_SetConfig>
      break;
 8004882:	e02b      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6818      	ldr	r0, [r3, #0]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	6859      	ldr	r1, [r3, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	461a      	mov	r2, r3
 8004892:	f000 f8db 	bl	8004a4c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2160      	movs	r1, #96	; 0x60
 800489c:	4618      	mov	r0, r3
 800489e:	f000 f904 	bl	8004aaa <TIM_ITRx_SetConfig>
      break;
 80048a2:	e01b      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6818      	ldr	r0, [r3, #0]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	6859      	ldr	r1, [r3, #4]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	461a      	mov	r2, r3
 80048b2:	f000 f89d 	bl	80049f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2140      	movs	r1, #64	; 0x40
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 f8f4 	bl	8004aaa <TIM_ITRx_SetConfig>
      break;
 80048c2:	e00b      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4619      	mov	r1, r3
 80048ce:	4610      	mov	r0, r2
 80048d0:	f000 f8eb 	bl	8004aaa <TIM_ITRx_SetConfig>
        break;
 80048d4:	e002      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80048d6:	bf00      	nop
 80048d8:	e000      	b.n	80048dc <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80048da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	bc80      	pop	{r7}
 8004906:	4770      	bx	lr

08004908 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	bc80      	pop	{r7}
 8004918:	4770      	bx	lr

0800491a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	bc80      	pop	{r7}
 800492a:	4770      	bx	lr

0800492c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a29      	ldr	r2, [pc, #164]	; (80049e4 <TIM_Base_SetConfig+0xb8>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d00b      	beq.n	800495c <TIM_Base_SetConfig+0x30>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800494a:	d007      	beq.n	800495c <TIM_Base_SetConfig+0x30>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a26      	ldr	r2, [pc, #152]	; (80049e8 <TIM_Base_SetConfig+0xbc>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d003      	beq.n	800495c <TIM_Base_SetConfig+0x30>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a25      	ldr	r2, [pc, #148]	; (80049ec <TIM_Base_SetConfig+0xc0>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d108      	bne.n	800496e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004962:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	4313      	orrs	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a1c      	ldr	r2, [pc, #112]	; (80049e4 <TIM_Base_SetConfig+0xb8>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d00b      	beq.n	800498e <TIM_Base_SetConfig+0x62>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800497c:	d007      	beq.n	800498e <TIM_Base_SetConfig+0x62>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a19      	ldr	r2, [pc, #100]	; (80049e8 <TIM_Base_SetConfig+0xbc>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d003      	beq.n	800498e <TIM_Base_SetConfig+0x62>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a18      	ldr	r2, [pc, #96]	; (80049ec <TIM_Base_SetConfig+0xc0>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d108      	bne.n	80049a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	4313      	orrs	r3, r2
 800499e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a07      	ldr	r2, [pc, #28]	; (80049e4 <TIM_Base_SetConfig+0xb8>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d103      	bne.n	80049d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	691a      	ldr	r2, [r3, #16]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	615a      	str	r2, [r3, #20]
}
 80049da:	bf00      	nop
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	bc80      	pop	{r7}
 80049e2:	4770      	bx	lr
 80049e4:	40012c00 	.word	0x40012c00
 80049e8:	40000400 	.word	0x40000400
 80049ec:	40000800 	.word	0x40000800

080049f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	f023 0201 	bic.w	r2, r3, #1
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f023 030a 	bic.w	r3, r3, #10
 8004a2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	621a      	str	r2, [r3, #32]
}
 8004a42:	bf00      	nop
 8004a44:	371c      	adds	r7, #28
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bc80      	pop	{r7}
 8004a4a:	4770      	bx	lr

08004a4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b087      	sub	sp, #28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	f023 0210 	bic.w	r2, r3, #16
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a76:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	031b      	lsls	r3, r3, #12
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	011b      	lsls	r3, r3, #4
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	621a      	str	r2, [r3, #32]
}
 8004aa0:	bf00      	nop
 8004aa2:	371c      	adds	r7, #28
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bc80      	pop	{r7}
 8004aa8:	4770      	bx	lr

08004aaa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b085      	sub	sp, #20
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	f043 0307 	orr.w	r3, r3, #7
 8004acc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	609a      	str	r2, [r3, #8]
}
 8004ad4:	bf00      	nop
 8004ad6:	3714      	adds	r7, #20
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bc80      	pop	{r7}
 8004adc:	4770      	bx	lr

08004ade <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b087      	sub	sp, #28
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	60f8      	str	r0, [r7, #12]
 8004ae6:	60b9      	str	r1, [r7, #8]
 8004ae8:	607a      	str	r2, [r7, #4]
 8004aea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004af8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	021a      	lsls	r2, r3, #8
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	431a      	orrs	r2, r3
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	609a      	str	r2, [r3, #8]
}
 8004b12:	bf00      	nop
 8004b14:	371c      	adds	r7, #28
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bc80      	pop	{r7}
 8004b1a:	4770      	bx	lr

08004b1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b087      	sub	sp, #28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	f003 031f 	and.w	r3, r3, #31
 8004b2e:	2201      	movs	r2, #1
 8004b30:	fa02 f303 	lsl.w	r3, r2, r3
 8004b34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6a1a      	ldr	r2, [r3, #32]
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	43db      	mvns	r3, r3
 8004b3e:	401a      	ands	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6a1a      	ldr	r2, [r3, #32]
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f003 031f 	and.w	r3, r3, #31
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	fa01 f303 	lsl.w	r3, r1, r3
 8004b54:	431a      	orrs	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	621a      	str	r2, [r3, #32]
}
 8004b5a:	bf00      	nop
 8004b5c:	371c      	adds	r7, #28
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bc80      	pop	{r7}
 8004b62:	4770      	bx	lr

08004b64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d101      	bne.n	8004b7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e046      	b.n	8004c0a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a16      	ldr	r2, [pc, #88]	; (8004c14 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d00e      	beq.n	8004bde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc8:	d009      	beq.n	8004bde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a12      	ldr	r2, [pc, #72]	; (8004c18 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d004      	beq.n	8004bde <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a10      	ldr	r2, [pc, #64]	; (8004c1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d10c      	bne.n	8004bf8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004be4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3714      	adds	r7, #20
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bc80      	pop	{r7}
 8004c12:	4770      	bx	lr
 8004c14:	40012c00 	.word	0x40012c00
 8004c18:	40000400 	.word	0x40000400
 8004c1c:	40000800 	.word	0x40000800

08004c20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bc80      	pop	{r7}
 8004c30:	4770      	bx	lr

08004c32 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b083      	sub	sp, #12
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c3a:	bf00      	nop
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bc80      	pop	{r7}
 8004c42:	4770      	bx	lr

08004c44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c44:	b084      	sub	sp, #16
 8004c46:	b480      	push	{r7}
 8004c48:	b083      	sub	sp, #12
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
 8004c4e:	f107 0014 	add.w	r0, r7, #20
 8004c52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bc80      	pop	{r7}
 8004c60:	b004      	add	sp, #16
 8004c62:	4770      	bx	lr

08004c64 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c74:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004c78:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bc80      	pop	{r7}
 8004c8e:	4770      	bx	lr

08004c90 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c98:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004c9c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	43db      	mvns	r3, r3
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	4013      	ands	r3, r2
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bc80      	pop	{r7}
 8004cc2:	4770      	bx	lr

08004cc4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	460b      	mov	r3, r1
 8004cce:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bc80      	pop	{r7}
 8004cda:	4770      	bx	lr

08004cdc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004cdc:	b084      	sub	sp, #16
 8004cde:	b480      	push	{r7}
 8004ce0:	b083      	sub	sp, #12
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
 8004ce6:	f107 0014 	add.w	r0, r7, #20
 8004cea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bc80      	pop	{r7}
 8004d18:	b004      	add	sp, #16
 8004d1a:	4770      	bx	lr

08004d1c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b09b      	sub	sp, #108	; 0x6c
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d26:	2300      	movs	r3, #0
 8004d28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	881b      	ldrh	r3, [r3, #0]
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d42:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	78db      	ldrb	r3, [r3, #3]
 8004d4a:	2b03      	cmp	r3, #3
 8004d4c:	d81f      	bhi.n	8004d8e <USB_ActivateEndpoint+0x72>
 8004d4e:	a201      	add	r2, pc, #4	; (adr r2, 8004d54 <USB_ActivateEndpoint+0x38>)
 8004d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d54:	08004d65 	.word	0x08004d65
 8004d58:	08004d81 	.word	0x08004d81
 8004d5c:	08004d97 	.word	0x08004d97
 8004d60:	08004d73 	.word	0x08004d73
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004d64:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004d68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d6c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004d70:	e012      	b.n	8004d98 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004d72:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004d76:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004d7a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004d7e:	e00b      	b.n	8004d98 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004d80:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004d84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d88:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004d8c:	e004      	b.n	8004d98 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004d94:	e000      	b.n	8004d98 <USB_ActivateEndpoint+0x7c>
      break;
 8004d96:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	441a      	add	r2, r3
 8004da2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004da6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004daa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4413      	add	r3, r2
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	441a      	add	r2, r3
 8004de8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004dec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004df0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004df4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	7b1b      	ldrb	r3, [r3, #12]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f040 8149 	bne.w	800509c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	785b      	ldrb	r3, [r3, #1]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f000 8084 	beq.w	8004f1c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	617b      	str	r3, [r7, #20]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	461a      	mov	r2, r3
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	4413      	add	r3, r2
 8004e26:	617b      	str	r3, [r7, #20]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	011a      	lsls	r2, r3, #4
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e36:	613b      	str	r3, [r7, #16]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	88db      	ldrh	r3, [r3, #6]
 8004e3c:	085b      	lsrs	r3, r3, #1
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	881b      	ldrh	r3, [r3, #0]
 8004e54:	81fb      	strh	r3, [r7, #14]
 8004e56:	89fb      	ldrh	r3, [r7, #14]
 8004e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d01b      	beq.n	8004e98 <USB_ActivateEndpoint+0x17c>
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e76:	81bb      	strh	r3, [r7, #12]
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	441a      	add	r2, r3
 8004e82:	89bb      	ldrh	r3, [r7, #12]
 8004e84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	78db      	ldrb	r3, [r3, #3]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d020      	beq.n	8004ee2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	881b      	ldrh	r3, [r3, #0]
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eb6:	813b      	strh	r3, [r7, #8]
 8004eb8:	893b      	ldrh	r3, [r7, #8]
 8004eba:	f083 0320 	eor.w	r3, r3, #32
 8004ebe:	813b      	strh	r3, [r7, #8]
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	441a      	add	r2, r3
 8004eca:	893b      	ldrh	r3, [r7, #8]
 8004ecc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ed0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ed4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	8013      	strh	r3, [r2, #0]
 8004ee0:	e27f      	b.n	80053e2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4413      	add	r3, r2
 8004eec:	881b      	ldrh	r3, [r3, #0]
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ef8:	817b      	strh	r3, [r7, #10]
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	441a      	add	r2, r3
 8004f04:	897b      	ldrh	r3, [r7, #10]
 8004f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	8013      	strh	r3, [r2, #0]
 8004f1a:	e262      	b.n	80053e2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	461a      	mov	r2, r3
 8004f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f2c:	4413      	add	r3, r2
 8004f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	011a      	lsls	r2, r3, #4
 8004f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004f3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	88db      	ldrh	r3, [r3, #6]
 8004f44:	085b      	lsrs	r3, r3, #1
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	005b      	lsls	r3, r3, #1
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	627b      	str	r3, [r7, #36]	; 0x24
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f60:	4413      	add	r3, r2
 8004f62:	627b      	str	r3, [r7, #36]	; 0x24
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	011a      	lsls	r2, r3, #4
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f72:	623b      	str	r3, [r7, #32]
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d112      	bne.n	8004fa2 <USB_ActivateEndpoint+0x286>
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	801a      	strh	r2, [r3, #0]
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	801a      	strh	r2, [r3, #0]
 8004fa0:	e02f      	b.n	8005002 <USB_ActivateEndpoint+0x2e6>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	2b3e      	cmp	r3, #62	; 0x3e
 8004fa8:	d813      	bhi.n	8004fd2 <USB_ActivateEndpoint+0x2b6>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	085b      	lsrs	r3, r3, #1
 8004fb0:	663b      	str	r3, [r7, #96]	; 0x60
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d002      	beq.n	8004fc4 <USB_ActivateEndpoint+0x2a8>
 8004fbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	663b      	str	r3, [r7, #96]	; 0x60
 8004fc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	029b      	lsls	r3, r3, #10
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	801a      	strh	r2, [r3, #0]
 8004fd0:	e017      	b.n	8005002 <USB_ActivateEndpoint+0x2e6>
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	095b      	lsrs	r3, r3, #5
 8004fd8:	663b      	str	r3, [r7, #96]	; 0x60
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	f003 031f 	and.w	r3, r3, #31
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d102      	bne.n	8004fec <USB_ActivateEndpoint+0x2d0>
 8004fe6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	663b      	str	r3, [r7, #96]	; 0x60
 8004fec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	029b      	lsls	r3, r3, #10
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ff8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	6a3b      	ldr	r3, [r7, #32]
 8005000:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	881b      	ldrh	r3, [r3, #0]
 800500e:	83fb      	strh	r3, [r7, #30]
 8005010:	8bfb      	ldrh	r3, [r7, #30]
 8005012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d01b      	beq.n	8005052 <USB_ActivateEndpoint+0x336>
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4413      	add	r3, r2
 8005024:	881b      	ldrh	r3, [r3, #0]
 8005026:	b29b      	uxth	r3, r3
 8005028:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800502c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005030:	83bb      	strh	r3, [r7, #28]
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	441a      	add	r2, r3
 800503c:	8bbb      	ldrh	r3, [r7, #28]
 800503e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005042:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005046:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800504a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800504e:	b29b      	uxth	r3, r3
 8005050:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4413      	add	r3, r2
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	b29b      	uxth	r3, r3
 8005060:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005068:	837b      	strh	r3, [r7, #26]
 800506a:	8b7b      	ldrh	r3, [r7, #26]
 800506c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005070:	837b      	strh	r3, [r7, #26]
 8005072:	8b7b      	ldrh	r3, [r7, #26]
 8005074:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005078:	837b      	strh	r3, [r7, #26]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	441a      	add	r2, r3
 8005084:	8b7b      	ldrh	r3, [r7, #26]
 8005086:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800508a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800508e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005096:	b29b      	uxth	r3, r3
 8005098:	8013      	strh	r3, [r2, #0]
 800509a:	e1a2      	b.n	80053e2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	881b      	ldrh	r3, [r3, #0]
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	441a      	add	r2, r3
 80050c0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80050c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050cc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80050d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	65bb      	str	r3, [r7, #88]	; 0x58
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	461a      	mov	r2, r3
 80050e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050e8:	4413      	add	r3, r2
 80050ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	011a      	lsls	r2, r3, #4
 80050f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050fa:	657b      	str	r3, [r7, #84]	; 0x54
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	891b      	ldrh	r3, [r3, #8]
 8005100:	085b      	lsrs	r3, r3, #1
 8005102:	b29b      	uxth	r3, r3
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	b29a      	uxth	r2, r3
 8005108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800510a:	801a      	strh	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	653b      	str	r3, [r7, #80]	; 0x50
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005116:	b29b      	uxth	r3, r3
 8005118:	461a      	mov	r2, r3
 800511a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800511c:	4413      	add	r3, r2
 800511e:	653b      	str	r3, [r7, #80]	; 0x50
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	011a      	lsls	r2, r3, #4
 8005126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005128:	4413      	add	r3, r2
 800512a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800512e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	895b      	ldrh	r3, [r3, #10]
 8005134:	085b      	lsrs	r3, r3, #1
 8005136:	b29b      	uxth	r3, r3
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	b29a      	uxth	r2, r3
 800513c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800513e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	785b      	ldrb	r3, [r3, #1]
 8005144:	2b00      	cmp	r3, #0
 8005146:	f040 8091 	bne.w	800526c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4413      	add	r3, r2
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005158:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800515a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d01b      	beq.n	800519a <USB_ActivateEndpoint+0x47e>
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4413      	add	r3, r2
 800516c:	881b      	ldrh	r3, [r3, #0]
 800516e:	b29b      	uxth	r3, r3
 8005170:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005178:	877b      	strh	r3, [r7, #58]	; 0x3a
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	441a      	add	r2, r3
 8005184:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005186:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800518a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800518e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005196:	b29b      	uxth	r3, r3
 8005198:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	881b      	ldrh	r3, [r3, #0]
 80051a6:	873b      	strh	r3, [r7, #56]	; 0x38
 80051a8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80051aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d01b      	beq.n	80051ea <USB_ActivateEndpoint+0x4ce>
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	881b      	ldrh	r3, [r3, #0]
 80051be:	b29b      	uxth	r3, r3
 80051c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	441a      	add	r2, r3
 80051d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80051d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4413      	add	r3, r2
 80051f4:	881b      	ldrh	r3, [r3, #0]
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005200:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005202:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005204:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005208:	86bb      	strh	r3, [r7, #52]	; 0x34
 800520a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800520c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005210:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	441a      	add	r2, r3
 800521c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800521e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005222:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800522a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800522e:	b29b      	uxth	r3, r3
 8005230:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	4413      	add	r3, r2
 800523c:	881b      	ldrh	r3, [r3, #0]
 800523e:	b29b      	uxth	r3, r3
 8005240:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005244:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005248:	867b      	strh	r3, [r7, #50]	; 0x32
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	441a      	add	r2, r3
 8005254:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005256:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800525a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800525e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005266:	b29b      	uxth	r3, r3
 8005268:	8013      	strh	r3, [r2, #0]
 800526a:	e0ba      	b.n	80053e2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	881b      	ldrh	r3, [r3, #0]
 8005278:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800527c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005280:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d01d      	beq.n	80052c4 <USB_ActivateEndpoint+0x5a8>
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	881b      	ldrh	r3, [r3, #0]
 8005294:	b29b      	uxth	r3, r3
 8005296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800529a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	441a      	add	r2, r3
 80052ac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80052b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	881b      	ldrh	r3, [r3, #0]
 80052d0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80052d4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80052d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d01d      	beq.n	800531c <USB_ActivateEndpoint+0x600>
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	4413      	add	r3, r2
 80052ea:	881b      	ldrh	r3, [r3, #0]
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	441a      	add	r2, r3
 8005304:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005308:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800530c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005310:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005314:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005318:	b29b      	uxth	r3, r3
 800531a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	78db      	ldrb	r3, [r3, #3]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d024      	beq.n	800536e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	4413      	add	r3, r2
 800532e:	881b      	ldrh	r3, [r3, #0]
 8005330:	b29b      	uxth	r3, r3
 8005332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005336:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800533a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800533e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005342:	f083 0320 	eor.w	r3, r3, #32
 8005346:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	441a      	add	r2, r3
 8005354:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005358:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800535c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005360:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005368:	b29b      	uxth	r3, r3
 800536a:	8013      	strh	r3, [r2, #0]
 800536c:	e01d      	b.n	80053aa <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4413      	add	r3, r2
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	b29b      	uxth	r3, r3
 800537c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005380:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005384:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	441a      	add	r2, r3
 8005392:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005396:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800539a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800539e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	881b      	ldrh	r3, [r3, #0]
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	441a      	add	r2, r3
 80053cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80053ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053de:	b29b      	uxth	r3, r3
 80053e0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80053e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	376c      	adds	r7, #108	; 0x6c
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bc80      	pop	{r7}
 80053ee:	4770      	bx	lr

080053f0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b08d      	sub	sp, #52	; 0x34
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	7b1b      	ldrb	r3, [r3, #12]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f040 808e 	bne.w	8005520 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	785b      	ldrb	r3, [r3, #1]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d044      	beq.n	8005496 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4413      	add	r3, r2
 8005416:	881b      	ldrh	r3, [r3, #0]
 8005418:	81bb      	strh	r3, [r7, #12]
 800541a:	89bb      	ldrh	r3, [r7, #12]
 800541c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005420:	2b00      	cmp	r3, #0
 8005422:	d01b      	beq.n	800545c <USB_DeactivateEndpoint+0x6c>
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	881b      	ldrh	r3, [r3, #0]
 8005430:	b29b      	uxth	r3, r3
 8005432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543a:	817b      	strh	r3, [r7, #10]
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	441a      	add	r2, r3
 8005446:	897b      	ldrh	r3, [r7, #10]
 8005448:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800544c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005450:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005454:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005458:	b29b      	uxth	r3, r3
 800545a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	881b      	ldrh	r3, [r3, #0]
 8005468:	b29b      	uxth	r3, r3
 800546a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800546e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005472:	813b      	strh	r3, [r7, #8]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	441a      	add	r2, r3
 800547e:	893b      	ldrh	r3, [r7, #8]
 8005480:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005484:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005488:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800548c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005490:	b29b      	uxth	r3, r3
 8005492:	8013      	strh	r3, [r2, #0]
 8005494:	e192      	b.n	80057bc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	4413      	add	r3, r2
 80054a0:	881b      	ldrh	r3, [r3, #0]
 80054a2:	827b      	strh	r3, [r7, #18]
 80054a4:	8a7b      	ldrh	r3, [r7, #18]
 80054a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d01b      	beq.n	80054e6 <USB_DeactivateEndpoint+0xf6>
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c4:	823b      	strh	r3, [r7, #16]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	441a      	add	r2, r3
 80054d0:	8a3b      	ldrh	r3, [r7, #16]
 80054d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4413      	add	r3, r2
 80054f0:	881b      	ldrh	r3, [r3, #0]
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054fc:	81fb      	strh	r3, [r7, #14]
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	441a      	add	r2, r3
 8005508:	89fb      	ldrh	r3, [r7, #14]
 800550a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800550e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800551a:	b29b      	uxth	r3, r3
 800551c:	8013      	strh	r3, [r2, #0]
 800551e:	e14d      	b.n	80057bc <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	785b      	ldrb	r3, [r3, #1]
 8005524:	2b00      	cmp	r3, #0
 8005526:	f040 80a5 	bne.w	8005674 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4413      	add	r3, r2
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	843b      	strh	r3, [r7, #32]
 8005538:	8c3b      	ldrh	r3, [r7, #32]
 800553a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d01b      	beq.n	800557a <USB_DeactivateEndpoint+0x18a>
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	881b      	ldrh	r3, [r3, #0]
 800554e:	b29b      	uxth	r3, r3
 8005550:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005558:	83fb      	strh	r3, [r7, #30]
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	441a      	add	r2, r3
 8005564:	8bfb      	ldrh	r3, [r7, #30]
 8005566:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800556a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800556e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005576:	b29b      	uxth	r3, r3
 8005578:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4413      	add	r3, r2
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	83bb      	strh	r3, [r7, #28]
 8005588:	8bbb      	ldrh	r3, [r7, #28]
 800558a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558e:	2b00      	cmp	r3, #0
 8005590:	d01b      	beq.n	80055ca <USB_DeactivateEndpoint+0x1da>
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	b29b      	uxth	r3, r3
 80055a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a8:	837b      	strh	r3, [r7, #26]
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	441a      	add	r2, r3
 80055b4:	8b7b      	ldrh	r3, [r7, #26]
 80055b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e0:	833b      	strh	r3, [r7, #24]
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	441a      	add	r2, r3
 80055ec:	8b3b      	ldrh	r3, [r7, #24]
 80055ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055fe:	b29b      	uxth	r3, r3
 8005600:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4413      	add	r3, r2
 800560c:	881b      	ldrh	r3, [r3, #0]
 800560e:	b29b      	uxth	r3, r3
 8005610:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005618:	82fb      	strh	r3, [r7, #22]
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	441a      	add	r2, r3
 8005624:	8afb      	ldrh	r3, [r7, #22]
 8005626:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800562a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800562e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005636:	b29b      	uxth	r3, r3
 8005638:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4413      	add	r3, r2
 8005644:	881b      	ldrh	r3, [r3, #0]
 8005646:	b29b      	uxth	r3, r3
 8005648:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800564c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005650:	82bb      	strh	r3, [r7, #20]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	441a      	add	r2, r3
 800565c:	8abb      	ldrh	r3, [r7, #20]
 800565e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800566a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800566e:	b29b      	uxth	r3, r3
 8005670:	8013      	strh	r3, [r2, #0]
 8005672:	e0a3      	b.n	80057bc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005682:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d01b      	beq.n	80056c4 <USB_DeactivateEndpoint+0x2d4>
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4413      	add	r3, r2
 8005696:	881b      	ldrh	r3, [r3, #0]
 8005698:	b29b      	uxth	r3, r3
 800569a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800569e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	441a      	add	r2, r3
 80056ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80056b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4413      	add	r3, r2
 80056ce:	881b      	ldrh	r3, [r3, #0]
 80056d0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80056d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80056d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d01b      	beq.n	8005714 <USB_DeactivateEndpoint+0x324>
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4413      	add	r3, r2
 80056e6:	881b      	ldrh	r3, [r3, #0]
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f2:	853b      	strh	r3, [r7, #40]	; 0x28
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	441a      	add	r2, r3
 80056fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005700:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005704:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005708:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800570c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005710:	b29b      	uxth	r3, r3
 8005712:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	b29b      	uxth	r3, r3
 8005722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	441a      	add	r2, r3
 8005736:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005738:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800573c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005740:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005748:	b29b      	uxth	r3, r3
 800574a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	881b      	ldrh	r3, [r3, #0]
 8005758:	b29b      	uxth	r3, r3
 800575a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800575e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005762:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	441a      	add	r2, r3
 800576e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005770:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005774:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005778:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800577c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005780:	b29b      	uxth	r3, r3
 8005782:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	881b      	ldrh	r3, [r3, #0]
 8005790:	b29b      	uxth	r3, r3
 8005792:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579a:	847b      	strh	r3, [r7, #34]	; 0x22
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	441a      	add	r2, r3
 80057a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80057a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3734      	adds	r7, #52	; 0x34
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bc80      	pop	{r7}
 80057c6:	4770      	bx	lr

080057c8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b0cc      	sub	sp, #304	; 0x130
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057d6:	6018      	str	r0, [r3, #0]
 80057d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057e0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80057e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	785b      	ldrb	r3, [r3, #1]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	f041 817d 	bne.w	8006aee <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80057f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	699a      	ldr	r2, [r3, #24]
 8005800:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005804:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	429a      	cmp	r2, r3
 800580e:	d908      	bls.n	8005822 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005810:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005814:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005820:	e007      	b.n	8005832 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005826:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005832:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005836:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	7b1b      	ldrb	r3, [r3, #12]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d152      	bne.n	80058e8 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005846:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6959      	ldr	r1, [r3, #20]
 800584e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005852:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	88da      	ldrh	r2, [r3, #6]
 800585a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800585e:	b29b      	uxth	r3, r3
 8005860:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005864:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005868:	6800      	ldr	r0, [r0, #0]
 800586a:	f001 ff23 	bl	80076b4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800586e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005872:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005876:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800587a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800587e:	6812      	ldr	r2, [r2, #0]
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005886:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005890:	b29b      	uxth	r3, r3
 8005892:	4619      	mov	r1, r3
 8005894:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005898:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800589c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80058a0:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80058a4:	6812      	ldr	r2, [r2, #0]
 80058a6:	440a      	add	r2, r1
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	011a      	lsls	r2, r3, #4
 80058b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058bc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4413      	add	r3, r2
 80058c4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80058c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058cc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058dc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	801a      	strh	r2, [r3, #0]
 80058e4:	f001 b8b5 	b.w	8006a52 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80058e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	78db      	ldrb	r3, [r3, #3]
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	f040 84c6 	bne.w	8006286 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80058fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6a1a      	ldr	r2, [r3, #32]
 8005906:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800590a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	429a      	cmp	r2, r3
 8005914:	f240 8443 	bls.w	800619e <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800591c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005926:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4413      	add	r3, r2
 8005932:	881b      	ldrh	r3, [r3, #0]
 8005934:	b29b      	uxth	r3, r3
 8005936:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800593a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005942:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005946:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005950:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	441a      	add	r2, r3
 800595c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005960:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005964:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005968:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800596c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005970:	b29b      	uxth	r3, r3
 8005972:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005978:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	6a1a      	ldr	r2, [r3, #32]
 8005980:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005984:	1ad2      	subs	r2, r2, r3
 8005986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800598a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005992:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005996:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4413      	add	r3, r2
 80059ac:	881b      	ldrh	r3, [r3, #0]
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 823e 	beq.w	8005e36 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80059ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059be:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80059c2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80059c6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80059ca:	6812      	ldr	r2, [r2, #0]
 80059cc:	601a      	str	r2, [r3, #0]
 80059ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	785b      	ldrb	r3, [r3, #1]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f040 809a 	bne.w	8005b14 <USB_EPStartXfer+0x34c>
 80059e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80059ec:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80059f0:	6812      	ldr	r2, [r2, #0]
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	4619      	mov	r1, r3
 8005a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a0e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005a12:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8005a16:	6812      	ldr	r2, [r2, #0]
 8005a18:	440a      	add	r2, r1
 8005a1a:	601a      	str	r2, [r3, #0]
 8005a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	011a      	lsls	r2, r3, #4
 8005a2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4413      	add	r3, r2
 8005a36:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005a3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a3e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d122      	bne.n	8005a92 <USB_EPStartXfer+0x2ca>
 8005a4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a50:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	881b      	ldrh	r3, [r3, #0]
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a64:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	801a      	strh	r2, [r3, #0]
 8005a6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a70:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	881b      	ldrh	r3, [r3, #0]
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a88:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	801a      	strh	r2, [r3, #0]
 8005a90:	e079      	b.n	8005b86 <USB_EPStartXfer+0x3be>
 8005a92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a96:	2b3e      	cmp	r3, #62	; 0x3e
 8005a98:	d81b      	bhi.n	8005ad2 <USB_EPStartXfer+0x30a>
 8005a9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a9e:	085b      	lsrs	r3, r3, #1
 8005aa0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005aa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aa8:	f003 0301 	and.w	r3, r3, #1
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d004      	beq.n	8005aba <USB_EPStartXfer+0x2f2>
 8005ab0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005aba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	029b      	lsls	r3, r3, #10
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ac8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	801a      	strh	r2, [r3, #0]
 8005ad0:	e059      	b.n	8005b86 <USB_EPStartXfer+0x3be>
 8005ad2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ad6:	095b      	lsrs	r3, r3, #5
 8005ad8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005adc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ae0:	f003 031f 	and.w	r3, r3, #31
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d104      	bne.n	8005af2 <USB_EPStartXfer+0x32a>
 8005ae8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005aec:	3b01      	subs	r3, #1
 8005aee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005af2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	029b      	lsls	r3, r3, #10
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b0a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	801a      	strh	r2, [r3, #0]
 8005b12:	e038      	b.n	8005b86 <USB_EPStartXfer+0x3be>
 8005b14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	785b      	ldrb	r3, [r3, #1]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d130      	bne.n	8005b86 <USB_EPStartXfer+0x3be>
 8005b24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	4619      	mov	r1, r3
 8005b36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b3a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005b3e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005b42:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8005b46:	6812      	ldr	r2, [r2, #0]
 8005b48:	440a      	add	r2, r1
 8005b4a:	601a      	str	r2, [r3, #0]
 8005b4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	011a      	lsls	r2, r3, #4
 8005b5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b5e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4413      	add	r3, r2
 8005b66:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005b86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	895b      	ldrh	r3, [r3, #10]
 8005b92:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	6959      	ldr	r1, [r3, #20]
 8005ba2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005bac:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005bb0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005bb4:	6800      	ldr	r0, [r0, #0]
 8005bb6:	f001 fd7d 	bl	80076b4 <USB_WritePMA>
            ep->xfer_buff += len;
 8005bba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	695a      	ldr	r2, [r3, #20]
 8005bc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bca:	441a      	add	r2, r3
 8005bcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005bd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6a1a      	ldr	r2, [r3, #32]
 8005be4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005be8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d90f      	bls.n	8005c14 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8005bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6a1a      	ldr	r2, [r3, #32]
 8005c00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c04:	1ad2      	subs	r2, r2, r3
 8005c06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	621a      	str	r2, [r3, #32]
 8005c12:	e00e      	b.n	8005c32 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8005c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6a1b      	ldr	r3, [r3, #32]
 8005c20:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005c24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	785b      	ldrb	r3, [r3, #1]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f040 809a 	bne.w	8005d78 <USB_EPStartXfer+0x5b0>
 8005c44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c48:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005c4c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c50:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005c54:	6812      	ldr	r2, [r2, #0]
 8005c56:	601a      	str	r2, [r3, #0]
 8005c58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	4619      	mov	r1, r3
 8005c6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c6e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005c72:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c76:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8005c7a:	6812      	ldr	r2, [r2, #0]
 8005c7c:	440a      	add	r2, r1
 8005c7e:	601a      	str	r2, [r3, #0]
 8005c80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	011a      	lsls	r2, r3, #4
 8005c8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c92:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005c9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ca2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005ca6:	601a      	str	r2, [r3, #0]
 8005ca8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d122      	bne.n	8005cf6 <USB_EPStartXfer+0x52e>
 8005cb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cb4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	801a      	strh	r2, [r3, #0]
 8005cd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cd4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	881b      	ldrh	r3, [r3, #0]
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ce2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	801a      	strh	r2, [r3, #0]
 8005cf4:	e083      	b.n	8005dfe <USB_EPStartXfer+0x636>
 8005cf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cfa:	2b3e      	cmp	r3, #62	; 0x3e
 8005cfc:	d81b      	bhi.n	8005d36 <USB_EPStartXfer+0x56e>
 8005cfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d02:	085b      	lsrs	r3, r3, #1
 8005d04:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005d08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d004      	beq.n	8005d1e <USB_EPStartXfer+0x556>
 8005d14:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005d18:	3301      	adds	r3, #1
 8005d1a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005d1e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	029b      	lsls	r3, r3, #10
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d2c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	801a      	strh	r2, [r3, #0]
 8005d34:	e063      	b.n	8005dfe <USB_EPStartXfer+0x636>
 8005d36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d3a:	095b      	lsrs	r3, r3, #5
 8005d3c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005d40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d44:	f003 031f 	and.w	r3, r3, #31
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d104      	bne.n	8005d56 <USB_EPStartXfer+0x58e>
 8005d4c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005d50:	3b01      	subs	r3, #1
 8005d52:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005d56:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	029b      	lsls	r3, r3, #10
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d6e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	801a      	strh	r2, [r3, #0]
 8005d76:	e042      	b.n	8005dfe <USB_EPStartXfer+0x636>
 8005d78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	785b      	ldrb	r3, [r3, #1]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d13a      	bne.n	8005dfe <USB_EPStartXfer+0x636>
 8005d88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d8c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005d90:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005d94:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005d98:	6812      	ldr	r2, [r2, #0]
 8005d9a:	601a      	str	r2, [r3, #0]
 8005d9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005da0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	4619      	mov	r1, r3
 8005dae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005db2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005db6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005dba:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8005dbe:	6812      	ldr	r2, [r2, #0]
 8005dc0:	440a      	add	r2, r1
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	011a      	lsls	r2, r3, #4
 8005dd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dd6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005de2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005de6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005dea:	601a      	str	r2, [r3, #0]
 8005dec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005df6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005dfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	891b      	ldrh	r3, [r3, #8]
 8005e0a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6959      	ldr	r1, [r3, #20]
 8005e1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e24:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005e28:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005e2c:	6800      	ldr	r0, [r0, #0]
 8005e2e:	f001 fc41 	bl	80076b4 <USB_WritePMA>
 8005e32:	f000 be0e 	b.w	8006a52 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	785b      	ldrb	r3, [r3, #1]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d16d      	bne.n	8005f22 <USB_EPStartXfer+0x75a>
 8005e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	461a      	mov	r2, r3
 8005e64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e66:	4413      	add	r3, r2
 8005e68:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	011a      	lsls	r2, r3, #4
 8005e78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e80:	647b      	str	r3, [r7, #68]	; 0x44
 8005e82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d112      	bne.n	8005eb0 <USB_EPStartXfer+0x6e8>
 8005e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e8c:	881b      	ldrh	r3, [r3, #0]
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e98:	801a      	strh	r2, [r3, #0]
 8005e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e9c:	881b      	ldrh	r3, [r3, #0]
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ea4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eac:	801a      	strh	r2, [r3, #0]
 8005eae:	e063      	b.n	8005f78 <USB_EPStartXfer+0x7b0>
 8005eb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eb4:	2b3e      	cmp	r3, #62	; 0x3e
 8005eb6:	d817      	bhi.n	8005ee8 <USB_EPStartXfer+0x720>
 8005eb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ebc:	085b      	lsrs	r3, r3, #1
 8005ebe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005ec2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d004      	beq.n	8005ed8 <USB_EPStartXfer+0x710>
 8005ece:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005ed8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	029b      	lsls	r3, r3, #10
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ee4:	801a      	strh	r2, [r3, #0]
 8005ee6:	e047      	b.n	8005f78 <USB_EPStartXfer+0x7b0>
 8005ee8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eec:	095b      	lsrs	r3, r3, #5
 8005eee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005ef2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ef6:	f003 031f 	and.w	r3, r3, #31
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d104      	bne.n	8005f08 <USB_EPStartXfer+0x740>
 8005efe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005f02:	3b01      	subs	r3, #1
 8005f04:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005f08:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	029b      	lsls	r3, r3, #10
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f1e:	801a      	strh	r2, [r3, #0]
 8005f20:	e02a      	b.n	8005f78 <USB_EPStartXfer+0x7b0>
 8005f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	785b      	ldrb	r3, [r3, #1]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d122      	bne.n	8005f78 <USB_EPStartXfer+0x7b0>
 8005f32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	653b      	str	r3, [r7, #80]	; 0x50
 8005f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	461a      	mov	r2, r3
 8005f50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f52:	4413      	add	r3, r2
 8005f54:	653b      	str	r3, [r7, #80]	; 0x50
 8005f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	011a      	lsls	r2, r3, #4
 8005f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f66:	4413      	add	r3, r2
 8005f68:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f76:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005f78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	891b      	ldrh	r3, [r3, #8]
 8005f84:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	6959      	ldr	r1, [r3, #20]
 8005f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005f9e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005fa2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005fa6:	6800      	ldr	r0, [r0, #0]
 8005fa8:	f001 fb84 	bl	80076b4 <USB_WritePMA>
            ep->xfer_buff += len;
 8005fac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	695a      	ldr	r2, [r3, #20]
 8005fb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fbc:	441a      	add	r2, r3
 8005fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6a1a      	ldr	r2, [r3, #32]
 8005fd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d90f      	bls.n	8006006 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8005fe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6a1a      	ldr	r2, [r3, #32]
 8005ff2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ff6:	1ad2      	subs	r2, r2, r3
 8005ff8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ffc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	621a      	str	r2, [r3, #32]
 8006004:	e00e      	b.n	8006024 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8006006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800600a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800601a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2200      	movs	r2, #0
 8006022:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006028:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	643b      	str	r3, [r7, #64]	; 0x40
 8006030:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006034:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	785b      	ldrb	r3, [r3, #1]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d16d      	bne.n	800611c <USB_EPStartXfer+0x954>
 8006040:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006044:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	63bb      	str	r3, [r7, #56]	; 0x38
 800604c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006050:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800605a:	b29b      	uxth	r3, r3
 800605c:	461a      	mov	r2, r3
 800605e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006060:	4413      	add	r3, r2
 8006062:	63bb      	str	r3, [r7, #56]	; 0x38
 8006064:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006068:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	011a      	lsls	r2, r3, #4
 8006072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006074:	4413      	add	r3, r2
 8006076:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800607a:	637b      	str	r3, [r7, #52]	; 0x34
 800607c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006080:	2b00      	cmp	r3, #0
 8006082:	d112      	bne.n	80060aa <USB_EPStartXfer+0x8e2>
 8006084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006086:	881b      	ldrh	r3, [r3, #0]
 8006088:	b29b      	uxth	r3, r3
 800608a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800608e:	b29a      	uxth	r2, r3
 8006090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006092:	801a      	strh	r2, [r3, #0]
 8006094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006096:	881b      	ldrh	r3, [r3, #0]
 8006098:	b29b      	uxth	r3, r3
 800609a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800609e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a6:	801a      	strh	r2, [r3, #0]
 80060a8:	e05d      	b.n	8006166 <USB_EPStartXfer+0x99e>
 80060aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060ae:	2b3e      	cmp	r3, #62	; 0x3e
 80060b0:	d817      	bhi.n	80060e2 <USB_EPStartXfer+0x91a>
 80060b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060b6:	085b      	lsrs	r3, r3, #1
 80060b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80060bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060c0:	f003 0301 	and.w	r3, r3, #1
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d004      	beq.n	80060d2 <USB_EPStartXfer+0x90a>
 80060c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060cc:	3301      	adds	r3, #1
 80060ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80060d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	029b      	lsls	r3, r3, #10
 80060da:	b29a      	uxth	r2, r3
 80060dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060de:	801a      	strh	r2, [r3, #0]
 80060e0:	e041      	b.n	8006166 <USB_EPStartXfer+0x99e>
 80060e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060e6:	095b      	lsrs	r3, r3, #5
 80060e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80060ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060f0:	f003 031f 	and.w	r3, r3, #31
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d104      	bne.n	8006102 <USB_EPStartXfer+0x93a>
 80060f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060fc:	3b01      	subs	r3, #1
 80060fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006102:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006106:	b29b      	uxth	r3, r3
 8006108:	029b      	lsls	r3, r3, #10
 800610a:	b29b      	uxth	r3, r3
 800610c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006114:	b29a      	uxth	r2, r3
 8006116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006118:	801a      	strh	r2, [r3, #0]
 800611a:	e024      	b.n	8006166 <USB_EPStartXfer+0x99e>
 800611c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006120:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	785b      	ldrb	r3, [r3, #1]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d11c      	bne.n	8006166 <USB_EPStartXfer+0x99e>
 800612c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006130:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800613a:	b29b      	uxth	r3, r3
 800613c:	461a      	mov	r2, r3
 800613e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006140:	4413      	add	r3, r2
 8006142:	643b      	str	r3, [r7, #64]	; 0x40
 8006144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006148:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	011a      	lsls	r2, r3, #4
 8006152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006154:	4413      	add	r3, r2
 8006156:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800615a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800615c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006160:	b29a      	uxth	r2, r3
 8006162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006164:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800616a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	895b      	ldrh	r3, [r3, #10]
 8006172:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006176:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800617a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6959      	ldr	r1, [r3, #20]
 8006182:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006186:	b29b      	uxth	r3, r3
 8006188:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800618c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006190:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006194:	6800      	ldr	r0, [r0, #0]
 8006196:	f001 fa8d 	bl	80076b4 <USB_WritePMA>
 800619a:	f000 bc5a 	b.w	8006a52 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800619e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80061ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	4413      	add	r3, r2
 80061c8:	881b      	ldrh	r3, [r3, #0]
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80061d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80061d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	441a      	add	r2, r3
 80061f2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80061f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006206:	b29b      	uxth	r3, r3
 8006208:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800620a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800620e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006216:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800621a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006224:	b29b      	uxth	r3, r3
 8006226:	461a      	mov	r2, r3
 8006228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800622a:	4413      	add	r3, r2
 800622c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800622e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006232:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	011a      	lsls	r2, r3, #4
 800623c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800623e:	4413      	add	r3, r2
 8006240:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006244:	65bb      	str	r3, [r7, #88]	; 0x58
 8006246:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800624a:	b29a      	uxth	r2, r3
 800624c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800624e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006250:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006254:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	891b      	ldrh	r3, [r3, #8]
 800625c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006260:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006264:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	6959      	ldr	r1, [r3, #20]
 800626c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006270:	b29b      	uxth	r3, r3
 8006272:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006276:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800627a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800627e:	6800      	ldr	r0, [r0, #0]
 8006280:	f001 fa18 	bl	80076b4 <USB_WritePMA>
 8006284:	e3e5      	b.n	8006a52 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800628a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006294:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4413      	add	r3, r2
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ac:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80062b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	441a      	add	r2, r3
 80062ca:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80062ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062d6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80062da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062de:	b29b      	uxth	r3, r3
 80062e0:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80062e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6a1a      	ldr	r2, [r3, #32]
 80062ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062f2:	1ad2      	subs	r2, r2, r3
 80062f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006300:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006304:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800630e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	4413      	add	r3, r2
 800631a:	881b      	ldrh	r3, [r3, #0]
 800631c:	b29b      	uxth	r3, r3
 800631e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006322:	2b00      	cmp	r3, #0
 8006324:	f000 81bc 	beq.w	80066a0 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006328:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800632c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800633a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	785b      	ldrb	r3, [r3, #1]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d16d      	bne.n	8006422 <USB_EPStartXfer+0xc5a>
 8006346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800634a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	67bb      	str	r3, [r7, #120]	; 0x78
 8006352:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006356:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006360:	b29b      	uxth	r3, r3
 8006362:	461a      	mov	r2, r3
 8006364:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006366:	4413      	add	r3, r2
 8006368:	67bb      	str	r3, [r7, #120]	; 0x78
 800636a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800636e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	011a      	lsls	r2, r3, #4
 8006378:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800637a:	4413      	add	r3, r2
 800637c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006380:	677b      	str	r3, [r7, #116]	; 0x74
 8006382:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006386:	2b00      	cmp	r3, #0
 8006388:	d112      	bne.n	80063b0 <USB_EPStartXfer+0xbe8>
 800638a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800638c:	881b      	ldrh	r3, [r3, #0]
 800638e:	b29b      	uxth	r3, r3
 8006390:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006394:	b29a      	uxth	r2, r3
 8006396:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006398:	801a      	strh	r2, [r3, #0]
 800639a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800639c:	881b      	ldrh	r3, [r3, #0]
 800639e:	b29b      	uxth	r3, r3
 80063a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063ac:	801a      	strh	r2, [r3, #0]
 80063ae:	e060      	b.n	8006472 <USB_EPStartXfer+0xcaa>
 80063b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063b4:	2b3e      	cmp	r3, #62	; 0x3e
 80063b6:	d817      	bhi.n	80063e8 <USB_EPStartXfer+0xc20>
 80063b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063bc:	085b      	lsrs	r3, r3, #1
 80063be:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80063c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063c6:	f003 0301 	and.w	r3, r3, #1
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d004      	beq.n	80063d8 <USB_EPStartXfer+0xc10>
 80063ce:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80063d2:	3301      	adds	r3, #1
 80063d4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80063d8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80063dc:	b29b      	uxth	r3, r3
 80063de:	029b      	lsls	r3, r3, #10
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063e4:	801a      	strh	r2, [r3, #0]
 80063e6:	e044      	b.n	8006472 <USB_EPStartXfer+0xcaa>
 80063e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063ec:	095b      	lsrs	r3, r3, #5
 80063ee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80063f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063f6:	f003 031f 	and.w	r3, r3, #31
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d104      	bne.n	8006408 <USB_EPStartXfer+0xc40>
 80063fe:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006402:	3b01      	subs	r3, #1
 8006404:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006408:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800640c:	b29b      	uxth	r3, r3
 800640e:	029b      	lsls	r3, r3, #10
 8006410:	b29b      	uxth	r3, r3
 8006412:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006416:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800641a:	b29a      	uxth	r2, r3
 800641c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800641e:	801a      	strh	r2, [r3, #0]
 8006420:	e027      	b.n	8006472 <USB_EPStartXfer+0xcaa>
 8006422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006426:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	785b      	ldrb	r3, [r3, #1]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d11f      	bne.n	8006472 <USB_EPStartXfer+0xcaa>
 8006432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006436:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006440:	b29b      	uxth	r3, r3
 8006442:	461a      	mov	r2, r3
 8006444:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006448:	4413      	add	r3, r2
 800644a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800644e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006452:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	011a      	lsls	r2, r3, #4
 800645c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006460:	4413      	add	r3, r2
 8006462:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006466:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006468:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800646c:	b29a      	uxth	r2, r3
 800646e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006470:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006472:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006476:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	895b      	ldrh	r3, [r3, #10]
 800647e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006482:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006486:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	6959      	ldr	r1, [r3, #20]
 800648e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006492:	b29b      	uxth	r3, r3
 8006494:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006498:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800649c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80064a0:	6800      	ldr	r0, [r0, #0]
 80064a2:	f001 f907 	bl	80076b4 <USB_WritePMA>
          ep->xfer_buff += len;
 80064a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	695a      	ldr	r2, [r3, #20]
 80064b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064b6:	441a      	add	r2, r3
 80064b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80064c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	6a1a      	ldr	r2, [r3, #32]
 80064d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d90f      	bls.n	8006500 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80064e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	6a1a      	ldr	r2, [r3, #32]
 80064ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064f0:	1ad2      	subs	r2, r2, r3
 80064f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	621a      	str	r2, [r3, #32]
 80064fe:	e00e      	b.n	800651e <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8006500:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006504:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	6a1b      	ldr	r3, [r3, #32]
 800650c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006514:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2200      	movs	r2, #0
 800651c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800651e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006522:	2b00      	cmp	r3, #0
 8006524:	f000 8295 	beq.w	8006a52 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800652c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	785b      	ldrb	r3, [r3, #1]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d16d      	bne.n	8006614 <USB_EPStartXfer+0xe4c>
 8006538:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800653c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	66bb      	str	r3, [r7, #104]	; 0x68
 8006544:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006548:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006552:	b29b      	uxth	r3, r3
 8006554:	461a      	mov	r2, r3
 8006556:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006558:	4413      	add	r3, r2
 800655a:	66bb      	str	r3, [r7, #104]	; 0x68
 800655c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006560:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	011a      	lsls	r2, r3, #4
 800656a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800656c:	4413      	add	r3, r2
 800656e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006572:	667b      	str	r3, [r7, #100]	; 0x64
 8006574:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006578:	2b00      	cmp	r3, #0
 800657a:	d112      	bne.n	80065a2 <USB_EPStartXfer+0xdda>
 800657c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800657e:	881b      	ldrh	r3, [r3, #0]
 8006580:	b29b      	uxth	r3, r3
 8006582:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006586:	b29a      	uxth	r2, r3
 8006588:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800658a:	801a      	strh	r2, [r3, #0]
 800658c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	b29b      	uxth	r3, r3
 8006592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800659a:	b29a      	uxth	r2, r3
 800659c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800659e:	801a      	strh	r2, [r3, #0]
 80065a0:	e063      	b.n	800666a <USB_EPStartXfer+0xea2>
 80065a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065a6:	2b3e      	cmp	r3, #62	; 0x3e
 80065a8:	d817      	bhi.n	80065da <USB_EPStartXfer+0xe12>
 80065aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065ae:	085b      	lsrs	r3, r3, #1
 80065b0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80065b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065b8:	f003 0301 	and.w	r3, r3, #1
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d004      	beq.n	80065ca <USB_EPStartXfer+0xe02>
 80065c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065c4:	3301      	adds	r3, #1
 80065c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80065ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	029b      	lsls	r3, r3, #10
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065d6:	801a      	strh	r2, [r3, #0]
 80065d8:	e047      	b.n	800666a <USB_EPStartXfer+0xea2>
 80065da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065de:	095b      	lsrs	r3, r3, #5
 80065e0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80065e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065e8:	f003 031f 	and.w	r3, r3, #31
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d104      	bne.n	80065fa <USB_EPStartXfer+0xe32>
 80065f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065f4:	3b01      	subs	r3, #1
 80065f6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80065fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065fe:	b29b      	uxth	r3, r3
 8006600:	029b      	lsls	r3, r3, #10
 8006602:	b29b      	uxth	r3, r3
 8006604:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006608:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800660c:	b29a      	uxth	r2, r3
 800660e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006610:	801a      	strh	r2, [r3, #0]
 8006612:	e02a      	b.n	800666a <USB_EPStartXfer+0xea2>
 8006614:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006618:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	785b      	ldrb	r3, [r3, #1]
 8006620:	2b01      	cmp	r3, #1
 8006622:	d122      	bne.n	800666a <USB_EPStartXfer+0xea2>
 8006624:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006628:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	673b      	str	r3, [r7, #112]	; 0x70
 8006630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006634:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800663e:	b29b      	uxth	r3, r3
 8006640:	461a      	mov	r2, r3
 8006642:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006644:	4413      	add	r3, r2
 8006646:	673b      	str	r3, [r7, #112]	; 0x70
 8006648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800664c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	011a      	lsls	r2, r3, #4
 8006656:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006658:	4413      	add	r3, r2
 800665a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800665e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006660:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006664:	b29a      	uxth	r2, r3
 8006666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006668:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800666a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800666e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	891b      	ldrh	r3, [r3, #8]
 8006676:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800667a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800667e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6959      	ldr	r1, [r3, #20]
 8006686:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800668a:	b29b      	uxth	r3, r3
 800668c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006690:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006694:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006698:	6800      	ldr	r0, [r0, #0]
 800669a:	f001 f80b 	bl	80076b4 <USB_WritePMA>
 800669e:	e1d8      	b.n	8006a52 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80066a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	785b      	ldrb	r3, [r3, #1]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d178      	bne.n	80067a2 <USB_EPStartXfer+0xfda>
 80066b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80066be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	461a      	mov	r2, r3
 80066d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066d4:	4413      	add	r3, r2
 80066d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80066da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	011a      	lsls	r2, r3, #4
 80066e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066ec:	4413      	add	r3, r2
 80066ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80066f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d116      	bne.n	800672c <USB_EPStartXfer+0xf64>
 80066fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006702:	881b      	ldrh	r3, [r3, #0]
 8006704:	b29b      	uxth	r3, r3
 8006706:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800670a:	b29a      	uxth	r2, r3
 800670c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006710:	801a      	strh	r2, [r3, #0]
 8006712:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	b29b      	uxth	r3, r3
 800671a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800671e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006722:	b29a      	uxth	r2, r3
 8006724:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006728:	801a      	strh	r2, [r3, #0]
 800672a:	e06b      	b.n	8006804 <USB_EPStartXfer+0x103c>
 800672c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006730:	2b3e      	cmp	r3, #62	; 0x3e
 8006732:	d818      	bhi.n	8006766 <USB_EPStartXfer+0xf9e>
 8006734:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006738:	085b      	lsrs	r3, r3, #1
 800673a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800673e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	2b00      	cmp	r3, #0
 8006748:	d004      	beq.n	8006754 <USB_EPStartXfer+0xf8c>
 800674a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800674e:	3301      	adds	r3, #1
 8006750:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006754:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006758:	b29b      	uxth	r3, r3
 800675a:	029b      	lsls	r3, r3, #10
 800675c:	b29a      	uxth	r2, r3
 800675e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006762:	801a      	strh	r2, [r3, #0]
 8006764:	e04e      	b.n	8006804 <USB_EPStartXfer+0x103c>
 8006766:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800676a:	095b      	lsrs	r3, r3, #5
 800676c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006770:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006774:	f003 031f 	and.w	r3, r3, #31
 8006778:	2b00      	cmp	r3, #0
 800677a:	d104      	bne.n	8006786 <USB_EPStartXfer+0xfbe>
 800677c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006780:	3b01      	subs	r3, #1
 8006782:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006786:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800678a:	b29b      	uxth	r3, r3
 800678c:	029b      	lsls	r3, r3, #10
 800678e:	b29b      	uxth	r3, r3
 8006790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006798:	b29a      	uxth	r2, r3
 800679a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800679e:	801a      	strh	r2, [r3, #0]
 80067a0:	e030      	b.n	8006804 <USB_EPStartXfer+0x103c>
 80067a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	785b      	ldrb	r3, [r3, #1]
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d128      	bne.n	8006804 <USB_EPStartXfer+0x103c>
 80067b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80067c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	461a      	mov	r2, r3
 80067d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80067d6:	4413      	add	r3, r2
 80067d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80067dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	011a      	lsls	r2, r3, #4
 80067ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80067ee:	4413      	add	r3, r2
 80067f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80067f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006802:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006804:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006808:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	891b      	ldrh	r3, [r3, #8]
 8006810:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006818:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6959      	ldr	r1, [r3, #20]
 8006820:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006824:	b29b      	uxth	r3, r3
 8006826:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800682a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800682e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006832:	6800      	ldr	r0, [r0, #0]
 8006834:	f000 ff3e 	bl	80076b4 <USB_WritePMA>
          ep->xfer_buff += len;
 8006838:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800683c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	695a      	ldr	r2, [r3, #20]
 8006844:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006848:	441a      	add	r2, r3
 800684a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800684e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800685a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6a1a      	ldr	r2, [r3, #32]
 8006862:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006866:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	429a      	cmp	r2, r3
 8006870:	d90f      	bls.n	8006892 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8006872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006876:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	6a1a      	ldr	r2, [r3, #32]
 800687e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006882:	1ad2      	subs	r2, r2, r3
 8006884:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006888:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	621a      	str	r2, [r3, #32]
 8006890:	e00e      	b.n	80068b0 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8006892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006896:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80068a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2200      	movs	r2, #0
 80068ae:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80068b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f000 80cc 	beq.w	8006a52 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80068ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80068c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	785b      	ldrb	r3, [r3, #1]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d178      	bne.n	80069ca <USB_EPStartXfer+0x1202>
 80068d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80068e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	461a      	mov	r2, r3
 80068f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068fc:	4413      	add	r3, r2
 80068fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006906:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	011a      	lsls	r2, r3, #4
 8006910:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006914:	4413      	add	r3, r2
 8006916:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800691a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800691e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006922:	2b00      	cmp	r3, #0
 8006924:	d116      	bne.n	8006954 <USB_EPStartXfer+0x118c>
 8006926:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800692a:	881b      	ldrh	r3, [r3, #0]
 800692c:	b29b      	uxth	r3, r3
 800692e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006932:	b29a      	uxth	r2, r3
 8006934:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006938:	801a      	strh	r2, [r3, #0]
 800693a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800693e:	881b      	ldrh	r3, [r3, #0]
 8006940:	b29b      	uxth	r3, r3
 8006942:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006946:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800694a:	b29a      	uxth	r2, r3
 800694c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006950:	801a      	strh	r2, [r3, #0]
 8006952:	e064      	b.n	8006a1e <USB_EPStartXfer+0x1256>
 8006954:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006958:	2b3e      	cmp	r3, #62	; 0x3e
 800695a:	d818      	bhi.n	800698e <USB_EPStartXfer+0x11c6>
 800695c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006960:	085b      	lsrs	r3, r3, #1
 8006962:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006966:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	d004      	beq.n	800697c <USB_EPStartXfer+0x11b4>
 8006972:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006976:	3301      	adds	r3, #1
 8006978:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800697c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006980:	b29b      	uxth	r3, r3
 8006982:	029b      	lsls	r3, r3, #10
 8006984:	b29a      	uxth	r2, r3
 8006986:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800698a:	801a      	strh	r2, [r3, #0]
 800698c:	e047      	b.n	8006a1e <USB_EPStartXfer+0x1256>
 800698e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006992:	095b      	lsrs	r3, r3, #5
 8006994:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006998:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800699c:	f003 031f 	and.w	r3, r3, #31
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d104      	bne.n	80069ae <USB_EPStartXfer+0x11e6>
 80069a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069a8:	3b01      	subs	r3, #1
 80069aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80069ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	029b      	lsls	r3, r3, #10
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069c6:	801a      	strh	r2, [r3, #0]
 80069c8:	e029      	b.n	8006a1e <USB_EPStartXfer+0x1256>
 80069ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	785b      	ldrb	r3, [r3, #1]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d121      	bne.n	8006a1e <USB_EPStartXfer+0x1256>
 80069da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	461a      	mov	r2, r3
 80069ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80069f0:	4413      	add	r3, r2
 80069f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80069f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	011a      	lsls	r2, r3, #4
 8006a04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006a08:	4413      	add	r3, r2
 8006a0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006a12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a1c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006a1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	895b      	ldrh	r3, [r3, #10]
 8006a2a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6959      	ldr	r1, [r3, #20]
 8006a3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006a44:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006a48:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006a4c:	6800      	ldr	r0, [r0, #0]
 8006a4e:	f000 fe31 	bl	80076b4 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006a52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4413      	add	r3, r2
 8006a6c:	881b      	ldrh	r3, [r3, #0]
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a74:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006a78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a80:	8013      	strh	r3, [r2, #0]
 8006a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a86:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006a8a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a8e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006a92:	8812      	ldrh	r2, [r2, #0]
 8006a94:	f082 0210 	eor.w	r2, r2, #16
 8006a98:	801a      	strh	r2, [r3, #0]
 8006a9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a9e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006aa2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006aa6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006aaa:	8812      	ldrh	r2, [r2, #0]
 8006aac:	f082 0220 	eor.w	r2, r2, #32
 8006ab0:	801a      	strh	r2, [r3, #0]
 8006ab2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ac0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	441a      	add	r2, r3
 8006acc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ad0:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006ad4:	881b      	ldrh	r3, [r3, #0]
 8006ad6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ada:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	8013      	strh	r3, [r2, #0]
 8006aea:	f000 bc9f 	b.w	800742c <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006aee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006af2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	7b1b      	ldrb	r3, [r3, #12]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f040 80ae 	bne.w	8006c5c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006b00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	699a      	ldr	r2, [r3, #24]
 8006b0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d917      	bls.n	8006b4c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8006b1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006b2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	699a      	ldr	r2, [r3, #24]
 8006b38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b3c:	1ad2      	subs	r2, r2, r3
 8006b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	619a      	str	r2, [r3, #24]
 8006b4a:	e00e      	b.n	8006b6a <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8006b4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006b5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2200      	movs	r2, #0
 8006b68:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	461a      	mov	r2, r3
 8006b8a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006b8e:	4413      	add	r3, r2
 8006b90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	011a      	lsls	r2, r3, #4
 8006ba2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006bac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006bb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d116      	bne.n	8006be6 <USB_EPStartXfer+0x141e>
 8006bb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bbc:	881b      	ldrh	r3, [r3, #0]
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bca:	801a      	strh	r2, [r3, #0]
 8006bcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006bd0:	881b      	ldrh	r3, [r3, #0]
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006be2:	801a      	strh	r2, [r3, #0]
 8006be4:	e3e8      	b.n	80073b8 <USB_EPStartXfer+0x1bf0>
 8006be6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bea:	2b3e      	cmp	r3, #62	; 0x3e
 8006bec:	d818      	bhi.n	8006c20 <USB_EPStartXfer+0x1458>
 8006bee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bf2:	085b      	lsrs	r3, r3, #1
 8006bf4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006bf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bfc:	f003 0301 	and.w	r3, r3, #1
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d004      	beq.n	8006c0e <USB_EPStartXfer+0x1446>
 8006c04:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c08:	3301      	adds	r3, #1
 8006c0a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006c0e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	029b      	lsls	r3, r3, #10
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c1c:	801a      	strh	r2, [r3, #0]
 8006c1e:	e3cb      	b.n	80073b8 <USB_EPStartXfer+0x1bf0>
 8006c20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c24:	095b      	lsrs	r3, r3, #5
 8006c26:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006c2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c2e:	f003 031f 	and.w	r3, r3, #31
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d104      	bne.n	8006c40 <USB_EPStartXfer+0x1478>
 8006c36:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006c40:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	029b      	lsls	r3, r3, #10
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c58:	801a      	strh	r2, [r3, #0]
 8006c5a:	e3ad      	b.n	80073b8 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	78db      	ldrb	r3, [r3, #3]
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	f040 8200 	bne.w	800706e <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	785b      	ldrb	r3, [r3, #1]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f040 8091 	bne.w	8006da2 <USB_EPStartXfer+0x15da>
 8006c80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	011a      	lsls	r2, r3, #4
 8006cb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006cc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006cc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d116      	bne.n	8006d04 <USB_EPStartXfer+0x153c>
 8006cd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ce8:	801a      	strh	r2, [r3, #0]
 8006cea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cee:	881b      	ldrh	r3, [r3, #0]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d00:	801a      	strh	r2, [r3, #0]
 8006d02:	e083      	b.n	8006e0c <USB_EPStartXfer+0x1644>
 8006d04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	2b3e      	cmp	r3, #62	; 0x3e
 8006d12:	d820      	bhi.n	8006d56 <USB_EPStartXfer+0x158e>
 8006d14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	085b      	lsrs	r3, r3, #1
 8006d22:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006d26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	f003 0301 	and.w	r3, r3, #1
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d004      	beq.n	8006d44 <USB_EPStartXfer+0x157c>
 8006d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d3e:	3301      	adds	r3, #1
 8006d40:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	029b      	lsls	r3, r3, #10
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d52:	801a      	strh	r2, [r3, #0]
 8006d54:	e05a      	b.n	8006e0c <USB_EPStartXfer+0x1644>
 8006d56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	095b      	lsrs	r3, r3, #5
 8006d64:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	f003 031f 	and.w	r3, r3, #31
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d104      	bne.n	8006d86 <USB_EPStartXfer+0x15be>
 8006d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d80:	3b01      	subs	r3, #1
 8006d82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	029b      	lsls	r3, r3, #10
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d9e:	801a      	strh	r2, [r3, #0]
 8006da0:	e034      	b.n	8006e0c <USB_EPStartXfer+0x1644>
 8006da2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006da6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	785b      	ldrb	r3, [r3, #1]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d12c      	bne.n	8006e0c <USB_EPStartXfer+0x1644>
 8006db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006db6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006dc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dd6:	4413      	add	r3, r2
 8006dd8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006ddc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006de0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	011a      	lsls	r2, r3, #4
 8006dea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dee:	4413      	add	r3, r2
 8006df0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006df4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006df8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006e0a:	801a      	strh	r2, [r3, #0]
 8006e0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006e1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	785b      	ldrb	r3, [r3, #1]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f040 8091 	bne.w	8006f4e <USB_EPStartXfer+0x1786>
 8006e2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006e50:	4413      	add	r3, r2
 8006e52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006e56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	011a      	lsls	r2, r3, #4
 8006e64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006e68:	4413      	add	r3, r2
 8006e6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d116      	bne.n	8006eb0 <USB_EPStartXfer+0x16e8>
 8006e82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e86:	881b      	ldrh	r3, [r3, #0]
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e94:	801a      	strh	r2, [r3, #0]
 8006e96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e9a:	881b      	ldrh	r3, [r3, #0]
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ea2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006eac:	801a      	strh	r2, [r3, #0]
 8006eae:	e07c      	b.n	8006faa <USB_EPStartXfer+0x17e2>
 8006eb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	2b3e      	cmp	r3, #62	; 0x3e
 8006ebe:	d820      	bhi.n	8006f02 <USB_EPStartXfer+0x173a>
 8006ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ec4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	085b      	lsrs	r3, r3, #1
 8006ece:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ed2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d004      	beq.n	8006ef0 <USB_EPStartXfer+0x1728>
 8006ee6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006eea:	3301      	adds	r3, #1
 8006eec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006ef0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	029b      	lsls	r3, r3, #10
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006efe:	801a      	strh	r2, [r3, #0]
 8006f00:	e053      	b.n	8006faa <USB_EPStartXfer+0x17e2>
 8006f02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	095b      	lsrs	r3, r3, #5
 8006f10:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006f14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	f003 031f 	and.w	r3, r3, #31
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d104      	bne.n	8006f32 <USB_EPStartXfer+0x176a>
 8006f28:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006f2c:	3b01      	subs	r3, #1
 8006f2e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006f32:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	029b      	lsls	r3, r3, #10
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f4a:	801a      	strh	r2, [r3, #0]
 8006f4c:	e02d      	b.n	8006faa <USB_EPStartXfer+0x17e2>
 8006f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	785b      	ldrb	r3, [r3, #1]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d125      	bne.n	8006faa <USB_EPStartXfer+0x17e2>
 8006f5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	461a      	mov	r2, r3
 8006f70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006f74:	4413      	add	r3, r2
 8006f76:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	011a      	lsls	r2, r3, #4
 8006f88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006f92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006fa8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006faa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	69db      	ldr	r3, [r3, #28]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f000 81fe 	beq.w	80073b8 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006fbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4413      	add	r3, r2
 8006fd6:	881b      	ldrh	r3, [r3, #0]
 8006fd8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006fdc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006fe0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d005      	beq.n	8006ff4 <USB_EPStartXfer+0x182c>
 8006fe8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10d      	bne.n	8007010 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006ff4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006ff8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f040 81db 	bne.w	80073b8 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007002:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800700a:	2b00      	cmp	r3, #0
 800700c:	f040 81d4 	bne.w	80073b8 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007014:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800701e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4413      	add	r3, r2
 800702a:	881b      	ldrh	r3, [r3, #0]
 800702c:	b29b      	uxth	r3, r3
 800702e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007036:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800703a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800703e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007048:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	441a      	add	r2, r3
 8007054:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8007058:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800705c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007060:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007064:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007068:	b29b      	uxth	r3, r3
 800706a:	8013      	strh	r3, [r2, #0]
 800706c:	e1a4      	b.n	80073b8 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800706e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007072:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	78db      	ldrb	r3, [r3, #3]
 800707a:	2b01      	cmp	r3, #1
 800707c:	f040 819a 	bne.w	80073b4 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007080:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007084:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	699a      	ldr	r2, [r3, #24]
 800708c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007090:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	429a      	cmp	r2, r3
 800709a:	d917      	bls.n	80070cc <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800709c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80070ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	699a      	ldr	r2, [r3, #24]
 80070b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070bc:	1ad2      	subs	r2, r2, r3
 80070be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	619a      	str	r2, [r3, #24]
 80070ca:	e00e      	b.n	80070ea <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80070cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	699b      	ldr	r3, [r3, #24]
 80070d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80070dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2200      	movs	r2, #0
 80070e8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80070ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	785b      	ldrb	r3, [r3, #1]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d178      	bne.n	80071ec <USB_EPStartXfer+0x1a24>
 80070fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007108:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800710c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007116:	b29b      	uxth	r3, r3
 8007118:	461a      	mov	r2, r3
 800711a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800711e:	4413      	add	r3, r2
 8007120:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007128:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	011a      	lsls	r2, r3, #4
 8007132:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007136:	4413      	add	r3, r2
 8007138:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800713c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007140:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007144:	2b00      	cmp	r3, #0
 8007146:	d116      	bne.n	8007176 <USB_EPStartXfer+0x19ae>
 8007148:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800714c:	881b      	ldrh	r3, [r3, #0]
 800714e:	b29b      	uxth	r3, r3
 8007150:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007154:	b29a      	uxth	r2, r3
 8007156:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800715a:	801a      	strh	r2, [r3, #0]
 800715c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007160:	881b      	ldrh	r3, [r3, #0]
 8007162:	b29b      	uxth	r3, r3
 8007164:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007168:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800716c:	b29a      	uxth	r2, r3
 800716e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007172:	801a      	strh	r2, [r3, #0]
 8007174:	e06b      	b.n	800724e <USB_EPStartXfer+0x1a86>
 8007176:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800717a:	2b3e      	cmp	r3, #62	; 0x3e
 800717c:	d818      	bhi.n	80071b0 <USB_EPStartXfer+0x19e8>
 800717e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007182:	085b      	lsrs	r3, r3, #1
 8007184:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007188:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800718c:	f003 0301 	and.w	r3, r3, #1
 8007190:	2b00      	cmp	r3, #0
 8007192:	d004      	beq.n	800719e <USB_EPStartXfer+0x19d6>
 8007194:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007198:	3301      	adds	r3, #1
 800719a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800719e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	029b      	lsls	r3, r3, #10
 80071a6:	b29a      	uxth	r2, r3
 80071a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80071ac:	801a      	strh	r2, [r3, #0]
 80071ae:	e04e      	b.n	800724e <USB_EPStartXfer+0x1a86>
 80071b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071b4:	095b      	lsrs	r3, r3, #5
 80071b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80071ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071be:	f003 031f 	and.w	r3, r3, #31
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d104      	bne.n	80071d0 <USB_EPStartXfer+0x1a08>
 80071c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071ca:	3b01      	subs	r3, #1
 80071cc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80071d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	029b      	lsls	r3, r3, #10
 80071d8:	b29b      	uxth	r3, r3
 80071da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80071e8:	801a      	strh	r2, [r3, #0]
 80071ea:	e030      	b.n	800724e <USB_EPStartXfer+0x1a86>
 80071ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	785b      	ldrb	r3, [r3, #1]
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	d128      	bne.n	800724e <USB_EPStartXfer+0x1a86>
 80071fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007200:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800720a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800720e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007218:	b29b      	uxth	r3, r3
 800721a:	461a      	mov	r2, r3
 800721c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007220:	4413      	add	r3, r2
 8007222:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007226:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800722a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	011a      	lsls	r2, r3, #4
 8007234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007238:	4413      	add	r3, r2
 800723a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800723e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007242:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007246:	b29a      	uxth	r2, r3
 8007248:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800724c:	801a      	strh	r2, [r3, #0]
 800724e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007252:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800725c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007260:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	785b      	ldrb	r3, [r3, #1]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d178      	bne.n	800735e <USB_EPStartXfer+0x1b96>
 800726c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007270:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800727a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800727e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007288:	b29b      	uxth	r3, r3
 800728a:	461a      	mov	r2, r3
 800728c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007290:	4413      	add	r3, r2
 8007292:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007296:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800729a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	011a      	lsls	r2, r3, #4
 80072a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072a8:	4413      	add	r3, r2
 80072aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80072ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80072b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d116      	bne.n	80072e8 <USB_EPStartXfer+0x1b20>
 80072ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072be:	881b      	ldrh	r3, [r3, #0]
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072cc:	801a      	strh	r2, [r3, #0]
 80072ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072d2:	881b      	ldrh	r3, [r3, #0]
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072de:	b29a      	uxth	r2, r3
 80072e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072e4:	801a      	strh	r2, [r3, #0]
 80072e6:	e067      	b.n	80073b8 <USB_EPStartXfer+0x1bf0>
 80072e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072ec:	2b3e      	cmp	r3, #62	; 0x3e
 80072ee:	d818      	bhi.n	8007322 <USB_EPStartXfer+0x1b5a>
 80072f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072f4:	085b      	lsrs	r3, r3, #1
 80072f6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80072fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072fe:	f003 0301 	and.w	r3, r3, #1
 8007302:	2b00      	cmp	r3, #0
 8007304:	d004      	beq.n	8007310 <USB_EPStartXfer+0x1b48>
 8007306:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800730a:	3301      	adds	r3, #1
 800730c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007310:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007314:	b29b      	uxth	r3, r3
 8007316:	029b      	lsls	r3, r3, #10
 8007318:	b29a      	uxth	r2, r3
 800731a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800731e:	801a      	strh	r2, [r3, #0]
 8007320:	e04a      	b.n	80073b8 <USB_EPStartXfer+0x1bf0>
 8007322:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007326:	095b      	lsrs	r3, r3, #5
 8007328:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800732c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007330:	f003 031f 	and.w	r3, r3, #31
 8007334:	2b00      	cmp	r3, #0
 8007336:	d104      	bne.n	8007342 <USB_EPStartXfer+0x1b7a>
 8007338:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800733c:	3b01      	subs	r3, #1
 800733e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007342:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007346:	b29b      	uxth	r3, r3
 8007348:	029b      	lsls	r3, r3, #10
 800734a:	b29b      	uxth	r3, r3
 800734c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007350:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007354:	b29a      	uxth	r2, r3
 8007356:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800735a:	801a      	strh	r2, [r3, #0]
 800735c:	e02c      	b.n	80073b8 <USB_EPStartXfer+0x1bf0>
 800735e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007362:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	785b      	ldrb	r3, [r3, #1]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d124      	bne.n	80073b8 <USB_EPStartXfer+0x1bf0>
 800736e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007372:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800737c:	b29b      	uxth	r3, r3
 800737e:	461a      	mov	r2, r3
 8007380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007384:	4413      	add	r3, r2
 8007386:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800738a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800738e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	011a      	lsls	r2, r3, #4
 8007398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800739c:	4413      	add	r3, r2
 800739e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80073a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80073a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073b0:	801a      	strh	r2, [r3, #0]
 80073b2:	e001      	b.n	80073b8 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e03a      	b.n	800742e <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80073b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4413      	add	r3, r2
 80073d2:	881b      	ldrh	r3, [r3, #0]
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073de:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80073e2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80073e6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80073ea:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80073ee:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80073f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80073f6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80073fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007408:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	441a      	add	r2, r3
 8007414:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007418:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800741c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007420:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007428:	b29b      	uxth	r3, r3
 800742a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	785b      	ldrb	r3, [r3, #1]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d020      	beq.n	800748c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	4413      	add	r3, r2
 8007454:	881b      	ldrh	r3, [r3, #0]
 8007456:	b29b      	uxth	r3, r3
 8007458:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800745c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007460:	81bb      	strh	r3, [r7, #12]
 8007462:	89bb      	ldrh	r3, [r7, #12]
 8007464:	f083 0310 	eor.w	r3, r3, #16
 8007468:	81bb      	strh	r3, [r7, #12]
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	441a      	add	r2, r3
 8007474:	89bb      	ldrh	r3, [r7, #12]
 8007476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800747a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800747e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007486:	b29b      	uxth	r3, r3
 8007488:	8013      	strh	r3, [r2, #0]
 800748a:	e01f      	b.n	80074cc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4413      	add	r3, r2
 8007496:	881b      	ldrh	r3, [r3, #0]
 8007498:	b29b      	uxth	r3, r3
 800749a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800749e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074a2:	81fb      	strh	r3, [r7, #14]
 80074a4:	89fb      	ldrh	r3, [r7, #14]
 80074a6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80074aa:	81fb      	strh	r3, [r7, #14]
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	441a      	add	r2, r3
 80074b6:	89fb      	ldrh	r3, [r7, #14]
 80074b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3714      	adds	r7, #20
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bc80      	pop	{r7}
 80074d6:	4770      	bx	lr

080074d8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80074d8:	b480      	push	{r7}
 80074da:	b087      	sub	sp, #28
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	7b1b      	ldrb	r3, [r3, #12]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f040 809d 	bne.w	8007626 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	785b      	ldrb	r3, [r3, #1]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d04c      	beq.n	800758e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	4413      	add	r3, r2
 80074fe:	881b      	ldrh	r3, [r3, #0]
 8007500:	823b      	strh	r3, [r7, #16]
 8007502:	8a3b      	ldrh	r3, [r7, #16]
 8007504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007508:	2b00      	cmp	r3, #0
 800750a:	d01b      	beq.n	8007544 <USB_EPClearStall+0x6c>
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4413      	add	r3, r2
 8007516:	881b      	ldrh	r3, [r3, #0]
 8007518:	b29b      	uxth	r3, r3
 800751a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800751e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007522:	81fb      	strh	r3, [r7, #14]
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	441a      	add	r2, r3
 800752e:	89fb      	ldrh	r3, [r7, #14]
 8007530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800753c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007540:	b29b      	uxth	r3, r3
 8007542:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	78db      	ldrb	r3, [r3, #3]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d06c      	beq.n	8007626 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4413      	add	r3, r2
 8007556:	881b      	ldrh	r3, [r3, #0]
 8007558:	b29b      	uxth	r3, r3
 800755a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800755e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007562:	81bb      	strh	r3, [r7, #12]
 8007564:	89bb      	ldrh	r3, [r7, #12]
 8007566:	f083 0320 	eor.w	r3, r3, #32
 800756a:	81bb      	strh	r3, [r7, #12]
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	441a      	add	r2, r3
 8007576:	89bb      	ldrh	r3, [r7, #12]
 8007578:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800757c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007580:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007588:	b29b      	uxth	r3, r3
 800758a:	8013      	strh	r3, [r2, #0]
 800758c:	e04b      	b.n	8007626 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	4413      	add	r3, r2
 8007598:	881b      	ldrh	r3, [r3, #0]
 800759a:	82fb      	strh	r3, [r7, #22]
 800759c:	8afb      	ldrh	r3, [r7, #22]
 800759e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d01b      	beq.n	80075de <USB_EPClearStall+0x106>
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	4413      	add	r3, r2
 80075b0:	881b      	ldrh	r3, [r3, #0]
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075bc:	82bb      	strh	r3, [r7, #20]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	441a      	add	r2, r3
 80075c8:	8abb      	ldrh	r3, [r7, #20]
 80075ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075da:	b29b      	uxth	r3, r3
 80075dc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	4413      	add	r3, r2
 80075e8:	881b      	ldrh	r3, [r3, #0]
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075f4:	827b      	strh	r3, [r7, #18]
 80075f6:	8a7b      	ldrh	r3, [r7, #18]
 80075f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80075fc:	827b      	strh	r3, [r7, #18]
 80075fe:	8a7b      	ldrh	r3, [r7, #18]
 8007600:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007604:	827b      	strh	r3, [r7, #18]
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	441a      	add	r2, r3
 8007610:	8a7b      	ldrh	r3, [r7, #18]
 8007612:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007616:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800761a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800761e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007622:	b29b      	uxth	r3, r3
 8007624:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	371c      	adds	r7, #28
 800762c:	46bd      	mov	sp, r7
 800762e:	bc80      	pop	{r7}
 8007630:	4770      	bx	lr

08007632 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007632:	b480      	push	{r7}
 8007634:	b083      	sub	sp, #12
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
 800763a:	460b      	mov	r3, r1
 800763c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800763e:	78fb      	ldrb	r3, [r7, #3]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d103      	bne.n	800764c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2280      	movs	r2, #128	; 0x80
 8007648:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	370c      	adds	r7, #12
 8007652:	46bd      	mov	sp, r7
 8007654:	bc80      	pop	{r7}
 8007656:	4770      	bx	lr

08007658 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	370c      	adds	r7, #12
 8007666:	46bd      	mov	sp, r7
 8007668:	bc80      	pop	{r7}
 800766a:	4770      	bx	lr

0800766c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	370c      	adds	r7, #12
 800767a:	46bd      	mov	sp, r7
 800767c:	bc80      	pop	{r7}
 800767e:	4770      	bx	lr

08007680 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800768e:	b29b      	uxth	r3, r3
 8007690:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007692:	68fb      	ldr	r3, [r7, #12]
}
 8007694:	4618      	mov	r0, r3
 8007696:	3714      	adds	r7, #20
 8007698:	46bd      	mov	sp, r7
 800769a:	bc80      	pop	{r7}
 800769c:	4770      	bx	lr

0800769e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800769e:	b480      	push	{r7}
 80076a0:	b083      	sub	sp, #12
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
 80076a6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bc80      	pop	{r7}
 80076b2:	4770      	bx	lr

080076b4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b08d      	sub	sp, #52	; 0x34
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	4611      	mov	r1, r2
 80076c0:	461a      	mov	r2, r3
 80076c2:	460b      	mov	r3, r1
 80076c4:	80fb      	strh	r3, [r7, #6]
 80076c6:	4613      	mov	r3, r2
 80076c8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80076ca:	88bb      	ldrh	r3, [r7, #4]
 80076cc:	3301      	adds	r3, #1
 80076ce:	085b      	lsrs	r3, r3, #1
 80076d0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80076da:	88fb      	ldrh	r3, [r7, #6]
 80076dc:	005a      	lsls	r2, r3, #1
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	4413      	add	r3, r2
 80076e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076e6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80076e8:	6a3b      	ldr	r3, [r7, #32]
 80076ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076ec:	e01e      	b.n	800772c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80076ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80076f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f6:	3301      	adds	r3, #1
 80076f8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80076fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	b29b      	uxth	r3, r3
 8007700:	021b      	lsls	r3, r3, #8
 8007702:	b29b      	uxth	r3, r3
 8007704:	461a      	mov	r2, r3
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	4313      	orrs	r3, r2
 800770a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	b29a      	uxth	r2, r3
 8007710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007712:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007716:	3302      	adds	r3, #2
 8007718:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800771a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771c:	3302      	adds	r3, #2
 800771e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007722:	3301      	adds	r3, #1
 8007724:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007728:	3b01      	subs	r3, #1
 800772a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800772c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1dd      	bne.n	80076ee <USB_WritePMA+0x3a>
  }
}
 8007732:	bf00      	nop
 8007734:	bf00      	nop
 8007736:	3734      	adds	r7, #52	; 0x34
 8007738:	46bd      	mov	sp, r7
 800773a:	bc80      	pop	{r7}
 800773c:	4770      	bx	lr

0800773e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800773e:	b480      	push	{r7}
 8007740:	b08b      	sub	sp, #44	; 0x2c
 8007742:	af00      	add	r7, sp, #0
 8007744:	60f8      	str	r0, [r7, #12]
 8007746:	60b9      	str	r1, [r7, #8]
 8007748:	4611      	mov	r1, r2
 800774a:	461a      	mov	r2, r3
 800774c:	460b      	mov	r3, r1
 800774e:	80fb      	strh	r3, [r7, #6]
 8007750:	4613      	mov	r3, r2
 8007752:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007754:	88bb      	ldrh	r3, [r7, #4]
 8007756:	085b      	lsrs	r3, r3, #1
 8007758:	b29b      	uxth	r3, r3
 800775a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007764:	88fb      	ldrh	r3, [r7, #6]
 8007766:	005a      	lsls	r2, r3, #1
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	4413      	add	r3, r2
 800776c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007770:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	627b      	str	r3, [r7, #36]	; 0x24
 8007776:	e01b      	b.n	80077b0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007778:	6a3b      	ldr	r3, [r7, #32]
 800777a:	881b      	ldrh	r3, [r3, #0]
 800777c:	b29b      	uxth	r3, r3
 800777e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007780:	6a3b      	ldr	r3, [r7, #32]
 8007782:	3302      	adds	r3, #2
 8007784:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	b2da      	uxtb	r2, r3
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	3301      	adds	r3, #1
 8007792:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	0a1b      	lsrs	r3, r3, #8
 8007798:	b2da      	uxtb	r2, r3
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	3301      	adds	r3, #1
 80077a2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80077a4:	6a3b      	ldr	r3, [r7, #32]
 80077a6:	3302      	adds	r3, #2
 80077a8:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80077aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ac:	3b01      	subs	r3, #1
 80077ae:	627b      	str	r3, [r7, #36]	; 0x24
 80077b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1e0      	bne.n	8007778 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80077b6:	88bb      	ldrh	r3, [r7, #4]
 80077b8:	f003 0301 	and.w	r3, r3, #1
 80077bc:	b29b      	uxth	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d007      	beq.n	80077d2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80077c2:	6a3b      	ldr	r3, [r7, #32]
 80077c4:	881b      	ldrh	r3, [r3, #0]
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	b2da      	uxtb	r2, r3
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	701a      	strb	r2, [r3, #0]
  }
}
 80077d2:	bf00      	nop
 80077d4:	372c      	adds	r7, #44	; 0x2c
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bc80      	pop	{r7}
 80077da:	4770      	bx	lr

080077dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	460b      	mov	r3, r1
 80077e6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80077e8:	2300      	movs	r3, #0
 80077ea:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	7c1b      	ldrb	r3, [r3, #16]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d115      	bne.n	8007820 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80077f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077f8:	2202      	movs	r2, #2
 80077fa:	2181      	movs	r1, #129	; 0x81
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f001 fea4 	bl	800954a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2201      	movs	r2, #1
 8007806:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007808:	f44f 7300 	mov.w	r3, #512	; 0x200
 800780c:	2202      	movs	r2, #2
 800780e:	2101      	movs	r1, #1
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f001 fe9a 	bl	800954a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800781e:	e012      	b.n	8007846 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007820:	2340      	movs	r3, #64	; 0x40
 8007822:	2202      	movs	r2, #2
 8007824:	2181      	movs	r1, #129	; 0x81
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f001 fe8f 	bl	800954a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007832:	2340      	movs	r3, #64	; 0x40
 8007834:	2202      	movs	r2, #2
 8007836:	2101      	movs	r1, #1
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f001 fe86 	bl	800954a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2201      	movs	r2, #1
 8007842:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007846:	2308      	movs	r3, #8
 8007848:	2203      	movs	r2, #3
 800784a:	2182      	movs	r1, #130	; 0x82
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f001 fe7c 	bl	800954a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2201      	movs	r2, #1
 8007856:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007858:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800785c:	f001 ff9c 	bl	8009798 <USBD_static_malloc>
 8007860:	4602      	mov	r2, r0
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800786e:	2b00      	cmp	r3, #0
 8007870:	d102      	bne.n	8007878 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007872:	2301      	movs	r3, #1
 8007874:	73fb      	strb	r3, [r7, #15]
 8007876:	e026      	b.n	80078c6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800787e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	2200      	movs	r2, #0
 800788e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	2200      	movs	r2, #0
 8007896:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	7c1b      	ldrb	r3, [r3, #16]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d109      	bne.n	80078b6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078ac:	2101      	movs	r1, #1
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f001 ff3c 	bl	800972c <USBD_LL_PrepareReceive>
 80078b4:	e007      	b.n	80078c6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80078bc:	2340      	movs	r3, #64	; 0x40
 80078be:	2101      	movs	r1, #1
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f001 ff33 	bl	800972c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80078c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	460b      	mov	r3, r1
 80078da:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80078dc:	2300      	movs	r3, #0
 80078de:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80078e0:	2181      	movs	r1, #129	; 0x81
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f001 fe57 	bl	8009596 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80078ee:	2101      	movs	r1, #1
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f001 fe50 	bl	8009596 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80078fe:	2182      	movs	r1, #130	; 0x82
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f001 fe48 	bl	8009596 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00e      	beq.n	8007934 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007926:	4618      	mov	r0, r3
 8007928:	f001 ff42 	bl	80097b0 <USBD_static_free>
    pdev->pClassData = NULL;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007934:	7bfb      	ldrb	r3, [r7, #15]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b086      	sub	sp, #24
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
 8007946:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800794e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007950:	2300      	movs	r3, #0
 8007952:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007954:	2300      	movs	r3, #0
 8007956:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007958:	2300      	movs	r3, #0
 800795a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007964:	2b00      	cmp	r3, #0
 8007966:	d039      	beq.n	80079dc <USBD_CDC_Setup+0x9e>
 8007968:	2b20      	cmp	r3, #32
 800796a:	d17f      	bne.n	8007a6c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	88db      	ldrh	r3, [r3, #6]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d029      	beq.n	80079c8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	b25b      	sxtb	r3, r3
 800797a:	2b00      	cmp	r3, #0
 800797c:	da11      	bge.n	80079a2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	683a      	ldr	r2, [r7, #0]
 8007988:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800798a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800798c:	683a      	ldr	r2, [r7, #0]
 800798e:	88d2      	ldrh	r2, [r2, #6]
 8007990:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007992:	6939      	ldr	r1, [r7, #16]
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	88db      	ldrh	r3, [r3, #6]
 8007998:	461a      	mov	r2, r3
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f001 fa09 	bl	8008db2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80079a0:	e06b      	b.n	8007a7a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	785a      	ldrb	r2, [r3, #1]
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	88db      	ldrh	r3, [r3, #6]
 80079b0:	b2da      	uxtb	r2, r3
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80079b8:	6939      	ldr	r1, [r7, #16]
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	88db      	ldrh	r3, [r3, #6]
 80079be:	461a      	mov	r2, r3
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f001 fa24 	bl	8008e0e <USBD_CtlPrepareRx>
      break;
 80079c6:	e058      	b.n	8007a7a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	683a      	ldr	r2, [r7, #0]
 80079d2:	7850      	ldrb	r0, [r2, #1]
 80079d4:	2200      	movs	r2, #0
 80079d6:	6839      	ldr	r1, [r7, #0]
 80079d8:	4798      	blx	r3
      break;
 80079da:	e04e      	b.n	8007a7a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	785b      	ldrb	r3, [r3, #1]
 80079e0:	2b0b      	cmp	r3, #11
 80079e2:	d02e      	beq.n	8007a42 <USBD_CDC_Setup+0x104>
 80079e4:	2b0b      	cmp	r3, #11
 80079e6:	dc38      	bgt.n	8007a5a <USBD_CDC_Setup+0x11c>
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d002      	beq.n	80079f2 <USBD_CDC_Setup+0xb4>
 80079ec:	2b0a      	cmp	r3, #10
 80079ee:	d014      	beq.n	8007a1a <USBD_CDC_Setup+0xdc>
 80079f0:	e033      	b.n	8007a5a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f8:	2b03      	cmp	r3, #3
 80079fa:	d107      	bne.n	8007a0c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80079fc:	f107 030c 	add.w	r3, r7, #12
 8007a00:	2202      	movs	r2, #2
 8007a02:	4619      	mov	r1, r3
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f001 f9d4 	bl	8008db2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a0a:	e02e      	b.n	8007a6a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007a0c:	6839      	ldr	r1, [r7, #0]
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f001 f965 	bl	8008cde <USBD_CtlError>
            ret = USBD_FAIL;
 8007a14:	2302      	movs	r3, #2
 8007a16:	75fb      	strb	r3, [r7, #23]
          break;
 8007a18:	e027      	b.n	8007a6a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a20:	2b03      	cmp	r3, #3
 8007a22:	d107      	bne.n	8007a34 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007a24:	f107 030f 	add.w	r3, r7, #15
 8007a28:	2201      	movs	r2, #1
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f001 f9c0 	bl	8008db2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a32:	e01a      	b.n	8007a6a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007a34:	6839      	ldr	r1, [r7, #0]
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f001 f951 	bl	8008cde <USBD_CtlError>
            ret = USBD_FAIL;
 8007a3c:	2302      	movs	r3, #2
 8007a3e:	75fb      	strb	r3, [r7, #23]
          break;
 8007a40:	e013      	b.n	8007a6a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a48:	2b03      	cmp	r3, #3
 8007a4a:	d00d      	beq.n	8007a68 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007a4c:	6839      	ldr	r1, [r7, #0]
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f001 f945 	bl	8008cde <USBD_CtlError>
            ret = USBD_FAIL;
 8007a54:	2302      	movs	r3, #2
 8007a56:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007a58:	e006      	b.n	8007a68 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007a5a:	6839      	ldr	r1, [r7, #0]
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f001 f93e 	bl	8008cde <USBD_CtlError>
          ret = USBD_FAIL;
 8007a62:	2302      	movs	r3, #2
 8007a64:	75fb      	strb	r3, [r7, #23]
          break;
 8007a66:	e000      	b.n	8007a6a <USBD_CDC_Setup+0x12c>
          break;
 8007a68:	bf00      	nop
      }
      break;
 8007a6a:	e006      	b.n	8007a7a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007a6c:	6839      	ldr	r1, [r7, #0]
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f001 f935 	bl	8008cde <USBD_CtlError>
      ret = USBD_FAIL;
 8007a74:	2302      	movs	r3, #2
 8007a76:	75fb      	strb	r3, [r7, #23]
      break;
 8007a78:	bf00      	nop
  }

  return ret;
 8007a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3718      	adds	r7, #24
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a96:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a9e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d03a      	beq.n	8007b20 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007aaa:	78fa      	ldrb	r2, [r7, #3]
 8007aac:	6879      	ldr	r1, [r7, #4]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	4413      	add	r3, r2
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	440b      	add	r3, r1
 8007ab8:	331c      	adds	r3, #28
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d029      	beq.n	8007b14 <USBD_CDC_DataIn+0x90>
 8007ac0:	78fa      	ldrb	r2, [r7, #3]
 8007ac2:	6879      	ldr	r1, [r7, #4]
 8007ac4:	4613      	mov	r3, r2
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	4413      	add	r3, r2
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	440b      	add	r3, r1
 8007ace:	331c      	adds	r3, #28
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	78f9      	ldrb	r1, [r7, #3]
 8007ad4:	68b8      	ldr	r0, [r7, #8]
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	440b      	add	r3, r1
 8007adc:	00db      	lsls	r3, r3, #3
 8007ade:	4403      	add	r3, r0
 8007ae0:	3338      	adds	r3, #56	; 0x38
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	fbb2 f1f3 	udiv	r1, r2, r3
 8007ae8:	fb01 f303 	mul.w	r3, r1, r3
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d110      	bne.n	8007b14 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007af2:	78fa      	ldrb	r2, [r7, #3]
 8007af4:	6879      	ldr	r1, [r7, #4]
 8007af6:	4613      	mov	r3, r2
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	4413      	add	r3, r2
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	440b      	add	r3, r1
 8007b00:	331c      	adds	r3, #28
 8007b02:	2200      	movs	r2, #0
 8007b04:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007b06:	78f9      	ldrb	r1, [r7, #3]
 8007b08:	2300      	movs	r3, #0
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f001 fdea 	bl	80096e6 <USBD_LL_Transmit>
 8007b12:	e003      	b.n	8007b1c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	e000      	b.n	8007b22 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007b20:	2302      	movs	r3, #2
  }
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3710      	adds	r7, #16
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b084      	sub	sp, #16
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	460b      	mov	r3, r1
 8007b34:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b3c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007b3e:	78fb      	ldrb	r3, [r7, #3]
 8007b40:	4619      	mov	r1, r3
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f001 fe15 	bl	8009772 <USBD_LL_GetRxDataSize>
 8007b48:	4602      	mov	r2, r0
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00d      	beq.n	8007b76 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007b6e:	4611      	mov	r1, r2
 8007b70:	4798      	blx	r3

    return USBD_OK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	e000      	b.n	8007b78 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007b76:	2302      	movs	r3, #2
  }
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b8e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d015      	beq.n	8007bc6 <USBD_CDC_EP0_RxReady+0x46>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007ba0:	2bff      	cmp	r3, #255	; 0xff
 8007ba2:	d010      	beq.n	8007bc6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007bb2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007bba:	b292      	uxth	r2, r2
 8007bbc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	22ff      	movs	r2, #255	; 0xff
 8007bc2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2243      	movs	r2, #67	; 0x43
 8007bdc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007bde:	4b03      	ldr	r3, [pc, #12]	; (8007bec <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bc80      	pop	{r7}
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	2000009c 	.word	0x2000009c

08007bf0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2243      	movs	r2, #67	; 0x43
 8007bfc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007bfe:	4b03      	ldr	r3, [pc, #12]	; (8007c0c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bc80      	pop	{r7}
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	20000058 	.word	0x20000058

08007c10 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2243      	movs	r2, #67	; 0x43
 8007c1c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007c1e:	4b03      	ldr	r3, [pc, #12]	; (8007c2c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bc80      	pop	{r7}
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	200000e0 	.word	0x200000e0

08007c30 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	220a      	movs	r2, #10
 8007c3c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007c3e:	4b03      	ldr	r3, [pc, #12]	; (8007c4c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bc80      	pop	{r7}
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	20000014 	.word	0x20000014

08007c50 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007c5a:	2302      	movs	r3, #2
 8007c5c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d005      	beq.n	8007c70 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	683a      	ldr	r2, [r7, #0]
 8007c68:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3714      	adds	r7, #20
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bc80      	pop	{r7}
 8007c7a:	4770      	bx	lr

08007c7c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b087      	sub	sp, #28
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	4613      	mov	r3, r2
 8007c88:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c90:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007c9a:	88fa      	ldrh	r2, [r7, #6]
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	371c      	adds	r7, #28
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bc80      	pop	{r7}
 8007cac:	4770      	bx	lr

08007cae <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007cae:	b480      	push	{r7}
 8007cb0:	b085      	sub	sp, #20
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
 8007cb6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cbe:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	683a      	ldr	r2, [r7, #0]
 8007cc4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3714      	adds	r7, #20
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bc80      	pop	{r7}
 8007cd2:	4770      	bx	lr

08007cd4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ce2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d01c      	beq.n	8007d28 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d115      	bne.n	8007d24 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	2181      	movs	r1, #129	; 0x81
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f001 fce3 	bl	80096e6 <USBD_LL_Transmit>

      return USBD_OK;
 8007d20:	2300      	movs	r3, #0
 8007d22:	e002      	b.n	8007d2a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007d24:	2301      	movs	r3, #1
 8007d26:	e000      	b.n	8007d2a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007d28:	2302      	movs	r3, #2
  }
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b084      	sub	sp, #16
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d40:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d017      	beq.n	8007d7c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	7c1b      	ldrb	r3, [r3, #16]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d109      	bne.n	8007d68 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d5e:	2101      	movs	r1, #1
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f001 fce3 	bl	800972c <USBD_LL_PrepareReceive>
 8007d66:	e007      	b.n	8007d78 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d6e:	2340      	movs	r3, #64	; 0x40
 8007d70:	2101      	movs	r1, #1
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f001 fcda 	bl	800972c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	e000      	b.n	8007d7e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007d7c:	2302      	movs	r3, #2
  }
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007d86:	b580      	push	{r7, lr}
 8007d88:	b084      	sub	sp, #16
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	60f8      	str	r0, [r7, #12]
 8007d8e:	60b9      	str	r1, [r7, #8]
 8007d90:	4613      	mov	r3, r2
 8007d92:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d101      	bne.n	8007d9e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007d9a:	2302      	movs	r3, #2
 8007d9c:	e01a      	b.n	8007dd4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d003      	beq.n	8007db0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d003      	beq.n	8007dbe <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	79fa      	ldrb	r2, [r7, #7]
 8007dca:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f001 fb47 	bl	8009460 <USBD_LL_Init>

  return USBD_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007de6:	2300      	movs	r3, #0
 8007de8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d006      	beq.n	8007dfe <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	683a      	ldr	r2, [r7, #0]
 8007df4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	73fb      	strb	r3, [r7, #15]
 8007dfc:	e001      	b.n	8007e02 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007dfe:	2302      	movs	r3, #2
 8007e00:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3714      	adds	r7, #20
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bc80      	pop	{r7}
 8007e0c:	4770      	bx	lr

08007e0e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b082      	sub	sp, #8
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f001 fb7c 	bl	8009514 <USBD_LL_Start>

  return USBD_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3708      	adds	r7, #8
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007e26:	b480      	push	{r7}
 8007e28:	b083      	sub	sp, #12
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bc80      	pop	{r7}
 8007e38:	4770      	bx	lr

08007e3a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b084      	sub	sp, #16
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
 8007e42:	460b      	mov	r3, r1
 8007e44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007e46:	2302      	movs	r3, #2
 8007e48:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00c      	beq.n	8007e6e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	78fa      	ldrb	r2, [r7, #3]
 8007e5e:	4611      	mov	r1, r2
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	4798      	blx	r3
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d101      	bne.n	8007e6e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	460b      	mov	r3, r1
 8007e82:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	78fa      	ldrb	r2, [r7, #3]
 8007e8e:	4611      	mov	r1, r2
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	4798      	blx	r3

  return USBD_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3708      	adds	r7, #8
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b082      	sub	sp, #8
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
 8007ea6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007eae:	6839      	ldr	r1, [r7, #0]
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f000 fed8 	bl	8008c66 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2201      	movs	r2, #1
 8007eba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007ed2:	f003 031f 	and.w	r3, r3, #31
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d016      	beq.n	8007f08 <USBD_LL_SetupStage+0x6a>
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d81c      	bhi.n	8007f18 <USBD_LL_SetupStage+0x7a>
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d002      	beq.n	8007ee8 <USBD_LL_SetupStage+0x4a>
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d008      	beq.n	8007ef8 <USBD_LL_SetupStage+0x5a>
 8007ee6:	e017      	b.n	8007f18 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007eee:	4619      	mov	r1, r3
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 f9cb 	bl	800828c <USBD_StdDevReq>
      break;
 8007ef6:	e01a      	b.n	8007f2e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007efe:	4619      	mov	r1, r3
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 fa2d 	bl	8008360 <USBD_StdItfReq>
      break;
 8007f06:	e012      	b.n	8007f2e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007f0e:	4619      	mov	r1, r3
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 fa6d 	bl	80083f0 <USBD_StdEPReq>
      break;
 8007f16:	e00a      	b.n	8007f2e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007f1e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	4619      	mov	r1, r3
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f001 fb54 	bl	80095d4 <USBD_LL_StallEP>
      break;
 8007f2c:	bf00      	nop
  }

  return USBD_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3708      	adds	r7, #8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b086      	sub	sp, #24
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	460b      	mov	r3, r1
 8007f42:	607a      	str	r2, [r7, #4]
 8007f44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007f46:	7afb      	ldrb	r3, [r7, #11]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d14b      	bne.n	8007fe4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007f52:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f5a:	2b03      	cmp	r3, #3
 8007f5c:	d134      	bne.n	8007fc8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	68da      	ldr	r2, [r3, #12]
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d919      	bls.n	8007f9e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	68da      	ldr	r2, [r3, #12]
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	1ad2      	subs	r2, r2, r3
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	68da      	ldr	r2, [r3, #12]
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d203      	bcs.n	8007f8c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	e002      	b.n	8007f92 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	461a      	mov	r2, r3
 8007f94:	6879      	ldr	r1, [r7, #4]
 8007f96:	68f8      	ldr	r0, [r7, #12]
 8007f98:	f000 ff57 	bl	8008e4a <USBD_CtlContinueRx>
 8007f9c:	e038      	b.n	8008010 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00a      	beq.n	8007fc0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007fb0:	2b03      	cmp	r3, #3
 8007fb2:	d105      	bne.n	8007fc0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fba:	691b      	ldr	r3, [r3, #16]
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f000 ff54 	bl	8008e6e <USBD_CtlSendStatus>
 8007fc6:	e023      	b.n	8008010 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007fce:	2b05      	cmp	r3, #5
 8007fd0:	d11e      	bne.n	8008010 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007fda:	2100      	movs	r1, #0
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f001 faf9 	bl	80095d4 <USBD_LL_StallEP>
 8007fe2:	e015      	b.n	8008010 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fea:	699b      	ldr	r3, [r3, #24]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00d      	beq.n	800800c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007ff6:	2b03      	cmp	r3, #3
 8007ff8:	d108      	bne.n	800800c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008000:	699b      	ldr	r3, [r3, #24]
 8008002:	7afa      	ldrb	r2, [r7, #11]
 8008004:	4611      	mov	r1, r2
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	4798      	blx	r3
 800800a:	e001      	b.n	8008010 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800800c:	2302      	movs	r3, #2
 800800e:	e000      	b.n	8008012 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3718      	adds	r7, #24
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b086      	sub	sp, #24
 800801e:	af00      	add	r7, sp, #0
 8008020:	60f8      	str	r0, [r7, #12]
 8008022:	460b      	mov	r3, r1
 8008024:	607a      	str	r2, [r7, #4]
 8008026:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008028:	7afb      	ldrb	r3, [r7, #11]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d17f      	bne.n	800812e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	3314      	adds	r3, #20
 8008032:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800803a:	2b02      	cmp	r3, #2
 800803c:	d15c      	bne.n	80080f8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	68da      	ldr	r2, [r3, #12]
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	429a      	cmp	r2, r3
 8008048:	d915      	bls.n	8008076 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	68da      	ldr	r2, [r3, #12]
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	1ad2      	subs	r2, r2, r3
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	b29b      	uxth	r3, r3
 800805e:	461a      	mov	r2, r3
 8008060:	6879      	ldr	r1, [r7, #4]
 8008062:	68f8      	ldr	r0, [r7, #12]
 8008064:	f000 fec1 	bl	8008dea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008068:	2300      	movs	r3, #0
 800806a:	2200      	movs	r2, #0
 800806c:	2100      	movs	r1, #0
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f001 fb5c 	bl	800972c <USBD_LL_PrepareReceive>
 8008074:	e04e      	b.n	8008114 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	697a      	ldr	r2, [r7, #20]
 800807c:	6912      	ldr	r2, [r2, #16]
 800807e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008082:	fb01 f202 	mul.w	r2, r1, r2
 8008086:	1a9b      	subs	r3, r3, r2
 8008088:	2b00      	cmp	r3, #0
 800808a:	d11c      	bne.n	80080c6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	689a      	ldr	r2, [r3, #8]
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008094:	429a      	cmp	r2, r3
 8008096:	d316      	bcc.n	80080c6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	689a      	ldr	r2, [r3, #8]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d20f      	bcs.n	80080c6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80080a6:	2200      	movs	r2, #0
 80080a8:	2100      	movs	r1, #0
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f000 fe9d 	bl	8008dea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080b8:	2300      	movs	r3, #0
 80080ba:	2200      	movs	r2, #0
 80080bc:	2100      	movs	r1, #0
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	f001 fb34 	bl	800972c <USBD_LL_PrepareReceive>
 80080c4:	e026      	b.n	8008114 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d00a      	beq.n	80080e8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80080d8:	2b03      	cmp	r3, #3
 80080da:	d105      	bne.n	80080e8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80080e8:	2180      	movs	r1, #128	; 0x80
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f001 fa72 	bl	80095d4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80080f0:	68f8      	ldr	r0, [r7, #12]
 80080f2:	f000 fecf 	bl	8008e94 <USBD_CtlReceiveStatus>
 80080f6:	e00d      	b.n	8008114 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080fe:	2b04      	cmp	r3, #4
 8008100:	d004      	beq.n	800810c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008108:	2b00      	cmp	r3, #0
 800810a:	d103      	bne.n	8008114 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800810c:	2180      	movs	r1, #128	; 0x80
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f001 fa60 	bl	80095d4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800811a:	2b01      	cmp	r3, #1
 800811c:	d11d      	bne.n	800815a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f7ff fe81 	bl	8007e26 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800812c:	e015      	b.n	800815a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008134:	695b      	ldr	r3, [r3, #20]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00d      	beq.n	8008156 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008140:	2b03      	cmp	r3, #3
 8008142:	d108      	bne.n	8008156 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800814a:	695b      	ldr	r3, [r3, #20]
 800814c:	7afa      	ldrb	r2, [r7, #11]
 800814e:	4611      	mov	r1, r2
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	4798      	blx	r3
 8008154:	e001      	b.n	800815a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008156:	2302      	movs	r3, #2
 8008158:	e000      	b.n	800815c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	3718      	adds	r7, #24
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800816c:	2340      	movs	r3, #64	; 0x40
 800816e:	2200      	movs	r2, #0
 8008170:	2100      	movs	r1, #0
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f001 f9e9 	bl	800954a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2240      	movs	r2, #64	; 0x40
 8008184:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008188:	2340      	movs	r3, #64	; 0x40
 800818a:	2200      	movs	r2, #0
 800818c:	2180      	movs	r1, #128	; 0x80
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f001 f9db 	bl	800954a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2240      	movs	r2, #64	; 0x40
 800819e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d009      	beq.n	80081dc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	6852      	ldr	r2, [r2, #4]
 80081d4:	b2d2      	uxtb	r2, r2
 80081d6:	4611      	mov	r1, r2
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	4798      	blx	r3
  }

  return USBD_OK;
 80081dc:	2300      	movs	r3, #0
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3708      	adds	r7, #8
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80081e6:	b480      	push	{r7}
 80081e8:	b083      	sub	sp, #12
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	460b      	mov	r3, r1
 80081f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	78fa      	ldrb	r2, [r7, #3]
 80081f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	370c      	adds	r7, #12
 80081fe:	46bd      	mov	sp, r7
 8008200:	bc80      	pop	{r7}
 8008202:	4770      	bx	lr

08008204 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2204      	movs	r2, #4
 800821c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	370c      	adds	r7, #12
 8008226:	46bd      	mov	sp, r7
 8008228:	bc80      	pop	{r7}
 800822a:	4770      	bx	lr

0800822c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800823a:	2b04      	cmp	r3, #4
 800823c:	d105      	bne.n	800824a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	370c      	adds	r7, #12
 8008250:	46bd      	mov	sp, r7
 8008252:	bc80      	pop	{r7}
 8008254:	4770      	bx	lr

08008256 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b082      	sub	sp, #8
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008264:	2b03      	cmp	r3, #3
 8008266:	d10b      	bne.n	8008280 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800826e:	69db      	ldr	r3, [r3, #28]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d005      	beq.n	8008280 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800827a:	69db      	ldr	r3, [r3, #28]
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
	...

0800828c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008296:	2300      	movs	r3, #0
 8008298:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082a2:	2b40      	cmp	r3, #64	; 0x40
 80082a4:	d005      	beq.n	80082b2 <USBD_StdDevReq+0x26>
 80082a6:	2b40      	cmp	r3, #64	; 0x40
 80082a8:	d84f      	bhi.n	800834a <USBD_StdDevReq+0xbe>
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d009      	beq.n	80082c2 <USBD_StdDevReq+0x36>
 80082ae:	2b20      	cmp	r3, #32
 80082b0:	d14b      	bne.n	800834a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	6839      	ldr	r1, [r7, #0]
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	4798      	blx	r3
      break;
 80082c0:	e048      	b.n	8008354 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	785b      	ldrb	r3, [r3, #1]
 80082c6:	2b09      	cmp	r3, #9
 80082c8:	d839      	bhi.n	800833e <USBD_StdDevReq+0xb2>
 80082ca:	a201      	add	r2, pc, #4	; (adr r2, 80082d0 <USBD_StdDevReq+0x44>)
 80082cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d0:	08008321 	.word	0x08008321
 80082d4:	08008335 	.word	0x08008335
 80082d8:	0800833f 	.word	0x0800833f
 80082dc:	0800832b 	.word	0x0800832b
 80082e0:	0800833f 	.word	0x0800833f
 80082e4:	08008303 	.word	0x08008303
 80082e8:	080082f9 	.word	0x080082f9
 80082ec:	0800833f 	.word	0x0800833f
 80082f0:	08008317 	.word	0x08008317
 80082f4:	0800830d 	.word	0x0800830d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80082f8:	6839      	ldr	r1, [r7, #0]
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 f9dc 	bl	80086b8 <USBD_GetDescriptor>
          break;
 8008300:	e022      	b.n	8008348 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008302:	6839      	ldr	r1, [r7, #0]
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 fb3f 	bl	8008988 <USBD_SetAddress>
          break;
 800830a:	e01d      	b.n	8008348 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800830c:	6839      	ldr	r1, [r7, #0]
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fb7e 	bl	8008a10 <USBD_SetConfig>
          break;
 8008314:	e018      	b.n	8008348 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008316:	6839      	ldr	r1, [r7, #0]
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 fc07 	bl	8008b2c <USBD_GetConfig>
          break;
 800831e:	e013      	b.n	8008348 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008320:	6839      	ldr	r1, [r7, #0]
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 fc37 	bl	8008b96 <USBD_GetStatus>
          break;
 8008328:	e00e      	b.n	8008348 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800832a:	6839      	ldr	r1, [r7, #0]
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 fc65 	bl	8008bfc <USBD_SetFeature>
          break;
 8008332:	e009      	b.n	8008348 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008334:	6839      	ldr	r1, [r7, #0]
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 fc74 	bl	8008c24 <USBD_ClrFeature>
          break;
 800833c:	e004      	b.n	8008348 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800833e:	6839      	ldr	r1, [r7, #0]
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 fccc 	bl	8008cde <USBD_CtlError>
          break;
 8008346:	bf00      	nop
      }
      break;
 8008348:	e004      	b.n	8008354 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800834a:	6839      	ldr	r1, [r7, #0]
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 fcc6 	bl	8008cde <USBD_CtlError>
      break;
 8008352:	bf00      	nop
  }

  return ret;
 8008354:	7bfb      	ldrb	r3, [r7, #15]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop

08008360 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800836a:	2300      	movs	r3, #0
 800836c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008376:	2b40      	cmp	r3, #64	; 0x40
 8008378:	d005      	beq.n	8008386 <USBD_StdItfReq+0x26>
 800837a:	2b40      	cmp	r3, #64	; 0x40
 800837c:	d82e      	bhi.n	80083dc <USBD_StdItfReq+0x7c>
 800837e:	2b00      	cmp	r3, #0
 8008380:	d001      	beq.n	8008386 <USBD_StdItfReq+0x26>
 8008382:	2b20      	cmp	r3, #32
 8008384:	d12a      	bne.n	80083dc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800838c:	3b01      	subs	r3, #1
 800838e:	2b02      	cmp	r3, #2
 8008390:	d81d      	bhi.n	80083ce <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	889b      	ldrh	r3, [r3, #4]
 8008396:	b2db      	uxtb	r3, r3
 8008398:	2b01      	cmp	r3, #1
 800839a:	d813      	bhi.n	80083c4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	6839      	ldr	r1, [r7, #0]
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	4798      	blx	r3
 80083aa:	4603      	mov	r3, r0
 80083ac:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	88db      	ldrh	r3, [r3, #6]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d110      	bne.n	80083d8 <USBD_StdItfReq+0x78>
 80083b6:	7bfb      	ldrb	r3, [r7, #15]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d10d      	bne.n	80083d8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f000 fd56 	bl	8008e6e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80083c2:	e009      	b.n	80083d8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80083c4:	6839      	ldr	r1, [r7, #0]
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fc89 	bl	8008cde <USBD_CtlError>
          break;
 80083cc:	e004      	b.n	80083d8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80083ce:	6839      	ldr	r1, [r7, #0]
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 fc84 	bl	8008cde <USBD_CtlError>
          break;
 80083d6:	e000      	b.n	80083da <USBD_StdItfReq+0x7a>
          break;
 80083d8:	bf00      	nop
      }
      break;
 80083da:	e004      	b.n	80083e6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80083dc:	6839      	ldr	r1, [r7, #0]
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 fc7d 	bl	8008cde <USBD_CtlError>
      break;
 80083e4:	bf00      	nop
  }

  return USBD_OK;
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3710      	adds	r7, #16
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80083fa:	2300      	movs	r3, #0
 80083fc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	889b      	ldrh	r3, [r3, #4]
 8008402:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800840c:	2b40      	cmp	r3, #64	; 0x40
 800840e:	d007      	beq.n	8008420 <USBD_StdEPReq+0x30>
 8008410:	2b40      	cmp	r3, #64	; 0x40
 8008412:	f200 8146 	bhi.w	80086a2 <USBD_StdEPReq+0x2b2>
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00a      	beq.n	8008430 <USBD_StdEPReq+0x40>
 800841a:	2b20      	cmp	r3, #32
 800841c:	f040 8141 	bne.w	80086a2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	6839      	ldr	r1, [r7, #0]
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	4798      	blx	r3
      break;
 800842e:	e13d      	b.n	80086ac <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008438:	2b20      	cmp	r3, #32
 800843a:	d10a      	bne.n	8008452 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	6839      	ldr	r1, [r7, #0]
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	4798      	blx	r3
 800844a:	4603      	mov	r3, r0
 800844c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800844e:	7bfb      	ldrb	r3, [r7, #15]
 8008450:	e12d      	b.n	80086ae <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	785b      	ldrb	r3, [r3, #1]
 8008456:	2b03      	cmp	r3, #3
 8008458:	d007      	beq.n	800846a <USBD_StdEPReq+0x7a>
 800845a:	2b03      	cmp	r3, #3
 800845c:	f300 811b 	bgt.w	8008696 <USBD_StdEPReq+0x2a6>
 8008460:	2b00      	cmp	r3, #0
 8008462:	d072      	beq.n	800854a <USBD_StdEPReq+0x15a>
 8008464:	2b01      	cmp	r3, #1
 8008466:	d03a      	beq.n	80084de <USBD_StdEPReq+0xee>
 8008468:	e115      	b.n	8008696 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008470:	2b02      	cmp	r3, #2
 8008472:	d002      	beq.n	800847a <USBD_StdEPReq+0x8a>
 8008474:	2b03      	cmp	r3, #3
 8008476:	d015      	beq.n	80084a4 <USBD_StdEPReq+0xb4>
 8008478:	e02b      	b.n	80084d2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800847a:	7bbb      	ldrb	r3, [r7, #14]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00c      	beq.n	800849a <USBD_StdEPReq+0xaa>
 8008480:	7bbb      	ldrb	r3, [r7, #14]
 8008482:	2b80      	cmp	r3, #128	; 0x80
 8008484:	d009      	beq.n	800849a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008486:	7bbb      	ldrb	r3, [r7, #14]
 8008488:	4619      	mov	r1, r3
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f001 f8a2 	bl	80095d4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008490:	2180      	movs	r1, #128	; 0x80
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f001 f89e 	bl	80095d4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008498:	e020      	b.n	80084dc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800849a:	6839      	ldr	r1, [r7, #0]
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 fc1e 	bl	8008cde <USBD_CtlError>
              break;
 80084a2:	e01b      	b.n	80084dc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	885b      	ldrh	r3, [r3, #2]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d10e      	bne.n	80084ca <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80084ac:	7bbb      	ldrb	r3, [r7, #14]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00b      	beq.n	80084ca <USBD_StdEPReq+0xda>
 80084b2:	7bbb      	ldrb	r3, [r7, #14]
 80084b4:	2b80      	cmp	r3, #128	; 0x80
 80084b6:	d008      	beq.n	80084ca <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	88db      	ldrh	r3, [r3, #6]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d104      	bne.n	80084ca <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80084c0:	7bbb      	ldrb	r3, [r7, #14]
 80084c2:	4619      	mov	r1, r3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f001 f885 	bl	80095d4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 fccf 	bl	8008e6e <USBD_CtlSendStatus>

              break;
 80084d0:	e004      	b.n	80084dc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80084d2:	6839      	ldr	r1, [r7, #0]
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f000 fc02 	bl	8008cde <USBD_CtlError>
              break;
 80084da:	bf00      	nop
          }
          break;
 80084dc:	e0e0      	b.n	80086a0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	d002      	beq.n	80084ee <USBD_StdEPReq+0xfe>
 80084e8:	2b03      	cmp	r3, #3
 80084ea:	d015      	beq.n	8008518 <USBD_StdEPReq+0x128>
 80084ec:	e026      	b.n	800853c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084ee:	7bbb      	ldrb	r3, [r7, #14]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00c      	beq.n	800850e <USBD_StdEPReq+0x11e>
 80084f4:	7bbb      	ldrb	r3, [r7, #14]
 80084f6:	2b80      	cmp	r3, #128	; 0x80
 80084f8:	d009      	beq.n	800850e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80084fa:	7bbb      	ldrb	r3, [r7, #14]
 80084fc:	4619      	mov	r1, r3
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f001 f868 	bl	80095d4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008504:	2180      	movs	r1, #128	; 0x80
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f001 f864 	bl	80095d4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800850c:	e01c      	b.n	8008548 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800850e:	6839      	ldr	r1, [r7, #0]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fbe4 	bl	8008cde <USBD_CtlError>
              break;
 8008516:	e017      	b.n	8008548 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	885b      	ldrh	r3, [r3, #2]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d112      	bne.n	8008546 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008520:	7bbb      	ldrb	r3, [r7, #14]
 8008522:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008526:	2b00      	cmp	r3, #0
 8008528:	d004      	beq.n	8008534 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800852a:	7bbb      	ldrb	r3, [r7, #14]
 800852c:	4619      	mov	r1, r3
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f001 f86f 	bl	8009612 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 fc9a 	bl	8008e6e <USBD_CtlSendStatus>
              }
              break;
 800853a:	e004      	b.n	8008546 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800853c:	6839      	ldr	r1, [r7, #0]
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 fbcd 	bl	8008cde <USBD_CtlError>
              break;
 8008544:	e000      	b.n	8008548 <USBD_StdEPReq+0x158>
              break;
 8008546:	bf00      	nop
          }
          break;
 8008548:	e0aa      	b.n	80086a0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008550:	2b02      	cmp	r3, #2
 8008552:	d002      	beq.n	800855a <USBD_StdEPReq+0x16a>
 8008554:	2b03      	cmp	r3, #3
 8008556:	d032      	beq.n	80085be <USBD_StdEPReq+0x1ce>
 8008558:	e097      	b.n	800868a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800855a:	7bbb      	ldrb	r3, [r7, #14]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d007      	beq.n	8008570 <USBD_StdEPReq+0x180>
 8008560:	7bbb      	ldrb	r3, [r7, #14]
 8008562:	2b80      	cmp	r3, #128	; 0x80
 8008564:	d004      	beq.n	8008570 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008566:	6839      	ldr	r1, [r7, #0]
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 fbb8 	bl	8008cde <USBD_CtlError>
                break;
 800856e:	e091      	b.n	8008694 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008570:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008574:	2b00      	cmp	r3, #0
 8008576:	da0b      	bge.n	8008590 <USBD_StdEPReq+0x1a0>
 8008578:	7bbb      	ldrb	r3, [r7, #14]
 800857a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800857e:	4613      	mov	r3, r2
 8008580:	009b      	lsls	r3, r3, #2
 8008582:	4413      	add	r3, r2
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	3310      	adds	r3, #16
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	4413      	add	r3, r2
 800858c:	3304      	adds	r3, #4
 800858e:	e00b      	b.n	80085a8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008590:	7bbb      	ldrb	r3, [r7, #14]
 8008592:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008596:	4613      	mov	r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4413      	add	r3, r2
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	4413      	add	r3, r2
 80085a6:	3304      	adds	r3, #4
 80085a8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	2200      	movs	r2, #0
 80085ae:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	2202      	movs	r2, #2
 80085b4:	4619      	mov	r1, r3
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 fbfb 	bl	8008db2 <USBD_CtlSendData>
              break;
 80085bc:	e06a      	b.n	8008694 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80085be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	da11      	bge.n	80085ea <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80085c6:	7bbb      	ldrb	r3, [r7, #14]
 80085c8:	f003 020f 	and.w	r2, r3, #15
 80085cc:	6879      	ldr	r1, [r7, #4]
 80085ce:	4613      	mov	r3, r2
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	4413      	add	r3, r2
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	440b      	add	r3, r1
 80085d8:	3318      	adds	r3, #24
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d117      	bne.n	8008610 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80085e0:	6839      	ldr	r1, [r7, #0]
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 fb7b 	bl	8008cde <USBD_CtlError>
                  break;
 80085e8:	e054      	b.n	8008694 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80085ea:	7bbb      	ldrb	r3, [r7, #14]
 80085ec:	f003 020f 	and.w	r2, r3, #15
 80085f0:	6879      	ldr	r1, [r7, #4]
 80085f2:	4613      	mov	r3, r2
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	4413      	add	r3, r2
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	440b      	add	r3, r1
 80085fc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d104      	bne.n	8008610 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008606:	6839      	ldr	r1, [r7, #0]
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 fb68 	bl	8008cde <USBD_CtlError>
                  break;
 800860e:	e041      	b.n	8008694 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008610:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008614:	2b00      	cmp	r3, #0
 8008616:	da0b      	bge.n	8008630 <USBD_StdEPReq+0x240>
 8008618:	7bbb      	ldrb	r3, [r7, #14]
 800861a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800861e:	4613      	mov	r3, r2
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	4413      	add	r3, r2
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	3310      	adds	r3, #16
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	4413      	add	r3, r2
 800862c:	3304      	adds	r3, #4
 800862e:	e00b      	b.n	8008648 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008630:	7bbb      	ldrb	r3, [r7, #14]
 8008632:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008636:	4613      	mov	r3, r2
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	4413      	add	r3, r2
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	4413      	add	r3, r2
 8008646:	3304      	adds	r3, #4
 8008648:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800864a:	7bbb      	ldrb	r3, [r7, #14]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d002      	beq.n	8008656 <USBD_StdEPReq+0x266>
 8008650:	7bbb      	ldrb	r3, [r7, #14]
 8008652:	2b80      	cmp	r3, #128	; 0x80
 8008654:	d103      	bne.n	800865e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	2200      	movs	r2, #0
 800865a:	601a      	str	r2, [r3, #0]
 800865c:	e00e      	b.n	800867c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800865e:	7bbb      	ldrb	r3, [r7, #14]
 8008660:	4619      	mov	r1, r3
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 fff4 	bl	8009650 <USBD_LL_IsStallEP>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d003      	beq.n	8008676 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	2201      	movs	r2, #1
 8008672:	601a      	str	r2, [r3, #0]
 8008674:	e002      	b.n	800867c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	2200      	movs	r2, #0
 800867a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	2202      	movs	r2, #2
 8008680:	4619      	mov	r1, r3
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 fb95 	bl	8008db2 <USBD_CtlSendData>
              break;
 8008688:	e004      	b.n	8008694 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800868a:	6839      	ldr	r1, [r7, #0]
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 fb26 	bl	8008cde <USBD_CtlError>
              break;
 8008692:	bf00      	nop
          }
          break;
 8008694:	e004      	b.n	80086a0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008696:	6839      	ldr	r1, [r7, #0]
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 fb20 	bl	8008cde <USBD_CtlError>
          break;
 800869e:	bf00      	nop
      }
      break;
 80086a0:	e004      	b.n	80086ac <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80086a2:	6839      	ldr	r1, [r7, #0]
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 fb1a 	bl	8008cde <USBD_CtlError>
      break;
 80086aa:	bf00      	nop
  }

  return ret;
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
	...

080086b8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80086c2:	2300      	movs	r3, #0
 80086c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80086c6:	2300      	movs	r3, #0
 80086c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80086ca:	2300      	movs	r3, #0
 80086cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	885b      	ldrh	r3, [r3, #2]
 80086d2:	0a1b      	lsrs	r3, r3, #8
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	3b01      	subs	r3, #1
 80086d8:	2b06      	cmp	r3, #6
 80086da:	f200 8128 	bhi.w	800892e <USBD_GetDescriptor+0x276>
 80086de:	a201      	add	r2, pc, #4	; (adr r2, 80086e4 <USBD_GetDescriptor+0x2c>)
 80086e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e4:	08008701 	.word	0x08008701
 80086e8:	08008719 	.word	0x08008719
 80086ec:	08008759 	.word	0x08008759
 80086f0:	0800892f 	.word	0x0800892f
 80086f4:	0800892f 	.word	0x0800892f
 80086f8:	080088cf 	.word	0x080088cf
 80086fc:	080088fb 	.word	0x080088fb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	7c12      	ldrb	r2, [r2, #16]
 800870c:	f107 0108 	add.w	r1, r7, #8
 8008710:	4610      	mov	r0, r2
 8008712:	4798      	blx	r3
 8008714:	60f8      	str	r0, [r7, #12]
      break;
 8008716:	e112      	b.n	800893e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	7c1b      	ldrb	r3, [r3, #16]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d10d      	bne.n	800873c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008728:	f107 0208 	add.w	r2, r7, #8
 800872c:	4610      	mov	r0, r2
 800872e:	4798      	blx	r3
 8008730:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	3301      	adds	r3, #1
 8008736:	2202      	movs	r2, #2
 8008738:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800873a:	e100      	b.n	800893e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008744:	f107 0208 	add.w	r2, r7, #8
 8008748:	4610      	mov	r0, r2
 800874a:	4798      	blx	r3
 800874c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	3301      	adds	r3, #1
 8008752:	2202      	movs	r2, #2
 8008754:	701a      	strb	r2, [r3, #0]
      break;
 8008756:	e0f2      	b.n	800893e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	885b      	ldrh	r3, [r3, #2]
 800875c:	b2db      	uxtb	r3, r3
 800875e:	2b05      	cmp	r3, #5
 8008760:	f200 80ac 	bhi.w	80088bc <USBD_GetDescriptor+0x204>
 8008764:	a201      	add	r2, pc, #4	; (adr r2, 800876c <USBD_GetDescriptor+0xb4>)
 8008766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876a:	bf00      	nop
 800876c:	08008785 	.word	0x08008785
 8008770:	080087b9 	.word	0x080087b9
 8008774:	080087ed 	.word	0x080087ed
 8008778:	08008821 	.word	0x08008821
 800877c:	08008855 	.word	0x08008855
 8008780:	08008889 	.word	0x08008889
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d00b      	beq.n	80087a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	7c12      	ldrb	r2, [r2, #16]
 800879c:	f107 0108 	add.w	r1, r7, #8
 80087a0:	4610      	mov	r0, r2
 80087a2:	4798      	blx	r3
 80087a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087a6:	e091      	b.n	80088cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087a8:	6839      	ldr	r1, [r7, #0]
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fa97 	bl	8008cde <USBD_CtlError>
            err++;
 80087b0:	7afb      	ldrb	r3, [r7, #11]
 80087b2:	3301      	adds	r3, #1
 80087b4:	72fb      	strb	r3, [r7, #11]
          break;
 80087b6:	e089      	b.n	80088cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d00b      	beq.n	80087dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	7c12      	ldrb	r2, [r2, #16]
 80087d0:	f107 0108 	add.w	r1, r7, #8
 80087d4:	4610      	mov	r0, r2
 80087d6:	4798      	blx	r3
 80087d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087da:	e077      	b.n	80088cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087dc:	6839      	ldr	r1, [r7, #0]
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 fa7d 	bl	8008cde <USBD_CtlError>
            err++;
 80087e4:	7afb      	ldrb	r3, [r7, #11]
 80087e6:	3301      	adds	r3, #1
 80087e8:	72fb      	strb	r3, [r7, #11]
          break;
 80087ea:	e06f      	b.n	80088cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00b      	beq.n	8008810 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	7c12      	ldrb	r2, [r2, #16]
 8008804:	f107 0108 	add.w	r1, r7, #8
 8008808:	4610      	mov	r0, r2
 800880a:	4798      	blx	r3
 800880c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800880e:	e05d      	b.n	80088cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fa63 	bl	8008cde <USBD_CtlError>
            err++;
 8008818:	7afb      	ldrb	r3, [r7, #11]
 800881a:	3301      	adds	r3, #1
 800881c:	72fb      	strb	r3, [r7, #11]
          break;
 800881e:	e055      	b.n	80088cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00b      	beq.n	8008844 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008832:	691b      	ldr	r3, [r3, #16]
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	7c12      	ldrb	r2, [r2, #16]
 8008838:	f107 0108 	add.w	r1, r7, #8
 800883c:	4610      	mov	r0, r2
 800883e:	4798      	blx	r3
 8008840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008842:	e043      	b.n	80088cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008844:	6839      	ldr	r1, [r7, #0]
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fa49 	bl	8008cde <USBD_CtlError>
            err++;
 800884c:	7afb      	ldrb	r3, [r7, #11]
 800884e:	3301      	adds	r3, #1
 8008850:	72fb      	strb	r3, [r7, #11]
          break;
 8008852:	e03b      	b.n	80088cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800885a:	695b      	ldr	r3, [r3, #20]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00b      	beq.n	8008878 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008866:	695b      	ldr	r3, [r3, #20]
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	7c12      	ldrb	r2, [r2, #16]
 800886c:	f107 0108 	add.w	r1, r7, #8
 8008870:	4610      	mov	r0, r2
 8008872:	4798      	blx	r3
 8008874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008876:	e029      	b.n	80088cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008878:	6839      	ldr	r1, [r7, #0]
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 fa2f 	bl	8008cde <USBD_CtlError>
            err++;
 8008880:	7afb      	ldrb	r3, [r7, #11]
 8008882:	3301      	adds	r3, #1
 8008884:	72fb      	strb	r3, [r7, #11]
          break;
 8008886:	e021      	b.n	80088cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800888e:	699b      	ldr	r3, [r3, #24]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d00b      	beq.n	80088ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800889a:	699b      	ldr	r3, [r3, #24]
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	7c12      	ldrb	r2, [r2, #16]
 80088a0:	f107 0108 	add.w	r1, r7, #8
 80088a4:	4610      	mov	r0, r2
 80088a6:	4798      	blx	r3
 80088a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088aa:	e00f      	b.n	80088cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088ac:	6839      	ldr	r1, [r7, #0]
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 fa15 	bl	8008cde <USBD_CtlError>
            err++;
 80088b4:	7afb      	ldrb	r3, [r7, #11]
 80088b6:	3301      	adds	r3, #1
 80088b8:	72fb      	strb	r3, [r7, #11]
          break;
 80088ba:	e007      	b.n	80088cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80088bc:	6839      	ldr	r1, [r7, #0]
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 fa0d 	bl	8008cde <USBD_CtlError>
          err++;
 80088c4:	7afb      	ldrb	r3, [r7, #11]
 80088c6:	3301      	adds	r3, #1
 80088c8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80088ca:	e038      	b.n	800893e <USBD_GetDescriptor+0x286>
 80088cc:	e037      	b.n	800893e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	7c1b      	ldrb	r3, [r3, #16]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d109      	bne.n	80088ea <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088de:	f107 0208 	add.w	r2, r7, #8
 80088e2:	4610      	mov	r0, r2
 80088e4:	4798      	blx	r3
 80088e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088e8:	e029      	b.n	800893e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80088ea:	6839      	ldr	r1, [r7, #0]
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 f9f6 	bl	8008cde <USBD_CtlError>
        err++;
 80088f2:	7afb      	ldrb	r3, [r7, #11]
 80088f4:	3301      	adds	r3, #1
 80088f6:	72fb      	strb	r3, [r7, #11]
      break;
 80088f8:	e021      	b.n	800893e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	7c1b      	ldrb	r3, [r3, #16]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10d      	bne.n	800891e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800890a:	f107 0208 	add.w	r2, r7, #8
 800890e:	4610      	mov	r0, r2
 8008910:	4798      	blx	r3
 8008912:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	3301      	adds	r3, #1
 8008918:	2207      	movs	r2, #7
 800891a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800891c:	e00f      	b.n	800893e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800891e:	6839      	ldr	r1, [r7, #0]
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 f9dc 	bl	8008cde <USBD_CtlError>
        err++;
 8008926:	7afb      	ldrb	r3, [r7, #11]
 8008928:	3301      	adds	r3, #1
 800892a:	72fb      	strb	r3, [r7, #11]
      break;
 800892c:	e007      	b.n	800893e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800892e:	6839      	ldr	r1, [r7, #0]
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 f9d4 	bl	8008cde <USBD_CtlError>
      err++;
 8008936:	7afb      	ldrb	r3, [r7, #11]
 8008938:	3301      	adds	r3, #1
 800893a:	72fb      	strb	r3, [r7, #11]
      break;
 800893c:	bf00      	nop
  }

  if (err != 0U)
 800893e:	7afb      	ldrb	r3, [r7, #11]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d11c      	bne.n	800897e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008944:	893b      	ldrh	r3, [r7, #8]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d011      	beq.n	800896e <USBD_GetDescriptor+0x2b6>
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	88db      	ldrh	r3, [r3, #6]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00d      	beq.n	800896e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	88da      	ldrh	r2, [r3, #6]
 8008956:	893b      	ldrh	r3, [r7, #8]
 8008958:	4293      	cmp	r3, r2
 800895a:	bf28      	it	cs
 800895c:	4613      	movcs	r3, r2
 800895e:	b29b      	uxth	r3, r3
 8008960:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008962:	893b      	ldrh	r3, [r7, #8]
 8008964:	461a      	mov	r2, r3
 8008966:	68f9      	ldr	r1, [r7, #12]
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 fa22 	bl	8008db2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	88db      	ldrh	r3, [r3, #6]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d104      	bne.n	8008980 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 fa79 	bl	8008e6e <USBD_CtlSendStatus>
 800897c:	e000      	b.n	8008980 <USBD_GetDescriptor+0x2c8>
    return;
 800897e:	bf00      	nop
    }
  }
}
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop

08008988 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	889b      	ldrh	r3, [r3, #4]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d130      	bne.n	80089fc <USBD_SetAddress+0x74>
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	88db      	ldrh	r3, [r3, #6]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d12c      	bne.n	80089fc <USBD_SetAddress+0x74>
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	885b      	ldrh	r3, [r3, #2]
 80089a6:	2b7f      	cmp	r3, #127	; 0x7f
 80089a8:	d828      	bhi.n	80089fc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	885b      	ldrh	r3, [r3, #2]
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089bc:	2b03      	cmp	r3, #3
 80089be:	d104      	bne.n	80089ca <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80089c0:	6839      	ldr	r1, [r7, #0]
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 f98b 	bl	8008cde <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089c8:	e01d      	b.n	8008a06 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	7bfa      	ldrb	r2, [r7, #15]
 80089ce:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80089d2:	7bfb      	ldrb	r3, [r7, #15]
 80089d4:	4619      	mov	r1, r3
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 fe66 	bl	80096a8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fa46 	bl	8008e6e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80089e2:	7bfb      	ldrb	r3, [r7, #15]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d004      	beq.n	80089f2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2202      	movs	r2, #2
 80089ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089f0:	e009      	b.n	8008a06 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2201      	movs	r2, #1
 80089f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089fa:	e004      	b.n	8008a06 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80089fc:	6839      	ldr	r1, [r7, #0]
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 f96d 	bl	8008cde <USBD_CtlError>
  }
}
 8008a04:	bf00      	nop
 8008a06:	bf00      	nop
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
	...

08008a10 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	885b      	ldrh	r3, [r3, #2]
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	4b41      	ldr	r3, [pc, #260]	; (8008b28 <USBD_SetConfig+0x118>)
 8008a22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008a24:	4b40      	ldr	r3, [pc, #256]	; (8008b28 <USBD_SetConfig+0x118>)
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d904      	bls.n	8008a36 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008a2c:	6839      	ldr	r1, [r7, #0]
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 f955 	bl	8008cde <USBD_CtlError>
 8008a34:	e075      	b.n	8008b22 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	d002      	beq.n	8008a46 <USBD_SetConfig+0x36>
 8008a40:	2b03      	cmp	r3, #3
 8008a42:	d023      	beq.n	8008a8c <USBD_SetConfig+0x7c>
 8008a44:	e062      	b.n	8008b0c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008a46:	4b38      	ldr	r3, [pc, #224]	; (8008b28 <USBD_SetConfig+0x118>)
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d01a      	beq.n	8008a84 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008a4e:	4b36      	ldr	r3, [pc, #216]	; (8008b28 <USBD_SetConfig+0x118>)
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	461a      	mov	r2, r3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2203      	movs	r2, #3
 8008a5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008a60:	4b31      	ldr	r3, [pc, #196]	; (8008b28 <USBD_SetConfig+0x118>)
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	4619      	mov	r1, r3
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f7ff f9e7 	bl	8007e3a <USBD_SetClassConfig>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	d104      	bne.n	8008a7c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008a72:	6839      	ldr	r1, [r7, #0]
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 f932 	bl	8008cde <USBD_CtlError>
            return;
 8008a7a:	e052      	b.n	8008b22 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 f9f6 	bl	8008e6e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008a82:	e04e      	b.n	8008b22 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 f9f2 	bl	8008e6e <USBD_CtlSendStatus>
        break;
 8008a8a:	e04a      	b.n	8008b22 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008a8c:	4b26      	ldr	r3, [pc, #152]	; (8008b28 <USBD_SetConfig+0x118>)
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d112      	bne.n	8008aba <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2202      	movs	r2, #2
 8008a98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008a9c:	4b22      	ldr	r3, [pc, #136]	; (8008b28 <USBD_SetConfig+0x118>)
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008aa6:	4b20      	ldr	r3, [pc, #128]	; (8008b28 <USBD_SetConfig+0x118>)
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	4619      	mov	r1, r3
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f7ff f9e3 	bl	8007e78 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 f9db 	bl	8008e6e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008ab8:	e033      	b.n	8008b22 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008aba:	4b1b      	ldr	r3, [pc, #108]	; (8008b28 <USBD_SetConfig+0x118>)
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	461a      	mov	r2, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d01d      	beq.n	8008b04 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	4619      	mov	r1, r3
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f7ff f9d1 	bl	8007e78 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008ad6:	4b14      	ldr	r3, [pc, #80]	; (8008b28 <USBD_SetConfig+0x118>)
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	461a      	mov	r2, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008ae0:	4b11      	ldr	r3, [pc, #68]	; (8008b28 <USBD_SetConfig+0x118>)
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f7ff f9a7 	bl	8007e3a <USBD_SetClassConfig>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d104      	bne.n	8008afc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008af2:	6839      	ldr	r1, [r7, #0]
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 f8f2 	bl	8008cde <USBD_CtlError>
            return;
 8008afa:	e012      	b.n	8008b22 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 f9b6 	bl	8008e6e <USBD_CtlSendStatus>
        break;
 8008b02:	e00e      	b.n	8008b22 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 f9b2 	bl	8008e6e <USBD_CtlSendStatus>
        break;
 8008b0a:	e00a      	b.n	8008b22 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008b0c:	6839      	ldr	r1, [r7, #0]
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 f8e5 	bl	8008cde <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008b14:	4b04      	ldr	r3, [pc, #16]	; (8008b28 <USBD_SetConfig+0x118>)
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	4619      	mov	r1, r3
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f7ff f9ac 	bl	8007e78 <USBD_ClrClassConfig>
        break;
 8008b20:	bf00      	nop
    }
  }
}
 8008b22:	3708      	adds	r7, #8
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	2000049c 	.word	0x2000049c

08008b2c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	88db      	ldrh	r3, [r3, #6]
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d004      	beq.n	8008b48 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008b3e:	6839      	ldr	r1, [r7, #0]
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 f8cc 	bl	8008cde <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008b46:	e022      	b.n	8008b8e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	dc02      	bgt.n	8008b58 <USBD_GetConfig+0x2c>
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	dc03      	bgt.n	8008b5e <USBD_GetConfig+0x32>
 8008b56:	e015      	b.n	8008b84 <USBD_GetConfig+0x58>
 8008b58:	2b03      	cmp	r3, #3
 8008b5a:	d00b      	beq.n	8008b74 <USBD_GetConfig+0x48>
 8008b5c:	e012      	b.n	8008b84 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	3308      	adds	r3, #8
 8008b68:	2201      	movs	r2, #1
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 f920 	bl	8008db2 <USBD_CtlSendData>
        break;
 8008b72:	e00c      	b.n	8008b8e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	3304      	adds	r3, #4
 8008b78:	2201      	movs	r2, #1
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 f918 	bl	8008db2 <USBD_CtlSendData>
        break;
 8008b82:	e004      	b.n	8008b8e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008b84:	6839      	ldr	r1, [r7, #0]
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 f8a9 	bl	8008cde <USBD_CtlError>
        break;
 8008b8c:	bf00      	nop
}
 8008b8e:	bf00      	nop
 8008b90:	3708      	adds	r7, #8
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b082      	sub	sp, #8
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
 8008b9e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	d81e      	bhi.n	8008bea <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	88db      	ldrh	r3, [r3, #6]
 8008bb0:	2b02      	cmp	r3, #2
 8008bb2:	d004      	beq.n	8008bbe <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008bb4:	6839      	ldr	r1, [r7, #0]
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f891 	bl	8008cde <USBD_CtlError>
        break;
 8008bbc:	e01a      	b.n	8008bf4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d005      	beq.n	8008bda <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	f043 0202 	orr.w	r2, r3, #2
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	330c      	adds	r3, #12
 8008bde:	2202      	movs	r2, #2
 8008be0:	4619      	mov	r1, r3
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 f8e5 	bl	8008db2 <USBD_CtlSendData>
      break;
 8008be8:	e004      	b.n	8008bf4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008bea:	6839      	ldr	r1, [r7, #0]
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 f876 	bl	8008cde <USBD_CtlError>
      break;
 8008bf2:	bf00      	nop
  }
}
 8008bf4:	bf00      	nop
 8008bf6:	3708      	adds	r7, #8
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	885b      	ldrh	r3, [r3, #2]
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d106      	bne.n	8008c1c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2201      	movs	r2, #1
 8008c12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 f929 	bl	8008e6e <USBD_CtlSendStatus>
  }
}
 8008c1c:	bf00      	nop
 8008c1e:	3708      	adds	r7, #8
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c34:	3b01      	subs	r3, #1
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	d80b      	bhi.n	8008c52 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	885b      	ldrh	r3, [r3, #2]
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d10c      	bne.n	8008c5c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 f90f 	bl	8008e6e <USBD_CtlSendStatus>
      }
      break;
 8008c50:	e004      	b.n	8008c5c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008c52:	6839      	ldr	r1, [r7, #0]
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 f842 	bl	8008cde <USBD_CtlError>
      break;
 8008c5a:	e000      	b.n	8008c5e <USBD_ClrFeature+0x3a>
      break;
 8008c5c:	bf00      	nop
  }
}
 8008c5e:	bf00      	nop
 8008c60:	3708      	adds	r7, #8
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008c66:	b480      	push	{r7}
 8008c68:	b083      	sub	sp, #12
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
 8008c6e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	781a      	ldrb	r2, [r3, #0]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	785a      	ldrb	r2, [r3, #1]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	3302      	adds	r3, #2
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	b29a      	uxth	r2, r3
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	3303      	adds	r3, #3
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	021b      	lsls	r3, r3, #8
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	4413      	add	r3, r2
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	3304      	adds	r3, #4
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	b29a      	uxth	r2, r3
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	3305      	adds	r3, #5
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	021b      	lsls	r3, r3, #8
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	4413      	add	r3, r2
 8008cb2:	b29a      	uxth	r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	3306      	adds	r3, #6
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	b29a      	uxth	r2, r3
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	3307      	adds	r3, #7
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	021b      	lsls	r3, r3, #8
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	4413      	add	r3, r2
 8008cce:	b29a      	uxth	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	80da      	strh	r2, [r3, #6]

}
 8008cd4:	bf00      	nop
 8008cd6:	370c      	adds	r7, #12
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bc80      	pop	{r7}
 8008cdc:	4770      	bx	lr

08008cde <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b082      	sub	sp, #8
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
 8008ce6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008ce8:	2180      	movs	r1, #128	; 0x80
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 fc72 	bl	80095d4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 fc6e 	bl	80095d4 <USBD_LL_StallEP>
}
 8008cf8:	bf00      	nop
 8008cfa:	3708      	adds	r7, #8
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b086      	sub	sp, #24
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	60b9      	str	r1, [r7, #8]
 8008d0a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d032      	beq.n	8008d7c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f000 f834 	bl	8008d84 <USBD_GetLen>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	3301      	adds	r3, #1
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	005b      	lsls	r3, r3, #1
 8008d24:	b29a      	uxth	r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008d2a:	7dfb      	ldrb	r3, [r7, #23]
 8008d2c:	1c5a      	adds	r2, r3, #1
 8008d2e:	75fa      	strb	r2, [r7, #23]
 8008d30:	461a      	mov	r2, r3
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	4413      	add	r3, r2
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	7812      	ldrb	r2, [r2, #0]
 8008d3a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008d3c:	7dfb      	ldrb	r3, [r7, #23]
 8008d3e:	1c5a      	adds	r2, r3, #1
 8008d40:	75fa      	strb	r2, [r7, #23]
 8008d42:	461a      	mov	r2, r3
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	4413      	add	r3, r2
 8008d48:	2203      	movs	r2, #3
 8008d4a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008d4c:	e012      	b.n	8008d74 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	1c5a      	adds	r2, r3, #1
 8008d52:	60fa      	str	r2, [r7, #12]
 8008d54:	7dfa      	ldrb	r2, [r7, #23]
 8008d56:	1c51      	adds	r1, r2, #1
 8008d58:	75f9      	strb	r1, [r7, #23]
 8008d5a:	4611      	mov	r1, r2
 8008d5c:	68ba      	ldr	r2, [r7, #8]
 8008d5e:	440a      	add	r2, r1
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008d64:	7dfb      	ldrb	r3, [r7, #23]
 8008d66:	1c5a      	adds	r2, r3, #1
 8008d68:	75fa      	strb	r2, [r7, #23]
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	4413      	add	r3, r2
 8008d70:	2200      	movs	r2, #0
 8008d72:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d1e8      	bne.n	8008d4e <USBD_GetString+0x4e>
    }
  }
}
 8008d7c:	bf00      	nop
 8008d7e:	3718      	adds	r7, #24
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008d90:	e005      	b.n	8008d9e <USBD_GetLen+0x1a>
  {
    len++;
 8008d92:	7bfb      	ldrb	r3, [r7, #15]
 8008d94:	3301      	adds	r3, #1
 8008d96:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d1f5      	bne.n	8008d92 <USBD_GetLen+0xe>
  }

  return len;
 8008da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3714      	adds	r7, #20
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bc80      	pop	{r7}
 8008db0:	4770      	bx	lr

08008db2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b084      	sub	sp, #16
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	60f8      	str	r0, [r7, #12]
 8008dba:	60b9      	str	r1, [r7, #8]
 8008dbc:	4613      	mov	r3, r2
 8008dbe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2202      	movs	r2, #2
 8008dc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008dc8:	88fa      	ldrh	r2, [r7, #6]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008dce:	88fa      	ldrh	r2, [r7, #6]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008dd4:	88fb      	ldrh	r3, [r7, #6]
 8008dd6:	68ba      	ldr	r2, [r7, #8]
 8008dd8:	2100      	movs	r1, #0
 8008dda:	68f8      	ldr	r0, [r7, #12]
 8008ddc:	f000 fc83 	bl	80096e6 <USBD_LL_Transmit>

  return USBD_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b084      	sub	sp, #16
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	60f8      	str	r0, [r7, #12]
 8008df2:	60b9      	str	r1, [r7, #8]
 8008df4:	4613      	mov	r3, r2
 8008df6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008df8:	88fb      	ldrh	r3, [r7, #6]
 8008dfa:	68ba      	ldr	r2, [r7, #8]
 8008dfc:	2100      	movs	r1, #0
 8008dfe:	68f8      	ldr	r0, [r7, #12]
 8008e00:	f000 fc71 	bl	80096e6 <USBD_LL_Transmit>

  return USBD_OK;
 8008e04:	2300      	movs	r3, #0
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3710      	adds	r7, #16
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}

08008e0e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008e0e:	b580      	push	{r7, lr}
 8008e10:	b084      	sub	sp, #16
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	60f8      	str	r0, [r7, #12]
 8008e16:	60b9      	str	r1, [r7, #8]
 8008e18:	4613      	mov	r3, r2
 8008e1a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2203      	movs	r2, #3
 8008e20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008e24:	88fa      	ldrh	r2, [r7, #6]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008e2c:	88fa      	ldrh	r2, [r7, #6]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e34:	88fb      	ldrh	r3, [r7, #6]
 8008e36:	68ba      	ldr	r2, [r7, #8]
 8008e38:	2100      	movs	r1, #0
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f000 fc76 	bl	800972c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b084      	sub	sp, #16
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	60f8      	str	r0, [r7, #12]
 8008e52:	60b9      	str	r1, [r7, #8]
 8008e54:	4613      	mov	r3, r2
 8008e56:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e58:	88fb      	ldrh	r3, [r7, #6]
 8008e5a:	68ba      	ldr	r2, [r7, #8]
 8008e5c:	2100      	movs	r1, #0
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	f000 fc64 	bl	800972c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e64:	2300      	movs	r3, #0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b082      	sub	sp, #8
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2204      	movs	r2, #4
 8008e7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008e7e:	2300      	movs	r3, #0
 8008e80:	2200      	movs	r2, #0
 8008e82:	2100      	movs	r1, #0
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 fc2e 	bl	80096e6 <USBD_LL_Transmit>

  return USBD_OK;
 8008e8a:	2300      	movs	r3, #0
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3708      	adds	r7, #8
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2205      	movs	r2, #5
 8008ea0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 fc3e 	bl	800972c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3708      	adds	r7, #8
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
	...

08008ebc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	4912      	ldr	r1, [pc, #72]	; (8008f0c <MX_USB_DEVICE_Init+0x50>)
 8008ec4:	4812      	ldr	r0, [pc, #72]	; (8008f10 <MX_USB_DEVICE_Init+0x54>)
 8008ec6:	f7fe ff5e 	bl	8007d86 <USBD_Init>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d001      	beq.n	8008ed4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ed0:	f7f8 fa00 	bl	80012d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008ed4:	490f      	ldr	r1, [pc, #60]	; (8008f14 <MX_USB_DEVICE_Init+0x58>)
 8008ed6:	480e      	ldr	r0, [pc, #56]	; (8008f10 <MX_USB_DEVICE_Init+0x54>)
 8008ed8:	f7fe ff80 	bl	8007ddc <USBD_RegisterClass>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d001      	beq.n	8008ee6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008ee2:	f7f8 f9f7 	bl	80012d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008ee6:	490c      	ldr	r1, [pc, #48]	; (8008f18 <MX_USB_DEVICE_Init+0x5c>)
 8008ee8:	4809      	ldr	r0, [pc, #36]	; (8008f10 <MX_USB_DEVICE_Init+0x54>)
 8008eea:	f7fe feb1 	bl	8007c50 <USBD_CDC_RegisterInterface>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d001      	beq.n	8008ef8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008ef4:	f7f8 f9ee 	bl	80012d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ef8:	4805      	ldr	r0, [pc, #20]	; (8008f10 <MX_USB_DEVICE_Init+0x54>)
 8008efa:	f7fe ff88 	bl	8007e0e <USBD_Start>
 8008efe:	4603      	mov	r3, r0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d001      	beq.n	8008f08 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008f04:	f7f8 f9e6 	bl	80012d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008f08:	bf00      	nop
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	20000134 	.word	0x20000134
 8008f10:	200004a0 	.word	0x200004a0
 8008f14:	20000020 	.word	0x20000020
 8008f18:	20000124 	.word	0x20000124

08008f1c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008f20:	2200      	movs	r2, #0
 8008f22:	4905      	ldr	r1, [pc, #20]	; (8008f38 <CDC_Init_FS+0x1c>)
 8008f24:	4805      	ldr	r0, [pc, #20]	; (8008f3c <CDC_Init_FS+0x20>)
 8008f26:	f7fe fea9 	bl	8007c7c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008f2a:	4905      	ldr	r1, [pc, #20]	; (8008f40 <CDC_Init_FS+0x24>)
 8008f2c:	4803      	ldr	r0, [pc, #12]	; (8008f3c <CDC_Init_FS+0x20>)
 8008f2e:	f7fe febe 	bl	8007cae <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008f32:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	20000b4c 	.word	0x20000b4c
 8008f3c:	200004a0 	.word	0x200004a0
 8008f40:	20000764 	.word	0x20000764

08008f44 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008f44:	b480      	push	{r7}
 8008f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008f48:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bc80      	pop	{r7}
 8008f50:	4770      	bx	lr
	...

08008f54 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b083      	sub	sp, #12
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	6039      	str	r1, [r7, #0]
 8008f5e:	71fb      	strb	r3, [r7, #7]
 8008f60:	4613      	mov	r3, r2
 8008f62:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008f64:	79fb      	ldrb	r3, [r7, #7]
 8008f66:	2b23      	cmp	r3, #35	; 0x23
 8008f68:	d84a      	bhi.n	8009000 <CDC_Control_FS+0xac>
 8008f6a:	a201      	add	r2, pc, #4	; (adr r2, 8008f70 <CDC_Control_FS+0x1c>)
 8008f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f70:	08009001 	.word	0x08009001
 8008f74:	08009001 	.word	0x08009001
 8008f78:	08009001 	.word	0x08009001
 8008f7c:	08009001 	.word	0x08009001
 8008f80:	08009001 	.word	0x08009001
 8008f84:	08009001 	.word	0x08009001
 8008f88:	08009001 	.word	0x08009001
 8008f8c:	08009001 	.word	0x08009001
 8008f90:	08009001 	.word	0x08009001
 8008f94:	08009001 	.word	0x08009001
 8008f98:	08009001 	.word	0x08009001
 8008f9c:	08009001 	.word	0x08009001
 8008fa0:	08009001 	.word	0x08009001
 8008fa4:	08009001 	.word	0x08009001
 8008fa8:	08009001 	.word	0x08009001
 8008fac:	08009001 	.word	0x08009001
 8008fb0:	08009001 	.word	0x08009001
 8008fb4:	08009001 	.word	0x08009001
 8008fb8:	08009001 	.word	0x08009001
 8008fbc:	08009001 	.word	0x08009001
 8008fc0:	08009001 	.word	0x08009001
 8008fc4:	08009001 	.word	0x08009001
 8008fc8:	08009001 	.word	0x08009001
 8008fcc:	08009001 	.word	0x08009001
 8008fd0:	08009001 	.word	0x08009001
 8008fd4:	08009001 	.word	0x08009001
 8008fd8:	08009001 	.word	0x08009001
 8008fdc:	08009001 	.word	0x08009001
 8008fe0:	08009001 	.word	0x08009001
 8008fe4:	08009001 	.word	0x08009001
 8008fe8:	08009001 	.word	0x08009001
 8008fec:	08009001 	.word	0x08009001
 8008ff0:	08009001 	.word	0x08009001
 8008ff4:	08009001 	.word	0x08009001
 8008ff8:	08009001 	.word	0x08009001
 8008ffc:	08009001 	.word	0x08009001
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009000:	bf00      	nop
  }

  return (USBD_OK);
 8009002:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009004:	4618      	mov	r0, r3
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	bc80      	pop	{r7}
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop

08009010 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(rxFlag == 0)
 800901a:	4b13      	ldr	r3, [pc, #76]	; (8009068 <CDC_Receive_FS+0x58>)
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d11d      	bne.n	800905e <CDC_Receive_FS+0x4e>
	{
	  memset (RXbuffer,'\0', 70);
 8009022:	2246      	movs	r2, #70	; 0x46
 8009024:	2100      	movs	r1, #0
 8009026:	4811      	ldr	r0, [pc, #68]	; (800906c <CDC_Receive_FS+0x5c>)
 8009028:	f000 fc3a 	bl	80098a0 <memset>
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800902c:	6879      	ldr	r1, [r7, #4]
 800902e:	4810      	ldr	r0, [pc, #64]	; (8009070 <CDC_Receive_FS+0x60>)
 8009030:	f7fe fe3d 	bl	8007cae <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009034:	480e      	ldr	r0, [pc, #56]	; (8009070 <CDC_Receive_FS+0x60>)
 8009036:	f7fe fe7c 	bl	8007d32 <USBD_CDC_ReceivePacket>
	  uint8_t len = (uint8_t) *Len;
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	73fb      	strb	r3, [r7, #15]
	  memcpy (RXbuffer,Buf,len);
 8009040:	7bfb      	ldrb	r3, [r7, #15]
 8009042:	461a      	mov	r2, r3
 8009044:	6879      	ldr	r1, [r7, #4]
 8009046:	4809      	ldr	r0, [pc, #36]	; (800906c <CDC_Receive_FS+0x5c>)
 8009048:	f000 fc1c 	bl	8009884 <memcpy>
	  memset (Buf,'\0',len);
 800904c:	7bfb      	ldrb	r3, [r7, #15]
 800904e:	461a      	mov	r2, r3
 8009050:	2100      	movs	r1, #0
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fc24 	bl	80098a0 <memset>
	/*  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);*/
	  rxFlag = 1;
 8009058:	4b03      	ldr	r3, [pc, #12]	; (8009068 <CDC_Receive_FS+0x58>)
 800905a:	2201      	movs	r2, #1
 800905c:	701a      	strb	r2, [r3, #0]
	}
	return (USBD_OK);
 800905e:	2300      	movs	r3, #0


  /* USER CODE END 6 */
}
 8009060:	4618      	mov	r0, r3
 8009062:	3710      	adds	r7, #16
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}
 8009068:	200002e1 	.word	0x200002e1
 800906c:	200002e4 	.word	0x200002e4
 8009070:	200004a0 	.word	0x200004a0

08009074 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	460b      	mov	r3, r1
 800907e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009080:	2300      	movs	r3, #0
 8009082:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009084:	4b0d      	ldr	r3, [pc, #52]	; (80090bc <CDC_Transmit_FS+0x48>)
 8009086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800908a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009092:	2b00      	cmp	r3, #0
 8009094:	d001      	beq.n	800909a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009096:	2301      	movs	r3, #1
 8009098:	e00b      	b.n	80090b2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800909a:	887b      	ldrh	r3, [r7, #2]
 800909c:	461a      	mov	r2, r3
 800909e:	6879      	ldr	r1, [r7, #4]
 80090a0:	4806      	ldr	r0, [pc, #24]	; (80090bc <CDC_Transmit_FS+0x48>)
 80090a2:	f7fe fdeb 	bl	8007c7c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80090a6:	4805      	ldr	r0, [pc, #20]	; (80090bc <CDC_Transmit_FS+0x48>)
 80090a8:	f7fe fe14 	bl	8007cd4 <USBD_CDC_TransmitPacket>
 80090ac:	4603      	mov	r3, r0
 80090ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80090b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	200004a0 	.word	0x200004a0

080090c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	4603      	mov	r3, r0
 80090c8:	6039      	str	r1, [r7, #0]
 80090ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	2212      	movs	r2, #18
 80090d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80090d2:	4b03      	ldr	r3, [pc, #12]	; (80090e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	370c      	adds	r7, #12
 80090d8:	46bd      	mov	sp, r7
 80090da:	bc80      	pop	{r7}
 80090dc:	4770      	bx	lr
 80090de:	bf00      	nop
 80090e0:	20000150 	.word	0x20000150

080090e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	4603      	mov	r3, r0
 80090ec:	6039      	str	r1, [r7, #0]
 80090ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	2204      	movs	r2, #4
 80090f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80090f6:	4b03      	ldr	r3, [pc, #12]	; (8009104 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bc80      	pop	{r7}
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	20000164 	.word	0x20000164

08009108 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b082      	sub	sp, #8
 800910c:	af00      	add	r7, sp, #0
 800910e:	4603      	mov	r3, r0
 8009110:	6039      	str	r1, [r7, #0]
 8009112:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009114:	79fb      	ldrb	r3, [r7, #7]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d105      	bne.n	8009126 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800911a:	683a      	ldr	r2, [r7, #0]
 800911c:	4907      	ldr	r1, [pc, #28]	; (800913c <USBD_FS_ProductStrDescriptor+0x34>)
 800911e:	4808      	ldr	r0, [pc, #32]	; (8009140 <USBD_FS_ProductStrDescriptor+0x38>)
 8009120:	f7ff fdee 	bl	8008d00 <USBD_GetString>
 8009124:	e004      	b.n	8009130 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009126:	683a      	ldr	r2, [r7, #0]
 8009128:	4904      	ldr	r1, [pc, #16]	; (800913c <USBD_FS_ProductStrDescriptor+0x34>)
 800912a:	4805      	ldr	r0, [pc, #20]	; (8009140 <USBD_FS_ProductStrDescriptor+0x38>)
 800912c:	f7ff fde8 	bl	8008d00 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009130:	4b02      	ldr	r3, [pc, #8]	; (800913c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009132:	4618      	mov	r0, r3
 8009134:	3708      	adds	r7, #8
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	20000f34 	.word	0x20000f34
 8009140:	0800a864 	.word	0x0800a864

08009144 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	4603      	mov	r3, r0
 800914c:	6039      	str	r1, [r7, #0]
 800914e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009150:	683a      	ldr	r2, [r7, #0]
 8009152:	4904      	ldr	r1, [pc, #16]	; (8009164 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009154:	4804      	ldr	r0, [pc, #16]	; (8009168 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009156:	f7ff fdd3 	bl	8008d00 <USBD_GetString>
  return USBD_StrDesc;
 800915a:	4b02      	ldr	r3, [pc, #8]	; (8009164 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800915c:	4618      	mov	r0, r3
 800915e:	3708      	adds	r7, #8
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}
 8009164:	20000f34 	.word	0x20000f34
 8009168:	0800a87c 	.word	0x0800a87c

0800916c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	4603      	mov	r3, r0
 8009174:	6039      	str	r1, [r7, #0]
 8009176:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	221a      	movs	r2, #26
 800917c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800917e:	f000 f843 	bl	8009208 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009182:	4b02      	ldr	r3, [pc, #8]	; (800918c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009184:	4618      	mov	r0, r3
 8009186:	3708      	adds	r7, #8
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	20000168 	.word	0x20000168

08009190 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
 8009196:	4603      	mov	r3, r0
 8009198:	6039      	str	r1, [r7, #0]
 800919a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800919c:	79fb      	ldrb	r3, [r7, #7]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d105      	bne.n	80091ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80091a2:	683a      	ldr	r2, [r7, #0]
 80091a4:	4907      	ldr	r1, [pc, #28]	; (80091c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80091a6:	4808      	ldr	r0, [pc, #32]	; (80091c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80091a8:	f7ff fdaa 	bl	8008d00 <USBD_GetString>
 80091ac:	e004      	b.n	80091b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80091ae:	683a      	ldr	r2, [r7, #0]
 80091b0:	4904      	ldr	r1, [pc, #16]	; (80091c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80091b2:	4805      	ldr	r0, [pc, #20]	; (80091c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80091b4:	f7ff fda4 	bl	8008d00 <USBD_GetString>
  }
  return USBD_StrDesc;
 80091b8:	4b02      	ldr	r3, [pc, #8]	; (80091c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3708      	adds	r7, #8
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	20000f34 	.word	0x20000f34
 80091c8:	0800a890 	.word	0x0800a890

080091cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	4603      	mov	r3, r0
 80091d4:	6039      	str	r1, [r7, #0]
 80091d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80091d8:	79fb      	ldrb	r3, [r7, #7]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d105      	bne.n	80091ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80091de:	683a      	ldr	r2, [r7, #0]
 80091e0:	4907      	ldr	r1, [pc, #28]	; (8009200 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80091e2:	4808      	ldr	r0, [pc, #32]	; (8009204 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80091e4:	f7ff fd8c 	bl	8008d00 <USBD_GetString>
 80091e8:	e004      	b.n	80091f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80091ea:	683a      	ldr	r2, [r7, #0]
 80091ec:	4904      	ldr	r1, [pc, #16]	; (8009200 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80091ee:	4805      	ldr	r0, [pc, #20]	; (8009204 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80091f0:	f7ff fd86 	bl	8008d00 <USBD_GetString>
  }
  return USBD_StrDesc;
 80091f4:	4b02      	ldr	r3, [pc, #8]	; (8009200 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3708      	adds	r7, #8
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	20000f34 	.word	0x20000f34
 8009204:	0800a89c 	.word	0x0800a89c

08009208 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800920e:	4b0f      	ldr	r3, [pc, #60]	; (800924c <Get_SerialNum+0x44>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009214:	4b0e      	ldr	r3, [pc, #56]	; (8009250 <Get_SerialNum+0x48>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800921a:	4b0e      	ldr	r3, [pc, #56]	; (8009254 <Get_SerialNum+0x4c>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009220:	68fa      	ldr	r2, [r7, #12]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4413      	add	r3, r2
 8009226:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d009      	beq.n	8009242 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800922e:	2208      	movs	r2, #8
 8009230:	4909      	ldr	r1, [pc, #36]	; (8009258 <Get_SerialNum+0x50>)
 8009232:	68f8      	ldr	r0, [r7, #12]
 8009234:	f000 f814 	bl	8009260 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009238:	2204      	movs	r2, #4
 800923a:	4908      	ldr	r1, [pc, #32]	; (800925c <Get_SerialNum+0x54>)
 800923c:	68b8      	ldr	r0, [r7, #8]
 800923e:	f000 f80f 	bl	8009260 <IntToUnicode>
  }
}
 8009242:	bf00      	nop
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	1ffff7e8 	.word	0x1ffff7e8
 8009250:	1ffff7ec 	.word	0x1ffff7ec
 8009254:	1ffff7f0 	.word	0x1ffff7f0
 8009258:	2000016a 	.word	0x2000016a
 800925c:	2000017a 	.word	0x2000017a

08009260 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009260:	b480      	push	{r7}
 8009262:	b087      	sub	sp, #28
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	4613      	mov	r3, r2
 800926c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800926e:	2300      	movs	r3, #0
 8009270:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009272:	2300      	movs	r3, #0
 8009274:	75fb      	strb	r3, [r7, #23]
 8009276:	e027      	b.n	80092c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	0f1b      	lsrs	r3, r3, #28
 800927c:	2b09      	cmp	r3, #9
 800927e:	d80b      	bhi.n	8009298 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	0f1b      	lsrs	r3, r3, #28
 8009284:	b2da      	uxtb	r2, r3
 8009286:	7dfb      	ldrb	r3, [r7, #23]
 8009288:	005b      	lsls	r3, r3, #1
 800928a:	4619      	mov	r1, r3
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	440b      	add	r3, r1
 8009290:	3230      	adds	r2, #48	; 0x30
 8009292:	b2d2      	uxtb	r2, r2
 8009294:	701a      	strb	r2, [r3, #0]
 8009296:	e00a      	b.n	80092ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	0f1b      	lsrs	r3, r3, #28
 800929c:	b2da      	uxtb	r2, r3
 800929e:	7dfb      	ldrb	r3, [r7, #23]
 80092a0:	005b      	lsls	r3, r3, #1
 80092a2:	4619      	mov	r1, r3
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	440b      	add	r3, r1
 80092a8:	3237      	adds	r2, #55	; 0x37
 80092aa:	b2d2      	uxtb	r2, r2
 80092ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	011b      	lsls	r3, r3, #4
 80092b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80092b4:	7dfb      	ldrb	r3, [r7, #23]
 80092b6:	005b      	lsls	r3, r3, #1
 80092b8:	3301      	adds	r3, #1
 80092ba:	68ba      	ldr	r2, [r7, #8]
 80092bc:	4413      	add	r3, r2
 80092be:	2200      	movs	r2, #0
 80092c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80092c2:	7dfb      	ldrb	r3, [r7, #23]
 80092c4:	3301      	adds	r3, #1
 80092c6:	75fb      	strb	r3, [r7, #23]
 80092c8:	7dfa      	ldrb	r2, [r7, #23]
 80092ca:	79fb      	ldrb	r3, [r7, #7]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d3d3      	bcc.n	8009278 <IntToUnicode+0x18>
  }
}
 80092d0:	bf00      	nop
 80092d2:	bf00      	nop
 80092d4:	371c      	adds	r7, #28
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bc80      	pop	{r7}
 80092da:	4770      	bx	lr

080092dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a0d      	ldr	r2, [pc, #52]	; (8009320 <HAL_PCD_MspInit+0x44>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d113      	bne.n	8009316 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80092ee:	4b0d      	ldr	r3, [pc, #52]	; (8009324 <HAL_PCD_MspInit+0x48>)
 80092f0:	69db      	ldr	r3, [r3, #28]
 80092f2:	4a0c      	ldr	r2, [pc, #48]	; (8009324 <HAL_PCD_MspInit+0x48>)
 80092f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80092f8:	61d3      	str	r3, [r2, #28]
 80092fa:	4b0a      	ldr	r3, [pc, #40]	; (8009324 <HAL_PCD_MspInit+0x48>)
 80092fc:	69db      	ldr	r3, [r3, #28]
 80092fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009302:	60fb      	str	r3, [r7, #12]
 8009304:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009306:	2200      	movs	r2, #0
 8009308:	2100      	movs	r1, #0
 800930a:	2014      	movs	r0, #20
 800930c:	f7f8 fafb 	bl	8001906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009310:	2014      	movs	r0, #20
 8009312:	f7f8 fb14 	bl	800193e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009316:	bf00      	nop
 8009318:	3710      	adds	r7, #16
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	40005c00 	.word	0x40005c00
 8009324:	40021000 	.word	0x40021000

08009328 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800933c:	4619      	mov	r1, r3
 800933e:	4610      	mov	r0, r2
 8009340:	f7fe fdad 	bl	8007e9e <USBD_LL_SetupStage>
}
 8009344:	bf00      	nop
 8009346:	3708      	adds	r7, #8
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	460b      	mov	r3, r1
 8009356:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800935e:	78fa      	ldrb	r2, [r7, #3]
 8009360:	6879      	ldr	r1, [r7, #4]
 8009362:	4613      	mov	r3, r2
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	4413      	add	r3, r2
 8009368:	00db      	lsls	r3, r3, #3
 800936a:	440b      	add	r3, r1
 800936c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	78fb      	ldrb	r3, [r7, #3]
 8009374:	4619      	mov	r1, r3
 8009376:	f7fe fddf 	bl	8007f38 <USBD_LL_DataOutStage>
}
 800937a:	bf00      	nop
 800937c:	3708      	adds	r7, #8
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009382:	b580      	push	{r7, lr}
 8009384:	b082      	sub	sp, #8
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
 800938a:	460b      	mov	r3, r1
 800938c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009394:	78fa      	ldrb	r2, [r7, #3]
 8009396:	6879      	ldr	r1, [r7, #4]
 8009398:	4613      	mov	r3, r2
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	4413      	add	r3, r2
 800939e:	00db      	lsls	r3, r3, #3
 80093a0:	440b      	add	r3, r1
 80093a2:	333c      	adds	r3, #60	; 0x3c
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	78fb      	ldrb	r3, [r7, #3]
 80093a8:	4619      	mov	r1, r3
 80093aa:	f7fe fe36 	bl	800801a <USBD_LL_DataInStage>
}
 80093ae:	bf00      	nop
 80093b0:	3708      	adds	r7, #8
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b082      	sub	sp, #8
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80093c4:	4618      	mov	r0, r3
 80093c6:	f7fe ff46 	bl	8008256 <USBD_LL_SOF>
}
 80093ca:	bf00      	nop
 80093cc:	3708      	adds	r7, #8
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}

080093d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093d2:	b580      	push	{r7, lr}
 80093d4:	b084      	sub	sp, #16
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80093da:	2301      	movs	r3, #1
 80093dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	2b02      	cmp	r3, #2
 80093e4:	d001      	beq.n	80093ea <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80093e6:	f7f7 ff75 	bl	80012d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80093f0:	7bfa      	ldrb	r2, [r7, #15]
 80093f2:	4611      	mov	r1, r2
 80093f4:	4618      	mov	r0, r3
 80093f6:	f7fe fef6 	bl	80081e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009400:	4618      	mov	r0, r3
 8009402:	f7fe feaf 	bl	8008164 <USBD_LL_Reset>
}
 8009406:	bf00      	nop
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
	...

08009410 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800941e:	4618      	mov	r0, r3
 8009420:	f7fe fef0 	bl	8008204 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	699b      	ldr	r3, [r3, #24]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d005      	beq.n	8009438 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800942c:	4b04      	ldr	r3, [pc, #16]	; (8009440 <HAL_PCD_SuspendCallback+0x30>)
 800942e:	691b      	ldr	r3, [r3, #16]
 8009430:	4a03      	ldr	r2, [pc, #12]	; (8009440 <HAL_PCD_SuspendCallback+0x30>)
 8009432:	f043 0306 	orr.w	r3, r3, #6
 8009436:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009438:	bf00      	nop
 800943a:	3708      	adds	r7, #8
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}
 8009440:	e000ed00 	.word	0xe000ed00

08009444 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009452:	4618      	mov	r0, r3
 8009454:	f7fe feea 	bl	800822c <USBD_LL_Resume>
}
 8009458:	bf00      	nop
 800945a:	3708      	adds	r7, #8
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009468:	4a28      	ldr	r2, [pc, #160]	; (800950c <USBD_LL_Init+0xac>)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a26      	ldr	r2, [pc, #152]	; (800950c <USBD_LL_Init+0xac>)
 8009474:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009478:	4b24      	ldr	r3, [pc, #144]	; (800950c <USBD_LL_Init+0xac>)
 800947a:	4a25      	ldr	r2, [pc, #148]	; (8009510 <USBD_LL_Init+0xb0>)
 800947c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800947e:	4b23      	ldr	r3, [pc, #140]	; (800950c <USBD_LL_Init+0xac>)
 8009480:	2208      	movs	r2, #8
 8009482:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009484:	4b21      	ldr	r3, [pc, #132]	; (800950c <USBD_LL_Init+0xac>)
 8009486:	2202      	movs	r2, #2
 8009488:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800948a:	4b20      	ldr	r3, [pc, #128]	; (800950c <USBD_LL_Init+0xac>)
 800948c:	2200      	movs	r2, #0
 800948e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009490:	4b1e      	ldr	r3, [pc, #120]	; (800950c <USBD_LL_Init+0xac>)
 8009492:	2200      	movs	r2, #0
 8009494:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009496:	4b1d      	ldr	r3, [pc, #116]	; (800950c <USBD_LL_Init+0xac>)
 8009498:	2200      	movs	r2, #0
 800949a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800949c:	481b      	ldr	r0, [pc, #108]	; (800950c <USBD_LL_Init+0xac>)
 800949e:	f7f8 fc27 	bl	8001cf0 <HAL_PCD_Init>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d001      	beq.n	80094ac <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80094a8:	f7f7 ff14 	bl	80012d4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80094b2:	2318      	movs	r3, #24
 80094b4:	2200      	movs	r2, #0
 80094b6:	2100      	movs	r1, #0
 80094b8:	f7fa f89b 	bl	80035f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80094c2:	2358      	movs	r3, #88	; 0x58
 80094c4:	2200      	movs	r2, #0
 80094c6:	2180      	movs	r1, #128	; 0x80
 80094c8:	f7fa f893 	bl	80035f2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80094d2:	23c0      	movs	r3, #192	; 0xc0
 80094d4:	2200      	movs	r2, #0
 80094d6:	2181      	movs	r1, #129	; 0x81
 80094d8:	f7fa f88b 	bl	80035f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80094e2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80094e6:	2200      	movs	r2, #0
 80094e8:	2101      	movs	r1, #1
 80094ea:	f7fa f882 	bl	80035f2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80094f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094f8:	2200      	movs	r2, #0
 80094fa:	2182      	movs	r1, #130	; 0x82
 80094fc:	f7fa f879 	bl	80035f2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009500:	2300      	movs	r3, #0
}
 8009502:	4618      	mov	r0, r3
 8009504:	3708      	adds	r7, #8
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
 800950a:	bf00      	nop
 800950c:	20001134 	.word	0x20001134
 8009510:	40005c00 	.word	0x40005c00

08009514 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800951c:	2300      	movs	r3, #0
 800951e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009520:	2300      	movs	r3, #0
 8009522:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800952a:	4618      	mov	r0, r3
 800952c:	f7f8 fceb 	bl	8001f06 <HAL_PCD_Start>
 8009530:	4603      	mov	r3, r0
 8009532:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009534:	7bfb      	ldrb	r3, [r7, #15]
 8009536:	4618      	mov	r0, r3
 8009538:	f000 f94e 	bl	80097d8 <USBD_Get_USB_Status>
 800953c:	4603      	mov	r3, r0
 800953e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009540:	7bbb      	ldrb	r3, [r7, #14]
}
 8009542:	4618      	mov	r0, r3
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b084      	sub	sp, #16
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
 8009552:	4608      	mov	r0, r1
 8009554:	4611      	mov	r1, r2
 8009556:	461a      	mov	r2, r3
 8009558:	4603      	mov	r3, r0
 800955a:	70fb      	strb	r3, [r7, #3]
 800955c:	460b      	mov	r3, r1
 800955e:	70bb      	strb	r3, [r7, #2]
 8009560:	4613      	mov	r3, r2
 8009562:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009564:	2300      	movs	r3, #0
 8009566:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009568:	2300      	movs	r3, #0
 800956a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009572:	78bb      	ldrb	r3, [r7, #2]
 8009574:	883a      	ldrh	r2, [r7, #0]
 8009576:	78f9      	ldrb	r1, [r7, #3]
 8009578:	f7f8 fe63 	bl	8002242 <HAL_PCD_EP_Open>
 800957c:	4603      	mov	r3, r0
 800957e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009580:	7bfb      	ldrb	r3, [r7, #15]
 8009582:	4618      	mov	r0, r3
 8009584:	f000 f928 	bl	80097d8 <USBD_Get_USB_Status>
 8009588:	4603      	mov	r3, r0
 800958a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800958c:	7bbb      	ldrb	r3, [r7, #14]
}
 800958e:	4618      	mov	r0, r3
 8009590:	3710      	adds	r7, #16
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009596:	b580      	push	{r7, lr}
 8009598:	b084      	sub	sp, #16
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
 800959e:	460b      	mov	r3, r1
 80095a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095a2:	2300      	movs	r3, #0
 80095a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095a6:	2300      	movs	r3, #0
 80095a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095b0:	78fa      	ldrb	r2, [r7, #3]
 80095b2:	4611      	mov	r1, r2
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7f8 feaa 	bl	800230e <HAL_PCD_EP_Close>
 80095ba:	4603      	mov	r3, r0
 80095bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095be:	7bfb      	ldrb	r3, [r7, #15]
 80095c0:	4618      	mov	r0, r3
 80095c2:	f000 f909 	bl	80097d8 <USBD_Get_USB_Status>
 80095c6:	4603      	mov	r3, r0
 80095c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3710      	adds	r7, #16
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	460b      	mov	r3, r1
 80095de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095e0:	2300      	movs	r3, #0
 80095e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095e4:	2300      	movs	r3, #0
 80095e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095ee:	78fa      	ldrb	r2, [r7, #3]
 80095f0:	4611      	mov	r1, r2
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7f8 ff6a 	bl	80024cc <HAL_PCD_EP_SetStall>
 80095f8:	4603      	mov	r3, r0
 80095fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095fc:	7bfb      	ldrb	r3, [r7, #15]
 80095fe:	4618      	mov	r0, r3
 8009600:	f000 f8ea 	bl	80097d8 <USBD_Get_USB_Status>
 8009604:	4603      	mov	r3, r0
 8009606:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009608:	7bbb      	ldrb	r3, [r7, #14]
}
 800960a:	4618      	mov	r0, r3
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009612:	b580      	push	{r7, lr}
 8009614:	b084      	sub	sp, #16
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
 800961a:	460b      	mov	r3, r1
 800961c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800961e:	2300      	movs	r3, #0
 8009620:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009622:	2300      	movs	r3, #0
 8009624:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800962c:	78fa      	ldrb	r2, [r7, #3]
 800962e:	4611      	mov	r1, r2
 8009630:	4618      	mov	r0, r3
 8009632:	f7f8 ffab 	bl	800258c <HAL_PCD_EP_ClrStall>
 8009636:	4603      	mov	r3, r0
 8009638:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800963a:	7bfb      	ldrb	r3, [r7, #15]
 800963c:	4618      	mov	r0, r3
 800963e:	f000 f8cb 	bl	80097d8 <USBD_Get_USB_Status>
 8009642:	4603      	mov	r3, r0
 8009644:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009646:	7bbb      	ldrb	r3, [r7, #14]
}
 8009648:	4618      	mov	r0, r3
 800964a:	3710      	adds	r7, #16
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009650:	b480      	push	{r7}
 8009652:	b085      	sub	sp, #20
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	460b      	mov	r3, r1
 800965a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009662:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009664:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009668:	2b00      	cmp	r3, #0
 800966a:	da0c      	bge.n	8009686 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800966c:	78fb      	ldrb	r3, [r7, #3]
 800966e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009672:	68f9      	ldr	r1, [r7, #12]
 8009674:	1c5a      	adds	r2, r3, #1
 8009676:	4613      	mov	r3, r2
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	4413      	add	r3, r2
 800967c:	00db      	lsls	r3, r3, #3
 800967e:	440b      	add	r3, r1
 8009680:	3302      	adds	r3, #2
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	e00b      	b.n	800969e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009686:	78fb      	ldrb	r3, [r7, #3]
 8009688:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800968c:	68f9      	ldr	r1, [r7, #12]
 800968e:	4613      	mov	r3, r2
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	4413      	add	r3, r2
 8009694:	00db      	lsls	r3, r3, #3
 8009696:	440b      	add	r3, r1
 8009698:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800969c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3714      	adds	r7, #20
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bc80      	pop	{r7}
 80096a6:	4770      	bx	lr

080096a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	460b      	mov	r3, r1
 80096b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096b4:	2300      	movs	r3, #0
 80096b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096b8:	2300      	movs	r3, #0
 80096ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096c2:	78fa      	ldrb	r2, [r7, #3]
 80096c4:	4611      	mov	r1, r2
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7f8 fd96 	bl	80021f8 <HAL_PCD_SetAddress>
 80096cc:	4603      	mov	r3, r0
 80096ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096d0:	7bfb      	ldrb	r3, [r7, #15]
 80096d2:	4618      	mov	r0, r3
 80096d4:	f000 f880 	bl	80097d8 <USBD_Get_USB_Status>
 80096d8:	4603      	mov	r3, r0
 80096da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b086      	sub	sp, #24
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	60f8      	str	r0, [r7, #12]
 80096ee:	607a      	str	r2, [r7, #4]
 80096f0:	461a      	mov	r2, r3
 80096f2:	460b      	mov	r3, r1
 80096f4:	72fb      	strb	r3, [r7, #11]
 80096f6:	4613      	mov	r3, r2
 80096f8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096fa:	2300      	movs	r3, #0
 80096fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096fe:	2300      	movs	r3, #0
 8009700:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009708:	893b      	ldrh	r3, [r7, #8]
 800970a:	7af9      	ldrb	r1, [r7, #11]
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	f7f8 fe9a 	bl	8002446 <HAL_PCD_EP_Transmit>
 8009712:	4603      	mov	r3, r0
 8009714:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009716:	7dfb      	ldrb	r3, [r7, #23]
 8009718:	4618      	mov	r0, r3
 800971a:	f000 f85d 	bl	80097d8 <USBD_Get_USB_Status>
 800971e:	4603      	mov	r3, r0
 8009720:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009722:	7dbb      	ldrb	r3, [r7, #22]
}
 8009724:	4618      	mov	r0, r3
 8009726:	3718      	adds	r7, #24
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b086      	sub	sp, #24
 8009730:	af00      	add	r7, sp, #0
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	607a      	str	r2, [r7, #4]
 8009736:	461a      	mov	r2, r3
 8009738:	460b      	mov	r3, r1
 800973a:	72fb      	strb	r3, [r7, #11]
 800973c:	4613      	mov	r3, r2
 800973e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009740:	2300      	movs	r3, #0
 8009742:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009744:	2300      	movs	r3, #0
 8009746:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800974e:	893b      	ldrh	r3, [r7, #8]
 8009750:	7af9      	ldrb	r1, [r7, #11]
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	f7f8 fe23 	bl	800239e <HAL_PCD_EP_Receive>
 8009758:	4603      	mov	r3, r0
 800975a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800975c:	7dfb      	ldrb	r3, [r7, #23]
 800975e:	4618      	mov	r0, r3
 8009760:	f000 f83a 	bl	80097d8 <USBD_Get_USB_Status>
 8009764:	4603      	mov	r3, r0
 8009766:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009768:	7dbb      	ldrb	r3, [r7, #22]
}
 800976a:	4618      	mov	r0, r3
 800976c:	3718      	adds	r7, #24
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}

08009772 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009772:	b580      	push	{r7, lr}
 8009774:	b082      	sub	sp, #8
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
 800977a:	460b      	mov	r3, r1
 800977c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009784:	78fa      	ldrb	r2, [r7, #3]
 8009786:	4611      	mov	r1, r2
 8009788:	4618      	mov	r0, r3
 800978a:	f7f8 fe45 	bl	8002418 <HAL_PCD_EP_GetRxCount>
 800978e:	4603      	mov	r3, r0
}
 8009790:	4618      	mov	r0, r3
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009798:	b480      	push	{r7}
 800979a:	b083      	sub	sp, #12
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80097a0:	4b02      	ldr	r3, [pc, #8]	; (80097ac <USBD_static_malloc+0x14>)
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	370c      	adds	r7, #12
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bc80      	pop	{r7}
 80097aa:	4770      	bx	lr
 80097ac:	20001420 	.word	0x20001420

080097b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b083      	sub	sp, #12
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]

}
 80097b8:	bf00      	nop
 80097ba:	370c      	adds	r7, #12
 80097bc:	46bd      	mov	sp, r7
 80097be:	bc80      	pop	{r7}
 80097c0:	4770      	bx	lr

080097c2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097c2:	b480      	push	{r7}
 80097c4:	b083      	sub	sp, #12
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
 80097ca:	460b      	mov	r3, r1
 80097cc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80097ce:	bf00      	nop
 80097d0:	370c      	adds	r7, #12
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bc80      	pop	{r7}
 80097d6:	4770      	bx	lr

080097d8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80097d8:	b480      	push	{r7}
 80097da:	b085      	sub	sp, #20
 80097dc:	af00      	add	r7, sp, #0
 80097de:	4603      	mov	r3, r0
 80097e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097e2:	2300      	movs	r3, #0
 80097e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80097e6:	79fb      	ldrb	r3, [r7, #7]
 80097e8:	2b03      	cmp	r3, #3
 80097ea:	d817      	bhi.n	800981c <USBD_Get_USB_Status+0x44>
 80097ec:	a201      	add	r2, pc, #4	; (adr r2, 80097f4 <USBD_Get_USB_Status+0x1c>)
 80097ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f2:	bf00      	nop
 80097f4:	08009805 	.word	0x08009805
 80097f8:	0800980b 	.word	0x0800980b
 80097fc:	08009811 	.word	0x08009811
 8009800:	08009817 	.word	0x08009817
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009804:	2300      	movs	r3, #0
 8009806:	73fb      	strb	r3, [r7, #15]
    break;
 8009808:	e00b      	b.n	8009822 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800980a:	2302      	movs	r3, #2
 800980c:	73fb      	strb	r3, [r7, #15]
    break;
 800980e:	e008      	b.n	8009822 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009810:	2301      	movs	r3, #1
 8009812:	73fb      	strb	r3, [r7, #15]
    break;
 8009814:	e005      	b.n	8009822 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009816:	2302      	movs	r3, #2
 8009818:	73fb      	strb	r3, [r7, #15]
    break;
 800981a:	e002      	b.n	8009822 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800981c:	2302      	movs	r3, #2
 800981e:	73fb      	strb	r3, [r7, #15]
    break;
 8009820:	bf00      	nop
  }
  return usb_status;
 8009822:	7bfb      	ldrb	r3, [r7, #15]
}
 8009824:	4618      	mov	r0, r3
 8009826:	3714      	adds	r7, #20
 8009828:	46bd      	mov	sp, r7
 800982a:	bc80      	pop	{r7}
 800982c:	4770      	bx	lr
 800982e:	bf00      	nop

08009830 <__errno>:
 8009830:	4b01      	ldr	r3, [pc, #4]	; (8009838 <__errno+0x8>)
 8009832:	6818      	ldr	r0, [r3, #0]
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop
 8009838:	20000184 	.word	0x20000184

0800983c <__libc_init_array>:
 800983c:	b570      	push	{r4, r5, r6, lr}
 800983e:	2600      	movs	r6, #0
 8009840:	4d0c      	ldr	r5, [pc, #48]	; (8009874 <__libc_init_array+0x38>)
 8009842:	4c0d      	ldr	r4, [pc, #52]	; (8009878 <__libc_init_array+0x3c>)
 8009844:	1b64      	subs	r4, r4, r5
 8009846:	10a4      	asrs	r4, r4, #2
 8009848:	42a6      	cmp	r6, r4
 800984a:	d109      	bne.n	8009860 <__libc_init_array+0x24>
 800984c:	f000 ffc4 	bl	800a7d8 <_init>
 8009850:	2600      	movs	r6, #0
 8009852:	4d0a      	ldr	r5, [pc, #40]	; (800987c <__libc_init_array+0x40>)
 8009854:	4c0a      	ldr	r4, [pc, #40]	; (8009880 <__libc_init_array+0x44>)
 8009856:	1b64      	subs	r4, r4, r5
 8009858:	10a4      	asrs	r4, r4, #2
 800985a:	42a6      	cmp	r6, r4
 800985c:	d105      	bne.n	800986a <__libc_init_array+0x2e>
 800985e:	bd70      	pop	{r4, r5, r6, pc}
 8009860:	f855 3b04 	ldr.w	r3, [r5], #4
 8009864:	4798      	blx	r3
 8009866:	3601      	adds	r6, #1
 8009868:	e7ee      	b.n	8009848 <__libc_init_array+0xc>
 800986a:	f855 3b04 	ldr.w	r3, [r5], #4
 800986e:	4798      	blx	r3
 8009870:	3601      	adds	r6, #1
 8009872:	e7f2      	b.n	800985a <__libc_init_array+0x1e>
 8009874:	0800a954 	.word	0x0800a954
 8009878:	0800a954 	.word	0x0800a954
 800987c:	0800a954 	.word	0x0800a954
 8009880:	0800a958 	.word	0x0800a958

08009884 <memcpy>:
 8009884:	440a      	add	r2, r1
 8009886:	4291      	cmp	r1, r2
 8009888:	f100 33ff 	add.w	r3, r0, #4294967295
 800988c:	d100      	bne.n	8009890 <memcpy+0xc>
 800988e:	4770      	bx	lr
 8009890:	b510      	push	{r4, lr}
 8009892:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009896:	4291      	cmp	r1, r2
 8009898:	f803 4f01 	strb.w	r4, [r3, #1]!
 800989c:	d1f9      	bne.n	8009892 <memcpy+0xe>
 800989e:	bd10      	pop	{r4, pc}

080098a0 <memset>:
 80098a0:	4603      	mov	r3, r0
 80098a2:	4402      	add	r2, r0
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d100      	bne.n	80098aa <memset+0xa>
 80098a8:	4770      	bx	lr
 80098aa:	f803 1b01 	strb.w	r1, [r3], #1
 80098ae:	e7f9      	b.n	80098a4 <memset+0x4>

080098b0 <iprintf>:
 80098b0:	b40f      	push	{r0, r1, r2, r3}
 80098b2:	4b0a      	ldr	r3, [pc, #40]	; (80098dc <iprintf+0x2c>)
 80098b4:	b513      	push	{r0, r1, r4, lr}
 80098b6:	681c      	ldr	r4, [r3, #0]
 80098b8:	b124      	cbz	r4, 80098c4 <iprintf+0x14>
 80098ba:	69a3      	ldr	r3, [r4, #24]
 80098bc:	b913      	cbnz	r3, 80098c4 <iprintf+0x14>
 80098be:	4620      	mov	r0, r4
 80098c0:	f000 f866 	bl	8009990 <__sinit>
 80098c4:	ab05      	add	r3, sp, #20
 80098c6:	4620      	mov	r0, r4
 80098c8:	9a04      	ldr	r2, [sp, #16]
 80098ca:	68a1      	ldr	r1, [r4, #8]
 80098cc:	9301      	str	r3, [sp, #4]
 80098ce:	f000 f9bb 	bl	8009c48 <_vfiprintf_r>
 80098d2:	b002      	add	sp, #8
 80098d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098d8:	b004      	add	sp, #16
 80098da:	4770      	bx	lr
 80098dc:	20000184 	.word	0x20000184

080098e0 <std>:
 80098e0:	2300      	movs	r3, #0
 80098e2:	b510      	push	{r4, lr}
 80098e4:	4604      	mov	r4, r0
 80098e6:	e9c0 3300 	strd	r3, r3, [r0]
 80098ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80098ee:	6083      	str	r3, [r0, #8]
 80098f0:	8181      	strh	r1, [r0, #12]
 80098f2:	6643      	str	r3, [r0, #100]	; 0x64
 80098f4:	81c2      	strh	r2, [r0, #14]
 80098f6:	6183      	str	r3, [r0, #24]
 80098f8:	4619      	mov	r1, r3
 80098fa:	2208      	movs	r2, #8
 80098fc:	305c      	adds	r0, #92	; 0x5c
 80098fe:	f7ff ffcf 	bl	80098a0 <memset>
 8009902:	4b05      	ldr	r3, [pc, #20]	; (8009918 <std+0x38>)
 8009904:	6224      	str	r4, [r4, #32]
 8009906:	6263      	str	r3, [r4, #36]	; 0x24
 8009908:	4b04      	ldr	r3, [pc, #16]	; (800991c <std+0x3c>)
 800990a:	62a3      	str	r3, [r4, #40]	; 0x28
 800990c:	4b04      	ldr	r3, [pc, #16]	; (8009920 <std+0x40>)
 800990e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009910:	4b04      	ldr	r3, [pc, #16]	; (8009924 <std+0x44>)
 8009912:	6323      	str	r3, [r4, #48]	; 0x30
 8009914:	bd10      	pop	{r4, pc}
 8009916:	bf00      	nop
 8009918:	0800a1f5 	.word	0x0800a1f5
 800991c:	0800a217 	.word	0x0800a217
 8009920:	0800a24f 	.word	0x0800a24f
 8009924:	0800a273 	.word	0x0800a273

08009928 <_cleanup_r>:
 8009928:	4901      	ldr	r1, [pc, #4]	; (8009930 <_cleanup_r+0x8>)
 800992a:	f000 b8af 	b.w	8009a8c <_fwalk_reent>
 800992e:	bf00      	nop
 8009930:	0800a545 	.word	0x0800a545

08009934 <__sfmoreglue>:
 8009934:	2268      	movs	r2, #104	; 0x68
 8009936:	b570      	push	{r4, r5, r6, lr}
 8009938:	1e4d      	subs	r5, r1, #1
 800993a:	4355      	muls	r5, r2
 800993c:	460e      	mov	r6, r1
 800993e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009942:	f000 f8e5 	bl	8009b10 <_malloc_r>
 8009946:	4604      	mov	r4, r0
 8009948:	b140      	cbz	r0, 800995c <__sfmoreglue+0x28>
 800994a:	2100      	movs	r1, #0
 800994c:	e9c0 1600 	strd	r1, r6, [r0]
 8009950:	300c      	adds	r0, #12
 8009952:	60a0      	str	r0, [r4, #8]
 8009954:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009958:	f7ff ffa2 	bl	80098a0 <memset>
 800995c:	4620      	mov	r0, r4
 800995e:	bd70      	pop	{r4, r5, r6, pc}

08009960 <__sfp_lock_acquire>:
 8009960:	4801      	ldr	r0, [pc, #4]	; (8009968 <__sfp_lock_acquire+0x8>)
 8009962:	f000 b8b3 	b.w	8009acc <__retarget_lock_acquire_recursive>
 8009966:	bf00      	nop
 8009968:	20001641 	.word	0x20001641

0800996c <__sfp_lock_release>:
 800996c:	4801      	ldr	r0, [pc, #4]	; (8009974 <__sfp_lock_release+0x8>)
 800996e:	f000 b8ae 	b.w	8009ace <__retarget_lock_release_recursive>
 8009972:	bf00      	nop
 8009974:	20001641 	.word	0x20001641

08009978 <__sinit_lock_acquire>:
 8009978:	4801      	ldr	r0, [pc, #4]	; (8009980 <__sinit_lock_acquire+0x8>)
 800997a:	f000 b8a7 	b.w	8009acc <__retarget_lock_acquire_recursive>
 800997e:	bf00      	nop
 8009980:	20001642 	.word	0x20001642

08009984 <__sinit_lock_release>:
 8009984:	4801      	ldr	r0, [pc, #4]	; (800998c <__sinit_lock_release+0x8>)
 8009986:	f000 b8a2 	b.w	8009ace <__retarget_lock_release_recursive>
 800998a:	bf00      	nop
 800998c:	20001642 	.word	0x20001642

08009990 <__sinit>:
 8009990:	b510      	push	{r4, lr}
 8009992:	4604      	mov	r4, r0
 8009994:	f7ff fff0 	bl	8009978 <__sinit_lock_acquire>
 8009998:	69a3      	ldr	r3, [r4, #24]
 800999a:	b11b      	cbz	r3, 80099a4 <__sinit+0x14>
 800999c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099a0:	f7ff bff0 	b.w	8009984 <__sinit_lock_release>
 80099a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80099a8:	6523      	str	r3, [r4, #80]	; 0x50
 80099aa:	4b13      	ldr	r3, [pc, #76]	; (80099f8 <__sinit+0x68>)
 80099ac:	4a13      	ldr	r2, [pc, #76]	; (80099fc <__sinit+0x6c>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80099b2:	42a3      	cmp	r3, r4
 80099b4:	bf08      	it	eq
 80099b6:	2301      	moveq	r3, #1
 80099b8:	4620      	mov	r0, r4
 80099ba:	bf08      	it	eq
 80099bc:	61a3      	streq	r3, [r4, #24]
 80099be:	f000 f81f 	bl	8009a00 <__sfp>
 80099c2:	6060      	str	r0, [r4, #4]
 80099c4:	4620      	mov	r0, r4
 80099c6:	f000 f81b 	bl	8009a00 <__sfp>
 80099ca:	60a0      	str	r0, [r4, #8]
 80099cc:	4620      	mov	r0, r4
 80099ce:	f000 f817 	bl	8009a00 <__sfp>
 80099d2:	2200      	movs	r2, #0
 80099d4:	2104      	movs	r1, #4
 80099d6:	60e0      	str	r0, [r4, #12]
 80099d8:	6860      	ldr	r0, [r4, #4]
 80099da:	f7ff ff81 	bl	80098e0 <std>
 80099de:	2201      	movs	r2, #1
 80099e0:	2109      	movs	r1, #9
 80099e2:	68a0      	ldr	r0, [r4, #8]
 80099e4:	f7ff ff7c 	bl	80098e0 <std>
 80099e8:	2202      	movs	r2, #2
 80099ea:	2112      	movs	r1, #18
 80099ec:	68e0      	ldr	r0, [r4, #12]
 80099ee:	f7ff ff77 	bl	80098e0 <std>
 80099f2:	2301      	movs	r3, #1
 80099f4:	61a3      	str	r3, [r4, #24]
 80099f6:	e7d1      	b.n	800999c <__sinit+0xc>
 80099f8:	0800a8bc 	.word	0x0800a8bc
 80099fc:	08009929 	.word	0x08009929

08009a00 <__sfp>:
 8009a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a02:	4607      	mov	r7, r0
 8009a04:	f7ff ffac 	bl	8009960 <__sfp_lock_acquire>
 8009a08:	4b1e      	ldr	r3, [pc, #120]	; (8009a84 <__sfp+0x84>)
 8009a0a:	681e      	ldr	r6, [r3, #0]
 8009a0c:	69b3      	ldr	r3, [r6, #24]
 8009a0e:	b913      	cbnz	r3, 8009a16 <__sfp+0x16>
 8009a10:	4630      	mov	r0, r6
 8009a12:	f7ff ffbd 	bl	8009990 <__sinit>
 8009a16:	3648      	adds	r6, #72	; 0x48
 8009a18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	d503      	bpl.n	8009a28 <__sfp+0x28>
 8009a20:	6833      	ldr	r3, [r6, #0]
 8009a22:	b30b      	cbz	r3, 8009a68 <__sfp+0x68>
 8009a24:	6836      	ldr	r6, [r6, #0]
 8009a26:	e7f7      	b.n	8009a18 <__sfp+0x18>
 8009a28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009a2c:	b9d5      	cbnz	r5, 8009a64 <__sfp+0x64>
 8009a2e:	4b16      	ldr	r3, [pc, #88]	; (8009a88 <__sfp+0x88>)
 8009a30:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009a34:	60e3      	str	r3, [r4, #12]
 8009a36:	6665      	str	r5, [r4, #100]	; 0x64
 8009a38:	f000 f847 	bl	8009aca <__retarget_lock_init_recursive>
 8009a3c:	f7ff ff96 	bl	800996c <__sfp_lock_release>
 8009a40:	2208      	movs	r2, #8
 8009a42:	4629      	mov	r1, r5
 8009a44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009a48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009a4c:	6025      	str	r5, [r4, #0]
 8009a4e:	61a5      	str	r5, [r4, #24]
 8009a50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009a54:	f7ff ff24 	bl	80098a0 <memset>
 8009a58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009a5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009a60:	4620      	mov	r0, r4
 8009a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a64:	3468      	adds	r4, #104	; 0x68
 8009a66:	e7d9      	b.n	8009a1c <__sfp+0x1c>
 8009a68:	2104      	movs	r1, #4
 8009a6a:	4638      	mov	r0, r7
 8009a6c:	f7ff ff62 	bl	8009934 <__sfmoreglue>
 8009a70:	4604      	mov	r4, r0
 8009a72:	6030      	str	r0, [r6, #0]
 8009a74:	2800      	cmp	r0, #0
 8009a76:	d1d5      	bne.n	8009a24 <__sfp+0x24>
 8009a78:	f7ff ff78 	bl	800996c <__sfp_lock_release>
 8009a7c:	230c      	movs	r3, #12
 8009a7e:	603b      	str	r3, [r7, #0]
 8009a80:	e7ee      	b.n	8009a60 <__sfp+0x60>
 8009a82:	bf00      	nop
 8009a84:	0800a8bc 	.word	0x0800a8bc
 8009a88:	ffff0001 	.word	0xffff0001

08009a8c <_fwalk_reent>:
 8009a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a90:	4606      	mov	r6, r0
 8009a92:	4688      	mov	r8, r1
 8009a94:	2700      	movs	r7, #0
 8009a96:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009a9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a9e:	f1b9 0901 	subs.w	r9, r9, #1
 8009aa2:	d505      	bpl.n	8009ab0 <_fwalk_reent+0x24>
 8009aa4:	6824      	ldr	r4, [r4, #0]
 8009aa6:	2c00      	cmp	r4, #0
 8009aa8:	d1f7      	bne.n	8009a9a <_fwalk_reent+0xe>
 8009aaa:	4638      	mov	r0, r7
 8009aac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ab0:	89ab      	ldrh	r3, [r5, #12]
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d907      	bls.n	8009ac6 <_fwalk_reent+0x3a>
 8009ab6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009aba:	3301      	adds	r3, #1
 8009abc:	d003      	beq.n	8009ac6 <_fwalk_reent+0x3a>
 8009abe:	4629      	mov	r1, r5
 8009ac0:	4630      	mov	r0, r6
 8009ac2:	47c0      	blx	r8
 8009ac4:	4307      	orrs	r7, r0
 8009ac6:	3568      	adds	r5, #104	; 0x68
 8009ac8:	e7e9      	b.n	8009a9e <_fwalk_reent+0x12>

08009aca <__retarget_lock_init_recursive>:
 8009aca:	4770      	bx	lr

08009acc <__retarget_lock_acquire_recursive>:
 8009acc:	4770      	bx	lr

08009ace <__retarget_lock_release_recursive>:
 8009ace:	4770      	bx	lr

08009ad0 <sbrk_aligned>:
 8009ad0:	b570      	push	{r4, r5, r6, lr}
 8009ad2:	4e0e      	ldr	r6, [pc, #56]	; (8009b0c <sbrk_aligned+0x3c>)
 8009ad4:	460c      	mov	r4, r1
 8009ad6:	6831      	ldr	r1, [r6, #0]
 8009ad8:	4605      	mov	r5, r0
 8009ada:	b911      	cbnz	r1, 8009ae2 <sbrk_aligned+0x12>
 8009adc:	f000 fb7a 	bl	800a1d4 <_sbrk_r>
 8009ae0:	6030      	str	r0, [r6, #0]
 8009ae2:	4621      	mov	r1, r4
 8009ae4:	4628      	mov	r0, r5
 8009ae6:	f000 fb75 	bl	800a1d4 <_sbrk_r>
 8009aea:	1c43      	adds	r3, r0, #1
 8009aec:	d00a      	beq.n	8009b04 <sbrk_aligned+0x34>
 8009aee:	1cc4      	adds	r4, r0, #3
 8009af0:	f024 0403 	bic.w	r4, r4, #3
 8009af4:	42a0      	cmp	r0, r4
 8009af6:	d007      	beq.n	8009b08 <sbrk_aligned+0x38>
 8009af8:	1a21      	subs	r1, r4, r0
 8009afa:	4628      	mov	r0, r5
 8009afc:	f000 fb6a 	bl	800a1d4 <_sbrk_r>
 8009b00:	3001      	adds	r0, #1
 8009b02:	d101      	bne.n	8009b08 <sbrk_aligned+0x38>
 8009b04:	f04f 34ff 	mov.w	r4, #4294967295
 8009b08:	4620      	mov	r0, r4
 8009b0a:	bd70      	pop	{r4, r5, r6, pc}
 8009b0c:	20001648 	.word	0x20001648

08009b10 <_malloc_r>:
 8009b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b14:	1ccd      	adds	r5, r1, #3
 8009b16:	f025 0503 	bic.w	r5, r5, #3
 8009b1a:	3508      	adds	r5, #8
 8009b1c:	2d0c      	cmp	r5, #12
 8009b1e:	bf38      	it	cc
 8009b20:	250c      	movcc	r5, #12
 8009b22:	2d00      	cmp	r5, #0
 8009b24:	4607      	mov	r7, r0
 8009b26:	db01      	blt.n	8009b2c <_malloc_r+0x1c>
 8009b28:	42a9      	cmp	r1, r5
 8009b2a:	d905      	bls.n	8009b38 <_malloc_r+0x28>
 8009b2c:	230c      	movs	r3, #12
 8009b2e:	2600      	movs	r6, #0
 8009b30:	603b      	str	r3, [r7, #0]
 8009b32:	4630      	mov	r0, r6
 8009b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b38:	4e2e      	ldr	r6, [pc, #184]	; (8009bf4 <_malloc_r+0xe4>)
 8009b3a:	f000 fdc5 	bl	800a6c8 <__malloc_lock>
 8009b3e:	6833      	ldr	r3, [r6, #0]
 8009b40:	461c      	mov	r4, r3
 8009b42:	bb34      	cbnz	r4, 8009b92 <_malloc_r+0x82>
 8009b44:	4629      	mov	r1, r5
 8009b46:	4638      	mov	r0, r7
 8009b48:	f7ff ffc2 	bl	8009ad0 <sbrk_aligned>
 8009b4c:	1c43      	adds	r3, r0, #1
 8009b4e:	4604      	mov	r4, r0
 8009b50:	d14d      	bne.n	8009bee <_malloc_r+0xde>
 8009b52:	6834      	ldr	r4, [r6, #0]
 8009b54:	4626      	mov	r6, r4
 8009b56:	2e00      	cmp	r6, #0
 8009b58:	d140      	bne.n	8009bdc <_malloc_r+0xcc>
 8009b5a:	6823      	ldr	r3, [r4, #0]
 8009b5c:	4631      	mov	r1, r6
 8009b5e:	4638      	mov	r0, r7
 8009b60:	eb04 0803 	add.w	r8, r4, r3
 8009b64:	f000 fb36 	bl	800a1d4 <_sbrk_r>
 8009b68:	4580      	cmp	r8, r0
 8009b6a:	d13a      	bne.n	8009be2 <_malloc_r+0xd2>
 8009b6c:	6821      	ldr	r1, [r4, #0]
 8009b6e:	3503      	adds	r5, #3
 8009b70:	1a6d      	subs	r5, r5, r1
 8009b72:	f025 0503 	bic.w	r5, r5, #3
 8009b76:	3508      	adds	r5, #8
 8009b78:	2d0c      	cmp	r5, #12
 8009b7a:	bf38      	it	cc
 8009b7c:	250c      	movcc	r5, #12
 8009b7e:	4638      	mov	r0, r7
 8009b80:	4629      	mov	r1, r5
 8009b82:	f7ff ffa5 	bl	8009ad0 <sbrk_aligned>
 8009b86:	3001      	adds	r0, #1
 8009b88:	d02b      	beq.n	8009be2 <_malloc_r+0xd2>
 8009b8a:	6823      	ldr	r3, [r4, #0]
 8009b8c:	442b      	add	r3, r5
 8009b8e:	6023      	str	r3, [r4, #0]
 8009b90:	e00e      	b.n	8009bb0 <_malloc_r+0xa0>
 8009b92:	6822      	ldr	r2, [r4, #0]
 8009b94:	1b52      	subs	r2, r2, r5
 8009b96:	d41e      	bmi.n	8009bd6 <_malloc_r+0xc6>
 8009b98:	2a0b      	cmp	r2, #11
 8009b9a:	d916      	bls.n	8009bca <_malloc_r+0xba>
 8009b9c:	1961      	adds	r1, r4, r5
 8009b9e:	42a3      	cmp	r3, r4
 8009ba0:	6025      	str	r5, [r4, #0]
 8009ba2:	bf18      	it	ne
 8009ba4:	6059      	strne	r1, [r3, #4]
 8009ba6:	6863      	ldr	r3, [r4, #4]
 8009ba8:	bf08      	it	eq
 8009baa:	6031      	streq	r1, [r6, #0]
 8009bac:	5162      	str	r2, [r4, r5]
 8009bae:	604b      	str	r3, [r1, #4]
 8009bb0:	4638      	mov	r0, r7
 8009bb2:	f104 060b 	add.w	r6, r4, #11
 8009bb6:	f000 fd8d 	bl	800a6d4 <__malloc_unlock>
 8009bba:	f026 0607 	bic.w	r6, r6, #7
 8009bbe:	1d23      	adds	r3, r4, #4
 8009bc0:	1af2      	subs	r2, r6, r3
 8009bc2:	d0b6      	beq.n	8009b32 <_malloc_r+0x22>
 8009bc4:	1b9b      	subs	r3, r3, r6
 8009bc6:	50a3      	str	r3, [r4, r2]
 8009bc8:	e7b3      	b.n	8009b32 <_malloc_r+0x22>
 8009bca:	6862      	ldr	r2, [r4, #4]
 8009bcc:	42a3      	cmp	r3, r4
 8009bce:	bf0c      	ite	eq
 8009bd0:	6032      	streq	r2, [r6, #0]
 8009bd2:	605a      	strne	r2, [r3, #4]
 8009bd4:	e7ec      	b.n	8009bb0 <_malloc_r+0xa0>
 8009bd6:	4623      	mov	r3, r4
 8009bd8:	6864      	ldr	r4, [r4, #4]
 8009bda:	e7b2      	b.n	8009b42 <_malloc_r+0x32>
 8009bdc:	4634      	mov	r4, r6
 8009bde:	6876      	ldr	r6, [r6, #4]
 8009be0:	e7b9      	b.n	8009b56 <_malloc_r+0x46>
 8009be2:	230c      	movs	r3, #12
 8009be4:	4638      	mov	r0, r7
 8009be6:	603b      	str	r3, [r7, #0]
 8009be8:	f000 fd74 	bl	800a6d4 <__malloc_unlock>
 8009bec:	e7a1      	b.n	8009b32 <_malloc_r+0x22>
 8009bee:	6025      	str	r5, [r4, #0]
 8009bf0:	e7de      	b.n	8009bb0 <_malloc_r+0xa0>
 8009bf2:	bf00      	nop
 8009bf4:	20001644 	.word	0x20001644

08009bf8 <__sfputc_r>:
 8009bf8:	6893      	ldr	r3, [r2, #8]
 8009bfa:	b410      	push	{r4}
 8009bfc:	3b01      	subs	r3, #1
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	6093      	str	r3, [r2, #8]
 8009c02:	da07      	bge.n	8009c14 <__sfputc_r+0x1c>
 8009c04:	6994      	ldr	r4, [r2, #24]
 8009c06:	42a3      	cmp	r3, r4
 8009c08:	db01      	blt.n	8009c0e <__sfputc_r+0x16>
 8009c0a:	290a      	cmp	r1, #10
 8009c0c:	d102      	bne.n	8009c14 <__sfputc_r+0x1c>
 8009c0e:	bc10      	pop	{r4}
 8009c10:	f000 bb34 	b.w	800a27c <__swbuf_r>
 8009c14:	6813      	ldr	r3, [r2, #0]
 8009c16:	1c58      	adds	r0, r3, #1
 8009c18:	6010      	str	r0, [r2, #0]
 8009c1a:	7019      	strb	r1, [r3, #0]
 8009c1c:	4608      	mov	r0, r1
 8009c1e:	bc10      	pop	{r4}
 8009c20:	4770      	bx	lr

08009c22 <__sfputs_r>:
 8009c22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c24:	4606      	mov	r6, r0
 8009c26:	460f      	mov	r7, r1
 8009c28:	4614      	mov	r4, r2
 8009c2a:	18d5      	adds	r5, r2, r3
 8009c2c:	42ac      	cmp	r4, r5
 8009c2e:	d101      	bne.n	8009c34 <__sfputs_r+0x12>
 8009c30:	2000      	movs	r0, #0
 8009c32:	e007      	b.n	8009c44 <__sfputs_r+0x22>
 8009c34:	463a      	mov	r2, r7
 8009c36:	4630      	mov	r0, r6
 8009c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c3c:	f7ff ffdc 	bl	8009bf8 <__sfputc_r>
 8009c40:	1c43      	adds	r3, r0, #1
 8009c42:	d1f3      	bne.n	8009c2c <__sfputs_r+0xa>
 8009c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009c48 <_vfiprintf_r>:
 8009c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c4c:	460d      	mov	r5, r1
 8009c4e:	4614      	mov	r4, r2
 8009c50:	4698      	mov	r8, r3
 8009c52:	4606      	mov	r6, r0
 8009c54:	b09d      	sub	sp, #116	; 0x74
 8009c56:	b118      	cbz	r0, 8009c60 <_vfiprintf_r+0x18>
 8009c58:	6983      	ldr	r3, [r0, #24]
 8009c5a:	b90b      	cbnz	r3, 8009c60 <_vfiprintf_r+0x18>
 8009c5c:	f7ff fe98 	bl	8009990 <__sinit>
 8009c60:	4b89      	ldr	r3, [pc, #548]	; (8009e88 <_vfiprintf_r+0x240>)
 8009c62:	429d      	cmp	r5, r3
 8009c64:	d11b      	bne.n	8009c9e <_vfiprintf_r+0x56>
 8009c66:	6875      	ldr	r5, [r6, #4]
 8009c68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c6a:	07d9      	lsls	r1, r3, #31
 8009c6c:	d405      	bmi.n	8009c7a <_vfiprintf_r+0x32>
 8009c6e:	89ab      	ldrh	r3, [r5, #12]
 8009c70:	059a      	lsls	r2, r3, #22
 8009c72:	d402      	bmi.n	8009c7a <_vfiprintf_r+0x32>
 8009c74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c76:	f7ff ff29 	bl	8009acc <__retarget_lock_acquire_recursive>
 8009c7a:	89ab      	ldrh	r3, [r5, #12]
 8009c7c:	071b      	lsls	r3, r3, #28
 8009c7e:	d501      	bpl.n	8009c84 <_vfiprintf_r+0x3c>
 8009c80:	692b      	ldr	r3, [r5, #16]
 8009c82:	b9eb      	cbnz	r3, 8009cc0 <_vfiprintf_r+0x78>
 8009c84:	4629      	mov	r1, r5
 8009c86:	4630      	mov	r0, r6
 8009c88:	f000 fb5c 	bl	800a344 <__swsetup_r>
 8009c8c:	b1c0      	cbz	r0, 8009cc0 <_vfiprintf_r+0x78>
 8009c8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c90:	07dc      	lsls	r4, r3, #31
 8009c92:	d50e      	bpl.n	8009cb2 <_vfiprintf_r+0x6a>
 8009c94:	f04f 30ff 	mov.w	r0, #4294967295
 8009c98:	b01d      	add	sp, #116	; 0x74
 8009c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c9e:	4b7b      	ldr	r3, [pc, #492]	; (8009e8c <_vfiprintf_r+0x244>)
 8009ca0:	429d      	cmp	r5, r3
 8009ca2:	d101      	bne.n	8009ca8 <_vfiprintf_r+0x60>
 8009ca4:	68b5      	ldr	r5, [r6, #8]
 8009ca6:	e7df      	b.n	8009c68 <_vfiprintf_r+0x20>
 8009ca8:	4b79      	ldr	r3, [pc, #484]	; (8009e90 <_vfiprintf_r+0x248>)
 8009caa:	429d      	cmp	r5, r3
 8009cac:	bf08      	it	eq
 8009cae:	68f5      	ldreq	r5, [r6, #12]
 8009cb0:	e7da      	b.n	8009c68 <_vfiprintf_r+0x20>
 8009cb2:	89ab      	ldrh	r3, [r5, #12]
 8009cb4:	0598      	lsls	r0, r3, #22
 8009cb6:	d4ed      	bmi.n	8009c94 <_vfiprintf_r+0x4c>
 8009cb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cba:	f7ff ff08 	bl	8009ace <__retarget_lock_release_recursive>
 8009cbe:	e7e9      	b.n	8009c94 <_vfiprintf_r+0x4c>
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8009cc4:	2320      	movs	r3, #32
 8009cc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cca:	2330      	movs	r3, #48	; 0x30
 8009ccc:	f04f 0901 	mov.w	r9, #1
 8009cd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cd4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009e94 <_vfiprintf_r+0x24c>
 8009cd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cdc:	4623      	mov	r3, r4
 8009cde:	469a      	mov	sl, r3
 8009ce0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ce4:	b10a      	cbz	r2, 8009cea <_vfiprintf_r+0xa2>
 8009ce6:	2a25      	cmp	r2, #37	; 0x25
 8009ce8:	d1f9      	bne.n	8009cde <_vfiprintf_r+0x96>
 8009cea:	ebba 0b04 	subs.w	fp, sl, r4
 8009cee:	d00b      	beq.n	8009d08 <_vfiprintf_r+0xc0>
 8009cf0:	465b      	mov	r3, fp
 8009cf2:	4622      	mov	r2, r4
 8009cf4:	4629      	mov	r1, r5
 8009cf6:	4630      	mov	r0, r6
 8009cf8:	f7ff ff93 	bl	8009c22 <__sfputs_r>
 8009cfc:	3001      	adds	r0, #1
 8009cfe:	f000 80aa 	beq.w	8009e56 <_vfiprintf_r+0x20e>
 8009d02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d04:	445a      	add	r2, fp
 8009d06:	9209      	str	r2, [sp, #36]	; 0x24
 8009d08:	f89a 3000 	ldrb.w	r3, [sl]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	f000 80a2 	beq.w	8009e56 <_vfiprintf_r+0x20e>
 8009d12:	2300      	movs	r3, #0
 8009d14:	f04f 32ff 	mov.w	r2, #4294967295
 8009d18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d1c:	f10a 0a01 	add.w	sl, sl, #1
 8009d20:	9304      	str	r3, [sp, #16]
 8009d22:	9307      	str	r3, [sp, #28]
 8009d24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d28:	931a      	str	r3, [sp, #104]	; 0x68
 8009d2a:	4654      	mov	r4, sl
 8009d2c:	2205      	movs	r2, #5
 8009d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d32:	4858      	ldr	r0, [pc, #352]	; (8009e94 <_vfiprintf_r+0x24c>)
 8009d34:	f000 fcba 	bl	800a6ac <memchr>
 8009d38:	9a04      	ldr	r2, [sp, #16]
 8009d3a:	b9d8      	cbnz	r0, 8009d74 <_vfiprintf_r+0x12c>
 8009d3c:	06d1      	lsls	r1, r2, #27
 8009d3e:	bf44      	itt	mi
 8009d40:	2320      	movmi	r3, #32
 8009d42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d46:	0713      	lsls	r3, r2, #28
 8009d48:	bf44      	itt	mi
 8009d4a:	232b      	movmi	r3, #43	; 0x2b
 8009d4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d50:	f89a 3000 	ldrb.w	r3, [sl]
 8009d54:	2b2a      	cmp	r3, #42	; 0x2a
 8009d56:	d015      	beq.n	8009d84 <_vfiprintf_r+0x13c>
 8009d58:	4654      	mov	r4, sl
 8009d5a:	2000      	movs	r0, #0
 8009d5c:	f04f 0c0a 	mov.w	ip, #10
 8009d60:	9a07      	ldr	r2, [sp, #28]
 8009d62:	4621      	mov	r1, r4
 8009d64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d68:	3b30      	subs	r3, #48	; 0x30
 8009d6a:	2b09      	cmp	r3, #9
 8009d6c:	d94e      	bls.n	8009e0c <_vfiprintf_r+0x1c4>
 8009d6e:	b1b0      	cbz	r0, 8009d9e <_vfiprintf_r+0x156>
 8009d70:	9207      	str	r2, [sp, #28]
 8009d72:	e014      	b.n	8009d9e <_vfiprintf_r+0x156>
 8009d74:	eba0 0308 	sub.w	r3, r0, r8
 8009d78:	fa09 f303 	lsl.w	r3, r9, r3
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	46a2      	mov	sl, r4
 8009d80:	9304      	str	r3, [sp, #16]
 8009d82:	e7d2      	b.n	8009d2a <_vfiprintf_r+0xe2>
 8009d84:	9b03      	ldr	r3, [sp, #12]
 8009d86:	1d19      	adds	r1, r3, #4
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	9103      	str	r1, [sp, #12]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	bfbb      	ittet	lt
 8009d90:	425b      	neglt	r3, r3
 8009d92:	f042 0202 	orrlt.w	r2, r2, #2
 8009d96:	9307      	strge	r3, [sp, #28]
 8009d98:	9307      	strlt	r3, [sp, #28]
 8009d9a:	bfb8      	it	lt
 8009d9c:	9204      	strlt	r2, [sp, #16]
 8009d9e:	7823      	ldrb	r3, [r4, #0]
 8009da0:	2b2e      	cmp	r3, #46	; 0x2e
 8009da2:	d10c      	bne.n	8009dbe <_vfiprintf_r+0x176>
 8009da4:	7863      	ldrb	r3, [r4, #1]
 8009da6:	2b2a      	cmp	r3, #42	; 0x2a
 8009da8:	d135      	bne.n	8009e16 <_vfiprintf_r+0x1ce>
 8009daa:	9b03      	ldr	r3, [sp, #12]
 8009dac:	3402      	adds	r4, #2
 8009dae:	1d1a      	adds	r2, r3, #4
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	9203      	str	r2, [sp, #12]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	bfb8      	it	lt
 8009db8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009dbc:	9305      	str	r3, [sp, #20]
 8009dbe:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009e98 <_vfiprintf_r+0x250>
 8009dc2:	2203      	movs	r2, #3
 8009dc4:	4650      	mov	r0, sl
 8009dc6:	7821      	ldrb	r1, [r4, #0]
 8009dc8:	f000 fc70 	bl	800a6ac <memchr>
 8009dcc:	b140      	cbz	r0, 8009de0 <_vfiprintf_r+0x198>
 8009dce:	2340      	movs	r3, #64	; 0x40
 8009dd0:	eba0 000a 	sub.w	r0, r0, sl
 8009dd4:	fa03 f000 	lsl.w	r0, r3, r0
 8009dd8:	9b04      	ldr	r3, [sp, #16]
 8009dda:	3401      	adds	r4, #1
 8009ddc:	4303      	orrs	r3, r0
 8009dde:	9304      	str	r3, [sp, #16]
 8009de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009de4:	2206      	movs	r2, #6
 8009de6:	482d      	ldr	r0, [pc, #180]	; (8009e9c <_vfiprintf_r+0x254>)
 8009de8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009dec:	f000 fc5e 	bl	800a6ac <memchr>
 8009df0:	2800      	cmp	r0, #0
 8009df2:	d03f      	beq.n	8009e74 <_vfiprintf_r+0x22c>
 8009df4:	4b2a      	ldr	r3, [pc, #168]	; (8009ea0 <_vfiprintf_r+0x258>)
 8009df6:	bb1b      	cbnz	r3, 8009e40 <_vfiprintf_r+0x1f8>
 8009df8:	9b03      	ldr	r3, [sp, #12]
 8009dfa:	3307      	adds	r3, #7
 8009dfc:	f023 0307 	bic.w	r3, r3, #7
 8009e00:	3308      	adds	r3, #8
 8009e02:	9303      	str	r3, [sp, #12]
 8009e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e06:	443b      	add	r3, r7
 8009e08:	9309      	str	r3, [sp, #36]	; 0x24
 8009e0a:	e767      	b.n	8009cdc <_vfiprintf_r+0x94>
 8009e0c:	460c      	mov	r4, r1
 8009e0e:	2001      	movs	r0, #1
 8009e10:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e14:	e7a5      	b.n	8009d62 <_vfiprintf_r+0x11a>
 8009e16:	2300      	movs	r3, #0
 8009e18:	f04f 0c0a 	mov.w	ip, #10
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	3401      	adds	r4, #1
 8009e20:	9305      	str	r3, [sp, #20]
 8009e22:	4620      	mov	r0, r4
 8009e24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e28:	3a30      	subs	r2, #48	; 0x30
 8009e2a:	2a09      	cmp	r2, #9
 8009e2c:	d903      	bls.n	8009e36 <_vfiprintf_r+0x1ee>
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d0c5      	beq.n	8009dbe <_vfiprintf_r+0x176>
 8009e32:	9105      	str	r1, [sp, #20]
 8009e34:	e7c3      	b.n	8009dbe <_vfiprintf_r+0x176>
 8009e36:	4604      	mov	r4, r0
 8009e38:	2301      	movs	r3, #1
 8009e3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e3e:	e7f0      	b.n	8009e22 <_vfiprintf_r+0x1da>
 8009e40:	ab03      	add	r3, sp, #12
 8009e42:	9300      	str	r3, [sp, #0]
 8009e44:	462a      	mov	r2, r5
 8009e46:	4630      	mov	r0, r6
 8009e48:	4b16      	ldr	r3, [pc, #88]	; (8009ea4 <_vfiprintf_r+0x25c>)
 8009e4a:	a904      	add	r1, sp, #16
 8009e4c:	f3af 8000 	nop.w
 8009e50:	4607      	mov	r7, r0
 8009e52:	1c78      	adds	r0, r7, #1
 8009e54:	d1d6      	bne.n	8009e04 <_vfiprintf_r+0x1bc>
 8009e56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e58:	07d9      	lsls	r1, r3, #31
 8009e5a:	d405      	bmi.n	8009e68 <_vfiprintf_r+0x220>
 8009e5c:	89ab      	ldrh	r3, [r5, #12]
 8009e5e:	059a      	lsls	r2, r3, #22
 8009e60:	d402      	bmi.n	8009e68 <_vfiprintf_r+0x220>
 8009e62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e64:	f7ff fe33 	bl	8009ace <__retarget_lock_release_recursive>
 8009e68:	89ab      	ldrh	r3, [r5, #12]
 8009e6a:	065b      	lsls	r3, r3, #25
 8009e6c:	f53f af12 	bmi.w	8009c94 <_vfiprintf_r+0x4c>
 8009e70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e72:	e711      	b.n	8009c98 <_vfiprintf_r+0x50>
 8009e74:	ab03      	add	r3, sp, #12
 8009e76:	9300      	str	r3, [sp, #0]
 8009e78:	462a      	mov	r2, r5
 8009e7a:	4630      	mov	r0, r6
 8009e7c:	4b09      	ldr	r3, [pc, #36]	; (8009ea4 <_vfiprintf_r+0x25c>)
 8009e7e:	a904      	add	r1, sp, #16
 8009e80:	f000 f882 	bl	8009f88 <_printf_i>
 8009e84:	e7e4      	b.n	8009e50 <_vfiprintf_r+0x208>
 8009e86:	bf00      	nop
 8009e88:	0800a8e0 	.word	0x0800a8e0
 8009e8c:	0800a900 	.word	0x0800a900
 8009e90:	0800a8c0 	.word	0x0800a8c0
 8009e94:	0800a920 	.word	0x0800a920
 8009e98:	0800a926 	.word	0x0800a926
 8009e9c:	0800a92a 	.word	0x0800a92a
 8009ea0:	00000000 	.word	0x00000000
 8009ea4:	08009c23 	.word	0x08009c23

08009ea8 <_printf_common>:
 8009ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009eac:	4616      	mov	r6, r2
 8009eae:	4699      	mov	r9, r3
 8009eb0:	688a      	ldr	r2, [r1, #8]
 8009eb2:	690b      	ldr	r3, [r1, #16]
 8009eb4:	4607      	mov	r7, r0
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	bfb8      	it	lt
 8009eba:	4613      	movlt	r3, r2
 8009ebc:	6033      	str	r3, [r6, #0]
 8009ebe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ec2:	460c      	mov	r4, r1
 8009ec4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ec8:	b10a      	cbz	r2, 8009ece <_printf_common+0x26>
 8009eca:	3301      	adds	r3, #1
 8009ecc:	6033      	str	r3, [r6, #0]
 8009ece:	6823      	ldr	r3, [r4, #0]
 8009ed0:	0699      	lsls	r1, r3, #26
 8009ed2:	bf42      	ittt	mi
 8009ed4:	6833      	ldrmi	r3, [r6, #0]
 8009ed6:	3302      	addmi	r3, #2
 8009ed8:	6033      	strmi	r3, [r6, #0]
 8009eda:	6825      	ldr	r5, [r4, #0]
 8009edc:	f015 0506 	ands.w	r5, r5, #6
 8009ee0:	d106      	bne.n	8009ef0 <_printf_common+0x48>
 8009ee2:	f104 0a19 	add.w	sl, r4, #25
 8009ee6:	68e3      	ldr	r3, [r4, #12]
 8009ee8:	6832      	ldr	r2, [r6, #0]
 8009eea:	1a9b      	subs	r3, r3, r2
 8009eec:	42ab      	cmp	r3, r5
 8009eee:	dc28      	bgt.n	8009f42 <_printf_common+0x9a>
 8009ef0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ef4:	1e13      	subs	r3, r2, #0
 8009ef6:	6822      	ldr	r2, [r4, #0]
 8009ef8:	bf18      	it	ne
 8009efa:	2301      	movne	r3, #1
 8009efc:	0692      	lsls	r2, r2, #26
 8009efe:	d42d      	bmi.n	8009f5c <_printf_common+0xb4>
 8009f00:	4649      	mov	r1, r9
 8009f02:	4638      	mov	r0, r7
 8009f04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f08:	47c0      	blx	r8
 8009f0a:	3001      	adds	r0, #1
 8009f0c:	d020      	beq.n	8009f50 <_printf_common+0xa8>
 8009f0e:	6823      	ldr	r3, [r4, #0]
 8009f10:	68e5      	ldr	r5, [r4, #12]
 8009f12:	f003 0306 	and.w	r3, r3, #6
 8009f16:	2b04      	cmp	r3, #4
 8009f18:	bf18      	it	ne
 8009f1a:	2500      	movne	r5, #0
 8009f1c:	6832      	ldr	r2, [r6, #0]
 8009f1e:	f04f 0600 	mov.w	r6, #0
 8009f22:	68a3      	ldr	r3, [r4, #8]
 8009f24:	bf08      	it	eq
 8009f26:	1aad      	subeq	r5, r5, r2
 8009f28:	6922      	ldr	r2, [r4, #16]
 8009f2a:	bf08      	it	eq
 8009f2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f30:	4293      	cmp	r3, r2
 8009f32:	bfc4      	itt	gt
 8009f34:	1a9b      	subgt	r3, r3, r2
 8009f36:	18ed      	addgt	r5, r5, r3
 8009f38:	341a      	adds	r4, #26
 8009f3a:	42b5      	cmp	r5, r6
 8009f3c:	d11a      	bne.n	8009f74 <_printf_common+0xcc>
 8009f3e:	2000      	movs	r0, #0
 8009f40:	e008      	b.n	8009f54 <_printf_common+0xac>
 8009f42:	2301      	movs	r3, #1
 8009f44:	4652      	mov	r2, sl
 8009f46:	4649      	mov	r1, r9
 8009f48:	4638      	mov	r0, r7
 8009f4a:	47c0      	blx	r8
 8009f4c:	3001      	adds	r0, #1
 8009f4e:	d103      	bne.n	8009f58 <_printf_common+0xb0>
 8009f50:	f04f 30ff 	mov.w	r0, #4294967295
 8009f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f58:	3501      	adds	r5, #1
 8009f5a:	e7c4      	b.n	8009ee6 <_printf_common+0x3e>
 8009f5c:	2030      	movs	r0, #48	; 0x30
 8009f5e:	18e1      	adds	r1, r4, r3
 8009f60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f64:	1c5a      	adds	r2, r3, #1
 8009f66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f6a:	4422      	add	r2, r4
 8009f6c:	3302      	adds	r3, #2
 8009f6e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f72:	e7c5      	b.n	8009f00 <_printf_common+0x58>
 8009f74:	2301      	movs	r3, #1
 8009f76:	4622      	mov	r2, r4
 8009f78:	4649      	mov	r1, r9
 8009f7a:	4638      	mov	r0, r7
 8009f7c:	47c0      	blx	r8
 8009f7e:	3001      	adds	r0, #1
 8009f80:	d0e6      	beq.n	8009f50 <_printf_common+0xa8>
 8009f82:	3601      	adds	r6, #1
 8009f84:	e7d9      	b.n	8009f3a <_printf_common+0x92>
	...

08009f88 <_printf_i>:
 8009f88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f8c:	7e0f      	ldrb	r7, [r1, #24]
 8009f8e:	4691      	mov	r9, r2
 8009f90:	2f78      	cmp	r7, #120	; 0x78
 8009f92:	4680      	mov	r8, r0
 8009f94:	460c      	mov	r4, r1
 8009f96:	469a      	mov	sl, r3
 8009f98:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009f9e:	d807      	bhi.n	8009fb0 <_printf_i+0x28>
 8009fa0:	2f62      	cmp	r7, #98	; 0x62
 8009fa2:	d80a      	bhi.n	8009fba <_printf_i+0x32>
 8009fa4:	2f00      	cmp	r7, #0
 8009fa6:	f000 80d9 	beq.w	800a15c <_printf_i+0x1d4>
 8009faa:	2f58      	cmp	r7, #88	; 0x58
 8009fac:	f000 80a4 	beq.w	800a0f8 <_printf_i+0x170>
 8009fb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009fb8:	e03a      	b.n	800a030 <_printf_i+0xa8>
 8009fba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009fbe:	2b15      	cmp	r3, #21
 8009fc0:	d8f6      	bhi.n	8009fb0 <_printf_i+0x28>
 8009fc2:	a101      	add	r1, pc, #4	; (adr r1, 8009fc8 <_printf_i+0x40>)
 8009fc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fc8:	0800a021 	.word	0x0800a021
 8009fcc:	0800a035 	.word	0x0800a035
 8009fd0:	08009fb1 	.word	0x08009fb1
 8009fd4:	08009fb1 	.word	0x08009fb1
 8009fd8:	08009fb1 	.word	0x08009fb1
 8009fdc:	08009fb1 	.word	0x08009fb1
 8009fe0:	0800a035 	.word	0x0800a035
 8009fe4:	08009fb1 	.word	0x08009fb1
 8009fe8:	08009fb1 	.word	0x08009fb1
 8009fec:	08009fb1 	.word	0x08009fb1
 8009ff0:	08009fb1 	.word	0x08009fb1
 8009ff4:	0800a143 	.word	0x0800a143
 8009ff8:	0800a065 	.word	0x0800a065
 8009ffc:	0800a125 	.word	0x0800a125
 800a000:	08009fb1 	.word	0x08009fb1
 800a004:	08009fb1 	.word	0x08009fb1
 800a008:	0800a165 	.word	0x0800a165
 800a00c:	08009fb1 	.word	0x08009fb1
 800a010:	0800a065 	.word	0x0800a065
 800a014:	08009fb1 	.word	0x08009fb1
 800a018:	08009fb1 	.word	0x08009fb1
 800a01c:	0800a12d 	.word	0x0800a12d
 800a020:	682b      	ldr	r3, [r5, #0]
 800a022:	1d1a      	adds	r2, r3, #4
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	602a      	str	r2, [r5, #0]
 800a028:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a02c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a030:	2301      	movs	r3, #1
 800a032:	e0a4      	b.n	800a17e <_printf_i+0x1f6>
 800a034:	6820      	ldr	r0, [r4, #0]
 800a036:	6829      	ldr	r1, [r5, #0]
 800a038:	0606      	lsls	r6, r0, #24
 800a03a:	f101 0304 	add.w	r3, r1, #4
 800a03e:	d50a      	bpl.n	800a056 <_printf_i+0xce>
 800a040:	680e      	ldr	r6, [r1, #0]
 800a042:	602b      	str	r3, [r5, #0]
 800a044:	2e00      	cmp	r6, #0
 800a046:	da03      	bge.n	800a050 <_printf_i+0xc8>
 800a048:	232d      	movs	r3, #45	; 0x2d
 800a04a:	4276      	negs	r6, r6
 800a04c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a050:	230a      	movs	r3, #10
 800a052:	485e      	ldr	r0, [pc, #376]	; (800a1cc <_printf_i+0x244>)
 800a054:	e019      	b.n	800a08a <_printf_i+0x102>
 800a056:	680e      	ldr	r6, [r1, #0]
 800a058:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a05c:	602b      	str	r3, [r5, #0]
 800a05e:	bf18      	it	ne
 800a060:	b236      	sxthne	r6, r6
 800a062:	e7ef      	b.n	800a044 <_printf_i+0xbc>
 800a064:	682b      	ldr	r3, [r5, #0]
 800a066:	6820      	ldr	r0, [r4, #0]
 800a068:	1d19      	adds	r1, r3, #4
 800a06a:	6029      	str	r1, [r5, #0]
 800a06c:	0601      	lsls	r1, r0, #24
 800a06e:	d501      	bpl.n	800a074 <_printf_i+0xec>
 800a070:	681e      	ldr	r6, [r3, #0]
 800a072:	e002      	b.n	800a07a <_printf_i+0xf2>
 800a074:	0646      	lsls	r6, r0, #25
 800a076:	d5fb      	bpl.n	800a070 <_printf_i+0xe8>
 800a078:	881e      	ldrh	r6, [r3, #0]
 800a07a:	2f6f      	cmp	r7, #111	; 0x6f
 800a07c:	bf0c      	ite	eq
 800a07e:	2308      	moveq	r3, #8
 800a080:	230a      	movne	r3, #10
 800a082:	4852      	ldr	r0, [pc, #328]	; (800a1cc <_printf_i+0x244>)
 800a084:	2100      	movs	r1, #0
 800a086:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a08a:	6865      	ldr	r5, [r4, #4]
 800a08c:	2d00      	cmp	r5, #0
 800a08e:	bfa8      	it	ge
 800a090:	6821      	ldrge	r1, [r4, #0]
 800a092:	60a5      	str	r5, [r4, #8]
 800a094:	bfa4      	itt	ge
 800a096:	f021 0104 	bicge.w	r1, r1, #4
 800a09a:	6021      	strge	r1, [r4, #0]
 800a09c:	b90e      	cbnz	r6, 800a0a2 <_printf_i+0x11a>
 800a09e:	2d00      	cmp	r5, #0
 800a0a0:	d04d      	beq.n	800a13e <_printf_i+0x1b6>
 800a0a2:	4615      	mov	r5, r2
 800a0a4:	fbb6 f1f3 	udiv	r1, r6, r3
 800a0a8:	fb03 6711 	mls	r7, r3, r1, r6
 800a0ac:	5dc7      	ldrb	r7, [r0, r7]
 800a0ae:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a0b2:	4637      	mov	r7, r6
 800a0b4:	42bb      	cmp	r3, r7
 800a0b6:	460e      	mov	r6, r1
 800a0b8:	d9f4      	bls.n	800a0a4 <_printf_i+0x11c>
 800a0ba:	2b08      	cmp	r3, #8
 800a0bc:	d10b      	bne.n	800a0d6 <_printf_i+0x14e>
 800a0be:	6823      	ldr	r3, [r4, #0]
 800a0c0:	07de      	lsls	r6, r3, #31
 800a0c2:	d508      	bpl.n	800a0d6 <_printf_i+0x14e>
 800a0c4:	6923      	ldr	r3, [r4, #16]
 800a0c6:	6861      	ldr	r1, [r4, #4]
 800a0c8:	4299      	cmp	r1, r3
 800a0ca:	bfde      	ittt	le
 800a0cc:	2330      	movle	r3, #48	; 0x30
 800a0ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a0d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a0d6:	1b52      	subs	r2, r2, r5
 800a0d8:	6122      	str	r2, [r4, #16]
 800a0da:	464b      	mov	r3, r9
 800a0dc:	4621      	mov	r1, r4
 800a0de:	4640      	mov	r0, r8
 800a0e0:	f8cd a000 	str.w	sl, [sp]
 800a0e4:	aa03      	add	r2, sp, #12
 800a0e6:	f7ff fedf 	bl	8009ea8 <_printf_common>
 800a0ea:	3001      	adds	r0, #1
 800a0ec:	d14c      	bne.n	800a188 <_printf_i+0x200>
 800a0ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a0f2:	b004      	add	sp, #16
 800a0f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0f8:	4834      	ldr	r0, [pc, #208]	; (800a1cc <_printf_i+0x244>)
 800a0fa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a0fe:	6829      	ldr	r1, [r5, #0]
 800a100:	6823      	ldr	r3, [r4, #0]
 800a102:	f851 6b04 	ldr.w	r6, [r1], #4
 800a106:	6029      	str	r1, [r5, #0]
 800a108:	061d      	lsls	r5, r3, #24
 800a10a:	d514      	bpl.n	800a136 <_printf_i+0x1ae>
 800a10c:	07df      	lsls	r7, r3, #31
 800a10e:	bf44      	itt	mi
 800a110:	f043 0320 	orrmi.w	r3, r3, #32
 800a114:	6023      	strmi	r3, [r4, #0]
 800a116:	b91e      	cbnz	r6, 800a120 <_printf_i+0x198>
 800a118:	6823      	ldr	r3, [r4, #0]
 800a11a:	f023 0320 	bic.w	r3, r3, #32
 800a11e:	6023      	str	r3, [r4, #0]
 800a120:	2310      	movs	r3, #16
 800a122:	e7af      	b.n	800a084 <_printf_i+0xfc>
 800a124:	6823      	ldr	r3, [r4, #0]
 800a126:	f043 0320 	orr.w	r3, r3, #32
 800a12a:	6023      	str	r3, [r4, #0]
 800a12c:	2378      	movs	r3, #120	; 0x78
 800a12e:	4828      	ldr	r0, [pc, #160]	; (800a1d0 <_printf_i+0x248>)
 800a130:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a134:	e7e3      	b.n	800a0fe <_printf_i+0x176>
 800a136:	0659      	lsls	r1, r3, #25
 800a138:	bf48      	it	mi
 800a13a:	b2b6      	uxthmi	r6, r6
 800a13c:	e7e6      	b.n	800a10c <_printf_i+0x184>
 800a13e:	4615      	mov	r5, r2
 800a140:	e7bb      	b.n	800a0ba <_printf_i+0x132>
 800a142:	682b      	ldr	r3, [r5, #0]
 800a144:	6826      	ldr	r6, [r4, #0]
 800a146:	1d18      	adds	r0, r3, #4
 800a148:	6961      	ldr	r1, [r4, #20]
 800a14a:	6028      	str	r0, [r5, #0]
 800a14c:	0635      	lsls	r5, r6, #24
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	d501      	bpl.n	800a156 <_printf_i+0x1ce>
 800a152:	6019      	str	r1, [r3, #0]
 800a154:	e002      	b.n	800a15c <_printf_i+0x1d4>
 800a156:	0670      	lsls	r0, r6, #25
 800a158:	d5fb      	bpl.n	800a152 <_printf_i+0x1ca>
 800a15a:	8019      	strh	r1, [r3, #0]
 800a15c:	2300      	movs	r3, #0
 800a15e:	4615      	mov	r5, r2
 800a160:	6123      	str	r3, [r4, #16]
 800a162:	e7ba      	b.n	800a0da <_printf_i+0x152>
 800a164:	682b      	ldr	r3, [r5, #0]
 800a166:	2100      	movs	r1, #0
 800a168:	1d1a      	adds	r2, r3, #4
 800a16a:	602a      	str	r2, [r5, #0]
 800a16c:	681d      	ldr	r5, [r3, #0]
 800a16e:	6862      	ldr	r2, [r4, #4]
 800a170:	4628      	mov	r0, r5
 800a172:	f000 fa9b 	bl	800a6ac <memchr>
 800a176:	b108      	cbz	r0, 800a17c <_printf_i+0x1f4>
 800a178:	1b40      	subs	r0, r0, r5
 800a17a:	6060      	str	r0, [r4, #4]
 800a17c:	6863      	ldr	r3, [r4, #4]
 800a17e:	6123      	str	r3, [r4, #16]
 800a180:	2300      	movs	r3, #0
 800a182:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a186:	e7a8      	b.n	800a0da <_printf_i+0x152>
 800a188:	462a      	mov	r2, r5
 800a18a:	4649      	mov	r1, r9
 800a18c:	4640      	mov	r0, r8
 800a18e:	6923      	ldr	r3, [r4, #16]
 800a190:	47d0      	blx	sl
 800a192:	3001      	adds	r0, #1
 800a194:	d0ab      	beq.n	800a0ee <_printf_i+0x166>
 800a196:	6823      	ldr	r3, [r4, #0]
 800a198:	079b      	lsls	r3, r3, #30
 800a19a:	d413      	bmi.n	800a1c4 <_printf_i+0x23c>
 800a19c:	68e0      	ldr	r0, [r4, #12]
 800a19e:	9b03      	ldr	r3, [sp, #12]
 800a1a0:	4298      	cmp	r0, r3
 800a1a2:	bfb8      	it	lt
 800a1a4:	4618      	movlt	r0, r3
 800a1a6:	e7a4      	b.n	800a0f2 <_printf_i+0x16a>
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	4632      	mov	r2, r6
 800a1ac:	4649      	mov	r1, r9
 800a1ae:	4640      	mov	r0, r8
 800a1b0:	47d0      	blx	sl
 800a1b2:	3001      	adds	r0, #1
 800a1b4:	d09b      	beq.n	800a0ee <_printf_i+0x166>
 800a1b6:	3501      	adds	r5, #1
 800a1b8:	68e3      	ldr	r3, [r4, #12]
 800a1ba:	9903      	ldr	r1, [sp, #12]
 800a1bc:	1a5b      	subs	r3, r3, r1
 800a1be:	42ab      	cmp	r3, r5
 800a1c0:	dcf2      	bgt.n	800a1a8 <_printf_i+0x220>
 800a1c2:	e7eb      	b.n	800a19c <_printf_i+0x214>
 800a1c4:	2500      	movs	r5, #0
 800a1c6:	f104 0619 	add.w	r6, r4, #25
 800a1ca:	e7f5      	b.n	800a1b8 <_printf_i+0x230>
 800a1cc:	0800a931 	.word	0x0800a931
 800a1d0:	0800a942 	.word	0x0800a942

0800a1d4 <_sbrk_r>:
 800a1d4:	b538      	push	{r3, r4, r5, lr}
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	4d05      	ldr	r5, [pc, #20]	; (800a1f0 <_sbrk_r+0x1c>)
 800a1da:	4604      	mov	r4, r0
 800a1dc:	4608      	mov	r0, r1
 800a1de:	602b      	str	r3, [r5, #0]
 800a1e0:	f7f7 f9d2 	bl	8001588 <_sbrk>
 800a1e4:	1c43      	adds	r3, r0, #1
 800a1e6:	d102      	bne.n	800a1ee <_sbrk_r+0x1a>
 800a1e8:	682b      	ldr	r3, [r5, #0]
 800a1ea:	b103      	cbz	r3, 800a1ee <_sbrk_r+0x1a>
 800a1ec:	6023      	str	r3, [r4, #0]
 800a1ee:	bd38      	pop	{r3, r4, r5, pc}
 800a1f0:	2000164c 	.word	0x2000164c

0800a1f4 <__sread>:
 800a1f4:	b510      	push	{r4, lr}
 800a1f6:	460c      	mov	r4, r1
 800a1f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1fc:	f000 fab8 	bl	800a770 <_read_r>
 800a200:	2800      	cmp	r0, #0
 800a202:	bfab      	itete	ge
 800a204:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a206:	89a3      	ldrhlt	r3, [r4, #12]
 800a208:	181b      	addge	r3, r3, r0
 800a20a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a20e:	bfac      	ite	ge
 800a210:	6563      	strge	r3, [r4, #84]	; 0x54
 800a212:	81a3      	strhlt	r3, [r4, #12]
 800a214:	bd10      	pop	{r4, pc}

0800a216 <__swrite>:
 800a216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a21a:	461f      	mov	r7, r3
 800a21c:	898b      	ldrh	r3, [r1, #12]
 800a21e:	4605      	mov	r5, r0
 800a220:	05db      	lsls	r3, r3, #23
 800a222:	460c      	mov	r4, r1
 800a224:	4616      	mov	r6, r2
 800a226:	d505      	bpl.n	800a234 <__swrite+0x1e>
 800a228:	2302      	movs	r3, #2
 800a22a:	2200      	movs	r2, #0
 800a22c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a230:	f000 f9c4 	bl	800a5bc <_lseek_r>
 800a234:	89a3      	ldrh	r3, [r4, #12]
 800a236:	4632      	mov	r2, r6
 800a238:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a23c:	81a3      	strh	r3, [r4, #12]
 800a23e:	4628      	mov	r0, r5
 800a240:	463b      	mov	r3, r7
 800a242:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a24a:	f000 b869 	b.w	800a320 <_write_r>

0800a24e <__sseek>:
 800a24e:	b510      	push	{r4, lr}
 800a250:	460c      	mov	r4, r1
 800a252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a256:	f000 f9b1 	bl	800a5bc <_lseek_r>
 800a25a:	1c43      	adds	r3, r0, #1
 800a25c:	89a3      	ldrh	r3, [r4, #12]
 800a25e:	bf15      	itete	ne
 800a260:	6560      	strne	r0, [r4, #84]	; 0x54
 800a262:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a266:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a26a:	81a3      	strheq	r3, [r4, #12]
 800a26c:	bf18      	it	ne
 800a26e:	81a3      	strhne	r3, [r4, #12]
 800a270:	bd10      	pop	{r4, pc}

0800a272 <__sclose>:
 800a272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a276:	f000 b8d3 	b.w	800a420 <_close_r>
	...

0800a27c <__swbuf_r>:
 800a27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a27e:	460e      	mov	r6, r1
 800a280:	4614      	mov	r4, r2
 800a282:	4605      	mov	r5, r0
 800a284:	b118      	cbz	r0, 800a28e <__swbuf_r+0x12>
 800a286:	6983      	ldr	r3, [r0, #24]
 800a288:	b90b      	cbnz	r3, 800a28e <__swbuf_r+0x12>
 800a28a:	f7ff fb81 	bl	8009990 <__sinit>
 800a28e:	4b21      	ldr	r3, [pc, #132]	; (800a314 <__swbuf_r+0x98>)
 800a290:	429c      	cmp	r4, r3
 800a292:	d12b      	bne.n	800a2ec <__swbuf_r+0x70>
 800a294:	686c      	ldr	r4, [r5, #4]
 800a296:	69a3      	ldr	r3, [r4, #24]
 800a298:	60a3      	str	r3, [r4, #8]
 800a29a:	89a3      	ldrh	r3, [r4, #12]
 800a29c:	071a      	lsls	r2, r3, #28
 800a29e:	d52f      	bpl.n	800a300 <__swbuf_r+0x84>
 800a2a0:	6923      	ldr	r3, [r4, #16]
 800a2a2:	b36b      	cbz	r3, 800a300 <__swbuf_r+0x84>
 800a2a4:	6923      	ldr	r3, [r4, #16]
 800a2a6:	6820      	ldr	r0, [r4, #0]
 800a2a8:	b2f6      	uxtb	r6, r6
 800a2aa:	1ac0      	subs	r0, r0, r3
 800a2ac:	6963      	ldr	r3, [r4, #20]
 800a2ae:	4637      	mov	r7, r6
 800a2b0:	4283      	cmp	r3, r0
 800a2b2:	dc04      	bgt.n	800a2be <__swbuf_r+0x42>
 800a2b4:	4621      	mov	r1, r4
 800a2b6:	4628      	mov	r0, r5
 800a2b8:	f000 f944 	bl	800a544 <_fflush_r>
 800a2bc:	bb30      	cbnz	r0, 800a30c <__swbuf_r+0x90>
 800a2be:	68a3      	ldr	r3, [r4, #8]
 800a2c0:	3001      	adds	r0, #1
 800a2c2:	3b01      	subs	r3, #1
 800a2c4:	60a3      	str	r3, [r4, #8]
 800a2c6:	6823      	ldr	r3, [r4, #0]
 800a2c8:	1c5a      	adds	r2, r3, #1
 800a2ca:	6022      	str	r2, [r4, #0]
 800a2cc:	701e      	strb	r6, [r3, #0]
 800a2ce:	6963      	ldr	r3, [r4, #20]
 800a2d0:	4283      	cmp	r3, r0
 800a2d2:	d004      	beq.n	800a2de <__swbuf_r+0x62>
 800a2d4:	89a3      	ldrh	r3, [r4, #12]
 800a2d6:	07db      	lsls	r3, r3, #31
 800a2d8:	d506      	bpl.n	800a2e8 <__swbuf_r+0x6c>
 800a2da:	2e0a      	cmp	r6, #10
 800a2dc:	d104      	bne.n	800a2e8 <__swbuf_r+0x6c>
 800a2de:	4621      	mov	r1, r4
 800a2e0:	4628      	mov	r0, r5
 800a2e2:	f000 f92f 	bl	800a544 <_fflush_r>
 800a2e6:	b988      	cbnz	r0, 800a30c <__swbuf_r+0x90>
 800a2e8:	4638      	mov	r0, r7
 800a2ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2ec:	4b0a      	ldr	r3, [pc, #40]	; (800a318 <__swbuf_r+0x9c>)
 800a2ee:	429c      	cmp	r4, r3
 800a2f0:	d101      	bne.n	800a2f6 <__swbuf_r+0x7a>
 800a2f2:	68ac      	ldr	r4, [r5, #8]
 800a2f4:	e7cf      	b.n	800a296 <__swbuf_r+0x1a>
 800a2f6:	4b09      	ldr	r3, [pc, #36]	; (800a31c <__swbuf_r+0xa0>)
 800a2f8:	429c      	cmp	r4, r3
 800a2fa:	bf08      	it	eq
 800a2fc:	68ec      	ldreq	r4, [r5, #12]
 800a2fe:	e7ca      	b.n	800a296 <__swbuf_r+0x1a>
 800a300:	4621      	mov	r1, r4
 800a302:	4628      	mov	r0, r5
 800a304:	f000 f81e 	bl	800a344 <__swsetup_r>
 800a308:	2800      	cmp	r0, #0
 800a30a:	d0cb      	beq.n	800a2a4 <__swbuf_r+0x28>
 800a30c:	f04f 37ff 	mov.w	r7, #4294967295
 800a310:	e7ea      	b.n	800a2e8 <__swbuf_r+0x6c>
 800a312:	bf00      	nop
 800a314:	0800a8e0 	.word	0x0800a8e0
 800a318:	0800a900 	.word	0x0800a900
 800a31c:	0800a8c0 	.word	0x0800a8c0

0800a320 <_write_r>:
 800a320:	b538      	push	{r3, r4, r5, lr}
 800a322:	4604      	mov	r4, r0
 800a324:	4608      	mov	r0, r1
 800a326:	4611      	mov	r1, r2
 800a328:	2200      	movs	r2, #0
 800a32a:	4d05      	ldr	r5, [pc, #20]	; (800a340 <_write_r+0x20>)
 800a32c:	602a      	str	r2, [r5, #0]
 800a32e:	461a      	mov	r2, r3
 800a330:	f7f7 f8dd 	bl	80014ee <_write>
 800a334:	1c43      	adds	r3, r0, #1
 800a336:	d102      	bne.n	800a33e <_write_r+0x1e>
 800a338:	682b      	ldr	r3, [r5, #0]
 800a33a:	b103      	cbz	r3, 800a33e <_write_r+0x1e>
 800a33c:	6023      	str	r3, [r4, #0]
 800a33e:	bd38      	pop	{r3, r4, r5, pc}
 800a340:	2000164c 	.word	0x2000164c

0800a344 <__swsetup_r>:
 800a344:	4b32      	ldr	r3, [pc, #200]	; (800a410 <__swsetup_r+0xcc>)
 800a346:	b570      	push	{r4, r5, r6, lr}
 800a348:	681d      	ldr	r5, [r3, #0]
 800a34a:	4606      	mov	r6, r0
 800a34c:	460c      	mov	r4, r1
 800a34e:	b125      	cbz	r5, 800a35a <__swsetup_r+0x16>
 800a350:	69ab      	ldr	r3, [r5, #24]
 800a352:	b913      	cbnz	r3, 800a35a <__swsetup_r+0x16>
 800a354:	4628      	mov	r0, r5
 800a356:	f7ff fb1b 	bl	8009990 <__sinit>
 800a35a:	4b2e      	ldr	r3, [pc, #184]	; (800a414 <__swsetup_r+0xd0>)
 800a35c:	429c      	cmp	r4, r3
 800a35e:	d10f      	bne.n	800a380 <__swsetup_r+0x3c>
 800a360:	686c      	ldr	r4, [r5, #4]
 800a362:	89a3      	ldrh	r3, [r4, #12]
 800a364:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a368:	0719      	lsls	r1, r3, #28
 800a36a:	d42c      	bmi.n	800a3c6 <__swsetup_r+0x82>
 800a36c:	06dd      	lsls	r5, r3, #27
 800a36e:	d411      	bmi.n	800a394 <__swsetup_r+0x50>
 800a370:	2309      	movs	r3, #9
 800a372:	6033      	str	r3, [r6, #0]
 800a374:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a378:	f04f 30ff 	mov.w	r0, #4294967295
 800a37c:	81a3      	strh	r3, [r4, #12]
 800a37e:	e03e      	b.n	800a3fe <__swsetup_r+0xba>
 800a380:	4b25      	ldr	r3, [pc, #148]	; (800a418 <__swsetup_r+0xd4>)
 800a382:	429c      	cmp	r4, r3
 800a384:	d101      	bne.n	800a38a <__swsetup_r+0x46>
 800a386:	68ac      	ldr	r4, [r5, #8]
 800a388:	e7eb      	b.n	800a362 <__swsetup_r+0x1e>
 800a38a:	4b24      	ldr	r3, [pc, #144]	; (800a41c <__swsetup_r+0xd8>)
 800a38c:	429c      	cmp	r4, r3
 800a38e:	bf08      	it	eq
 800a390:	68ec      	ldreq	r4, [r5, #12]
 800a392:	e7e6      	b.n	800a362 <__swsetup_r+0x1e>
 800a394:	0758      	lsls	r0, r3, #29
 800a396:	d512      	bpl.n	800a3be <__swsetup_r+0x7a>
 800a398:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a39a:	b141      	cbz	r1, 800a3ae <__swsetup_r+0x6a>
 800a39c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3a0:	4299      	cmp	r1, r3
 800a3a2:	d002      	beq.n	800a3aa <__swsetup_r+0x66>
 800a3a4:	4630      	mov	r0, r6
 800a3a6:	f000 f99b 	bl	800a6e0 <_free_r>
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	6363      	str	r3, [r4, #52]	; 0x34
 800a3ae:	89a3      	ldrh	r3, [r4, #12]
 800a3b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a3b4:	81a3      	strh	r3, [r4, #12]
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	6063      	str	r3, [r4, #4]
 800a3ba:	6923      	ldr	r3, [r4, #16]
 800a3bc:	6023      	str	r3, [r4, #0]
 800a3be:	89a3      	ldrh	r3, [r4, #12]
 800a3c0:	f043 0308 	orr.w	r3, r3, #8
 800a3c4:	81a3      	strh	r3, [r4, #12]
 800a3c6:	6923      	ldr	r3, [r4, #16]
 800a3c8:	b94b      	cbnz	r3, 800a3de <__swsetup_r+0x9a>
 800a3ca:	89a3      	ldrh	r3, [r4, #12]
 800a3cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a3d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3d4:	d003      	beq.n	800a3de <__swsetup_r+0x9a>
 800a3d6:	4621      	mov	r1, r4
 800a3d8:	4630      	mov	r0, r6
 800a3da:	f000 f927 	bl	800a62c <__smakebuf_r>
 800a3de:	89a0      	ldrh	r0, [r4, #12]
 800a3e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3e4:	f010 0301 	ands.w	r3, r0, #1
 800a3e8:	d00a      	beq.n	800a400 <__swsetup_r+0xbc>
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	60a3      	str	r3, [r4, #8]
 800a3ee:	6963      	ldr	r3, [r4, #20]
 800a3f0:	425b      	negs	r3, r3
 800a3f2:	61a3      	str	r3, [r4, #24]
 800a3f4:	6923      	ldr	r3, [r4, #16]
 800a3f6:	b943      	cbnz	r3, 800a40a <__swsetup_r+0xc6>
 800a3f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a3fc:	d1ba      	bne.n	800a374 <__swsetup_r+0x30>
 800a3fe:	bd70      	pop	{r4, r5, r6, pc}
 800a400:	0781      	lsls	r1, r0, #30
 800a402:	bf58      	it	pl
 800a404:	6963      	ldrpl	r3, [r4, #20]
 800a406:	60a3      	str	r3, [r4, #8]
 800a408:	e7f4      	b.n	800a3f4 <__swsetup_r+0xb0>
 800a40a:	2000      	movs	r0, #0
 800a40c:	e7f7      	b.n	800a3fe <__swsetup_r+0xba>
 800a40e:	bf00      	nop
 800a410:	20000184 	.word	0x20000184
 800a414:	0800a8e0 	.word	0x0800a8e0
 800a418:	0800a900 	.word	0x0800a900
 800a41c:	0800a8c0 	.word	0x0800a8c0

0800a420 <_close_r>:
 800a420:	b538      	push	{r3, r4, r5, lr}
 800a422:	2300      	movs	r3, #0
 800a424:	4d05      	ldr	r5, [pc, #20]	; (800a43c <_close_r+0x1c>)
 800a426:	4604      	mov	r4, r0
 800a428:	4608      	mov	r0, r1
 800a42a:	602b      	str	r3, [r5, #0]
 800a42c:	f7f7 f87b 	bl	8001526 <_close>
 800a430:	1c43      	adds	r3, r0, #1
 800a432:	d102      	bne.n	800a43a <_close_r+0x1a>
 800a434:	682b      	ldr	r3, [r5, #0]
 800a436:	b103      	cbz	r3, 800a43a <_close_r+0x1a>
 800a438:	6023      	str	r3, [r4, #0]
 800a43a:	bd38      	pop	{r3, r4, r5, pc}
 800a43c:	2000164c 	.word	0x2000164c

0800a440 <__sflush_r>:
 800a440:	898a      	ldrh	r2, [r1, #12]
 800a442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a444:	4605      	mov	r5, r0
 800a446:	0710      	lsls	r0, r2, #28
 800a448:	460c      	mov	r4, r1
 800a44a:	d457      	bmi.n	800a4fc <__sflush_r+0xbc>
 800a44c:	684b      	ldr	r3, [r1, #4]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	dc04      	bgt.n	800a45c <__sflush_r+0x1c>
 800a452:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a454:	2b00      	cmp	r3, #0
 800a456:	dc01      	bgt.n	800a45c <__sflush_r+0x1c>
 800a458:	2000      	movs	r0, #0
 800a45a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a45c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a45e:	2e00      	cmp	r6, #0
 800a460:	d0fa      	beq.n	800a458 <__sflush_r+0x18>
 800a462:	2300      	movs	r3, #0
 800a464:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a468:	682f      	ldr	r7, [r5, #0]
 800a46a:	602b      	str	r3, [r5, #0]
 800a46c:	d032      	beq.n	800a4d4 <__sflush_r+0x94>
 800a46e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a470:	89a3      	ldrh	r3, [r4, #12]
 800a472:	075a      	lsls	r2, r3, #29
 800a474:	d505      	bpl.n	800a482 <__sflush_r+0x42>
 800a476:	6863      	ldr	r3, [r4, #4]
 800a478:	1ac0      	subs	r0, r0, r3
 800a47a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a47c:	b10b      	cbz	r3, 800a482 <__sflush_r+0x42>
 800a47e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a480:	1ac0      	subs	r0, r0, r3
 800a482:	2300      	movs	r3, #0
 800a484:	4602      	mov	r2, r0
 800a486:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a488:	4628      	mov	r0, r5
 800a48a:	6a21      	ldr	r1, [r4, #32]
 800a48c:	47b0      	blx	r6
 800a48e:	1c43      	adds	r3, r0, #1
 800a490:	89a3      	ldrh	r3, [r4, #12]
 800a492:	d106      	bne.n	800a4a2 <__sflush_r+0x62>
 800a494:	6829      	ldr	r1, [r5, #0]
 800a496:	291d      	cmp	r1, #29
 800a498:	d82c      	bhi.n	800a4f4 <__sflush_r+0xb4>
 800a49a:	4a29      	ldr	r2, [pc, #164]	; (800a540 <__sflush_r+0x100>)
 800a49c:	40ca      	lsrs	r2, r1
 800a49e:	07d6      	lsls	r6, r2, #31
 800a4a0:	d528      	bpl.n	800a4f4 <__sflush_r+0xb4>
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	6062      	str	r2, [r4, #4]
 800a4a6:	6922      	ldr	r2, [r4, #16]
 800a4a8:	04d9      	lsls	r1, r3, #19
 800a4aa:	6022      	str	r2, [r4, #0]
 800a4ac:	d504      	bpl.n	800a4b8 <__sflush_r+0x78>
 800a4ae:	1c42      	adds	r2, r0, #1
 800a4b0:	d101      	bne.n	800a4b6 <__sflush_r+0x76>
 800a4b2:	682b      	ldr	r3, [r5, #0]
 800a4b4:	b903      	cbnz	r3, 800a4b8 <__sflush_r+0x78>
 800a4b6:	6560      	str	r0, [r4, #84]	; 0x54
 800a4b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4ba:	602f      	str	r7, [r5, #0]
 800a4bc:	2900      	cmp	r1, #0
 800a4be:	d0cb      	beq.n	800a458 <__sflush_r+0x18>
 800a4c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4c4:	4299      	cmp	r1, r3
 800a4c6:	d002      	beq.n	800a4ce <__sflush_r+0x8e>
 800a4c8:	4628      	mov	r0, r5
 800a4ca:	f000 f909 	bl	800a6e0 <_free_r>
 800a4ce:	2000      	movs	r0, #0
 800a4d0:	6360      	str	r0, [r4, #52]	; 0x34
 800a4d2:	e7c2      	b.n	800a45a <__sflush_r+0x1a>
 800a4d4:	6a21      	ldr	r1, [r4, #32]
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	4628      	mov	r0, r5
 800a4da:	47b0      	blx	r6
 800a4dc:	1c41      	adds	r1, r0, #1
 800a4de:	d1c7      	bne.n	800a470 <__sflush_r+0x30>
 800a4e0:	682b      	ldr	r3, [r5, #0]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d0c4      	beq.n	800a470 <__sflush_r+0x30>
 800a4e6:	2b1d      	cmp	r3, #29
 800a4e8:	d001      	beq.n	800a4ee <__sflush_r+0xae>
 800a4ea:	2b16      	cmp	r3, #22
 800a4ec:	d101      	bne.n	800a4f2 <__sflush_r+0xb2>
 800a4ee:	602f      	str	r7, [r5, #0]
 800a4f0:	e7b2      	b.n	800a458 <__sflush_r+0x18>
 800a4f2:	89a3      	ldrh	r3, [r4, #12]
 800a4f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4f8:	81a3      	strh	r3, [r4, #12]
 800a4fa:	e7ae      	b.n	800a45a <__sflush_r+0x1a>
 800a4fc:	690f      	ldr	r7, [r1, #16]
 800a4fe:	2f00      	cmp	r7, #0
 800a500:	d0aa      	beq.n	800a458 <__sflush_r+0x18>
 800a502:	0793      	lsls	r3, r2, #30
 800a504:	bf18      	it	ne
 800a506:	2300      	movne	r3, #0
 800a508:	680e      	ldr	r6, [r1, #0]
 800a50a:	bf08      	it	eq
 800a50c:	694b      	ldreq	r3, [r1, #20]
 800a50e:	1bf6      	subs	r6, r6, r7
 800a510:	600f      	str	r7, [r1, #0]
 800a512:	608b      	str	r3, [r1, #8]
 800a514:	2e00      	cmp	r6, #0
 800a516:	dd9f      	ble.n	800a458 <__sflush_r+0x18>
 800a518:	4633      	mov	r3, r6
 800a51a:	463a      	mov	r2, r7
 800a51c:	4628      	mov	r0, r5
 800a51e:	6a21      	ldr	r1, [r4, #32]
 800a520:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a524:	47e0      	blx	ip
 800a526:	2800      	cmp	r0, #0
 800a528:	dc06      	bgt.n	800a538 <__sflush_r+0xf8>
 800a52a:	89a3      	ldrh	r3, [r4, #12]
 800a52c:	f04f 30ff 	mov.w	r0, #4294967295
 800a530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a534:	81a3      	strh	r3, [r4, #12]
 800a536:	e790      	b.n	800a45a <__sflush_r+0x1a>
 800a538:	4407      	add	r7, r0
 800a53a:	1a36      	subs	r6, r6, r0
 800a53c:	e7ea      	b.n	800a514 <__sflush_r+0xd4>
 800a53e:	bf00      	nop
 800a540:	20400001 	.word	0x20400001

0800a544 <_fflush_r>:
 800a544:	b538      	push	{r3, r4, r5, lr}
 800a546:	690b      	ldr	r3, [r1, #16]
 800a548:	4605      	mov	r5, r0
 800a54a:	460c      	mov	r4, r1
 800a54c:	b913      	cbnz	r3, 800a554 <_fflush_r+0x10>
 800a54e:	2500      	movs	r5, #0
 800a550:	4628      	mov	r0, r5
 800a552:	bd38      	pop	{r3, r4, r5, pc}
 800a554:	b118      	cbz	r0, 800a55e <_fflush_r+0x1a>
 800a556:	6983      	ldr	r3, [r0, #24]
 800a558:	b90b      	cbnz	r3, 800a55e <_fflush_r+0x1a>
 800a55a:	f7ff fa19 	bl	8009990 <__sinit>
 800a55e:	4b14      	ldr	r3, [pc, #80]	; (800a5b0 <_fflush_r+0x6c>)
 800a560:	429c      	cmp	r4, r3
 800a562:	d11b      	bne.n	800a59c <_fflush_r+0x58>
 800a564:	686c      	ldr	r4, [r5, #4]
 800a566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d0ef      	beq.n	800a54e <_fflush_r+0xa>
 800a56e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a570:	07d0      	lsls	r0, r2, #31
 800a572:	d404      	bmi.n	800a57e <_fflush_r+0x3a>
 800a574:	0599      	lsls	r1, r3, #22
 800a576:	d402      	bmi.n	800a57e <_fflush_r+0x3a>
 800a578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a57a:	f7ff faa7 	bl	8009acc <__retarget_lock_acquire_recursive>
 800a57e:	4628      	mov	r0, r5
 800a580:	4621      	mov	r1, r4
 800a582:	f7ff ff5d 	bl	800a440 <__sflush_r>
 800a586:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a588:	4605      	mov	r5, r0
 800a58a:	07da      	lsls	r2, r3, #31
 800a58c:	d4e0      	bmi.n	800a550 <_fflush_r+0xc>
 800a58e:	89a3      	ldrh	r3, [r4, #12]
 800a590:	059b      	lsls	r3, r3, #22
 800a592:	d4dd      	bmi.n	800a550 <_fflush_r+0xc>
 800a594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a596:	f7ff fa9a 	bl	8009ace <__retarget_lock_release_recursive>
 800a59a:	e7d9      	b.n	800a550 <_fflush_r+0xc>
 800a59c:	4b05      	ldr	r3, [pc, #20]	; (800a5b4 <_fflush_r+0x70>)
 800a59e:	429c      	cmp	r4, r3
 800a5a0:	d101      	bne.n	800a5a6 <_fflush_r+0x62>
 800a5a2:	68ac      	ldr	r4, [r5, #8]
 800a5a4:	e7df      	b.n	800a566 <_fflush_r+0x22>
 800a5a6:	4b04      	ldr	r3, [pc, #16]	; (800a5b8 <_fflush_r+0x74>)
 800a5a8:	429c      	cmp	r4, r3
 800a5aa:	bf08      	it	eq
 800a5ac:	68ec      	ldreq	r4, [r5, #12]
 800a5ae:	e7da      	b.n	800a566 <_fflush_r+0x22>
 800a5b0:	0800a8e0 	.word	0x0800a8e0
 800a5b4:	0800a900 	.word	0x0800a900
 800a5b8:	0800a8c0 	.word	0x0800a8c0

0800a5bc <_lseek_r>:
 800a5bc:	b538      	push	{r3, r4, r5, lr}
 800a5be:	4604      	mov	r4, r0
 800a5c0:	4608      	mov	r0, r1
 800a5c2:	4611      	mov	r1, r2
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	4d05      	ldr	r5, [pc, #20]	; (800a5dc <_lseek_r+0x20>)
 800a5c8:	602a      	str	r2, [r5, #0]
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	f7f6 ffcf 	bl	800156e <_lseek>
 800a5d0:	1c43      	adds	r3, r0, #1
 800a5d2:	d102      	bne.n	800a5da <_lseek_r+0x1e>
 800a5d4:	682b      	ldr	r3, [r5, #0]
 800a5d6:	b103      	cbz	r3, 800a5da <_lseek_r+0x1e>
 800a5d8:	6023      	str	r3, [r4, #0]
 800a5da:	bd38      	pop	{r3, r4, r5, pc}
 800a5dc:	2000164c 	.word	0x2000164c

0800a5e0 <__swhatbuf_r>:
 800a5e0:	b570      	push	{r4, r5, r6, lr}
 800a5e2:	460e      	mov	r6, r1
 800a5e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5e8:	4614      	mov	r4, r2
 800a5ea:	2900      	cmp	r1, #0
 800a5ec:	461d      	mov	r5, r3
 800a5ee:	b096      	sub	sp, #88	; 0x58
 800a5f0:	da08      	bge.n	800a604 <__swhatbuf_r+0x24>
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a5f8:	602a      	str	r2, [r5, #0]
 800a5fa:	061a      	lsls	r2, r3, #24
 800a5fc:	d410      	bmi.n	800a620 <__swhatbuf_r+0x40>
 800a5fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a602:	e00e      	b.n	800a622 <__swhatbuf_r+0x42>
 800a604:	466a      	mov	r2, sp
 800a606:	f000 f8c5 	bl	800a794 <_fstat_r>
 800a60a:	2800      	cmp	r0, #0
 800a60c:	dbf1      	blt.n	800a5f2 <__swhatbuf_r+0x12>
 800a60e:	9a01      	ldr	r2, [sp, #4]
 800a610:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a614:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a618:	425a      	negs	r2, r3
 800a61a:	415a      	adcs	r2, r3
 800a61c:	602a      	str	r2, [r5, #0]
 800a61e:	e7ee      	b.n	800a5fe <__swhatbuf_r+0x1e>
 800a620:	2340      	movs	r3, #64	; 0x40
 800a622:	2000      	movs	r0, #0
 800a624:	6023      	str	r3, [r4, #0]
 800a626:	b016      	add	sp, #88	; 0x58
 800a628:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a62c <__smakebuf_r>:
 800a62c:	898b      	ldrh	r3, [r1, #12]
 800a62e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a630:	079d      	lsls	r5, r3, #30
 800a632:	4606      	mov	r6, r0
 800a634:	460c      	mov	r4, r1
 800a636:	d507      	bpl.n	800a648 <__smakebuf_r+0x1c>
 800a638:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a63c:	6023      	str	r3, [r4, #0]
 800a63e:	6123      	str	r3, [r4, #16]
 800a640:	2301      	movs	r3, #1
 800a642:	6163      	str	r3, [r4, #20]
 800a644:	b002      	add	sp, #8
 800a646:	bd70      	pop	{r4, r5, r6, pc}
 800a648:	466a      	mov	r2, sp
 800a64a:	ab01      	add	r3, sp, #4
 800a64c:	f7ff ffc8 	bl	800a5e0 <__swhatbuf_r>
 800a650:	9900      	ldr	r1, [sp, #0]
 800a652:	4605      	mov	r5, r0
 800a654:	4630      	mov	r0, r6
 800a656:	f7ff fa5b 	bl	8009b10 <_malloc_r>
 800a65a:	b948      	cbnz	r0, 800a670 <__smakebuf_r+0x44>
 800a65c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a660:	059a      	lsls	r2, r3, #22
 800a662:	d4ef      	bmi.n	800a644 <__smakebuf_r+0x18>
 800a664:	f023 0303 	bic.w	r3, r3, #3
 800a668:	f043 0302 	orr.w	r3, r3, #2
 800a66c:	81a3      	strh	r3, [r4, #12]
 800a66e:	e7e3      	b.n	800a638 <__smakebuf_r+0xc>
 800a670:	4b0d      	ldr	r3, [pc, #52]	; (800a6a8 <__smakebuf_r+0x7c>)
 800a672:	62b3      	str	r3, [r6, #40]	; 0x28
 800a674:	89a3      	ldrh	r3, [r4, #12]
 800a676:	6020      	str	r0, [r4, #0]
 800a678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a67c:	81a3      	strh	r3, [r4, #12]
 800a67e:	9b00      	ldr	r3, [sp, #0]
 800a680:	6120      	str	r0, [r4, #16]
 800a682:	6163      	str	r3, [r4, #20]
 800a684:	9b01      	ldr	r3, [sp, #4]
 800a686:	b15b      	cbz	r3, 800a6a0 <__smakebuf_r+0x74>
 800a688:	4630      	mov	r0, r6
 800a68a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a68e:	f000 f893 	bl	800a7b8 <_isatty_r>
 800a692:	b128      	cbz	r0, 800a6a0 <__smakebuf_r+0x74>
 800a694:	89a3      	ldrh	r3, [r4, #12]
 800a696:	f023 0303 	bic.w	r3, r3, #3
 800a69a:	f043 0301 	orr.w	r3, r3, #1
 800a69e:	81a3      	strh	r3, [r4, #12]
 800a6a0:	89a0      	ldrh	r0, [r4, #12]
 800a6a2:	4305      	orrs	r5, r0
 800a6a4:	81a5      	strh	r5, [r4, #12]
 800a6a6:	e7cd      	b.n	800a644 <__smakebuf_r+0x18>
 800a6a8:	08009929 	.word	0x08009929

0800a6ac <memchr>:
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	b510      	push	{r4, lr}
 800a6b0:	b2c9      	uxtb	r1, r1
 800a6b2:	4402      	add	r2, r0
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	d101      	bne.n	800a6be <memchr+0x12>
 800a6ba:	2000      	movs	r0, #0
 800a6bc:	e003      	b.n	800a6c6 <memchr+0x1a>
 800a6be:	7804      	ldrb	r4, [r0, #0]
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	428c      	cmp	r4, r1
 800a6c4:	d1f6      	bne.n	800a6b4 <memchr+0x8>
 800a6c6:	bd10      	pop	{r4, pc}

0800a6c8 <__malloc_lock>:
 800a6c8:	4801      	ldr	r0, [pc, #4]	; (800a6d0 <__malloc_lock+0x8>)
 800a6ca:	f7ff b9ff 	b.w	8009acc <__retarget_lock_acquire_recursive>
 800a6ce:	bf00      	nop
 800a6d0:	20001640 	.word	0x20001640

0800a6d4 <__malloc_unlock>:
 800a6d4:	4801      	ldr	r0, [pc, #4]	; (800a6dc <__malloc_unlock+0x8>)
 800a6d6:	f7ff b9fa 	b.w	8009ace <__retarget_lock_release_recursive>
 800a6da:	bf00      	nop
 800a6dc:	20001640 	.word	0x20001640

0800a6e0 <_free_r>:
 800a6e0:	b538      	push	{r3, r4, r5, lr}
 800a6e2:	4605      	mov	r5, r0
 800a6e4:	2900      	cmp	r1, #0
 800a6e6:	d040      	beq.n	800a76a <_free_r+0x8a>
 800a6e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6ec:	1f0c      	subs	r4, r1, #4
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	bfb8      	it	lt
 800a6f2:	18e4      	addlt	r4, r4, r3
 800a6f4:	f7ff ffe8 	bl	800a6c8 <__malloc_lock>
 800a6f8:	4a1c      	ldr	r2, [pc, #112]	; (800a76c <_free_r+0x8c>)
 800a6fa:	6813      	ldr	r3, [r2, #0]
 800a6fc:	b933      	cbnz	r3, 800a70c <_free_r+0x2c>
 800a6fe:	6063      	str	r3, [r4, #4]
 800a700:	6014      	str	r4, [r2, #0]
 800a702:	4628      	mov	r0, r5
 800a704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a708:	f7ff bfe4 	b.w	800a6d4 <__malloc_unlock>
 800a70c:	42a3      	cmp	r3, r4
 800a70e:	d908      	bls.n	800a722 <_free_r+0x42>
 800a710:	6820      	ldr	r0, [r4, #0]
 800a712:	1821      	adds	r1, r4, r0
 800a714:	428b      	cmp	r3, r1
 800a716:	bf01      	itttt	eq
 800a718:	6819      	ldreq	r1, [r3, #0]
 800a71a:	685b      	ldreq	r3, [r3, #4]
 800a71c:	1809      	addeq	r1, r1, r0
 800a71e:	6021      	streq	r1, [r4, #0]
 800a720:	e7ed      	b.n	800a6fe <_free_r+0x1e>
 800a722:	461a      	mov	r2, r3
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	b10b      	cbz	r3, 800a72c <_free_r+0x4c>
 800a728:	42a3      	cmp	r3, r4
 800a72a:	d9fa      	bls.n	800a722 <_free_r+0x42>
 800a72c:	6811      	ldr	r1, [r2, #0]
 800a72e:	1850      	adds	r0, r2, r1
 800a730:	42a0      	cmp	r0, r4
 800a732:	d10b      	bne.n	800a74c <_free_r+0x6c>
 800a734:	6820      	ldr	r0, [r4, #0]
 800a736:	4401      	add	r1, r0
 800a738:	1850      	adds	r0, r2, r1
 800a73a:	4283      	cmp	r3, r0
 800a73c:	6011      	str	r1, [r2, #0]
 800a73e:	d1e0      	bne.n	800a702 <_free_r+0x22>
 800a740:	6818      	ldr	r0, [r3, #0]
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	4401      	add	r1, r0
 800a746:	6011      	str	r1, [r2, #0]
 800a748:	6053      	str	r3, [r2, #4]
 800a74a:	e7da      	b.n	800a702 <_free_r+0x22>
 800a74c:	d902      	bls.n	800a754 <_free_r+0x74>
 800a74e:	230c      	movs	r3, #12
 800a750:	602b      	str	r3, [r5, #0]
 800a752:	e7d6      	b.n	800a702 <_free_r+0x22>
 800a754:	6820      	ldr	r0, [r4, #0]
 800a756:	1821      	adds	r1, r4, r0
 800a758:	428b      	cmp	r3, r1
 800a75a:	bf01      	itttt	eq
 800a75c:	6819      	ldreq	r1, [r3, #0]
 800a75e:	685b      	ldreq	r3, [r3, #4]
 800a760:	1809      	addeq	r1, r1, r0
 800a762:	6021      	streq	r1, [r4, #0]
 800a764:	6063      	str	r3, [r4, #4]
 800a766:	6054      	str	r4, [r2, #4]
 800a768:	e7cb      	b.n	800a702 <_free_r+0x22>
 800a76a:	bd38      	pop	{r3, r4, r5, pc}
 800a76c:	20001644 	.word	0x20001644

0800a770 <_read_r>:
 800a770:	b538      	push	{r3, r4, r5, lr}
 800a772:	4604      	mov	r4, r0
 800a774:	4608      	mov	r0, r1
 800a776:	4611      	mov	r1, r2
 800a778:	2200      	movs	r2, #0
 800a77a:	4d05      	ldr	r5, [pc, #20]	; (800a790 <_read_r+0x20>)
 800a77c:	602a      	str	r2, [r5, #0]
 800a77e:	461a      	mov	r2, r3
 800a780:	f7f6 fe98 	bl	80014b4 <_read>
 800a784:	1c43      	adds	r3, r0, #1
 800a786:	d102      	bne.n	800a78e <_read_r+0x1e>
 800a788:	682b      	ldr	r3, [r5, #0]
 800a78a:	b103      	cbz	r3, 800a78e <_read_r+0x1e>
 800a78c:	6023      	str	r3, [r4, #0]
 800a78e:	bd38      	pop	{r3, r4, r5, pc}
 800a790:	2000164c 	.word	0x2000164c

0800a794 <_fstat_r>:
 800a794:	b538      	push	{r3, r4, r5, lr}
 800a796:	2300      	movs	r3, #0
 800a798:	4d06      	ldr	r5, [pc, #24]	; (800a7b4 <_fstat_r+0x20>)
 800a79a:	4604      	mov	r4, r0
 800a79c:	4608      	mov	r0, r1
 800a79e:	4611      	mov	r1, r2
 800a7a0:	602b      	str	r3, [r5, #0]
 800a7a2:	f7f6 fecb 	bl	800153c <_fstat>
 800a7a6:	1c43      	adds	r3, r0, #1
 800a7a8:	d102      	bne.n	800a7b0 <_fstat_r+0x1c>
 800a7aa:	682b      	ldr	r3, [r5, #0]
 800a7ac:	b103      	cbz	r3, 800a7b0 <_fstat_r+0x1c>
 800a7ae:	6023      	str	r3, [r4, #0]
 800a7b0:	bd38      	pop	{r3, r4, r5, pc}
 800a7b2:	bf00      	nop
 800a7b4:	2000164c 	.word	0x2000164c

0800a7b8 <_isatty_r>:
 800a7b8:	b538      	push	{r3, r4, r5, lr}
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	4d05      	ldr	r5, [pc, #20]	; (800a7d4 <_isatty_r+0x1c>)
 800a7be:	4604      	mov	r4, r0
 800a7c0:	4608      	mov	r0, r1
 800a7c2:	602b      	str	r3, [r5, #0]
 800a7c4:	f7f6 fec9 	bl	800155a <_isatty>
 800a7c8:	1c43      	adds	r3, r0, #1
 800a7ca:	d102      	bne.n	800a7d2 <_isatty_r+0x1a>
 800a7cc:	682b      	ldr	r3, [r5, #0]
 800a7ce:	b103      	cbz	r3, 800a7d2 <_isatty_r+0x1a>
 800a7d0:	6023      	str	r3, [r4, #0]
 800a7d2:	bd38      	pop	{r3, r4, r5, pc}
 800a7d4:	2000164c 	.word	0x2000164c

0800a7d8 <_init>:
 800a7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7da:	bf00      	nop
 800a7dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7de:	bc08      	pop	{r3}
 800a7e0:	469e      	mov	lr, r3
 800a7e2:	4770      	bx	lr

0800a7e4 <_fini>:
 800a7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7e6:	bf00      	nop
 800a7e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ea:	bc08      	pop	{r3}
 800a7ec:	469e      	mov	lr, r3
 800a7ee:	4770      	bx	lr
